
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001997c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00016174  08019ac0  08019ac0  00029ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0802fc34  0802fc34  0003fc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0802fc38  0802fc38  0003fc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000033c  20000008  0802fc3c  00040008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000025  20000344  0802ff78  00040344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000036c  0802ff9d  0004036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003b7c  20000380  0802ffae  00040380  2**2
                  ALLOC
  9 ._user_heap_stack 00001404  20003efc  0802ffae  00043efc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0004037d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00050000  2**2
                  ALLOC
 12 MB_MEM1       000001bc  20030028  20030028  00050000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00050000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  000403ad  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003bac9  00000000  00000000  000403f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009100  00000000  00000000  0007beb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000035e0  00000000  00000000  00084fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000028c7  00000000  00000000  000885a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00032d3e  00000000  00000000  0008ae67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00043220  00000000  00000000  000bdba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00103610  00000000  00000000  00100dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000efc8  00000000  00000000  002043d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000be  00000000  00000000  002133a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000380 	.word	0x20000380
 800015c:	00000000 	.word	0x00000000
 8000160:	08019aa4 	.word	0x08019aa4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000384 	.word	0x20000384
 800017c:	08019aa4 	.word	0x08019aa4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <DFS>:
int blob_sum_x, blob_sum_y;

int visited[N][N];  // Track visited cells

// DFS function
void DFS(int matrix[N][N], int x, int y, Point *sum, int *count) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
	// Check for out-of-bounds
	if (x < 0 || x >= N || y < 0 || y >= N) {
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f2c0 80bb 	blt.w	8000d84 <DFS+0x18c>
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b07      	cmp	r3, #7
 8000c12:	f300 80b7 	bgt.w	8000d84 <DFS+0x18c>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f2c0 80b3 	blt.w	8000d84 <DFS+0x18c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b07      	cmp	r3, #7
 8000c22:	f300 80af 	bgt.w	8000d84 <DFS+0x18c>
		return;
	}

	// Check if the cell has been visited or is below the threshold
	if (visited[x][y] || matrix[x][y] <= THRESHOLD) {
 8000c26:	495a      	ldr	r1, [pc, #360]	; (8000d90 <DFS+0x198>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	00da      	lsls	r2, r3, #3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f040 80a7 	bne.w	8000d88 <DFS+0x190>
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	015b      	lsls	r3, r3, #5
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c4c:	f340 809c 	ble.w	8000d88 <DFS+0x190>
		return;
	}

	visited[x][y] = 1;
 8000c50:	494f      	ldr	r1, [pc, #316]	; (8000d90 <DFS+0x198>)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	00da      	lsls	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	*count += 1;
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	601a      	str	r2, [r3, #0]
	sum->x += x;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	ed93 7a00 	vldr	s14, [r3]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	edc3 7a00 	vstr	s15, [r3]
	sum->y += y;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	edc3 7a01 	vstr	s15, [r3, #4]

	// Visit the neighboring cells
	if ((matrix[x][y] + VARIATION) > matrix[x - 1][y]) {
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	015b      	lsls	r3, r3, #5
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cac:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	015b      	lsls	r3, r3, #5
 8000cba:	68f9      	ldr	r1, [r7, #12]
 8000cbc:	440b      	add	r3, r1
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	db08      	blt.n	8000cda <DFS+0xe2>
		DFS(matrix, x - 1, y, sum, count);   // Left
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1e59      	subs	r1, r3, #1
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f7ff ff8f 	bl	8000bf8 <DFS>
	}
	if ((matrix[x][y] + VARIATION) > matrix[x + 1][y]) {
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	015b      	lsls	r3, r3, #5
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	015b      	lsls	r3, r3, #5
 8000cf2:	68f9      	ldr	r1, [r7, #12]
 8000cf4:	440b      	add	r3, r1
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	db08      	blt.n	8000d12 <DFS+0x11a>
		DFS(matrix, x + 1, y, sum, count);   // Right
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c59      	adds	r1, r3, #1
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f7ff ff73 	bl	8000bf8 <DFS>
	}
	if ((matrix[x][y] + VARIATION) > matrix[x][y - 1]) {
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	015b      	lsls	r3, r3, #5
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	015b      	lsls	r3, r3, #5
 8000d28:	68f9      	ldr	r1, [r7, #12]
 8000d2a:	440b      	add	r3, r1
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	3901      	subs	r1, #1
 8000d30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	db08      	blt.n	8000d4a <DFS+0x152>
		DFS(matrix, x, y - 1, sum, count);   // Up
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	1e5a      	subs	r2, r3, #1
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f7ff ff57 	bl	8000bf8 <DFS>
	}
	if ((matrix[x][y] + VARIATION) > matrix[x][y + 1]) {
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	015b      	lsls	r3, r3, #5
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d58:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	015b      	lsls	r3, r3, #5
 8000d60:	68f9      	ldr	r1, [r7, #12]
 8000d62:	440b      	add	r3, r1
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	3101      	adds	r1, #1
 8000d68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	db0c      	blt.n	8000d8a <DFS+0x192>
		DFS(matrix, x, y + 1, sum, count);   // Down
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f7ff ff3b 	bl	8000bf8 <DFS>
 8000d82:	e002      	b.n	8000d8a <DFS+0x192>
		return;
 8000d84:	bf00      	nop
 8000d86:	e000      	b.n	8000d8a <DFS+0x192>
		return;
 8000d88:	bf00      	nop
	}
}
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000039c 	.word	0x2000039c

08000d94 <find_centers_of_mass>:

int find_centers_of_mass(int matrix[N][N], Point *center_of_mass) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b090      	sub	sp, #64	; 0x40
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	// Initialize visited matrix
	for (int i = 0; i < N; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
 8000da2:	e013      	b.n	8000dcc <find_centers_of_mass+0x38>
		for (int j = 0; j < N; j++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
 8000da8:	e00a      	b.n	8000dc0 <find_centers_of_mass+0x2c>
			visited[i][j] = 0;
 8000daa:	4954      	ldr	r1, [pc, #336]	; (8000efc <find_centers_of_mass+0x168>)
 8000dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dae:	00da      	lsls	r2, r3, #3
 8000db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db2:	4413      	add	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < N; j++) {
 8000dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc2:	2b07      	cmp	r3, #7
 8000dc4:	ddf1      	ble.n	8000daa <find_centers_of_mass+0x16>
	for (int i = 0; i < N; i++) {
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc8:	3301      	adds	r3, #1
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
 8000dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dce:	2b07      	cmp	r3, #7
 8000dd0:	dde8      	ble.n	8000da4 <find_centers_of_mass+0x10>
		}
	}

	int blob_count = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Traverse the matrix
	bool not_finish_visiting = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (not_finish_visiting){
 8000ddc:	e083      	b.n	8000ee6 <find_centers_of_mass+0x152>
	    int newhigh , highx , highy;
	    newhigh=-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
    	for (int i = 0; i < N; i++) {
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	e043      	b.n	8000e72 <find_centers_of_mass+0xde>
    		for (int j = 0; j < N; j++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e03a      	b.n	8000e66 <find_centers_of_mass+0xd2>
    		    //printf("%d--%d---%d--%d\n",i,j,matrix[i][j] > newhigh && matrix[i][j] > THRESHOLD && !visited[i][j],(i==j)&&i==(N-1));
    			if (matrix[i][j] > newhigh && matrix[i][j] > THRESHOLD && !visited[i][j]) {
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	015b      	lsls	r3, r3, #5
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e00:	429a      	cmp	r2, r3
 8000e02:	da1f      	bge.n	8000e44 <find_centers_of_mass+0xb0>
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	015b      	lsls	r3, r3, #5
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e16:	dd15      	ble.n	8000e44 <find_centers_of_mass+0xb0>
 8000e18:	4938      	ldr	r1, [pc, #224]	; (8000efc <find_centers_of_mass+0x168>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	00da      	lsls	r2, r3, #3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	4413      	add	r3, r2
 8000e22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <find_centers_of_mass+0xb0>
                    newhigh=matrix[i][j];
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	015b      	lsls	r3, r3, #5
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
                    highx=i;highy=j;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	623b      	str	r3, [r7, #32]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	e00d      	b.n	8000e60 <find_centers_of_mass+0xcc>
    			}else if((i==j)&&i==(N-1)&&newhigh==-1){not_finish_visiting=false;}
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d109      	bne.n	8000e60 <find_centers_of_mass+0xcc>
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2b07      	cmp	r3, #7
 8000e50:	d106      	bne.n	8000e60 <find_centers_of_mass+0xcc>
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d102      	bne.n	8000e60 <find_centers_of_mass+0xcc>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    		for (int j = 0; j < N; j++) {
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b07      	cmp	r3, #7
 8000e6a:	ddc1      	ble.n	8000df0 <find_centers_of_mass+0x5c>
    	for (int i = 0; i < N; i++) {
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2b07      	cmp	r3, #7
 8000e76:	ddb8      	ble.n	8000dea <find_centers_of_mass+0x56>
    		}
    	}
		Point sum = { 0, 0 };
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
		int count = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
		DFS(matrix, highx, highy, &sum, &count);
 8000e88:	f107 020c 	add.w	r2, r7, #12
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4613      	mov	r3, r2
 8000e94:	69fa      	ldr	r2, [r7, #28]
 8000e96:	6a39      	ldr	r1, [r7, #32]
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fead 	bl	8000bf8 <DFS>
		if (count >= MIN_BLOB_SIZE) {
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	dd20      	ble.n	8000ee6 <find_centers_of_mass+0x152>
			center_of_mass[blob_count].x = sum.x / count;
 8000ea4:	edd7 6a03 	vldr	s13, [r7, #12]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	4413      	add	r3, r2
 8000eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ebe:	edc3 7a00 	vstr	s15, [r3]
			center_of_mass[blob_count].y = sum.y / count;
 8000ec2:	edd7 6a04 	vldr	s13, [r7, #16]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000edc:	edc3 7a01 	vstr	s15, [r3, #4]
			blob_count++;
 8000ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (not_finish_visiting){
 8000ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f47f af77 	bne.w	8000dde <find_centers_of_mass+0x4a>
		}
		//printf("Blob dectected %d\n",blob_count);

	}

	return blob_count;
 8000ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3738      	adds	r7, #56	; 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000039c 	.word	0x2000039c

08000f00 <find_proportional_average>:

// Function to find the proportional average value of a blob around its center of mass
float find_proportional_average(int matrix[N][N], Point center_of_mass) {
 8000f00:	b480      	push	{r7}
 8000f02:	b08d      	sub	sp, #52	; 0x34
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	eeb0 7a40 	vmov.f32	s14, s0
 8000f0c:	eef0 7a60 	vmov.f32	s15, s1
 8000f10:	ed87 7a01 	vstr	s14, [r7, #4]
 8000f14:	edc7 7a02 	vstr	s15, [r7, #8]
	int x = (int) (center_of_mass.x);
 8000f18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f20:	ee17 3a90 	vmov	r3, s15
 8000f24:	61fb      	str	r3, [r7, #28]
	int y = (int) (center_of_mass.y);
 8000f26:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	61bb      	str	r3, [r7, #24]
	float sum = 0.0f;
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
	float weight_sum = 0.0f;
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28

	// Iterate through a 2x2 grid around the center of mass
	for (int dx = 0; dx <= 1; dx++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
 8000f44:	e076      	b.n	8001034 <find_proportional_average+0x134>
		for (int dy = 0; dy <= 1; dy++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	e06d      	b.n	8001028 <find_proportional_average+0x128>
			// Check if the cell is within the matrix bounds and belongs to the blob (above threshold)
			if (x + dx
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	4413      	add	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db65      	blt.n	8001022 <find_proportional_average+0x122>
					>= 0&& x + dx < N && y + dy >= 0 && y + dy < N && matrix[x + dx][y + dy] >= THRESHOLD) {
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	dc60      	bgt.n	8001022 <find_proportional_average+0x122>
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	4413      	add	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db5b      	blt.n	8001022 <find_proportional_average+0x122>
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	4413      	add	r3, r2
 8000f70:	2b07      	cmp	r3, #7
 8000f72:	dc56      	bgt.n	8001022 <find_proportional_average+0x122>
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	4413      	add	r3, r2
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	69b9      	ldr	r1, [r7, #24]
 8000f82:	6a3a      	ldr	r2, [r7, #32]
 8000f84:	440a      	add	r2, r1
 8000f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f8e:	db48      	blt.n	8001022 <find_proportional_average+0x122>
				// Calculate the weight based on the distance from the center of mass
				float weight = (
						dx == 0 ?
								1.0f - fabsf(y + dy - center_of_mass.y) :
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d111      	bne.n	8000fba <find_proportional_average+0xba>
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fac:	eef0 7ae7 	vabs.f32	s15, s15
 8000fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb8:	e010      	b.n	8000fdc <find_proportional_average+0xdc>
								1.0f - fabsf(x + dx - center_of_mass.x));
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	4413      	add	r3, r2
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd0:	eef0 7ae7 	vabs.f32	s15, s15
								1.0f - fabsf(y + dy - center_of_mass.y) :
 8000fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
				float weight = (
 8000fdc:	edc7 7a05 	vstr	s15, [r7, #20]
				sum += (float) matrix[x + dx][y + dy] * weight; // Sum the weighted values
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	4413      	add	r3, r2
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	69b9      	ldr	r1, [r7, #24]
 8000fee:	6a3a      	ldr	r2, [r7, #32]
 8000ff0:	440a      	add	r2, r1
 8000ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001006:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800100a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				weight_sum += weight; // Sum the weights for normalization
 8001012:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001016:	edd7 7a05 	vldr	s15, [r7, #20]
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		for (int dy = 0; dy <= 1; dy++) {
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	3301      	adds	r3, #1
 8001026:	623b      	str	r3, [r7, #32]
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	2b01      	cmp	r3, #1
 800102c:	dd8e      	ble.n	8000f4c <find_proportional_average+0x4c>
	for (int dx = 0; dx <= 1; dx++) {
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	2b01      	cmp	r3, #1
 8001038:	dd85      	ble.n	8000f46 <find_proportional_average+0x46>
                #endif
			}
		}
	}

	return sum / weight_sum; // Return the proportional average value
 800103a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800103e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001042:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001046:	eef0 7a66 	vmov.f32	s15, s13
}
 800104a:	eeb0 0a67 	vmov.f32	s0, s15
 800104e:	3734      	adds	r7, #52	; 0x34
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <parse_frame>:
// Function to parse a frame and extract blob information
FrameInfo parse_frame(int matrix[N][N], float deltaX, float deltaY) {
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 800105e:	af00      	add	r7, sp, #0
 8001060:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001064:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001068:	6018      	str	r0, [r3, #0]
 800106a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800106e:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001072:	6019      	str	r1, [r3, #0]
 8001074:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001078:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800107c:	ed83 0a00 	vstr	s0, [r3]
 8001080:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001084:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001088:	edc3 0a00 	vstr	s1, [r3]
	FrameInfo frame_info;
	Point centers_of_mass[MAX_BLOBS];

	frame_info.num_blobs = find_centers_of_mass(matrix, centers_of_mass);
 800108c:	f107 0210 	add.w	r2, r7, #16
 8001090:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001094:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001098:	4611      	mov	r1, r2
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f7ff fe7a 	bl	8000d94 <find_centers_of_mass>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80010a6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80010aa:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

	frame_info.delta_X = deltaX;
 80010ae:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80010b2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80010b6:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 80010ba:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	frame_info.delta_Y = deltaY;
 80010c4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80010c8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80010cc:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 80010d0:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	for (int i = 0; i < frame_info.num_blobs; i++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80010e0:	e064      	b.n	80011ac <parse_frame+0x154>
		frame_info.Blobs[i].center_of_mass = centers_of_mass[i];
 80010e2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80010e6:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 80010ea:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4419      	add	r1, r3
 80010f8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80010fc:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8001100:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8001104:	460c      	mov	r4, r1
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800110e:	e884 0003 	stmia.w	r4, {r0, r1}
		frame_info.Blobs[i].proportional_average = find_proportional_average(
 8001112:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001116:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800111a:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 800111e:	00d1      	lsls	r1, r2, #3
 8001120:	4419      	add	r1, r3
 8001122:	ed91 7a00 	vldr	s14, [r1]
 8001126:	00d2      	lsls	r2, r2, #3
 8001128:	4413      	add	r3, r2
 800112a:	3304      	adds	r3, #4
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001134:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001138:	eeb0 0a47 	vmov.f32	s0, s14
 800113c:	eef0 0a67 	vmov.f32	s1, s15
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f7ff fedd 	bl	8000f00 <find_proportional_average>
 8001146:	eef0 7a40 	vmov.f32	s15, s0
 800114a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800114e:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 8001152:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	3308      	adds	r3, #8
 8001162:	edc3 7a00 	vstr	s15, [r3]
				matrix, centers_of_mass[i]);
		frame_info.Blobs[i].direction = 0.0f; // Set default direction as 0
 8001166:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800116a:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 800116e:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	440b      	add	r3, r1
 800117c:	3310      	adds	r3, #16
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
		frame_info.Blobs[i].velocity = 0.0f;  // Set default velocity as 0
 8001184:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001188:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 800118c:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	3314      	adds	r3, #20
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < frame_info.num_blobs; i++) {
 80011a2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80011a6:	3301      	adds	r3, #1
 80011a8:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80011ac:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80011b0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80011b4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80011b8:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80011bc:	429a      	cmp	r2, r3
 80011be:	db90      	blt.n	80010e2 <parse_frame+0x8a>
        printf("Blob %d center of mass: (%.5f %.5f)\n", i + 1, frame_info.Blobs[i].center_of_mass.x, frame_info.Blobs[i].center_of_mass.y);
        printf("Proportional average for blob %d: %.5f\n", i + 1, frame_info.Blobs[i].proportional_average);
#endif
	}

	return frame_info;
 80011c0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80011c4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80011ce:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 7301 	mov.w	r3, #516	; 0x204
 80011da:	461a      	mov	r2, r3
 80011dc:	f016 fc4f 	bl	8017a7e <memcpy>
}
 80011e0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80011e4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f507 7731 	add.w	r7, r7, #708	; 0x2c4
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}

080011f2 <next_permutation>:

bool next_permutation(int *first, int *last) {
 80011f2:	b480      	push	{r7}
 80011f4:	b087      	sub	sp, #28
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
	if (first == last)
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d101      	bne.n	8001208 <next_permutation+0x16>
		return false;
 8001204:	2300      	movs	r3, #0
 8001206:	e04a      	b.n	800129e <next_permutation+0xac>
	int *i = last - 1;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	3b04      	subs	r3, #4
 800120c:	617b      	str	r3, [r7, #20]
	while (i > first && *(i - 1) >= *i)
 800120e:	e002      	b.n	8001216 <next_permutation+0x24>
		--i;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3b04      	subs	r3, #4
 8001214:	617b      	str	r3, [r7, #20]
	while (i > first && *(i - 1) >= *i)
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d906      	bls.n	800122c <next_permutation+0x3a>
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3b04      	subs	r3, #4
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	daf1      	bge.n	8001210 <next_permutation+0x1e>
	if (i == first)
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	d101      	bne.n	8001238 <next_permutation+0x46>
		return false;
 8001234:	2300      	movs	r3, #0
 8001236:	e032      	b.n	800129e <next_permutation+0xac>
	int *j = last - 1;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3b04      	subs	r3, #4
 800123c:	613b      	str	r3, [r7, #16]
	while (*j <= *(i - 1))
 800123e:	e002      	b.n	8001246 <next_permutation+0x54>
		--j;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	3b04      	subs	r3, #4
 8001244:	613b      	str	r3, [r7, #16]
	while (*j <= *(i - 1))
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3b04      	subs	r3, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	ddf5      	ble.n	8001240 <next_permutation+0x4e>
	int temp = *(i - 1);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800125a:	60fb      	str	r3, [r7, #12]
	*(i - 1) = *j;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3b04      	subs	r3, #4
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	601a      	str	r2, [r3, #0]
	*j = temp;
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	601a      	str	r2, [r3, #0]
	for (j = last - 1; i < j; ++i, --j) {
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3b04      	subs	r3, #4
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	e00f      	b.n	8001294 <next_permutation+0xa2>
		temp = *i;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
		*i = *j;
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	601a      	str	r2, [r3, #0]
		*j = temp;
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	601a      	str	r2, [r3, #0]
	for (j = last - 1; i < j; ++i, --j) {
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3304      	adds	r3, #4
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	3b04      	subs	r3, #4
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d3eb      	bcc.n	8001274 <next_permutation+0x82>
	}
	return true;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <link_latest_frame_to_previous>:

void link_latest_frame_to_previous(FIFObuffer *fifobuffer) {
 80012ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b0:	b097      	sub	sp, #92	; 0x5c
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
	if (fifobuffer->count == 0) {
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80012bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8183 	beq.w	80015cc <link_latest_frame_to_previous+0x320>
		return;
	}

	FrameInfo *latest_frame = &(fifobuffer->buffer[fifobuffer->rear]);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80012cc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80012d0:	4613      	mov	r3, r2
 80012d2:	01db      	lsls	r3, r3, #7
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int second_latest_frame_index = (fifobuffer->rear + FIFO_SIZE - 1)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80012e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80012e8:	f103 0227 	add.w	r2, r3, #39	; 0x27
 80012ec:	4bba      	ldr	r3, [pc, #744]	; (80015d8 <link_latest_frame_to_previous+0x32c>)
 80012ee:	fb83 1302 	smull	r1, r3, r3, r2
 80012f2:	1119      	asrs	r1, r3, #4
 80012f4:	17d3      	asrs	r3, r2, #31
 80012f6:	1ac9      	subs	r1, r1, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
			% FIFO_SIZE;
	FrameInfo *second_latest_frame =
 8001304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001306:	4613      	mov	r3, r2
 8001308:	01db      	lsls	r3, r3, #7
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
			&(fifobuffer->buffer[second_latest_frame_index]);

	if (fifobuffer->count == 1) {
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800131a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800131e:	2b01      	cmp	r3, #1
 8001320:	d125      	bne.n	800136e <link_latest_frame_to_previous+0xc2>
		for (int i = 0; i < latest_frame->num_blobs; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	657b      	str	r3, [r7, #84]	; 0x54
 8001326:	e01b      	b.n	8001360 <link_latest_frame_to_previous+0xb4>
			fifobuffer->current_ID++;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800132e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001332:	3301      	adds	r3, #1
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 800133a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
			latest_frame->Blobs[i].ID = fifobuffer->current_ID;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001344:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8001348:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800134a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4403      	add	r3, r0
 8001356:	330c      	adds	r3, #12
 8001358:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < latest_frame->num_blobs; i++) {
 800135a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135c:	3301      	adds	r3, #1
 800135e:	657b      	str	r3, [r7, #84]	; 0x54
 8001360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001362:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001368:	429a      	cmp	r2, r3
 800136a:	dbdd      	blt.n	8001328 <link_latest_frame_to_previous+0x7c>
 800136c:	e12f      	b.n	80015ce <link_latest_frame_to_previous+0x322>
		}
	} else {
 800136e:	466b      	mov	r3, sp
 8001370:	60bb      	str	r3, [r7, #8]
		int num_blobs = latest_frame->num_blobs;
 8001372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001374:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
		int num_blobs_prev = second_latest_frame->num_blobs;
 800137a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
		float min_distance = INFINITY;
 8001382:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8001386:	653b      	str	r3, [r7, #80]	; 0x50
		int min_permutation[num_blobs];
 8001388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800138a:	1e4b      	subs	r3, r1, #1
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
 800138e:	460a      	mov	r2, r1
 8001390:	2300      	movs	r3, #0
 8001392:	603a      	str	r2, [r7, #0]
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	0143      	lsls	r3, r0, #5
 80013a2:	6838      	ldr	r0, [r7, #0]
 80013a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013a8:	6838      	ldr	r0, [r7, #0]
 80013aa:	0142      	lsls	r2, r0, #5
 80013ac:	460a      	mov	r2, r1
 80013ae:	2300      	movs	r3, #0
 80013b0:	4692      	mov	sl, r2
 80013b2:	469b      	mov	fp, r3
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80013c0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80013c4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	3307      	adds	r3, #7
 80013ce:	08db      	lsrs	r3, r3, #3
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	ebad 0d03 	sub.w	sp, sp, r3
 80013d6:	466b      	mov	r3, sp
 80013d8:	3303      	adds	r3, #3
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
		int permutation[num_blobs];
 80013e0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80013e2:	1e73      	subs	r3, r6, #1
 80013e4:	623b      	str	r3, [r7, #32]
 80013e6:	4632      	mov	r2, r6
 80013e8:	2300      	movs	r3, #0
 80013ea:	4690      	mov	r8, r2
 80013ec:	4699      	mov	r9, r3
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80013fa:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80013fe:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001402:	4632      	mov	r2, r6
 8001404:	2300      	movs	r3, #0
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	016b      	lsls	r3, r5, #5
 8001414:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001418:	0162      	lsls	r2, r4, #5
 800141a:	4633      	mov	r3, r6
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3307      	adds	r3, #7
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	ebad 0d03 	sub.w	sp, sp, r3
 8001428:	466b      	mov	r3, sp
 800142a:	3303      	adds	r3, #3
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < num_blobs; i++) {
 8001432:	2300      	movs	r3, #0
 8001434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001436:	e007      	b.n	8001448 <link_latest_frame_to_previous+0x19c>
			permutation[i] = i;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800143c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800143e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 0; i < num_blobs; i++) {
 8001442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001444:	3301      	adds	r3, #1
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf3      	blt.n	8001438 <link_latest_frame_to_previous+0x18c>
		}

		do {
			float distance_sum = 0.0f;
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	64bb      	str	r3, [r7, #72]	; 0x48
			for (int i = 0; i < num_blobs; i++) {
 8001456:	2300      	movs	r3, #0
 8001458:	647b      	str	r3, [r7, #68]	; 0x44
 800145a:	e053      	b.n	8001504 <link_latest_frame_to_previous+0x258>
				if (permutation[i] < num_blobs_prev) {
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001466:	429a      	cmp	r2, r3
 8001468:	dd49      	ble.n	80014fe <link_latest_frame_to_previous+0x252>
					float dx =
							latest_frame->Blobs[i].center_of_mass.x
 800146a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800146c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	ed93 7a00 	vldr	s14, [r3]
									- second_latest_frame->Blobs[permutation[i]].center_of_mass.x;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001480:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	edd3 7a00 	vldr	s15, [r3]
					float dx =
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	edc7 7a06 	vstr	s15, [r7, #24]
					float dy =
							latest_frame->Blobs[i].center_of_mass.y
 800149c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800149e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	3304      	adds	r3, #4
 80014ac:	ed93 7a00 	vldr	s14, [r3]
									- second_latest_frame->Blobs[permutation[i]].center_of_mass.y;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	440b      	add	r3, r1
 80014c4:	3304      	adds	r3, #4
 80014c6:	edd3 7a00 	vldr	s15, [r3]
					float dy =
 80014ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ce:	edc7 7a05 	vstr	s15, [r7, #20]
					distance_sum += sqrtf(dx * dx + dy * dy);
 80014d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014d6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014da:	edd7 7a05 	vldr	s15, [r7, #20]
 80014de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	f018 f93d 	bl	8019768 <sqrtf>
 80014ee:	eeb0 7a40 	vmov.f32	s14, s0
 80014f2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			for (int i = 0; i < num_blobs; i++) {
 80014fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001500:	3301      	adds	r3, #1
 8001502:	647b      	str	r3, [r7, #68]	; 0x44
 8001504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001508:	429a      	cmp	r2, r3
 800150a:	dba7      	blt.n	800145c <link_latest_frame_to_previous+0x1b0>
				}
			}

			if (distance_sum < min_distance) {
 800150c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001510:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	d508      	bpl.n	8001530 <link_latest_frame_to_previous+0x284>
				min_distance = distance_sum;
 800151e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001520:	653b      	str	r3, [r7, #80]	; 0x50
				memcpy(min_permutation, permutation, sizeof(permutation));
 8001522:	4633      	mov	r3, r6
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	461a      	mov	r2, r3
 8001528:	69f9      	ldr	r1, [r7, #28]
 800152a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800152c:	f016 faa7 	bl	8017a7e <memcpy>
			}
		} while (next_permutation(permutation, permutation + num_blobs));
 8001530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	4413      	add	r3, r2
 8001538:	4619      	mov	r1, r3
 800153a:	69f8      	ldr	r0, [r7, #28]
 800153c:	f7ff fe59 	bl	80011f2 <next_permutation>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d184      	bne.n	8001450 <link_latest_frame_to_previous+0x1a4>

		for (int i = 0; i < num_blobs; i++) {
 8001546:	2300      	movs	r3, #0
 8001548:	643b      	str	r3, [r7, #64]	; 0x40
 800154a:	e038      	b.n	80015be <link_latest_frame_to_previous+0x312>
			if (min_permutation[i] < num_blobs_prev) {
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001556:	429a      	cmp	r2, r3
 8001558:	dd15      	ble.n	8001586 <link_latest_frame_to_previous+0x2da>
				latest_frame->Blobs[i].ID =
						second_latest_frame->Blobs[min_permutation[i]].ID;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800155e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001562:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	330c      	adds	r3, #12
 8001570:	6819      	ldr	r1, [r3, #0]
				latest_frame->Blobs[i].ID =
 8001572:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4403      	add	r3, r0
 8001580:	330c      	adds	r3, #12
 8001582:	6019      	str	r1, [r3, #0]
 8001584:	e018      	b.n	80015b8 <link_latest_frame_to_previous+0x30c>
			} else {
				fifobuffer->current_ID++;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800158c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001590:	3301      	adds	r3, #1
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8001598:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
				latest_frame->Blobs[i].ID = fifobuffer->current_ID;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80015a2:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80015a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80015a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4403      	add	r3, r0
 80015b4:	330c      	adds	r3, #12
 80015b6:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < num_blobs; i++) {
 80015b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ba:	3301      	adds	r3, #1
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40
 80015be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dbc2      	blt.n	800154c <link_latest_frame_to_previous+0x2a0>
 80015c6:	f8d7 d008 	ldr.w	sp, [r7, #8]
 80015ca:	e000      	b.n	80015ce <link_latest_frame_to_previous+0x322>
		return;
 80015cc:	bf00      	nop
			}
		}
	}
}
 80015ce:	375c      	adds	r7, #92	; 0x5c
 80015d0:	46bd      	mov	sp, r7
 80015d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015d6:	bf00      	nop
 80015d8:	66666667 	.word	0x66666667
 80015dc:	00000000 	.word	0x00000000

080015e0 <calculate_blob_velocity_and_direction>:


void calculate_blob_velocity_and_direction(FIFObuffer *fifobuffer) {
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b090      	sub	sp, #64	; 0x40
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if (fifobuffer->count < 2) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80015ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	f340 8167 	ble.w	80018c6 <calculate_blob_velocity_and_direction+0x2e6>
		return;
	}

	FrameInfo *latest_frame = &(fifobuffer->buffer[fifobuffer->rear]);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80015fe:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001602:	4613      	mov	r3, r2
 8001604:	01db      	lsls	r3, r3, #7
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
	int second_latest_frame_index = (fifobuffer->rear + FIFO_SIZE - 1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001616:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800161a:	f103 0227 	add.w	r2, r3, #39	; 0x27
 800161e:	4bb0      	ldr	r3, [pc, #704]	; (80018e0 <calculate_blob_velocity_and_direction+0x300>)
 8001620:	fb83 1302 	smull	r1, r3, r3, r2
 8001624:	1119      	asrs	r1, r3, #4
 8001626:	17d3      	asrs	r3, r2, #31
 8001628:	1ac9      	subs	r1, r1, r3
 800162a:	460b      	mov	r3, r1
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	623b      	str	r3, [r7, #32]
			% FIFO_SIZE;
	FrameInfo *second_latest_frame =
 8001636:	6a3a      	ldr	r2, [r7, #32]
 8001638:	4613      	mov	r3, r2
 800163a:	01db      	lsls	r3, r3, #7
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	61fb      	str	r3, [r7, #28]
			&(fifobuffer->buffer[second_latest_frame_index]);

	for (int i = 0; i < latest_frame->num_blobs; i++) {
 8001646:	2300      	movs	r3, #0
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800164a:	e134      	b.n	80018b6 <calculate_blob_velocity_and_direction+0x2d6>
		int blob_id = latest_frame->Blobs[i].ID;
 800164c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800164e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	330c      	adds	r3, #12
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	61bb      	str	r3, [r7, #24]
		float sum_velocity = 0.0f;
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
		float sum_direction = 0.0f;
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
		float weight_sum = 1.0f;
 800166c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001670:	633b      	str	r3, [r7, #48]	; 0x30

		// Calculate the current velocity and direction using the latest two frames
		for (int j = 0; j < second_latest_frame->num_blobs; j++) {
 8001672:	2300      	movs	r3, #0
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001676:	e083      	b.n	8001780 <calculate_blob_velocity_and_direction+0x1a0>
			if (second_latest_frame->Blobs[j].ID == blob_id) {
 8001678:	69f9      	ldr	r1, [r7, #28]
 800167a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	330c      	adds	r3, #12
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	429a      	cmp	r2, r3
 800168e:	d174      	bne.n	800177a <calculate_blob_velocity_and_direction+0x19a>
				float dx = latest_frame->Blobs[i].center_of_mass.x
 8001690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	ed93 7a00 	vldr	s14, [r3]
						- second_latest_frame->Blobs[j].center_of_mass.x;
 80016a2:	69f9      	ldr	r1, [r7, #28]
 80016a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	edd3 7a00 	vldr	s15, [r3]
				float dx = latest_frame->Blobs[i].center_of_mass.x
 80016b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b8:	edc7 7a05 	vstr	s15, [r7, #20]
				float dy = latest_frame->Blobs[i].center_of_mass.y
 80016bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	3304      	adds	r3, #4
 80016cc:	ed93 7a00 	vldr	s14, [r3]
						- second_latest_frame->Blobs[j].center_of_mass.y;
 80016d0:	69f9      	ldr	r1, [r7, #28]
 80016d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3304      	adds	r3, #4
 80016e0:	edd3 7a00 	vldr	s15, [r3]
				float dy = latest_frame->Blobs[i].center_of_mass.y
 80016e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e8:	edc7 7a04 	vstr	s15, [r7, #16]
				float distance = sqrtf(dx * dx + dy * dy);
 80016ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	f018 f830 	bl	8019768 <sqrtf>
 8001708:	ed87 0a03 	vstr	s0, [r7, #12]
				float direction = atan2f(dy, dx);
 800170c:	edd7 0a05 	vldr	s1, [r7, #20]
 8001710:	ed97 0a04 	vldr	s0, [r7, #16]
 8001714:	f018 f826 	bl	8019764 <atan2f>
 8001718:	ed87 0a02 	vstr	s0, [r7, #8]
				sum_velocity += distance;
 800171c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001720:	edd7 7a03 	vldr	s15, [r7, #12]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				sum_direction += direction * 360.0f / 2 / M_PI;
 800172c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800172e:	f7fe fee3 	bl	80004f8 <__aeabi_f2d>
 8001732:	4604      	mov	r4, r0
 8001734:	460d      	mov	r5, r1
 8001736:	edd7 7a02 	vldr	s15, [r7, #8]
 800173a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80018e4 <calculate_blob_velocity_and_direction+0x304>
 800173e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001742:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001746:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800174a:	ee16 0a90 	vmov	r0, s13
 800174e:	f7fe fed3 	bl	80004f8 <__aeabi_f2d>
 8001752:	a35f      	add	r3, pc, #380	; (adr r3, 80018d0 <calculate_blob_velocity_and_direction+0x2f0>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7ff f850 	bl	80007fc <__aeabi_ddiv>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7fe fd6a 	bl	800023c <__adddf3>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff f9f2 	bl	8000b58 <__aeabi_d2f>
 8001774:	4603      	mov	r3, r0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 8001778:	e009      	b.n	800178e <calculate_blob_velocity_and_direction+0x1ae>
		for (int j = 0; j < second_latest_frame->num_blobs; j++) {
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	3301      	adds	r3, #1
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001788:	429a      	cmp	r2, r3
 800178a:	f6ff af75 	blt.w	8001678 <calculate_blob_velocity_and_direction+0x98>
			}
		}

		// Replace the latest velocity and direction by tracing back into the previous frame
		for (int j = 0; j < second_latest_frame->num_blobs; j++) {
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
 8001792:	e067      	b.n	8001864 <calculate_blob_velocity_and_direction+0x284>
			if (second_latest_frame->Blobs[j].ID == blob_id) {
 8001794:	69f9      	ldr	r1, [r7, #28]
 8001796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	330c      	adds	r3, #12
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d158      	bne.n	800185e <calculate_blob_velocity_and_direction+0x27e>
				sum_velocity += second_latest_frame->Blobs[j].velocity * 0.4;
 80017ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017ae:	f7fe fea3 	bl	80004f8 <__aeabi_f2d>
 80017b2:	4604      	mov	r4, r0
 80017b4:	460d      	mov	r5, r1
 80017b6:	69f9      	ldr	r1, [r7, #28]
 80017b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	3314      	adds	r3, #20
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fe95 	bl	80004f8 <__aeabi_f2d>
 80017ce:	a342      	add	r3, pc, #264	; (adr r3, 80018d8 <calculate_blob_velocity_and_direction+0x2f8>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe fee8 	bl	80005a8 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4620      	mov	r0, r4
 80017de:	4629      	mov	r1, r5
 80017e0:	f7fe fd2c 	bl	800023c <__adddf3>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f9b4 	bl	8000b58 <__aeabi_d2f>
 80017f0:	4603      	mov	r3, r0
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
				sum_direction += second_latest_frame->Blobs[j].direction * 0.4;
 80017f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017f6:	f7fe fe7f 	bl	80004f8 <__aeabi_f2d>
 80017fa:	4604      	mov	r4, r0
 80017fc:	460d      	mov	r5, r1
 80017fe:	69f9      	ldr	r1, [r7, #28]
 8001800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	3310      	adds	r3, #16
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe71 	bl	80004f8 <__aeabi_f2d>
 8001816:	a330      	add	r3, pc, #192	; (adr r3, 80018d8 <calculate_blob_velocity_and_direction+0x2f8>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fec4 	bl	80005a8 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fd08 	bl	800023c <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f990 	bl	8000b58 <__aeabi_d2f>
 8001838:	4603      	mov	r3, r0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
				weight_sum += 0.4;
 800183c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800183e:	f7fe fe5b 	bl	80004f8 <__aeabi_f2d>
 8001842:	a325      	add	r3, pc, #148	; (adr r3, 80018d8 <calculate_blob_velocity_and_direction+0x2f8>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	f7fe fcf8 	bl	800023c <__adddf3>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f980 	bl	8000b58 <__aeabi_d2f>
 8001858:	4603      	mov	r3, r0
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
				break;
 800185c:	e008      	b.n	8001870 <calculate_blob_velocity_and_direction+0x290>
		for (int j = 0; j < second_latest_frame->num_blobs; j++) {
 800185e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001860:	3301      	adds	r3, #1
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800186a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800186c:	429a      	cmp	r2, r3
 800186e:	db91      	blt.n	8001794 <calculate_blob_velocity_and_direction+0x1b4>
			}
		}

		latest_frame->Blobs[i].velocity = sum_velocity / weight_sum;
 8001870:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001874:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800187e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3314      	adds	r3, #20
 800188c:	edc3 7a00 	vstr	s15, [r3]
		latest_frame->Blobs[i].direction = sum_direction / weight_sum;
 8001890:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001894:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800189e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3310      	adds	r3, #16
 80018ac:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < latest_frame->num_blobs; i++) {
 80018b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b2:	3301      	adds	r3, #1
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80018bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018be:	429a      	cmp	r2, r3
 80018c0:	f6ff aec4 	blt.w	800164c <calculate_blob_velocity_and_direction+0x6c>
 80018c4:	e000      	b.n	80018c8 <calculate_blob_velocity_and_direction+0x2e8>
		return;
 80018c6:	bf00      	nop
	}
}
 80018c8:	3740      	adds	r7, #64	; 0x40
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bdb0      	pop	{r4, r5, r7, pc}
 80018ce:	bf00      	nop
 80018d0:	54442d18 	.word	0x54442d18
 80018d4:	400921fb 	.word	0x400921fb
 80018d8:	9999999a 	.word	0x9999999a
 80018dc:	3fd99999 	.word	0x3fd99999
 80018e0:	66666667 	.word	0x66666667
 80018e4:	43b40000 	.word	0x43b40000

080018e8 <init_fifo>:

// Function to initialize the FIFObuffer
void init_fifo(FIFObuffer *fifo) {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	fifo->front = 0;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80018f6:	461a      	mov	r2, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fifo->rear = -1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001904:	461a      	mov	r2, r3
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	fifo->count = 0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001914:	461a      	mov	r2, r3
 8001916:	2300      	movs	r3, #0
 8001918:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	fifo->current_ID = 0; // Initialize current_ID to zero
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001922:	461a      	mov	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <is_full>:

// Function to check if the FIFObuffer is full
bool is_full(FIFObuffer *fifo) {
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	return (fifo->count == FIFO_SIZE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001944:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001948:	2b28      	cmp	r3, #40	; 0x28
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <is_empty>:

// Function to check if the FIFObuffer is empty
bool is_empty(FIFObuffer *fifo) {
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return (fifo->count == 0);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800196c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <dequeue>:

// Function to remove the oldest FrameInfo from the FIFObuffer
void dequeue(FIFObuffer *fifo) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	if (!is_empty(fifo)) {
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffe4 	bl	800195e <is_empty>
 8001996:	4603      	mov	r3, r0
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d020      	beq.n	80019e4 <dequeue+0x5c>
		fifo->front = (fifo->front + 1) % FIFO_SIZE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80019a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80019ac:	1c59      	adds	r1, r3, #1
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <dequeue+0x64>)
 80019b0:	fb83 2301 	smull	r2, r3, r3, r1
 80019b4:	111a      	asrs	r2, r3, #4
 80019b6:	17cb      	asrs	r3, r1, #31
 80019b8:	1ad2      	subs	r2, r2, r3
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	1aca      	subs	r2, r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80019ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		fifo->count--;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80019d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80019d8:	3b01      	subs	r3, #1
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 80019e0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	}
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	66666667 	.word	0x66666667

080019f0 <enqueue>:

// Function to add a new FrameInfo to the FIFObuffer
void enqueue(FIFObuffer *fifo, FrameInfo frame_info) {
 80019f0:	b084      	sub	sp, #16
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	f107 0014 	add.w	r0, r7, #20
 80019fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (is_full(fifo)) {
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff97 	bl	8001936 <is_full>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <enqueue+0x24>
		dequeue(fifo);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffba 	bl	8001988 <dequeue>
	}
	fifo->rear = (fifo->rear + 1) % FIFO_SIZE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001a1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a1e:	1c59      	adds	r1, r3, #1
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <enqueue+0xa8>)
 8001a22:	fb83 2301 	smull	r2, r3, r3, r1
 8001a26:	111a      	asrs	r2, r3, #4
 8001a28:	17cb      	asrs	r3, r1, #31
 8001a2a:	1ad2      	subs	r2, r2, r3
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	1aca      	subs	r2, r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001a3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fifo->buffer[fifo->rear] = frame_info;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001a46:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	01db      	lsls	r3, r3, #7
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	4618      	mov	r0, r3
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001a60:	4619      	mov	r1, r3
 8001a62:	f016 f80c 	bl	8017a7e <memcpy>
	fifo->count++;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001a6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001a70:	3301      	adds	r3, #1
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8001a78:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

	link_latest_frame_to_previous(fifo);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fc15 	bl	80012ac <link_latest_frame_to_previous>
	calculate_blob_velocity_and_direction(fifo);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fdac 	bl	80015e0 <calculate_blob_velocity_and_direction>

#if (!PYTHON_VIEWER&&DEBUG)
    printf("Enqueued FrameInfo at address: %p\n",
            (void*) &(fifo->buffer[fifo->rear]));
#endif
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a92:	b004      	add	sp, #16
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	66666667 	.word	0x66666667

08001a9c <print_matrix>:
		index = (index + 1) % FIFO_SIZE;
	}
}

// Function to print the matrix on the console
void print_matrix(int matrix[N][N]) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
#if (1)
	printf("##Matrix##|");
 8001aa4:	4813      	ldr	r0, [pc, #76]	; (8001af4 <print_matrix+0x58>)
 8001aa6:	f015 fe1d 	bl	80176e4 <iprintf>
    for (int i = 0; i < N; i++) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e016      	b.n	8001ade <print_matrix+0x42>
        for (int j = 0; j < N; j++) {
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	e00d      	b.n	8001ad2 <print_matrix+0x36>
            printf("%d|", matrix[i][j]);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	015b      	lsls	r3, r3, #5
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <print_matrix+0x5c>)
 8001ac8:	f015 fe0c 	bl	80176e4 <iprintf>
        for (int j = 0; j < N; j++) {
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b07      	cmp	r3, #7
 8001ad6:	ddee      	ble.n	8001ab6 <print_matrix+0x1a>
    for (int i = 0; i < N; i++) {
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b07      	cmp	r3, #7
 8001ae2:	dde5      	ble.n	8001ab0 <print_matrix+0x14>
        }
    }
    printf("\n");
 8001ae4:	200a      	movs	r0, #10
 8001ae6:	f015 fe0f 	bl	8017708 <putchar>
        printf("\n");
    }

#endif
#endif
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	08019ae4 	.word	0x08019ae4
 8001af8:	08019af0 	.word	0x08019af0

08001afc <print_frame_info_simple>:
		printf("             - Velocity: %.5f, Direction: %.5f\n", velocity,
				direction);
	}
}

void print_frame_info_simple(FrameInfo frame_info) {
 8001afc:	b084      	sub	sp, #16
 8001afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b02:	b093      	sub	sp, #76	; 0x4c
 8001b04:	af08      	add	r7, sp, #32
 8001b06:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printf("##FRAME##|%d|%.5f|%.5f|\n", frame_info.num_blobs,
 8001b0e:	f8d7 6248 	ldr.w	r6, [r7, #584]	; 0x248
			frame_info.delta_X, frame_info.delta_Y);
 8001b12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
	printf("##FRAME##|%d|%.5f|%.5f|\n", frame_info.num_blobs,
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fcee 	bl	80004f8 <__aeabi_f2d>
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	460d      	mov	r5, r1
			frame_info.delta_X, frame_info.delta_Y);
 8001b20:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
	printf("##FRAME##|%d|%.5f|%.5f|\n", frame_info.num_blobs,
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fce7 	bl	80004f8 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	e9cd 2300 	strd	r2, r3, [sp]
 8001b32:	4622      	mov	r2, r4
 8001b34:	462b      	mov	r3, r5
 8001b36:	4631      	mov	r1, r6
 8001b38:	483e      	ldr	r0, [pc, #248]	; (8001c34 <print_frame_info_simple+0x138>)
 8001b3a:	f015 fdd3 	bl	80176e4 <iprintf>

	for (int i = 0; i < frame_info.num_blobs; i++) {
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
 8001b42:	e06a      	b.n	8001c1a <print_frame_info_simple+0x11e>
		Point center_of_mass = frame_info.Blobs[i].center_of_mass;
 8001b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	3348      	adds	r3, #72	; 0x48
 8001b50:	f107 0208 	add.w	r2, r7, #8
 8001b54:	189a      	adds	r2, r3, r2
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b5e:	e883 0003 	stmia.w	r3, {r0, r1}
		float proportional_average = frame_info.Blobs[i].proportional_average;
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	3348      	adds	r3, #72	; 0x48
 8001b6e:	f107 0208 	add.w	r2, r7, #8
 8001b72:	4413      	add	r3, r2
 8001b74:	3308      	adds	r3, #8
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	623b      	str	r3, [r7, #32]
		int blob_id = frame_info.Blobs[i].ID; // Add this line to get the Blob's ID
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	3348      	adds	r3, #72	; 0x48
 8001b86:	f107 0208 	add.w	r2, r7, #8
 8001b8a:	4413      	add	r3, r2
 8001b8c:	330c      	adds	r3, #12
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61fb      	str	r3, [r7, #28]
		float velocity = frame_info.Blobs[i].velocity;
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	3348      	adds	r3, #72	; 0x48
 8001b9e:	f107 0208 	add.w	r2, r7, #8
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3314      	adds	r3, #20
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
		float direction = frame_info.Blobs[i].direction;
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	3348      	adds	r3, #72	; 0x48
 8001bb6:	f107 0208 	add.w	r2, r7, #8
 8001bba:	4413      	add	r3, r2
 8001bbc:	3310      	adds	r3, #16
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	617b      	str	r3, [r7, #20]
		printf("##BLOBS##|%d|%.5f|%.5f|%.5f|%.5f|%.5f|\n", blob_id,
				center_of_mass.x, center_of_mass.y, proportional_average,
 8001bc2:	68fb      	ldr	r3, [r7, #12]
		printf("##BLOBS##|%d|%.5f|%.5f|%.5f|%.5f|%.5f|\n", blob_id,
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fc97 	bl	80004f8 <__aeabi_f2d>
 8001bca:	e9c7 0100 	strd	r0, r1, [r7]
				center_of_mass.x, center_of_mass.y, proportional_average,
 8001bce:	693b      	ldr	r3, [r7, #16]
		printf("##BLOBS##|%d|%.5f|%.5f|%.5f|%.5f|%.5f|\n", blob_id,
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc91 	bl	80004f8 <__aeabi_f2d>
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	460d      	mov	r5, r1
 8001bda:	6a38      	ldr	r0, [r7, #32]
 8001bdc:	f7fe fc8c 	bl	80004f8 <__aeabi_f2d>
 8001be0:	4680      	mov	r8, r0
 8001be2:	4689      	mov	r9, r1
 8001be4:	69b8      	ldr	r0, [r7, #24]
 8001be6:	f7fe fc87 	bl	80004f8 <__aeabi_f2d>
 8001bea:	4682      	mov	sl, r0
 8001bec:	468b      	mov	fp, r1
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7fe fc82 	bl	80004f8 <__aeabi_f2d>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001bfc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c00:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c04:	e9cd 4500 	strd	r4, r5, [sp]
 8001c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c0c:	69f9      	ldr	r1, [r7, #28]
 8001c0e:	480a      	ldr	r0, [pc, #40]	; (8001c38 <print_frame_info_simple+0x13c>)
 8001c10:	f015 fd68 	bl	80176e4 <iprintf>
	for (int i = 0; i < frame_info.num_blobs; i++) {
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3301      	adds	r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c20:	429a      	cmp	r2, r3
 8001c22:	db8f      	blt.n	8001b44 <print_frame_info_simple+0x48>
				velocity, direction);
	}
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	372c      	adds	r7, #44	; 0x2c
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c30:	b004      	add	sp, #16
 8001c32:	4770      	bx	lr
 8001c34:	08019bc4 	.word	0x08019bc4
 8001c38:	08019be0 	.word	0x08019be0

08001c3c <subtract_matrices>:

// Function that does the following
// result = matrix1 - matrix2
void subtract_matrices(int result[N][N], const int matrix1[N][N],
		const int matrix2[N][N]) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < N; i++) {
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e021      	b.n	8001c92 <subtract_matrices+0x56>
		for (int j = 0; j < N; j++) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e018      	b.n	8001c86 <subtract_matrices+0x4a>
			result[i][j] = matrix1[i][j] - matrix2[i][j];
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	015b      	lsls	r3, r3, #5
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	015b      	lsls	r3, r3, #5
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	4403      	add	r3, r0
 8001c78:	1a89      	subs	r1, r1, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = 0; j < N; j++) {
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	3301      	adds	r3, #1
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b07      	cmp	r3, #7
 8001c8a:	dde3      	ble.n	8001c54 <subtract_matrices+0x18>
	for (int i = 0; i < N; i++) {
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b07      	cmp	r3, #7
 8001c96:	ddda      	ble.n	8001c4e <subtract_matrices+0x12>
		}
	}
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <LL_EXTI_EnableIT_32_63+0x24>)
 8001cb2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001cb6:	4905      	ldr	r1, [pc, #20]	; (8001ccc <LL_EXTI_EnableIT_32_63+0x24>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	58000800 	.word	0x58000800

08001cd0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001d3e:	f008 fe2d 	bl	800a99c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001d42:	f008 fe31 	bl	800a9a8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001d46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001d4a:	f7ff ffad 	bl	8001ca8 <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8001d4e:	f000 f821 	bl	8001d94 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001d52:	f000 f8c1 	bl	8001ed8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001d56:	bf00      	nop
}
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <APPD_EnableCPU2+0x34>)
 8001d64:	1d3c      	adds	r4, r7, #4
 8001d66:	461d      	mov	r5, r3
 8001d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d70:	c403      	stmia	r4!, {r0, r1}
 8001d72:	8022      	strh	r2, [r4, #0]
 8001d74:	3402      	adds	r4, #2
 8001d76:	0c13      	lsrs	r3, r2, #16
 8001d78:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001d7a:	f012 fce9 	bl	8014750 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	4618      	mov	r0, r3
 8001d82:	f011 ff3a 	bl	8013bfa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001d86:	bf00      	nop
}
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08019c08 	.word	0x08019c08

08001d94 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	77fb      	strb	r3, [r7, #31]
 8001db8:	e036      	b.n	8001e28 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
 8001dbc:	4a43      	ldr	r2, [pc, #268]	; (8001ecc <APPD_SetCPU2GpioConfig+0x138>)
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	799b      	ldrb	r3, [r3, #6]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d02c      	beq.n	8001e22 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001dc8:	7ffb      	ldrb	r3, [r7, #31]
 8001dca:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <APPD_SetCPU2GpioConfig+0x138>)
 8001dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001dd0:	4a3f      	ldr	r2, [pc, #252]	; (8001ed0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01b      	beq.n	8001e0e <APPD_SetCPU2GpioConfig+0x7a>
 8001dd6:	4a3e      	ldr	r2, [pc, #248]	; (8001ed0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d821      	bhi.n	8001e20 <APPD_SetCPU2GpioConfig+0x8c>
 8001ddc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001de0:	d003      	beq.n	8001dea <APPD_SetCPU2GpioConfig+0x56>
 8001de2:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <APPD_SetCPU2GpioConfig+0x140>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d009      	beq.n	8001dfc <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001de8:	e01a      	b.n	8001e20 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001dea:	7ffb      	ldrb	r3, [r7, #31]
 8001dec:	4a37      	ldr	r2, [pc, #220]	; (8001ecc <APPD_SetCPU2GpioConfig+0x138>)
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	889a      	ldrh	r2, [r3, #4]
 8001df4:	8bbb      	ldrh	r3, [r7, #28]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	83bb      	strh	r3, [r7, #28]
          break;
 8001dfa:	e012      	b.n	8001e22 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001dfc:	7ffb      	ldrb	r3, [r7, #31]
 8001dfe:	4a33      	ldr	r2, [pc, #204]	; (8001ecc <APPD_SetCPU2GpioConfig+0x138>)
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	889a      	ldrh	r2, [r3, #4]
 8001e06:	8b7b      	ldrh	r3, [r7, #26]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	837b      	strh	r3, [r7, #26]
          break;
 8001e0c:	e009      	b.n	8001e22 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	4a2e      	ldr	r2, [pc, #184]	; (8001ecc <APPD_SetCPU2GpioConfig+0x138>)
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	889a      	ldrh	r2, [r3, #4]
 8001e18:	8b3b      	ldrh	r3, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	833b      	strh	r3, [r7, #24]
          break;
 8001e1e:	e000      	b.n	8001e22 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001e20:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001e22:	7ffb      	ldrb	r3, [r7, #31]
 8001e24:	3301      	adds	r3, #1
 8001e26:	77fb      	strb	r3, [r7, #31]
 8001e28:	7ffb      	ldrb	r3, [r7, #31]
 8001e2a:	2b25      	cmp	r3, #37	; 0x25
 8001e2c:	d9c5      	bls.n	8001dba <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001e3a:	8bbb      	ldrh	r3, [r7, #28]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d014      	beq.n	8001e6a <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001e40:	8bbb      	ldrh	r3, [r7, #28]
 8001e42:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7ff ff43 	bl	8001cd0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7ff ff59 	bl	8001d02 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e58:	f008 ff46 	bl	800ace8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001e5c:	8bbb      	ldrh	r3, [r7, #28]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4619      	mov	r1, r3
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e66:	f009 f9a5 	bl	800b1b4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001e6a:	8b7b      	ldrh	r3, [r7, #26]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d012      	beq.n	8001e96 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001e70:	8b7b      	ldrh	r3, [r7, #26]
 8001e72:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	2002      	movs	r0, #2
 8001e76:	f7ff ff2b 	bl	8001cd0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f7ff ff41 	bl	8001d02 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4813      	ldr	r0, [pc, #76]	; (8001ed4 <APPD_SetCPU2GpioConfig+0x140>)
 8001e86:	f008 ff2f 	bl	800ace8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001e8a:	8b7b      	ldrh	r3, [r7, #26]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4810      	ldr	r0, [pc, #64]	; (8001ed4 <APPD_SetCPU2GpioConfig+0x140>)
 8001e92:	f009 f98f 	bl	800b1b4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001e96:	8b3b      	ldrh	r3, [r7, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001e9c:	8b3b      	ldrh	r3, [r7, #24]
 8001e9e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea0:	2004      	movs	r0, #4
 8001ea2:	f7ff ff15 	bl	8001cd0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001ea6:	2004      	movs	r0, #4
 8001ea8:	f7ff ff2b 	bl	8001d02 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001eb2:	f008 ff19 	bl	800ace8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001eb6:	8b3b      	ldrh	r3, [r7, #24]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001ebe:	f009 f979 	bl	800b1b4 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
}
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	08019f78 	.word	0x08019f78
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000400 	.word	0x48000400

08001ed8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001edc:	bf00      	nop
}
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <LL_C2_PWR_SetPowerMode+0x28>)
 8001ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ef6:	f023 0207 	bic.w	r2, r3, #7
 8001efa:	4905      	ldr	r1, [pc, #20]	; (8001f10 <LL_C2_PWR_SetPowerMode+0x28>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	58000400 	.word	0x58000400

08001f14 <LL_EXTI_EnableIT_32_63>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <LL_EXTI_EnableIT_32_63+0x24>)
 8001f1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001f22:	4905      	ldr	r1, [pc, #20]	; (8001f38 <LL_EXTI_EnableIT_32_63+0x24>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	58000800 	.word	0x58000800

08001f3c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001f4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f56:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	cafecafe 	.word	0xcafecafe

08001f78 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ff8:	d101      	bne.n	8001ffe <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800201e:	d101      	bne.n	8002024 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_AHB3_GRP1_EnableClock>:
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002054:	68fb      	ldr	r3, [r7, #12]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <LL_DBGMCU_GetDeviceID+0x18>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e0042000 	.word	0xe0042000

08002080 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <LL_DBGMCU_GetRevisionID+0x18>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	b29b      	uxth	r3, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e0042000 	.word	0xe0042000

0800209c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	605a      	str	r2, [r3, #4]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	605a      	str	r2, [r3, #4]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	615a      	str	r2, [r3, #20]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	615a      	str	r2, [r3, #20]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	609a      	str	r2, [r3, #8]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	619a      	str	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <LL_LPM_EnableSleep+0x1c>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <LL_LPM_EnableSleep+0x1c>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	6113      	str	r3, [r2, #16]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	22ca      	movs	r2, #202	; 0xca
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2253      	movs	r2, #83	; 0x53
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 0207 	bic.w	r2, r3, #7
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <MX_APPE_Config+0x18>)
 80021e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021ea:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80021ec:	f000 f82e 	bl	800224c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80021f0:	f000 f86e 	bl	80022d0 <Config_HSE>

  return;
 80021f4:	bf00      	nop
}
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	58004000 	.word	0x58004000

080021fc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8002200:	f000 f87a 	bl	80022f8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002204:	f000 f892 	bl	800232c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002208:	4908      	ldr	r1, [pc, #32]	; (800222c <MX_APPE_Init+0x30>)
 800220a:	2000      	movs	r0, #0
 800220c:	f001 f968 	bl	80034e0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8002210:	f7ff fd93 	bl	8001d3a <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8002214:	2101      	movs	r1, #1
 8002216:	2001      	movs	r0, #1
 8002218:	f014 fa98 	bl	801674c <UTIL_LPM_SetOffMode>

  Led_Init();
 800221c:	f000 f95f 	bl	80024de <Led_Init>

//  Button_Init();
  
  RxUART_Init();
 8002220:	f000 fa14 	bl	800264c <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8002224:	f000 f890 	bl	8002348 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8002228:	bf00      	nop
}
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000ff4 	.word	0x20000ff4

08002230 <Init_Smps>:

void Init_Smps(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8002234:	bf00      	nop
}
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <Init_Exti>:

void Init_Exti(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002242:	2050      	movs	r0, #80	; 0x50
 8002244:	f7ff fe66 	bl	8001f14 <LL_EXTI_EnableIT_32_63>

  return;
 8002248:	bf00      	nop
}
 800224a:	bd80      	pop	{r7, pc}

0800224c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8002250:	f000 f804 	bl	800225c <Reset_BackupDomain>

  Reset_IPCC();
 8002254:	f000 f81a 	bl	800228c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8002258:	bf00      	nop
}
 800225a:	bd80      	pop	{r7, pc}

0800225c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002260:	f7ff fec0 	bl	8001fe4 <LL_RCC_IsActiveFlag_PINRST>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00d      	beq.n	8002286 <Reset_BackupDomain+0x2a>
 800226a:	f7ff fece 	bl	800200a <LL_RCC_IsActiveFlag_SFTRST>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002274:	f00b fc1c 	bl	800dab0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8002278:	f00b fc1a 	bl	800dab0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800227c:	f7ff fe90 	bl	8001fa0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8002280:	f7ff fe9f 	bl	8001fc2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8002284:	bf00      	nop
 8002286:	bf00      	nop
}
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8002290:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002294:	f7ff fecc 	bl	8002030 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002298:	213f      	movs	r1, #63	; 0x3f
 800229a:	480c      	ldr	r0, [pc, #48]	; (80022cc <Reset_IPCC+0x40>)
 800229c:	f7ff ff44 	bl	8002128 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80022a0:	213f      	movs	r1, #63	; 0x3f
 80022a2:	480a      	ldr	r0, [pc, #40]	; (80022cc <Reset_IPCC+0x40>)
 80022a4:	f7ff ff4e 	bl	8002144 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80022a8:	213f      	movs	r1, #63	; 0x3f
 80022aa:	4808      	ldr	r0, [pc, #32]	; (80022cc <Reset_IPCC+0x40>)
 80022ac:	f7ff fef6 	bl	800209c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80022b0:	213f      	movs	r1, #63	; 0x3f
 80022b2:	4806      	ldr	r0, [pc, #24]	; (80022cc <Reset_IPCC+0x40>)
 80022b4:	f7ff ff15 	bl	80020e2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80022b8:	213f      	movs	r1, #63	; 0x3f
 80022ba:	4804      	ldr	r0, [pc, #16]	; (80022cc <Reset_IPCC+0x40>)
 80022bc:	f7ff ff00 	bl	80020c0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80022c0:	213f      	movs	r1, #63	; 0x3f
 80022c2:	4802      	ldr	r0, [pc, #8]	; (80022cc <Reset_IPCC+0x40>)
 80022c4:	f7ff ff1f 	bl	8002106 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80022c8:	bf00      	nop
}
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	58000c00 	.word	0x58000c00

080022d0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f011 fb26 	bl	8013928 <OTP_Read>
 80022dc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	799b      	ldrb	r3, [r3, #6]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fe27 	bl	8001f3c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
}
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <System_Init>:

static void System_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  Init_Smps();
 80022fc:	f7ff ff98 	bl	8002230 <Init_Smps>

  Init_Exti();
 8002300:	f7ff ff9d 	bl	800223e <Init_Exti>

  Init_Rtc();
 8002304:	f000 f802 	bl	800230c <Init_Rtc>

  return;
 8002308:	bf00      	nop
}
 800230a:	bd80      	pop	{r7, pc}

0800230c <Init_Rtc>:

static void Init_Rtc(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <Init_Rtc+0x1c>)
 8002312:	f7ff ff42 	bl	800219a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002316:	2100      	movs	r1, #0
 8002318:	4803      	ldr	r0, [pc, #12]	; (8002328 <Init_Rtc+0x1c>)
 800231a:	f7ff ff4e 	bl	80021ba <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800231e:	4802      	ldr	r0, [pc, #8]	; (8002328 <Init_Rtc+0x1c>)
 8002320:	f7ff ff2e 	bl	8002180 <LL_RTC_EnableWriteProtection>

  return;
 8002324:	bf00      	nop
}
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40002800 	.word	0x40002800

0800232c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002330:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002334:	f7ff fe20 	bl	8001f78 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002338:	f014 f9f6 	bl	8016728 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800233c:	2004      	movs	r0, #4
 800233e:	f7ff fdd3 	bl	8001ee8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002342:	bf00      	nop
}
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 800234e:	f012 f849 	bl	80143e4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8002352:	4a11      	ldr	r2, [pc, #68]	; (8002398 <appe_Tl_Init+0x50>)
 8002354:	2100      	movs	r1, #0
 8002356:	f44f 7000 	mov.w	r0, #512	; 0x200
 800235a:	f014 fb59 	bl	8016a10 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <appe_Tl_Init+0x54>)
 8002360:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <appe_Tl_Init+0x58>)
 8002364:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002366:	463b      	mov	r3, r7
 8002368:	4619      	mov	r1, r3
 800236a:	480e      	ldr	r0, [pc, #56]	; (80023a4 <appe_Tl_Init+0x5c>)
 800236c:	f011 fd20 	bl	8013db0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <appe_Tl_Init+0x60>)
 8002372:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <appe_Tl_Init+0x64>)
 8002376:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <appe_Tl_Init+0x68>)
 800237a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800237c:	f240 533c 	movw	r3, #1340	; 0x53c
 8002380:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	4618      	mov	r0, r3
 8002388:	f012 f96e 	bl	8014668 <TL_MM_Init>

  TL_Enable();
 800238c:	f012 f824 	bl	80143d8 <TL_Enable>

  return;
 8002390:	bf00      	nop
}
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	08013de9 	.word	0x08013de9
 800239c:	20030734 	.word	0x20030734
 80023a0:	080023b5 	.word	0x080023b5
 80023a4:	080023cd 	.word	0x080023cd
 80023a8:	2003094c 	.word	0x2003094c
 80023ac:	20030840 	.word	0x20030840
 80023b0:	200301f8 	.word	0x200301f8

080023b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80023be:	bf00      	nop
}
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	330b      	adds	r3, #11
 80023da:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80023e6:	2b07      	cmp	r3, #7
 80023e8:	d81f      	bhi.n	800242a <APPE_SysUserEvtRx+0x5e>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <APPE_SysUserEvtRx+0x24>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002411 	.word	0x08002411
 80023f4:	08002423 	.word	0x08002423
 80023f8:	0800242b 	.word	0x0800242b
 80023fc:	0800242b 	.word	0x0800242b
 8002400:	0800242b 	.word	0x0800242b
 8002404:	0800242b 	.word	0x0800242b
 8002408:	0800242b 	.word	0x0800242b
 800240c:	0800242b 	.word	0x0800242b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	4618      	mov	r0, r3
 8002416:	f011 fc1d 	bl	8013c54 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f81b 	bl	8002456 <APPE_SysEvtReadyProcessing>
    break;
 8002420:	e004      	b.n	800242c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f806 	bl	8002434 <APPE_SysEvtError>
    break;
 8002428:	e000      	b.n	800242c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800242a:	bf00      	nop
  }

  return;
 800242c:	bf00      	nop
}
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	330b      	adds	r3, #11
 8002442:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	3302      	adds	r3, #2
 8002448:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800244a:	bf00      	nop
}
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b08a      	sub	sp, #40	; 0x28
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	330b      	adds	r3, #11
 800247a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3302      	adds	r3, #2
 8002480:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11d      	bne.n	80024c6 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800248a:	f7ff fc67 	bl	8001d5c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800248e:	230f      	movs	r3, #15
 8002490:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002492:	237f      	movs	r3, #127	; 0x7f
 8002494:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8002496:	f7ff fdf3 	bl	8002080 <LL_DBGMCU_GetRevisionID>
 800249a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	b29b      	uxth	r3, r3
 80024a0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80024a2:	f7ff fddf 	bl	8002064 <LL_DBGMCU_GetDeviceID>
 80024a6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	4618      	mov	r0, r3
 80024b4:	f011 fbb8 	bl	8013c28 <SHCI_C2_Config>

    APP_BLE_Init();
 80024b8:	f002 fada 	bl	8004a70 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80024bc:	2100      	movs	r1, #0
 80024be:	2001      	movs	r0, #1
 80024c0:	f014 f944 	bl	801674c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80024c4:	e007      	b.n	80024d6 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d103      	bne.n	80024d6 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
  return;
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
}
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f004 fb78 	bl	8006bd8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80024e8:	2001      	movs	r0, #1
 80024ea:	f004 fb75 	bl	8006bd8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80024ee:	2002      	movs	r0, #2
 80024f0:	f004 fb72 	bl	8006bd8 <BSP_LED_Init>

  BSP_LED_On(LED_BLUE);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f004 fbab 	bl	8006c50 <BSP_LED_On>
  BSP_LED_On(LED_GREEN);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f004 fba8 	bl	8006c50 <BSP_LED_On>
#endif

  return;
 8002500:	bf00      	nop
}
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f008 fa02 	bl	800a914 <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d00a      	beq.n	8002534 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800251e:	f008 fa11 	bl	800a944 <HAL_GetTickFreq>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4413      	add	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252c:	e002      	b.n	8002534 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800252e:	f7ff fe17 	bl	8002160 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8002532:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002534:	f008 f9ee 	bl	800a914 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f4      	bhi.n	800252e <HAL_Delay+0x2a>
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002552:	f04f 30ff 	mov.w	r0, #4294967295
 8002556:	f014 f95f 	bl	8016818 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}

0800255e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8002562:	f014 f923 	bl	80167ac <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002566:	bf00      	nop
}
 8002568:	bd80      	pop	{r7, pc}

0800256a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f014 f94e 	bl	8016818 <UTIL_SEQ_Run>
  return;
 800257c:	bf00      	nop
}
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800258c:	2100      	movs	r1, #0
 800258e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002592:	f014 fa5f 	bl	8016a54 <UTIL_SEQ_SetTask>
  return;
 8002596:	bf00      	nop
}
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80025a6:	2002      	movs	r0, #2
 80025a8:	f014 fac0 	bl	8016b2c <UTIL_SEQ_SetEvt>
  return;
 80025ac:	bf00      	nop
}
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80025bc:	2002      	movs	r0, #2
 80025be:	f014 fad5 	bl	8016b6c <UTIL_SEQ_WaitEvt>
  return;
 80025c2:	bf00      	nop
}
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	3b01      	subs	r3, #1
 80025da:	2b0f      	cmp	r3, #15
 80025dc:	d830      	bhi.n	8002640 <HAL_GPIO_EXTI_Callback+0x74>
 80025de:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <HAL_GPIO_EXTI_Callback+0x18>)
 80025e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e4:	0800262b 	.word	0x0800262b
 80025e8:	08002631 	.word	0x08002631
 80025ec:	08002641 	.word	0x08002641
 80025f0:	08002637 	.word	0x08002637
 80025f4:	08002641 	.word	0x08002641
 80025f8:	08002641 	.word	0x08002641
 80025fc:	08002641 	.word	0x08002641
 8002600:	08002641 	.word	0x08002641
 8002604:	08002641 	.word	0x08002641
 8002608:	08002641 	.word	0x08002641
 800260c:	08002641 	.word	0x08002641
 8002610:	08002641 	.word	0x08002641
 8002614:	08002641 	.word	0x08002641
 8002618:	08002641 	.word	0x08002641
 800261c:	08002641 	.word	0x08002641
 8002620:	08002625 	.word	0x08002625
  {
    case BUTTON_SW1_PIN:
      APP_BLE_Key_Button1_Action();
 8002624:	f002 fba6 	bl	8004d74 <APP_BLE_Key_Button1_Action>
      break; 
 8002628:	e00b      	b.n	8002642 <HAL_GPIO_EXTI_Callback+0x76>

    case BUTTON_SW2_PIN:
      APP_BLE_Key_Button2_Action();
 800262a:	f002 fbab 	bl	8004d84 <APP_BLE_Key_Button2_Action>
      break; 
 800262e:	e008      	b.n	8002642 <HAL_GPIO_EXTI_Callback+0x76>

    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
 8002630:	f002 fbb0 	bl	8004d94 <APP_BLE_Key_Button3_Action>
      break;
 8002634:	e005      	b.n	8002642 <HAL_GPIO_EXTI_Callback+0x76>

    case COLOR_INT_PIN: //PC2
	  UTIL_SEQ_SetTask( 1<<CFG_TASK_COLOR_REQ_ID, CFG_SCH_PRIO_0);
 8002636:	2100      	movs	r1, #0
 8002638:	2040      	movs	r0, #64	; 0x40
 800263a:	f014 fa0b 	bl	8016a54 <UTIL_SEQ_SetTask>
	  break;
 800263e:	e000      	b.n	8002642 <HAL_GPIO_EXTI_Callback+0x76>

    default:
      break;
 8002640:	bf00      	nop

  }
  return;
 8002642:	bf00      	nop
}
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop

0800264c <RxUART_Init>:

static void RxUART_Init(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  //HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <MX_TOF_Init>:
static void MX_VL53L8CX_SimpleRanging_Process(void);
static void toggle_resolution(void);
static void toggle_signal_and_ambient(void);

void MX_TOF_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */
  APP_DBG_MSG("CUSTOM_RANGING_SENSOR_Init");
  MX_VL53L8CX_SimpleRanging_Init();
 8002662:	f000 f835 	bl	80026d0 <MX_VL53L8CX_SimpleRanging_Init>

  uint32_t Id;
  CUSTOM_RANGING_SENSOR_ReadID(CUSTOM_VL53L8CX, &Id);
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	4619      	mov	r1, r3
 800266a:	2000      	movs	r0, #0
 800266c:	f000 f992 	bl	8002994 <CUSTOM_RANGING_SENSOR_ReadID>
  CUSTOM_RANGING_SENSOR_GetCapabilities(CUSTOM_VL53L8CX, &Cap);
 8002670:	490d      	ldr	r1, [pc, #52]	; (80026a8 <MX_TOF_Init+0x4c>)
 8002672:	2000      	movs	r0, #0
 8002674:	f000 f9b8 	bl	80029e8 <CUSTOM_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <MX_TOF_Init+0x50>)
 800267a:	2203      	movs	r2, #3
 800267c:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 5 ms < TimingBudget < 100 ms */
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <MX_TOF_Init+0x50>)
 8002680:	2205      	movs	r2, #5
 8002682:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MX_TOF_Init+0x50>)
 8002686:	221e      	movs	r2, #30
 8002688:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <MX_TOF_Init+0x50>)
 800268c:	2200      	movs	r2, #0
 800268e:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <MX_TOF_Init+0x50>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L8CX, &Profile);
 8002696:	4905      	ldr	r1, [pc, #20]	; (80026ac <MX_TOF_Init+0x50>)
 8002698:	2000      	movs	r0, #0
 800269a:	f000 f9cf 	bl	8002a3c <CUSTOM_RANGING_SENSOR_ConfigProfile>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000049c 	.word	0x2000049c
 80026ac:	200004ac 	.word	0x200004ac

080026b0 <MX_TOF_Begin>:

void MX_TOF_Begin(void){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L8CX, RS_MODE_BLOCKING_CONTINUOUS);
 80026b4:	2101      	movs	r1, #1
 80026b6:	2000      	movs	r0, #0
 80026b8:	f000 fa14 	bl	8002ae4 <CUSTOM_RANGING_SENSOR_Start>
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <MX_TOF_Stop>:
void MX_TOF_Stop(void){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L8CX);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f000 fa39 	bl	8002b3c <CUSTOM_RANGING_SENSOR_Stop>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <MX_VL53L8CX_SimpleRanging_Init>:
//
//  /* USER CODE END TOF_Process_PostTreatment */
//}

static void MX_VL53L8CX_SimpleRanging_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */

  status = CUSTOM_RANGING_SENSOR_Init(CUSTOM_VL53L8CX);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f000 f937 	bl	8002948 <CUSTOM_RANGING_SENSOR_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <MX_VL53L8CX_SimpleRanging_Init+0x20>)
 80026de:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <MX_VL53L8CX_SimpleRanging_Init+0x20>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d000      	beq.n	80026ea <MX_VL53L8CX_SimpleRanging_Init+0x1a>
  {
	  APP_DBG_MSG("CUSTOM_RANGING_SENSOR_Init_Failed!, halting...");
    while(1);
 80026e8:	e7fe      	b.n	80026e8 <MX_VL53L8CX_SimpleRanging_Init+0x18>
  }
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200004c0 	.word	0x200004c0

080026f4 <parse_TOF_result>:
{
	toggle_resolution();
}

// Function to parse RANGING_SENSOR_Result_t to [8][8] matrix
void parse_TOF_result(RANGING_SENSOR_Result_t* result, int  matrix[8][8]) {
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
    //assign values from result
    uint8_t j, k;
    for (j = 0; j < 8; j ++) {//row
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	e01e      	b.n	8002742 <parse_TOF_result+0x4e>
        for (k = 0; k < 8; k++) {//column
 8002704:	2300      	movs	r3, #0
 8002706:	73bb      	strb	r3, [r7, #14]
 8002708:	e015      	b.n	8002736 <parse_TOF_result+0x42>
            matrix[j][k] = (int)*result->ZoneResult[j*8+k].Distance; //matrix[1][0]=result[8=1*8+0], matrix[1][7]=result[15=1*8+7]
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	00da      	lsls	r2, r3, #3
 800270e:	7bbb      	ldrb	r3, [r7, #14]
 8002710:	441a      	add	r2, r3
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3308      	adds	r3, #8
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	015b      	lsls	r3, r3, #5
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	4413      	add	r3, r2
 800272a:	7bba      	ldrb	r2, [r7, #14]
 800272c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (k = 0; k < 8; k++) {//column
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	3301      	adds	r3, #1
 8002734:	73bb      	strb	r3, [r7, #14]
 8002736:	7bbb      	ldrb	r3, [r7, #14]
 8002738:	2b07      	cmp	r3, #7
 800273a:	d9e6      	bls.n	800270a <parse_TOF_result+0x16>
    for (j = 0; j < 8; j ++) {//row
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	3301      	adds	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b07      	cmp	r3, #7
 8002746:	d9dd      	bls.n	8002704 <parse_TOF_result+0x10>
        }
    }
    return;
 8002748:	bf00      	nop
}
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <print_result>:

uint16_t TofData[64];

uint16_t * print_result(RANGING_SENSOR_Result_t *Result)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
#if(1)
	//display_commands_banner();
  int8_t i, j, k, l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 800275c:	4b71      	ldr	r3, [pc, #452]	; (8002924 <print_result+0x1d0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d003      	beq.n	800276c <print_result+0x18>
         (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 8002764:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <print_result+0x1d0>)
 8002766:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8002768:	2b03      	cmp	r3, #3
 800276a:	d101      	bne.n	8002770 <print_result+0x1c>
 800276c:	2308      	movs	r3, #8
 800276e:	e000      	b.n	8002772 <print_result+0x1e>
 8002770:	2304      	movs	r3, #4
 8002772:	72fb      	strb	r3, [r7, #11]
  printf("\n\r");
 8002774:	486c      	ldr	r0, [pc, #432]	; (8002928 <print_result+0x1d4>)
 8002776:	f014 ffb5 	bl	80176e4 <iprintf>
	for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 800277a:	2300      	movs	r3, #0
 800277c:	73bb      	strb	r3, [r7, #14]
 800277e:	e0b0      	b.n	80028e2 <print_result+0x18e>
	{
		for (i = 0; i < zones_per_line; i++)
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e008      	b.n	8002798 <print_result+0x44>
		{
			printf(" ---------");
 8002786:	4869      	ldr	r0, [pc, #420]	; (800292c <print_result+0x1d8>)
 8002788:	f014 ffac 	bl	80176e4 <iprintf>
		for (i = 0; i < zones_per_line; i++)
 800278c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	3301      	adds	r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800279c:	7afb      	ldrb	r3, [r7, #11]
 800279e:	429a      	cmp	r2, r3
 80027a0:	dbf1      	blt.n	8002786 <print_result+0x32>
		}
		printf("\n\r");
 80027a2:	4861      	ldr	r0, [pc, #388]	; (8002928 <print_result+0x1d4>)
 80027a4:	f014 ff9e 	bl	80176e4 <iprintf>
		for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	733b      	strb	r3, [r7, #12]
 80027ac:	e08f      	b.n	80028ce <print_result+0x17a>
		{
			for (k = (zones_per_line - 1); k >= 0; k--)
 80027ae:	7afb      	ldrb	r3, [r7, #11]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	737b      	strb	r3, [r7, #13]
 80027b6:	e07c      	b.n	80028b2 <print_result+0x15e>
			{
				if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 80027b8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80027bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80027c0:	441a      	add	r2, r3
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3304      	adds	r3, #4
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d045      	beq.n	8002862 <print_result+0x10e>
				{
					if ((long)Result->ZoneResult[j+k].Distance[l] < 500)
 80027d6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80027da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80027de:	441a      	add	r2, r3
 80027e0:	f997 000c 	ldrsb.w	r0, [r7, #12]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	4403      	add	r3, r0
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027f8:	da19      	bge.n	800282e <print_result+0xda>
					{
						printf("|\033[38;5;9m%4ld\033[0m:%3ld ",
						(long)Result->ZoneResult[j+k].Distance[l],
 80027fa:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80027fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002802:	441a      	add	r2, r3
 8002804:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	4403      	add	r3, r0
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	689b      	ldr	r3, [r3, #8]
						printf("|\033[38;5;9m%4ld\033[0m:%3ld ",
 8002818:	4619      	mov	r1, r3
						(long)j+k);
 800281a:	f997 200e 	ldrsb.w	r2, [r7, #14]
						printf("|\033[38;5;9m%4ld\033[0m:%3ld ",
 800281e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002822:	4413      	add	r3, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4842      	ldr	r0, [pc, #264]	; (8002930 <print_result+0x1dc>)
 8002828:	f014 ff5c 	bl	80176e4 <iprintf>
 800282c:	e023      	b.n	8002876 <print_result+0x122>
					} else
					{
						printf("|\033[38;5;10m%4ld\033[0m:%3ld ",
						(long)Result->ZoneResult[j+k].Distance[l],
 800282e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002832:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002836:	441a      	add	r2, r3
 8002838:	f997 000c 	ldrsb.w	r0, [r7, #12]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	4403      	add	r3, r0
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	689b      	ldr	r3, [r3, #8]
						printf("|\033[38;5;10m%4ld\033[0m:%3ld ",
 800284c:	4619      	mov	r1, r3
						(long)j+k);
 800284e:	f997 200e 	ldrsb.w	r2, [r7, #14]
						printf("|\033[38;5;10m%4ld\033[0m:%3ld ",
 8002852:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002856:	4413      	add	r3, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4836      	ldr	r0, [pc, #216]	; (8002934 <print_result+0x1e0>)
 800285c:	f014 ff42 	bl	80176e4 <iprintf>
 8002860:	e009      	b.n	8002876 <print_result+0x122>
					}
				}
				else
				{
					printf("|%5s:%d", "X",j+k);
 8002862:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002866:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800286a:	4413      	add	r3, r2
 800286c:	461a      	mov	r2, r3
 800286e:	4932      	ldr	r1, [pc, #200]	; (8002938 <print_result+0x1e4>)
 8002870:	4832      	ldr	r0, [pc, #200]	; (800293c <print_result+0x1e8>)
 8002872:	f014 ff37 	bl	80176e4 <iprintf>
				}

				TofData[j+k] = Result->ZoneResult[j+k].Distance[l];
 8002876:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800287a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800287e:	441a      	add	r2, r3
 8002880:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	4403      	add	r3, r0
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002898:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800289c:	4413      	add	r3, r2
 800289e:	b289      	uxth	r1, r1
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <print_result+0x1ec>)
 80028a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (k = (zones_per_line - 1); k >= 0; k--)
 80028a6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	737b      	strb	r3, [r7, #13]
 80028b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f6bf af7e 	bge.w	80027b8 <print_result+0x64>
			}
			printf("|\n\r");
 80028bc:	4821      	ldr	r0, [pc, #132]	; (8002944 <print_result+0x1f0>)
 80028be:	f014 ff11 	bl	80176e4 <iprintf>
		for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80028c2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	733b      	strb	r3, [r7, #12]
 80028ce:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f43f af6b 	beq.w	80027ae <print_result+0x5a>
	for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 80028d8:	7bba      	ldrb	r2, [r7, #14]
 80028da:	7afb      	ldrb	r3, [r7, #11]
 80028dc:	4413      	add	r3, r2
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	73bb      	strb	r3, [r7, #14]
 80028e2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	f4ff af48 	bcc.w	8002780 <print_result+0x2c>
		}
	}

	for (i = 0; i < zones_per_line; i++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e008      	b.n	8002908 <print_result+0x1b4>
	{
		printf(" ---------");
 80028f6:	480d      	ldr	r0, [pc, #52]	; (800292c <print_result+0x1d8>)
 80028f8:	f014 fef4 	bl	80176e4 <iprintf>
	for (i = 0; i < zones_per_line; i++)
 80028fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3301      	adds	r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	73fb      	strb	r3, [r7, #15]
 8002908:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	429a      	cmp	r2, r3
 8002910:	dbf1      	blt.n	80028f6 <print_result+0x1a2>
	}
	printf("\n\r");
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <print_result+0x1d4>)
 8002914:	f014 fee6 	bl	80176e4 <iprintf>

  for (i = 0; i < zones_per_line; i++)
	  printf(" ---------");
  printf("\n\r");  */

  return TofData;
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <print_result+0x1ec>)
    }
  }


#endif
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200004ac 	.word	0x200004ac
 8002928:	08019c24 	.word	0x08019c24
 800292c:	08019c28 	.word	0x08019c28
 8002930:	08019c34 	.word	0x08019c34
 8002934:	08019c50 	.word	0x08019c50
 8002938:	08019c6c 	.word	0x08019c6c
 800293c:	08019c70 	.word	0x08019c70
 8002940:	200004c4 	.word	0x200004c4
 8002944:	08019c78 	.word	0x08019c78

08002948 <CUSTOM_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Init(uint32_t Instance)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <CUSTOM_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002956:	f06f 0301 	mvn.w	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e015      	b.n	800298a <CUSTOM_RANGING_SENSOR_Init+0x42>
  }
  else
  {
    reset_device();
 800295e:	f000 f995 	bl	8002c8c <reset_device>

    switch (Instance)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10c      	bne.n	8002982 <CUSTOM_RANGING_SENSOR_Init+0x3a>
    {
#if (USE_CUSTOM_RANGING_VL53L8CX == 1U)
      case CUSTOM_VL53L8CX:
          if (VL53L8CX_Probe(Instance) != BSP_ERROR_NONE)
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f90f 	bl	8002b8c <VL53L8CX_Probe>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <CUSTOM_RANGING_SENSOR_Init+0x34>
          {
            ret = BSP_ERROR_NO_INIT;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
 8002978:	60fb      	str	r3, [r7, #12]
          }
          else
          {
            ret = BSP_ERROR_NONE;
          }
          break;
 800297a:	e006      	b.n	800298a <CUSTOM_RANGING_SENSOR_Init+0x42>
            ret = BSP_ERROR_NONE;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
          break;
 8002980:	e003      	b.n	800298a <CUSTOM_RANGING_SENSOR_Init+0x42>
#endif
      default:
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002982:	f06f 0306 	mvn.w	r3, #6
 8002986:	60fb      	str	r3, [r7, #12]
          break;
 8002988:	bf00      	nop
    }
  }

  return ret;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <CUSTOM_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <CUSTOM_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029a4:	f06f 0301 	mvn.w	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e014      	b.n	80029d6 <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ReadID(CUSTOM_RANGING_CompObj[Instance], pId) < 0)
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <CUSTOM_RANGING_SENSOR_ReadID+0x4c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	490b      	ldr	r1, [pc, #44]	; (80029e4 <CUSTOM_RANGING_SENSOR_ReadID+0x50>)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80029be:	6839      	ldr	r1, [r7, #0]
 80029c0:	4610      	mov	r0, r2
 80029c2:	4798      	blx	r3
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	da03      	bge.n	80029d2 <CUSTOM_RANGING_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80029ca:	f06f 0304 	mvn.w	r3, #4
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e001      	b.n	80029d6 <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000548 	.word	0x20000548
 80029e4:	20000544 	.word	0x20000544

080029e8 <CUSTOM_RANGING_SENSOR_GetCapabilities>:
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @note This function should be called after the init.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
    int32_t ret;

    if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x18>
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80029f8:	f06f 0301 	mvn.w	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e014      	b.n	8002a2a <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance], pCapabilities) < 0)
 8002a00:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x4c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	490b      	ldr	r1, [pc, #44]	; (8002a38 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x50>)
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a12:	6839      	ldr	r1, [r7, #0]
 8002a14:	4610      	mov	r0, r2
 8002a16:	4798      	blx	r3
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	da03      	bge.n	8002a26 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a1e:	f06f 0304 	mvn.w	r3, #4
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e001      	b.n	8002a2a <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000548 	.word	0x20000548
 8002a38:	20000544 	.word	0x20000544

08002a3c <CUSTOM_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a4c:	f06f 0301 	mvn.w	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e014      	b.n	8002a7e <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ConfigProfile(CUSTOM_RANGING_CompObj[Instance], pConfig) < 0)
 8002a54:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x4c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	490b      	ldr	r1, [pc, #44]	; (8002a8c <CUSTOM_RANGING_SENSOR_ConfigProfile+0x50>)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a66:	6839      	ldr	r1, [r7, #0]
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4798      	blx	r3
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da03      	bge.n	8002a7a <CUSTOM_RANGING_SENSOR_ConfigProfile+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a72:	f06f 0304 	mvn.w	r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e001      	b.n	8002a7e <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000548 	.word	0x20000548
 8002a8c:	20000544 	.word	0x20000544

08002a90 <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002aa0:	f06f 0301 	mvn.w	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e014      	b.n	8002ad2 <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 8002aa8:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <CUSTOM_RANGING_SENSOR_GetDistance+0x4c>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	490b      	ldr	r1, [pc, #44]	; (8002ae0 <CUSTOM_RANGING_SENSOR_GetDistance+0x50>)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	4610      	mov	r0, r2
 8002abe:	4798      	blx	r3
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da03      	bge.n	8002ace <CUSTOM_RANGING_SENSOR_GetDistance+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002ac6:	f06f 0304 	mvn.w	r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e001      	b.n	8002ad2 <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000548 	.word	0x20000548
 8002ae0:	20000544 	.word	0x20000544

08002ae4 <CUSTOM_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <CUSTOM_RANGING_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002af6:	f06f 0301 	mvn.w	r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e014      	b.n	8002b28 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Start(CUSTOM_RANGING_CompObj[Instance], Mode) < 0)
 8002afe:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <CUSTOM_RANGING_SENSOR_Start+0x50>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	490b      	ldr	r1, [pc, #44]	; (8002b38 <CUSTOM_RANGING_SENSOR_Start+0x54>)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b10:	78f9      	ldrb	r1, [r7, #3]
 8002b12:	4610      	mov	r0, r2
 8002b14:	4798      	blx	r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da03      	bge.n	8002b24 <CUSTOM_RANGING_SENSOR_Start+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b1c:	f06f 0304 	mvn.w	r3, #4
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e001      	b.n	8002b28 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b28:	68fb      	ldr	r3, [r7, #12]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000548 	.word	0x20000548
 8002b38:	20000544 	.word	0x20000544

08002b3c <CUSTOM_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <CUSTOM_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b4a:	f06f 0301 	mvn.w	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e013      	b.n	8002b7a <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Stop(CUSTOM_RANGING_CompObj[Instance]) < 0)
 8002b52:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <CUSTOM_RANGING_SENSOR_Stop+0x48>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	490a      	ldr	r1, [pc, #40]	; (8002b88 <CUSTOM_RANGING_SENSOR_Stop+0x4c>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b64:	4610      	mov	r0, r2
 8002b66:	4798      	blx	r3
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da03      	bge.n	8002b76 <CUSTOM_RANGING_SENSOR_Stop+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b6e:	f06f 0304 	mvn.w	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e001      	b.n	8002b7a <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000548 	.word	0x20000548
 8002b88:	20000544 	.word	0x20000544

08002b8c <VL53L8CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L8CX_Probe(uint32_t Instance)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  VL53L8CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L8CX_Object_t   VL53L8CXObj;

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L8CX_ADDRESS;
 8002b94:	2352      	movs	r3, #82	; 0x52
 8002b96:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = CUSTOM_VL53L8CX_I2C_Init;
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <VL53L8CX_Probe+0xd8>)
 8002b9a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = CUSTOM_VL53L8CX_I2C_DeInit;
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <VL53L8CX_Probe+0xdc>)
 8002b9e:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = CUSTOM_VL53L8CX_I2C_WriteReg;
 8002ba0:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <VL53L8CX_Probe+0xe0>)
 8002ba2:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = CUSTOM_VL53L8CX_I2C_ReadReg;
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <VL53L8CX_Probe+0xe4>)
 8002ba6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8002ba8:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <VL53L8CX_Probe+0xe8>)
 8002baa:	623b      	str	r3, [r7, #32]

  if (VL53L8CX_RegisterBusIO(&VL53L8CXObj, &IOCtx) != VL53L8CX_OK)
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4831      	ldr	r0, [pc, #196]	; (8002c78 <VL53L8CX_Probe+0xec>)
 8002bb4:	f007 f89d 	bl	8009cf2 <VL53L8CX_RegisterBusIO>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <VL53L8CX_Probe+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002bbe:	f06f 0304 	mvn.w	r3, #4
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	e049      	b.n	8002c5a <VL53L8CX_Probe+0xce>
  }
  else
  {
    CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L8CX_RANGING_SENSOR_Driver;
 8002bc6:	4a2d      	ldr	r2, [pc, #180]	; (8002c7c <VL53L8CX_Probe+0xf0>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	492d      	ldr	r1, [pc, #180]	; (8002c80 <VL53L8CX_Probe+0xf4>)
 8002bcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    CUSTOM_RANGING_CompObj[Instance] = &VL53L8CXObj;
 8002bd0:	4a2c      	ldr	r2, [pc, #176]	; (8002c84 <VL53L8CX_Probe+0xf8>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4928      	ldr	r1, [pc, #160]	; (8002c78 <VL53L8CX_Probe+0xec>)
 8002bd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if (VL53L8CX_ReadID(&VL53L8CXObj, &id) != VL53L8CX_OK)
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	4619      	mov	r1, r3
 8002be0:	4825      	ldr	r0, [pc, #148]	; (8002c78 <VL53L8CX_Probe+0xec>)
 8002be2:	f007 f936 	bl	8009e52 <VL53L8CX_ReadID>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <VL53L8CX_Probe+0x68>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002bec:	f06f 0304 	mvn.w	r3, #4
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	e032      	b.n	8002c5a <VL53L8CX_Probe+0xce>
    }
    else if (id != VL53L8CX_ID)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f24f 020c 	movw	r2, #61452	; 0xf00c
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <VL53L8CX_Probe+0x7a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002bfe:	f06f 0306 	mvn.w	r3, #6
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
 8002c04:	e029      	b.n	8002c5a <VL53L8CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L8CX_OK)
 8002c06:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <VL53L8CX_Probe+0xf0>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	491c      	ldr	r1, [pc, #112]	; (8002c84 <VL53L8CX_Probe+0xf8>)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4798      	blx	r3
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <VL53L8CX_Probe+0x9e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c22:	f06f 0304 	mvn.w	r3, #4
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	e017      	b.n	8002c5a <VL53L8CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8002c2a:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <VL53L8CX_Probe+0xf0>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4913      	ldr	r1, [pc, #76]	; (8002c84 <VL53L8CX_Probe+0xf8>)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
              &RANGING_SENSOR_Cap[Instance]) != VL53L8CX_OK)
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	4911      	ldr	r1, [pc, #68]	; (8002c88 <VL53L8CX_Probe+0xfc>)
 8002c42:	440a      	add	r2, r1
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8002c44:	4611      	mov	r1, r2
 8002c46:	4798      	blx	r3
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <VL53L8CX_Probe+0xca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002c4e:	f06f 0304 	mvn.w	r3, #4
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	e001      	b.n	8002c5a <VL53L8CX_Probe+0xce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	080044e9 	.word	0x080044e9
 8002c68:	08004565 	.word	0x08004565
 8002c6c:	0800467d 	.word	0x0800467d
 8002c70:	080046e1 	.word	0x080046e1
 8002c74:	08004745 	.word	0x08004745
 8002c78:	2000055c 	.word	0x2000055c
 8002c7c:	20000548 	.word	0x20000548
 8002c80:	200000a4 	.word	0x200000a4
 8002c84:	20000544 	.word	0x20000544
 8002c88:	2000054c 	.word	0x2000054c

08002c8c <reset_device>:
#endif

static void reset_device(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
	/*
	HAL_GPIO_WritePin(CUSTOM_VL53L8CX_PWR_EN_PORT, CUSTOM_VL53L8CX_PWR_EN_PIN, GPIO_PIN_RESET);
	HAL_Delay(2);
	HAL_GPIO_WritePin(CUSTOM_VL53L8CX_PWR_EN_PORT, CUSTOM_VL53L8CX_PWR_EN_PIN, GPIO_PIN_SET);
	HAL_Delay(2);*/
	HAL_GPIO_WritePin(CUSTOM_VL53L8CX_LPn_PORT, CUSTOM_VL53L8CX_LPn_PIN, GPIO_PIN_RESET);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2120      	movs	r1, #32
 8002c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c98:	f008 fa8c 	bl	800b1b4 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f7ff fc31 	bl	8002504 <HAL_Delay>
	HAL_GPIO_WritePin(CUSTOM_VL53L8CX_LPn_PORT, CUSTOM_VL53L8CX_LPn_PIN, GPIO_PIN_SET);
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	2120      	movs	r1, #32
 8002ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002caa:	f008 fa83 	bl	800b1b4 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002cae:	2002      	movs	r0, #2
 8002cb0:	f7ff fc28 	bl	8002504 <HAL_Delay>
#endif
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <LL_EXTI_EnableIT_0_31>:
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <LL_EXTI_EnableIT_0_31+0x24>)
 8002cc2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cc6:	4905      	ldr	r1, [pc, #20]	; (8002cdc <LL_EXTI_EnableIT_0_31+0x24>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	58000800 	.word	0x58000800

08002ce0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4904      	ldr	r1, [pc, #16]	; (8002d00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]

}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	58000800 	.word	0x58000800

08002d04 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <ReadRtcSsrValue+0x3c>)
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <ReadRtcSsrValue+0x3c>)
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002d1a:	e005      	b.n	8002d28 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <ReadRtcSsrValue+0x3c>)
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1f5      	bne.n	8002d1c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002d30:	683b      	ldr	r3, [r7, #0]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40002800 	.word	0x40002800

08002d44 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002d54:	79ba      	ldrb	r2, [r7, #6]
 8002d56:	491d      	ldr	r1, [pc, #116]	; (8002dcc <LinkTimerAfter+0x88>)
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	3315      	adds	r3, #21
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d009      	beq.n	8002d82 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	4916      	ldr	r1, [pc, #88]	; (8002dcc <LinkTimerAfter+0x88>)
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3314      	adds	r3, #20
 8002d7e:	79fa      	ldrb	r2, [r7, #7]
 8002d80:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002d82:	79fa      	ldrb	r2, [r7, #7]
 8002d84:	4911      	ldr	r1, [pc, #68]	; (8002dcc <LinkTimerAfter+0x88>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	3315      	adds	r3, #21
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002d96:	79fa      	ldrb	r2, [r7, #7]
 8002d98:	490c      	ldr	r1, [pc, #48]	; (8002dcc <LinkTimerAfter+0x88>)
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	3314      	adds	r3, #20
 8002da6:	79ba      	ldrb	r2, [r7, #6]
 8002da8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002daa:	79ba      	ldrb	r2, [r7, #6]
 8002dac:	4907      	ldr	r1, [pc, #28]	; (8002dcc <LinkTimerAfter+0x88>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	3315      	adds	r3, #21
 8002dba:	79fa      	ldrb	r2, [r7, #7]
 8002dbc:	701a      	strb	r2, [r3, #0]

  return;
 8002dbe:	bf00      	nop
}
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000eb0 	.word	0x20000eb0

08002dd0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	460a      	mov	r2, r1
 8002dda:	71fb      	strb	r3, [r7, #7]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <LinkTimerBefore+0xb8>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	79ba      	ldrb	r2, [r7, #6]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d032      	beq.n	8002e52 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002dec:	79ba      	ldrb	r2, [r7, #6]
 8002dee:	4927      	ldr	r1, [pc, #156]	; (8002e8c <LinkTimerBefore+0xbc>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	4922      	ldr	r1, [pc, #136]	; (8002e8c <LinkTimerBefore+0xbc>)
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3315      	adds	r3, #21
 8002e10:	79fa      	ldrb	r2, [r7, #7]
 8002e12:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	491d      	ldr	r1, [pc, #116]	; (8002e8c <LinkTimerBefore+0xbc>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	3315      	adds	r3, #21
 8002e24:	79ba      	ldrb	r2, [r7, #6]
 8002e26:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002e28:	79fa      	ldrb	r2, [r7, #7]
 8002e2a:	4918      	ldr	r1, [pc, #96]	; (8002e8c <LinkTimerBefore+0xbc>)
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3314      	adds	r3, #20
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002e3c:	79ba      	ldrb	r2, [r7, #6]
 8002e3e:	4913      	ldr	r1, [pc, #76]	; (8002e8c <LinkTimerBefore+0xbc>)
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	79fa      	ldrb	r2, [r7, #7]
 8002e4e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002e50:	e014      	b.n	8002e7c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002e52:	79fa      	ldrb	r2, [r7, #7]
 8002e54:	490d      	ldr	r1, [pc, #52]	; (8002e8c <LinkTimerBefore+0xbc>)
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	3315      	adds	r3, #21
 8002e62:	79ba      	ldrb	r2, [r7, #6]
 8002e64:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002e66:	79ba      	ldrb	r2, [r7, #6]
 8002e68:	4908      	ldr	r1, [pc, #32]	; (8002e8c <LinkTimerBefore+0xbc>)
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	3314      	adds	r3, #20
 8002e76:	79fa      	ldrb	r2, [r7, #7]
 8002e78:	701a      	strb	r2, [r3, #0]
  return;
 8002e7a:	bf00      	nop
}
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000f40 	.word	0x20000f40
 8002e8c:	20000eb0 	.word	0x20000eb0

08002e90 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e9a:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <linkTimer+0x144>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b06      	cmp	r3, #6
 8002ea2:	d118      	bne.n	8002ed6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002ea4:	4b4b      	ldr	r3, [pc, #300]	; (8002fd4 <linkTimer+0x144>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b4b      	ldr	r3, [pc, #300]	; (8002fd8 <linkTimer+0x148>)
 8002eac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002eae:	4a49      	ldr	r2, [pc, #292]	; (8002fd4 <linkTimer+0x144>)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002eb4:	79fa      	ldrb	r2, [r7, #7]
 8002eb6:	4949      	ldr	r1, [pc, #292]	; (8002fdc <linkTimer+0x14c>)
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3315      	adds	r3, #21
 8002ec4:	2206      	movs	r2, #6
 8002ec6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ec8:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <linkTimer+0x150>)
 8002eca:	f04f 32ff 	mov.w	r2, #4294967295
 8002ece:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	81fb      	strh	r3, [r7, #14]
 8002ed4:	e078      	b.n	8002fc8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002ed6:	f000 f909 	bl	80030ec <ReturnTimeElapsed>
 8002eda:	4603      	mov	r3, r0
 8002edc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	493e      	ldr	r1, [pc, #248]	; (8002fdc <linkTimer+0x14c>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	79fa      	ldrb	r2, [r7, #7]
 8002ef4:	4419      	add	r1, r3
 8002ef6:	4839      	ldr	r0, [pc, #228]	; (8002fdc <linkTimer+0x14c>)
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4403      	add	r3, r0
 8002f02:	3308      	adds	r3, #8
 8002f04:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	4934      	ldr	r1, [pc, #208]	; (8002fdc <linkTimer+0x14c>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	3308      	adds	r3, #8
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002f1a:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <linkTimer+0x144>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4619      	mov	r1, r3
 8002f22:	4a2e      	ldr	r2, [pc, #184]	; (8002fdc <linkTimer+0x14c>)
 8002f24:	460b      	mov	r3, r1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	440b      	add	r3, r1
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3308      	adds	r3, #8
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d337      	bcc.n	8002fa8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <linkTimer+0x144>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002f3e:	7b7a      	ldrb	r2, [r7, #13]
 8002f40:	4926      	ldr	r1, [pc, #152]	; (8002fdc <linkTimer+0x14c>)
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3315      	adds	r3, #21
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002f52:	e013      	b.n	8002f7c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002f54:	7b7a      	ldrb	r2, [r7, #13]
 8002f56:	4921      	ldr	r1, [pc, #132]	; (8002fdc <linkTimer+0x14c>)
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	3315      	adds	r3, #21
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002f68:	7b7a      	ldrb	r2, [r7, #13]
 8002f6a:	491c      	ldr	r1, [pc, #112]	; (8002fdc <linkTimer+0x14c>)
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	3315      	adds	r3, #21
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002f7c:	7b3b      	ldrb	r3, [r7, #12]
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d00b      	beq.n	8002f9a <linkTimer+0x10a>
 8002f82:	7b3a      	ldrb	r2, [r7, #12]
 8002f84:	4915      	ldr	r1, [pc, #84]	; (8002fdc <linkTimer+0x14c>)
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	440b      	add	r3, r1
 8002f90:	3308      	adds	r3, #8
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d2dc      	bcs.n	8002f54 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002f9a:	7b7a      	ldrb	r2, [r7, #13]
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fecf 	bl	8002d44 <LinkTimerAfter>
 8002fa6:	e00f      	b.n	8002fc8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <linkTimer+0x144>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ff0c 	bl	8002dd0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <linkTimer+0x144>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <linkTimer+0x148>)
 8002fc0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002fc2:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <linkTimer+0x144>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002fc8:	89fb      	ldrh	r3, [r7, #14]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000f40 	.word	0x20000f40
 8002fd8:	20000f41 	.word	0x20000f41
 8002fdc:	20000eb0 	.word	0x20000eb0
 8002fe0:	20000f44 	.word	0x20000f44

08002fe4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	460a      	mov	r2, r1
 8002fee:	71fb      	strb	r3, [r7, #7]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002ff4:	4b39      	ldr	r3, [pc, #228]	; (80030dc <UnlinkTimer+0xf8>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	79fa      	ldrb	r2, [r7, #7]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d111      	bne.n	8003024 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <UnlinkTimer+0xf8>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <UnlinkTimer+0xfc>)
 8003008:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800300a:	79fa      	ldrb	r2, [r7, #7]
 800300c:	4935      	ldr	r1, [pc, #212]	; (80030e4 <UnlinkTimer+0x100>)
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	3315      	adds	r3, #21
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <UnlinkTimer+0xf8>)
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e03e      	b.n	80030a2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003024:	79fa      	ldrb	r2, [r7, #7]
 8003026:	492f      	ldr	r1, [pc, #188]	; (80030e4 <UnlinkTimer+0x100>)
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	3314      	adds	r3, #20
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003038:	79fa      	ldrb	r2, [r7, #7]
 800303a:	492a      	ldr	r1, [pc, #168]	; (80030e4 <UnlinkTimer+0x100>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	3315      	adds	r3, #21
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800304c:	79f9      	ldrb	r1, [r7, #7]
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	4824      	ldr	r0, [pc, #144]	; (80030e4 <UnlinkTimer+0x100>)
 8003052:	460b      	mov	r3, r1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	440b      	add	r3, r1
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4403      	add	r3, r0
 800305c:	3315      	adds	r3, #21
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	b2d8      	uxtb	r0, r3
 8003062:	4920      	ldr	r1, [pc, #128]	; (80030e4 <UnlinkTimer+0x100>)
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	3315      	adds	r3, #21
 8003070:	4602      	mov	r2, r0
 8003072:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003074:	7bbb      	ldrb	r3, [r7, #14]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d013      	beq.n	80030a2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800307a:	79f9      	ldrb	r1, [r7, #7]
 800307c:	7bba      	ldrb	r2, [r7, #14]
 800307e:	4819      	ldr	r0, [pc, #100]	; (80030e4 <UnlinkTimer+0x100>)
 8003080:	460b      	mov	r3, r1
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	440b      	add	r3, r1
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4403      	add	r3, r0
 800308a:	3314      	adds	r3, #20
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2d8      	uxtb	r0, r3
 8003090:	4914      	ldr	r1, [pc, #80]	; (80030e4 <UnlinkTimer+0x100>)
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	3314      	adds	r3, #20
 800309e:	4602      	mov	r2, r0
 80030a0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80030a2:	79fa      	ldrb	r2, [r7, #7]
 80030a4:	490f      	ldr	r1, [pc, #60]	; (80030e4 <UnlinkTimer+0x100>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	330c      	adds	r3, #12
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <UnlinkTimer+0xf8>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b06      	cmp	r3, #6
 80030be:	d107      	bne.n	80030d0 <UnlinkTimer+0xec>
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d104      	bne.n	80030d0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <UnlinkTimer+0x104>)
 80030c8:	f04f 32ff 	mov.w	r2, #4294967295
 80030cc:	601a      	str	r2, [r3, #0]
  }

  return;
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
}
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	20000f40 	.word	0x20000f40
 80030e0:	20000f41 	.word	0x20000f41
 80030e4:	20000eb0 	.word	0x20000eb0
 80030e8:	20000f44 	.word	0x20000f44

080030ec <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <ReturnTimeElapsed+0x70>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d026      	beq.n	800314a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80030fc:	f7ff fe02 	bl	8002d04 <ReadRtcSsrValue>
 8003100:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <ReturnTimeElapsed+0x70>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d805      	bhi.n	8003118 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <ReturnTimeElapsed+0x70>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	e00a      	b.n	800312e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <ReturnTimeElapsed+0x74>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <ReturnTimeElapsed+0x70>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	4413      	add	r3, r2
 800312c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <ReturnTimeElapsed+0x78>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <ReturnTimeElapsed+0x7c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	40d3      	lsrs	r3, r2
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	e001      	b.n	800314e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	b29b      	uxth	r3, r3
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000f44 	.word	0x20000f44
 8003160:	20000f4c 	.word	0x20000f4c
 8003164:	20000f4a 	.word	0x20000f4a
 8003168:	20000f49 	.word	0x20000f49

0800316c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d108      	bne.n	800318e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800317c:	f7ff fdc2 	bl	8002d04 <ReadRtcSsrValue>
 8003180:	4603      	mov	r3, r0
 8003182:	4a21      	ldr	r2, [pc, #132]	; (8003208 <RestartWakeupCounter+0x9c>)
 8003184:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003186:	2003      	movs	r0, #3
 8003188:	f007 fd91 	bl	800acae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800318c:	e039      	b.n	8003202 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d803      	bhi.n	800319c <RestartWakeupCounter+0x30>
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <RestartWakeupCounter+0xa0>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d002      	beq.n	80031a2 <RestartWakeupCounter+0x36>
      Value -= 1;
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	3b01      	subs	r3, #1
 80031a0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80031a2:	bf00      	nop
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <RestartWakeupCounter+0xa4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f8      	beq.n	80031a4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <RestartWakeupCounter+0xa4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <RestartWakeupCounter+0xa4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80031c2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <RestartWakeupCounter+0xa8>)
 80031c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80031ca:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80031cc:	2003      	movs	r0, #3
 80031ce:	f007 fd7c 	bl	800acca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <RestartWakeupCounter+0xac>)
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	0c1b      	lsrs	r3, r3, #16
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	88fa      	ldrh	r2, [r7, #6]
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <RestartWakeupCounter+0xac>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80031e2:	f7ff fd8f 	bl	8002d04 <ReadRtcSsrValue>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <RestartWakeupCounter+0x9c>)
 80031ea:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <RestartWakeupCounter+0xa4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <RestartWakeupCounter+0xa4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031fa:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80031fc:	f3af 8000 	nop.w
  return ;
 8003200:	bf00      	nop
}
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000f44 	.word	0x20000f44
 800320c:	20000f49 	.word	0x20000f49
 8003210:	20000ff4 	.word	0x20000ff4
 8003214:	58000800 	.word	0x58000800
 8003218:	40002800 	.word	0x40002800

0800321c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003222:	4b45      	ldr	r3, [pc, #276]	; (8003338 <RescheduleTimerList+0x11c>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322e:	d107      	bne.n	8003240 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003230:	bf00      	nop
 8003232:	4b42      	ldr	r3, [pc, #264]	; (800333c <RescheduleTimerList+0x120>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f8      	bne.n	8003232 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003240:	4b3e      	ldr	r3, [pc, #248]	; (800333c <RescheduleTimerList+0x120>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	4b3d      	ldr	r3, [pc, #244]	; (800333c <RescheduleTimerList+0x120>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003250:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <RescheduleTimerList+0x124>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	493a      	ldr	r1, [pc, #232]	; (8003344 <RescheduleTimerList+0x128>)
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	3308      	adds	r3, #8
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800326a:	f7ff ff3f 	bl	80030ec <ReturnTimeElapsed>
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	d205      	bcs.n	8003286 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800327e:	4b32      	ldr	r3, [pc, #200]	; (8003348 <RescheduleTimerList+0x12c>)
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e04d      	b.n	8003322 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	4a30      	ldr	r2, [pc, #192]	; (800334c <RescheduleTimerList+0x130>)
 800328a:	8812      	ldrh	r2, [r2, #0]
 800328c:	b292      	uxth	r2, r2
 800328e:	4413      	add	r3, r2
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4293      	cmp	r3, r2
 8003296:	d906      	bls.n	80032a6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003298:	4b2c      	ldr	r3, [pc, #176]	; (800334c <RescheduleTimerList+0x130>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800329e:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <RescheduleTimerList+0x12c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e03d      	b.n	8003322 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <RescheduleTimerList+0x12c>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80032b6:	e034      	b.n	8003322 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	4922      	ldr	r1, [pc, #136]	; (8003344 <RescheduleTimerList+0x128>)
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	440b      	add	r3, r1
 80032c6:	3308      	adds	r3, #8
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d20a      	bcs.n	80032e6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	491c      	ldr	r1, [pc, #112]	; (8003344 <RescheduleTimerList+0x128>)
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	3308      	adds	r3, #8
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e013      	b.n	800330e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	4916      	ldr	r1, [pc, #88]	; (8003344 <RescheduleTimerList+0x128>)
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	3308      	adds	r3, #8
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	1ac9      	subs	r1, r1, r3
 80032fe:	4811      	ldr	r0, [pc, #68]	; (8003344 <RescheduleTimerList+0x128>)
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4403      	add	r3, r0
 800330a:	3308      	adds	r3, #8
 800330c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	490c      	ldr	r1, [pc, #48]	; (8003344 <RescheduleTimerList+0x128>)
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	3315      	adds	r3, #21
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b06      	cmp	r3, #6
 8003326:	d1c7      	bne.n	80032b8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003328:	89bb      	ldrh	r3, [r7, #12]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ff1e 	bl	800316c <RestartWakeupCounter>

  return ;
 8003330:	bf00      	nop
}
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40002800 	.word	0x40002800
 800333c:	20000ff4 	.word	0x20000ff4
 8003340:	20000f40 	.word	0x20000f40
 8003344:	20000eb0 	.word	0x20000eb0
 8003348:	20000f48 	.word	0x20000f48
 800334c:	20000f4e 	.word	0x20000f4e

08003350 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
 800335a:	617b      	str	r3, [r7, #20]
  return(result);
 800335c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
}
 8003362:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003364:	4b59      	ldr	r3, [pc, #356]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	22ca      	movs	r2, #202	; 0xca
 800336a:	625a      	str	r2, [r3, #36]	; 0x24
 800336c:	4b57      	ldr	r3, [pc, #348]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2253      	movs	r2, #83	; 0x53
 8003372:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8003374:	4b55      	ldr	r3, [pc, #340]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	4b54      	ldr	r3, [pc, #336]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003384:	4b52      	ldr	r3, [pc, #328]	; (80034d0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800338c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003390:	4950      	ldr	r1, [pc, #320]	; (80034d4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	330c      	adds	r3, #12
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d16e      	bne.n	8003484 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80033a6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033aa:	494a      	ldr	r1, [pc, #296]	; (80034d4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80033ba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033be:	4945      	ldr	r1, [pc, #276]	; (80034d4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	3310      	adds	r3, #16
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80033d0:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d04c      	beq.n	8003474 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80033da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80033de:	493d      	ldr	r1, [pc, #244]	; (80034d4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	330d      	adds	r3, #13
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d124      	bne.n	800343e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80033f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fdf2 	bl	8002fe4 <UnlinkTimer>
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f383 8810 	msr	PRIMASK, r3
}
 800340a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800340c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003410:	4930      	ldr	r1, [pc, #192]	; (80034d4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	440b      	add	r3, r1
 800341c:	3304      	adds	r3, #4
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fa32 	bl	8003890 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	22ca      	movs	r2, #202	; 0xca
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2253      	movs	r2, #83	; 0x53
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
 800343c:	e012      	b.n	8003464 <HW_TS_RTC_Wakeup_Handler+0x114>
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f383 8810 	msr	PRIMASK, r3
}
 8003448:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800344a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f99a 	bl	8003788 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	22ca      	movs	r2, #202	; 0xca
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2253      	movs	r2, #83	; 0x53
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8003464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	4619      	mov	r1, r3
 800346c:	69b8      	ldr	r0, [r7, #24]
 800346e:	f000 fa95 	bl	800399c <HW_TS_RTC_Int_AppNot>
 8003472:	e022      	b.n	80034ba <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8003474:	f7ff fed2 	bl	800321c <RescheduleTimerList>
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	e01a      	b.n	80034ba <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003484:	bf00      	nop
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f8      	beq.n	8003486 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80034a4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80034a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f383 8810 	msr	PRIMASK, r3
}
 80034b8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	22ff      	movs	r2, #255	; 0xff
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80034c2:	bf00      	nop
}
 80034c4:	3728      	adds	r7, #40	; 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000ff4 	.word	0x20000ff4
 80034d0:	20000f40 	.word	0x20000f40
 80034d4:	20000eb0 	.word	0x20000eb0
 80034d8:	20000f48 	.word	0x20000f48
 80034dc:	58000800 	.word	0x58000800

080034e0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80034ec:	4b5e      	ldr	r3, [pc, #376]	; (8003668 <HW_TS_Init+0x188>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	22ca      	movs	r2, #202	; 0xca
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
 80034f4:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <HW_TS_Init+0x188>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2253      	movs	r2, #83	; 0x53
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80034fc:	4b5b      	ldr	r3, [pc, #364]	; (800366c <HW_TS_Init+0x18c>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a5a      	ldr	r2, [pc, #360]	; (800366c <HW_TS_Init+0x18c>)
 8003502:	f043 0320 	orr.w	r3, r3, #32
 8003506:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003508:	4b58      	ldr	r3, [pc, #352]	; (800366c <HW_TS_Init+0x18c>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f1c3 0304 	rsb	r3, r3, #4
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b55      	ldr	r3, [pc, #340]	; (8003670 <HW_TS_Init+0x190>)
 800351c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800351e:	4b53      	ldr	r3, [pc, #332]	; (800366c <HW_TS_Init+0x18c>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003526:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800352a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	fa92 f2a2 	rbit	r2, r2
 8003532:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	2a00      	cmp	r2, #0
 800353c:	d101      	bne.n	8003542 <HW_TS_Init+0x62>
  {
    return 32U;
 800353e:	2220      	movs	r2, #32
 8003540:	e003      	b.n	800354a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	fab2 f282 	clz	r2, r2
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	40d3      	lsrs	r3, r2
 800354c:	b2db      	uxtb	r3, r3
 800354e:	3301      	adds	r3, #1
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4b48      	ldr	r3, [pc, #288]	; (8003674 <HW_TS_Init+0x194>)
 8003554:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003556:	4b45      	ldr	r3, [pc, #276]	; (800366c <HW_TS_Init+0x18c>)
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	b29b      	uxth	r3, r3
 800355c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003560:	b29b      	uxth	r3, r3
 8003562:	3301      	adds	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	4b44      	ldr	r3, [pc, #272]	; (8003678 <HW_TS_Init+0x198>)
 8003568:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800356a:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HW_TS_Init+0x198>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	3b01      	subs	r3, #1
 8003570:	4a40      	ldr	r2, [pc, #256]	; (8003674 <HW_TS_Init+0x194>)
 8003572:	7812      	ldrb	r2, [r2, #0]
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800357c:	4a3c      	ldr	r2, [pc, #240]	; (8003670 <HW_TS_Init+0x190>)
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	40d3      	lsrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800358a:	4293      	cmp	r3, r2
 800358c:	d904      	bls.n	8003598 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800358e:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HW_TS_Init+0x19c>)
 8003590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003594:	801a      	strh	r2, [r3, #0]
 8003596:	e003      	b.n	80035a0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	b29a      	uxth	r2, r3
 800359c:	4b37      	ldr	r3, [pc, #220]	; (800367c <HW_TS_Init+0x19c>)
 800359e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80035a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035a4:	f7ff fb9c 	bl	8002ce0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80035a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035ac:	f7ff fb84 	bl	8002cb8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d13d      	bne.n	8003632 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80035b6:	4b32      	ldr	r3, [pc, #200]	; (8003680 <HW_TS_Init+0x1a0>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80035bc:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HW_TS_Init+0x1a4>)
 80035be:	f04f 32ff 	mov.w	r2, #4294967295
 80035c2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e00c      	b.n	80035e4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80035ca:	7ffa      	ldrb	r2, [r7, #31]
 80035cc:	492e      	ldr	r1, [pc, #184]	; (8003688 <HW_TS_Init+0x1a8>)
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	330c      	adds	r3, #12
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	3301      	adds	r3, #1
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	d9ef      	bls.n	80035ca <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80035ea:	4b28      	ldr	r3, [pc, #160]	; (800368c <HW_TS_Init+0x1ac>)
 80035ec:	2206      	movs	r2, #6
 80035ee:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HW_TS_Init+0x188>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	4b1c      	ldr	r3, [pc, #112]	; (8003668 <HW_TS_Init+0x188>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fe:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HW_TS_Init+0x188>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <HW_TS_Init+0x188>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003610:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <HW_TS_Init+0x1b0>)
 8003614:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003618:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800361a:	2003      	movs	r0, #3
 800361c:	f007 fb55 	bl	800acca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <HW_TS_Init+0x188>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HW_TS_Init+0x188>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	e009      	b.n	8003646 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <HW_TS_Init+0x188>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003640:	2003      	movs	r0, #3
 8003642:	f007 fb34 	bl	800acae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HW_TS_Init+0x188>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	22ff      	movs	r2, #255	; 0xff
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800364e:	2200      	movs	r2, #0
 8003650:	2103      	movs	r1, #3
 8003652:	2003      	movs	r0, #3
 8003654:	f007 fae9 	bl	800ac2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003658:	2003      	movs	r0, #3
 800365a:	f007 fb00 	bl	800ac5e <HAL_NVIC_EnableIRQ>

  return;
 800365e:	bf00      	nop
}
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000ff4 	.word	0x20000ff4
 800366c:	40002800 	.word	0x40002800
 8003670:	20000f49 	.word	0x20000f49
 8003674:	20000f4a 	.word	0x20000f4a
 8003678:	20000f4c 	.word	0x20000f4c
 800367c:	20000f4e 	.word	0x20000f4e
 8003680:	20000f48 	.word	0x20000f48
 8003684:	20000f44 	.word	0x20000f44
 8003688:	20000eb0 	.word	0x20000eb0
 800368c:	20000f40 	.word	0x20000f40
 8003690:	58000800 	.word	0x58000800

08003694 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003694:	b480      	push	{r7}
 8003696:	b08b      	sub	sp, #44	; 0x2c
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036aa:	f3ef 8310 	mrs	r3, PRIMASK
 80036ae:	61fb      	str	r3, [r7, #28]
  return(result);
 80036b0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80036b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80036b4:	b672      	cpsid	i
}
 80036b6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80036b8:	e004      	b.n	80036c4 <HW_TS_Create+0x30>
  {
    loop++;
 80036ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036be:	3301      	adds	r3, #1
 80036c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80036c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d80c      	bhi.n	80036e6 <HW_TS_Create+0x52>
 80036cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80036d0:	492c      	ldr	r1, [pc, #176]	; (8003784 <HW_TS_Create+0xf0>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	330c      	adds	r3, #12
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e9      	bne.n	80036ba <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80036e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d038      	beq.n	8003760 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80036ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80036f2:	4924      	ldr	r1, [pc, #144]	; (8003784 <HW_TS_Create+0xf0>)
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	330c      	adds	r3, #12
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f383 8810 	msr	PRIMASK, r3
}
 800370e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003710:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003714:	491b      	ldr	r1, [pc, #108]	; (8003784 <HW_TS_Create+0xf0>)
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	3310      	adds	r3, #16
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8003726:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800372a:	4916      	ldr	r1, [pc, #88]	; (8003784 <HW_TS_Create+0xf0>)
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	330d      	adds	r3, #13
 8003738:	79fa      	ldrb	r2, [r7, #7]
 800373a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800373c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003740:	4910      	ldr	r1, [pc, #64]	; (8003784 <HW_TS_Create+0xf0>)
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003756:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003758:	2300      	movs	r3, #0
 800375a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800375e:	e008      	b.n	8003772 <HW_TS_Create+0xde>
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003776:	4618      	mov	r0, r3
 8003778:	372c      	adds	r7, #44	; 0x2c
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000eb0 	.word	0x20000eb0

08003788 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003792:	f3ef 8310 	mrs	r3, PRIMASK
 8003796:	60fb      	str	r3, [r7, #12]
  return(result);
 8003798:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800379a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800379c:	b672      	cpsid	i
}
 800379e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80037a0:	2003      	movs	r0, #3
 80037a2:	f007 fa6a 	bl	800ac7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80037a6:	4b34      	ldr	r3, [pc, #208]	; (8003878 <HW_TS_Stop+0xf0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	22ca      	movs	r2, #202	; 0xca
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24
 80037ae:	4b32      	ldr	r3, [pc, #200]	; (8003878 <HW_TS_Stop+0xf0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2253      	movs	r2, #83	; 0x53
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80037b6:	79fa      	ldrb	r2, [r7, #7]
 80037b8:	4930      	ldr	r1, [pc, #192]	; (800387c <HW_TS_Stop+0xf4>)
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	440b      	add	r3, r1
 80037c4:	330c      	adds	r3, #12
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d142      	bne.n	8003854 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fc06 	bl	8002fe4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80037d8:	4b29      	ldr	r3, [pc, #164]	; (8003880 <HW_TS_Stop+0xf8>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80037de:	7cfb      	ldrb	r3, [r7, #19]
 80037e0:	2b06      	cmp	r3, #6
 80037e2:	d12f      	bne.n	8003844 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80037e4:	4b27      	ldr	r3, [pc, #156]	; (8003884 <HW_TS_Stop+0xfc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f0:	d107      	bne.n	8003802 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80037f2:	bf00      	nop
 80037f4:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HW_TS_Stop+0xf0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f8      	bne.n	80037f4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <HW_TS_Stop+0xf0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HW_TS_Stop+0xf0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003810:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003812:	bf00      	nop
 8003814:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HW_TS_Stop+0xf0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f8      	beq.n	8003814 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HW_TS_Stop+0xf0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HW_TS_Stop+0xf0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003832:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003834:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HW_TS_Stop+0x100>)
 8003836:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800383a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800383c:	2003      	movs	r0, #3
 800383e:	f007 fa44 	bl	800acca <HAL_NVIC_ClearPendingIRQ>
 8003842:	e007      	b.n	8003854 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <HW_TS_Stop+0x104>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	7cfa      	ldrb	r2, [r7, #19]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003850:	f7ff fce4 	bl	800321c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HW_TS_Stop+0xf0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	22ff      	movs	r2, #255	; 0xff
 800385a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800385c:	2003      	movs	r0, #3
 800385e:	f007 f9fe 	bl	800ac5e <HAL_NVIC_EnableIRQ>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800386e:	bf00      	nop
}
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000ff4 	.word	0x20000ff4
 800387c:	20000eb0 	.word	0x20000eb0
 8003880:	20000f40 	.word	0x20000f40
 8003884:	40002800 	.word	0x40002800
 8003888:	58000800 	.word	0x58000800
 800388c:	20000f41 	.word	0x20000f41

08003890 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800389c:	79fa      	ldrb	r2, [r7, #7]
 800389e:	493b      	ldr	r1, [pc, #236]	; (800398c <HW_TS_Start+0xfc>)
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	330c      	adds	r3, #12
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d103      	bne.n	80038bc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ff66 	bl	8003788 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038bc:	f3ef 8310 	mrs	r3, PRIMASK
 80038c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80038c2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80038c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80038c6:	b672      	cpsid	i
}
 80038c8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80038ca:	2003      	movs	r0, #3
 80038cc:	f007 f9d5 	bl	800ac7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80038d0:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HW_TS_Start+0x100>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	22ca      	movs	r2, #202	; 0xca
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HW_TS_Start+0x100>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2253      	movs	r2, #83	; 0x53
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80038e0:	79fa      	ldrb	r2, [r7, #7]
 80038e2:	492a      	ldr	r1, [pc, #168]	; (800398c <HW_TS_Start+0xfc>)
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	440b      	add	r3, r1
 80038ee:	330c      	adds	r3, #12
 80038f0:	2202      	movs	r2, #2
 80038f2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80038f4:	79fa      	ldrb	r2, [r7, #7]
 80038f6:	4925      	ldr	r1, [pc, #148]	; (800398c <HW_TS_Start+0xfc>)
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3308      	adds	r3, #8
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003908:	79fa      	ldrb	r2, [r7, #7]
 800390a:	4920      	ldr	r1, [pc, #128]	; (800398c <HW_TS_Start+0xfc>)
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	3304      	adds	r3, #4
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fab6 	bl	8002e90 <linkTimer>
 8003924:	4603      	mov	r3, r0
 8003926:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HW_TS_Start+0x104>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800392e:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <HW_TS_Start+0x108>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	7c7a      	ldrb	r2, [r7, #17]
 8003936:	429a      	cmp	r2, r3
 8003938:	d002      	beq.n	8003940 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800393a:	f7ff fc6f 	bl	800321c <RescheduleTimerList>
 800393e:	e013      	b.n	8003968 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003940:	79fa      	ldrb	r2, [r7, #7]
 8003942:	4912      	ldr	r1, [pc, #72]	; (800398c <HW_TS_Start+0xfc>)
 8003944:	4613      	mov	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	440b      	add	r3, r1
 800394e:	3308      	adds	r3, #8
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	8a7b      	ldrh	r3, [r7, #18]
 8003954:	79fa      	ldrb	r2, [r7, #7]
 8003956:	1ac9      	subs	r1, r1, r3
 8003958:	480c      	ldr	r0, [pc, #48]	; (800398c <HW_TS_Start+0xfc>)
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4403      	add	r3, r0
 8003964:	3308      	adds	r3, #8
 8003966:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HW_TS_Start+0x100>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	22ff      	movs	r2, #255	; 0xff
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003970:	2003      	movs	r0, #3
 8003972:	f007 f974 	bl	800ac5e <HAL_NVIC_EnableIRQ>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f383 8810 	msr	PRIMASK, r3
}
 8003980:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003982:	bf00      	nop
}
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000eb0 	.word	0x20000eb0
 8003990:	20000ff4 	.word	0x20000ff4
 8003994:	20000f40 	.word	0x20000f40
 8003998:	20000f41 	.word	0x20000f41

0800399c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	460b      	mov	r3, r1
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4798      	blx	r3

  return;
 80039ae:	bf00      	nop
}
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <LL_RCC_LSE_SetDriveCapability>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f023 0218 	bic.w	r2, r3, #24
 80039ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_AHB2_GRP1_EnableClock>:
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4013      	ands	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	3220      	adds	r2, #32
 8003a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <LL_HSEM_1StepLock+0x2c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d001      	beq.n	8003a32 <LL_HSEM_1StepLock+0x1e>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <LL_HSEM_1StepLock+0x20>
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	80000400 	.word	0x80000400

08003a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a48:	f006 fef6 	bl	800a838 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003a4c:	f7fe fbc8 	bl	80021e0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a50:	f000 f81c 	bl	8003a8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003a54:	f000 f878 	bl	8003b48 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003a58:	f000 f8d6 	bl	8003c08 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a5c:	f000 f93a 	bl	8003cd4 <MX_GPIO_Init>
  MX_RTC_Init();
 8003a60:	f000 f904 	bl	8003c6c <MX_RTC_Init>
  MX_RNG_Init();
 8003a64:	f000 f8ec 	bl	8003c40 <MX_RNG_Init>
  MX_I2C1_Init();
 8003a68:	f000 f88e 	bl	8003b88 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8003a6c:	f002 fb48 	bl	8006100 <MX_USB_Device_Init>
  MX_RF_Init();
 8003a70:	f000 f8de 	bl	8003c30 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  LL_HSEM_1StepLock( HSEM, 5 );
 8003a74:	2105      	movs	r1, #5
 8003a76:	4804      	ldr	r0, [pc, #16]	; (8003a88 <main+0x44>)
 8003a78:	f7ff ffcc 	bl	8003a14 <LL_HSEM_1StepLock>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003a7c:	f7fe fbbe 	bl	80021fc <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003a80:	f7fe fd65 	bl	800254e <MX_APPE_Process>
 8003a84:	e7fc      	b.n	8003a80 <main+0x3c>
 8003a86:	bf00      	nop
 8003a88:	58001400 	.word	0x58001400

08003a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b09a      	sub	sp, #104	; 0x68
 8003a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a92:	f107 0320 	add.w	r3, r7, #32
 8003a96:	2248      	movs	r2, #72	; 0x48
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f013 ff70 	bl	8017980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
 8003aaa:	60da      	str	r2, [r3, #12]
 8003aac:	611a      	str	r2, [r3, #16]
 8003aae:	615a      	str	r2, [r3, #20]
 8003ab0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003ab2:	f009 fffd 	bl	800dab0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f7ff ff7d 	bl	80039b6 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003abc:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <SystemClock_Config+0xb8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ac4:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <SystemClock_Config+0xb8>)
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <SystemClock_Config+0xb8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8003ad8:	2347      	movs	r3, #71	; 0x47
 8003ada:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003aec:	2301      	movs	r3, #1
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003af0:	2340      	movs	r3, #64	; 0x40
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af8:	f107 0320 	add.w	r3, r7, #32
 8003afc:	4618      	mov	r0, r3
 8003afe:	f00a fb63 	bl	800e1c8 <HAL_RCC_OscConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003b08:	f000 f8f1 	bl	8003cee <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003b0c:	236f      	movs	r3, #111	; 0x6f
 8003b0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003b10:	2302      	movs	r3, #2
 8003b12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f00a febf 	bl	800e8b0 <HAL_RCC_ClockConfig>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003b38:	f000 f8d9 	bl	8003cee <Error_Handler>
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3768      	adds	r7, #104	; 0x68
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	58000400 	.word	0x58000400

08003b48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b094      	sub	sp, #80	; 0x50
 8003b4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b4e:	463b      	mov	r3, r7
 8003b50:	2250      	movs	r2, #80	; 0x50
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f013 ff13 	bl	8017980 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003b5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003b5e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003b60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b64:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003b66:	2302      	movs	r3, #2
 8003b68:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b6e:	463b      	mov	r3, r7
 8003b70:	4618      	mov	r0, r3
 8003b72:	f00b faae 	bl	800f0d2 <HAL_RCCEx_PeriphCLKConfig>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003b7c:	f000 f8b7 	bl	8003cee <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003b80:	bf00      	nop
 8003b82:	3750      	adds	r7, #80	; 0x50
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b8c:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <MX_I2C1_Init+0x78>)
 8003b90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003b92:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003b94:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <MX_I2C1_Init+0x7c>)
 8003b96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b98:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b9e:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ba4:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003baa:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003bb0:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bc2:	480e      	ldr	r0, [pc, #56]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003bc4:	f007 fb64 	bl	800b290 <HAL_I2C_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003bce:	f000 f88e 	bl	8003cee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4809      	ldr	r0, [pc, #36]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003bd6:	f008 f919 	bl	800be0c <HAL_I2CEx_ConfigAnalogFilter>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003be0:	f000 f885 	bl	8003cee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003be4:	2100      	movs	r1, #0
 8003be6:	4805      	ldr	r0, [pc, #20]	; (8003bfc <MX_I2C1_Init+0x74>)
 8003be8:	f008 f95b 	bl	800bea2 <HAL_I2CEx_ConfigDigitalFilter>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003bf2:	f000 f87c 	bl	8003cee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000f50 	.word	0x20000f50
 8003c00:	40005400 	.word	0x40005400
 8003c04:	00707cbb 	.word	0x00707cbb

08003c08 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <MX_IPCC_Init+0x20>)
 8003c0e:	4a07      	ldr	r2, [pc, #28]	; (8003c2c <MX_IPCC_Init+0x24>)
 8003c10:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003c12:	4805      	ldr	r0, [pc, #20]	; (8003c28 <MX_IPCC_Init+0x20>)
 8003c14:	f008 f992 	bl	800bf3c <HAL_IPCC_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8003c1e:	f000 f866 	bl	8003cee <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000fa4 	.word	0x20000fa4
 8003c2c:	58000c00 	.word	0x58000c00

08003c30 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <MX_RNG_Init+0x24>)
 8003c46:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <MX_RNG_Init+0x28>)
 8003c48:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <MX_RNG_Init+0x24>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003c50:	4804      	ldr	r0, [pc, #16]	; (8003c64 <MX_RNG_Init+0x24>)
 8003c52:	f00b fcc5 	bl	800f5e0 <HAL_RNG_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8003c5c:	f000 f847 	bl	8003cee <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003c60:	bf00      	nop
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000fe0 	.word	0x20000fe0
 8003c68:	58001000 	.word	0x58001000

08003c6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c70:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <MX_RTC_Init+0x60>)
 8003c72:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <MX_RTC_Init+0x64>)
 8003c74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <MX_RTC_Init+0x60>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <MX_RTC_Init+0x60>)
 8003c7e:	220f      	movs	r2, #15
 8003c80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <MX_RTC_Init+0x60>)
 8003c84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003c88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <MX_RTC_Init+0x60>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <MX_RTC_Init+0x60>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <MX_RTC_Init+0x60>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <MX_RTC_Init+0x60>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ca2:	480a      	ldr	r0, [pc, #40]	; (8003ccc <MX_RTC_Init+0x60>)
 8003ca4:	f00b fcd2 	bl	800f64c <HAL_RTC_Init>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003cae:	f000 f81e 	bl	8003cee <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4805      	ldr	r0, [pc, #20]	; (8003ccc <MX_RTC_Init+0x60>)
 8003cb8:	f00b fdc8 	bl	800f84c <HAL_RTCEx_SetWakeUpTimer_IT>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003cc2:	f000 f814 	bl	8003cee <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000ff4 	.word	0x20000ff4
 8003cd0:	40002800 	.word	0x40002800

08003cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd8:	2004      	movs	r0, #4
 8003cda:	f7ff fe82 	bl	80039e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f7ff fe7f 	bl	80039e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f7ff fe7c 	bl	80039e2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}

08003cee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <LL_PWR_SetPowerMode>:
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <LL_PWR_SetPowerMode+0x24>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f023 0207 	bic.w	r2, r3, #7
 8003d0c:	4904      	ldr	r1, [pc, #16]	; (8003d20 <LL_PWR_SetPowerMode+0x24>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	600b      	str	r3, [r1, #0]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	58000400 	.word	0x58000400

08003d24 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <LL_PWR_ClearFlag_WU+0x14>)
 8003d2a:	221f      	movs	r2, #31
 8003d2c:	619a      	str	r2, [r3, #24]
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	58000400 	.word	0x58000400

08003d3c <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8003d40:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	d101      	bne.n	8003d54 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	58000400 	.word	0x58000400

08003d64 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8003d68:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d76:	d101      	bne.n	8003d7c <LL_PWR_IsActiveFlag_C2DS+0x18>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	58000400 	.word	0x58000400

08003d8c <LL_RCC_HSE_Enable>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_RCC_HSE_IsReady>:
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dbc:	d101      	bne.n	8003dc2 <LL_RCC_HSE_IsReady+0x18>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <LL_RCC_HSE_IsReady+0x1a>
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <LL_RCC_HSI_Enable>:
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de0:	6013      	str	r3, [r2, #0]
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_RCC_HSI_IsReady>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d101      	bne.n	8003e04 <LL_RCC_HSI_IsReady+0x18>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <LL_RCC_HSI_IsReady+0x1a>
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_RCC_SetSysClkSource>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f023 0203 	bic.w	r2, r3, #3
 8003e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	608b      	str	r3, [r1, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_RCC_GetSysClkSource>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_RCC_SetSMPSClockSource>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	f023 0203 	bic.w	r2, r3, #3
 8003e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_LPM_EnableSleep>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <LL_LPM_EnableSleep+0x1c>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <LL_LPM_EnableSleep+0x1c>)
 8003e82:	f023 0304 	bic.w	r3, r3, #4
 8003e86:	6113      	str	r3, [r2, #16]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <LL_LPM_EnableDeepSleep+0x1c>)
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <LL_LPM_EnableDeepSleep+0x1c>)
 8003ea2:	f043 0304 	orr.w	r3, r3, #4
 8003ea6:	6113      	str	r3, [r2, #16]
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <LL_HSEM_1StepLock>:
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	3220      	adds	r2, #32
 8003ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ecc:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <LL_HSEM_1StepLock+0x2c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d001      	beq.n	8003ed6 <LL_HSEM_1StepLock+0x1e>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <LL_HSEM_1StepLock+0x20>
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	80000400 	.word	0x80000400

08003ee8 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8003f12:	f006 fd23 	bl	800a95c <HAL_SuspendTick>

  EnterLowPower();
 8003f16:	f000 f835 	bl	8003f84 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8003f1a:	f7ff ff03 	bl	8003d24 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8003f1e:	2003      	movs	r0, #3
 8003f20:	f7ff feec 	bl	8003cfc <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003f24:	f7ff ffb8 	bl	8003e98 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003f28:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8003f2a:	bf00      	nop
}
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 8003f32:	f006 fd23 	bl	800a97c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8003f36:	bf00      	nop
}
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8003f3e:	f006 fd0d 	bl	800a95c <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8003f42:	f000 f81f 	bl	8003f84 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 8003f46:	2002      	movs	r0, #2
 8003f48:	f7ff fed8 	bl	8003cfc <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003f4c:	f7ff ffa4 	bl	8003e98 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003f50:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8003f52:	bf00      	nop
}
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8003f5a:	f000 f84f 	bl	8003ffc <ExitLowPower>

  HAL_ResumeTick();
 8003f5e:	f006 fd0d 	bl	800a97c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8003f62:	bf00      	nop
}
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8003f6a:	f006 fcf7 	bl	800a95c <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8003f6e:	f7ff ff83 	bl	8003e78 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8003f72:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8003f74:	bf00      	nop
}
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8003f7c:	f006 fcfe 	bl	800a97c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8003f80:	bf00      	nop
}
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8003f88:	bf00      	nop
 8003f8a:	2103      	movs	r1, #3
 8003f8c:	4819      	ldr	r0, [pc, #100]	; (8003ff4 <EnterLowPower+0x70>)
 8003f8e:	f7ff ff93 	bl	8003eb8 <LL_HSEM_1StepLock>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f8      	bne.n	8003f8a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8003f98:	2104      	movs	r1, #4
 8003f9a:	4816      	ldr	r0, [pc, #88]	; (8003ff4 <EnterLowPower+0x70>)
 8003f9c:	f7ff ff8c 	bl	8003eb8 <LL_HSEM_1StepLock>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d117      	bne.n	8003fd6 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8003fa6:	f7ff fedd 	bl	8003d64 <LL_PWR_IsActiveFlag_C2DS>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <EnterLowPower+0x36>
 8003fb0:	f7ff fec4 	bl	8003d3c <LL_PWR_IsActiveFlag_C2SB>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d015      	beq.n	8003fe6 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	480d      	ldr	r0, [pc, #52]	; (8003ff4 <EnterLowPower+0x70>)
 8003fc0:	f7ff ff92 	bl	8003ee8 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8003fc4:	f000 f852 	bl	800406c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <EnterLowPower+0x74>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <EnterLowPower+0x74>)
 8003fce:	f023 0307 	bic.w	r3, r3, #7
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	e007      	b.n	8003fe6 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8003fd6:	f000 f849 	bl	800406c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <EnterLowPower+0x74>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a06      	ldr	r2, [pc, #24]	; (8003ff8 <EnterLowPower+0x74>)
 8003fe0:	f023 0307 	bic.w	r3, r3, #7
 8003fe4:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2103      	movs	r1, #3
 8003fea:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <EnterLowPower+0x70>)
 8003fec:	f7ff ff7c 	bl	8003ee8 <LL_HSEM_ReleaseLock>

  return;
 8003ff0:	bf00      	nop
}
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	58001400 	.word	0x58001400
 8003ff8:	58004000 	.word	0x58004000

08003ffc <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8004000:	2200      	movs	r2, #0
 8004002:	2104      	movs	r1, #4
 8004004:	4817      	ldr	r0, [pc, #92]	; (8004064 <ExitLowPower+0x68>)
 8004006:	f7ff ff6f 	bl	8003ee8 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 800400a:	bf00      	nop
 800400c:	2103      	movs	r1, #3
 800400e:	4815      	ldr	r0, [pc, #84]	; (8004064 <ExitLowPower+0x68>)
 8004010:	f7ff ff52 	bl	8003eb8 <LL_HSEM_1StepLock>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f8      	bne.n	800400c <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800401a:	f7ff ff0d 	bl	8003e38 <LL_RCC_GetSysClkSource>
 800401e:	4603      	mov	r3, r0
 8004020:	2b04      	cmp	r3, #4
 8004022:	d118      	bne.n	8004056 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
    LL_RCC_HSE_Enable( );
 8004024:	f7ff feb2 	bl	8003d8c <LL_RCC_HSE_Enable>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <ExitLowPower+0x6c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 0307 	bic.w	r3, r3, #7
 8004030:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <ExitLowPower+0x6c>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6013      	str	r3, [r2, #0]
    while(!LL_RCC_HSE_IsReady( ));
 8004038:	bf00      	nop
 800403a:	f7ff feb6 	bl	8003daa <LL_RCC_HSE_IsReady>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0fa      	beq.n	800403a <ExitLowPower+0x3e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8004044:	2002      	movs	r0, #2
 8004046:	f7ff fee3 	bl	8003e10 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800404a:	bf00      	nop
 800404c:	f7ff fef4 	bl	8003e38 <LL_RCC_GetSysClkSource>
 8004050:	4603      	mov	r3, r0
 8004052:	2b08      	cmp	r3, #8
 8004054:	d1fa      	bne.n	800404c <ExitLowPower+0x50>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8004056:	2200      	movs	r2, #0
 8004058:	2103      	movs	r1, #3
 800405a:	4802      	ldr	r0, [pc, #8]	; (8004064 <ExitLowPower+0x68>)
 800405c:	f7ff ff44 	bl	8003ee8 <LL_HSEM_ReleaseLock>

  return;
 8004060:	bf00      	nop
}
 8004062:	bd80      	pop	{r7, pc}
 8004064:	58001400 	.word	0x58001400
 8004068:	58004000 	.word	0x58004000

0800406c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8004070:	f7ff fead 	bl	8003dce <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8004074:	bf00      	nop
 8004076:	f7ff feb9 	bl	8003dec <LL_RCC_HSI_IsReady>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0fa      	beq.n	8004076 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8004080:	2001      	movs	r0, #1
 8004082:	f7ff fec5 	bl	8003e10 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8004086:	2000      	movs	r0, #0
 8004088:	f7ff fee2 	bl	8003e50 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 800408c:	bf00      	nop
 800408e:	f7ff fed3 	bl	8003e38 <LL_RCC_GetSysClkSource>
 8004092:	4603      	mov	r3, r0
 8004094:	2b04      	cmp	r3, #4
 8004096:	d1fa      	bne.n	800408e <Switch_On_HSI+0x22>
  return;
 8004098:	bf00      	nop
}
 800409a:	bd80      	pop	{r7, pc}

0800409c <LL_RCC_EnableRTC>:
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80040a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <LL_AHB2_GRP1_EnableClock>:
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80040c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80040d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4013      	ands	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80040e2:	68fb      	ldr	r3, [r7, #12]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_AHB3_GRP1_EnableClock>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4313      	orrs	r3, r2
 8004106:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4013      	ands	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004114:	68fb      	ldr	r3, [r7, #12]
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_APB1_GRP1_EnableClock>:
{
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4313      	orrs	r3, r2
 8004138:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4013      	ands	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004146:	68fb      	ldr	r3, [r7, #12]
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_APB1_GRP1_DisableClock>:
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	43db      	mvns	r3, r3
 8004166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800416a:	4013      	ands	r3, r2
 800416c:	658b      	str	r3, [r1, #88]	; 0x58
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800417e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004182:	f7ff ffb5 	bl	80040f0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8004186:	2200      	movs	r2, #0
 8004188:	2100      	movs	r1, #0
 800418a:	202e      	movs	r0, #46	; 0x2e
 800418c:	f006 fd4d 	bl	800ac2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8004190:	202e      	movs	r0, #46	; 0x2e
 8004192:	f006 fd64 	bl	800ac5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b09c      	sub	sp, #112	; 0x70
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041b4:	f107 030c 	add.w	r3, r7, #12
 80041b8:	2250      	movs	r2, #80	; 0x50
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f013 fbdf 	bl	8017980 <memset>
  if(hi2c->Instance==I2C1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <HAL_I2C_MspInit+0x84>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d125      	bne.n	8004218 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80041cc:	2304      	movs	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80041d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041d6:	f107 030c 	add.w	r3, r7, #12
 80041da:	4618      	mov	r0, r3
 80041dc:	f00a ff79 	bl	800f0d2 <HAL_RCCEx_PeriphCLKConfig>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80041e6:	f7ff fd82 	bl	8003cee <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ea:	2002      	movs	r0, #2
 80041ec:	f7ff ff67 	bl	80040be <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041f0:	23c0      	movs	r3, #192	; 0xc0
 80041f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041f4:	2312      	movs	r3, #18
 80041f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041fc:	2300      	movs	r3, #0
 80041fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004200:	2304      	movs	r3, #4
 8004202:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004204:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004208:	4619      	mov	r1, r3
 800420a:	4806      	ldr	r0, [pc, #24]	; (8004224 <HAL_I2C_MspInit+0x88>)
 800420c:	f006 fd6c 	bl	800ace8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004210:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004214:	f7ff ff85 	bl	8004122 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004218:	bf00      	nop
 800421a:	3770      	adds	r7, #112	; 0x70
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40005400 	.word	0x40005400
 8004224:	48000400 	.word	0x48000400

08004228 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <HAL_I2C_MspDeInit+0x34>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10b      	bne.n	8004252 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800423a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800423e:	f7ff ff89 	bl	8004154 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004242:	2140      	movs	r1, #64	; 0x40
 8004244:	4806      	ldr	r0, [pc, #24]	; (8004260 <HAL_I2C_MspDeInit+0x38>)
 8004246:	f006 febf 	bl	800afc8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800424a:	2180      	movs	r1, #128	; 0x80
 800424c:	4804      	ldr	r0, [pc, #16]	; (8004260 <HAL_I2C_MspDeInit+0x38>)
 800424e:	f006 febb 	bl	800afc8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40005400 	.word	0x40005400
 8004260:	48000400 	.word	0x48000400

08004264 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0d      	ldr	r2, [pc, #52]	; (80042a8 <HAL_IPCC_MspInit+0x44>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d113      	bne.n	800429e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8004276:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800427a:	f7ff ff39 	bl	80040f0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800427e:	2200      	movs	r2, #0
 8004280:	2100      	movs	r1, #0
 8004282:	202c      	movs	r0, #44	; 0x2c
 8004284:	f006 fcd1 	bl	800ac2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004288:	202c      	movs	r0, #44	; 0x2c
 800428a:	f006 fce8 	bl	800ac5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2100      	movs	r1, #0
 8004292:	202d      	movs	r0, #45	; 0x2d
 8004294:	f006 fcc9 	bl	800ac2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8004298:	202d      	movs	r0, #45	; 0x2d
 800429a:	f006 fce0 	bl	800ac5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	58000c00 	.word	0x58000c00

080042ac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b096      	sub	sp, #88	; 0x58
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042b4:	f107 0308 	add.w	r3, r7, #8
 80042b8:	2250      	movs	r2, #80	; 0x50
 80042ba:	2100      	movs	r1, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f013 fb5f 	bl	8017980 <memset>
  if(hrng->Instance==RNG)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <HAL_RNG_MspInit+0x50>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d113      	bne.n	80042f4 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80042cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80042d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042d6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	4618      	mov	r0, r3
 80042de:	f00a fef8 	bl	800f0d2 <HAL_RCCEx_PeriphCLKConfig>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80042e8:	f7ff fd01 	bl	8003cee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80042ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80042f0:	f7ff fefe 	bl	80040f0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80042f4:	bf00      	nop
 80042f6:	3758      	adds	r7, #88	; 0x58
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	58001000 	.word	0x58001000

08004300 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b096      	sub	sp, #88	; 0x58
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004308:	f107 0308 	add.w	r3, r7, #8
 800430c:	2250      	movs	r2, #80	; 0x50
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f013 fb35 	bl	8017980 <memset>
  if(hrtc->Instance==RTC)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_RTC_MspInit+0x6c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d120      	bne.n	8004362 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004324:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800432a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800432c:	f107 0308 	add.w	r3, r7, #8
 8004330:	4618      	mov	r0, r3
 8004332:	f00a fece 	bl	800f0d2 <HAL_RCCEx_PeriphCLKConfig>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800433c:	f7ff fcd7 	bl	8003cee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004340:	f7ff feac 	bl	800409c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004344:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004348:	f7ff feeb 	bl	8004122 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	2003      	movs	r0, #3
 8004352:	f006 fc6a 	bl	800ac2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004356:	2003      	movs	r0, #3
 8004358:	f006 fc81 	bl	800ac5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f00b fb31 	bl	800f9c4 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004362:	bf00      	nop
 8004364:	3758      	adds	r7, #88	; 0x58
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40002800 	.word	0x40002800

08004370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004382:	e7fe      	b.n	8004382 <HardFault_Handler+0x4>

08004384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004388:	e7fe      	b.n	8004388 <MemManage_Handler+0x4>

0800438a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800438e:	e7fe      	b.n	800438e <BusFault_Handler+0x4>

08004390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004394:	e7fe      	b.n	8004394 <UsageFault_Handler+0x4>

08004396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043b2:	b480      	push	{r7}
 80043b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043c4:	f006 fa92 	bl	800a8ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043c8:	bf00      	nop
 80043ca:	bd80      	pop	{r7, pc}

080043cc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80043d0:	f7fe ffbe 	bl	8003350 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80043d4:	bf00      	nop
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80043dc:	4802      	ldr	r0, [pc, #8]	; (80043e8 <USB_LP_IRQHandler+0x10>)
 80043de:	f007 ff23 	bl	800c228 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	2000308c 	.word	0x2000308c

080043ec <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80043f0:	f001 fd10 	bl	8005e14 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80043fc:	f001 fd40 	bl	8005e80 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8004400:	bf00      	nop
 8004402:	bd80      	pop	{r7, pc}

08004404 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004408:	f006 ff1e 	bl	800b248 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800440c:	bf00      	nop
 800440e:	bd80      	pop	{r7, pc}

08004410 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8004414:	2010      	movs	r0, #16
 8004416:	f006 feff 	bl	800b218 <HAL_GPIO_EXTI_IRQHandler>
}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}

0800441e <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8004422:	2001      	movs	r0, #1
 8004424:	f006 fef8 	bl	800b218 <HAL_GPIO_EXTI_IRQHandler>
}
 8004428:	bf00      	nop
 800442a:	bd80      	pop	{r7, pc}

0800442c <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8004430:	2002      	movs	r0, #2
 8004432:	f006 fef1 	bl	800b218 <HAL_GPIO_EXTI_IRQHandler>
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}

0800443a <LL_AHB2_GRP1_EnableClock>:
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4313      	orrs	r3, r2
 8004450:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4013      	ands	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <LL_APB1_GRP1_EnableClock>:
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800447a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4313      	orrs	r3, r2
 8004482:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4013      	ands	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004490:	68fb      	ldr	r3, [r7, #12]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_APB1_GRP1_DisableClock>:
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80044a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b4:	4013      	ands	r3, r2
 80044b6:	658b      	str	r3, [r1, #88]	; 0x58
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <LL_SYSCFG_EnableFastModePlus>:
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	4904      	ldr	r1, [pc, #16]	; (80044e4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	40010000 	.word	0x40010000

080044e8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80044f2:	4b19      	ldr	r3, [pc, #100]	; (8004558 <BSP_I2C1_Init+0x70>)
 80044f4:	4a19      	ldr	r2, [pc, #100]	; (800455c <BSP_I2C1_Init+0x74>)
 80044f6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <BSP_I2C1_Init+0x78>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	4918      	ldr	r1, [pc, #96]	; (8004560 <BSP_I2C1_Init+0x78>)
 8004500:	600a      	str	r2, [r1, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d122      	bne.n	800454c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8004506:	4814      	ldr	r0, [pc, #80]	; (8004558 <BSP_I2C1_Init+0x70>)
 8004508:	f007 f9ae 	bl	800b868 <HAL_I2C_GetState>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d11c      	bne.n	800454c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8004512:	4811      	ldr	r0, [pc, #68]	; (8004558 <BSP_I2C1_Init+0x70>)
 8004514:	f000 f962 	bl	80047dc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d116      	bne.n	800454c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800451e:	480e      	ldr	r0, [pc, #56]	; (8004558 <BSP_I2C1_Init+0x70>)
 8004520:	f000 f918 	bl	8004754 <MX_I2C1_Init>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800452a:	f06f 0307 	mvn.w	r3, #7
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	e00c      	b.n	800454c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004532:	2100      	movs	r1, #0
 8004534:	4808      	ldr	r0, [pc, #32]	; (8004558 <BSP_I2C1_Init+0x70>)
 8004536:	f007 fc69 	bl	800be0c <HAL_I2CEx_ConfigAnalogFilter>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004540:	f06f 0307 	mvn.w	r3, #7
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	e001      	b.n	800454c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8004548:	2300      	movs	r3, #0
 800454a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800454c:	687b      	ldr	r3, [r7, #4]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000f50 	.word	0x20000f50
 800455c:	40005400 	.word	0x40005400
 8004560:	20001018 	.word	0x20001018

08004564 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <BSP_I2C1_DeInit+0x48>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <BSP_I2C1_DeInit+0x48>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3b01      	subs	r3, #1
 800457c:	4a0b      	ldr	r2, [pc, #44]	; (80045ac <BSP_I2C1_DeInit+0x48>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <BSP_I2C1_DeInit+0x48>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10b      	bne.n	80045a0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8004588:	4809      	ldr	r0, [pc, #36]	; (80045b0 <BSP_I2C1_DeInit+0x4c>)
 800458a:	f000 f971 	bl	8004870 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800458e:	4808      	ldr	r0, [pc, #32]	; (80045b0 <BSP_I2C1_DeInit+0x4c>)
 8004590:	f006 ff0d 	bl	800b3ae <HAL_I2C_DeInit>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800459a:	f06f 0307 	mvn.w	r3, #7
 800459e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80045a0:	687b      	ldr	r3, [r7, #4]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20001018 	.word	0x20001018
 80045b0:	20000f50 	.word	0x20000f50

080045b4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af04      	add	r7, sp, #16
 80045ba:	60ba      	str	r2, [r7, #8]
 80045bc:	461a      	mov	r2, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	81fb      	strh	r3, [r7, #14]
 80045c2:	460b      	mov	r3, r1
 80045c4:	81bb      	strh	r3, [r7, #12]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80045ce:	89ba      	ldrh	r2, [r7, #12]
 80045d0:	89f9      	ldrh	r1, [r7, #14]
 80045d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d6:	9302      	str	r3, [sp, #8]
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2301      	movs	r3, #1
 80045e2:	480c      	ldr	r0, [pc, #48]	; (8004614 <BSP_I2C1_WriteReg+0x60>)
 80045e4:	f006 ff12 	bl	800b40c <HAL_I2C_Mem_Write>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80045ee:	4809      	ldr	r0, [pc, #36]	; (8004614 <BSP_I2C1_WriteReg+0x60>)
 80045f0:	f007 f948 	bl	800b884 <HAL_I2C_GetError>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d103      	bne.n	8004602 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80045fa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e002      	b.n	8004608 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004602:	f06f 0303 	mvn.w	r3, #3
 8004606:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004608:	697b      	ldr	r3, [r7, #20]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000f50 	.word	0x20000f50

08004618 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af04      	add	r7, sp, #16
 800461e:	60ba      	str	r2, [r7, #8]
 8004620:	461a      	mov	r2, r3
 8004622:	4603      	mov	r3, r0
 8004624:	81fb      	strh	r3, [r7, #14]
 8004626:	460b      	mov	r3, r1
 8004628:	81bb      	strh	r3, [r7, #12]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004632:	89ba      	ldrh	r2, [r7, #12]
 8004634:	89f9      	ldrh	r1, [r7, #14]
 8004636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800463a:	9302      	str	r3, [sp, #8]
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2301      	movs	r3, #1
 8004646:	480c      	ldr	r0, [pc, #48]	; (8004678 <BSP_I2C1_ReadReg+0x60>)
 8004648:	f006 fff4 	bl	800b634 <HAL_I2C_Mem_Read>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8004652:	4809      	ldr	r0, [pc, #36]	; (8004678 <BSP_I2C1_ReadReg+0x60>)
 8004654:	f007 f916 	bl	800b884 <HAL_I2C_GetError>
 8004658:	4603      	mov	r3, r0
 800465a:	2b04      	cmp	r3, #4
 800465c:	d103      	bne.n	8004666 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800465e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e002      	b.n	800466c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004666:	f06f 0303 	mvn.w	r3, #3
 800466a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800466c:	697b      	ldr	r3, [r7, #20]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000f50 	.word	0x20000f50

0800467c <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af04      	add	r7, sp, #16
 8004682:	60ba      	str	r2, [r7, #8]
 8004684:	461a      	mov	r2, r3
 8004686:	4603      	mov	r3, r0
 8004688:	81fb      	strh	r3, [r7, #14]
 800468a:	460b      	mov	r3, r1
 800468c:	81bb      	strh	r3, [r7, #12]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004696:	89ba      	ldrh	r2, [r7, #12]
 8004698:	89f9      	ldrh	r1, [r7, #14]
 800469a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800469e:	9302      	str	r3, [sp, #8]
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2302      	movs	r3, #2
 80046aa:	480c      	ldr	r0, [pc, #48]	; (80046dc <BSP_I2C1_WriteReg16+0x60>)
 80046ac:	f006 feae 	bl	800b40c <HAL_I2C_Mem_Write>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00c      	beq.n	80046d0 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80046b6:	4809      	ldr	r0, [pc, #36]	; (80046dc <BSP_I2C1_WriteReg16+0x60>)
 80046b8:	f007 f8e4 	bl	800b884 <HAL_I2C_GetError>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d103      	bne.n	80046ca <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80046c2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e002      	b.n	80046d0 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80046ca:	f06f 0303 	mvn.w	r3, #3
 80046ce:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80046d0:	697b      	ldr	r3, [r7, #20]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000f50 	.word	0x20000f50

080046e0 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af04      	add	r7, sp, #16
 80046e6:	60ba      	str	r2, [r7, #8]
 80046e8:	461a      	mov	r2, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	81fb      	strh	r3, [r7, #14]
 80046ee:	460b      	mov	r3, r1
 80046f0:	81bb      	strh	r3, [r7, #12]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80046fa:	89ba      	ldrh	r2, [r7, #12]
 80046fc:	89f9      	ldrh	r1, [r7, #14]
 80046fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004702:	9302      	str	r3, [sp, #8]
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2302      	movs	r3, #2
 800470e:	480c      	ldr	r0, [pc, #48]	; (8004740 <BSP_I2C1_ReadReg16+0x60>)
 8004710:	f006 ff90 	bl	800b634 <HAL_I2C_Mem_Read>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800471a:	4809      	ldr	r0, [pc, #36]	; (8004740 <BSP_I2C1_ReadReg16+0x60>)
 800471c:	f007 f8b2 	bl	800b884 <HAL_I2C_GetError>
 8004720:	4603      	mov	r3, r0
 8004722:	2b04      	cmp	r3, #4
 8004724:	d003      	beq.n	800472e <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004726:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e002      	b.n	8004734 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800472e:	f06f 0303 	mvn.w	r3, #3
 8004732:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004734:	697b      	ldr	r3, [r7, #20]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000f50 	.word	0x20000f50

08004744 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004748:	f006 f8e4 	bl	800a914 <HAL_GetTick>
 800474c:	4603      	mov	r3, r0
}
 800474e:	4618      	mov	r0, r3
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <MX_I2C1_Init+0x80>)
 8004764:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00100413;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <MX_I2C1_Init+0x84>)
 800476a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f006 fd7a 	bl	800b290 <HAL_I2C_Init>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80047a6:	2100      	movs	r1, #0
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f007 fb2f 	bl	800be0c <HAL_I2CEx_ConfigAnalogFilter>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80047b8:	2100      	movs	r1, #0
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f007 fb71 	bl	800bea2 <HAL_I2CEx_ConfigDigitalFilter>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40005400 	.word	0x40005400
 80047d8:	00100413 	.word	0x00100413

080047dc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b09c      	sub	sp, #112	; 0x70
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047e4:	f107 030c 	add.w	r3, r7, #12
 80047e8:	2250      	movs	r2, #80	; 0x50
 80047ea:	2100      	movs	r1, #0
 80047ec:	4618      	mov	r0, r3
 80047ee:	f013 f8c7 	bl	8017980 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80047f2:	2304      	movs	r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80047f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	4618      	mov	r0, r3
 8004802:	f00a fc66 	bl	800f0d2 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004806:	2002      	movs	r0, #2
 8004808:	f7ff fe17 	bl	800443a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800480c:	2340      	movs	r3, #64	; 0x40
 800480e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004810:	2312      	movs	r3, #18
 8004812:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004818:	2303      	movs	r3, #3
 800481a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800481c:	2304      	movs	r3, #4
 800481e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004820:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004824:	4619      	mov	r1, r3
 8004826:	4811      	ldr	r0, [pc, #68]	; (800486c <I2C1_MspInit+0x90>)
 8004828:	f006 fa5e 	bl	800ace8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004830:	2312      	movs	r3, #18
 8004832:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004834:	2300      	movs	r3, #0
 8004836:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004838:	2303      	movs	r3, #3
 800483a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800483c:	2304      	movs	r3, #4
 800483e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004840:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004844:	4619      	mov	r1, r3
 8004846:	4809      	ldr	r0, [pc, #36]	; (800486c <I2C1_MspInit+0x90>)
 8004848:	f006 fa4e 	bl	800ace8 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 800484c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004850:	f7ff fe38 	bl	80044c4 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8004854:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004858:	f7ff fe34 	bl	80044c4 <LL_SYSCFG_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800485c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004860:	f7ff fe04 	bl	800446c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8004864:	bf00      	nop
 8004866:	3770      	adds	r7, #112	; 0x70
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	48000400 	.word	0x48000400

08004870 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004878:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800487c:	f7ff fe0f 	bl	800449e <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	4805      	ldr	r0, [pc, #20]	; (8004898 <I2C1_MspDeInit+0x28>)
 8004884:	f006 fba0 	bl	800afc8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8004888:	2180      	movs	r1, #128	; 0x80
 800488a:	4803      	ldr	r0, [pc, #12]	; (8004898 <I2C1_MspDeInit+0x28>)
 800488c:	f006 fb9c 	bl	800afc8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	48000400 	.word	0x48000400

0800489c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return 1;
 80048a0:	2301      	movs	r3, #1
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <_kill>:

int _kill(int pid, int sig)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048b6:	f013 f8b5 	bl	8017a24 <__errno>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2216      	movs	r2, #22
 80048be:	601a      	str	r2, [r3, #0]
  return -1;
 80048c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_exit>:

void _exit (int status)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048d4:	f04f 31ff 	mov.w	r1, #4294967295
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ffe7 	bl	80048ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80048de:	e7fe      	b.n	80048de <_exit+0x12>

080048e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e00a      	b.n	8004908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048f2:	f3af 8000 	nop.w
 80048f6:	4601      	mov	r1, r0
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	60ba      	str	r2, [r7, #8]
 80048fe:	b2ca      	uxtb	r2, r1
 8004900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3301      	adds	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	dbf0      	blt.n	80048f2 <_read+0x12>
  }

  return len;
 8004910:	687b      	ldr	r3, [r7, #4]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	e009      	b.n	8004940 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	60ba      	str	r2, [r7, #8]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	3301      	adds	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	dbf1      	blt.n	800492c <_write+0x12>
  }
  return len;
 8004948:	687b      	ldr	r3, [r7, #4]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <_close>:

int _close(int file)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800497a:	605a      	str	r2, [r3, #4]
  return 0;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <_isatty>:

int _isatty(int file)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004992:	2301      	movs	r3, #1
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049c4:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <_sbrk+0x5c>)
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <_sbrk+0x60>)
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049d0:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <_sbrk+0x64>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <_sbrk+0x64>)
 80049da:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <_sbrk+0x68>)
 80049dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <_sbrk+0x64>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d207      	bcs.n	80049fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049ec:	f013 f81a 	bl	8017a24 <__errno>
 80049f0:	4603      	mov	r3, r0
 80049f2:	220c      	movs	r2, #12
 80049f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295
 80049fa:	e009      	b.n	8004a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <_sbrk+0x64>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <_sbrk+0x64>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <_sbrk+0x64>)
 8004a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20030000 	.word	0x20030000
 8004a1c:	00001000 	.word	0x00001000
 8004a20:	2000101c 	.word	0x2000101c
 8004a24:	20003f00 	.word	0x20003f00

08004a28 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <LL_FLASH_GetUDN+0x14>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	1fff7580 	.word	0x1fff7580

08004a40 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <LL_FLASH_GetDeviceID+0x14>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	b2db      	uxtb	r3, r3
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	1fff7584 	.word	0x1fff7584

08004a58 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <LL_FLASH_GetSTCompanyID+0x14>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0a1b      	lsrs	r3, r3, #8
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	1fff7584 	.word	0x1fff7584

08004a70 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b090      	sub	sp, #64	; 0x40
 8004a74:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8004a76:	2392      	movs	r3, #146	; 0x92
 8004a78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <APP_BLE_Init+0xdc>)
 8004a7e:	1d3c      	adds	r4, r7, #4
 8004a80:	461d      	mov	r5, r3
 8004a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a92:	c403      	stmia	r4!, {r0, r1}
 8004a94:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8004a96:	f000 f985 	bl	8004da4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	2002      	movs	r0, #2
 8004a9e:	f011 fe55 	bl	801674c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8004aa2:	4a2b      	ldr	r2, [pc, #172]	; (8004b50 <APP_BLE_Init+0xe0>)
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	2004      	movs	r0, #4
 8004aa8:	f011 ffb2 	bl	8016a10 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8004aac:	1d3b      	adds	r3, r7, #4
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f00f f88c 	bl	8013bcc <SHCI_C2_BLE_Init>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8004aba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8004ac2:	f7ff f914 	bl	8003cee <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8004ac6:	f000 f983 	bl	8004dd0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8004aca:	f00f fbdf 	bl	801428c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <APP_BLE_Init+0xe4>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <APP_BLE_Init+0xe4>)
 8004ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004adc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <APP_BLE_Init+0xe8>)
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f011 ff94 	bl	8016a10 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <APP_BLE_Init+0xec>)
 8004aea:	2100      	movs	r1, #0
 8004aec:	2002      	movs	r0, #2
 8004aee:	f011 ff8f 	bl	8016a10 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8004af2:	2006      	movs	r0, #6
 8004af4:	f00e fb49 	bl	801318a <aci_hal_set_radio_activity_mask>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8004afe:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <APP_BLE_Init+0xf0>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8004b04:	4b17      	ldr	r3, [pc, #92]	; (8004b64 <APP_BLE_Init+0xf4>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8004b0a:	f000 fc49 	bl	80053a0 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <APP_BLE_Init+0xf8>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	4916      	ldr	r1, [pc, #88]	; (8004b6c <APP_BLE_Init+0xfc>)
 8004b14:	2000      	movs	r0, #0
 8004b16:	f7fe fdbd 	bl	8003694 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8004b1a:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <APP_BLE_Init+0x100>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	4915      	ldr	r1, [pc, #84]	; (8004b74 <APP_BLE_Init+0x104>)
 8004b20:	2000      	movs	r0, #0
 8004b22:	f7fe fdb7 	bl	8003694 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <APP_BLE_Init+0xe4>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <APP_BLE_Init+0xe4>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <APP_BLE_Init+0x108>)
 8004b34:	2280      	movs	r2, #128	; 0x80
 8004b36:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <APP_BLE_Init+0x10c>)
 8004b3a:	22a0      	movs	r2, #160	; 0xa0
 8004b3c:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f000 fa18 	bl	8004f74 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8004b44:	bf00      	nop
}
 8004b46:	3740      	adds	r7, #64	; 0x40
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b4c:	08019c7c 	.word	0x08019c7c
 8004b50:	080135e9 	.word	0x080135e9
 8004b54:	20001028 	.word	0x20001028
 8004b58:	080050dd 	.word	0x080050dd
 8004b5c:	080051dd 	.word	0x080051dd
 8004b60:	200010b4 	.word	0x200010b4
 8004b64:	200010b5 	.word	0x200010b5
 8004b68:	08005111 	.word	0x08005111
 8004b6c:	200010a9 	.word	0x200010a9
 8004b70:	08005121 	.word	0x08005121
 8004b74:	200010aa 	.word	0x200010aa
 8004b78:	200010ac 	.word	0x200010ac
 8004b7c:	200010ae 	.word	0x200010ae

08004b80 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	; 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8004b88:	2392      	movs	r3, #146	; 0x92
 8004b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3301      	adds	r3, #1
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2bff      	cmp	r3, #255	; 0xff
 8004b9a:	d076      	beq.n	8004c8a <SVCCTL_App_Notification+0x10a>
 8004b9c:	2bff      	cmp	r3, #255	; 0xff
 8004b9e:	f300 80d8 	bgt.w	8004d52 <SVCCTL_App_Notification+0x1d2>
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d002      	beq.n	8004bac <SVCCTL_App_Notification+0x2c>
 8004ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ba8:	d020      	beq.n	8004bec <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8004baa:	e0d2      	b.n	8004d52 <SVCCTL_App_Notification+0x1d2>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	3302      	adds	r3, #2
 8004bb0:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004bbc:	8adb      	ldrh	r3, [r3, #22]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d106      	bne.n	8004bd0 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8004bc2:	4b68      	ldr	r3, [pc, #416]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8004bc8:	4b66      	ldr	r3, [pc, #408]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f000 f9cf 	bl	8004f74 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8004bd6:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <SVCCTL_App_Notification+0x1e8>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8004bdc:	4b61      	ldr	r3, [pc, #388]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004bde:	8ada      	ldrh	r2, [r3, #22]
 8004be0:	4b61      	ldr	r3, [pc, #388]	; (8004d68 <SVCCTL_App_Notification+0x1e8>)
 8004be2:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8004be4:	4860      	ldr	r0, [pc, #384]	; (8004d68 <SVCCTL_App_Notification+0x1e8>)
 8004be6:	f000 fbc7 	bl	8005378 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8004bea:	e0b5      	b.n	8004d58 <SVCCTL_App_Notification+0x1d8>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	3302      	adds	r3, #2
 8004bf0:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b0c      	cmp	r3, #12
 8004bf8:	d005      	beq.n	8004c06 <SVCCTL_App_Notification+0x86>
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	dc41      	bgt.n	8004c82 <SVCCTL_App_Notification+0x102>
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d017      	beq.n	8004c32 <SVCCTL_App_Notification+0xb2>
 8004c02:	2b03      	cmp	r3, #3
          break;
 8004c04:	e03d      	b.n	8004c82 <SVCCTL_App_Notification+0x102>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8004c0c:	4b55      	ldr	r3, [pc, #340]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004c0e:	8adb      	ldrh	r3, [r3, #22]
 8004c10:	f107 020e 	add.w	r2, r7, #14
 8004c14:	f107 010f 	add.w	r1, r7, #15
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f00e fb2e 	bl	801327a <hci_le_read_phy>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8004c24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d12c      	bne.n	8004c86 <SVCCTL_App_Notification+0x106>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b02      	cmp	r3, #2
          break;
 8004c30:	e029      	b.n	8004c86 <SVCCTL_App_Notification+0x106>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3301      	adds	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8004c38:	4b4a      	ldr	r3, [pc, #296]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004c3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fda2 	bl	8003788 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8004c44:	4b47      	ldr	r3, [pc, #284]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004c46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d104      	bne.n	8004c58 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8004c4e:	4b45      	ldr	r3, [pc, #276]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004c50:	2206      	movs	r2, #6
 8004c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8004c56:	e003      	b.n	8004c60 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8004c58:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004c5a:	2205      	movs	r2, #5
 8004c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	4b3e      	ldr	r3, [pc, #248]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004c6a:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8004c6c:	4b3e      	ldr	r3, [pc, #248]	; (8004d68 <SVCCTL_App_Notification+0x1e8>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8004c72:	4b3c      	ldr	r3, [pc, #240]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004c74:	8ada      	ldrh	r2, [r3, #22]
 8004c76:	4b3c      	ldr	r3, [pc, #240]	; (8004d68 <SVCCTL_App_Notification+0x1e8>)
 8004c78:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8004c7a:	483b      	ldr	r0, [pc, #236]	; (8004d68 <SVCCTL_App_Notification+0x1e8>)
 8004c7c:	f000 fb7c 	bl	8005378 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8004c80:	e002      	b.n	8004c88 <SVCCTL_App_Notification+0x108>
          break;
 8004c82:	bf00      	nop
 8004c84:	e068      	b.n	8004d58 <SVCCTL_App_Notification+0x1d8>
          break;
 8004c86:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8004c88:	e066      	b.n	8004d58 <SVCCTL_App_Notification+0x1d8>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9a:	d04c      	beq.n	8004d36 <SVCCTL_App_Notification+0x1b6>
 8004c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca0:	dc59      	bgt.n	8004d56 <SVCCTL_App_Notification+0x1d6>
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d04b      	beq.n	8004d3e <SVCCTL_App_Notification+0x1be>
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	db55      	blt.n	8004d56 <SVCCTL_App_Notification+0x1d6>
 8004caa:	f240 420a 	movw	r2, #1034	; 0x40a
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	dc51      	bgt.n	8004d56 <SVCCTL_App_Notification+0x1d6>
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	db4e      	blt.n	8004d56 <SVCCTL_App_Notification+0x1d6>
 8004cb8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004cbc:	2b0a      	cmp	r3, #10
 8004cbe:	d84a      	bhi.n	8004d56 <SVCCTL_App_Notification+0x1d6>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <SVCCTL_App_Notification+0x148>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004d4f 	.word	0x08004d4f
 8004ccc:	08004d2f 	.word	0x08004d2f
 8004cd0:	08004cf5 	.word	0x08004cf5
 8004cd4:	08004d4f 	.word	0x08004d4f
 8004cd8:	08004d4f 	.word	0x08004d4f
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	08004d57 	.word	0x08004d57
 8004ce4:	08004d4f 	.word	0x08004d4f
 8004ce8:	08004d4f 	.word	0x08004d4f
 8004cec:	08004d1b 	.word	0x08004d1b
 8004cf0:	08004d4f 	.word	0x08004d4f
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004cf6:	8adb      	ldrh	r3, [r3, #22]
 8004cf8:	491c      	ldr	r1, [pc, #112]	; (8004d6c <SVCCTL_App_Notification+0x1ec>)
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f00d fc48 	bl	8012590 <aci_gap_pass_key_resp>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8004d06:	e023      	b.n	8004d50 <SVCCTL_App_Notification+0x1d0>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8004d08:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004d0a:	8adb      	ldrh	r3, [r3, #22]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f00d fde9 	bl	80128e4 <aci_gap_allow_rebond>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8004d18:	e01a      	b.n	8004d50 <SVCCTL_App_Notification+0x1d0>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004d1c:	8adb      	ldrh	r3, [r3, #22]
 8004d1e:	2101      	movs	r1, #1
 8004d20:	4618      	mov	r0, r3
 8004d22:	f00d fe33 	bl	801298c <aci_gap_numeric_comparison_value_confirm_yesno>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 8004d2c:	e010      	b.n	8004d50 <SVCCTL_App_Notification+0x1d0>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	3302      	adds	r3, #2
 8004d32:	623b      	str	r3, [r7, #32]
          break;    
 8004d34:	e00c      	b.n	8004d50 <SVCCTL_App_Notification+0x1d0>
          mutex = 1;
 8004d36:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <SVCCTL_App_Notification+0x1f0>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
          break;
 8004d3c:	e008      	b.n	8004d50 <SVCCTL_App_Notification+0x1d0>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8004d3e:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <SVCCTL_App_Notification+0x1e4>)
 8004d40:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004d44:	210a      	movs	r1, #10
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fda2 	bl	8003890 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8004d4c:	e000      	b.n	8004d50 <SVCCTL_App_Notification+0x1d0>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8004d4e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8004d50:	e001      	b.n	8004d56 <SVCCTL_App_Notification+0x1d6>
      break;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <SVCCTL_App_Notification+0x1d8>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8004d56:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8004d58:	2301      	movs	r3, #1
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3730      	adds	r7, #48	; 0x30
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20001028 	.word	0x20001028
 8004d68:	200010b0 	.word	0x200010b0
 8004d6c:	0001e240 	.word	0x0001e240
 8004d70:	200010b5 	.word	0x200010b5

08004d74 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8004d78:	2100      	movs	r1, #0
 8004d7a:	2008      	movs	r0, #8
 8004d7c:	f011 fe6a 	bl	8016a54 <UTIL_SEQ_SetTask>
}
 8004d80:	bf00      	nop
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8004d88:	2100      	movs	r1, #0
 8004d8a:	2010      	movs	r0, #16
 8004d8c:	f011 fe62 	bl	8016a54 <UTIL_SEQ_SetTask>
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
}
 8004d98:	bf00      	nop
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <Ble_Tl_Init+0x20>)
 8004dac:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <Ble_Tl_Init+0x24>)
 8004db0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8004db2:	463b      	mov	r3, r7
 8004db4:	4619      	mov	r1, r3
 8004db6:	4805      	ldr	r0, [pc, #20]	; (8004dcc <Ble_Tl_Init+0x28>)
 8004db8:	f00e fbfa 	bl	80135b0 <hci_init>

  return;
 8004dbc:	bf00      	nop
}
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	20030028 	.word	0x20030028
 8004dc8:	08005285 	.word	0x08005285
 8004dcc:	0800524d 	.word	0x0800524d

08004dd0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8004dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd2:	b08d      	sub	sp, #52	; 0x34
 8004dd4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8004dda:	2392      	movs	r3, #146	; 0x92
 8004ddc:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8004dde:	f00e fa28 	bl	8013232 <hci_reset>
 8004de2:	4603      	mov	r3, r0
 8004de4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8004de6:	f000 f935 	bl	8005054 <BleGetBdAddress>
 8004dea:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	2106      	movs	r1, #6
 8004df0:	2000      	movs	r0, #0
 8004df2:	f00e f8de 	bl	8012fb2 <aci_hal_write_config_data>
 8004df6:	4603      	mov	r3, r0
 8004df8:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3305      	adds	r3, #5
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	4b56      	ldr	r3, [pc, #344]	; (8004f5c <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8004e02:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	3304      	adds	r3, #4
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	4b54      	ldr	r3, [pc, #336]	; (8004f5c <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8004e0c:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	3303      	adds	r3, #3
 8004e12:	781a      	ldrb	r2, [r3, #0]
 8004e14:	4b51      	ldr	r3, [pc, #324]	; (8004f5c <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8004e16:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	3302      	adds	r3, #2
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	4b4f      	ldr	r3, [pc, #316]	; (8004f5c <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8004e20:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	3301      	adds	r3, #1
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	4b4c      	ldr	r3, [pc, #304]	; (8004f5c <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8004e2a:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	4b4a      	ldr	r3, [pc, #296]	; (8004f5c <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8004e32:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8004e34:	4a4a      	ldr	r2, [pc, #296]	; (8004f60 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8004e36:	2110      	movs	r1, #16
 8004e38:	2018      	movs	r0, #24
 8004e3a:	f00e f8ba 	bl	8012fb2 <aci_hal_write_config_data>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8004e42:	4a48      	ldr	r2, [pc, #288]	; (8004f64 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8004e44:	2110      	movs	r1, #16
 8004e46:	2008      	movs	r0, #8
 8004e48:	f00e f8b3 	bl	8012fb2 <aci_hal_write_config_data>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8004e50:	2118      	movs	r1, #24
 8004e52:	2001      	movs	r0, #1
 8004e54:	f00e f932 	bl	80130bc <aci_hal_set_tx_power_level>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8004e5c:	f00d fdfd 	bl	8012a5a <aci_gatt_init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01f      	beq.n	8004eb6 <Ble_Hci_Gap_Gatt_Init+0xe6>
  {
    const char *name = "P2PSRV1";
 8004e76:	4b3c      	ldr	r3, [pc, #240]	; (8004f68 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8004e78:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8004e7a:	1dba      	adds	r2, r7, #6
 8004e7c:	7bf8      	ldrb	r0, [r7, #15]
 8004e7e:	1cbb      	adds	r3, r7, #2
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	1d3b      	adds	r3, r7, #4
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	2207      	movs	r2, #7
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	f00d fbe7 	bl	801265e <aci_gap_init>
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8004e94:	88fc      	ldrh	r4, [r7, #6]
 8004e96:	88bd      	ldrh	r5, [r7, #4]
 8004e98:	68b8      	ldr	r0, [r7, #8]
 8004e9a:	f7fb f9c1 	bl	8000220 <strlen>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4629      	mov	r1, r5
 8004eac:	4620      	mov	r0, r4
 8004eae:	f00d ffd7 	bl	8012e60 <aci_gatt_update_char_value>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8004eb6:	88f8      	ldrh	r0, [r7, #6]
 8004eb8:	8879      	ldrh	r1, [r7, #2]
 8004eba:	463b      	mov	r3, r7
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f00d ffcd 	bl	8012e60 <aci_gatt_update_char_value>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8004eca:	2202      	movs	r2, #2
 8004ecc:	2102      	movs	r1, #2
 8004ece:	2000      	movs	r0, #0
 8004ed0:	f00e fa51 	bl	8013376 <hci_le_set_default_phy>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8004ed8:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8004ede:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f00d fa3c 	bl	8012360 <aci_gap_set_io_capability>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8004eec:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8004ef2:	4b1e      	ldr	r3, [pc, #120]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8004ef8:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004efa:	2210      	movs	r2, #16
 8004efc:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8004efe:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f06:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8004f08:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8004f0a:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8004f10:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f12:	789c      	ldrb	r4, [r3, #2]
 8004f14:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f16:	785d      	ldrb	r5, [r3, #1]
 8004f18:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f1a:	791b      	ldrb	r3, [r3, #4]
 8004f1c:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f1e:	7952      	ldrb	r2, [r2, #5]
 8004f20:	4912      	ldr	r1, [pc, #72]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f22:	78c9      	ldrb	r1, [r1, #3]
 8004f24:	4811      	ldr	r0, [pc, #68]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f26:	6880      	ldr	r0, [r0, #8]
 8004f28:	2600      	movs	r6, #0
 8004f2a:	9604      	str	r6, [sp, #16]
 8004f2c:	9003      	str	r0, [sp, #12]
 8004f2e:	9102      	str	r1, [sp, #8]
 8004f30:	9201      	str	r2, [sp, #4]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	2300      	movs	r3, #0
 8004f36:	2201      	movs	r2, #1
 8004f38:	4629      	mov	r1, r5
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f00d fa64 	bl	8012408 <aci_gap_set_authentication_requirement>
 8004f40:	4603      	mov	r3, r0
 8004f42:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8004f46:	789b      	ldrb	r3, [r3, #2]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <Ble_Hci_Gap_Gatt_Init+0x184>
  {
    ret = aci_gap_configure_whitelist();
 8004f4c:	f00d fca6 	bl	801289c <aci_gap_configure_filter_accept_list>
 8004f50:	4603      	mov	r3, r0
 8004f52:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f5c:	20000010 	.word	0x20000010
 8004f60:	0801a0c8 	.word	0x0801a0c8
 8004f64:	0801a0d8 	.word	0x0801a0d8
 8004f68:	08019cb8 	.word	0x08019cb8
 8004f6c:	20001028 	.word	0x20001028
 8004f70:	0001b207 	.word	0x0001b207

08004f74 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08c      	sub	sp, #48	; 0x30
 8004f78:	af08      	add	r7, sp, #32
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8004f7e:	2392      	movs	r3, #146	; 0x92
 8004f80:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8004f88:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <Adv_Request+0xc4>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8004f8e:	4b2b      	ldr	r3, [pc, #172]	; (800503c <Adv_Request+0xc8>)
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	81bb      	strh	r3, [r7, #12]
 8004f94:	e005      	b.n	8004fa2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8004f96:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8004f9a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8004f9c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004fa0:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8004fa2:	4b27      	ldr	r3, [pc, #156]	; (8005040 <Adv_Request+0xcc>)
 8004fa4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fe fbed 	bl	8003788 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d10d      	bne.n	8004fd0 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8004fb4:	4b22      	ldr	r3, [pc, #136]	; (8005040 <Adv_Request+0xcc>)
 8004fb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d004      	beq.n	8004fc8 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8004fbe:	4b20      	ldr	r3, [pc, #128]	; (8005040 <Adv_Request+0xcc>)
 8004fc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d103      	bne.n	8004fd0 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8004fc8:	f00d f8ac 	bl	8012124 <aci_gap_set_non_discoverable>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8004fd0:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <Adv_Request+0xcc>)
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <Adv_Request+0xcc>)
 8004fda:	7e1b      	ldrb	r3, [r3, #24]
 8004fdc:	89ba      	ldrh	r2, [r7, #12]
 8004fde:	89f9      	ldrh	r1, [r7, #14]
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	9006      	str	r0, [sp, #24]
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	9005      	str	r0, [sp, #20]
 8004fe8:	4816      	ldr	r0, [pc, #88]	; (8005044 <Adv_Request+0xd0>)
 8004fea:	9004      	str	r0, [sp, #16]
 8004fec:	9303      	str	r3, [sp, #12]
 8004fee:	4b16      	ldr	r3, [pc, #88]	; (8005048 <Adv_Request+0xd4>)
 8004ff0:	9302      	str	r3, [sp, #8]
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f00d f8b5 	bl	801216c <aci_gap_set_discoverable>
 8005002:	4603      	mov	r3, r0
 8005004:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 8005006:	4911      	ldr	r1, [pc, #68]	; (800504c <Adv_Request+0xd8>)
 8005008:	200e      	movs	r0, #14
 800500a:	f00d fbd5 	bl	80127b8 <aci_gap_update_adv_data>
 800500e:	4603      	mov	r3, r0
 8005010:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8005012:	7afb      	ldrb	r3, [r7, #11]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <Adv_Request+0xba>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
    }
  }
  else
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d107      	bne.n	800502e <Adv_Request+0xba>
    {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
      /* Start Timer to STOP ADV - TIMEOUT - and next Restart Low Power Advertising */
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800501e:	4b08      	ldr	r3, [pc, #32]	; (8005040 <Adv_Request+0xcc>)
 8005020:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005024:	490a      	ldr	r1, [pc, #40]	; (8005050 <Adv_Request+0xdc>)
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe fc32 	bl	8003890 <HW_TS_Start>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800502c:	bf00      	nop
 800502e:	bf00      	nop
}
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	200010ac 	.word	0x200010ac
 800503c:	200010ae 	.word	0x200010ae
 8005040:	20001028 	.word	0x20001028
 8005044:	20001041 	.word	0x20001041
 8005048:	0801a0e8 	.word	0x0801a0e8
 800504c:	20000010 	.word	0x20000010
 8005050:	0001e046 	.word	0x0001e046

08005054 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800505a:	f7ff fce5 	bl	8004a28 <LL_FLASH_GetUDN>
 800505e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d023      	beq.n	80050b0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8005068:	f7ff fcf6 	bl	8004a58 <LL_FLASH_GetSTCompanyID>
 800506c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800506e:	f7ff fce7 	bl	8004a40 <LL_FLASH_GetDeviceID>
 8005072:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	4b16      	ldr	r3, [pc, #88]	; (80050d4 <BleGetBdAddress+0x80>)
 800507a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	0a1b      	lsrs	r3, r3, #8
 8005080:	b2da      	uxtb	r2, r3
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <BleGetBdAddress+0x80>)
 8005084:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <BleGetBdAddress+0x80>)
 800508c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <BleGetBdAddress+0x80>)
 8005094:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	b2da      	uxtb	r2, r3
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <BleGetBdAddress+0x80>)
 800509e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <BleGetBdAddress+0x80>)
 80050a8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <BleGetBdAddress+0x80>)
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	e00b      	b.n	80050c8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80050b0:	2000      	movs	r0, #0
 80050b2:	f00e fc39 	bl	8013928 <OTP_Read>
 80050b6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e001      	b.n	80050c8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <BleGetBdAddress+0x84>)
 80050c6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80050c8:	697b      	ldr	r3, [r7, #20]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20001020 	.word	0x20001020
 80050d8:	0801a0c0 	.word	0x0801a0c0

080050dc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
//  BSP_LED_Off(LED_GREEN);
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <Adv_Cancel+0x30>)
 80050e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050e8:	2b05      	cmp	r3, #5
 80050ea:	d00a      	beq.n	8005102 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80050ec:	2392      	movs	r3, #146	; 0x92
 80050ee:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80050f0:	f00d f818 	bl	8012124 <aci_gap_set_non_discoverable>
 80050f4:	4603      	mov	r3, r0
 80050f6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <Adv_Cancel+0x30>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8005100:	bf00      	nop
 8005102:	bf00      	nop
}
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20001028 	.word	0x20001028

08005110 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8005114:	2100      	movs	r1, #0
 8005116:	2001      	movs	r0, #1
 8005118:	f011 fc9c 	bl	8016a54 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800511c:	bf00      	nop
}
 800511e:	bd80      	pop	{r7, pc}

08005120 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
//  BSP_LED_Off(LED_GREEN);
  /* USER CODE END Switch_OFF_GPIO */
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8005130:	b590      	push	{r4, r7, lr}
 8005132:	b089      	sub	sp, #36	; 0x24
 8005134:	af02      	add	r7, sp, #8
 8005136:	4603      	mov	r3, r0
 8005138:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d13f      	bne.n	80051c2 <BLE_SVC_L2CAP_Conn_Update+0x92>
  {
    mutex = 0;
 8005142:	4b22      	ldr	r3, [pc, #136]	; (80051cc <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8005148:	4b21      	ldr	r3, [pc, #132]	; (80051d0 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	bfb8      	it	lt
 8005156:	425b      	neglt	r3, r3
 8005158:	b2da      	uxtb	r2, r3
 800515a:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 800515c:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 800515e:	4b1c      	ldr	r3, [pc, #112]	; (80051d0 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	ed93 7a00 	vldr	s14, [r3]
 800516c:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8005170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005178:	ee17 3a90 	vmov	r3, s15
 800517c:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 800517e:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	ed93 7a00 	vldr	s14, [r3]
 800518c:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8005190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005198:	ee17 3a90 	vmov	r3, s15
 800519c:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 800519e:	2300      	movs	r3, #0
 80051a0:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 80051a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80051a6:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <BLE_SVC_L2CAP_Conn_Update+0xa8>)
 80051aa:	8ad8      	ldrh	r0, [r3, #22]
 80051ac:	8a7c      	ldrh	r4, [r7, #18]
 80051ae:	8aba      	ldrh	r2, [r7, #20]
 80051b0:	8af9      	ldrh	r1, [r7, #22]
 80051b2:	8a3b      	ldrh	r3, [r7, #16]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4623      	mov	r3, r4
 80051b8:	f00e f95a 	bl	8013470 <aci_l2cap_connection_parameter_update_req>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
}
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd90      	pop	{r4, r7, pc}
 80051ca:	bf00      	nop
 80051cc:	200010b5 	.word	0x200010b5
 80051d0:	200010b4 	.word	0x200010b4
 80051d4:	20000008 	.word	0x20000008
 80051d8:	20001028 	.word	0x20001028

080051dc <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 80051e0:	4b08      	ldr	r3, [pc, #32]	; (8005204 <Connection_Interval_Update_Req+0x28>)
 80051e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d00a      	beq.n	8005200 <Connection_Interval_Update_Req+0x24>
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <Connection_Interval_Update_Req+0x28>)
 80051ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80051f4:	4b03      	ldr	r3, [pc, #12]	; (8005204 <Connection_Interval_Update_Req+0x28>)
 80051f6:	8adb      	ldrh	r3, [r3, #22]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff ff99 	bl	8005130 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
}
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20001028 	.word	0x20001028

08005208 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8005210:	2100      	movs	r1, #0
 8005212:	2004      	movs	r0, #4
 8005214:	f011 fc1e 	bl	8016a54 <UTIL_SEQ_SetTask>

  return;
 8005218:	bf00      	nop
}
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8005228:	2001      	movs	r0, #1
 800522a:	f011 fc7f 	bl	8016b2c <UTIL_SEQ_SetEvt>

  return;
 800522e:	bf00      	nop
}
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800523e:	2001      	movs	r0, #1
 8005240:	f011 fc94 	bl	8016b6c <UTIL_SEQ_WaitEvt>

  return;
 8005244:	bf00      	nop
}
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	3308      	adds	r3, #8
 800525e:	4618      	mov	r0, r3
 8005260:	f00f f866 	bl	8014330 <SVCCTL_UserEvtRx>
 8005264:	4603      	mov	r3, r0
 8005266:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8005268:	7afb      	ldrb	r3, [r7, #11]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8005274:	e003      	b.n	800527e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
  return;
 800527c:	bf00      	nop
}
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <BLE_StatusNot+0x16>
 8005294:	2b01      	cmp	r3, #1
 8005296:	d007      	beq.n	80052a8 <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8005298:	e00d      	b.n	80052b6 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800529a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800529e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f011 fc03 	bl	8016aac <UTIL_SEQ_PauseTask>
      break;
 80052a6:	e006      	b.n	80052b6 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80052a8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80052ac:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f011 fc1c 	bl	8016aec <UTIL_SEQ_ResumeTask>
      break;
 80052b4:	bf00      	nop
  }

  return;
 80052b6:	bf00      	nop
}
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <P2PS_STM_App_Notification>:
static void LoopApp(void);	//TODO: finish up
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d00e      	beq.n	80052ee <P2PS_STM_App_Notification+0x2e>
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	dc47      	bgt.n	8005364 <P2PS_STM_App_Notification+0xa4>
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <P2PS_STM_App_Notification+0x1e>
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d004      	beq.n	80052e6 <P2PS_STM_App_Notification+0x26>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80052dc:	e042      	b.n	8005364 <P2PS_STM_App_Notification+0xa4>
      P2P_Server_App_Context.Notification_Status = 1;
 80052de:	4b25      	ldr	r3, [pc, #148]	; (8005374 <P2PS_STM_App_Notification+0xb4>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
      break;
 80052e4:	e041      	b.n	800536a <P2PS_STM_App_Notification+0xaa>
      P2P_Server_App_Context.Notification_Status = 0;
 80052e6:	4b23      	ldr	r3, [pc, #140]	; (8005374 <P2PS_STM_App_Notification+0xb4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
      break;
 80052ec:	e03d      	b.n	800536a <P2PS_STM_App_Notification+0xaa>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d117      	bne.n	8005328 <P2PS_STM_App_Notification+0x68>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	3301      	adds	r3, #1
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d105      	bne.n	8005310 <P2PS_STM_App_Notification+0x50>
          BSP_LED_On(LED_BLUE);
 8005304:	2000      	movs	r0, #0
 8005306:	f001 fca3 	bl	8006c50 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800530a:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <P2PS_STM_App_Notification+0xb4>)
 800530c:	2201      	movs	r2, #1
 800530e:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	3301      	adds	r3, #1
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <P2PS_STM_App_Notification+0x68>
          BSP_LED_Off(LED_BLUE);
 800531c:	2000      	movs	r0, #0
 800531e:	f001 fcb1 	bl	8006c84 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8005322:	4b14      	ldr	r3, [pc, #80]	; (8005374 <P2PS_STM_App_Notification+0xb4>)
 8005324:	2200      	movs	r2, #0
 8005326:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d11a      	bne.n	8005368 <P2PS_STM_App_Notification+0xa8>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	3301      	adds	r3, #1
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d105      	bne.n	800534a <P2PS_STM_App_Notification+0x8a>
          BSP_LED_On(LED_BLUE);
 800533e:	2000      	movs	r0, #0
 8005340:	f001 fc86 	bl	8006c50 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <P2PS_STM_App_Notification+0xb4>)
 8005346:	2201      	movs	r2, #1
 8005348:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	3301      	adds	r3, #1
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d108      	bne.n	8005368 <P2PS_STM_App_Notification+0xa8>
          BSP_LED_Off(LED_BLUE);
 8005356:	2000      	movs	r0, #0
 8005358:	f001 fc94 	bl	8006c84 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <P2PS_STM_App_Notification+0xb4>)
 800535e:	2200      	movs	r2, #0
 8005360:	709a      	strb	r2, [r3, #2]
      break;
 8005362:	e001      	b.n	8005368 <P2PS_STM_App_Notification+0xa8>
      break;
 8005364:	bf00      	nop
 8005366:	e000      	b.n	800536a <P2PS_STM_App_Notification+0xaa>
      break;
 8005368:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800536a:	bf00      	nop
}
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	200010b8 	.word	0x200010b8

08005378 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <P2PS_APP_Notification+0x1c>
 8005388:	2b01      	cmp	r3, #1
 800538a:	d000      	beq.n	800538e <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800538c:	e003      	b.n	8005396 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 800538e:	f000 f855 	bl	800543c <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8005392:	e000      	b.n	8005396 <P2PS_APP_Notification+0x1e>
    break;
 8005394:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8005396:	bf00      	nop
}
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button1PressTask);
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <P2PS_APP_Init+0x74>)
 80053a6:	2100      	movs	r1, #0
 80053a8:	2008      	movs	r0, #8
 80053aa:	f011 fb31 	bl	8016a10 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button2PressTask);
 80053ae:	4a1a      	ldr	r2, [pc, #104]	; (8005418 <P2PS_APP_Init+0x78>)
 80053b0:	2100      	movs	r1, #0
 80053b2:	2010      	movs	r0, #16
 80053b4:	f011 fb2c 	bl	8016a10 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask(1 << CFG_TASK_USER_SET_TASK, UTIL_SEQ_RFU, TCS3430Read);
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <P2PS_APP_Init+0x7c>)
 80053ba:	2100      	movs	r1, #0
 80053bc:	2080      	movs	r0, #128	; 0x80
 80053be:	f011 fb27 	bl	8016a10 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask(1 << CFG_TASK_COLOR_REQ_ID, UTIL_SEQ_RFU, TrackingTask);
 80053c2:	4a17      	ldr	r2, [pc, #92]	; (8005420 <P2PS_APP_Init+0x80>)
 80053c4:	2100      	movs	r1, #0
 80053c6:	2040      	movs	r0, #64	; 0x40
 80053c8:	f011 fb22 	bl	8016a10 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask(1 << CFG_TASK_TOFLOOP_TASK, UTIL_SEQ_RFU, LoopApp);
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <P2PS_APP_Init+0x84>)
 80053ce:	2100      	movs	r1, #0
 80053d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053d4:	f011 fb1c 	bl	8016a10 <UTIL_SEQ_RegTask>

  HW_TS_Create(0, &colorTimer_Id, hw_ts_Repeated, ColorTask);
 80053d8:	4b13      	ldr	r3, [pc, #76]	; (8005428 <P2PS_APP_Init+0x88>)
 80053da:	2201      	movs	r2, #1
 80053dc:	4913      	ldr	r1, [pc, #76]	; (800542c <P2PS_APP_Init+0x8c>)
 80053de:	2000      	movs	r0, #0
 80053e0:	f7fe f958 	bl	8003694 <HW_TS_Create>

  HW_TS_Start(colorTimer_Id, 200000/CFG_TS_TICK_VAL);
 80053e4:	4b11      	ldr	r3, [pc, #68]	; (800542c <P2PS_APP_Init+0x8c>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f240 1199 	movw	r1, #409	; 0x199
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fa4f 	bl	8003890 <HW_TS_Start>

  HW_TS_Create(0, &ToFTimer_Id, hw_ts_Repeated, ToFTask);
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <P2PS_APP_Init+0x90>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	490f      	ldr	r1, [pc, #60]	; (8005434 <P2PS_APP_Init+0x94>)
 80053f8:	2000      	movs	r0, #0
 80053fa:	f7fe f94b 	bl	8003694 <HW_TS_Create>


  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80053fe:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <P2PS_APP_Init+0x98>)
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8005404:	f000 f81a 	bl	800543c <P2PS_APP_LED_BUTTON_context_Init>

#if TOF_ENABLE == 1

  MX_TOF_Init();
 8005408:	f7fd f928 	bl	800265c <MX_TOF_Init>

#endif

  Color_Init();
 800540c:	f002 f87c 	bl	8007508 <Color_Init>

/* USER CODE END P2PS_APP_Init */
  return;
 8005410:	bf00      	nop
}
 8005412:	bd80      	pop	{r7, pc}
 8005414:	08005711 	.word	0x08005711
 8005418:	08005731 	.word	0x08005731
 800541c:	08005a25 	.word	0x08005a25
 8005420:	080059e9 	.word	0x080059e9
 8005424:	08005a39 	.word	0x08005a39
 8005428:	08005a03 	.word	0x08005a03
 800542c:	200010c0 	.word	0x200010c0
 8005430:	08005a13 	.word	0x08005a13
 8005434:	200010c1 	.word	0x200010c1
 8005438:	200010b8 	.word	0x200010b8

0800543c <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0

  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8005440:	4b08      	ldr	r3, [pc, #32]	; (8005464 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8005442:	2201      	movs	r2, #1
 8005444:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8005446:	4b07      	ldr	r3, [pc, #28]	; (8005464 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8005448:	2200      	movs	r2, #0
 800544a:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800544e:	2201      	movs	r2, #1
 8005450:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8005452:	4b04      	ldr	r3, [pc, #16]	; (8005464 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8005454:	2200      	movs	r2, #0
 8005456:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	200010b8 	.word	0x200010b8

08005468 <Appli_ShortButtonPress>:


static void Appli_ShortButtonPress(void)
{
 8005468:	b5b0      	push	{r4, r5, r7, lr}
 800546a:	b08c      	sub	sp, #48	; 0x30
 800546c:	af00      	add	r7, sp, #0
	APP_DBG_MSG("\n\rServer Short Button Pressed\r\n");

	tcs3430 sensor = { {0}, {0} };
 800546e:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <Appli_ShortButtonPress+0x70>)
 8005470:	f107 0410 	add.w	r4, r7, #16
 8005474:	461d      	mov	r5, r3
 8005476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800547a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800547e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TCS3430_print_reg(&sensor);
 8005482:	f107 0310 	add.w	r3, r7, #16
 8005486:	4618      	mov	r0, r3
 8005488:	f002 f8d6 	bl	8007638 <TCS3430_print_reg>
	color_data = get_raw_XYZ(&sensor);
 800548c:	4c13      	ldr	r4, [pc, #76]	; (80054dc <Appli_ShortButtonPress+0x74>)
 800548e:	463b      	mov	r3, r7
 8005490:	f107 0210 	add.w	r2, r7, #16
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f001 ff14 	bl	80072c4 <get_raw_XYZ>
 800549c:	4623      	mov	r3, r4
 800549e:	463c      	mov	r4, r7
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	6861      	ldr	r1, [r4, #4]
 80054a4:	68a2      	ldr	r2, [r4, #8]
 80054a6:	c307      	stmia	r3!, {r0, r1, r2}
 80054a8:	89a2      	ldrh	r2, [r4, #12]
 80054aa:	801a      	strh	r2, [r3, #0]
	TCS3430_print_color(&color_data);
 80054ac:	480b      	ldr	r0, [pc, #44]	; (80054dc <Appli_ShortButtonPress+0x74>)
 80054ae:	f001 ff71 	bl	8007394 <TCS3430_print_color>

	memcpy(ble_notify_data, &color_data, 8);
 80054b2:	2208      	movs	r2, #8
 80054b4:	4909      	ldr	r1, [pc, #36]	; (80054dc <Appli_ShortButtonPress+0x74>)
 80054b6:	480a      	ldr	r0, [pc, #40]	; (80054e0 <Appli_ShortButtonPress+0x78>)
 80054b8:	f012 fae1 	bl	8017a7e <memcpy>

	if(P2P_Server_App_Context.Notification_Status){
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <Appli_ShortButtonPress+0x7c>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <Appli_ShortButtonPress+0x68>
		APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
		APP_DBG_MSG(" \n\r");
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)ble_notify_data, sizeof(ble_notify_data));
 80054c4:	2288      	movs	r2, #136	; 0x88
 80054c6:	4906      	ldr	r1, [pc, #24]	; (80054e0 <Appli_ShortButtonPress+0x78>)
 80054c8:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80054cc:	f00e fb58 	bl	8013b80 <P2PS_STM_App_Update_Char>
	} else {
	   APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
	}
}
 80054d0:	bf00      	nop
 80054d2:	3730      	adds	r7, #48	; 0x30
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bdb0      	pop	{r4, r5, r7, pc}
 80054d8:	08019cc0 	.word	0x08019cc0
 80054dc:	200010e4 	.word	0x200010e4
 80054e0:	20001b20 	.word	0x20001b20
 80054e4:	200010b8 	.word	0x200010b8

080054e8 <Appli_LongButtonPress>:
 * @brief  Function calls when a button is pressed for Long duration
 * @param  void
 * @retval void
 */
static void Appli_LongButtonPress(void)
{
 80054e8:	b5b0      	push	{r4, r5, r7, lr}
 80054ea:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
 80054ee:	af00      	add	r7, sp, #0
#if TOF_ENABLE == 1
	CDC_Transmit_FS("helloworld\r\n", 12);
 80054f0:	210c      	movs	r1, #12
 80054f2:	4830      	ldr	r0, [pc, #192]	; (80055b4 <Appli_LongButtonPress+0xcc>)
 80054f4:	f000 fec2 	bl	800627c <CDC_Transmit_FS>

	APP_DBG_MSG("\n\rServer Long Button Pressed\r\n");

	tcs3430 sensor = { {0}, {0} };
 80054f8:	4b2f      	ldr	r3, [pc, #188]	; (80055b8 <Appli_LongButtonPress+0xd0>)
 80054fa:	f507 64a3 	add.w	r4, r7, #1304	; 0x518
 80054fe:	461d      	mov	r5, r3
 8005500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005504:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TCS3430_print_reg(&sensor);
 800550c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8005510:	4618      	mov	r0, r3
 8005512:	f002 f891 	bl	8007638 <TCS3430_print_reg>
	color_data = get_raw_XYZ(&sensor);
 8005516:	4c29      	ldr	r4, [pc, #164]	; (80055bc <Appli_LongButtonPress+0xd4>)
 8005518:	463b      	mov	r3, r7
 800551a:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800551e:	4611      	mov	r1, r2
 8005520:	4618      	mov	r0, r3
 8005522:	f001 fecf 	bl	80072c4 <get_raw_XYZ>
 8005526:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800552a:	f5a3 62a8 	sub.w	r2, r3, #1344	; 0x540
 800552e:	4623      	mov	r3, r4
 8005530:	4614      	mov	r4, r2
 8005532:	6820      	ldr	r0, [r4, #0]
 8005534:	6861      	ldr	r1, [r4, #4]
 8005536:	68a2      	ldr	r2, [r4, #8]
 8005538:	c307      	stmia	r3!, {r0, r1, r2}
 800553a:	89a2      	ldrh	r2, [r4, #12]
 800553c:	801a      	strh	r2, [r3, #0]
	TCS3430_print_color(&color_data);
 800553e:	481f      	ldr	r0, [pc, #124]	; (80055bc <Appli_LongButtonPress+0xd4>)
 8005540:	f001 ff28 	bl	8007394 <TCS3430_print_color>

	memcpy(ble_notify_data, &color_data, 8);
 8005544:	2208      	movs	r2, #8
 8005546:	491d      	ldr	r1, [pc, #116]	; (80055bc <Appli_LongButtonPress+0xd4>)
 8005548:	481d      	ldr	r0, [pc, #116]	; (80055c0 <Appli_LongButtonPress+0xd8>)
 800554a:	f012 fa98 	bl	8017a7e <memcpy>

	//length 2, peer 0004, dst 0003, element index 0
	MX_TOF_Begin();
 800554e:	f7fd f8af 	bl	80026b0 <MX_TOF_Begin>

	RANGING_SENSOR_Result_t Result;

	int32_t status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 8005552:	f107 0314 	add.w	r3, r7, #20
 8005556:	4619      	mov	r1, r3
 8005558:	2000      	movs	r0, #0
 800555a:	f7fd fa99 	bl	8002a90 <CUSTOM_RANGING_SENSOR_GetDistance>
 800555e:	f8c7 053c 	str.w	r0, [r7, #1340]	; 0x53c
	while (status != 0)
 8005562:	e007      	b.n	8005574 <Appli_LongButtonPress+0x8c>
	{
		status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 8005564:	f107 0314 	add.w	r3, r7, #20
 8005568:	4619      	mov	r1, r3
 800556a:	2000      	movs	r0, #0
 800556c:	f7fd fa90 	bl	8002a90 <CUSTOM_RANGING_SENSOR_GetDistance>
 8005570:	f8c7 053c 	str.w	r0, [r7, #1340]	; 0x53c
	while (status != 0)
 8005574:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f3      	bne.n	8005564 <Appli_LongButtonPress+0x7c>
	}
	uint16_t *tof = print_result(&Result);
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	4618      	mov	r0, r3
 8005582:	f7fd f8e7 	bl	8002754 <print_result>
 8005586:	f8c7 0538 	str.w	r0, [r7, #1336]	; 0x538

	memcpy(ble_notify_data+4, tof, 128);
 800558a:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <Appli_LongButtonPress+0xdc>)
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8005592:	4618      	mov	r0, r3
 8005594:	f012 fa73 	bl	8017a7e <memcpy>

	P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)ble_notify_data, sizeof(ble_notify_data));
 8005598:	2288      	movs	r2, #136	; 0x88
 800559a:	4909      	ldr	r1, [pc, #36]	; (80055c0 <Appli_LongButtonPress+0xd8>)
 800559c:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80055a0:	f00e faee 	bl	8013b80 <P2PS_STM_App_Update_Char>

	MX_TOF_Stop();
 80055a4:	f7fd f88c 	bl	80026c0 <MX_TOF_Stop>

	memcpy(ble_notify_data, &color_data, 8);

	P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)ble_notify_data, sizeof(ble_notify_data));
#endif
}
 80055a8:	bf00      	nop
 80055aa:	f507 67a8 	add.w	r7, r7, #1344	; 0x540
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bdb0      	pop	{r4, r5, r7, pc}
 80055b2:	bf00      	nop
 80055b4:	08019ce0 	.word	0x08019ce0
 80055b8:	08019cc0 	.word	0x08019cc0
 80055bc:	200010e4 	.word	0x200010e4
 80055c0:	20001b20 	.word	0x20001b20
 80055c4:	20001b28 	.word	0x20001b28

080055c8 <Appli_ShortButton2Press>:
/**
 * @brief  Function calls when a button2 is pressed for short duration
 * @param  void
 * @retval void
 */
static void Appli_ShortButton2Press(void) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0

	if (Sensor_Running) {
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <Appli_ShortButton2Press+0x3c>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <Appli_ShortButton2Press+0x22>
		HW_TS_Stop(ToFTimer_Id);
 80055d4:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <Appli_ShortButton2Press+0x40>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe f8d5 	bl	8003788 <HW_TS_Stop>
#if TOF_ENABLE == 1
		MX_TOF_Stop();
 80055de:	f7fd f86f 	bl	80026c0 <MX_TOF_Stop>
#endif
		Sensor_Running = 0;
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <Appli_ShortButton2Press+0x3c>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
#endif
		HW_TS_Start(ToFTimer_Id, 50000/CFG_TS_TICK_VAL);
		Sensor_Running = 1;
	}

}
 80055e8:	e00a      	b.n	8005600 <Appli_ShortButton2Press+0x38>
		MX_TOF_Begin();
 80055ea:	f7fd f861 	bl	80026b0 <MX_TOF_Begin>
		HW_TS_Start(ToFTimer_Id, 50000/CFG_TS_TICK_VAL);
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <Appli_ShortButton2Press+0x40>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2166      	movs	r1, #102	; 0x66
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fe f94b 	bl	8003890 <HW_TS_Start>
		Sensor_Running = 1;
 80055fa:	4b02      	ldr	r3, [pc, #8]	; (8005604 <Appli_ShortButton2Press+0x3c>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]
}
 8005600:	bf00      	nop
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20001b1c 	.word	0x20001b1c
 8005608:	200010c1 	.word	0x200010c1

0800560c <Appli_LongButton2Press>:
/**
 * @brief  Function calls when a button2 is pressed for Long duration
 * @param  void
 * @retval void
 */
static void Appli_LongButton2Press(void) {
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
#if TOF_ENABLE == 1

	MX_TOF_Begin();
 8005612:	f7fd f84d 	bl	80026b0 <MX_TOF_Begin>
	//change formate to fit STM_DataPacket.c

	//get sensor values
	CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &rawBaseFrame);
 8005616:	4910      	ldr	r1, [pc, #64]	; (8005658 <Appli_LongButton2Press+0x4c>)
 8005618:	2000      	movs	r0, #0
 800561a:	f7fd fa39 	bl	8002a90 <CUSTOM_RANGING_SENSOR_GetDistance>
	rawBaseColor = get_raw_XYZ(&sensor);
 800561e:	4c0f      	ldr	r4, [pc, #60]	; (800565c <Appli_LongButton2Press+0x50>)
 8005620:	463b      	mov	r3, r7
 8005622:	490f      	ldr	r1, [pc, #60]	; (8005660 <Appli_LongButton2Press+0x54>)
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fe4d 	bl	80072c4 <get_raw_XYZ>
 800562a:	4623      	mov	r3, r4
 800562c:	463c      	mov	r4, r7
 800562e:	6820      	ldr	r0, [r4, #0]
 8005630:	6861      	ldr	r1, [r4, #4]
 8005632:	68a2      	ldr	r2, [r4, #8]
 8005634:	c307      	stmia	r3!, {r0, r1, r2}
 8005636:	89a2      	ldrh	r2, [r4, #12]
 8005638:	801a      	strh	r2, [r3, #0]

	printf("base value being set\n");
 800563a:	480a      	ldr	r0, [pc, #40]	; (8005664 <Appli_LongButton2Press+0x58>)
 800563c:	f012 f8c0 	bl	80177c0 <puts>

	MX_TOF_Stop();
 8005640:	f7fd f83e 	bl	80026c0 <MX_TOF_Stop>
	BaseFrameValid = 1;
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <Appli_LongButton2Press+0x5c>)
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]

	Update_ALSThreshold(&sensor);
 800564a:	4805      	ldr	r0, [pc, #20]	; (8005660 <Appli_LongButton2Press+0x54>)
 800564c:	f001 ff0c 	bl	8007468 <Update_ALSThreshold>
#endif
}
 8005650:	bf00      	nop
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	bd90      	pop	{r4, r7, pc}
 8005658:	20001114 	.word	0x20001114
 800565c:	200010c4 	.word	0x200010c4
 8005660:	200010f4 	.word	0x200010f4
 8005664:	08019cf0 	.word	0x08019cf0
 8005668:	20001b1d 	.word	0x20001b1d

0800566c <Appli_UpdateButtonState>:
/**
 * @brief  Updates the button status
 * @param  int isPressed
 * @retval void
 */
static void Appli_UpdateButtonState(int isPressed) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	uint32_t t0 = 0, t1 = 1;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	2301      	movs	r3, #1
 800567a:	60bb      	str	r3, [r7, #8]

	t0 = HAL_GetTick(); /* press timing */
 800567c:	f005 f94a 	bl	800a914 <HAL_GetTick>
 8005680:	60f8      	str	r0, [r7, #12]

	while (BSP_PB_GetState(BUTTON_SW1) == GPIO_PIN_RESET);
 8005682:	bf00      	nop
 8005684:	2000      	movs	r0, #0
 8005686:	f001 fb31 	bl	8006cec <BSP_PB_GetState>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f9      	beq.n	8005684 <Appli_UpdateButtonState+0x18>
	t1 = HAL_GetTick(); /* SW1 release timing */
 8005690:	f005 f940 	bl	800a914 <HAL_GetTick>
 8005694:	60b8      	str	r0, [r7, #8]

	if ((t1 - t0) > LONG_PRESS_THRESHOLD) {
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056a0:	d902      	bls.n	80056a8 <Appli_UpdateButtonState+0x3c>
		Appli_LongButtonPress();
 80056a2:	f7ff ff21 	bl	80054e8 <Appli_LongButtonPress>
	} else if ((t1 - t0) > BOUNCE_THRESHOLD) {
		/* Button 1 short press action */
		Appli_ShortButtonPress();
	}
}
 80056a6:	e006      	b.n	80056b6 <Appli_UpdateButtonState+0x4a>
	} else if ((t1 - t0) > BOUNCE_THRESHOLD) {
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b14      	cmp	r3, #20
 80056b0:	d901      	bls.n	80056b6 <Appli_UpdateButtonState+0x4a>
		Appli_ShortButtonPress();
 80056b2:	f7ff fed9 	bl	8005468 <Appli_ShortButtonPress>
}
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <Appli_UpdateButton2State>:
static void Appli_UpdateButton2State(int isPressed) {
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]

	uint32_t t0 = 0, t1 = 1;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	2301      	movs	r3, #1
 80056cc:	60bb      	str	r3, [r7, #8]

	t0 = HAL_GetTick(); /* press timing */
 80056ce:	f005 f921 	bl	800a914 <HAL_GetTick>
 80056d2:	60f8      	str	r0, [r7, #12]
	while (BSP_PB_GetState(BUTTON_SW2) == GPIO_PIN_RESET);	//TODO: fill out this
 80056d4:	bf00      	nop
 80056d6:	2001      	movs	r0, #1
 80056d8:	f001 fb08 	bl	8006cec <BSP_PB_GetState>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f9      	beq.n	80056d6 <Appli_UpdateButton2State+0x18>

	t1 = HAL_GetTick(); /* SW2 release timing */
 80056e2:	f005 f917 	bl	800a914 <HAL_GetTick>
 80056e6:	60b8      	str	r0, [r7, #8]

	if ((t1 - t0) > LONG_PRESS_THRESHOLD) {
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056f2:	d902      	bls.n	80056fa <Appli_UpdateButton2State+0x3c>
		Appli_LongButton2Press();
 80056f4:	f7ff ff8a 	bl	800560c <Appli_LongButton2Press>
	} else if ((t1 - t0) > BOUNCE_THRESHOLD) {
		Appli_ShortButton2Press();
	}
}
 80056f8:	e006      	b.n	8005708 <Appli_UpdateButton2State+0x4a>
	} else if ((t1 - t0) > BOUNCE_THRESHOLD) {
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b14      	cmp	r3, #20
 8005702:	d901      	bls.n	8005708 <Appli_UpdateButton2State+0x4a>
		Appli_ShortButton2Press();
 8005704:	f7ff ff60 	bl	80055c8 <Appli_ShortButton2Press>
}
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <Button1PressTask>:


static void Button1PressTask(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
	APP_DBG_MSG("BUTTON PRESS\r\n");
	Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == GPIO_PIN_RESET);
 8005714:	2000      	movs	r0, #0
 8005716:	f001 fae9 	bl	8006cec <BSP_PB_GetState>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff ffa0 	bl	800566c <Appli_UpdateButtonState>
	return;
 800572c:	bf00      	nop
}
 800572e:	bd80      	pop	{r7, pc}

08005730 <Button2PressTask>:

static void Button2PressTask(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
	Appli_UpdateButton2State(BSP_PB_GetState(BUTTON_SW2) == GPIO_PIN_RESET);
 8005734:	2001      	movs	r0, #1
 8005736:	f001 fad9 	bl	8006cec <BSP_PB_GetState>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff ffb9 	bl	80056be <Appli_UpdateButton2State>
	return;
 800574c:	bf00      	nop
}
 800574e:	bd80      	pop	{r7, pc}

08005750 <beginTracking>:
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/

static void beginTracking(void)
{
 8005750:	b5b0      	push	{r4, r5, r7, lr}
 8005752:	f5ad 4daf 	sub.w	sp, sp, #22400	; 0x5780
 8005756:	b094      	sub	sp, #80	; 0x50
 8005758:	af7e      	add	r7, sp, #504	; 0x1f8
	 * 3 while (20frames) read from the color register and tof, constantly ranging until no more **
	 * 4 sets up the interrupt register again
	 *
	 */
	//task 1
	printf("begin Tracking triggered\n");
 800575a:	4898      	ldr	r0, [pc, #608]	; (80059bc <beginTracking+0x26c>)
 800575c:	f012 f830 	bl	80177c0 <puts>
	BSP_LED_On(LED_GREEN);
 8005760:	2001      	movs	r0, #1
 8005762:	f001 fa75 	bl	8006c50 <BSP_LED_On>

	if (BaseFrameValid==0){
 8005766:	4b96      	ldr	r3, [pc, #600]	; (80059c0 <beginTracking+0x270>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <beginTracking+0x26>
		printf("BaseFrame uninitialized");
 800576e:	4895      	ldr	r0, [pc, #596]	; (80059c4 <beginTracking+0x274>)
 8005770:	f011 ffb8 	bl	80176e4 <iprintf>
 8005774:	e11d      	b.n	80059b2 <beginTracking+0x262>
		return;
	}
	//task 2
	set_ALSInterrupt(sensor.reginfo, 0, 0);
 8005776:	2200      	movs	r2, #0
 8005778:	2100      	movs	r1, #0
 800577a:	4893      	ldr	r0, [pc, #588]	; (80059c8 <beginTracking+0x278>)
 800577c:	f001 fca4 	bl	80070c8 <set_ALSInterrupt>
	reset_Status(sensor.reginfo);
 8005780:	4891      	ldr	r0, [pc, #580]	; (80059c8 <beginTracking+0x278>)
 8005782:	f001 ffa5 	bl	80076d0 <reset_Status>

	//Creates 2D arrays to hold the normalized data
	int BaseFrame[8][8];
	int Frame[8][8];
	int NormFrame[8][8];
	MX_TOF_Begin();
 8005786:	f7fc ff93 	bl	80026b0 <MX_TOF_Begin>

	parse_TOF_result(&rawBaseFrame, BaseFrame);
 800578a:	f507 43a9 	add.w	r3, r7, #21632	; 0x5480
 800578e:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8005792:	4619      	mov	r1, r3
 8005794:	488d      	ldr	r0, [pc, #564]	; (80059cc <beginTracking+0x27c>)
 8005796:	f7fc ffad 	bl	80026f4 <parse_TOF_result>
	FIFObuffer fifobuffer;
	init_fifo(&fifobuffer); // Initialize the FIFObuffer
 800579a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800579e:	3b38      	subs	r3, #56	; 0x38
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fc f8a1 	bl	80018e8 <init_fifo>

	//printf("\033[2J\033[H");
	uint8_t loopblob = 40;
 80057a6:	2328      	movs	r3, #40	; 0x28
 80057a8:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80057ac:	f102 0257 	add.w	r2, r2, #87	; 0x57
 80057b0:	7013      	strb	r3, [r2, #0]
	while (loopblob!=0) {
 80057b2:	e0d2      	b.n	800595a <beginTracking+0x20a>
		//reads new frame
#if (1)
		//printf("\033[H");
		//printf("\033[2J\033[H");
#endif
		printf("%d loop til sleep\n",--loopblob);
 80057b4:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80057b8:	f103 0357 	add.w	r3, r3, #87	; 0x57
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	3b01      	subs	r3, #1
 80057c0:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80057c4:	f102 0257 	add.w	r2, r2, #87	; 0x57
 80057c8:	7013      	strb	r3, [r2, #0]
 80057ca:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80057ce:	f103 0357 	add.w	r3, r3, #87	; 0x57
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	4619      	mov	r1, r3
 80057d6:	487e      	ldr	r0, [pc, #504]	; (80059d0 <beginTracking+0x280>)
 80057d8:	f011 ff84 	bl	80176e4 <iprintf>
		printf("NEWFRAME\n");
 80057dc:	487d      	ldr	r0, [pc, #500]	; (80059d4 <beginTracking+0x284>)
 80057de:	f011 ffef 	bl	80177c0 <puts>
		int32_t status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX,
 80057e2:	497d      	ldr	r1, [pc, #500]	; (80059d8 <beginTracking+0x288>)
 80057e4:	2000      	movs	r0, #0
 80057e6:	f7fd f953 	bl	8002a90 <CUSTOM_RANGING_SENSOR_GetDistance>
 80057ea:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80057ee:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80057f2:	6018      	str	r0, [r3, #0]
				&rawFrame);
		while (status != 0) {
 80057f4:	e008      	b.n	8005808 <beginTracking+0xb8>
			status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX,
 80057f6:	4978      	ldr	r1, [pc, #480]	; (80059d8 <beginTracking+0x288>)
 80057f8:	2000      	movs	r0, #0
 80057fa:	f7fd f949 	bl	8002a90 <CUSTOM_RANGING_SENSOR_GetDistance>
 80057fe:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8005802:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8005806:	6018      	str	r0, [r3, #0]
		while (status != 0) {
 8005808:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800580c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1ef      	bne.n	80057f6 <beginTracking+0xa6>
					&rawFrame);
		}
		rawColor = get_raw_XYZ(&sensor);
 8005816:	4c71      	ldr	r4, [pc, #452]	; (80059dc <beginTracking+0x28c>)
 8005818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800581c:	3b58      	subs	r3, #88	; 0x58
 800581e:	496a      	ldr	r1, [pc, #424]	; (80059c8 <beginTracking+0x278>)
 8005820:	4618      	mov	r0, r3
 8005822:	f001 fd4f 	bl	80072c4 <get_raw_XYZ>
 8005826:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800582a:	f5a3 62bb 	sub.w	r2, r3, #1496	; 0x5d8
 800582e:	4623      	mov	r3, r4
 8005830:	4614      	mov	r4, r2
 8005832:	6820      	ldr	r0, [r4, #0]
 8005834:	6861      	ldr	r1, [r4, #4]
 8005836:	68a2      	ldr	r2, [r4, #8]
 8005838:	c307      	stmia	r3!, {r0, r1, r2}
 800583a:	89a2      	ldrh	r2, [r4, #12]
 800583c:	801a      	strh	r2, [r3, #0]
		//TCS3430_print_color(&rawColor);
		float dx, dy;
		colordiff(rawBaseColor,rawColor,&dx,&dy);
 800583e:	4d68      	ldr	r5, [pc, #416]	; (80059e0 <beginTracking+0x290>)
 8005840:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8005844:	3b40      	subs	r3, #64	; 0x40
 8005846:	9305      	str	r3, [sp, #20]
 8005848:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800584c:	3b3c      	subs	r3, #60	; 0x3c
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	4b62      	ldr	r3, [pc, #392]	; (80059dc <beginTracking+0x28c>)
 8005852:	466c      	mov	r4, sp
 8005854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005856:	c407      	stmia	r4!, {r0, r1, r2}
 8005858:	8023      	strh	r3, [r4, #0]
 800585a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800585e:	f001 ff53 	bl	8007708 <colordiff>


		//parse new frame
		parse_TOF_result(&rawFrame, Frame);
 8005862:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8005866:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800586a:	4619      	mov	r1, r3
 800586c:	485a      	ldr	r0, [pc, #360]	; (80059d8 <beginTracking+0x288>)
 800586e:	f7fc ff41 	bl	80026f4 <parse_TOF_result>

		subtract_matrices(NormFrame, BaseFrame, Frame); //norm_data=8 by 8 matrix
 8005872:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8005876:	f102 0250 	add.w	r2, r2, #80	; 0x50
 800587a:	f507 41a9 	add.w	r1, r7, #21632	; 0x5480
 800587e:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8005882:	f507 43a5 	add.w	r3, r7, #21120	; 0x5280
 8005886:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800588a:	4618      	mov	r0, r3
 800588c:	f7fc f9d6 	bl	8001c3c <subtract_matrices>

//TODO: decide whether print matrix or not
		print_matrix(NormFrame);
 8005890:	f507 43a5 	add.w	r3, r7, #21120	; 0x5280
 8005894:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8005898:	4618      	mov	r0, r3
 800589a:	f7fc f8ff 	bl	8001a9c <print_matrix>


        FrameInfo frame_info = parse_frame(NormFrame,dx,dy);
 800589e:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80058a2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80058a6:	edd3 7a00 	vldr	s15, [r3]
 80058aa:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80058ae:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80058b2:	ed93 7a00 	vldr	s14, [r3]
 80058b6:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80058ba:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 80058be:	f507 42a5 	add.w	r2, r7, #21120	; 0x5280
 80058c2:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80058c6:	eef0 0a47 	vmov.f32	s1, s14
 80058ca:	eeb0 0a67 	vmov.f32	s0, s15
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fb fbc1 	bl	8001058 <parse_frame>

        //print_frame_info(frame_info);

        if (frame_info.num_blobs>0){loopblob=40;}
 80058d6:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80058da:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 80058de:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dd05      	ble.n	80058f2 <beginTracking+0x1a2>
 80058e6:	2328      	movs	r3, #40	; 0x28
 80058e8:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80058ec:	f102 0257 	add.w	r2, r2, #87	; 0x57
 80058f0:	7013      	strb	r3, [r2, #0]

        enqueue(&fifobuffer, frame_info); // Store the FrameInfo into the FIFObuffer
 80058f2:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80058f6:	f2a3 55c4 	subw	r5, r3, #1476	; 0x5c4
 80058fa:	f507 7416 	add.w	r4, r7, #600	; 0x258
 80058fe:	3c38      	subs	r4, #56	; 0x38
 8005900:	4668      	mov	r0, sp
 8005902:	f105 030c 	add.w	r3, r5, #12
 8005906:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800590a:	4619      	mov	r1, r3
 800590c:	f012 f8b7 	bl	8017a7e <memcpy>
 8005910:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8005914:	4620      	mov	r0, r4
 8005916:	f7fc f86b 	bl	80019f0 <enqueue>
        //print_frame_info(fifobuffer.buffer[fifobuffer.rear]);

        print_frame_info_simple(fifobuffer.buffer[fifobuffer.rear]);
 800591a:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800591e:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8005922:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8005926:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800592a:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800592e:	f5a3 716e 	sub.w	r1, r3, #952	; 0x3b8
 8005932:	4613      	mov	r3, r2
 8005934:	01db      	lsls	r3, r3, #7
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	18cc      	adds	r4, r1, r3
 800593c:	4668      	mov	r0, sp
 800593e:	f104 0310 	add.w	r3, r4, #16
 8005942:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005946:	4619      	mov	r1, r3
 8005948:	f012 f899 	bl	8017a7e <memcpy>
 800594c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005950:	f7fc f8d4 	bl	8001afc <print_frame_info_simple>
        printf("NEWFRAMEEND\n");
 8005954:	4823      	ldr	r0, [pc, #140]	; (80059e4 <beginTracking+0x294>)
 8005956:	f011 ff33 	bl	80177c0 <puts>
	while (loopblob!=0) {
 800595a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800595e:	f103 0357 	add.w	r3, r3, #87	; 0x57
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f47f af25 	bne.w	80057b4 <beginTracking+0x64>

        //printf("\033[H");
	}

	//task 4
	Update_ALSThreshold(&sensor);
 800596a:	4817      	ldr	r0, [pc, #92]	; (80059c8 <beginTracking+0x278>)
 800596c:	f001 fd7c 	bl	8007468 <Update_ALSThreshold>
	reset_Status(sensor.reginfo);
 8005970:	4815      	ldr	r0, [pc, #84]	; (80059c8 <beginTracking+0x278>)
 8005972:	f001 fead 	bl	80076d0 <reset_Status>
	MX_TOF_Stop();
 8005976:	f7fc fea3 	bl	80026c0 <MX_TOF_Stop>
	BSP_LED_Off(LED_GREEN);
 800597a:	2001      	movs	r0, #1
 800597c:	f001 f982 	bl	8006c84 <BSP_LED_Off>
	rawBaseColor = get_raw_XYZ(&sensor);
 8005980:	4c17      	ldr	r4, [pc, #92]	; (80059e0 <beginTracking+0x290>)
 8005982:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005986:	3b58      	subs	r3, #88	; 0x58
 8005988:	490f      	ldr	r1, [pc, #60]	; (80059c8 <beginTracking+0x278>)
 800598a:	4618      	mov	r0, r3
 800598c:	f001 fc9a 	bl	80072c4 <get_raw_XYZ>
 8005990:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8005994:	f5a3 62bb 	sub.w	r2, r3, #1496	; 0x5d8
 8005998:	4623      	mov	r3, r4
 800599a:	4614      	mov	r4, r2
 800599c:	6820      	ldr	r0, [r4, #0]
 800599e:	6861      	ldr	r1, [r4, #4]
 80059a0:	68a2      	ldr	r2, [r4, #8]
 80059a2:	c307      	stmia	r3!, {r0, r1, r2}
 80059a4:	89a2      	ldrh	r2, [r4, #12]
 80059a6:	801a      	strh	r2, [r3, #0]
	set_ALSInterrupt(sensor.reginfo, 1, 0);
 80059a8:	2200      	movs	r2, #0
 80059aa:	2101      	movs	r1, #1
 80059ac:	4806      	ldr	r0, [pc, #24]	; (80059c8 <beginTracking+0x278>)
 80059ae:	f001 fb8b 	bl	80070c8 <set_ALSInterrupt>
#endif
}
 80059b2:	f507 47ab 	add.w	r7, r7, #21888	; 0x5580
 80059b6:	3758      	adds	r7, #88	; 0x58
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bdb0      	pop	{r4, r5, r7, pc}
 80059bc:	08019d08 	.word	0x08019d08
 80059c0:	20001b1d 	.word	0x20001b1d
 80059c4:	08019d24 	.word	0x08019d24
 80059c8:	200010f4 	.word	0x200010f4
 80059cc:	20001114 	.word	0x20001114
 80059d0:	08019d3c 	.word	0x08019d3c
 80059d4:	08019d50 	.word	0x08019d50
 80059d8:	20001618 	.word	0x20001618
 80059dc:	200010d4 	.word	0x200010d4
 80059e0:	200010c4 	.word	0x200010c4
 80059e4:	08019d5c 	.word	0x08019d5c

080059e8 <TrackingTask>:

static void TrackingTask(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
	if(BSP_PB_GetState(COLOR_INT) == GPIO_PIN_RESET){
 80059ec:	2003      	movs	r0, #3
 80059ee:	f001 f97d 	bl	8006cec <BSP_PB_GetState>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <TrackingTask+0x16>
		beginTracking();
 80059f8:	f7ff feaa 	bl	8005750 <beginTracking>
	}
	return;
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
}
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <ColorTask>:

static void ColorTask(void)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_USER_SET_TASK, CFG_SCH_PRIO_0);
 8005a06:	2100      	movs	r1, #0
 8005a08:	2080      	movs	r0, #128	; 0x80
 8005a0a:	f011 f823 	bl	8016a54 <UTIL_SEQ_SetTask>

	return;
 8005a0e:	bf00      	nop
}
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <ToFTask>:

static void ToFTask(void)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_TOFLOOP_TASK, CFG_SCH_PRIO_0);
 8005a16:	2100      	movs	r1, #0
 8005a18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a1c:	f011 f81a 	bl	8016a54 <UTIL_SEQ_SetTask>
}
 8005a20:	bf00      	nop
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <TCS3430Read>:
#endif
}


static void TCS3430Read(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED_BLUE);
 8005a28:	2000      	movs	r0, #0
 8005a2a:	f001 f945 	bl	8006cb8 <BSP_LED_Toggle>

	Appli_LongButtonPress();
 8005a2e:	f7ff fd5b 	bl	80054e8 <Appli_LongButtonPress>
//
//	adjust_exposure();
}
 8005a32:	bf00      	nop
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <LoopApp>:

static void LoopApp(void)	//TODO: finish up
{
 8005a38:	b5b0      	push	{r4, r5, r7, lr}
 8005a3a:	f5ad 6db8 	sub.w	sp, sp, #1472	; 0x5c0
 8005a3e:	af00      	add	r7, sp, #0
	static uint8_t Counter = 0;
	if (Counter == 20) {
 8005a40:	4b6d      	ldr	r3, [pc, #436]	; (8005bf8 <LoopApp+0x1c0>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b14      	cmp	r3, #20
 8005a46:	d102      	bne.n	8005a4e <LoopApp+0x16>
		Counter = 0;
 8005a48:	4b6b      	ldr	r3, [pc, #428]	; (8005bf8 <LoopApp+0x1c0>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	701a      	strb	r2, [r3, #0]

//		BSP_LED_Toggle(LED_RED);
	}
	Counter++;
 8005a4e:	4b6a      	ldr	r3, [pc, #424]	; (8005bf8 <LoopApp+0x1c0>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	4b68      	ldr	r3, [pc, #416]	; (8005bf8 <LoopApp+0x1c0>)
 8005a58:	701a      	strb	r2, [r3, #0]

#if TOF_ENABLE == 1
	uint8_t datas[6+128];
	tcs3430_optics_val color_data;
	tcs3430 sensor = { {0}, {0} };
 8005a5a:	4b68      	ldr	r3, [pc, #416]	; (8005bfc <LoopApp+0x1c4>)
 8005a5c:	f207 5404 	addw	r4, r7, #1284	; 0x504
 8005a60:	461d      	mov	r5, r3
 8005a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005a6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	color_data = get_raw_XYZ(&sensor);
 8005a6e:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8005a72:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 fc23 	bl	80072c4 <get_raw_XYZ>
	datas[0]=(uint8_t)color_data.X;datas[1]=(uint8_t)((color_data.X)>>8);
 8005a7e:	f8b7 3524 	ldrh.w	r3, [r7, #1316]	; 0x524
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f887 3534 	strb.w	r3, [r7, #1332]	; 0x534
 8005a88:	f8b7 3524 	ldrh.w	r3, [r7, #1316]	; 0x524
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f887 3535 	strb.w	r3, [r7, #1333]	; 0x535
	datas[2]=(uint8_t)color_data.Y;datas[3]=(uint8_t)((color_data.Y)>>8);
 8005a96:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	; 0x526
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	f887 3536 	strb.w	r3, [r7, #1334]	; 0x536
 8005aa0:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	; 0x526
 8005aa4:	0a1b      	lsrs	r3, r3, #8
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f887 3537 	strb.w	r3, [r7, #1335]	; 0x537
	datas[4]=(uint8_t)color_data.Z;datas[5]=(uint8_t)((color_data.Z)>>8);
 8005aae:	f8b7 3528 	ldrh.w	r3, [r7, #1320]	; 0x528
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f887 3538 	strb.w	r3, [r7, #1336]	; 0x538
 8005ab8:	f8b7 3528 	ldrh.w	r3, [r7, #1320]	; 0x528
 8005abc:	0a1b      	lsrs	r3, r3, #8
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f887 3539 	strb.w	r3, [r7, #1337]	; 0x539
	//TCS3430_print_color(&color_data);

	RANGING_SENSOR_Result_t Result;
	CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	4619      	mov	r1, r3
 8005aca:	2000      	movs	r0, #0
 8005acc:	f7fc ffe0 	bl	8002a90 <CUSTOM_RANGING_SENSOR_GetDistance>
	int8_t j, k, l;
	for (j = 0; j < Result.NumberOfZones; j += 8){
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 35bf 	strb.w	r3, [r7, #1471]	; 0x5bf
 8005ad6:	e07f      	b.n	8005bd8 <LoopApp+0x1a0>
		for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++){
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 35bd 	strb.w	r3, [r7, #1469]	; 0x5bd
 8005ade:	e071      	b.n	8005bc4 <LoopApp+0x18c>
			for (k = (8 - 1); k >= 0; k--){
 8005ae0:	2307      	movs	r3, #7
 8005ae2:	f887 35be 	strb.w	r3, [r7, #1470]	; 0x5be
 8005ae6:	e062      	b.n	8005bae <LoopApp+0x176>
				if (Result.ZoneResult[j+k].NumberOfTargets > 0){
 8005ae8:	f997 25bf 	ldrsb.w	r2, [r7, #1471]	; 0x5bf
 8005aec:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8005af0:	441a      	add	r2, r3
 8005af2:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8005af6:	f5a3 61b8 	sub.w	r1, r3, #1472	; 0x5c0
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	3304      	adds	r3, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d049      	beq.n	8005ba0 <LoopApp+0x168>
					datas[6+k+k+j+j]=(uint8_t)Result.ZoneResult[j+k].Distance[l];
 8005b0c:	f997 25bf 	ldrsb.w	r2, [r7, #1471]	; 0x5bf
 8005b10:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8005b14:	441a      	add	r2, r3
 8005b16:	f997 05bd 	ldrsb.w	r0, [r7, #1469]	; 0x5bd
 8005b1a:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8005b1e:	f5a3 61b8 	sub.w	r1, r3, #1472	; 0x5c0
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	4403      	add	r3, r0
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	6899      	ldr	r1, [r3, #8]
 8005b30:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8005b34:	1d9a      	adds	r2, r3, #6
 8005b36:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8005b3a:	441a      	add	r2, r3
 8005b3c:	f997 35bf 	ldrsb.w	r3, [r7, #1471]	; 0x5bf
 8005b40:	441a      	add	r2, r3
 8005b42:	f997 35bf 	ldrsb.w	r3, [r7, #1471]	; 0x5bf
 8005b46:	4413      	add	r3, r2
 8005b48:	b2ca      	uxtb	r2, r1
 8005b4a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8005b4e:	443b      	add	r3, r7
 8005b50:	f803 2c8c 	strb.w	r2, [r3, #-140]
					datas[6+k+k+j+j+1]=(uint8_t)((Result.ZoneResult[j+k].Distance[l])>>8);
 8005b54:	f997 25bf 	ldrsb.w	r2, [r7, #1471]	; 0x5bf
 8005b58:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8005b5c:	441a      	add	r2, r3
 8005b5e:	f997 05bd 	ldrsb.w	r0, [r7, #1469]	; 0x5bd
 8005b62:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8005b66:	f5a3 61b8 	sub.w	r1, r3, #1472	; 0x5c0
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	4403      	add	r3, r0
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	0a19      	lsrs	r1, r3, #8
 8005b7a:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8005b7e:	1d9a      	adds	r2, r3, #6
 8005b80:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8005b84:	441a      	add	r2, r3
 8005b86:	f997 35bf 	ldrsb.w	r3, [r7, #1471]	; 0x5bf
 8005b8a:	441a      	add	r2, r3
 8005b8c:	f997 35bf 	ldrsb.w	r3, [r7, #1471]	; 0x5bf
 8005b90:	4413      	add	r3, r2
 8005b92:	3301      	adds	r3, #1
 8005b94:	b2ca      	uxtb	r2, r1
 8005b96:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8005b9a:	443b      	add	r3, r7
 8005b9c:	f803 2c8c 	strb.w	r2, [r3, #-140]
			for (k = (8 - 1); k >= 0; k--){
 8005ba0:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f887 35be 	strb.w	r3, [r7, #1470]	; 0x5be
 8005bae:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da98      	bge.n	8005ae8 <LoopApp+0xb0>
		for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++){
 8005bb6:	f997 35bd 	ldrsb.w	r3, [r7, #1469]	; 0x5bd
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f887 35bd 	strb.w	r3, [r7, #1469]	; 0x5bd
 8005bc4:	f997 35bd 	ldrsb.w	r3, [r7, #1469]	; 0x5bd
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d089      	beq.n	8005ae0 <LoopApp+0xa8>
	for (j = 0; j < Result.NumberOfZones; j += 8){
 8005bcc:	f897 35bf 	ldrb.w	r3, [r7, #1471]	; 0x5bf
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f887 35bf 	strb.w	r3, [r7, #1471]	; 0x5bf
 8005bd8:	f997 25bf 	ldrsb.w	r2, [r7, #1471]	; 0x5bf
 8005bdc:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8005be0:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	f4ff af76 	bcc.w	8005ad8 <LoopApp+0xa0>
				}
			}
		}
	}
#endif
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	f507 67b8 	add.w	r7, r7, #1472	; 0x5c0
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf8:	20001ba8 	.word	0x20001ba8
 8005bfc:	08019cc0 	.word	0x08019cc0

08005c00 <LL_PWR_EnableBootC2>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <LL_PWR_EnableBootC2+0x1c>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4a04      	ldr	r2, [pc, #16]	; (8005c1c <LL_PWR_EnableBootC2+0x1c>)
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0e:	60d3      	str	r3, [r2, #12]
}
 8005c10:	bf00      	nop
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	58000400 	.word	0x58000400

08005c20 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005c2a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005c2e:	4905      	ldr	r1, [pc, #20]	; (8005c44 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	58000800 	.word	0x58000800

08005c48 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005c52:	6a1a      	ldr	r2, [r3, #32]
 8005c54:	4904      	ldr	r1, [pc, #16]	; (8005c68 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	620b      	str	r3, [r1, #32]
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	58000800 	.word	0x58000800

08005c6c <LL_AHB3_GRP1_EnableClock>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005c90:	68fb      	ldr	r3, [r7, #12]
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005caa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8005cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8005cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <LL_C1_IPCC_EnableIT_TXF>:
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	601a      	str	r2, [r3, #0]
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <LL_C1_IPCC_EnableIT_RXO>:
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f043 0201 	orr.w	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	605a      	str	r2, [r3, #4]
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	041b      	lsls	r3, r3, #16
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	605a      	str	r2, [r3, #4]
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	401a      	ands	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	605a      	str	r2, [r3, #4]
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	609a      	str	r2, [r3, #8]
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <LL_C1_IPCC_SetFlag_CHx>:
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	041a      	lsls	r2, r3, #16
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	609a      	str	r2, [r3, #8]
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d101      	bne.n	8005dda <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d101      	bne.n	8005e04 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e000      	b.n	8005e06 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8005e18:	2102      	movs	r1, #2
 8005e1a:	4818      	ldr	r0, [pc, #96]	; (8005e7c <HW_IPCC_Rx_Handler+0x68>)
 8005e1c:	f7ff ffe4 	bl	8005de8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <HW_IPCC_Rx_Handler+0x24>
 8005e26:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <HW_IPCC_Rx_Handler+0x68>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d102      	bne.n	8005e38 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8005e32:	f000 f8d5 	bl	8005fe0 <HW_IPCC_SYS_EvtHandler>
 8005e36:	e01e      	b.n	8005e76 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8005e38:	2101      	movs	r1, #1
 8005e3a:	4810      	ldr	r0, [pc, #64]	; (8005e7c <HW_IPCC_Rx_Handler+0x68>)
 8005e3c:	f7ff ffd4 	bl	8005de8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <HW_IPCC_Rx_Handler+0x44>
 8005e46:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <HW_IPCC_Rx_Handler+0x68>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8005e52:	f000 f889 	bl	8005f68 <HW_IPCC_BLE_EvtHandler>
 8005e56:	e00e      	b.n	8005e76 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8005e58:	2108      	movs	r1, #8
 8005e5a:	4808      	ldr	r0, [pc, #32]	; (8005e7c <HW_IPCC_Rx_Handler+0x68>)
 8005e5c:	f7ff ffc4 	bl	8005de8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <HW_IPCC_Rx_Handler+0x64>
 8005e66:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <HW_IPCC_Rx_Handler+0x68>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8005e72:	f000 f901 	bl	8006078 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
}
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	58000c00 	.word	0x58000c00

08005e80 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8005e84:	2102      	movs	r1, #2
 8005e86:	4818      	ldr	r0, [pc, #96]	; (8005ee8 <HW_IPCC_Tx_Handler+0x68>)
 8005e88:	f7ff ff99 	bl	8005dbe <LL_C1_IPCC_IsActiveFlag_CHx>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <HW_IPCC_Tx_Handler+0x24>
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <HW_IPCC_Tx_Handler+0x68>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d102      	bne.n	8005ea4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8005e9e:	f000 f893 	bl	8005fc8 <HW_IPCC_SYS_CmdEvtHandler>
 8005ea2:	e01e      	b.n	8005ee2 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8005ea4:	2108      	movs	r1, #8
 8005ea6:	4810      	ldr	r0, [pc, #64]	; (8005ee8 <HW_IPCC_Tx_Handler+0x68>)
 8005ea8:	f7ff ff89 	bl	8005dbe <LL_C1_IPCC_IsActiveFlag_CHx>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d108      	bne.n	8005ec4 <HW_IPCC_Tx_Handler+0x44>
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <HW_IPCC_Tx_Handler+0x68>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d102      	bne.n	8005ec4 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8005ebe:	f000 f8bd 	bl	800603c <HW_IPCC_MM_FreeBufHandler>
 8005ec2:	e00e      	b.n	8005ee2 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8005ec4:	2120      	movs	r1, #32
 8005ec6:	4808      	ldr	r0, [pc, #32]	; (8005ee8 <HW_IPCC_Tx_Handler+0x68>)
 8005ec8:	f7ff ff79 	bl	8005dbe <LL_C1_IPCC_IsActiveFlag_CHx>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d108      	bne.n	8005ee4 <HW_IPCC_Tx_Handler+0x64>
 8005ed2:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <HW_IPCC_Tx_Handler+0x68>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8005ede:	f000 f84f 	bl	8005f80 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8005ee2:	bf00      	nop
 8005ee4:	bf00      	nop
}
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	58000c00 	.word	0x58000c00

08005eec <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8005ef0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005ef4:	f7ff fed3 	bl	8005c9e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8005ef8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005efc:	f7ff fea4 	bl	8005c48 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8005f00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f04:	f7ff fe8c 	bl	8005c20 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8005f08:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8005f0a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8005f0c:	f7ff fe78 	bl	8005c00 <LL_PWR_EnableBootC2>

  return;
 8005f10:	bf00      	nop
}
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8005f18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005f1c:	f7ff fea6 	bl	8005c6c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8005f20:	4806      	ldr	r0, [pc, #24]	; (8005f3c <HW_IPCC_Init+0x28>)
 8005f22:	f7ff fee8 	bl	8005cf6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8005f26:	4805      	ldr	r0, [pc, #20]	; (8005f3c <HW_IPCC_Init+0x28>)
 8005f28:	f7ff fed5 	bl	8005cd6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8005f2c:	202c      	movs	r0, #44	; 0x2c
 8005f2e:	f004 fe96 	bl	800ac5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8005f32:	202d      	movs	r0, #45	; 0x2d
 8005f34:	f004 fe93 	bl	800ac5e <HAL_NVIC_EnableIRQ>

  return;
 8005f38:	bf00      	nop
}
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	58000c00 	.word	0x58000c00

08005f40 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8005f44:	2101      	movs	r1, #1
 8005f46:	4802      	ldr	r0, [pc, #8]	; (8005f50 <HW_IPCC_BLE_Init+0x10>)
 8005f48:	f7ff ff0a 	bl	8005d60 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005f4c:	bf00      	nop
}
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	58000c00 	.word	0x58000c00

08005f54 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4802      	ldr	r0, [pc, #8]	; (8005f64 <HW_IPCC_BLE_SendCmd+0x10>)
 8005f5c:	f7ff ff20 	bl	8005da0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8005f60:	bf00      	nop
}
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	58000c00 	.word	0x58000c00

08005f68 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8005f6c:	f00e fac4 	bl	80144f8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8005f70:	2101      	movs	r1, #1
 8005f72:	4802      	ldr	r0, [pc, #8]	; (8005f7c <HW_IPCC_BLE_EvtHandler+0x14>)
 8005f74:	f7ff ff06 	bl	8005d84 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8005f78:	bf00      	nop
}
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	58000c00 	.word	0x58000c00

08005f80 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8005f84:	2120      	movs	r1, #32
 8005f86:	4803      	ldr	r0, [pc, #12]	; (8005f94 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8005f88:	f7ff fed8 	bl	8005d3c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8005f8c:	f00e fae4 	bl	8014558 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8005f90:	bf00      	nop
}
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	58000c00 	.word	0x58000c00

08005f98 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8005f9c:	2102      	movs	r1, #2
 8005f9e:	4802      	ldr	r0, [pc, #8]	; (8005fa8 <HW_IPCC_SYS_Init+0x10>)
 8005fa0:	f7ff fede 	bl	8005d60 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005fa4:	bf00      	nop
}
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	58000c00 	.word	0x58000c00

08005fac <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005fb0:	2102      	movs	r1, #2
 8005fb2:	4804      	ldr	r0, [pc, #16]	; (8005fc4 <HW_IPCC_SYS_SendCmd+0x18>)
 8005fb4:	f7ff fef4 	bl	8005da0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005fb8:	2102      	movs	r1, #2
 8005fba:	4802      	ldr	r0, [pc, #8]	; (8005fc4 <HW_IPCC_SYS_SendCmd+0x18>)
 8005fbc:	f7ff feab 	bl	8005d16 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8005fc0:	bf00      	nop
}
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	58000c00 	.word	0x58000c00

08005fc8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005fcc:	2102      	movs	r1, #2
 8005fce:	4803      	ldr	r0, [pc, #12]	; (8005fdc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8005fd0:	f7ff feb4 	bl	8005d3c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8005fd4:	f00e fb10 	bl	80145f8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8005fd8:	bf00      	nop
}
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	58000c00 	.word	0x58000c00

08005fe0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8005fe4:	f00e fb1e 	bl	8014624 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8005fe8:	2102      	movs	r1, #2
 8005fea:	4802      	ldr	r0, [pc, #8]	; (8005ff4 <HW_IPCC_SYS_EvtHandler+0x14>)
 8005fec:	f7ff feca 	bl	8005d84 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8005ff0:	bf00      	nop
}
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	58000c00 	.word	0x58000c00

08005ff8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006000:	2108      	movs	r1, #8
 8006002:	480c      	ldr	r0, [pc, #48]	; (8006034 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006004:	f7ff fedb 	bl	8005dbe <LL_C1_IPCC_IsActiveFlag_CHx>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800600e:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006014:	2108      	movs	r1, #8
 8006016:	4807      	ldr	r0, [pc, #28]	; (8006034 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006018:	f7ff fe7d 	bl	8005d16 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800601c:	e006      	b.n	800602c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006022:	2108      	movs	r1, #8
 8006024:	4803      	ldr	r0, [pc, #12]	; (8006034 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006026:	f7ff febb 	bl	8005da0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800602a:	bf00      	nop
}
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	58000c00 	.word	0x58000c00
 8006038:	20001bac 	.word	0x20001bac

0800603c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006040:	2108      	movs	r1, #8
 8006042:	4806      	ldr	r0, [pc, #24]	; (800605c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006044:	f7ff fe7a 	bl	8005d3c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800604e:	2108      	movs	r1, #8
 8006050:	4802      	ldr	r0, [pc, #8]	; (800605c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006052:	f7ff fea5 	bl	8005da0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006056:	bf00      	nop
}
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	58000c00 	.word	0x58000c00
 8006060:	20001bac 	.word	0x20001bac

08006064 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006068:	2108      	movs	r1, #8
 800606a:	4802      	ldr	r0, [pc, #8]	; (8006074 <HW_IPCC_TRACES_Init+0x10>)
 800606c:	f7ff fe78 	bl	8005d60 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006070:	bf00      	nop
}
 8006072:	bd80      	pop	{r7, pc}
 8006074:	58000c00 	.word	0x58000c00

08006078 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800607c:	f00e fb7a 	bl	8014774 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006080:	2108      	movs	r1, #8
 8006082:	4802      	ldr	r0, [pc, #8]	; (800608c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006084:	f7ff fe7e 	bl	8005d84 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006088:	bf00      	nop
}
 800608a:	bd80      	pop	{r7, pc}
 800608c:	58000c00 	.word	0x58000c00

08006090 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006090:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006092:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006094:	3304      	adds	r3, #4

08006096 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006096:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006098:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800609a:	d3f9      	bcc.n	8006090 <CopyDataInit>
  bx lr
 800609c:	4770      	bx	lr

0800609e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800609e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80060a0:	3004      	adds	r0, #4

080060a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80060a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80060a4:	d3fb      	bcc.n	800609e <FillZerobss>
  bx lr
 80060a6:	4770      	bx	lr

080060a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80060a8:	480c      	ldr	r0, [pc, #48]	; (80060dc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80060aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80060ac:	f004 fb4e 	bl	800a74c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80060b0:	480b      	ldr	r0, [pc, #44]	; (80060e0 <LoopForever+0x8>)
 80060b2:	490c      	ldr	r1, [pc, #48]	; (80060e4 <LoopForever+0xc>)
 80060b4:	4a0c      	ldr	r2, [pc, #48]	; (80060e8 <LoopForever+0x10>)
 80060b6:	2300      	movs	r3, #0
 80060b8:	f7ff ffed 	bl	8006096 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80060bc:	480b      	ldr	r0, [pc, #44]	; (80060ec <LoopForever+0x14>)
 80060be:	490c      	ldr	r1, [pc, #48]	; (80060f0 <LoopForever+0x18>)
 80060c0:	2300      	movs	r3, #0
 80060c2:	f7ff ffee 	bl	80060a2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80060c6:	480b      	ldr	r0, [pc, #44]	; (80060f4 <LoopForever+0x1c>)
 80060c8:	490b      	ldr	r1, [pc, #44]	; (80060f8 <LoopForever+0x20>)
 80060ca:	2300      	movs	r3, #0
 80060cc:	f7ff ffe9 	bl	80060a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80060d0:	f011 fcae 	bl	8017a30 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80060d4:	f7fd fcb6 	bl	8003a44 <main>

080060d8 <LoopForever>:

LoopForever:
  b LoopForever
 80060d8:	e7fe      	b.n	80060d8 <LoopForever>
 80060da:	0000      	.short	0x0000
  ldr   r0, =_estack
 80060dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80060e0:	20000008 	.word	0x20000008
 80060e4:	20000344 	.word	0x20000344
 80060e8:	0802fc3c 	.word	0x0802fc3c
  INIT_BSS _sbss, _ebss
 80060ec:	20000380 	.word	0x20000380
 80060f0:	20003efc 	.word	0x20003efc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80060f4:	200301e4 	.word	0x200301e4
 80060f8:	20030a67 	.word	0x20030a67

080060fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80060fc:	e7fe      	b.n	80060fc <ADC1_IRQHandler>
	...

08006100 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8006104:	2200      	movs	r2, #0
 8006106:	4912      	ldr	r1, [pc, #72]	; (8006150 <MX_USB_Device_Init+0x50>)
 8006108:	4812      	ldr	r0, [pc, #72]	; (8006154 <MX_USB_Device_Init+0x54>)
 800610a:	f00f f87d 	bl	8015208 <USBD_Init>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8006114:	f7fd fdeb 	bl	8003cee <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8006118:	490f      	ldr	r1, [pc, #60]	; (8006158 <MX_USB_Device_Init+0x58>)
 800611a:	480e      	ldr	r0, [pc, #56]	; (8006154 <MX_USB_Device_Init+0x54>)
 800611c:	f00f f8a4 	bl	8015268 <USBD_RegisterClass>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8006126:	f7fd fde2 	bl	8003cee <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800612a:	490c      	ldr	r1, [pc, #48]	; (800615c <MX_USB_Device_Init+0x5c>)
 800612c:	4809      	ldr	r0, [pc, #36]	; (8006154 <MX_USB_Device_Init+0x54>)
 800612e:	f00e ff9b 	bl	8015068 <USBD_CDC_RegisterInterface>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8006138:	f7fd fdd9 	bl	8003cee <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800613c:	4805      	ldr	r0, [pc, #20]	; (8006154 <MX_USB_Device_Init+0x54>)
 800613e:	f00f f8c9 	bl	80152d4 <USBD_Start>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8006148:	f7fd fdd1 	bl	8003cee <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800614c:	bf00      	nop
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000034 	.word	0x20000034
 8006154:	20001bb0 	.word	0x20001bb0
 8006158:	200000f4 	.word	0x200000f4
 800615c:	20000020 	.word	0x20000020

08006160 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006164:	2200      	movs	r2, #0
 8006166:	4905      	ldr	r1, [pc, #20]	; (800617c <CDC_Init_FS+0x1c>)
 8006168:	4805      	ldr	r0, [pc, #20]	; (8006180 <CDC_Init_FS+0x20>)
 800616a:	f00e ff97 	bl	801509c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800616e:	4905      	ldr	r1, [pc, #20]	; (8006184 <CDC_Init_FS+0x24>)
 8006170:	4803      	ldr	r0, [pc, #12]	; (8006180 <CDC_Init_FS+0x20>)
 8006172:	f00e ffb5 	bl	80150e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006176:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	2000268c 	.word	0x2000268c
 8006180:	20001bb0 	.word	0x20001bb0
 8006184:	20001e8c 	.word	0x20001e8c

08006188 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800618c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800618e:	4618      	mov	r0, r3
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	71fb      	strb	r3, [r7, #7]
 80061a4:	4613      	mov	r3, r2
 80061a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	2b23      	cmp	r3, #35	; 0x23
 80061ac:	d84a      	bhi.n	8006244 <CDC_Control_FS+0xac>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <CDC_Control_FS+0x1c>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	08006245 	.word	0x08006245
 80061b8:	08006245 	.word	0x08006245
 80061bc:	08006245 	.word	0x08006245
 80061c0:	08006245 	.word	0x08006245
 80061c4:	08006245 	.word	0x08006245
 80061c8:	08006245 	.word	0x08006245
 80061cc:	08006245 	.word	0x08006245
 80061d0:	08006245 	.word	0x08006245
 80061d4:	08006245 	.word	0x08006245
 80061d8:	08006245 	.word	0x08006245
 80061dc:	08006245 	.word	0x08006245
 80061e0:	08006245 	.word	0x08006245
 80061e4:	08006245 	.word	0x08006245
 80061e8:	08006245 	.word	0x08006245
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006245 	.word	0x08006245
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006245 	.word	0x08006245
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006245 	.word	0x08006245
 8006204:	08006245 	.word	0x08006245
 8006208:	08006245 	.word	0x08006245
 800620c:	08006245 	.word	0x08006245
 8006210:	08006245 	.word	0x08006245
 8006214:	08006245 	.word	0x08006245
 8006218:	08006245 	.word	0x08006245
 800621c:	08006245 	.word	0x08006245
 8006220:	08006245 	.word	0x08006245
 8006224:	08006245 	.word	0x08006245
 8006228:	08006245 	.word	0x08006245
 800622c:	08006245 	.word	0x08006245
 8006230:	08006245 	.word	0x08006245
 8006234:	08006245 	.word	0x08006245
 8006238:	08006245 	.word	0x08006245
 800623c:	08006245 	.word	0x08006245
 8006240:	08006245 	.word	0x08006245
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006244:	bf00      	nop
  }

  return (USBD_OK);
 8006246:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	4805      	ldr	r0, [pc, #20]	; (8006278 <CDC_Receive_FS+0x24>)
 8006262:	f00e ff3d 	bl	80150e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006266:	4804      	ldr	r0, [pc, #16]	; (8006278 <CDC_Receive_FS+0x24>)
 8006268:	f00e ff98 	bl	801519c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800626c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20001bb0 	.word	0x20001bb0

0800627c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  uint32_t Timeout = HAL_GetTick();
 800628c:	f004 fb42 	bl	800a914 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006292:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <CDC_Transmit_FS+0x4c>)
 8006294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006298:	60fb      	str	r3, [r7, #12]
  if (hcdc->TxState != 0){
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <CDC_Transmit_FS+0x2c>
    return USBD_BUSY;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e00b      	b.n	80062c0 <CDC_Transmit_FS+0x44>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80062a8:	887b      	ldrh	r3, [r7, #2]
 80062aa:	461a      	mov	r2, r3
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	4806      	ldr	r0, [pc, #24]	; (80062c8 <CDC_Transmit_FS+0x4c>)
 80062b0:	f00e fef4 	bl	801509c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80062b4:	4804      	ldr	r0, [pc, #16]	; (80062c8 <CDC_Transmit_FS+0x4c>)
 80062b6:	f00e ff31 	bl	801511c <USBD_CDC_TransmitPacket>
 80062ba:	4603      	mov	r3, r0
 80062bc:	75fb      	strb	r3, [r7, #23]
//		{
//			break;
//		}
//	}
  /* USER CODE END 7 */
  return result;
 80062be:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20001bb0 	.word	0x20001bb0

080062cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80062de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
	...

080062f0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	6039      	str	r1, [r7, #0]
 80062fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2212      	movs	r2, #18
 8006300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8006302:	4b03      	ldr	r3, [pc, #12]	; (8006310 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	20000054 	.word	0x20000054

08006314 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	6039      	str	r1, [r7, #0]
 800631e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2204      	movs	r2, #4
 8006324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006326:	4b03      	ldr	r3, [pc, #12]	; (8006334 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20000068 	.word	0x20000068

08006338 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	6039      	str	r1, [r7, #0]
 8006342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006344:	79fb      	ldrb	r3, [r7, #7]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d105      	bne.n	8006356 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	4907      	ldr	r1, [pc, #28]	; (800636c <USBD_CDC_ProductStrDescriptor+0x34>)
 800634e:	4808      	ldr	r0, [pc, #32]	; (8006370 <USBD_CDC_ProductStrDescriptor+0x38>)
 8006350:	f010 f90a 	bl	8016568 <USBD_GetString>
 8006354:	e004      	b.n	8006360 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	4904      	ldr	r1, [pc, #16]	; (800636c <USBD_CDC_ProductStrDescriptor+0x34>)
 800635a:	4805      	ldr	r0, [pc, #20]	; (8006370 <USBD_CDC_ProductStrDescriptor+0x38>)
 800635c:	f010 f904 	bl	8016568 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006360:	4b02      	ldr	r3, [pc, #8]	; (800636c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20002e8c 	.word	0x20002e8c
 8006370:	08019d68 	.word	0x08019d68

08006374 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	6039      	str	r1, [r7, #0]
 800637e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	4904      	ldr	r1, [pc, #16]	; (8006394 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8006384:	4804      	ldr	r0, [pc, #16]	; (8006398 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8006386:	f010 f8ef 	bl	8016568 <USBD_GetString>
  return USBD_StrDesc;
 800638a:	4b02      	ldr	r3, [pc, #8]	; (8006394 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20002e8c 	.word	0x20002e8c
 8006398:	08019d80 	.word	0x08019d80

0800639c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	6039      	str	r1, [r7, #0]
 80063a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	221a      	movs	r2, #26
 80063ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80063ae:	f000 f843 	bl	8006438 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80063b2:	4b02      	ldr	r3, [pc, #8]	; (80063bc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	2000006c 	.word	0x2000006c

080063c0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	6039      	str	r1, [r7, #0]
 80063ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d105      	bne.n	80063de <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	4907      	ldr	r1, [pc, #28]	; (80063f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80063d6:	4808      	ldr	r0, [pc, #32]	; (80063f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80063d8:	f010 f8c6 	bl	8016568 <USBD_GetString>
 80063dc:	e004      	b.n	80063e8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	4904      	ldr	r1, [pc, #16]	; (80063f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80063e2:	4805      	ldr	r0, [pc, #20]	; (80063f8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80063e4:	f010 f8c0 	bl	8016568 <USBD_GetString>
  }
  return USBD_StrDesc;
 80063e8:	4b02      	ldr	r3, [pc, #8]	; (80063f4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20002e8c 	.word	0x20002e8c
 80063f8:	08019d94 	.word	0x08019d94

080063fc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	6039      	str	r1, [r7, #0]
 8006406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d105      	bne.n	800641a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	4907      	ldr	r1, [pc, #28]	; (8006430 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8006412:	4808      	ldr	r0, [pc, #32]	; (8006434 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8006414:	f010 f8a8 	bl	8016568 <USBD_GetString>
 8006418:	e004      	b.n	8006424 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	4904      	ldr	r1, [pc, #16]	; (8006430 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800641e:	4805      	ldr	r0, [pc, #20]	; (8006434 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8006420:	f010 f8a2 	bl	8016568 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006424:	4b02      	ldr	r3, [pc, #8]	; (8006430 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20002e8c 	.word	0x20002e8c
 8006434:	08019da0 	.word	0x08019da0

08006438 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800643e:	4b0f      	ldr	r3, [pc, #60]	; (800647c <Get_SerialNum+0x44>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006444:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <Get_SerialNum+0x48>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800644a:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <Get_SerialNum+0x4c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4413      	add	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800645e:	2208      	movs	r2, #8
 8006460:	4909      	ldr	r1, [pc, #36]	; (8006488 <Get_SerialNum+0x50>)
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f814 	bl	8006490 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006468:	2204      	movs	r2, #4
 800646a:	4908      	ldr	r1, [pc, #32]	; (800648c <Get_SerialNum+0x54>)
 800646c:	68b8      	ldr	r0, [r7, #8]
 800646e:	f000 f80f 	bl	8006490 <IntToUnicode>
  }
}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	1fff7590 	.word	0x1fff7590
 8006480:	1fff7594 	.word	0x1fff7594
 8006484:	1fff7598 	.word	0x1fff7598
 8006488:	2000006e 	.word	0x2000006e
 800648c:	2000007e 	.word	0x2000007e

08006490 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80064a2:	2300      	movs	r3, #0
 80064a4:	75fb      	strb	r3, [r7, #23]
 80064a6:	e027      	b.n	80064f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	0f1b      	lsrs	r3, r3, #28
 80064ac:	2b09      	cmp	r3, #9
 80064ae:	d80b      	bhi.n	80064c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	0f1b      	lsrs	r3, r3, #28
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	4619      	mov	r1, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	440b      	add	r3, r1
 80064c0:	3230      	adds	r2, #48	; 0x30
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	e00a      	b.n	80064de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	0f1b      	lsrs	r3, r3, #28
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	4619      	mov	r1, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	440b      	add	r3, r1
 80064d8:	3237      	adds	r2, #55	; 0x37
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	3301      	adds	r3, #1
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4413      	add	r3, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	3301      	adds	r3, #1
 80064f6:	75fb      	strb	r3, [r7, #23]
 80064f8:	7dfa      	ldrb	r2, [r7, #23]
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d3d3      	bcc.n	80064a8 <IntToUnicode+0x18>
  }
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <LL_AHB2_GRP1_EnableClock>:
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800651c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4313      	orrs	r3, r2
 8006524:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800652a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4013      	ands	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006532:	68fb      	ldr	r3, [r7, #12]
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <LL_APB1_GRP1_EnableClock>:
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800654e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4313      	orrs	r3, r2
 8006556:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4013      	ands	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006564:	68fb      	ldr	r3, [r7, #12]
}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
	...

08006574 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b09c      	sub	sp, #112	; 0x70
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800657c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	609a      	str	r2, [r3, #8]
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800658c:	f107 030c 	add.w	r3, r7, #12
 8006590:	2250      	movs	r2, #80	; 0x50
 8006592:	2100      	movs	r1, #0
 8006594:	4618      	mov	r0, r3
 8006596:	f011 f9f3 	bl	8017980 <memset>
  if(pcdHandle->Instance==USB)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1b      	ldr	r2, [pc, #108]	; (800660c <HAL_PCD_MspInit+0x98>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d12f      	bne.n	8006604 <HAL_PCD_MspInit+0x90>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80065a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80065aa:	2300      	movs	r3, #0
 80065ac:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065ae:	f107 030c 	add.w	r3, r7, #12
 80065b2:	4618      	mov	r0, r3
 80065b4:	f008 fd8d 	bl	800f0d2 <HAL_RCCEx_PeriphCLKConfig>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80065be:	f7fd fb96 	bl	8003cee <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065c2:	2001      	movs	r0, #1
 80065c4:	f7ff ffa3 	bl	800650e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80065c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80065cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ce:	2302      	movs	r3, #2
 80065d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d6:	2300      	movs	r3, #0
 80065d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80065da:	230a      	movs	r3, #10
 80065dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80065e2:	4619      	mov	r1, r3
 80065e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065e8:	f004 fb7e 	bl	800ace8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80065ec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80065f0:	f7ff ffa6 	bl	8006540 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80065f4:	2200      	movs	r2, #0
 80065f6:	2100      	movs	r1, #0
 80065f8:	2014      	movs	r0, #20
 80065fa:	f004 fb16 	bl	800ac2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80065fe:	2014      	movs	r0, #20
 8006600:	f004 fb2d 	bl	800ac5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006604:	bf00      	nop
 8006606:	3770      	adds	r7, #112	; 0x70
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40006800 	.word	0x40006800

08006610 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f00e fea1 	bl	801536e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8006646:	78fa      	ldrb	r2, [r7, #3]
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	440b      	add	r3, r1
 8006654:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	4619      	mov	r1, r3
 800665e:	f00e fedb 	bl	8015418 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	440b      	add	r3, r1
 800668a:	3324      	adds	r3, #36	; 0x24
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	4619      	mov	r1, r3
 8006692:	f00e ff74 	bl	801557e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80066ac:	4618      	mov	r0, r3
 80066ae:	f00f f8ae 	bl	801580e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80066b2:	bf00      	nop
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80066c2:	2301      	movs	r3, #1
 80066c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	795b      	ldrb	r3, [r3, #5]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d001      	beq.n	80066d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80066ce:	f7fd fb0e 	bl	8003cee <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80066d8:	7bfa      	ldrb	r2, [r7, #15]
 80066da:	4611      	mov	r1, r2
 80066dc:	4618      	mov	r0, r3
 80066de:	f00f f852 	bl	8015786 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80066e8:	4618      	mov	r0, r3
 80066ea:	f00e fffa 	bl	80156e2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
	...

080066f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006706:	4618      	mov	r0, r3
 8006708:	f00f f84d 	bl	80157a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	7a5b      	ldrb	r3, [r3, #9]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006714:	4b04      	ldr	r3, [pc, #16]	; (8006728 <HAL_PCD_SuspendCallback+0x30>)
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	4a03      	ldr	r2, [pc, #12]	; (8006728 <HAL_PCD_SuspendCallback+0x30>)
 800671a:	f043 0306 	orr.w	r3, r3, #6
 800671e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	e000ed00 	.word	0xe000ed00

0800672c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7a5b      	ldrb	r3, [r3, #9]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800673c:	4b08      	ldr	r3, [pc, #32]	; (8006760 <HAL_PCD_ResumeCallback+0x34>)
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	4a07      	ldr	r2, [pc, #28]	; (8006760 <HAL_PCD_ResumeCallback+0x34>)
 8006742:	f023 0306 	bic.w	r3, r3, #6
 8006746:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006748:	f000 f9fa 	bl	8006b40 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006752:	4618      	mov	r0, r3
 8006754:	f00f f843 	bl	80157de <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	e000ed00 	.word	0xe000ed00

08006764 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800676c:	4a2c      	ldr	r2, [pc, #176]	; (8006820 <USBD_LL_Init+0xbc>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <USBD_LL_Init+0xbc>)
 8006778:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800677c:	f007 f9b6 	bl	800daec <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8006780:	4b27      	ldr	r3, [pc, #156]	; (8006820 <USBD_LL_Init+0xbc>)
 8006782:	4a28      	ldr	r2, [pc, #160]	; (8006824 <USBD_LL_Init+0xc0>)
 8006784:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006786:	4b26      	ldr	r3, [pc, #152]	; (8006820 <USBD_LL_Init+0xbc>)
 8006788:	2208      	movs	r2, #8
 800678a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800678c:	4b24      	ldr	r3, [pc, #144]	; (8006820 <USBD_LL_Init+0xbc>)
 800678e:	2202      	movs	r2, #2
 8006790:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006792:	4b23      	ldr	r3, [pc, #140]	; (8006820 <USBD_LL_Init+0xbc>)
 8006794:	2202      	movs	r2, #2
 8006796:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006798:	4b21      	ldr	r3, [pc, #132]	; (8006820 <USBD_LL_Init+0xbc>)
 800679a:	2200      	movs	r2, #0
 800679c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800679e:	4b20      	ldr	r3, [pc, #128]	; (8006820 <USBD_LL_Init+0xbc>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80067a4:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <USBD_LL_Init+0xbc>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80067aa:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <USBD_LL_Init+0xbc>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80067b0:	481b      	ldr	r0, [pc, #108]	; (8006820 <USBD_LL_Init+0xbc>)
 80067b2:	f005 fc49 	bl	800c048 <HAL_PCD_Init>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80067bc:	f7fd fa97 	bl	8003cee <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80067c6:	2318      	movs	r3, #24
 80067c8:	2200      	movs	r2, #0
 80067ca:	2100      	movs	r1, #0
 80067cc:	f007 f903 	bl	800d9d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80067d6:	2358      	movs	r3, #88	; 0x58
 80067d8:	2200      	movs	r2, #0
 80067da:	2180      	movs	r1, #128	; 0x80
 80067dc:	f007 f8fb 	bl	800d9d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80067e6:	23c0      	movs	r3, #192	; 0xc0
 80067e8:	2200      	movs	r2, #0
 80067ea:	2181      	movs	r1, #129	; 0x81
 80067ec:	f007 f8f3 	bl	800d9d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80067f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80067fa:	2200      	movs	r2, #0
 80067fc:	2101      	movs	r1, #1
 80067fe:	f007 f8ea 	bl	800d9d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800680c:	2200      	movs	r2, #0
 800680e:	2182      	movs	r1, #130	; 0x82
 8006810:	f007 f8e1 	bl	800d9d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	2000308c 	.word	0x2000308c
 8006824:	40006800 	.word	0x40006800

08006828 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800683e:	4618      	mov	r0, r3
 8006840:	f005 fcd0 	bl	800c1e4 <HAL_PCD_Start>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	4618      	mov	r0, r3
 800684c:	f000 f97e 	bl	8006b4c <USBD_Get_USB_Status>
 8006850:	4603      	mov	r3, r0
 8006852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006854:	7bbb      	ldrb	r3, [r7, #14]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	4608      	mov	r0, r1
 8006868:	4611      	mov	r1, r2
 800686a:	461a      	mov	r2, r3
 800686c:	4603      	mov	r3, r0
 800686e:	70fb      	strb	r3, [r7, #3]
 8006870:	460b      	mov	r3, r1
 8006872:	70bb      	strb	r3, [r7, #2]
 8006874:	4613      	mov	r3, r2
 8006876:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006886:	78bb      	ldrb	r3, [r7, #2]
 8006888:	883a      	ldrh	r2, [r7, #0]
 800688a:	78f9      	ldrb	r1, [r7, #3]
 800688c:	f005 fe17 	bl	800c4be <HAL_PCD_EP_Open>
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 f958 	bl	8006b4c <USBD_Get_USB_Status>
 800689c:	4603      	mov	r3, r0
 800689e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	460b      	mov	r3, r1
 80068b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	4611      	mov	r1, r2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f005 fe55 	bl	800c578 <HAL_PCD_EP_Close>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 f939 	bl	8006b4c <USBD_Get_USB_Status>
 80068da:	4603      	mov	r3, r0
 80068dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068de:	7bbb      	ldrb	r3, [r7, #14]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006902:	78fa      	ldrb	r2, [r7, #3]
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f005 fefe 	bl	800c708 <HAL_PCD_EP_SetStall>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	4618      	mov	r0, r3
 8006914:	f000 f91a 	bl	8006b4c <USBD_Get_USB_Status>
 8006918:	4603      	mov	r3, r0
 800691a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800691c:	7bbb      	ldrb	r3, [r7, #14]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	460b      	mov	r3, r1
 8006930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	4611      	mov	r1, r2
 8006944:	4618      	mov	r0, r3
 8006946:	f005 ff31 	bl	800c7ac <HAL_PCD_EP_ClrStall>
 800694a:	4603      	mov	r3, r0
 800694c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f8fb 	bl	8006b4c <USBD_Get_USB_Status>
 8006956:	4603      	mov	r3, r0
 8006958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800695a:	7bbb      	ldrb	r3, [r7, #14]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006976:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800697c:	2b00      	cmp	r3, #0
 800697e:	da0b      	bge.n	8006998 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	440b      	add	r3, r1
 8006992:	3312      	adds	r3, #18
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	e00b      	b.n	80069b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800699e:	68f9      	ldr	r1, [r7, #12]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	440b      	add	r3, r1
 80069aa:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80069ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80069d6:	78fa      	ldrb	r2, [r7, #3]
 80069d8:	4611      	mov	r1, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f005 fd4b 	bl	800c476 <HAL_PCD_SetAddress>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f8b0 	bl	8006b4c <USBD_Get_USB_Status>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b086      	sub	sp, #24
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
 8006a06:	460b      	mov	r3, r1
 8006a08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006a18:	7af9      	ldrb	r1, [r7, #11]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	f005 fe3c 	bl	800c69a <HAL_PCD_EP_Transmit>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f88f 	bl	8006b4c <USBD_Get_USB_Status>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a32:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	607a      	str	r2, [r7, #4]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006a5a:	7af9      	ldrb	r1, [r7, #11]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	f005 fdd2 	bl	800c608 <HAL_PCD_EP_Receive>
 8006a64:	4603      	mov	r3, r0
 8006a66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 f86e 	bl	8006b4c <USBD_Get_USB_Status>
 8006a70:	4603      	mov	r3, r0
 8006a72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006a74:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	4611      	mov	r1, r2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f005 fde8 	bl	800c66a <HAL_PCD_EP_GetRxCount>
 8006a9a:	4603      	mov	r3, r0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_PCDEx_LPM_Callback+0x18>
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d013      	beq.n	8006ae2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8006aba:	e023      	b.n	8006b04 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	7a5b      	ldrb	r3, [r3, #9]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006ac4:	f000 f83c 	bl	8006b40 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ac8:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <HAL_PCDEx_LPM_Callback+0x68>)
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	4a0f      	ldr	r2, [pc, #60]	; (8006b0c <HAL_PCDEx_LPM_Callback+0x68>)
 8006ace:	f023 0306 	bic.w	r3, r3, #6
 8006ad2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ada:	4618      	mov	r0, r3
 8006adc:	f00e fe7f 	bl	80157de <USBD_LL_Resume>
    break;
 8006ae0:	e010      	b.n	8006b04 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f00e fe5c 	bl	80157a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	7a5b      	ldrb	r3, [r3, #9]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <HAL_PCDEx_LPM_Callback+0x68>)
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <HAL_PCDEx_LPM_Callback+0x68>)
 8006afc:	f043 0306 	orr.w	r3, r3, #6
 8006b00:	6113      	str	r3, [r2, #16]
    break;
 8006b02:	bf00      	nop
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	e000ed00 	.word	0xe000ed00

08006b10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006b18:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <USBD_static_malloc+0x18>)
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	20003368 	.word	0x20003368

08006b2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006b44:	f7fc ffa2 	bl	8003a8c <SystemClock_Config>
}
 8006b48:	bf00      	nop
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d817      	bhi.n	8006b90 <USBD_Get_USB_Status+0x44>
 8006b60:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <USBD_Get_USB_Status+0x1c>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006b79 	.word	0x08006b79
 8006b6c:	08006b7f 	.word	0x08006b7f
 8006b70:	08006b85 	.word	0x08006b85
 8006b74:	08006b8b 	.word	0x08006b8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b7c:	e00b      	b.n	8006b96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	73fb      	strb	r3, [r7, #15]
    break;
 8006b82:	e008      	b.n	8006b96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b84:	2301      	movs	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]
    break;
 8006b88:	e005      	b.n	8006b96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b8e:	e002      	b.n	8006b96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006b90:	2303      	movs	r3, #3
 8006b92:	73fb      	strb	r3, [r7, #15]
    break;
 8006b94:	bf00      	nop
  }
  return usb_status;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <LL_AHB2_GRP1_EnableClock>:
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8006be2:	f107 030c 	add.w	r3, r7, #12
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	605a      	str	r2, [r3, #4]
 8006bec:	609a      	str	r2, [r3, #8]
 8006bee:	60da      	str	r2, [r3, #12]
 8006bf0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006bf2:	2002      	movs	r0, #2
 8006bf4:	f7ff ffd6 	bl	8006ba4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	f7ff ffd3 	bl	8006ba4 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	4a11      	ldr	r2, [pc, #68]	; (8006c48 <BSP_LED_Init+0x70>)
 8006c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c06:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c10:	2302      	movs	r3, #2
 8006c12:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <BSP_LED_Init+0x74>)
 8006c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c1c:	f107 020c 	add.w	r2, r7, #12
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f004 f860 	bl	800ace8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	4a08      	ldr	r2, [pc, #32]	; (8006c4c <BSP_LED_Init+0x74>)
 8006c2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	4a05      	ldr	r2, [pc, #20]	; (8006c48 <BSP_LED_Init+0x70>)
 8006c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f004 faba 	bl	800b1b4 <HAL_GPIO_WritePin>
}
 8006c40:	bf00      	nop
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	0801a0f0 	.word	0x0801a0f0
 8006c4c:	20000088 	.word	0x20000088

08006c50 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <BSP_LED_On+0x2c>)
 8006c5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	4a06      	ldr	r2, [pc, #24]	; (8006c80 <BSP_LED_On+0x30>)
 8006c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	f004 faa1 	bl	800b1b4 <HAL_GPIO_WritePin>
}
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000088 	.word	0x20000088
 8006c80:	0801a0f0 	.word	0x0801a0f0

08006c84 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	4a07      	ldr	r2, [pc, #28]	; (8006cb0 <BSP_LED_Off+0x2c>)
 8006c92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	4a06      	ldr	r2, [pc, #24]	; (8006cb4 <BSP_LED_Off+0x30>)
 8006c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f004 fa87 	bl	800b1b4 <HAL_GPIO_WritePin>
}
 8006ca6:	bf00      	nop
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000088 	.word	0x20000088
 8006cb4:	0801a0f0 	.word	0x0801a0f0

08006cb8 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	4a07      	ldr	r2, [pc, #28]	; (8006ce4 <BSP_LED_Toggle+0x2c>)
 8006cc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	4906      	ldr	r1, [pc, #24]	; (8006ce8 <BSP_LED_Toggle+0x30>)
 8006cce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f004 fa85 	bl	800b1e4 <HAL_GPIO_TogglePin>
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000088 	.word	0x20000088
 8006ce8:	0801a0f0 	.word	0x0801a0f0

08006cec <BSP_PB_GetState>:
  *     @arg BUTTON_SW2
  *     @arg BUTTON_SW3
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8006cf6:	79fb      	ldrb	r3, [r7, #7]
 8006cf8:	4a07      	ldr	r2, [pc, #28]	; (8006d18 <BSP_PB_GetState+0x2c>)
 8006cfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	4906      	ldr	r1, [pc, #24]	; (8006d1c <BSP_PB_GetState+0x30>)
 8006d02:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f004 fa3b 	bl	800b184 <HAL_GPIO_ReadPin>
 8006d0e:	4603      	mov	r3, r0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000094 	.word	0x20000094
 8006d1c:	0801a0f8 	.word	0x0801a0f8

08006d20 <get_data>:
tcs3430_optics_val XYZ_data;
int32_t ret;
int16_t interruptrange = 255;

int32_t get_data(uint8_t *reginfo)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b09c      	sub	sp, #112	; 0x70
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
     * ---------
     * INPUT: reginfo[24] - the array used to store all the values from registers, it should have size of 35
     * RETURN: 0 - success
     *         -1 - error
     */
	int addr[] = {0x80, 0x81, 0x83, 0x84, 0x85, 0x86, 0x87, 0x8C,
 8006d28:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <get_data+0x64>)
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	4611      	mov	r1, r2
 8006d30:	2260      	movs	r2, #96	; 0x60
 8006d32:	4618      	mov	r0, r3
 8006d34:	f010 fea3 	bl	8017a7e <memcpy>
				0x98, 0x99, 0x9A, 0x9B, 0x9F, 0xAB, 0xD6, 0xDD};

    // TODO ADD ERROR CHECKING
	HAL_StatusTypeDef ret;

	for(int i = 0; i < 25; i++)
 8006d38:	2300      	movs	r3, #0
 8006d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d3c:	e017      	b.n	8006d6e <get_data+0x4e>
	{
		ret = BSP_I2C1_ReadReg(TCS3430_ADDR, addr[i], reginfo+i, 1);
 8006d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	3370      	adds	r3, #112	; 0x70
 8006d44:	443b      	add	r3, r7
 8006d46:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8006d4a:	b299      	uxth	r1, r3
 8006d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	441a      	add	r2, r3
 8006d52:	2301      	movs	r3, #1
 8006d54:	2072      	movs	r0, #114	; 0x72
 8006d56:	f7fd fc5f 	bl	8004618 <BSP_I2C1_ReadReg>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if(ret != BSP_ERROR_NONE) break;
 8006d60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d106      	bne.n	8006d76 <get_data+0x56>
	for(int i = 0; i < 25; i++)
 8006d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d70:	2b18      	cmp	r3, #24
 8006d72:	dde4      	ble.n	8006d3e <get_data+0x1e>
 8006d74:	e000      	b.n	8006d78 <get_data+0x58>
		if(ret != BSP_ERROR_NONE) break;
 8006d76:	bf00      	nop
	}
	return ret;
 8006d78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3770      	adds	r7, #112	; 0x70
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	08019db0 	.word	0x08019db0

08006d88 <set_atime>:

int32_t set_atime(uint8_t *reginfo, int cycle_No)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
	 *        cycle_No - integration cycle numbers, must be between 1-256
	 * RETURN: 0 - success
	 *         -1 - error
	 */

	if ( (cycle_No <= 256) && (cycle_No >= 1) )
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d98:	dc16      	bgt.n	8006dc8 <set_atime+0x40>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd13      	ble.n	8006dc8 <set_atime+0x40>
	{
		reginfo[1] = cycle_No - 1;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3301      	adds	r3, #1
 8006da8:	3a01      	subs	r2, #1
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
	}
	else{ return -1; }

	// TODO ADD ERROR CHECKING
	//set_reg(TCS3430_ADDR, ATIME_ADDR, reginfo[1]);
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, ATIME_ADDR, reginfo+1, 1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	2301      	movs	r3, #1
 8006db4:	2181      	movs	r1, #129	; 0x81
 8006db6:	2072      	movs	r0, #114	; 0x72
 8006db8:	f7fd fbfc 	bl	80045b4 <BSP_I2C1_WriteReg>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	4a05      	ldr	r2, [pc, #20]	; (8006dd4 <set_atime+0x4c>)
 8006dc0:	6013      	str	r3, [r2, #0]
	return ret;
 8006dc2:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <set_atime+0x4c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	e001      	b.n	8006dcc <set_atime+0x44>
	else{ return -1; }
 8006dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200035b8 	.word	0x200035b8

08006dd8 <set_cfg0>:

int32_t set_cfg0(uint8_t *reginfo, uint8_t mode)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
	 * INPUT: reginfo[24] - current values of all registers
	 *        cycle_No - integration cycle numbers, must be between 1-256
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(mode)
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <set_cfg0+0x26>
	{
		reginfo[8] |= 0x04;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3308      	adds	r3, #8
 8006dee:	781a      	ldrb	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3308      	adds	r3, #8
 8006df4:	f042 0204 	orr.w	r2, r2, #4
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	e008      	b.n	8006e10 <set_cfg0+0x38>
	}
	else
	{
		reginfo[8] &= 0x80;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3308      	adds	r3, #8
 8006e02:	781a      	ldrb	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3308      	adds	r3, #8
 8006e08:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]
	}
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG0_ADDR, reginfo+8, 1);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f103 0208 	add.w	r2, r3, #8
 8006e16:	2301      	movs	r3, #1
 8006e18:	218d      	movs	r1, #141	; 0x8d
 8006e1a:	2072      	movs	r0, #114	; 0x72
 8006e1c:	f7fd fbca 	bl	80045b4 <BSP_I2C1_WriteReg>
 8006e20:	4603      	mov	r3, r0
 8006e22:	4a03      	ldr	r2, [pc, #12]	; (8006e30 <set_cfg0+0x58>)
 8006e24:	6013      	str	r3, [r2, #0]
}
 8006e26:	bf00      	nop
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	200035b8 	.word	0x200035b8

08006e34 <set_cfg1>:

int32_t set_cfg1(uint8_t *reginfo, uint8_t ALS_Mul, uint8_t again_flag)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
 8006e40:	4613      	mov	r3, r2
 8006e42:	70bb      	strb	r3, [r7, #2]
	 *        ALS_Mul - Sets the CH3 input. Default = 0 (X Channel). Set to 1 to read IR2.
	 *        again_flag - [x1 - gain of 1, x4 - gain of 4, x16 - gain of 16, x64 - gain of 64]
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if (ALS_Mul) { reginfo[9] = reginfo[9] | 0x08; }
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <set_cfg1+0x2a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3309      	adds	r3, #9
 8006e4e:	781a      	ldrb	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3309      	adds	r3, #9
 8006e54:	f042 0208 	orr.w	r2, r2, #8
 8006e58:	b2d2      	uxtb	r2, r2
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e008      	b.n	8006e70 <set_cfg1+0x3c>
	else { reginfo[9] = reginfo[9] & 0xF7; }
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3309      	adds	r3, #9
 8006e62:	781a      	ldrb	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3309      	adds	r3, #9
 8006e68:	f022 0208 	bic.w	r2, r2, #8
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]

	switch (again_flag)
 8006e70:	78bb      	ldrb	r3, [r7, #2]
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d03a      	beq.n	8006eec <set_cfg1+0xb8>
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	dc42      	bgt.n	8006f00 <set_cfg1+0xcc>
 8006e7a:	2b10      	cmp	r3, #16
 8006e7c:	d023      	beq.n	8006ec6 <set_cfg1+0x92>
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	dc3e      	bgt.n	8006f00 <set_cfg1+0xcc>
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d002      	beq.n	8006e8c <set_cfg1+0x58>
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d00a      	beq.n	8006ea0 <set_cfg1+0x6c>
 8006e8a:	e039      	b.n	8006f00 <set_cfg1+0xcc>
	{
	case 1:
		reginfo[9] = reginfo[9] & 0xFC;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3309      	adds	r3, #9
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3309      	adds	r3, #9
 8006e96:	f022 0203 	bic.w	r2, r2, #3
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
		break;
 8006e9e:	e041      	b.n	8006f24 <set_cfg1+0xf0>
	case 4:
		reginfo[9] = reginfo[9] & 0xFD;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3309      	adds	r3, #9
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3309      	adds	r3, #9
 8006eaa:	f022 0202 	bic.w	r2, r2, #2
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]
		reginfo[9] = reginfo[9] | 0x01;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3309      	adds	r3, #9
 8006eb6:	781a      	ldrb	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3309      	adds	r3, #9
 8006ebc:	f042 0201 	orr.w	r2, r2, #1
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	701a      	strb	r2, [r3, #0]
		break;
 8006ec4:	e02e      	b.n	8006f24 <set_cfg1+0xf0>
	case 16:
		reginfo[9] = reginfo[9] & 0xFE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3309      	adds	r3, #9
 8006eca:	781a      	ldrb	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3309      	adds	r3, #9
 8006ed0:	f022 0201 	bic.w	r2, r2, #1
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]
		reginfo[9] = reginfo[9] | 0x02;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3309      	adds	r3, #9
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3309      	adds	r3, #9
 8006ee2:	f042 0202 	orr.w	r2, r2, #2
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
		break;
 8006eea:	e01b      	b.n	8006f24 <set_cfg1+0xf0>
	case 64:
		reginfo[9] = reginfo[9] | 0x03;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3309      	adds	r3, #9
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3309      	adds	r3, #9
 8006ef6:	f042 0203 	orr.w	r2, r2, #3
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]
		break;
 8006efe:	e011      	b.n	8006f24 <set_cfg1+0xf0>
	default:
		reginfo[9] = reginfo[9] & 0xFD;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3309      	adds	r3, #9
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3309      	adds	r3, #9
 8006f0a:	f022 0202 	bic.w	r2, r2, #2
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]
		reginfo[9] = reginfo[9] | 0x01;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3309      	adds	r3, #9
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3309      	adds	r3, #9
 8006f1c:	f042 0201 	orr.w	r2, r2, #1
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	701a      	strb	r2, [r3, #0]
	}

	// TODO ADD ERROR CHECKING
	//set_reg(TCS3430_ADDR, CFG1_ADDR, reginfo[14]);
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG1_ADDR, reginfo+9, 1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f103 0209 	add.w	r2, r3, #9
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	2190      	movs	r1, #144	; 0x90
 8006f2e:	2072      	movs	r0, #114	; 0x72
 8006f30:	f7fd fb40 	bl	80045b4 <BSP_I2C1_WriteReg>
 8006f34:	4603      	mov	r3, r0
 8006f36:	4a04      	ldr	r2, [pc, #16]	; (8006f48 <set_cfg1+0x114>)
 8006f38:	6013      	str	r3, [r2, #0]

	return ret;
 8006f3a:	4b03      	ldr	r3, [pc, #12]	; (8006f48 <set_cfg1+0x114>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	200035b8 	.word	0x200035b8

08006f4c <set_cfg2>:

int32_t set_cfg2(uint8_t *reginfo, uint8_t mode)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
	 * INPUT: reginfo[24] - current values of all registers
	 *        mode - If this bit is set to 1 and AGAIN in the CFG1 register is set to 11, then the 128x gain mode will be enabled.
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(mode)
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <set_cfg2+0x26>
	{
		reginfo[21] |= 0x10;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3315      	adds	r3, #21
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3315      	adds	r3, #21
 8006f68:	f042 0210 	orr.w	r2, r2, #16
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	e008      	b.n	8006f84 <set_cfg2+0x38>
	}
	else
	{
		reginfo[21] &= 0x04;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3315      	adds	r3, #21
 8006f76:	781a      	ldrb	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3315      	adds	r3, #21
 8006f7c:	f002 0204 	and.w	r2, r2, #4
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
	}
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG2_ADDR, reginfo+21, 1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f103 0215 	add.w	r2, r3, #21
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	219f      	movs	r1, #159	; 0x9f
 8006f8e:	2072      	movs	r0, #114	; 0x72
 8006f90:	f7fd fb10 	bl	80045b4 <BSP_I2C1_WriteReg>
 8006f94:	4603      	mov	r3, r0
 8006f96:	4a03      	ldr	r2, [pc, #12]	; (8006fa4 <set_cfg2+0x58>)
 8006f98:	6013      	str	r3, [r2, #0]
}
 8006f9a:	bf00      	nop
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	200035b8 	.word	0x200035b8

08006fa8 <set_cfg3>:

int32_t set_cfg3(uint8_t *reginfo, uint8_t mode, uint8_t sai)//Mode all flag bit
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	70bb      	strb	r3, [r7, #2]
	 *        mode - If this bit is set, all flag bits in the STATUS register will be reset whenever the STATUS register is read over I2C.
	 *        sai - Sleep After Interrupt. Power down the device at the end of the ALS cycle if an interrupt has been generated
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(mode)
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <set_cfg3+0x2a>
	{
		reginfo[22] |= 0x80;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3316      	adds	r3, #22
 8006fc2:	781a      	ldrb	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3316      	adds	r3, #22
 8006fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	e008      	b.n	8006fe4 <set_cfg3+0x3c>
	}
	else
	{
		reginfo[22] &= 0x7F;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3316      	adds	r3, #22
 8006fd6:	781a      	ldrb	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3316      	adds	r3, #22
 8006fdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]
	}

	if(sai)
 8006fe4:	78bb      	ldrb	r3, [r7, #2]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <set_cfg3+0x56>
	{
		reginfo[22] |= 0x10;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3316      	adds	r3, #22
 8006fee:	781a      	ldrb	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3316      	adds	r3, #22
 8006ff4:	f042 0210 	orr.w	r2, r2, #16
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e008      	b.n	8007010 <set_cfg3+0x68>
	}
	else
	{
		reginfo[22] &= 0xEF;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3316      	adds	r3, #22
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3316      	adds	r3, #22
 8007008:	f022 0210 	bic.w	r2, r2, #16
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
	}

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG3_ADDR, reginfo+22, 1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f103 0216 	add.w	r2, r3, #22
 8007016:	2301      	movs	r3, #1
 8007018:	21ab      	movs	r1, #171	; 0xab
 800701a:	2072      	movs	r0, #114	; 0x72
 800701c:	f7fd faca 	bl	80045b4 <BSP_I2C1_WriteReg>
 8007020:	4603      	mov	r3, r0
 8007022:	4a04      	ldr	r2, [pc, #16]	; (8007034 <set_cfg3+0x8c>)
 8007024:	6013      	str	r3, [r2, #0]

	return ret;
 8007026:	4b03      	ldr	r3, [pc, #12]	; (8007034 <set_cfg3+0x8c>)
 8007028:	681b      	ldr	r3, [r3, #0]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200035b8 	.word	0x200035b8

08007038 <set_AutoZeroMode>:

int32_t set_AutoZeroMode(uint8_t *reginfo, uint8_t mode, uint8_t AZ_ITERATION)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
 8007044:	4613      	mov	r3, r2
 8007046:	70bb      	strb	r3, [r7, #2]
		     1: Always start at the previous (offset_c) with the auto-zero mechanism
     *        AZ_ITERATION - Run autozero automatically every nth ALS iteration (0=never, 7Fh=only at first ALS cycle, n=every nth time)
     * RETURN: 0 - success
     *         -1 - error
     */
    if (mode)
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d009      	beq.n	8007062 <set_AutoZeroMode+0x2a>
    {
        reginfo[23] |= 0x80;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3317      	adds	r3, #23
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3317      	adds	r3, #23
 8007058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]
 8007060:	e008      	b.n	8007074 <set_AutoZeroMode+0x3c>
    }
    else
    {
        reginfo[23] &= 0x7F;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3317      	adds	r3, #23
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3317      	adds	r3, #23
 800706c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
    }

    if(AZ_ITERATION == 0x7F)
 8007074:	78bb      	ldrb	r3, [r7, #2]
 8007076:	2b7f      	cmp	r3, #127	; 0x7f
 8007078:	d109      	bne.n	800708e <set_AutoZeroMode+0x56>
    {
    	reginfo[23] |= 0x7F;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3317      	adds	r3, #23
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3317      	adds	r3, #23
 8007084:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e008      	b.n	80070a0 <set_AutoZeroMode+0x68>
    }
    else
    {
    	reginfo[23] &= 0x80;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3317      	adds	r3, #23
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3317      	adds	r3, #23
 8007098:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]
    }

    ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AZ_CONFIG_ADDR, reginfo+23, 1);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f103 0217 	add.w	r2, r3, #23
 80070a6:	2301      	movs	r3, #1
 80070a8:	21d6      	movs	r1, #214	; 0xd6
 80070aa:	2072      	movs	r0, #114	; 0x72
 80070ac:	f7fd fa82 	bl	80045b4 <BSP_I2C1_WriteReg>
 80070b0:	4603      	mov	r3, r0
 80070b2:	4a04      	ldr	r2, [pc, #16]	; (80070c4 <set_AutoZeroMode+0x8c>)
 80070b4:	6013      	str	r3, [r2, #0]

    return ret; // Assuming 'ret' is a valid public variable accessible within the scope of this function
 80070b6:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <set_AutoZeroMode+0x8c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	200035b8 	.word	0x200035b8

080070c8 <set_ALSInterrupt>:

int32_t set_ALSInterrupt(uint8_t *reginfo, uint8_t AIEN, uint8_t ASIEN)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
 80070d4:	4613      	mov	r3, r2
 80070d6:	70bb      	strb	r3, [r7, #2]
						 1: Always start at the previous (offset_c) with the auto-zero mechanism
	 *        ASIEN - Writing '1' to this bit enables ASAT interrupt.
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(AIEN)
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <set_ALSInterrupt+0x2a>
	{
		reginfo[24] |= 0x10;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3318      	adds	r3, #24
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3318      	adds	r3, #24
 80070e8:	f042 0210 	orr.w	r2, r2, #16
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	e008      	b.n	8007104 <set_ALSInterrupt+0x3c>
	}
	else
	{
		reginfo[24] &= 0xEF;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3318      	adds	r3, #24
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3318      	adds	r3, #24
 80070fc:	f022 0210 	bic.w	r2, r2, #16
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]
	}

	if(ASIEN)
 8007104:	78bb      	ldrb	r3, [r7, #2]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <set_ALSInterrupt+0x56>
	{
		reginfo[24] |= 0x80;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3318      	adds	r3, #24
 800710e:	781a      	ldrb	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3318      	adds	r3, #24
 8007114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	701a      	strb	r2, [r3, #0]
 800711c:	e008      	b.n	8007130 <set_ALSInterrupt+0x68>
	}
	else
	{
		reginfo[24] &= 0x7F;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3318      	adds	r3, #24
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3318      	adds	r3, #24
 8007128:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
	}

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, INTENAB_ADDR, reginfo+24, 1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f103 0218 	add.w	r2, r3, #24
 8007136:	2301      	movs	r3, #1
 8007138:	21dd      	movs	r1, #221	; 0xdd
 800713a:	2072      	movs	r0, #114	; 0x72
 800713c:	f7fd fa3a 	bl	80045b4 <BSP_I2C1_WriteReg>
 8007140:	4603      	mov	r3, r0
 8007142:	4a04      	ldr	r2, [pc, #16]	; (8007154 <set_ALSInterrupt+0x8c>)
 8007144:	6013      	str	r3, [r2, #0]

	return ret;
 8007146:	4b03      	ldr	r3, [pc, #12]	; (8007154 <set_ALSInterrupt+0x8c>)
 8007148:	681b      	ldr	r3, [r3, #0]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	200035b8 	.word	0x200035b8

08007158 <enable_sensor>:

int32_t enable_sensor(uint8_t *reginfo, uint8_t wait_flag, uint8_t als_flag)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
 8007164:	4613      	mov	r3, r2
 8007166:	70bb      	strb	r3, [r7, #2]
	 *        wait_flag - 1 to enable wait feature, 0 to disable wait feature
	 *        als_flag - 1 to enable als feature, 0 to disable wait feature
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if (wait_flag) {
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <enable_sensor+0x26>
		reginfo[0] = reginfo[0] | 0x08;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	f043 0308 	orr.w	r3, r3, #8
 8007176:	b2da      	uxtb	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	e006      	b.n	800718c <enable_sensor+0x34>
	} else {
		reginfo[0] = reginfo[0] & 0xF7;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	f023 0308 	bic.w	r3, r3, #8
 8007186:	b2da      	uxtb	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	701a      	strb	r2, [r3, #0]
	}

	if (als_flag) {
 800718c:	78bb      	ldrb	r3, [r7, #2]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d007      	beq.n	80071a2 <enable_sensor+0x4a>
		reginfo[0] = reginfo[0] | 0x03;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	f043 0303 	orr.w	r3, r3, #3
 800719a:	b2da      	uxtb	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	e006      	b.n	80071b0 <enable_sensor+0x58>
	} else {
		reginfo[0] = reginfo[0] & 0xFC;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	701a      	strb	r2, [r3, #0]
	}

	//set_reg(TCS3430_ADDR, ENABLE_ADDR, reginfo[0]);
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, ENABLE_ADDR, reginfo, 1);
 80071b0:	2301      	movs	r3, #1
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	2072      	movs	r0, #114	; 0x72
 80071b8:	f7fd f9fc 	bl	80045b4 <BSP_I2C1_WriteReg>
 80071bc:	4603      	mov	r3, r0
 80071be:	4a04      	ldr	r2, [pc, #16]	; (80071d0 <enable_sensor+0x78>)
 80071c0:	6013      	str	r3, [r2, #0]

	return ret;
 80071c2:	4b03      	ldr	r3, [pc, #12]	; (80071d0 <enable_sensor+0x78>)
 80071c4:	681b      	ldr	r3, [r3, #0]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	200035b8 	.word	0x200035b8

080071d4 <disable_sensor>:

int32_t disable_sensor(uint8_t *reginfo)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	 * FUNCTION: Disable the sesor
	 * ---------
	 * INPUT: fd - the file descriptor of the i2c device
	 * RETURN: 0 - success
	 */
	reginfo[0] = reginfo[0] & 0x00;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, ENABLE_ADDR, reginfo, 1);
 80071e2:	2301      	movs	r3, #1
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	2180      	movs	r1, #128	; 0x80
 80071e8:	2072      	movs	r0, #114	; 0x72
 80071ea:	f7fd f9e3 	bl	80045b4 <BSP_I2C1_WriteReg>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4a03      	ldr	r2, [pc, #12]	; (8007200 <disable_sensor+0x2c>)
 80071f2:	6013      	str	r3, [r2, #0]
	return ret;
 80071f4:	4b02      	ldr	r3, [pc, #8]	; (8007200 <disable_sensor+0x2c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	200035b8 	.word	0x200035b8

08007204 <softReset>:

void softReset(uint8_t *reginfo)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  * FUNCTION: Change the enable register settings
  * ---------
  * INPUT: fd - the file descriptor of the i2c device
  * RETURN: 0 - success
  */
  disable_sensor(reginfo);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff ffe1 	bl	80071d4 <disable_sensor>
  set_atime(reginfo, 18);
 8007212:	2112      	movs	r1, #18
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff fdb7 	bl	8006d88 <set_atime>

  //setWaitTime(0);
  set_cfg0(reginfo, 0);
 800721a:	2100      	movs	r1, #0
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff fddb 	bl	8006dd8 <set_cfg0>

  //setALSGain(3);
  set_cfg1(reginfo, 0, 16);
 8007222:	2210      	movs	r2, #16
 8007224:	2100      	movs	r1, #0
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff fe04 	bl	8006e34 <set_cfg1>

  //setHighGAIN(false);
  set_cfg2(reginfo, 1);
 800722c:	2101      	movs	r1, #1
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff fe8c 	bl	8006f4c <set_cfg2>

  //setIntReadClear(false);
  //setSleepAfterInterrupt(false);
  set_cfg3(reginfo, 0, 0);
 8007234:	2200      	movs	r2, #0
 8007236:	2100      	movs	r1, #0
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff feb5 	bl	8006fa8 <set_cfg3>

  //setAutoZeroMode(0);
  //setAutoZeroNTHIteration(0x7f);
  set_AutoZeroMode(reginfo, 0, 0x7F);
 800723e:	227f      	movs	r2, #127	; 0x7f
 8007240:	2100      	movs	r1, #0
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff fef8 	bl	8007038 <set_AutoZeroMode>

  //setALSInterrupt(false);
  //setALSSaturationInterrupt(false);
  set_ALSInterrupt(reginfo, 0, 0);
 8007248:	2200      	movs	r2, #0
 800724a:	2100      	movs	r1, #0
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ff3b 	bl	80070c8 <set_ALSInterrupt>
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <get_optics_data>:

int32_t get_optics_data(uint8_t *color_array)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]

	// TODO ADD ERROR CHECKING


	//read Z
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_Z_ADDR, color_array, 2);
 8007264:	2302      	movs	r3, #2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	2194      	movs	r1, #148	; 0x94
 800726a:	2072      	movs	r0, #114	; 0x72
 800726c:	f7fd f9d4 	bl	8004618 <BSP_I2C1_ReadReg>
 8007270:	4603      	mov	r3, r0
 8007272:	4a13      	ldr	r2, [pc, #76]	; (80072c0 <get_optics_data+0x64>)
 8007274:	6013      	str	r3, [r2, #0]
	//color_array[0] = buf[0];

	//read Y
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_Y_ADDR, color_array+2, 2);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	1c9a      	adds	r2, r3, #2
 800727a:	2302      	movs	r3, #2
 800727c:	2196      	movs	r1, #150	; 0x96
 800727e:	2072      	movs	r0, #114	; 0x72
 8007280:	f7fd f9ca 	bl	8004618 <BSP_I2C1_ReadReg>
 8007284:	4603      	mov	r3, r0
 8007286:	4a0e      	ldr	r2, [pc, #56]	; (80072c0 <get_optics_data+0x64>)
 8007288:	6013      	str	r3, [r2, #0]
	//color_array[1] = buf[0];

	//read IR
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_IR_ADDR, color_array+4, 2);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	1d1a      	adds	r2, r3, #4
 800728e:	2302      	movs	r3, #2
 8007290:	2198      	movs	r1, #152	; 0x98
 8007292:	2072      	movs	r0, #114	; 0x72
 8007294:	f7fd f9c0 	bl	8004618 <BSP_I2C1_ReadReg>
 8007298:	4603      	mov	r3, r0
 800729a:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <get_optics_data+0x64>)
 800729c:	6013      	str	r3, [r2, #0]

	//read X
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_X_ADDR, color_array+6, 2);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	1d9a      	adds	r2, r3, #6
 80072a2:	2302      	movs	r3, #2
 80072a4:	219a      	movs	r1, #154	; 0x9a
 80072a6:	2072      	movs	r0, #114	; 0x72
 80072a8:	f7fd f9b6 	bl	8004618 <BSP_I2C1_ReadReg>
 80072ac:	4603      	mov	r3, r0
 80072ae:	4a04      	ldr	r2, [pc, #16]	; (80072c0 <get_optics_data+0x64>)
 80072b0:	6013      	str	r3, [r2, #0]

	return ret;
 80072b2:	4b03      	ldr	r3, [pc, #12]	; (80072c0 <get_optics_data+0x64>)
 80072b4:	681b      	ldr	r3, [r3, #0]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	200035b8 	.word	0x200035b8

080072c4 <get_raw_XYZ>:

tcs3430_optics_val get_raw_XYZ(const tcs3430 *sensor) {
 80072c4:	b590      	push	{r4, r7, lr}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]

    tcs3430_optics_val calibed;

    memset(&calibed, 0, sizeof(calibed));
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	220e      	movs	r2, #14
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f010 fb52 	bl	8017980 <memset>

    if ((get_optics_data((uint8_t*)sensor->XYZinfo)) != 0) {
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	3318      	adds	r3, #24
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7ff ffbb 	bl	800725c <get_optics_data>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <get_raw_XYZ+0x3e>
    	return calibed;     // if errors occur when reading from register, return empty calibed
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	461c      	mov	r4, r3
 80072f0:	f107 0308 	add.w	r3, r7, #8
 80072f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80072f6:	6020      	str	r0, [r4, #0]
 80072f8:	6061      	str	r1, [r4, #4]
 80072fa:	60a2      	str	r2, [r4, #8]
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	e043      	b.n	800738a <get_raw_XYZ+0xc6>
    }

    uint16_t temp = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	82fb      	strh	r3, [r7, #22]

    temp = sensor->XYZinfo[1];
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	7e5b      	ldrb	r3, [r3, #25]
 800730a:	82fb      	strh	r3, [r7, #22]
    calibed.Z = temp<<8 | sensor->XYZinfo[0];
 800730c:	8afb      	ldrh	r3, [r7, #22]
 800730e:	021b      	lsls	r3, r3, #8
 8007310:	b21a      	sxth	r2, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	7e1b      	ldrb	r3, [r3, #24]
 8007316:	b21b      	sxth	r3, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	b21b      	sxth	r3, r3
 800731c:	b29b      	uxth	r3, r3
 800731e:	81bb      	strh	r3, [r7, #12]

    temp = sensor->XYZinfo[3];
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	7edb      	ldrb	r3, [r3, #27]
 8007324:	82fb      	strh	r3, [r7, #22]
    calibed.Y = temp<<8 | sensor->XYZinfo[2];
 8007326:	8afb      	ldrh	r3, [r7, #22]
 8007328:	021b      	lsls	r3, r3, #8
 800732a:	b21a      	sxth	r2, r3
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	7e9b      	ldrb	r3, [r3, #26]
 8007330:	b21b      	sxth	r3, r3
 8007332:	4313      	orrs	r3, r2
 8007334:	b21b      	sxth	r3, r3
 8007336:	b29b      	uxth	r3, r3
 8007338:	817b      	strh	r3, [r7, #10]

    temp = sensor->XYZinfo[5];
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	7f5b      	ldrb	r3, [r3, #29]
 800733e:	82fb      	strh	r3, [r7, #22]
    calibed.IR = temp<<8 | sensor->XYZinfo[4];
 8007340:	8afb      	ldrh	r3, [r7, #22]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	b21a      	sxth	r2, r3
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	7f1b      	ldrb	r3, [r3, #28]
 800734a:	b21b      	sxth	r3, r3
 800734c:	4313      	orrs	r3, r2
 800734e:	b21b      	sxth	r3, r3
 8007350:	b29b      	uxth	r3, r3
 8007352:	81fb      	strh	r3, [r7, #14]

    temp = sensor->XYZinfo[7];
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	7fdb      	ldrb	r3, [r3, #31]
 8007358:	82fb      	strh	r3, [r7, #22]
    calibed.X = temp<<8  | sensor->XYZinfo[6];
 800735a:	8afb      	ldrh	r3, [r7, #22]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	b21a      	sxth	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	7f9b      	ldrb	r3, [r3, #30]
 8007364:	b21b      	sxth	r3, r3
 8007366:	4313      	orrs	r3, r2
 8007368:	b21b      	sxth	r3, r3
 800736a:	b29b      	uxth	r3, r3
 800736c:	813b      	strh	r3, [r7, #8]

    calibed.CCT = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	82bb      	strh	r3, [r7, #20]
    calibed.Lux = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	827b      	strh	r3, [r7, #18]
    /*calibed.IR = 0;*/

    return calibed;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	461c      	mov	r4, r3
 800737a:	f107 0308 	add.w	r3, r7, #8
 800737e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007380:	6020      	str	r0, [r4, #0]
 8007382:	6061      	str	r1, [r4, #4]
 8007384:	60a2      	str	r2, [r4, #8]
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	81a3      	strh	r3, [r4, #12]
}
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd90      	pop	{r4, r7, pc}
	...

08007394 <TCS3430_print_color>:

void TCS3430_print_color(const tcs3430_optics_val *color_data) {
 8007394:	b5b0      	push	{r4, r5, r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af04      	add	r7, sp, #16
 800739a:	6078      	str	r0, [r7, #4]
     * RETURN: void
     */

    /* formatting the data to left aligned, zero decimal, width of eight floats */
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	881b      	ldrh	r3, [r3, #0]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 80073a0:	4618      	mov	r0, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	885b      	ldrh	r3, [r3, #2]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 80073a6:	461c      	mov	r4, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	889b      	ldrh	r3, [r3, #4]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 80073ac:	461d      	mov	r5, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	88db      	ldrh	r3, [r3, #6]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 80073b2:	461a      	mov	r2, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	895b      	ldrh	r3, [r3, #10]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 80073b8:	4619      	mov	r1, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	899b      	ldrh	r3, [r3, #12]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 80073be:	9302      	str	r3, [sp, #8]
 80073c0:	9101      	str	r1, [sp, #4]
 80073c2:	9200      	str	r2, [sp, #0]
 80073c4:	462b      	mov	r3, r5
 80073c6:	4622      	mov	r2, r4
 80073c8:	4601      	mov	r1, r0
 80073ca:	4803      	ldr	r0, [pc, #12]	; (80073d8 <TCS3430_print_color+0x44>)
 80073cc:	f010 f98a 	bl	80176e4 <iprintf>
	//fflush(stdout);
	/*
    write(stdout,color_data->X,2);
    write(stdout,color_data->Y,2);
    write(stdout,color_data->Z,2);*/
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bdb0      	pop	{r4, r5, r7, pc}
 80073d8:	08019e10 	.word	0x08019e10

080073dc <begin>:

int32_t begin(tcs3430 *sensor_t)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	softReset(sensor_t->reginfo);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff ff0c 	bl	8007204 <softReset>
	ret = set_ALSInterrupt(sensor_t->reginfo, 0, 0);   //enable als interrupt
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fe68 	bl	80070c8 <set_ALSInterrupt>
 80073f8:	4603      	mov	r3, r0
 80073fa:	4a1a      	ldr	r2, [pc, #104]	; (8007464 <begin+0x88>)
 80073fc:	6013      	str	r3, [r2, #0]
	ret = set_cfg3(sensor_t->reginfo,0,0); // enable als interrupt SC
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	2100      	movs	r1, #0
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fdcf 	bl	8006fa8 <set_cfg3>
 800740a:	4603      	mov	r3, r0
 800740c:	4a15      	ldr	r2, [pc, #84]	; (8007464 <begin+0x88>)
 800740e:	6013      	str	r3, [r2, #0]
	set_IRT_Cycle(sensor_t->reginfo,1); // multiple occurance of ALS interrupt
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2101      	movs	r1, #1
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f8ef 	bl	80075f8 <set_IRT_Cycle>
	Update_ALSThreshold(sensor_t);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f824 	bl	8007468 <Update_ALSThreshold>
	reset_Status(sensor_t->reginfo);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 f954 	bl	80076d0 <reset_Status>
	BSP_I2C1_WriteReg(TCS3430_ADDR, WTIME_ADDR, &(sensor_t->reginfo[2]), 1);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	1c9a      	adds	r2, r3, #2
 800742c:	2301      	movs	r3, #1
 800742e:	2183      	movs	r1, #131	; 0x83
 8007430:	2072      	movs	r0, #114	; 0x72
 8007432:	f7fd f8bf 	bl	80045b4 <BSP_I2C1_WriteReg>

	ret = enable_sensor(sensor_t->reginfo, 0, 1);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	2100      	movs	r1, #0
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff fe8b 	bl	8007158 <enable_sensor>
 8007442:	4603      	mov	r3, r0
 8007444:	4a07      	ldr	r2, [pc, #28]	; (8007464 <begin+0x88>)
 8007446:	6013      	str	r3, [r2, #0]
	ret = get_data(sensor_t->reginfo);//copy from sensor
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff fc68 	bl	8006d20 <get_data>
 8007450:	4603      	mov	r3, r0
 8007452:	4a04      	ldr	r2, [pc, #16]	; (8007464 <begin+0x88>)
 8007454:	6013      	str	r3, [r2, #0]


	return ret;
 8007456:	4b03      	ldr	r3, [pc, #12]	; (8007464 <begin+0x88>)
 8007458:	681b      	ldr	r3, [r3, #0]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	200035b8 	.word	0x200035b8

08007468 <Update_ALSThreshold>:
}
int MaxV(uint16_t x, uint16_t y) {
    return x < y ? x : y;
}

void Update_ALSThreshold(tcs3430 *sensor_t){
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b089      	sub	sp, #36	; 0x24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6178      	str	r0, [r7, #20]
	XYZ_data = get_raw_XYZ(sensor_t);
 8007470:	4c23      	ldr	r4, [pc, #140]	; (8007500 <Update_ALSThreshold+0x98>)
 8007472:	463b      	mov	r3, r7
 8007474:	6979      	ldr	r1, [r7, #20]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff ff24 	bl	80072c4 <get_raw_XYZ>
 800747c:	4623      	mov	r3, r4
 800747e:	463c      	mov	r4, r7
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	6861      	ldr	r1, [r4, #4]
 8007484:	68a2      	ldr	r2, [r4, #8]
 8007486:	c307      	stmia	r3!, {r0, r1, r2}
 8007488:	89a2      	ldrh	r2, [r4, #12]
 800748a:	801a      	strh	r2, [r3, #0]
	//TODO: incoperate the above into the following
	int temp =XYZ_data.Z;
 800748c:	4b1c      	ldr	r3, [pc, #112]	; (8007500 <Update_ALSThreshold+0x98>)
 800748e:	889b      	ldrh	r3, [r3, #4]
 8007490:	61fb      	str	r3, [r7, #28]
	if (temp<Range){
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	2b00      	cmp	r3, #0
 8007496:	dc02      	bgt.n	800749e <Update_ALSThreshold+0x36>
		temp = Range;
 8007498:	2301      	movs	r3, #1
 800749a:	61fb      	str	r3, [r7, #28]
 800749c:	e007      	b.n	80074ae <Update_ALSThreshold+0x46>
	}else if ((temp+Range)>65525){
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 80074a4:	4293      	cmp	r3, r2
 80074a6:	dd02      	ble.n	80074ae <Update_ALSThreshold+0x46>
		temp = 65525-Range;
 80074a8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80074ac:	61fb      	str	r3, [r7, #28]
	}
	set_ALS_THR_LOW(sensor_t->reginfo,temp-Range);
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	4619      	mov	r1, r3
 80074ba:	4610      	mov	r0, r2
 80074bc:	f000 f830 	bl	8007520 <set_ALS_THR_LOW>
	set_ALS_THR_HIGH(sensor_t->reginfo,temp+Range);
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3301      	adds	r3, #1
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f000 f85d 	bl	800758c <set_ALS_THR_HIGH>
	printf("\n\rNew Low:%d New High:%d\n\r",temp-Range,temp+Range);
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	1e59      	subs	r1, r3, #1
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	3301      	adds	r3, #1
 80074da:	461a      	mov	r2, r3
 80074dc:	4809      	ldr	r0, [pc, #36]	; (8007504 <Update_ALSThreshold+0x9c>)
 80074de:	f010 f901 	bl	80176e4 <iprintf>
	reset_Status(sensor_t->reginfo);
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 f8f3 	bl	80076d0 <reset_Status>
	set_ALSInterrupt(sensor_t->reginfo, 1, 0);   //enable als interrupt
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2200      	movs	r2, #0
 80074ee:	2101      	movs	r1, #1
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fde9 	bl	80070c8 <set_ALSInterrupt>
}
 80074f6:	bf00      	nop
 80074f8:	3724      	adds	r7, #36	; 0x24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd90      	pop	{r4, r7, pc}
 80074fe:	bf00      	nop
 8007500:	200035a8 	.word	0x200035a8
 8007504:	08019e48 	.word	0x08019e48

08007508 <Color_Init>:



void Color_Init(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
	BSP_I2C1_Init();
 800750c:	f7fc ffec 	bl	80044e8 <BSP_I2C1_Init>
	begin(&sensor);
 8007510:	4802      	ldr	r0, [pc, #8]	; (800751c <Color_Init+0x14>)
 8007512:	f7ff ff63 	bl	80073dc <begin>
}
 8007516:	bf00      	nop
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20003588 	.word	0x20003588

08007520 <set_ALS_THR_LOW>:
	TCS3430_print_color(&XYZ_data);

}

void set_ALS_THR_LOW(uint8_t *reginfo, uint16_t val)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	807b      	strh	r3, [r7, #2]
	if(val > 65525)
 800752c:	887b      	ldrh	r3, [r7, #2]
 800752e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007532:	4293      	cmp	r3, r2
 8007534:	d824      	bhi.n	8007580 <set_ALS_THR_LOW+0x60>
	{
		return;
	}

	uint16_t value = val;
 8007536:	887b      	ldrh	r3, [r7, #2]
 8007538:	81fb      	strh	r3, [r7, #14]

	uint8_t low = value;
 800753a:	89fb      	ldrh	r3, [r7, #14]
 800753c:	737b      	strb	r3, [r7, #13]
	reginfo[3] = low;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3303      	adds	r3, #3
 8007542:	7b7a      	ldrb	r2, [r7, #13]
 8007544:	701a      	strb	r2, [r3, #0]

	uint8_t high = value >> 8;
 8007546:	89fb      	ldrh	r3, [r7, #14]
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	b29b      	uxth	r3, r3
 800754c:	733b      	strb	r3, [r7, #12]
	reginfo[4] = high;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3304      	adds	r3, #4
 8007552:	7b3a      	ldrb	r2, [r7, #12]
 8007554:	701a      	strb	r2, [r3, #0]

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AILTL_ADDR, reginfo+3, 1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	1cda      	adds	r2, r3, #3
 800755a:	2301      	movs	r3, #1
 800755c:	2184      	movs	r1, #132	; 0x84
 800755e:	2072      	movs	r0, #114	; 0x72
 8007560:	f7fd f828 	bl	80045b4 <BSP_I2C1_WriteReg>
 8007564:	4603      	mov	r3, r0
 8007566:	4a08      	ldr	r2, [pc, #32]	; (8007588 <set_ALS_THR_LOW+0x68>)
 8007568:	6013      	str	r3, [r2, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AILTH_ADDR, reginfo+4, 1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	1d1a      	adds	r2, r3, #4
 800756e:	2301      	movs	r3, #1
 8007570:	2185      	movs	r1, #133	; 0x85
 8007572:	2072      	movs	r0, #114	; 0x72
 8007574:	f7fd f81e 	bl	80045b4 <BSP_I2C1_WriteReg>
 8007578:	4603      	mov	r3, r0
 800757a:	4a03      	ldr	r2, [pc, #12]	; (8007588 <set_ALS_THR_LOW+0x68>)
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	e000      	b.n	8007582 <set_ALS_THR_LOW+0x62>
		return;
 8007580:	bf00      	nop


}
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	200035b8 	.word	0x200035b8

0800758c <set_ALS_THR_HIGH>:

void set_ALS_THR_HIGH(uint8_t *reginfo, uint16_t val)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	807b      	strh	r3, [r7, #2]
	if(val > 65525)
 8007598:	887b      	ldrh	r3, [r7, #2]
 800759a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800759e:	4293      	cmp	r3, r2
 80075a0:	d824      	bhi.n	80075ec <set_ALS_THR_HIGH+0x60>
	{
		return;
	}
	uint16_t value = val;
 80075a2:	887b      	ldrh	r3, [r7, #2]
 80075a4:	81fb      	strh	r3, [r7, #14]

	uint8_t low = value;
 80075a6:	89fb      	ldrh	r3, [r7, #14]
 80075a8:	737b      	strb	r3, [r7, #13]
	reginfo[5] = low;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3305      	adds	r3, #5
 80075ae:	7b7a      	ldrb	r2, [r7, #13]
 80075b0:	701a      	strb	r2, [r3, #0]

	uint8_t high = value >> 8;
 80075b2:	89fb      	ldrh	r3, [r7, #14]
 80075b4:	0a1b      	lsrs	r3, r3, #8
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	733b      	strb	r3, [r7, #12]
	reginfo[6] = high;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3306      	adds	r3, #6
 80075be:	7b3a      	ldrb	r2, [r7, #12]
 80075c0:	701a      	strb	r2, [r3, #0]

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AIHTL_ADDR, reginfo+5, 1);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1d5a      	adds	r2, r3, #5
 80075c6:	2301      	movs	r3, #1
 80075c8:	2186      	movs	r1, #134	; 0x86
 80075ca:	2072      	movs	r0, #114	; 0x72
 80075cc:	f7fc fff2 	bl	80045b4 <BSP_I2C1_WriteReg>
 80075d0:	4603      	mov	r3, r0
 80075d2:	4a08      	ldr	r2, [pc, #32]	; (80075f4 <set_ALS_THR_HIGH+0x68>)
 80075d4:	6013      	str	r3, [r2, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AIHTH_ADDR, reginfo+6, 1);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	1d9a      	adds	r2, r3, #6
 80075da:	2301      	movs	r3, #1
 80075dc:	2187      	movs	r1, #135	; 0x87
 80075de:	2072      	movs	r0, #114	; 0x72
 80075e0:	f7fc ffe8 	bl	80045b4 <BSP_I2C1_WriteReg>
 80075e4:	4603      	mov	r3, r0
 80075e6:	4a03      	ldr	r2, [pc, #12]	; (80075f4 <set_ALS_THR_HIGH+0x68>)
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e000      	b.n	80075ee <set_ALS_THR_HIGH+0x62>
		return;
 80075ec:	bf00      	nop


}
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	200035b8 	.word	0x200035b8

080075f8 <set_IRT_Cycle>:

void set_IRT_Cycle(uint8_t *reginfo, uint8_t cycle)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
	if(cycle > 15)
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	2b0f      	cmp	r3, #15
 8007608:	d901      	bls.n	800760e <set_IRT_Cycle+0x16>
	{
		cycle = 15;
 800760a:	230f      	movs	r3, #15
 800760c:	70fb      	strb	r3, [r7, #3]
	}
	reginfo[7] = cycle;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3307      	adds	r3, #7
 8007612:	78fa      	ldrb	r2, [r7, #3]
 8007614:	701a      	strb	r2, [r3, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, PERS_ADDR, reginfo+7, 1);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	1dda      	adds	r2, r3, #7
 800761a:	2301      	movs	r3, #1
 800761c:	218c      	movs	r1, #140	; 0x8c
 800761e:	2072      	movs	r0, #114	; 0x72
 8007620:	f7fc ffc8 	bl	80045b4 <BSP_I2C1_WriteReg>
 8007624:	4603      	mov	r3, r0
 8007626:	4a03      	ldr	r2, [pc, #12]	; (8007634 <set_IRT_Cycle+0x3c>)
 8007628:	6013      	str	r3, [r2, #0]


}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	200035b8 	.word	0x200035b8

08007638 <TCS3430_print_reg>:

void TCS3430_print_reg(tcs3430 *sensor_t) {
 8007638:	b580      	push	{r7, lr}
 800763a:	b09c      	sub	sp, #112	; 0x70
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	{

		int addr[] = {0x80, 0x81, 0x83, 0x84, 0x85, 0x86, 0x87, 0x8C,
 8007640:	4a20      	ldr	r2, [pc, #128]	; (80076c4 <TCS3430_print_reg+0x8c>)
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	4611      	mov	r1, r2
 8007648:	2264      	movs	r2, #100	; 0x64
 800764a:	4618      	mov	r0, r3
 800764c:	f010 fa17 	bl	8017a7e <memcpy>
					0x8D, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
					0x98, 0x99, 0x9A, 0x9B, 0x9F, 0xAB, 0xD6, 0xDD};


		for(int i = 0; i < 25; i++)
 8007650:	2300      	movs	r3, #0
 8007652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007654:	e022      	b.n	800769c <TCS3430_print_reg+0x64>
		{
			BSP_I2C1_ReadReg(TCS3430_ADDR, addr[i], &(sensor_t->reginfo[i]), 1);
 8007656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	3370      	adds	r3, #112	; 0x70
 800765c:	443b      	add	r3, r7
 800765e:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8007662:	b299      	uxth	r1, r3
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007668:	441a      	add	r2, r3
 800766a:	2301      	movs	r3, #1
 800766c:	2072      	movs	r0, #114	; 0x72
 800766e:	f7fc ffd3 	bl	8004618 <BSP_I2C1_ReadReg>
			printf("%x---%d---%x\n\r",addr[i],i,(sensor_t->reginfo[i]));
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	3370      	adds	r3, #112	; 0x70
 8007678:	443b      	add	r3, r7
 800767a:	f853 1c68 	ldr.w	r1, [r3, #-104]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007682:	4413      	add	r3, r2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007688:	480f      	ldr	r0, [pc, #60]	; (80076c8 <TCS3430_print_reg+0x90>)
 800768a:	f010 f82b 	bl	80176e4 <iprintf>
			if(ret != BSP_ERROR_NONE) break;
 800768e:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <TCS3430_print_reg+0x94>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <TCS3430_print_reg+0x6c>
		for(int i = 0; i < 25; i++)
 8007696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007698:	3301      	adds	r3, #1
 800769a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800769c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769e:	2b18      	cmp	r3, #24
 80076a0:	ddd9      	ble.n	8007656 <TCS3430_print_reg+0x1e>
 80076a2:	e000      	b.n	80076a6 <TCS3430_print_reg+0x6e>
			if(ret != BSP_ERROR_NONE) break;
 80076a4:	bf00      	nop
		}
		ret = BSP_I2C1_WriteReg(TCS3430_ADDR, STATUS_ADDR, &(sensor_t->reginfo[12]), 0x10);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f103 020c 	add.w	r2, r3, #12
 80076ac:	2310      	movs	r3, #16
 80076ae:	2193      	movs	r1, #147	; 0x93
 80076b0:	2072      	movs	r0, #114	; 0x72
 80076b2:	f7fc ff7f 	bl	80045b4 <BSP_I2C1_WriteReg>
 80076b6:	4603      	mov	r3, r0
 80076b8:	4a04      	ldr	r2, [pc, #16]	; (80076cc <TCS3430_print_reg+0x94>)
 80076ba:	6013      	str	r3, [r2, #0]

	}

}
 80076bc:	bf00      	nop
 80076be:	3770      	adds	r7, #112	; 0x70
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	08019e74 	.word	0x08019e74
 80076c8:	08019e64 	.word	0x08019e64
 80076cc:	200035b8 	.word	0x200035b8

080076d0 <reset_Status>:

int32_t reset_Status(uint8_t *reginfo)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	reginfo[12] = 0xFF;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	330c      	adds	r3, #12
 80076dc:	22ff      	movs	r2, #255	; 0xff
 80076de:	701a      	strb	r2, [r3, #0]

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, STATUS_ADDR, reginfo+12, 1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f103 020c 	add.w	r2, r3, #12
 80076e6:	2301      	movs	r3, #1
 80076e8:	2193      	movs	r1, #147	; 0x93
 80076ea:	2072      	movs	r0, #114	; 0x72
 80076ec:	f7fc ff62 	bl	80045b4 <BSP_I2C1_WriteReg>
 80076f0:	4603      	mov	r3, r0
 80076f2:	4a04      	ldr	r2, [pc, #16]	; (8007704 <reset_Status+0x34>)
 80076f4:	6013      	str	r3, [r2, #0]

	return ret;
 80076f6:	4b03      	ldr	r3, [pc, #12]	; (8007704 <reset_Status+0x34>)
 80076f8:	681b      	ldr	r3, [r3, #0]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	200035b8 	.word	0x200035b8

08007708 <colordiff>:

void colordiff (tcs3430_optics_val base, tcs3430_optics_val current, float * delta_X, float * delta_Y){
 8007708:	b490      	push	{r4, r7}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	463c      	mov	r4, r7
 8007710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //calculate cie color
    float base_x,base_y,curr_x,curr_y;
    base_x = (float)base.X/(float)(base.X+base.Y+base.Z)*10;
 8007714:	883b      	ldrh	r3, [r7, #0]
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	883b      	ldrh	r3, [r7, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	887b      	ldrh	r3, [r7, #2]
 8007724:	4413      	add	r3, r2
 8007726:	88ba      	ldrh	r2, [r7, #4]
 8007728:	4413      	add	r3, r2
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007736:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800773a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800773e:	edc7 7a07 	vstr	s15, [r7, #28]
    base_y = (float)base.Y/(float)(base.X+base.Y+base.Z)*10;
 8007742:	887b      	ldrh	r3, [r7, #2]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774c:	883b      	ldrh	r3, [r7, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	887b      	ldrh	r3, [r7, #2]
 8007752:	4413      	add	r3, r2
 8007754:	88ba      	ldrh	r2, [r7, #4]
 8007756:	4413      	add	r3, r2
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007764:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800776c:	edc7 7a06 	vstr	s15, [r7, #24]
    curr_x = (float)current.X/(float)(current.X+current.Y+current.Z)*10;
 8007770:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007772:	ee07 3a90 	vmov	s15, r3
 8007776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800777a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800777c:	461a      	mov	r2, r3
 800777e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007780:	4413      	add	r3, r2
 8007782:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007784:	4413      	add	r3, r2
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800778e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007792:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800779a:	edc7 7a05 	vstr	s15, [r7, #20]
    curr_y = (float)current.Y/(float)(current.X+current.Y+current.Z)*10;
 800779e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077aa:	461a      	mov	r2, r3
 80077ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80077ae:	4413      	add	r3, r2
 80077b0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80077b2:	4413      	add	r3, r2
 80077b4:	ee07 3a90 	vmov	s15, r3
 80077b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80077c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077c8:	edc7 7a04 	vstr	s15, [r7, #16]


    *delta_X = curr_x - base_x;//calculate frame deltaX
 80077cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80077d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80077d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077da:	edc3 7a00 	vstr	s15, [r3]
    *delta_Y = curr_y - base_y;//calculate frame deltaY
 80077de:	ed97 7a04 	vldr	s14, [r7, #16]
 80077e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80077e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ec:	edc3 7a00 	vstr	s15, [r3]
}
 80077f0:	bf00      	nop
 80077f2:	3720      	adds	r7, #32
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bc90      	pop	{r4, r7}
 80077f8:	4770      	bx	lr

080077fa <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	4608      	mov	r0, r1
 8007804:	4611      	mov	r1, r2
 8007806:	461a      	mov	r2, r3
 8007808:	4603      	mov	r3, r0
 800780a:	70fb      	strb	r3, [r7, #3]
 800780c:	460b      	mov	r3, r1
 800780e:	70bb      	strb	r3, [r7, #2]
 8007810:	4613      	mov	r3, r2
 8007812:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 800781c:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	8839      	ldrh	r1, [r7, #0]
 8007828:	f002 f9fc 	bl	8009c24 <RdMulti>
 800782c:	4603      	mov	r3, r0
 800782e:	461a      	mov	r2, r3
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	4313      	orrs	r3, r2
 8007834:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	210a      	movs	r1, #10
 800783a:	4618      	mov	r0, r3
 800783c:	f002 fa3f 	bl	8009cbe <WaitMs>
 8007840:	4603      	mov	r3, r0
 8007842:	461a      	mov	r2, r3
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	4313      	orrs	r3, r2
 8007848:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2bc7      	cmp	r3, #199	; 0xc7
 800784e:	d904      	bls.n	800785a <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	73fb      	strb	r3, [r7, #15]
			break;
 8007858:	e01a      	b.n	8007890 <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d909      	bls.n	8007874 <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8007866:	2b7e      	cmp	r3, #126	; 0x7e
 8007868:	d904      	bls.n	8007874 <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007870:	73fb      	strb	r3, [r7, #15]
			break;
 8007872:	e00d      	b.n	8007890 <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	3301      	adds	r3, #1
 8007878:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 800787a:	78bb      	ldrb	r3, [r7, #2]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	4413      	add	r3, r2
 8007880:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8007884:	7e3b      	ldrb	r3, [r7, #24]
 8007886:	4013      	ands	r3, r2
 8007888:	b2db      	uxtb	r3, r3
 800788a:	7f3a      	ldrb	r2, [r7, #28]
 800788c:	429a      	cmp	r2, r3
 800788e:	d1c5      	bne.n	800781c <_vl53l8cx_poll_for_answer+0x22>

	return status;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f107 020b 	add.w	r2, r7, #11
 80078b0:	2106      	movs	r1, #6
 80078b2:	4618      	mov	r0, r3
 80078b4:	f002 f974 	bl	8009ba0 <RdByte>
 80078b8:	4603      	mov	r3, r0
 80078ba:	461a      	mov	r2, r3
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4313      	orrs	r3, r2
 80078c0:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	b25b      	sxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da10      	bge.n	80078ec <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f107 020a 	add.w	r2, r7, #10
 80078d0:	2107      	movs	r1, #7
 80078d2:	4618      	mov	r0, r3
 80078d4:	f002 f964 	bl	8009ba0 <RdByte>
 80078d8:	4603      	mov	r3, r0
 80078da:	461a      	mov	r2, r3
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	4313      	orrs	r3, r2
 80078e0:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 80078e2:	7abb      	ldrb	r3, [r7, #10]
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d111      	bne.n	8007910 <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)WaitMs(&(p_dev->platform), 1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2101      	movs	r1, #1
 80078f0:	4618      	mov	r0, r3
 80078f2:	f002 f9e4 	bl	8009cbe <WaitMs>
		timeout++;
 80078f6:	89bb      	ldrh	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 8007906:	89bb      	ldrh	r3, [r7, #12]
 8007908:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800790c:	d3cd      	bcc.n	80078aa <_vl53l8cx_poll_for_mcu_boot+0x10>
 800790e:	e002      	b.n	8007916 <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 8007910:	bf00      	nop
 8007912:	e000      	b.n	8007916 <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 8007914:	bf00      	nop

   return status;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b0ea      	sub	sp, #424	; 0x1a8
 8007924:	af02      	add	r7, sp, #8
 8007926:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800792a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800792e:	6018      	str	r0, [r3, #0]
 8007930:	460a      	mov	r2, r1
 8007932:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007936:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 800793a:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8007942:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007946:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800794a:	4ad9      	ldr	r2, [pc, #868]	; (8007cb0 <_vl53l8cx_send_offset_data+0x390>)
 800794c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007950:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8007954:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007958:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800795c:	4ad5      	ldr	r2, [pc, #852]	; (8007cb4 <_vl53l8cx_send_offset_data+0x394>)
 800795e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007962:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8007966:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800796a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 8007974:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007978:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8007980:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007984:	4619      	mov	r1, r3
 8007986:	f010 f87a 	bl	8017a7e <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 800798a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800798e:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b10      	cmp	r3, #16
 8007996:	f040 8122 	bne.w	8007bde <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800799a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800799e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 80079a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80079b0:	cb03      	ldmia	r3!, {r0, r1}
 80079b2:	6010      	str	r0, [r2, #0]
 80079b4:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 80079b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80079c4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80079c8:	4618      	mov	r0, r3
 80079ca:	f002 f942 	bl	8009c52 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 80079ce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079d2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 80079dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80079e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079e4:	4618      	mov	r0, r3
 80079e6:	f010 f84a 	bl	8017a7e <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 80079ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80079ee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 80079f8:	f107 0318 	add.w	r3, r7, #24
 80079fc:	2280      	movs	r2, #128	; 0x80
 80079fe:	4618      	mov	r0, r3
 8007a00:	f010 f83d 	bl	8017a7e <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8007a04:	2300      	movs	r3, #0
 8007a06:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007a0a:	e0ac      	b.n	8007b66 <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8007a12:	e09c      	b.n	8007b4e <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8007a14:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8007a18:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	4413      	add	r3, r2
 8007a20:	005a      	lsls	r2, r3, #1
 8007a22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8007a2e:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007a32:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	440b      	add	r3, r1
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	1c59      	adds	r1, r3, #1
 8007a3e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a4a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8007a4c:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007a50:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	440b      	add	r3, r1
 8007a58:	3304      	adds	r3, #4
 8007a5a:	0059      	lsls	r1, r3, #1
 8007a5c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a68:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8007a6a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007a6e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	440b      	add	r3, r1
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	f103 0109 	add.w	r1, r3, #9
 8007a7c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a88:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8007a8a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007a8e:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8007a92:	0092      	lsls	r2, r2, #2
 8007a94:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8007a96:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8007a98:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8007aa4:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8007aa8:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	4413      	add	r3, r2
 8007ab0:	005a      	lsls	r2, r3, #1
 8007ab2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ab6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007aba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007abe:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8007ac0:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8007ac4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	4413      	add	r3, r2
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ad4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007ad8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007adc:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8007ade:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007ae2:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8007ae6:	00d2      	lsls	r2, r2, #3
 8007ae8:	440a      	add	r2, r1
 8007aea:	3204      	adds	r2, #4
 8007aec:	0051      	lsls	r1, r2, #1
 8007aee:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8007af2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8007af6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8007afa:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8007afc:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007b00:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8007b04:	00d2      	lsls	r2, r2, #3
 8007b06:	440a      	add	r2, r1
 8007b08:	0052      	lsls	r2, r2, #1
 8007b0a:	f102 0109 	add.w	r1, r2, #9
 8007b0e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8007b12:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8007b16:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8007b1a:	4413      	add	r3, r2
                                  /(int16_t)4;
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	da00      	bge.n	8007b22 <_vl53l8cx_send_offset_data+0x202>
 8007b20:	3303      	adds	r3, #3
 8007b22:	109b      	asrs	r3, r3, #2
 8007b24:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8007b26:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8007b2a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	b209      	sxth	r1, r1
 8007b34:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007b3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8007b40:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	3301      	adds	r3, #1
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8007b4e:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	f77f af5e 	ble.w	8007a14 <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8007b58:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	3301      	adds	r3, #1
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007b66:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	f77f af4e 	ble.w	8007a0c <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8007b70:	f107 0318 	add.w	r3, r7, #24
 8007b74:	3320      	adds	r3, #32
 8007b76:	2260      	movs	r2, #96	; 0x60
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f00f ff00 	bl	8017980 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8007b80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007b84:	3340      	adds	r3, #64	; 0x40
 8007b86:	22c0      	movs	r2, #192	; 0xc0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f00f fef8 	bl	8017980 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8007b90:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8007b9e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8007ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f00f ff69 	bl	8017a7e <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8007bac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bb0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8007bba:	f107 0118 	add.w	r1, r7, #24
 8007bbe:	2280      	movs	r2, #128	; 0x80
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f00f ff5c 	bl	8017a7e <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8007bc6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bca:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007bd4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f002 f83a 	bl	8009c52 <SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8007bde:	2300      	movs	r3, #0
 8007be0:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8007be4:	e01b      	b.n	8007c1e <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8007be6:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8007bea:	f103 0208 	add.w	r2, r3, #8
 8007bee:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8007bf2:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8007bf6:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 8007bfa:	6809      	ldr	r1, [r1, #0]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 8007c02:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8007c06:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	460a      	mov	r2, r1
 8007c10:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8007c14:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8007c18:	3301      	adds	r3, #1
 8007c1a:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8007c1e:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8007c22:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8007c26:	d3de      	bcc.n	8007be6 <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8007c28:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c2c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 8007c36:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c3a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007c3e:	cb03      	ldmia	r3!, {r0, r1}
 8007c40:	6010      	str	r0, [r2, #0]
 8007c42:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8007c44:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c48:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c52:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8007c5c:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8007c60:	f642 6118 	movw	r1, #11800	; 0x2e18
 8007c64:	f001 ffc7 	bl	8009bf6 <WrMulti>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8007c76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c7a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8007c7e:	2303      	movs	r3, #3
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	23ff      	movs	r3, #255	; 0xff
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	2104      	movs	r1, #4
 8007c8e:	6800      	ldr	r0, [r0, #0]
 8007c90:	f7ff fdb3 	bl	80077fa <_vl53l8cx_poll_for_answer>
 8007c94:	4603      	mov	r3, r0
 8007c96:	461a      	mov	r2, r3
 8007c98:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8007ca2:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	08019ed8 	.word	0x08019ed8
 8007cb4:	08019ee0 	.word	0x08019ee0

08007cb8 <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b0ca      	sub	sp, #296	; 0x128
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007cc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007cc6:	6018      	str	r0, [r3, #0]
 8007cc8:	460a      	mov	r2, r1
 8007cca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007cce:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007cd2:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8007cda:	4a9a      	ldr	r2, [pc, #616]	; (8007f44 <_vl53l8cx_send_xtalk_data+0x28c>)
 8007cdc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ce4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8007ce8:	4a97      	ldr	r2, [pc, #604]	; (8007f48 <_vl53l8cx_send_xtalk_data+0x290>)
 8007cea:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cf2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8007cf6:	4b95      	ldr	r3, [pc, #596]	; (8007f4c <_vl53l8cx_send_xtalk_data+0x294>)
 8007cf8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8007cfc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 8007d0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d18:	f44f 7242 	mov.w	r2, #776	; 0x308
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	f00f feae 	bl	8017a7e <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 8007d22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d26:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	f040 80d2 	bne.w	8007ed6 <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8007d32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8007d40:	461a      	mov	r2, r3
 8007d42:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007d46:	cb03      	ldmia	r3!, {r0, r1}
 8007d48:	6010      	str	r0, [r2, #0]
 8007d4a:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8007d4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007d60:	cb03      	ldmia	r3!, {r0, r1}
 8007d62:	6010      	str	r0, [r2, #0]
 8007d64:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8007d66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007d74:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 ff6a 	bl	8009c52 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8007d7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007d82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f203 5144 	addw	r1, r3, #1348	; 0x544
 8007d8c:	f107 0308 	add.w	r3, r7, #8
 8007d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d94:	4618      	mov	r0, r3
 8007d96:	f00f fe72 	bl	8017a7e <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007da0:	e05d      	b.n	8007e5e <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8007da8:	e04e      	b.n	8007e48 <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8007daa:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 8007dae:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	4413      	add	r3, r2
 8007db6:	005a      	lsls	r2, r3, #1
 8007db8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007dbc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007dc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8007dc4:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8007dc8:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	440b      	add	r3, r1
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	1c59      	adds	r1, r3, #1
 8007dd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007dd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007ddc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007de0:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8007de2:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8007de6:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	440b      	add	r3, r1
 8007dee:	3304      	adds	r3, #4
 8007df0:	0059      	lsls	r1, r3, #1
 8007df2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007df6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007dfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dfe:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8007e00:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8007e04:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	440b      	add	r3, r1
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	f103 0109 	add.w	r1, r3, #9
 8007e12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e16:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e1e:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8007e20:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8007e24:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8007e28:	0092      	lsls	r2, r2, #2
 8007e2a:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8007e2c:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8007e2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e32:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8007e3a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	3301      	adds	r3, #1
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8007e48:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	ddac      	ble.n	8007daa <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8007e50:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	3301      	adds	r3, #1
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007e5e:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	dd9d      	ble.n	8007da2 <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8007e66:	f107 0308 	add.w	r3, r7, #8
 8007e6a:	3340      	adds	r3, #64	; 0x40
 8007e6c:	22c0      	movs	r2, #192	; 0xc0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f00f fd85 	bl	8017980 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8007e76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8007e84:	f107 0108 	add.w	r1, r7, #8
 8007e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f00f fdf6 	bl	8017a7e <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8007e92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007ea0:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 fed4 	bl	8009c52 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8007eaa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007eae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8007eb8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007ebc:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8007ebe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ec2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8007ecc:	2204      	movs	r2, #4
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f00f fd55 	bl	8017980 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8007ed6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007eda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ede:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8007ee0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ee4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8007eee:	f44f 7342 	mov.w	r3, #776	; 0x308
 8007ef2:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 8007ef6:	f001 fe7e 	bl	8009bf6 <WrMulti>
 8007efa:	4603      	mov	r3, r0
 8007efc:	461a      	mov	r2, r3
 8007efe:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8007f02:	4313      	orrs	r3, r2
 8007f04:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8007f08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007f0c:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8007f10:	2303      	movs	r3, #3
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	23ff      	movs	r3, #255	; 0xff
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	2104      	movs	r1, #4
 8007f20:	6800      	ldr	r0, [r0, #0]
 8007f22:	f7ff fc6a 	bl	80077fa <_vl53l8cx_poll_for_answer>
 8007f26:	4603      	mov	r3, r0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8007f34:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	08019ee8 	.word	0x08019ee8
 8007f48:	08019ef0 	.word	0x08019ef0
 8007f4c:	0001fca0 	.word	0x0001fca0

08007f50 <vl53l8cx_init>:
	return status;
}

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8007f5c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8007f60:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8007f62:	2301      	movs	r3, #1
 8007f64:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a7e      	ldr	r2, [pc, #504]	; (8008164 <vl53l8cx_init+0x214>)
 8007f6a:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a7e      	ldr	r2, [pc, #504]	; (8008168 <vl53l8cx_init+0x218>)
 8007f70:	619a      	str	r2, [r3, #24]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 fe25 	bl	8009bca <WrByte>
 8007f80:	4603      	mov	r3, r0
 8007f82:	461a      	mov	r2, r3
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	2109      	movs	r1, #9
 8007f90:	4618      	mov	r0, r3
 8007f92:	f001 fe1a 	bl	8009bca <WrByte>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2240      	movs	r2, #64	; 0x40
 8007fa4:	210f      	movs	r1, #15
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f001 fe0f 	bl	8009bca <WrByte>
 8007fac:	4603      	mov	r3, r0
 8007fae:	461a      	mov	r2, r3
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2203      	movs	r2, #3
 8007fba:	210a      	movs	r1, #10
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 fe04 	bl	8009bca <WrByte>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f107 0216 	add.w	r2, r7, #22
 8007fd2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 fde2 	bl	8009ba0 <RdByte>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	210c      	movs	r1, #12
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 fdec 	bl	8009bca <WrByte>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f240 1101 	movw	r1, #257	; 0x101
 8008004:	4618      	mov	r0, r3
 8008006:	f001 fde0 	bl	8009bca <WrByte>
 800800a:	4603      	mov	r3, r0
 800800c:	461a      	mov	r2, r3
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	4313      	orrs	r3, r2
 8008012:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f44f 7181 	mov.w	r1, #258	; 0x102
 800801c:	4618      	mov	r0, r3
 800801e:	f001 fdd4 	bl	8009bca <WrByte>
 8008022:	4603      	mov	r3, r0
 8008024:	461a      	mov	r2, r3
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	4313      	orrs	r3, r2
 800802a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8008034:	4618      	mov	r0, r3
 8008036:	f001 fdc8 	bl	8009bca <WrByte>
 800803a:	4603      	mov	r3, r0
 800803c:	461a      	mov	r2, r3
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	4313      	orrs	r3, r2
 8008042:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f244 0102 	movw	r1, #16386	; 0x4002
 800804c:	4618      	mov	r0, r3
 800804e:	f001 fdbc 	bl	8009bca <WrByte>
 8008052:	4603      	mov	r3, r0
 8008054:	461a      	mov	r2, r3
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	4313      	orrs	r3, r2
 800805a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f244 0102 	movw	r1, #16386	; 0x4002
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fdb0 	bl	8009bca <WrByte>
 800806a:	4603      	mov	r3, r0
 800806c:	461a      	mov	r2, r3
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	4313      	orrs	r3, r2
 8008072:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2203      	movs	r2, #3
 8008078:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800807c:	4618      	mov	r0, r3
 800807e:	f001 fda4 	bl	8009bca <WrByte>
 8008082:	4603      	mov	r3, r0
 8008084:	461a      	mov	r2, r3
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	4313      	orrs	r3, r2
 800808a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f240 1103 	movw	r1, #259	; 0x103
 8008094:	4618      	mov	r0, r3
 8008096:	f001 fd98 	bl	8009bca <WrByte>
 800809a:	4603      	mov	r3, r0
 800809c:	461a      	mov	r2, r3
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	210c      	movs	r1, #12
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 fd8d 	bl	8009bca <WrByte>
 80080b0:	4603      	mov	r3, r0
 80080b2:	461a      	mov	r2, r3
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2243      	movs	r2, #67	; 0x43
 80080be:	210f      	movs	r1, #15
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 fd82 	bl	8009bca <WrByte>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2101      	movs	r1, #1
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fdf2 	bl	8009cbe <WaitMs>
 80080da:	4603      	mov	r3, r0
 80080dc:	461a      	mov	r2, r3
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2240      	movs	r2, #64	; 0x40
 80080e8:	210f      	movs	r1, #15
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 fd6d 	bl	8009bca <WrByte>
 80080f0:	4603      	mov	r3, r0
 80080f2:	461a      	mov	r2, r3
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	210a      	movs	r1, #10
 8008100:	4618      	mov	r0, r3
 8008102:	f001 fd62 	bl	8009bca <WrByte>
 8008106:	4603      	mov	r3, r0
 8008108:	461a      	mov	r2, r3
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	4313      	orrs	r3, r2
 800810e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2164      	movs	r1, #100	; 0x64
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fdd2 	bl	8009cbe <WaitMs>
 800811a:	4603      	mov	r3, r0
 800811c:	461a      	mov	r2, r3
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	4313      	orrs	r3, r2
 8008122:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800812c:	4618      	mov	r0, r3
 800812e:	f001 fd4c 	bl	8009bca <WrByte>
 8008132:	4603      	mov	r3, r0
 8008134:	461a      	mov	r2, r3
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	4313      	orrs	r3, r2
 800813a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 800813c:	2301      	movs	r3, #1
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	23ff      	movs	r3, #255	; 0xff
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2306      	movs	r3, #6
 8008146:	2200      	movs	r2, #0
 8008148:	2101      	movs	r1, #1
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff fb55 	bl	80077fa <_vl53l8cx_poll_for_answer>
 8008150:	4603      	mov	r3, r0
 8008152:	461a      	mov	r2, r3
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	4313      	orrs	r3, r2
 8008158:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f040 830c 	bne.w	800877a <vl53l8cx_init+0x82a>
 8008162:	e003      	b.n	800816c <vl53l8cx_init+0x21c>
 8008164:	0802f4cc 	.word	0x0802f4cc
 8008168:	0802f100 	.word	0x0802f100
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	210e      	movs	r1, #14
 8008172:	4618      	mov	r0, r3
 8008174:	f001 fd29 	bl	8009bca <WrByte>
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	4313      	orrs	r3, r2
 8008180:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2202      	movs	r2, #2
 8008186:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800818a:	4618      	mov	r0, r3
 800818c:	f001 fd1d 	bl	8009bca <WrByte>
 8008190:	4603      	mov	r3, r0
 8008192:	461a      	mov	r2, r3
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	4313      	orrs	r3, r2
 8008198:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80081a2:	4618      	mov	r0, r3
 80081a4:	f001 fd11 	bl	8009bca <WrByte>
 80081a8:	4603      	mov	r3, r0
 80081aa:	461a      	mov	r2, r3
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2203      	movs	r2, #3
 80081b6:	2106      	movs	r1, #6
 80081b8:	4618      	mov	r0, r3
 80081ba:	f001 fd06 	bl	8009bca <WrByte>
 80081be:	4603      	mov	r3, r0
 80081c0:	461a      	mov	r2, r3
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80081c8:	2310      	movs	r3, #16
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	2310      	movs	r3, #16
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	2321      	movs	r3, #33	; 0x21
 80081d2:	2200      	movs	r2, #0
 80081d4:	2101      	movs	r1, #1
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff fb0f 	bl	80077fa <_vl53l8cx_poll_for_answer>
 80081dc:	4603      	mov	r3, r0
 80081de:	461a      	mov	r2, r3
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fceb 	bl	8009bca <WrByte>
 80081f4:	4603      	mov	r3, r0
 80081f6:	461a      	mov	r2, r3
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f107 0216 	add.w	r2, r7, #22
 8008204:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008208:	4618      	mov	r0, r3
 800820a:	f001 fcc9 	bl	8009ba0 <RdByte>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	4313      	orrs	r3, r2
 8008216:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	210c      	movs	r1, #12
 800821e:	4618      	mov	r0, r3
 8008220:	f001 fcd3 	bl	8009bca <WrByte>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	4313      	orrs	r3, r2
 800822c:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008236:	4618      	mov	r0, r3
 8008238:	f001 fcc7 	bl	8009bca <WrByte>
 800823c:	4603      	mov	r3, r0
 800823e:	461a      	mov	r2, r3
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	4313      	orrs	r3, r2
 8008244:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f240 1101 	movw	r1, #257	; 0x101
 800824e:	4618      	mov	r0, r3
 8008250:	f001 fcbb 	bl	8009bca <WrByte>
 8008254:	4603      	mov	r3, r0
 8008256:	461a      	mov	r2, r3
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	4313      	orrs	r3, r2
 800825c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f44f 7181 	mov.w	r1, #258	; 0x102
 8008266:	4618      	mov	r0, r3
 8008268:	f001 fcaf 	bl	8009bca <WrByte>
 800826c:	4603      	mov	r3, r0
 800826e:	461a      	mov	r2, r3
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	4313      	orrs	r3, r2
 8008274:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800827e:	4618      	mov	r0, r3
 8008280:	f001 fca3 	bl	8009bca <WrByte>
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	4313      	orrs	r3, r2
 800828c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f244 0102 	movw	r1, #16386	; 0x4002
 8008296:	4618      	mov	r0, r3
 8008298:	f001 fc97 	bl	8009bca <WrByte>
 800829c:	4603      	mov	r3, r0
 800829e:	461a      	mov	r2, r3
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f244 0102 	movw	r1, #16386	; 0x4002
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 fc8b 	bl	8009bca <WrByte>
 80082b4:	4603      	mov	r3, r0
 80082b6:	461a      	mov	r2, r3
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2203      	movs	r2, #3
 80082c2:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80082c6:	4618      	mov	r0, r3
 80082c8:	f001 fc7f 	bl	8009bca <WrByte>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f240 1103 	movw	r1, #259	; 0x103
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 fc73 	bl	8009bca <WrByte>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f244 010f 	movw	r1, #16399	; 0x400f
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fc67 	bl	8009bca <WrByte>
 80082fc:	4603      	mov	r3, r0
 80082fe:	461a      	mov	r2, r3
 8008300:	7dfb      	ldrb	r3, [r7, #23]
 8008302:	4313      	orrs	r3, r2
 8008304:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2243      	movs	r2, #67	; 0x43
 800830a:	f240 211a 	movw	r1, #538	; 0x21a
 800830e:	4618      	mov	r0, r3
 8008310:	f001 fc5b 	bl	8009bca <WrByte>
 8008314:	4603      	mov	r3, r0
 8008316:	461a      	mov	r2, r3
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	4313      	orrs	r3, r2
 800831c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2203      	movs	r2, #3
 8008322:	f240 211a 	movw	r1, #538	; 0x21a
 8008326:	4618      	mov	r0, r3
 8008328:	f001 fc4f 	bl	8009bca <WrByte>
 800832c:	4603      	mov	r3, r0
 800832e:	461a      	mov	r2, r3
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	4313      	orrs	r3, r2
 8008334:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f240 211a 	movw	r1, #538	; 0x21a
 800833e:	4618      	mov	r0, r3
 8008340:	f001 fc43 	bl	8009bca <WrByte>
 8008344:	4603      	mov	r3, r0
 8008346:	461a      	mov	r2, r3
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	4313      	orrs	r3, r2
 800834c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f240 211a 	movw	r1, #538	; 0x21a
 8008356:	4618      	mov	r0, r3
 8008358:	f001 fc37 	bl	8009bca <WrByte>
 800835c:	4603      	mov	r3, r0
 800835e:	461a      	mov	r2, r3
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	4313      	orrs	r3, r2
 8008364:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f240 2119 	movw	r1, #537	; 0x219
 800836e:	4618      	mov	r0, r3
 8008370:	f001 fc2b 	bl	8009bca <WrByte>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	4313      	orrs	r3, r2
 800837c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f240 211b 	movw	r1, #539	; 0x21b
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fc1f 	bl	8009bca <WrByte>
 800838c:	4603      	mov	r3, r0
 800838e:	461a      	mov	r2, r3
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	4313      	orrs	r3, r2
 8008394:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 fc13 	bl	8009bca <WrByte>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f107 0216 	add.w	r2, r7, #22
 80083b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 fbf1 	bl	8009ba0 <RdByte>
 80083be:	4603      	mov	r3, r0
 80083c0:	461a      	mov	r2, r3
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	210c      	movs	r1, #12
 80083ce:	4618      	mov	r0, r3
 80083d0:	f001 fbfb 	bl	8009bca <WrByte>
 80083d4:	4603      	mov	r3, r0
 80083d6:	461a      	mov	r2, r3
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	4313      	orrs	r3, r2
 80083dc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 fbef 	bl	8009bca <WrByte>
 80083ec:	4603      	mov	r3, r0
 80083ee:	461a      	mov	r2, r3
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2207      	movs	r2, #7
 80083fa:	2120      	movs	r1, #32
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 fbe4 	bl	8009bca <WrByte>
 8008402:	4603      	mov	r3, r0
 8008404:	461a      	mov	r2, r3
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	4313      	orrs	r3, r2
 800840a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2206      	movs	r2, #6
 8008410:	2120      	movs	r1, #32
 8008412:	4618      	mov	r0, r3
 8008414:	f001 fbd9 	bl	8009bca <WrByte>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	4313      	orrs	r3, r2
 8008420:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2209      	movs	r2, #9
 8008426:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800842a:	4618      	mov	r0, r3
 800842c:	f001 fbcd 	bl	8009bca <WrByte>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	4313      	orrs	r3, r2
 8008438:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008440:	4ad2      	ldr	r2, [pc, #840]	; (800878c <vl53l8cx_init+0x83c>)
 8008442:	2100      	movs	r1, #0
 8008444:	f001 fbd7 	bl	8009bf6 <WrMulti>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	4313      	orrs	r3, r2
 8008450:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	220a      	movs	r2, #10
 8008456:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800845a:	4618      	mov	r0, r3
 800845c:	f001 fbb5 	bl	8009bca <WrByte>
 8008460:	4603      	mov	r3, r0
 8008462:	461a      	mov	r2, r3
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	4313      	orrs	r3, r2
 8008468:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008470:	4ac7      	ldr	r2, [pc, #796]	; (8008790 <vl53l8cx_init+0x840>)
 8008472:	2100      	movs	r1, #0
 8008474:	f001 fbbf 	bl	8009bf6 <WrMulti>
 8008478:	4603      	mov	r3, r0
 800847a:	461a      	mov	r2, r3
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	4313      	orrs	r3, r2
 8008480:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	220b      	movs	r2, #11
 8008486:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fb9d 	bl	8009bca <WrByte>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	4313      	orrs	r3, r2
 8008498:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80084a0:	4abc      	ldr	r2, [pc, #752]	; (8008794 <vl53l8cx_init+0x844>)
 80084a2:	2100      	movs	r1, #0
 80084a4:	f001 fba7 	bl	8009bf6 <WrMulti>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 fb85 	bl	8009bca <WrByte>
 80084c0:	4603      	mov	r3, r0
 80084c2:	461a      	mov	r2, r3
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80084d2:	4618      	mov	r0, r3
 80084d4:	f001 fb79 	bl	8009bca <WrByte>
 80084d8:	4603      	mov	r3, r0
 80084da:	461a      	mov	r2, r3
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	4313      	orrs	r3, r2
 80084e0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2203      	movs	r2, #3
 80084e6:	2106      	movs	r1, #6
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fb6e 	bl	8009bca <WrByte>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461a      	mov	r2, r3
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80084f8:	2310      	movs	r3, #16
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	2310      	movs	r3, #16
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	2321      	movs	r3, #33	; 0x21
 8008502:	2200      	movs	r2, #0
 8008504:	2101      	movs	r1, #1
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff f977 	bl	80077fa <_vl53l8cx_poll_for_answer>
 800850c:	4603      	mov	r3, r0
 800850e:	461a      	mov	r2, r3
 8008510:	7dfb      	ldrb	r3, [r7, #23]
 8008512:	4313      	orrs	r3, r2
 8008514:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800851e:	4618      	mov	r0, r3
 8008520:	f001 fb53 	bl	8009bca <WrByte>
 8008524:	4603      	mov	r3, r0
 8008526:	461a      	mov	r2, r3
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	4313      	orrs	r3, r2
 800852c:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f107 0216 	add.w	r2, r7, #22
 8008534:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008538:	4618      	mov	r0, r3
 800853a:	f001 fb31 	bl	8009ba0 <RdByte>
 800853e:	4603      	mov	r3, r0
 8008540:	461a      	mov	r2, r3
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	4313      	orrs	r3, r2
 8008546:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	210c      	movs	r1, #12
 800854e:	4618      	mov	r0, r3
 8008550:	f001 fb3b 	bl	8009bca <WrByte>
 8008554:	4603      	mov	r3, r0
 8008556:	461a      	mov	r2, r3
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	4313      	orrs	r3, r2
 800855c:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008566:	4618      	mov	r0, r3
 8008568:	f001 fb2f 	bl	8009bca <WrByte>
 800856c:	4603      	mov	r3, r0
 800856e:	461a      	mov	r2, r3
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	4313      	orrs	r3, r2
 8008574:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800857e:	4618      	mov	r0, r3
 8008580:	f001 fb23 	bl	8009bca <WrByte>
 8008584:	4603      	mov	r3, r0
 8008586:	461a      	mov	r2, r3
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	4313      	orrs	r3, r2
 800858c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f240 1115 	movw	r1, #277	; 0x115
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fb17 	bl	8009bca <WrByte>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2242      	movs	r2, #66	; 0x42
 80085aa:	f44f 718b 	mov.w	r1, #278	; 0x116
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 fb0b 	bl	8009bca <WrByte>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f240 1117 	movw	r1, #279	; 0x117
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 faff 	bl	8009bca <WrByte>
 80085cc:	4603      	mov	r3, r0
 80085ce:	461a      	mov	r2, r3
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	210b      	movs	r1, #11
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 faf4 	bl	8009bca <WrByte>
 80085e2:	4603      	mov	r3, r0
 80085e4:	461a      	mov	r2, r3
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f107 0216 	add.w	r2, r7, #22
 80085f2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80085f6:	4618      	mov	r0, r3
 80085f8:	f001 fad2 	bl	8009ba0 <RdByte>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461a      	mov	r2, r3
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	4313      	orrs	r3, r2
 8008604:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	210c      	movs	r1, #12
 800860c:	4618      	mov	r0, r3
 800860e:	f001 fadc 	bl	8009bca <WrByte>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	4313      	orrs	r3, r2
 800861a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	210b      	movs	r1, #11
 8008622:	4618      	mov	r0, r3
 8008624:	f001 fad1 	bl	8009bca <WrByte>
 8008628:	4603      	mov	r3, r0
 800862a:	461a      	mov	r2, r3
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	4313      	orrs	r3, r2
 8008630:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff f931 	bl	800789a <_vl53l8cx_poll_for_mcu_boot>
 8008638:	4603      	mov	r3, r0
 800863a:	461a      	mov	r2, r3
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	4313      	orrs	r3, r2
 8008640:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	2b00      	cmp	r3, #0
 8008646:	f040 809a 	bne.w	800877e <vl53l8cx_init+0x82e>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2202      	movs	r2, #2
 800864e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008652:	4618      	mov	r0, r3
 8008654:	f001 fab9 	bl	8009bca <WrByte>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	4313      	orrs	r3, r2
 8008660:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	2328      	movs	r3, #40	; 0x28
 8008666:	4a4c      	ldr	r2, [pc, #304]	; (8008798 <vl53l8cx_init+0x848>)
 8008668:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 800866c:	f001 fac3 	bl	8009bf6 <WrMulti>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	4313      	orrs	r3, r2
 8008678:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 800867a:	2302      	movs	r3, #2
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	23ff      	movs	r3, #255	; 0xff
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008686:	2200      	movs	r2, #0
 8008688:	2104      	movs	r1, #4
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff f8b5 	bl	80077fa <_vl53l8cx_poll_for_answer>
 8008690:	4603      	mov	r3, r0
 8008692:	461a      	mov	r2, r3
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	4313      	orrs	r3, r2
 8008698:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 800869a:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 80086a2:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80086a6:	f642 4104 	movw	r1, #11268	; 0x2c04
 80086aa:	f001 fabb 	bl	8009c24 <RdMulti>
 80086ae:	4603      	mov	r3, r0
 80086b0:	461a      	mov	r2, r3
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f103 0020 	add.w	r0, r3, #32
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80086c4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80086c8:	4619      	mov	r1, r3
 80086ca:	f00f f9d8 	bl	8017a7e <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 80086ce:	2110      	movs	r1, #16
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff f925 	bl	8007920 <_vl53l8cx_send_offset_data>
 80086d6:	4603      	mov	r3, r0
 80086d8:	461a      	mov	r2, r3
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	4313      	orrs	r3, r2
 80086de:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80086e6:	4a2d      	ldr	r2, [pc, #180]	; (800879c <vl53l8cx_init+0x84c>)
 80086e8:	4618      	mov	r0, r3
 80086ea:	4611      	mov	r1, r2
 80086ec:	f44f 7342 	mov.w	r3, #776	; 0x308
 80086f0:	461a      	mov	r2, r3
 80086f2:	f00f f9c4 	bl	8017a7e <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 80086f6:	2110      	movs	r1, #16
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff fadd 	bl	8007cb8 <_vl53l8cx_send_xtalk_data>
 80086fe:	4603      	mov	r3, r0
 8008700:	461a      	mov	r2, r3
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	4313      	orrs	r3, r2
 8008706:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699a      	ldr	r2, [r3, #24]
 800870e:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8008712:	f642 4134 	movw	r1, #11316	; 0x2c34
 8008716:	f001 fa6e 	bl	8009bf6 <WrMulti>
 800871a:	4603      	mov	r3, r0
 800871c:	461a      	mov	r2, r3
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	4313      	orrs	r3, r2
 8008722:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8008724:	2303      	movs	r3, #3
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	23ff      	movs	r3, #255	; 0xff
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008730:	2201      	movs	r2, #1
 8008732:	2104      	movs	r1, #4
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff f860 	bl	80077fa <_vl53l8cx_poll_for_answer>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	4313      	orrs	r3, r2
 8008742:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8008744:	f107 0110 	add.w	r1, r7, #16
 8008748:	2304      	movs	r3, #4
 800874a:	f64d 3280 	movw	r2, #56192	; 0xdb80
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 ffbe 	bl	80096d0 <vl53l8cx_dci_write_data>
 8008754:	4603      	mov	r3, r0
 8008756:	461a      	mov	r2, r3
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	4313      	orrs	r3, r2
 800875c:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800875e:	f107 010c 	add.w	r1, r7, #12
 8008762:	2304      	movs	r3, #4
 8008764:	f64d 1264 	movw	r2, #55652	; 0xd964
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 ffb1 	bl	80096d0 <vl53l8cx_dci_write_data>
 800876e:	4603      	mov	r3, r0
 8008770:	461a      	mov	r2, r3
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	4313      	orrs	r3, r2
 8008776:	75fb      	strb	r3, [r7, #23]
 8008778:	e002      	b.n	8008780 <vl53l8cx_init+0x830>
		goto exit;
 800877a:	bf00      	nop
 800877c:	e000      	b.n	8008780 <vl53l8cx_init+0x830>
		goto exit;
 800877e:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	0801a100 	.word	0x0801a100
 8008790:	08022100 	.word	0x08022100
 8008794:	0802a100 	.word	0x0802a100
 8008798:	0802f7d4 	.word	0x0802f7d4
 800879c:	0802f4cc 	.word	0x0802f4cc

080087a0 <vl53l8cx_set_i2c_address>:

uint8_t vl53l8cx_set_i2c_address(
		VL53L8CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80087b8:	4618      	mov	r0, r3
 80087ba:	f001 fa06 	bl	8009bca <WrByte>
 80087be:	4603      	mov	r3, r0
 80087c0:	461a      	mov	r2, r3
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	887b      	ldrh	r3, [r7, #2]
 80087cc:	085b      	lsrs	r3, r3, #1
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	461a      	mov	r2, r3
 80087d4:	2104      	movs	r1, #4
 80087d6:	f001 f9f8 	bl	8009bca <WrByte>
 80087da:	4603      	mov	r3, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	887a      	ldrh	r2, [r7, #2]
 80087e8:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2202      	movs	r2, #2
 80087ee:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 f9e9 	bl	8009bca <WrByte>
 80087f8:	4603      	mov	r3, r0
 80087fa:	461a      	mov	r2, r3
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	4313      	orrs	r3, r2
 8008800:	73fb      	strb	r3, [r7, #15]

	return status;
 8008802:	7bfb      	ldrb	r3, [r7, #15]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <vl53l8cx_get_power_mode>:

uint8_t vl53l8cx_get_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008822:	4618      	mov	r0, r3
 8008824:	f001 f9d1 	bl	8009bca <WrByte>
 8008828:	4603      	mov	r3, r0
 800882a:	461a      	mov	r2, r3
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4313      	orrs	r3, r2
 8008830:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f107 020e 	add.w	r2, r7, #14
 8008838:	2109      	movs	r1, #9
 800883a:	4618      	mov	r0, r3
 800883c:	f001 f9b0 	bl	8009ba0 <RdByte>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	4313      	orrs	r3, r2
 8008848:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b02      	cmp	r3, #2
 800884e:	d005      	beq.n	800885c <vl53l8cx_get_power_mode+0x50>
 8008850:	2b04      	cmp	r3, #4
 8008852:	d107      	bne.n	8008864 <vl53l8cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L8CX_POWER_MODE_WAKEUP;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2201      	movs	r2, #1
 8008858:	701a      	strb	r2, [r3, #0]
			break;
 800885a:	e009      	b.n	8008870 <vl53l8cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2200      	movs	r2, #0
 8008860:	701a      	strb	r2, [r3, #0]

			break;
 8008862:	e005      	b.n	8008870 <vl53l8cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	701a      	strb	r2, [r3, #0]
			status = VL53L8CX_STATUS_ERROR;
 800886a:	23ff      	movs	r3, #255	; 0xff
 800886c:	73fb      	strb	r3, [r7, #15]
			break;
 800886e:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008878:	4618      	mov	r0, r3
 800887a:	f001 f9a6 	bl	8009bca <WrByte>
 800887e:	4603      	mov	r3, r0
 8008880:	461a      	mov	r2, r3
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	4313      	orrs	r3, r2
 8008886:	73fb      	strb	r3, [r7, #15]

	return status;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <vl53l8cx_set_power_mode>:

uint8_t vl53l8cx_set_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b086      	sub	sp, #24
 8008896:	af02      	add	r7, sp, #8
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L8CX_STATUS_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_get_power_mode(p_dev, &current_power_mode);
 80088a2:	f107 030e 	add.w	r3, r7, #14
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff ffaf 	bl	800880c <vl53l8cx_get_power_mode>
 80088ae:	4603      	mov	r3, r0
 80088b0:	461a      	mov	r2, r3
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d061      	beq.n	8008984 <vl53l8cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d028      	beq.n	8008918 <vl53l8cx_set_power_mode+0x86>
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d14d      	bne.n	8008966 <vl53l8cx_set_power_mode+0xd4>
	{
		case VL53L8CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80088d2:	4618      	mov	r0, r3
 80088d4:	f001 f979 	bl	8009bca <WrByte>
 80088d8:	4603      	mov	r3, r0
 80088da:	461a      	mov	r2, r3
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	4313      	orrs	r3, r2
 80088e0:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2204      	movs	r2, #4
 80088e6:	2109      	movs	r1, #9
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 f96e 	bl	8009bca <WrByte>
 80088ee:	4603      	mov	r3, r0
 80088f0:	461a      	mov	r2, r3
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 80088f8:	2301      	movs	r3, #1
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	2301      	movs	r3, #1
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	2306      	movs	r3, #6
 8008902:	2200      	movs	r2, #0
 8008904:	2101      	movs	r1, #1
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7fe ff77 	bl	80077fa <_vl53l8cx_poll_for_answer>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	4313      	orrs	r3, r2
 8008914:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 8008916:	e029      	b.n	800896c <vl53l8cx_set_power_mode+0xda>

		case VL53L8CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008920:	4618      	mov	r0, r3
 8008922:	f001 f952 	bl	8009bca <WrByte>
 8008926:	4603      	mov	r3, r0
 8008928:	461a      	mov	r2, r3
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	4313      	orrs	r3, r2
 800892e:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	2109      	movs	r1, #9
 8008936:	4618      	mov	r0, r3
 8008938:	f001 f947 	bl	8009bca <WrByte>
 800893c:	4603      	mov	r3, r0
 800893e:	461a      	mov	r2, r3
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	4313      	orrs	r3, r2
 8008944:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8008946:	2300      	movs	r3, #0
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	2301      	movs	r3, #1
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	2306      	movs	r3, #6
 8008950:	2200      	movs	r2, #0
 8008952:	2101      	movs	r1, #1
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7fe ff50 	bl	80077fa <_vl53l8cx_poll_for_answer>
 800895a:	4603      	mov	r3, r0
 800895c:	461a      	mov	r2, r3
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	4313      	orrs	r3, r2
 8008962:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8008964:	e002      	b.n	800896c <vl53l8cx_set_power_mode+0xda>

		default:
			status = VL53L8CX_STATUS_ERROR;
 8008966:	23ff      	movs	r3, #255	; 0xff
 8008968:	73fb      	strb	r3, [r7, #15]
			break;
 800896a:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008974:	4618      	mov	r0, r3
 8008976:	f001 f928 	bl	8009bca <WrByte>
 800897a:	4603      	mov	r3, r0
 800897c:	461a      	mov	r2, r3
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	4313      	orrs	r3, r2
 8008982:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <vl53l8cx_start_ranging>:

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8008990:	b5b0      	push	{r4, r5, r7, lr}
 8008992:	b09c      	sub	sp, #112	; 0x70
 8008994:	af02      	add	r7, sp, #8
 8008996:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800899e:	2300      	movs	r3, #0
 80089a0:	653b      	str	r3, [r7, #80]	; 0x50
 80089a2:	2300      	movs	r3, #0
 80089a4:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 80089a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80089aa:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 80089ac:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fc5c 	bl	8009270 <vl53l8cx_get_resolution>
 80089b8:	4603      	mov	r3, r0
 80089ba:	461a      	mov	r2, r3
 80089bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089c0:	4313      	orrs	r3, r2
 80089c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	22ff      	movs	r2, #255	; 0xff
 80089d0:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 80089d2:	4bb5      	ldr	r3, [pc, #724]	; (8008ca8 <vl53l8cx_start_ranging+0x318>)
 80089d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80089d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 80089de:	4bb3      	ldr	r3, [pc, #716]	; (8008cac <vl53l8cx_start_ranging+0x31c>)
 80089e0:	f107 040c 	add.w	r4, r7, #12
 80089e4:	461d      	mov	r5, r3
 80089e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80089f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 80089f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f8:	3308      	adds	r3, #8
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 80089fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fe:	3320      	adds	r3, #32
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	3340      	adds	r3, #64	; 0x40
 8008a06:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8008a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8008a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008a16:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8008a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8008a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8008a2c:	e073      	b.n	8008b16 <vl53l8cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 8008a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	3368      	adds	r3, #104	; 0x68
 8008a34:	443b      	add	r3, r7
 8008a36:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d067      	beq.n	8008b0e <vl53l8cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 8008a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	3368      	adds	r3, #104	; 0x68
 8008a46:	443b      	add	r3, r7
 8008a48:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8008a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d057      	beq.n	8008b0e <vl53l8cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8008a5e:	f107 020c 	add.w	r2, r7, #12
 8008a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8008a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d03a      	beq.n	8008aee <vl53l8cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8008a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b0c      	cmp	r3, #12
 8008a84:	d833      	bhi.n	8008aee <vl53l8cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8008a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a88:	885b      	ldrh	r3, [r3, #2]
 8008a8a:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d910      	bls.n	8008ab4 <vl53l8cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8008a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a94:	885b      	ldrh	r3, [r3, #2]
 8008a96:	f645 028f 	movw	r2, #22671	; 0x588f
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d80a      	bhi.n	8008ab4 <vl53l8cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 8008a9e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aa6:	b299      	uxth	r1, r3
 8008aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008aaa:	8813      	ldrh	r3, [r2, #0]
 8008aac:	f361 130f 	bfi	r3, r1, #4, #12
 8008ab0:	8013      	strh	r3, [r2, #0]
 8008ab2:	e009      	b.n	8008ac8 <vl53l8cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8008ab4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008abc:	b299      	uxth	r1, r3
 8008abe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ac0:	8813      	ldrh	r3, [r2, #0]
 8008ac2:	f361 130f 	bfi	r3, r1, #4, #12
 8008ac6:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008ad4:	b2d2      	uxtb	r2, r2
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ada:	8812      	ldrh	r2, [r2, #0]
 8008adc:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8008ae0:	b292      	uxth	r2, r2
 8008ae2:	fb01 f202 	mul.w	r2, r1, r2
 8008ae6:	441a      	add	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	615a      	str	r2, [r3, #20]
 8008aec:	e009      	b.n	8008b02 <vl53l8cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008af4:	8812      	ldrh	r2, [r2, #0]
 8008af6:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8008afa:	b292      	uxth	r2, r2
 8008afc:	441a      	add	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	1d1a      	adds	r2, r3, #4
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	615a      	str	r2, [r3, #20]
 8008b0c:	e000      	b.n	8008b10 <vl53l8cx_start_ranging+0x180>
			continue;
 8008b0e:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8008b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b12:	3301      	adds	r3, #1
 8008b14:	663b      	str	r3, [r7, #96]	; 0x60
 8008b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b18:	2b0b      	cmp	r3, #11
 8008b1a:	d988      	bls.n	8008a2e <vl53l8cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	f103 0218 	add.w	r2, r3, #24
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	615a      	str	r2, [r3, #20]

	status |= vl53l8cx_dci_write_data(p_dev,
 8008b28:	f107 010c 	add.w	r1, r7, #12
 8008b2c:	2330      	movs	r3, #48	; 0x30
 8008b2e:	f64d 1280 	movw	r2, #55680	; 0xd980
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fdcc 	bl	80096d0 <vl53l8cx_dci_write_data>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b40:	4313      	orrs	r3, r2
 8008b42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 8008b4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b4e:	3301      	adds	r3, #1
 8008b50:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 8008b52:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008b56:	2308      	movs	r3, #8
 8008b58:	f64d 1268 	movw	r2, #55656	; 0xd968
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fdb7 	bl	80096d0 <vl53l8cx_dci_write_data>
 8008b62:	4603      	mov	r3, r0
 8008b64:	461a      	mov	r2, r3
 8008b66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 8008b70:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8008b74:	2310      	movs	r3, #16
 8008b76:	f64d 1270 	movw	r2, #55664	; 0xd970
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fda8 	bl	80096d0 <vl53l8cx_dci_write_data>
 8008b80:	4603      	mov	r3, r0
 8008b82:	461a      	mov	r2, r3
 8008b84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008b96:	4618      	mov	r0, r3
 8008b98:	f001 f817 	bl	8009bca <WrByte>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2205      	movs	r2, #5
 8008bae:	2109      	movs	r1, #9
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 f80a 	bl	8009bca <WrByte>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	461a      	mov	r2, r3
 8008bba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fffc 	bl	8009bca <WrByte>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008be6:	2304      	movs	r3, #4
 8008be8:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8008bec:	f001 f803 	bl	8009bf6 <WrMulti>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8008bfe:	2303      	movs	r3, #3
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	23ff      	movs	r3, #255	; 0xff
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	2104      	movs	r1, #4
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fe fdf3 	bl	80077fa <_vl53l8cx_poll_for_answer>
 8008c14:	4603      	mov	r3, r0
 8008c16:	461a      	mov	r2, r3
 8008c18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8008c28:	230c      	movs	r3, #12
 8008c2a:	f245 4240 	movw	r2, #21568	; 0x5440
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fcc4 	bl	80095bc <vl53l8cx_dci_read_data>
 8008c34:	4603      	mov	r3, r0
 8008c36:	461a      	mov	r2, r3
 8008c38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 8008c50:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008c54:	461a      	mov	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d002      	beq.n	8008c64 <vl53l8cx_start_ranging+0x2d4>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8008c5e:	23ff      	movs	r3, #255	; 0xff
 8008c60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8008c6a:	2308      	movs	r3, #8
 8008c6c:	f24e 02c4 	movw	r2, #57540	; 0xe0c4
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fca3 	bl	80095bc <vl53l8cx_dci_read_data>
 8008c76:	4603      	mov	r3, r0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <vl53l8cx_start_ranging+0x30a>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 8008c8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c92:	f043 0303 	orr.w	r3, r3, #3
 8008c96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 8008c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3768      	adds	r7, #104	; 0x68
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	08019ef8 	.word	0x08019ef8
 8008cac:	08019f08 	.word	0x08019f08

08008cb0 <vl53l8cx_stop_ranging>:

uint8_t vl53l8cx_stop_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L8CX_STATUS_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	74fb      	strb	r3, [r7, #19]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f107 020c 	add.w	r2, r7, #12
 8008cce:	2304      	movs	r3, #4
 8008cd0:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8008cd4:	f000 ffa6 	bl	8009c24 <RdMulti>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if(auto_stop_flag != (uint32_t)0x4FF)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d048      	beq.n	8008d7e <vl53l8cx_stop_ranging+0xce>
	{
	        status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 ff68 	bl	8009bca <WrByte>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2216      	movs	r2, #22
 8008d08:	2115      	movs	r1, #21
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 ff5d 	bl	8009bca <WrByte>
 8008d10:	4603      	mov	r3, r0
 8008d12:	461a      	mov	r2, r3
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	75fb      	strb	r3, [r7, #23]
	        status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	2114      	movs	r1, #20
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 ff52 	bl	8009bca <WrByte>
 8008d26:	4603      	mov	r3, r0
 8008d28:	461a      	mov	r2, r3
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8008d30:	e021      	b.n	8008d76 <vl53l8cx_stop_ranging+0xc6>
	        {
	        	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f107 0213 	add.w	r2, r7, #19
 8008d38:	2106      	movs	r1, #6
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 ff30 	bl	8009ba0 <RdByte>
 8008d40:	4603      	mov	r3, r0
 8008d42:	461a      	mov	r2, r3
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	75fb      	strb	r3, [r7, #23]
	        	status |= WaitMs(&(p_dev->platform), 10);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	210a      	movs	r1, #10
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 ffb5 	bl	8009cbe <WaitMs>
 8008d54:	4603      	mov	r3, r0
 8008d56:	461a      	mov	r2, r3
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8008d5e:	8abb      	ldrh	r3, [r7, #20]
 8008d60:	3301      	adds	r3, #1
 8008d62:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8008d64:	8abb      	ldrh	r3, [r7, #20]
 8008d66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008d6a:	d904      	bls.n	8008d76 <vl53l8cx_stop_ranging+0xc6>
				{
					status |= tmp;
 8008d6c:	7cfa      	ldrb	r2, [r7, #19]
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	75fb      	strb	r3, [r7, #23]
					break;
 8008d74:	e003      	b.n	8008d7e <vl53l8cx_stop_ranging+0xce>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8008d76:	7cfb      	ldrb	r3, [r7, #19]
 8008d78:	b25b      	sxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	dad9      	bge.n	8008d32 <vl53l8cx_stop_ranging+0x82>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f107 0213 	add.w	r2, r7, #19
 8008d84:	2106      	movs	r1, #6
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 ff0a 	bl	8009ba0 <RdByte>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	461a      	mov	r2, r3
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8008d96:	7cfb      	ldrb	r3, [r7, #19]
 8008d98:	b25b      	sxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	da15      	bge.n	8008dca <vl53l8cx_stop_ranging+0x11a>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f107 0213 	add.w	r2, r7, #19
 8008da4:	2107      	movs	r1, #7
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fefa 	bl	8009ba0 <RdByte>
 8008dac:	4603      	mov	r3, r0
 8008dae:	461a      	mov	r2, r3
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8008db6:	7cfb      	ldrb	r3, [r7, #19]
 8008db8:	2b84      	cmp	r3, #132	; 0x84
 8008dba:	d006      	beq.n	8008dca <vl53l8cx_stop_ranging+0x11a>
 8008dbc:	7cfb      	ldrb	r3, [r7, #19]
 8008dbe:	2b85      	cmp	r3, #133	; 0x85
 8008dc0:	d003      	beq.n	8008dca <vl53l8cx_stop_ranging+0x11a>
		   status |= tmp;
 8008dc2:	7cfa      	ldrb	r2, [r7, #19]
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fef9 	bl	8009bca <WrByte>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	2114      	movs	r1, #20
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 feee 	bl	8009bca <WrByte>
 8008dee:	4603      	mov	r3, r0
 8008df0:	461a      	mov	r2, r3
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2115      	movs	r1, #21
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 fee3 	bl	8009bca <WrByte>
 8008e04:	4603      	mov	r3, r0
 8008e06:	461a      	mov	r2, r3
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2204      	movs	r2, #4
 8008e12:	2109      	movs	r1, #9
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fed8 	bl	8009bca <WrByte>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fecc 	bl	8009bca <WrByte>
 8008e32:	4603      	mov	r3, r0
 8008e34:	461a      	mov	r2, r3
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	75fb      	strb	r3, [r7, #23]

	return status;
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <vl53l8cx_check_data_ready>:

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8008e5c:	2304      	movs	r3, #4
 8008e5e:	2100      	movs	r1, #0
 8008e60:	f000 fee0 	bl	8009c24 <RdMulti>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7c1b      	ldrb	r3, [r3, #16]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d020      	beq.n	8008ebe <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8008e82:	2bff      	cmp	r3, #255	; 0xff
 8008e84:	d01b      	beq.n	8008ebe <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8008e8c:	2b05      	cmp	r3, #5
 8008e8e:	d116      	bne.n	8008ebe <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8008e96:	f003 0305 	and.w	r3, r3, #5
 8008e9a:	2b05      	cmp	r3, #5
 8008e9c:	d10f      	bne.n	8008ebe <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8008ea4:	f003 0310 	and.w	r3, r3, #16
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d008      	beq.n	8008ebe <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	741a      	strb	r2, [r3, #16]
 8008ebc:	e00e      	b.n	8008edc <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8008ec4:	b25b      	sxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	da05      	bge.n	8008ed6 <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 8008ef6:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	2100      	movs	r1, #0
 8008f04:	f000 fe8e 	bl	8009c24 <RdMulti>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	7ffb      	ldrb	r3, [r7, #31]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f000 fe91 	bl	8009c52 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8008f30:	2310      	movs	r3, #16
 8008f32:	61bb      	str	r3, [r7, #24]
 8008f34:	e0db      	b.n	80090ee <vl53l8cx_get_ranging_data+0x206>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	4413      	add	r3, r2
 8008f40:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d915      	bls.n	8008f7c <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b0c      	cmp	r3, #12
 8008f5c:	d80e      	bhi.n	8008f7c <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	fb02 f303 	mul.w	r3, r2, r3
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	e005      	b.n	8008f88 <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	885b      	ldrh	r3, [r3, #2]
 8008f8c:	f24e 0284 	movw	r2, #57476	; 0xe084
 8008f90:	4293      	cmp	r3, r2
 8008f92:	f000 8088 	beq.w	80090a6 <vl53l8cx_get_ranging_data+0x1be>
 8008f96:	f24e 0284 	movw	r2, #57476	; 0xe084
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	f300 809f 	bgt.w	80090de <vl53l8cx_get_ranging_data+0x1f6>
 8008fa0:	f24e 0244 	movw	r2, #57412	; 0xe044
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d070      	beq.n	800908a <vl53l8cx_get_ranging_data+0x1a2>
 8008fa8:	f24e 0244 	movw	r2, #57412	; 0xe044
 8008fac:	4293      	cmp	r3, r2
 8008fae:	f300 8096 	bgt.w	80090de <vl53l8cx_get_ranging_data+0x1f6>
 8008fb2:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d059      	beq.n	800906e <vl53l8cx_get_ranging_data+0x186>
 8008fba:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	f300 808d 	bgt.w	80090de <vl53l8cx_get_ranging_data+0x1f6>
 8008fc4:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d042      	beq.n	8009052 <vl53l8cx_get_ranging_data+0x16a>
 8008fcc:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	f300 8084 	bgt.w	80090de <vl53l8cx_get_ranging_data+0x1f6>
 8008fd6:	f64d 3284 	movw	r2, #56196	; 0xdb84
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d02b      	beq.n	8009036 <vl53l8cx_get_ranging_data+0x14e>
 8008fde:	f64d 3284 	movw	r2, #56196	; 0xdb84
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	dc7b      	bgt.n	80090de <vl53l8cx_get_ranging_data+0x1f6>
 8008fe6:	f64d 0258 	movw	r2, #55384	; 0xd858
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d069      	beq.n	80090c2 <vl53l8cx_get_ranging_data+0x1da>
 8008fee:	f64d 0258 	movw	r2, #55384	; 0xd858
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	dc73      	bgt.n	80090de <vl53l8cx_get_ranging_data+0x1f6>
 8008ff6:	f245 42b4 	movw	r2, #21684	; 0x54b4
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d004      	beq.n	8009008 <vl53l8cx_get_ranging_data+0x120>
 8008ffe:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8009002:	4293      	cmp	r3, r2
 8009004:	d00a      	beq.n	800901c <vl53l8cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8009006:	e06a      	b.n	80090de <vl53l8cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	330c      	adds	r3, #12
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	4413      	add	r3, r2
 8009010:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8009014:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	701a      	strb	r2, [r3, #0]
				break;
 800901a:	e061      	b.n	80090e0 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	3304      	adds	r3, #4
 8009024:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4619      	mov	r1, r3
 8009030:	f00e fd25 	bl	8017a7e <memcpy>
				break;
 8009034:	e054      	b.n	80090e0 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	3304      	adds	r3, #4
 8009040:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4619      	mov	r1, r3
 800904c:	f00e fd17 	bl	8017a7e <memcpy>
				break;
 8009050:	e046      	b.n	80090e0 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	3304      	adds	r3, #4
 800905c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	4619      	mov	r1, r3
 8009068:	f00e fd09 	bl	8017a7e <memcpy>
				break;
 800906c:	e038      	b.n	80090e0 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	3304      	adds	r3, #4
 8009078:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	4619      	mov	r1, r3
 8009084:	f00e fcfb 	bl	8017a7e <memcpy>
				break;
 8009088:	e02a      	b.n	80090e0 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	3304      	adds	r3, #4
 8009094:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	4619      	mov	r1, r3
 80090a0:	f00e fced 	bl	8017a7e <memcpy>
				break;
 80090a4:	e01c      	b.n	80090e0 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	3304      	adds	r3, #4
 80090b0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4619      	mov	r1, r3
 80090bc:	f00e fcdf 	bl	8017a7e <memcpy>
				break;
 80090c0:	e00e      	b.n	80090e0 <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	3304      	adds	r3, #4
 80090cc:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4619      	mov	r1, r3
 80090d8:	f00e fcd1 	bl	8017a7e <memcpy>
				break;
 80090dc:	e000      	b.n	80090e0 <vl53l8cx_get_ranging_data+0x1f8>
				break;
 80090de:	bf00      	nop
		}
		i += msize;
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	4413      	add	r3, r2
 80090e6:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	3304      	adds	r3, #4
 80090ec:	61bb      	str	r3, [r7, #24]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	f4ff af1e 	bcc.w	8008f36 <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80090fa:	2300      	movs	r3, #0
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	e00d      	b.n	800911c <vl53l8cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	0ada      	lsrs	r2, r3, #11
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	440b      	add	r3, r1
 8009114:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	3301      	adds	r3, #1
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	2b3f      	cmp	r3, #63	; 0x3f
 8009120:	d9ee      	bls.n	8009100 <vl53l8cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8009122:	2300      	movs	r3, #0
 8009124:	61bb      	str	r3, [r7, #24]
 8009126:	e033      	b.n	8009190 <vl53l8cx_get_ranging_data+0x2a8>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	4413      	add	r3, r2
 8009134:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	da00      	bge.n	800913e <vl53l8cx_get_ranging_data+0x256>
 800913c:	3303      	adds	r3, #3
 800913e:	109b      	asrs	r3, r3, #2
 8009140:	b219      	sxth	r1, r3
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	4413      	add	r3, r2
 800914e:	460a      	mov	r2, r1
 8009150:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	4413      	add	r3, r2
 8009158:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	085b      	lsrs	r3, r3, #1
 8009160:	b2d9      	uxtb	r1, r3
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	4413      	add	r3, r2
 8009168:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800916c:	460a      	mov	r2, r1
 800916e:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	3350      	adds	r3, #80	; 0x50
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	0ada      	lsrs	r2, r3, #11
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	3350      	adds	r3, #80	; 0x50
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	3301      	adds	r3, #1
 800918e:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b3f      	cmp	r3, #63	; 0x3f
 8009194:	d9c8      	bls.n	8009128 <vl53l8cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8009196:	2300      	movs	r3, #0
 8009198:	61bb      	str	r3, [r7, #24]
 800919a:	e01b      	b.n	80091d4 <vl53l8cx_get_ranging_data+0x2ec>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d110      	bne.n	80091ce <vl53l8cx_get_ranging_data+0x2e6>
			for(j = 0; j < (uint32_t)
 80091ac:	2300      	movs	r3, #0
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	e00a      	b.n	80091c8 <vl53l8cx_get_ranging_data+0x2e0>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	4413      	add	r3, r2
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	4413      	add	r3, r2
 80091bc:	22ff      	movs	r2, #255	; 0xff
 80091be:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	3301      	adds	r3, #1
 80091c6:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0f1      	beq.n	80091b2 <vl53l8cx_get_ranging_data+0x2ca>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	3301      	adds	r3, #1
 80091d2:	61bb      	str	r3, [r7, #24]
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b3f      	cmp	r3, #63	; 0x3f
 80091d8:	d9e0      	bls.n	800919c <vl53l8cx_get_ranging_data+0x2b4>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 80091da:	2300      	movs	r3, #0
 80091dc:	61bb      	str	r3, [r7, #24]
 80091de:	e012      	b.n	8009206 <vl53l8cx_get_ranging_data+0x31e>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	33d2      	adds	r3, #210	; 0xd2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	4a1f      	ldr	r2, [pc, #124]	; (800926c <vl53l8cx_get_ranging_data+0x384>)
 80091ee:	fba2 2303 	umull	r2, r3, r2, r3
 80091f2:	0bda      	lsrs	r2, r3, #15
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	33d2      	adds	r3, #210	; 0xd2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	440b      	add	r3, r1
 80091fe:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	3301      	adds	r3, #1
 8009204:	61bb      	str	r3, [r7, #24]
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b1f      	cmp	r3, #31
 800920a:	d9e9      	bls.n	80091e0 <vl53l8cx_get_ranging_data+0x2f8>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8009212:	b29b      	uxth	r3, r3
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 800921e:	b29a      	uxth	r2, r3
 8009220:	89fb      	ldrh	r3, [r7, #14]
 8009222:	4313      	orrs	r3, r2
 8009224:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 800922a:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	4413      	add	r3, r2
 8009230:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8009234:	b29b      	uxth	r3, r3
 8009236:	021b      	lsls	r3, r3, #8
 8009238:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 800923e:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	4413      	add	r3, r2
 8009244:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8009248:	b29a      	uxth	r2, r3
 800924a:	89bb      	ldrh	r3, [r7, #12]
 800924c:	4313      	orrs	r3, r2
 800924e:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8009250:	89fa      	ldrh	r2, [r7, #14]
 8009252:	89bb      	ldrh	r3, [r7, #12]
 8009254:	429a      	cmp	r2, r3
 8009256:	d003      	beq.n	8009260 <vl53l8cx_get_ranging_data+0x378>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 8009258:	7ffb      	ldrb	r3, [r7, #31]
 800925a:	f043 0302 	orr.w	r3, r3, #2
 800925e:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8009260:	7ffb      	ldrb	r3, [r7, #31]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3720      	adds	r7, #32
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	80008001 	.word	0x80008001

08009270 <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8009284:	2308      	movs	r3, #8
 8009286:	f245 4250 	movw	r2, #21584	; 0x5450
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f996 	bl	80095bc <vl53l8cx_dci_read_data>
 8009290:	4603      	mov	r3, r0
 8009292:	461a      	mov	r2, r3
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	4313      	orrs	r3, r2
 8009298:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 80092a6:	fb12 f303 	smulbb	r3, r2, r3
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	701a      	strb	r2, [r3, #0]

	return status;
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <vl53l8cx_set_resolution>:


uint8_t vl53l8cx_set_resolution(
		VL53L8CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	460b      	mov	r3, r1
 80092c4:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	2b10      	cmp	r3, #16
 80092ce:	d002      	beq.n	80092d6 <vl53l8cx_set_resolution+0x1c>
 80092d0:	2b40      	cmp	r3, #64	; 0x40
 80092d2:	d055      	beq.n	8009380 <vl53l8cx_set_resolution+0xc6>
 80092d4:	e0a9      	b.n	800942a <vl53l8cx_set_resolution+0x170>
		case VL53L8CX_RESOLUTION_4X4:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80092dc:	2310      	movs	r3, #16
 80092de:	f64a 5238 	movw	r2, #44344	; 0xad38
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f96a 	bl	80095bc <vl53l8cx_dci_read_data>
 80092e8:	4603      	mov	r3, r0
 80092ea:	461a      	mov	r2, r3
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2240      	movs	r2, #64	; 0x40
 80092f6:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2240      	movs	r2, #64	; 0x40
 80092fe:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2204      	movs	r2, #4
 8009306:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8009310:	2310      	movs	r3, #16
 8009312:	f64a 5238 	movw	r2, #44344	; 0xad38
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f9da 	bl	80096d0 <vl53l8cx_dci_write_data>
 800931c:	4603      	mov	r3, r0
 800931e:	461a      	mov	r2, r3
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	4313      	orrs	r3, r2
 8009324:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 800932c:	2308      	movs	r3, #8
 800932e:	f245 4250 	movw	r2, #21584	; 0x5450
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f942 	bl	80095bc <vl53l8cx_dci_read_data>
 8009338:	4603      	mov	r3, r0
 800933a:	461a      	mov	r2, r3
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	4313      	orrs	r3, r2
 8009340:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2204      	movs	r2, #4
 8009346:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2204      	movs	r2, #4
 800934e:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2208      	movs	r2, #8
 8009356:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2208      	movs	r2, #8
 800935e:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8009368:	2308      	movs	r3, #8
 800936a:	f245 4250 	movw	r2, #21584	; 0x5450
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f9ae 	bl	80096d0 <vl53l8cx_dci_write_data>
 8009374:	4603      	mov	r3, r0
 8009376:	461a      	mov	r2, r3
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4313      	orrs	r3, r2
 800937c:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			break;
 800937e:	e057      	b.n	8009430 <vl53l8cx_set_resolution+0x176>

		case VL53L8CX_RESOLUTION_8X8:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8009386:	2310      	movs	r3, #16
 8009388:	f64a 5238 	movw	r2, #44344	; 0xad38
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f915 	bl	80095bc <vl53l8cx_dci_read_data>
 8009392:	4603      	mov	r3, r0
 8009394:	461a      	mov	r2, r3
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	4313      	orrs	r3, r2
 800939a:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2210      	movs	r2, #16
 80093a0:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2210      	movs	r2, #16
 80093a8:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 80093ba:	2310      	movs	r3, #16
 80093bc:	f64a 5238 	movw	r2, #44344	; 0xad38
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f985 	bl	80096d0 <vl53l8cx_dci_write_data>
 80093c6:	4603      	mov	r3, r0
 80093c8:	461a      	mov	r2, r3
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80093d6:	2308      	movs	r3, #8
 80093d8:	f245 4250 	movw	r2, #21584	; 0x5450
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f8ed 	bl	80095bc <vl53l8cx_dci_read_data>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2208      	movs	r2, #8
 80093f0:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2208      	movs	r2, #8
 80093f8:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2204      	movs	r2, #4
 8009400:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2204      	movs	r2, #4
 8009408:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8009412:	2308      	movs	r3, #8
 8009414:	f245 4250 	movw	r2, #21584	; 0x5450
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f959 	bl	80096d0 <vl53l8cx_dci_write_data>
 800941e:	4603      	mov	r3, r0
 8009420:	461a      	mov	r2, r3
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	4313      	orrs	r3, r2
 8009426:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);

			break;
 8009428:	e002      	b.n	8009430 <vl53l8cx_set_resolution+0x176>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 800942a:	237f      	movs	r3, #127	; 0x7f
 800942c:	73fb      	strb	r3, [r7, #15]
			break;
 800942e:	bf00      	nop
		}

	status |= _vl53l8cx_send_offset_data(p_dev, resolution);
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7fe fa73 	bl	8007920 <_vl53l8cx_send_offset_data>
 800943a:	4603      	mov	r3, r0
 800943c:	461a      	mov	r2, r3
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	4313      	orrs	r3, r2
 8009442:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l8cx_send_xtalk_data(p_dev, resolution);
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7fe fc35 	bl	8007cb8 <_vl53l8cx_send_xtalk_data>
 800944e:	4603      	mov	r3, r0
 8009450:	461a      	mov	r2, r3
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	4313      	orrs	r3, r2
 8009456:	73fb      	strb	r3, [r7, #15]

	return status;
 8009458:	7bfb      	ldrb	r3, [r7, #15]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b088      	sub	sp, #32
 8009466:	af04      	add	r7, sp, #16
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8009478:	2301      	movs	r3, #1
 800947a:	9302      	str	r3, [sp, #8]
 800947c:	2301      	movs	r3, #1
 800947e:	9301      	str	r3, [sp, #4]
 8009480:	1cfb      	adds	r3, r7, #3
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	2304      	movs	r3, #4
 8009486:	f245 4258 	movw	r2, #21592	; 0x5458
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f9be 	bl	800980c <vl53l8cx_dci_replace_data>
 8009490:	4603      	mov	r3, r0
 8009492:	461a      	mov	r2, r3
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4313      	orrs	r3, r2
 8009498:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 800949a:	7bfb      	ldrb	r3, [r7, #15]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <vl53l8cx_set_integration_time_ms>:
}

uint8_t vl53l8cx_set_integration_time_ms(
		VL53L8CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b088      	sub	sp, #32
 80094a8:	af04      	add	r7, sp, #16
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d903      	bls.n	80094c4 <vl53l8cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094c2:	d904      	bls.n	80094ce <vl53l8cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L8CX_STATUS_INVALID_PARAM;
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80094ca:	73fb      	strb	r3, [r7, #15]
 80094cc:	e01a      	b.n	8009504 <vl53l8cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094d4:	fb02 f303 	mul.w	r3, r2, r3
 80094d8:	60bb      	str	r3, [r7, #8]

		status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80094e0:	2300      	movs	r3, #0
 80094e2:	9302      	str	r3, [sp, #8]
 80094e4:	2304      	movs	r3, #4
 80094e6:	9301      	str	r3, [sp, #4]
 80094e8:	f107 0308 	add.w	r3, r7, #8
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	2314      	movs	r3, #20
 80094f0:	f245 425c 	movw	r2, #21596	; 0x545c
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f989 	bl	800980c <vl53l8cx_dci_replace_data>
 80094fa:	4603      	mov	r3, r0
 80094fc:	461a      	mov	r2, r3
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	4313      	orrs	r3, r2
 8009502:	73fb      	strb	r3, [r7, #15]
				VL53L8CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	460b      	mov	r3, r1
 8009518:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 800951e:	2300      	movs	r3, #0
 8009520:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8009528:	2308      	movs	r3, #8
 800952a:	f64a 5230 	movw	r2, #44336	; 0xad30
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f844 	bl	80095bc <vl53l8cx_dci_read_data>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	4313      	orrs	r3, r2
 800953c:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d002      	beq.n	800954a <vl53l8cx_set_ranging_mode+0x3c>
 8009544:	2b03      	cmp	r3, #3
 8009546:	d00b      	beq.n	8009560 <vl53l8cx_set_ranging_mode+0x52>
 8009548:	e015      	b.n	8009576 <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2203      	movs	r2, #3
 8009556:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 800955a:	2300      	movs	r3, #0
 800955c:	60bb      	str	r3, [r7, #8]
			break;
 800955e:	e00d      	b.n	800957c <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2203      	movs	r2, #3
 8009564:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8009570:	2301      	movs	r3, #1
 8009572:	60bb      	str	r3, [r7, #8]
			break;
 8009574:	e002      	b.n	800957c <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 8009576:	237f      	movs	r3, #127	; 0x7f
 8009578:	73fb      	strb	r3, [r7, #15]
			break;
 800957a:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8009582:	2308      	movs	r3, #8
 8009584:	f64a 5230 	movw	r2, #44336	; 0xad30
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f8a1 	bl	80096d0 <vl53l8cx_dci_write_data>
 800958e:	4603      	mov	r3, r0
 8009590:	461a      	mov	r2, r3
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	4313      	orrs	r3, r2
 8009596:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	2304      	movs	r3, #4
 800959e:	f64d 1264 	movw	r2, #55652	; 0xd964
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f894 	bl	80096d0 <vl53l8cx_dci_write_data>
 80095a8:	4603      	mov	r3, r0
 80095aa:	461a      	mov	r2, r3
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08c      	sub	sp, #48	; 0x30
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
 80095c8:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80095d0:	887b      	ldrh	r3, [r7, #2]
 80095d2:	330c      	adds	r3, #12
 80095d4:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80095d6:	4a3d      	ldr	r2, [pc, #244]	; (80096cc <vl53l8cx_dci_read_data+0x110>)
 80095d8:	f107 0314 	add.w	r3, r7, #20
 80095dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80095de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 80095e8:	d903      	bls.n	80095f2 <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 80095ea:	23ff      	movs	r3, #255	; 0xff
 80095ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80095f0:	e065      	b.n	80096be <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	0a1b      	lsrs	r3, r3, #8
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8009600:	887b      	ldrh	r3, [r7, #2]
 8009602:	111b      	asrs	r3, r3, #4
 8009604:	b2db      	uxtb	r3, r3
 8009606:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8009608:	887b      	ldrh	r3, [r7, #2]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	b2db      	uxtb	r3, r3
 8009610:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f107 0214 	add.w	r2, r7, #20
 8009618:	230c      	movs	r3, #12
 800961a:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 800961e:	f000 faea 	bl	8009bf6 <WrMulti>
 8009622:	4603      	mov	r3, r0
 8009624:	461a      	mov	r2, r3
 8009626:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800962a:	4313      	orrs	r3, r2
 800962c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8009630:	2303      	movs	r3, #3
 8009632:	9301      	str	r3, [sp, #4]
 8009634:	23ff      	movs	r3, #255	; 0xff
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800963c:	2201      	movs	r2, #1
 800963e:	2104      	movs	r1, #4
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f7fe f8da 	bl	80077fa <_vl53l8cx_poll_for_answer>
 8009646:	4603      	mov	r3, r0
 8009648:	461a      	mov	r2, r3
 800964a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800964e:	4313      	orrs	r3, r2
 8009650:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8009654:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	f642 4104 	movw	r1, #11268	; 0x2c04
 8009662:	f000 fadf 	bl	8009c24 <RdMulti>
 8009666:	4603      	mov	r3, r0
 8009668:	461a      	mov	r2, r3
 800966a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800966e:	4313      	orrs	r3, r2
 8009670:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800967a:	887b      	ldrh	r3, [r7, #2]
 800967c:	330c      	adds	r3, #12
 800967e:	b29b      	uxth	r3, r3
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f000 fae5 	bl	8009c52 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8009688:	2300      	movs	r3, #0
 800968a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800968c:	e011      	b.n	80096b2 <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 800968e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	440b      	add	r3, r1
 800969c:	68f9      	ldr	r1, [r7, #12]
 800969e:	440a      	add	r2, r1
 80096a0:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 80096a4:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80096a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	3301      	adds	r3, #1
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80096b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80096b6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80096ba:	429a      	cmp	r2, r3
 80096bc:	dbe7      	blt.n	800968e <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 80096be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3728      	adds	r7, #40	; 0x28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	08019f38 	.word	0x08019f38

080096d0 <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08c      	sub	sp, #48	; 0x30
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80096e4:	2300      	movs	r3, #0
 80096e6:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80096e8:	2300      	movs	r3, #0
 80096ea:	753b      	strb	r3, [r7, #20]
 80096ec:	2300      	movs	r3, #0
 80096ee:	757b      	strb	r3, [r7, #21]
 80096f0:	2300      	movs	r3, #0
 80096f2:	75bb      	strb	r3, [r7, #22]
 80096f4:	230f      	movs	r3, #15
 80096f6:	75fb      	strb	r3, [r7, #23]
 80096f8:	2305      	movs	r3, #5
 80096fa:	763b      	strb	r3, [r7, #24]
 80096fc:	2301      	movs	r3, #1
 80096fe:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8009700:	887b      	ldrh	r3, [r7, #2]
 8009702:	3308      	adds	r3, #8
 8009704:	121b      	asrs	r3, r3, #8
 8009706:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8009708:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 800970a:	887b      	ldrh	r3, [r7, #2]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	3308      	adds	r3, #8
 8009710:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8009712:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 8009714:	887b      	ldrh	r3, [r7, #2]
 8009716:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 800971a:	3334      	adds	r3, #52	; 0x34
 800971c:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800971e:	887b      	ldrh	r3, [r7, #2]
 8009720:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8009724:	d903      	bls.n	800972e <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 8009726:	23ff      	movs	r3, #255	; 0xff
 8009728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800972c:	e068      	b.n	8009800 <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	b2db      	uxtb	r3, r3
 8009734:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 800973c:	887b      	ldrh	r3, [r7, #2]
 800973e:	111b      	asrs	r3, r3, #4
 8009740:	b2db      	uxtb	r3, r3
 8009742:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8009744:	887b      	ldrh	r3, [r7, #2]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	011b      	lsls	r3, r3, #4
 800974a:	b2db      	uxtb	r3, r3
 800974c:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 800974e:	887b      	ldrh	r3, [r7, #2]
 8009750:	4619      	mov	r1, r3
 8009752:	68b8      	ldr	r0, [r7, #8]
 8009754:	f000 fa7d 	bl	8009c52 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8009758:	887b      	ldrh	r3, [r7, #2]
 800975a:	3b01      	subs	r3, #1
 800975c:	b29b      	uxth	r3, r3
 800975e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009760:	e012      	b.n	8009788 <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8009762:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	441a      	add	r2, r3
 800976a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800976e:	3304      	adds	r3, #4
 8009770:	7811      	ldrb	r1, [r2, #0]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	4413      	add	r3, r2
 8009776:	460a      	mov	r2, r1
 8009778:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800977c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	b29b      	uxth	r3, r3
 8009786:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009788:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	dae8      	bge.n	8009762 <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 800979a:	887b      	ldrh	r3, [r7, #2]
 800979c:	3304      	adds	r3, #4
 800979e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	461a      	mov	r2, r3
 80097a8:	f107 0314 	add.w	r3, r7, #20
 80097ac:	cb03      	ldmia	r3!, {r0, r1}
 80097ae:	6010      	str	r0, [r2, #0]
 80097b0:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 80097b2:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80097ba:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 80097bc:	330c      	adds	r3, #12
 80097be:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80097c0:	f000 fa19 	bl	8009bf6 <WrMulti>
 80097c4:	4603      	mov	r3, r0
 80097c6:	461a      	mov	r2, r3
 80097c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097cc:	4313      	orrs	r3, r2
 80097ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80097d2:	2303      	movs	r3, #3
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	23ff      	movs	r3, #255	; 0xff
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80097de:	2201      	movs	r2, #1
 80097e0:	2104      	movs	r1, #4
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f7fe f809 	bl	80077fa <_vl53l8cx_poll_for_answer>
 80097e8:	4603      	mov	r3, r0
 80097ea:	461a      	mov	r2, r3
 80097ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097f0:	4313      	orrs	r3, r2
 80097f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 80097f6:	887b      	ldrh	r3, [r7, #2]
 80097f8:	4619      	mov	r1, r3
 80097fa:	68b8      	ldr	r0, [r7, #8]
 80097fc:	f000 fa29 	bl	8009c52 <SwapBuffer>
	}

	return status;
 8009800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009804:	4618      	mov	r0, r3
 8009806:	3728      	adds	r7, #40	; 0x28
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 800981e:	887b      	ldrh	r3, [r7, #2]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f7ff fec9 	bl	80095bc <vl53l8cx_dci_read_data>
 800982a:	4603      	mov	r3, r0
 800982c:	461a      	mov	r2, r3
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	4313      	orrs	r3, r2
 8009832:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8009834:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	4413      	add	r3, r2
 800983a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800983c:	6a39      	ldr	r1, [r7, #32]
 800983e:	4618      	mov	r0, r3
 8009840:	f00e f91d 	bl	8017a7e <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 8009844:	887b      	ldrh	r3, [r7, #2]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7ff ff40 	bl	80096d0 <vl53l8cx_dci_write_data>
 8009850:	4603      	mov	r3, r0
 8009852:	461a      	mov	r2, r3
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	4313      	orrs	r3, r2
 8009858:	75fb      	strb	r3, [r7, #23]

	return status;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <vl53l8cx_set_detection_thresholds_enable>:
}

uint8_t vl53l8cx_set_detection_thresholds_enable(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af04      	add	r7, sp, #16
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8009874:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8009878:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d104      	bne.n	800988a <vl53l8cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8009880:	2301      	movs	r3, #1
 8009882:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8009884:	2304      	movs	r3, #4
 8009886:	73bb      	strb	r3, [r7, #14]
 8009888:	e003      	b.n	8009892 <vl53l8cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 800988a:	2300      	movs	r3, #0
 800988c:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 800988e:	230c      	movs	r3, #12
 8009890:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8009898:	2300      	movs	r3, #0
 800989a:	9302      	str	r3, [sp, #8]
 800989c:	2304      	movs	r3, #4
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	f107 0308 	add.w	r3, r7, #8
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	2308      	movs	r3, #8
 80098a8:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff ffad 	bl	800980c <vl53l8cx_dci_replace_data>
 80098b2:	4603      	mov	r3, r0
 80098b4:	461a      	mov	r2, r3
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80098c2:	2311      	movs	r3, #17
 80098c4:	9302      	str	r3, [sp, #8]
 80098c6:	2301      	movs	r3, #1
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	f107 030e 	add.w	r3, r7, #14
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	2314      	movs	r3, #20
 80098d2:	f245 4288 	movw	r2, #21640	; 0x5488
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff ff98 	bl	800980c <vl53l8cx_dci_replace_data>
 80098dc:	4603      	mov	r3, r0
 80098de:	461a      	mov	r2, r3
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <vl53l8cx_set_detection_thresholds>:
}

uint8_t vl53l8cx_set_detection_thresholds(
		VL53L8CX_Configuration			*p_dev,
		VL53L8CX_DetectionThresholds	*p_thresholds)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L8CX_STATUS_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 80098fe:	4aa7      	ldr	r2, [pc, #668]	; (8009b9c <vl53l8cx_set_detection_thresholds+0x2ac>)
 8009900:	f107 030c 	add.w	r3, r7, #12
 8009904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009908:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 800990c:	2300      	movs	r3, #0
 800990e:	75fb      	strb	r3, [r7, #23]
 8009910:	e120      	b.n	8009b54 <vl53l8cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	7a1b      	ldrb	r3, [r3, #8]
 8009916:	3b01      	subs	r3, #1
 8009918:	2b12      	cmp	r3, #18
 800991a:	f200 8117 	bhi.w	8009b4c <vl53l8cx_set_detection_thresholds+0x25c>
 800991e:	a201      	add	r2, pc, #4	; (adr r2, 8009924 <vl53l8cx_set_detection_thresholds+0x34>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	08009971 	.word	0x08009971
 8009928:	080099bf 	.word	0x080099bf
 800992c:	08009b4d 	.word	0x08009b4d
 8009930:	08009a0d 	.word	0x08009a0d
 8009934:	08009b4d 	.word	0x08009b4d
 8009938:	08009b4d 	.word	0x08009b4d
 800993c:	08009b4d 	.word	0x08009b4d
 8009940:	08009a5b 	.word	0x08009a5b
 8009944:	08009b4d 	.word	0x08009b4d
 8009948:	08009b4d 	.word	0x08009b4d
 800994c:	08009b4d 	.word	0x08009b4d
 8009950:	08009b4d 	.word	0x08009b4d
 8009954:	08009aa9 	.word	0x08009aa9
 8009958:	08009b4d 	.word	0x08009b4d
 800995c:	08009b4d 	.word	0x08009b4d
 8009960:	08009b4d 	.word	0x08009b4d
 8009964:	08009b4d 	.word	0x08009b4d
 8009968:	08009b4d 	.word	0x08009b4d
 800996c:	08009af7 	.word	0x08009af7
		{
			case VL53L8CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8009970:	7dfa      	ldrb	r2, [r7, #23]
 8009972:	4613      	mov	r3, r2
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	461a      	mov	r2, r3
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	4413      	add	r3, r2
 8009980:	6819      	ldr	r1, [r3, #0]
 8009982:	7dfa      	ldrb	r2, [r7, #23]
 8009984:	4613      	mov	r3, r2
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	461a      	mov	r2, r3
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	4413      	add	r3, r2
 8009992:	008a      	lsls	r2, r1, #2
 8009994:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8009996:	7dfa      	ldrb	r2, [r7, #23]
 8009998:	4613      	mov	r3, r2
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	4413      	add	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	461a      	mov	r2, r3
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	4413      	add	r3, r2
 80099a6:	6859      	ldr	r1, [r3, #4]
 80099a8:	7dfa      	ldrb	r2, [r7, #23]
 80099aa:	4613      	mov	r3, r2
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	461a      	mov	r2, r3
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	4413      	add	r3, r2
 80099b8:	008a      	lsls	r2, r1, #2
 80099ba:	605a      	str	r2, [r3, #4]
				break;
 80099bc:	e0c7      	b.n	8009b4e <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 80099be:	7dfa      	ldrb	r2, [r7, #23]
 80099c0:	4613      	mov	r3, r2
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	4413      	add	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	461a      	mov	r2, r3
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	4413      	add	r3, r2
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	7dfa      	ldrb	r2, [r7, #23]
 80099d2:	4613      	mov	r3, r2
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	461a      	mov	r2, r3
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	4413      	add	r3, r2
 80099e0:	02ca      	lsls	r2, r1, #11
 80099e2:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80099e4:	7dfa      	ldrb	r2, [r7, #23]
 80099e6:	4613      	mov	r3, r2
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	461a      	mov	r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	4413      	add	r3, r2
 80099f4:	6859      	ldr	r1, [r3, #4]
 80099f6:	7dfa      	ldrb	r2, [r7, #23]
 80099f8:	4613      	mov	r3, r2
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	461a      	mov	r2, r3
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	4413      	add	r3, r2
 8009a06:	02ca      	lsls	r2, r1, #11
 8009a08:	605a      	str	r2, [r3, #4]
				break;
 8009a0a:	e0a0      	b.n	8009b4e <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8009a0c:	7dfa      	ldrb	r2, [r7, #23]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	461a      	mov	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	6819      	ldr	r1, [r3, #0]
 8009a1e:	7dfa      	ldrb	r2, [r7, #23]
 8009a20:	4613      	mov	r3, r2
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	461a      	mov	r2, r3
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	01ca      	lsls	r2, r1, #7
 8009a30:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8009a32:	7dfa      	ldrb	r2, [r7, #23]
 8009a34:	4613      	mov	r3, r2
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	4413      	add	r3, r2
 8009a42:	6859      	ldr	r1, [r3, #4]
 8009a44:	7dfa      	ldrb	r2, [r7, #23]
 8009a46:	4613      	mov	r3, r2
 8009a48:	005b      	lsls	r3, r3, #1
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	461a      	mov	r2, r3
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	4413      	add	r3, r2
 8009a54:	01ca      	lsls	r2, r1, #7
 8009a56:	605a      	str	r2, [r3, #4]
				break;
 8009a58:	e079      	b.n	8009b4e <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8009a5a:	7dfa      	ldrb	r2, [r7, #23]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	4413      	add	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	461a      	mov	r2, r3
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	4413      	add	r3, r2
 8009a6a:	6819      	ldr	r1, [r3, #0]
 8009a6c:	7dfa      	ldrb	r2, [r7, #23]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	005b      	lsls	r3, r3, #1
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	461a      	mov	r2, r3
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	02ca      	lsls	r2, r1, #11
 8009a7e:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8009a80:	7dfa      	ldrb	r2, [r7, #23]
 8009a82:	4613      	mov	r3, r2
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	4413      	add	r3, r2
 8009a90:	6859      	ldr	r1, [r3, #4]
 8009a92:	7dfa      	ldrb	r2, [r7, #23]
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	02ca      	lsls	r2, r1, #11
 8009aa4:	605a      	str	r2, [r3, #4]
				break;
 8009aa6:	e052      	b.n	8009b4e <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 8009aa8:	7dfa      	ldrb	r2, [r7, #23]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	6819      	ldr	r1, [r3, #0]
 8009aba:	7dfa      	ldrb	r2, [r7, #23]
 8009abc:	4613      	mov	r3, r2
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	4413      	add	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	4413      	add	r3, r2
 8009aca:	020a      	lsls	r2, r1, #8
 8009acc:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8009ace:	7dfa      	ldrb	r2, [r7, #23]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	461a      	mov	r2, r3
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	4413      	add	r3, r2
 8009ade:	6859      	ldr	r1, [r3, #4]
 8009ae0:	7dfa      	ldrb	r2, [r7, #23]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	461a      	mov	r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	4413      	add	r3, r2
 8009af0:	020a      	lsls	r2, r1, #8
 8009af2:	605a      	str	r2, [r3, #4]
				break;
 8009af4:	e02b      	b.n	8009b4e <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 8009af6:	7dfa      	ldrb	r2, [r7, #23]
 8009af8:	4613      	mov	r3, r2
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	461a      	mov	r2, r3
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	4413      	add	r3, r2
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	7df9      	ldrb	r1, [r7, #23]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	440b      	add	r3, r1
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4619      	mov	r1, r3
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	4419      	add	r1, r3
 8009b18:	4613      	mov	r3, r2
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8009b20:	7dfa      	ldrb	r2, [r7, #23]
 8009b22:	4613      	mov	r3, r2
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	4413      	add	r3, r2
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	7df9      	ldrb	r1, [r7, #23]
 8009b34:	460b      	mov	r3, r1
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	440b      	add	r3, r1
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	4419      	add	r1, r3
 8009b42:	4613      	mov	r3, r2
 8009b44:	041b      	lsls	r3, r3, #16
 8009b46:	1a9b      	subs	r3, r3, r2
 8009b48:	604b      	str	r3, [r1, #4]
				break;
 8009b4a:	e000      	b.n	8009b4e <vl53l8cx_set_detection_thresholds+0x25e>
			default:
				break;
 8009b4c:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
 8009b50:	3301      	adds	r3, #1
 8009b52:	75fb      	strb	r3, [r7, #23]
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	2b3f      	cmp	r3, #63	; 0x3f
 8009b58:	f67f aedb 	bls.w	8009912 <vl53l8cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8009b5c:	f107 010c 	add.w	r1, r7, #12
 8009b60:	2308      	movs	r3, #8
 8009b62:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff fdb2 	bl	80096d0 <vl53l8cx_dci_write_data>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	461a      	mov	r2, r3
 8009b70:	7dbb      	ldrb	r3, [r7, #22]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 8009b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009b7a:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fda5 	bl	80096d0 <vl53l8cx_dci_write_data>
 8009b86:	4603      	mov	r3, r0
 8009b88:	461a      	mov	r2, r3
 8009b8a:	7dbb      	ldrb	r3, [r7, #22]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L8CX_NB_THRESHOLDS
			*sizeof(VL53L8CX_DetectionThresholds)));

	return status;
 8009b90:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	08019f44 	.word	0x08019f44

08009ba0 <RdByte>:

uint8_t RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8009ba0:	b590      	push	{r4, r7, lr}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	607a      	str	r2, [r7, #4]
 8009bac:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	689c      	ldr	r4, [r3, #8]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8818      	ldrh	r0, [r3, #0]
 8009bb6:	8979      	ldrh	r1, [r7, #10]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	47a0      	blx	r4
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	b2db      	uxtb	r3, r3
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd90      	pop	{r4, r7, pc}

08009bca <WrByte>:

uint8_t WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8009bca:	b590      	push	{r4, r7, lr}
 8009bcc:	b083      	sub	sp, #12
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	807b      	strh	r3, [r7, #2]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685c      	ldr	r4, [r3, #4]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	8818      	ldrh	r0, [r3, #0]
 8009be2:	1c7a      	adds	r2, r7, #1
 8009be4:	8879      	ldrh	r1, [r7, #2]
 8009be6:	2301      	movs	r3, #1
 8009be8:	47a0      	blx	r4
 8009bea:	4603      	mov	r3, r0
 8009bec:	b2db      	uxtb	r3, r3
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd90      	pop	{r4, r7, pc}

08009bf6 <WrMulti>:
uint8_t WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8009bf6:	b590      	push	{r4, r7, lr}
 8009bf8:	b085      	sub	sp, #20
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	60f8      	str	r0, [r7, #12]
 8009bfe:	607a      	str	r2, [r7, #4]
 8009c00:	603b      	str	r3, [r7, #0]
 8009c02:	460b      	mov	r3, r1
 8009c04:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	685c      	ldr	r4, [r3, #4]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	8818      	ldrh	r0, [r3, #0]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	8979      	ldrh	r1, [r7, #10]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	47a0      	blx	r4
 8009c18:	4603      	mov	r3, r0
 8009c1a:	b2db      	uxtb	r3, r3
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd90      	pop	{r4, r7, pc}

08009c24 <RdMulti>:
uint8_t RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	460b      	mov	r3, r1
 8009c32:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689c      	ldr	r4, [r3, #8]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	8818      	ldrh	r0, [r3, #0]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	8979      	ldrh	r1, [r7, #10]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	47a0      	blx	r4
 8009c46:	4603      	mov	r3, r0
 8009c48:	b2db      	uxtb	r3, r3
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd90      	pop	{r4, r7, pc}

08009c52 <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b085      	sub	sp, #20
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	e021      	b.n	8009ca8 <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3301      	adds	r3, #1
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	440b      	add	r3, r1
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	041b      	lsls	r3, r3, #16
 8009c7a:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3302      	adds	r3, #2
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	440b      	add	r3, r1
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	3203      	adds	r2, #3
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	440a      	add	r2, r1
 8009c92:	7812      	ldrb	r2, [r2, #0]
 8009c94:	4313      	orrs	r3, r2
    tmp = (
 8009c96:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	887b      	ldrh	r3, [r7, #2]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d3d9      	bcc.n	8009c64 <SwapBuffer+0x12>
  }
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <WaitMs>:

uint8_t WaitMs(
		VL53L8CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	4798      	blx	r3
 8009cce:	4603      	mov	r3, r0
 8009cd0:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8009cd2:	bf00      	nop
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	4798      	blx	r3
 8009cda:	4603      	mov	r3, r0
 8009cdc:	461a      	mov	r2, r3
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d8f5      	bhi.n	8009cd4 <WaitMs+0x16>

  return 0;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <VL53L8CX_RegisterBusIO>:
  * @param pObj    vl53l8cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_RegisterBusIO(VL53L8CX_Object_t *pObj, VL53L8CX_IO_t *pIO)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <VL53L8CX_RegisterBusIO+0x16>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d103      	bne.n	8009d10 <VL53L8CX_RegisterBusIO+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8009d08:	f06f 0301 	mvn.w	r3, #1
 8009d0c:	60fb      	str	r3, [r7, #12]
 8009d0e:	e033      	b.n	8009d78 <VL53L8CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	891a      	ldrh	r2, [r3, #8]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	68da      	ldr	r2, [r3, #12]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	695a      	ldr	r2, [r3, #20]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	615a      	str	r2, [r3, #20]

    /* fill vl53l8cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	891a      	ldrh	r2, [r3, #8]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	691a      	ldr	r2, [r3, #16]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	695a      	ldr	r2, [r3, #20]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d004      	beq.n	8009d72 <VL53L8CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4798      	blx	r3
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	e002      	b.n	8009d78 <VL53L8CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L8CX_ERROR;
 8009d72:	f04f 33ff 	mov.w	r3, #4294967295
 8009d76:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009d78:	68fb      	ldr	r3, [r7, #12]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <VL53L8CX_Init>:
  * @brief Initializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Init(VL53L8CX_Object_t *pObj)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b084      	sub	sp, #16
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d103      	bne.n	8009d98 <VL53L8CX_Init+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8009d90:	f06f 0301 	mvn.w	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	e02e      	b.n	8009df6 <VL53L8CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <VL53L8CX_Init+0x28>
  {
    ret =  VL53L8CX_ERROR;
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e025      	b.n	8009df6 <VL53L8CX_Init+0x74>
  }
  else if (vl53l8cx_init(&pObj->Dev) != VL53L8CX_STATUS_OK)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3318      	adds	r3, #24
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe f8ce 	bl	8007f50 <vl53l8cx_init>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <VL53L8CX_Init+0x40>
  {
    ret = VL53L8CX_ERROR;
 8009dba:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e019      	b.n	8009df6 <VL53L8CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    pObj->IsBlocking = 0U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
    pObj->IsContinuous = 0U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
    pObj->IsAmbientEnabled = 0U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = 0U;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsInitialized = 1U;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
    ret = VL53L8CX_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009df6:	68fb      	ldr	r3, [r7, #12]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <VL53L8CX_DeInit>:
  * @brief Deinitializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_DeInit(VL53L8CX_Object_t *pObj)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d103      	bne.n	8009e16 <VL53L8CX_DeInit+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8009e0e:	f06f 0301 	mvn.w	r3, #1
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	e018      	b.n	8009e48 <VL53L8CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d110      	bne.n	8009e42 <VL53L8CX_DeInit+0x42>
  {
    /* De-initialize the vl53l8cx interface */
    if (pObj->IO.DeInit() != 0)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	4798      	blx	r3
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <VL53L8CX_DeInit+0x34>
    {
      ret = VL53L8CX_ERROR;
 8009e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	e009      	b.n	8009e48 <VL53L8CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L8CX_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8009e40:	e002      	b.n	8009e48 <VL53L8CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L8CX_ERROR;
 8009e42:	f04f 33ff 	mov.w	r3, #4294967295
 8009e46:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009e48:	68fb      	ldr	r3, [r7, #12]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <VL53L8CX_ReadID>:
  * @param pObj    vl53l8cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ReadID(VL53L8CX_Object_t *pObj, uint32_t *pId)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L8CX_STATUS_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d002      	beq.n	8009e74 <VL53L8CX_ReadID+0x22>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d103      	bne.n	8009e7c <VL53L8CX_ReadID+0x2a>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8009e74:	f06f 0301 	mvn.w	r3, #1
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e045      	b.n	8009f08 <VL53L8CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3318      	adds	r3, #24
 8009e80:	2200      	movs	r2, #0
 8009e82:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7ff fe9f 	bl	8009bca <WrByte>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	461a      	mov	r2, r3
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3318      	adds	r3, #24
 8009e9a:	f107 020a 	add.w	r2, r7, #10
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff fe7d 	bl	8009ba0 <RdByte>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	7afb      	ldrb	r3, [r7, #11]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3318      	adds	r3, #24
 8009eb4:	f107 0209 	add.w	r2, r7, #9
 8009eb8:	2101      	movs	r1, #1
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff fe70 	bl	8009ba0 <RdByte>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3318      	adds	r3, #24
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff fe78 	bl	8009bca <WrByte>
 8009eda:	4603      	mov	r3, r0
 8009edc:	461a      	mov	r2, r3
 8009ede:	7afb      	ldrb	r3, [r7, #11]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8009ee4:	7afb      	ldrb	r3, [r7, #11]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d108      	bne.n	8009efc <VL53L8CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8009eea:	7abb      	ldrb	r3, [r7, #10]
 8009eec:	021b      	lsls	r3, r3, #8
 8009eee:	7a7a      	ldrb	r2, [r7, #9]
 8009ef0:	441a      	add	r2, r3
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	e005      	b.n	8009f08 <VL53L8CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_ERROR;
 8009f02:	f04f 33ff 	mov.w	r3, #4294967295
 8009f06:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009f08:	68fb      	ldr	r3, [r7, #12]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <VL53L8CX_GetCapabilities>:
  * @param pObj    vl53l8cx context object.
  * @param pCap    Pointer to the vl53l8cx capabilities.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetCapabilities(VL53L8CX_Object_t *pObj, VL53L8CX_Capabilities_t *pCap)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b085      	sub	sp, #20
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <VL53L8CX_GetCapabilities+0x16>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d103      	bne.n	8009f30 <VL53L8CX_GetCapabilities+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8009f28:	f06f 0301 	mvn.w	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	e00d      	b.n	8009f4c <VL53L8CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L8CX_RESOLUTION_8X8;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2240      	movs	r2, #64	; 0x40
 8009f34:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L8CX_TARGET_PER_ZONE;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2201      	movs	r2, #1
 8009f46:	60da      	str	r2, [r3, #12]

    ret = VL53L8CX_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
	...

08009f5c <VL53L8CX_ConfigProfile>:
  * @param pObj    vl53l8cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigProfile(VL53L8CX_Object_t *pObj, VL53L8CX_ProfileConfig_t *pConfig)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L8CX_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01b      	beq.n	8009fa8 <VL53L8CX_ConfigProfile+0x4c>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d018      	beq.n	8009fa8 <VL53L8CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L8CX_INVALID_PARAM;
  }

  switch (profile)
 8009f88:	7c7b      	ldrb	r3, [r7, #17]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d822      	bhi.n	8009fd6 <VL53L8CX_ConfigProfile+0x7a>
 8009f90:	a201      	add	r2, pc, #4	; (adr r2, 8009f98 <VL53L8CX_ConfigProfile+0x3c>)
 8009f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f96:	bf00      	nop
 8009f98:	08009faf 	.word	0x08009faf
 8009f9c:	08009fb9 	.word	0x08009fb9
 8009fa0:	08009fc3 	.word	0x08009fc3
 8009fa4:	08009fcd 	.word	0x08009fcd
    return VL53L8CX_INVALID_PARAM;
 8009fa8:	f06f 0301 	mvn.w	r3, #1
 8009fac:	e070      	b.n	800a090 <VL53L8CX_ConfigProfile+0x134>
  {
  case VL53L8CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 8009fae:	2310      	movs	r3, #16
 8009fb0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	74bb      	strb	r3, [r7, #18]
    break;
 8009fb6:	e016      	b.n	8009fe6 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 8009fb8:	2310      	movs	r3, #16
 8009fba:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	74bb      	strb	r3, [r7, #18]
    break;
 8009fc0:	e011      	b.n	8009fe6 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 8009fc2:	2340      	movs	r3, #64	; 0x40
 8009fc4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	74bb      	strb	r3, [r7, #18]
    break;
 8009fca:	e00c      	b.n	8009fe6 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 8009fcc:	2340      	movs	r3, #64	; 0x40
 8009fce:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	74bb      	strb	r3, [r7, #18]
    break;
 8009fd4:	e007      	b.n	8009fe6 <VL53L8CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 8009fda:	2300      	movs	r3, #0
 8009fdc:	74bb      	strb	r3, [r7, #18]
    ret = VL53L8CX_INVALID_PARAM;
 8009fde:	f06f 0301 	mvn.w	r3, #1
 8009fe2:	617b      	str	r3, [r7, #20]
    break;
 8009fe4:	bf00      	nop
  }

  if (ret != VL53L8CX_OK)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <VL53L8CX_ConfigProfile+0x94>
  {
    return ret;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	e04f      	b.n	800a090 <VL53L8CX_ConfigProfile+0x134>
  }
  else if (vl53l8cx_set_resolution(&pObj->Dev, resolution) != VL53L8CX_STATUS_OK)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3318      	adds	r3, #24
 8009ff4:	7cfa      	ldrb	r2, [r7, #19]
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff f95e 	bl	80092ba <vl53l8cx_set_resolution>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <VL53L8CX_ConfigProfile+0xb0>
  {
    ret = VL53L8CX_ERROR;
 800a004:	f04f 33ff 	mov.w	r3, #4294967295
 800a008:	617b      	str	r3, [r7, #20]
 800a00a:	e040      	b.n	800a08e <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L8CX_STATUS_OK)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3318      	adds	r3, #24
 800a010:	7cba      	ldrb	r2, [r7, #18]
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f7ff fa7a 	bl	800950e <vl53l8cx_set_ranging_mode>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <VL53L8CX_ConfigProfile+0xcc>
  {
    ret = VL53L8CX_ERROR;
 800a020:	f04f 33ff 	mov.w	r3, #4294967295
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	e032      	b.n	800a08e <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L8CX_STATUS_OK)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3318      	adds	r3, #24
 800a02c:	68f9      	ldr	r1, [r7, #12]
 800a02e:	4618      	mov	r0, r3
 800a030:	f7ff fa38 	bl	80094a4 <vl53l8cx_set_integration_time_ms>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <VL53L8CX_ConfigProfile+0xe6>
  {
    ret = VL53L8CX_ERROR;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295
 800a03e:	617b      	str	r3, [r7, #20]
 800a040:	e025      	b.n	800a08e <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L8CX_STATUS_OK)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3318      	adds	r3, #24
 800a046:	7afa      	ldrb	r2, [r7, #11]
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff fa09 	bl	8009462 <vl53l8cx_set_ranging_frequency_hz>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <VL53L8CX_ConfigProfile+0x102>
  {
    ret = VL53L8CX_ERROR;
 800a056:	f04f 33ff 	mov.w	r3, #4294967295
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	e017      	b.n	800a08e <VL53L8CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	bf14      	ite	ne
 800a066:	2301      	movne	r3, #1
 800a068:	2300      	moveq	r3, #0
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	461a      	mov	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	bf14      	ite	ne
 800a07c:	2301      	movne	r3, #1
 800a07e:	2300      	moveq	r3, #0
 800a080:	b2db      	uxtb	r3, r3
 800a082:	461a      	mov	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951

    ret = VL53L8CX_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800a08e:	697b      	ldr	r3, [r7, #20]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3718      	adds	r7, #24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <VL53L8CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigROI(VL53L8CX_Object_t *pObj, VL53L8CX_ROIConfig_t *pROIConfig)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L8CX_NOT_IMPLEMENTED;
 800a0a2:	f06f 0303 	mvn.w	r3, #3
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
	...

0800a0b4 <VL53L8CX_ConfigIT>:
  * @param pObj    vl53l8cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigIT(VL53L8CX_Object_t *pObj, VL53L8CX_ITConfig_t *pITConfig)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	72bb      	strb	r3, [r7, #10]
  static VL53L8CX_DetectionThresholds thresholds[VL53L8CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <VL53L8CX_ConfigIT+0x1a>
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d103      	bne.n	800a0d6 <VL53L8CX_ConfigIT+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a0ce:	f06f 0301 	mvn.w	r3, #1
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	e09f      	b.n	800a216 <VL53L8CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L8CX_IT_DEFAULT)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2bff      	cmp	r3, #255	; 0xff
 800a0dc:	d113      	bne.n	800a106 <VL53L8CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	3318      	adds	r3, #24
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff fbbd 	bl	8009864 <vl53l8cx_set_detection_thresholds_enable>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	7abb      	ldrb	r3, [r7, #10]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 800a0f4:	7abb      	ldrb	r3, [r7, #10]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <VL53L8CX_ConfigIT+0x4c>
 800a0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a0fe:	e000      	b.n	800a102 <VL53L8CX_ConfigIT+0x4e>
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	e087      	b.n	800a216 <VL53L8CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l8cx_get_resolution(&pObj->Dev, &res);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3318      	adds	r3, #24
 800a10a:	f107 0209 	add.w	r2, r7, #9
 800a10e:	4611      	mov	r1, r2
 800a110:	4618      	mov	r0, r3
 800a112:	f7ff f8ad 	bl	8009270 <vl53l8cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 800a116:	2300      	movs	r3, #0
 800a118:	72fb      	strb	r3, [r7, #11]
 800a11a:	e044      	b.n	800a1a6 <VL53L8CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 800a11c:	7afa      	ldrb	r2, [r7, #11]
 800a11e:	4940      	ldr	r1, [pc, #256]	; (800a220 <VL53L8CX_ConfigIT+0x16c>)
 800a120:	4613      	mov	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	440b      	add	r3, r1
 800a12a:	330a      	adds	r3, #10
 800a12c:	7afa      	ldrb	r2, [r7, #11]
 800a12e:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L8CX_DISTANCE_MM;
 800a130:	7afa      	ldrb	r2, [r7, #11]
 800a132:	493b      	ldr	r1, [pc, #236]	; (800a220 <VL53L8CX_ConfigIT+0x16c>)
 800a134:	4613      	mov	r3, r2
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	440b      	add	r3, r1
 800a13e:	3308      	adds	r3, #8
 800a140:	2201      	movs	r2, #1
 800a142:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	7afa      	ldrb	r2, [r7, #11]
 800a14a:	b2d8      	uxtb	r0, r3
 800a14c:	4934      	ldr	r1, [pc, #208]	; (800a220 <VL53L8CX_ConfigIT+0x16c>)
 800a14e:	4613      	mov	r3, r2
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	440b      	add	r3, r1
 800a158:	3309      	adds	r3, #9
 800a15a:	4602      	mov	r2, r0
 800a15c:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L8CX_OPERATION_NONE;
 800a15e:	7afa      	ldrb	r2, [r7, #11]
 800a160:	492f      	ldr	r1, [pc, #188]	; (800a220 <VL53L8CX_ConfigIT+0x16c>)
 800a162:	4613      	mov	r3, r2
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	4413      	add	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	440b      	add	r3, r1
 800a16c:	330b      	adds	r3, #11
 800a16e:	2200      	movs	r2, #0
 800a170:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	7afa      	ldrb	r2, [r7, #11]
 800a178:	4618      	mov	r0, r3
 800a17a:	4929      	ldr	r1, [pc, #164]	; (800a220 <VL53L8CX_ConfigIT+0x16c>)
 800a17c:	4613      	mov	r3, r2
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	4413      	add	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	440b      	add	r3, r1
 800a186:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	7afa      	ldrb	r2, [r7, #11]
 800a18e:	4618      	mov	r0, r3
 800a190:	4923      	ldr	r1, [pc, #140]	; (800a220 <VL53L8CX_ConfigIT+0x16c>)
 800a192:	4613      	mov	r3, r2
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	3304      	adds	r3, #4
 800a19e:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 800a1a0:	7afb      	ldrb	r3, [r7, #11]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	72fb      	strb	r3, [r7, #11]
 800a1a6:	7a7b      	ldrb	r3, [r7, #9]
 800a1a8:	7afa      	ldrb	r2, [r7, #11]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d3b6      	bcc.n	800a11c <VL53L8CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L8CX_LAST_THRESHOLD;
 800a1ae:	7afa      	ldrb	r2, [r7, #11]
 800a1b0:	491b      	ldr	r1, [pc, #108]	; (800a220 <VL53L8CX_ConfigIT+0x16c>)
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	440b      	add	r3, r1
 800a1bc:	330a      	adds	r3, #10
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	7afa      	ldrb	r2, [r7, #11]
 800a1c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1c6:	b2d8      	uxtb	r0, r3
 800a1c8:	4915      	ldr	r1, [pc, #84]	; (800a220 <VL53L8CX_ConfigIT+0x16c>)
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	4413      	add	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	440b      	add	r3, r1
 800a1d4:	330a      	adds	r3, #10
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l8cx_set_detection_thresholds(&pObj->Dev, thresholds);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3318      	adds	r3, #24
 800a1de:	4910      	ldr	r1, [pc, #64]	; (800a220 <VL53L8CX_ConfigIT+0x16c>)
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7ff fb85 	bl	80098f0 <vl53l8cx_set_detection_thresholds>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	7abb      	ldrb	r3, [r7, #10]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3318      	adds	r3, #24
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff fb34 	bl	8009864 <vl53l8cx_set_detection_thresholds_enable>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	461a      	mov	r2, r3
 800a200:	7abb      	ldrb	r3, [r7, #10]
 800a202:	4313      	orrs	r3, r2
 800a204:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 800a206:	7abb      	ldrb	r3, [r7, #10]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <VL53L8CX_ConfigIT+0x15e>
 800a20c:	f04f 33ff 	mov.w	r3, #4294967295
 800a210:	e000      	b.n	800a214 <VL53L8CX_ConfigIT+0x160>
 800a212:	2300      	movs	r3, #0
 800a214:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a216:	68fb      	ldr	r3, [r7, #12]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	200035bc 	.word	0x200035bc

0800a224 <VL53L8CX_GetDistance>:
  * @param pObj    vl53l8cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetDistance(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <VL53L8CX_GetDistance+0x16>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d103      	bne.n	800a242 <VL53L8CX_GetDistance+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a23a:	f06f 0301 	mvn.w	r3, #1
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	e019      	b.n	800a276 <VL53L8CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d103      	bne.n	800a254 <VL53L8CX_GetDistance+0x30>
  {
    ret = VL53L8CX_ERROR;
 800a24c:	f04f 33ff 	mov.w	r3, #4294967295
 800a250:	60fb      	str	r3, [r7, #12]
 800a252:	e010      	b.n	800a276 <VL53L8CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d106      	bne.n	800a26c <VL53L8CX_GetDistance+0x48>
    {
      ret = vl53l8cx_poll_for_measurement(pObj, V53L8CX_POLL_TIMEOUT);
 800a25e:	f241 3188 	movw	r1, #5000	; 0x1388
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f93a 	bl	800a4dc <vl53l8cx_poll_for_measurement>
 800a268:	60f8      	str	r0, [r7, #12]
 800a26a:	e004      	b.n	800a276 <VL53L8CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l8cx_poll_for_measurement(pObj, 0U);
 800a26c:	2100      	movs	r1, #0
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f934 	bl	800a4dc <vl53l8cx_poll_for_measurement>
 800a274:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L8CX_OK)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d104      	bne.n	800a286 <VL53L8CX_GetDistance+0x62>
  {
    ret = vl53l8cx_get_result(pObj, pResult);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f960 	bl	800a544 <vl53l8cx_get_result>
 800a284:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a286:	68fb      	ldr	r3, [r7, #12]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <VL53L8CX_Start>:
  * @param pObj    vl53l8cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Start(VL53L8CX_Object_t *pObj, uint32_t Mode)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d103      	bne.n	800a2a8 <VL53L8CX_Start+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a2a0:	f06f 0301 	mvn.w	r3, #1
 800a2a4:	60fb      	str	r3, [r7, #12]
 800a2a6:	e04c      	b.n	800a342 <VL53L8CX_Start+0xb2>
  }
  else if (vl53l8cx_start_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3318      	adds	r3, #24
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe fb6f 	bl	8008990 <vl53l8cx_start_ranging>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d141      	bne.n	800a33c <VL53L8CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L8CX_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	2b03      	cmp	r3, #3
 800a2ca:	d82f      	bhi.n	800a32c <VL53L8CX_Start+0x9c>
 800a2cc:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <VL53L8CX_Start+0x44>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a2e5 	.word	0x0800a2e5
 800a2d8:	0800a2f7 	.word	0x0800a2f7
 800a2dc:	0800a309 	.word	0x0800a309
 800a2e0:	0800a31b 	.word	0x0800a31b
    {
      case VL53L8CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800a2f4:	e025      	b.n	800a342 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800a306:	e01c      	b.n	800a342 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800a318:	e013      	b.n	800a342 <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800a32a:	e00a      	b.n	800a342 <VL53L8CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
        ret = VL53L8CX_INVALID_PARAM;
 800a334:	f06f 0301 	mvn.w	r3, #1
 800a338:	60fb      	str	r3, [r7, #12]
        break;
 800a33a:	e002      	b.n	800a342 <VL53L8CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L8CX_ERROR;
 800a33c:	f04f 33ff 	mov.w	r3, #4294967295
 800a340:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <VL53L8CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Stop(VL53L8CX_Object_t *pObj)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <VL53L8CX_Stop+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a35a:	f06f 0301 	mvn.w	r3, #1
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	e01a      	b.n	800a398 <VL53L8CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d103      	bne.n	800a374 <VL53L8CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L8CX_ERROR;
 800a36c:	f04f 33ff 	mov.w	r3, #4294967295
 800a370:	60fb      	str	r3, [r7, #12]
 800a372:	e011      	b.n	800a398 <VL53L8CX_Stop+0x4c>
  }
  else if (vl53l8cx_stop_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3318      	adds	r3, #24
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fe fc99 	bl	8008cb0 <vl53l8cx_stop_ranging>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <VL53L8CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L8CX_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	e002      	b.n	800a398 <VL53L8CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L8CX_ERROR;
 800a392:	f04f 33ff 	mov.w	r3, #4294967295
 800a396:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a398:	68fb      	ldr	r3, [r7, #12]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <VL53L8CX_SetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param Address     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetAddress(VL53L8CX_Object_t *pObj, uint32_t Address)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d103      	bne.n	800a3ba <VL53L8CX_SetAddress+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a3b2:	f06f 0301 	mvn.w	r3, #1
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	e016      	b.n	800a3e8 <VL53L8CX_SetAddress+0x46>
  }
  else if (vl53l8cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L8CX_STATUS_OK)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3318      	adds	r3, #24
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	b2d2      	uxtb	r2, r2
 800a3c2:	b292      	uxth	r2, r2
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe f9ea 	bl	80087a0 <vl53l8cx_set_i2c_address>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <VL53L8CX_SetAddress+0x38>
  {
    ret = VL53L8CX_ERROR;
 800a3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	e006      	b.n	800a3e8 <VL53L8CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	811a      	strh	r2, [r3, #8]
    ret = VL53L8CX_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <VL53L8CX_GetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetAddress(VL53L8CX_Object_t *pObj, uint32_t *pAddress)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d002      	beq.n	800a408 <VL53L8CX_GetAddress+0x16>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d103      	bne.n	800a410 <VL53L8CX_GetAddress+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a408:	f06f 0301 	mvn.w	r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]
 800a40e:	e006      	b.n	800a41e <VL53L8CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	891b      	ldrh	r3, [r3, #8]
 800a414:	461a      	mov	r2, r3
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a41e:	68fb      	ldr	r3, [r7, #12]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <VL53L8CX_SetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetPowerMode(VL53L8CX_Object_t *pObj, uint32_t PowerMode)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d103      	bne.n	800a444 <VL53L8CX_SetPowerMode+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a43c:	f06f 0301 	mvn.w	r3, #1
 800a440:	60fb      	str	r3, [r7, #12]
 800a442:	e01a      	b.n	800a47a <VL53L8CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L8CX_POWER_MODE_SLEEP) &&
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d006      	beq.n	800a458 <VL53L8CX_SetPowerMode+0x2c>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d003      	beq.n	800a458 <VL53L8CX_SetPowerMode+0x2c>
           (PowerMode != VL53L8CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a450:	f06f 0301 	mvn.w	r3, #1
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	e010      	b.n	800a47a <VL53L8CX_SetPowerMode+0x4e>
  }
  else if (vl53l8cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L8CX_STATUS_OK)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3318      	adds	r3, #24
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	b2d2      	uxtb	r2, r2
 800a460:	4611      	mov	r1, r2
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe fa15 	bl	8008892 <vl53l8cx_set_power_mode>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <VL53L8CX_SetPowerMode+0x4a>
  {
    ret = VL53L8CX_ERROR;
 800a46e:	f04f 33ff 	mov.w	r3, #4294967295
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	e001      	b.n	800a47a <VL53L8CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L8CX_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a47a:	68fb      	ldr	r3, [r7, #12]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <VL53L8CX_GetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetPowerMode(VL53L8CX_Object_t *pObj, uint32_t *pPowerMode)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <VL53L8CX_GetPowerMode+0x16>
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d103      	bne.n	800a4a2 <VL53L8CX_GetPowerMode+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a49a:	f06f 0301 	mvn.w	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e017      	b.n	800a4d2 <VL53L8CX_GetPowerMode+0x4e>
  }
  else if (vl53l8cx_get_power_mode(&pObj->Dev, &powermode) != VL53L8CX_STATUS_OK)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3318      	adds	r3, #24
 800a4a6:	f107 020b 	add.w	r2, r7, #11
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fe f9ad 	bl	800880c <vl53l8cx_get_power_mode>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d006      	beq.n	800a4c6 <VL53L8CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_ERROR;
 800a4be:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	e005      	b.n	800a4d2 <VL53L8CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 800a4c6:	7afb      	ldrb	r3, [r7, #11]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <vl53l8cx_poll_for_measurement>:

/** @defgroup VL53L8CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l8cx_poll_for_measurement(VL53L8CX_Object_t *pObj, uint32_t Timeout)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d103      	bne.n	800a4f8 <vl53l8cx_poll_for_measurement+0x1c>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a4f0:	f06f 0301 	mvn.w	r3, #1
 800a4f4:	617b      	str	r3, [r7, #20]
 800a4f6:	e01f      	b.n	800a538 <vl53l8cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L8CX_TIMEOUT;
 800a4f8:	f06f 0302 	mvn.w	r3, #2
 800a4fc:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	4798      	blx	r3
 800a504:	4603      	mov	r3, r0
 800a506:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l8cx_check_data_ready(&pObj->Dev, &NewDataReady);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3318      	adds	r3, #24
 800a50c:	f107 020f 	add.w	r2, r7, #15
 800a510:	4611      	mov	r1, r2
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe fc97 	bl	8008e46 <vl53l8cx_check_data_ready>

      if (NewDataReady == 1U)
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d102      	bne.n	800a524 <vl53l8cx_poll_for_measurement+0x48>
      {
        ret = VL53L8CX_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	617b      	str	r3, [r7, #20]
        break;
 800a522:	e009      	b.n	800a538 <vl53l8cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	4798      	blx	r3
 800a52a:	4603      	mov	r3, r0
 800a52c:	461a      	mov	r2, r3
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d8e7      	bhi.n	800a508 <vl53l8cx_poll_for_measurement+0x2c>

  }

  return ret;
 800a538:	697b      	ldr	r3, [r7, #20]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <vl53l8cx_get_result>:

static int32_t vl53l8cx_get_result(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 800a544:	b590      	push	{r4, r7, lr}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L8CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <vl53l8cx_get_result+0x16>
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <vl53l8cx_get_result+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a55a:	f06f 0301 	mvn.w	r3, #1
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	e0cf      	b.n	800a702 <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_resolution(&pObj->Dev, &resolution) != VL53L8CX_STATUS_OK)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	3318      	adds	r3, #24
 800a566:	f107 0208 	add.w	r2, r7, #8
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fe7f 	bl	8009270 <vl53l8cx_get_resolution>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d003      	beq.n	800a580 <vl53l8cx_get_result+0x3c>
  {
    ret = VL53L8CX_ERROR;
 800a578:	f04f 33ff 	mov.w	r3, #4294967295
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	e0c0      	b.n	800a702 <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_ranging_data(&pObj->Dev, &data) != VL53L8CX_STATUS_OK)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3318      	adds	r3, #24
 800a584:	4961      	ldr	r1, [pc, #388]	; (800a70c <vl53l8cx_get_result+0x1c8>)
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe fcae 	bl	8008ee8 <vl53l8cx_get_ranging_data>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <vl53l8cx_get_result+0x56>
  {
    ret = VL53L8CX_ERROR;
 800a592:	f04f 33ff 	mov.w	r3, #4294967295
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	e0b3      	b.n	800a702 <vl53l8cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 800a59a:	7a3b      	ldrb	r3, [r7, #8]
 800a59c:	461a      	mov	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	72fb      	strb	r3, [r7, #11]
 800a5a6:	e0a5      	b.n	800a6f4 <vl53l8cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 800a5a8:	7afb      	ldrb	r3, [r7, #11]
 800a5aa:	7afa      	ldrb	r2, [r7, #11]
 800a5ac:	4957      	ldr	r1, [pc, #348]	; (800a70c <vl53l8cx_get_result+0x1c8>)
 800a5ae:	440b      	add	r3, r1
 800a5b0:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	440b      	add	r3, r1
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	72bb      	strb	r3, [r7, #10]
 800a5ca:	e087      	b.n	800a6dc <vl53l8cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 800a5cc:	7afa      	ldrb	r2, [r7, #11]
 800a5ce:	7abb      	ldrb	r3, [r7, #10]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	4a4e      	ldr	r2, [pc, #312]	; (800a70c <vl53l8cx_get_result+0x1c8>)
 800a5d4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a5d8:	005b      	lsls	r3, r3, #1
 800a5da:	4413      	add	r3, r2
 800a5dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a5e0:	7afa      	ldrb	r2, [r7, #11]
 800a5e2:	7ab8      	ldrb	r0, [r7, #10]
 800a5e4:	461c      	mov	r4, r3
 800a5e6:	6839      	ldr	r1, [r7, #0]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	4403      	add	r3, r0
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	440b      	add	r3, r1
 800a5f4:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d116      	bne.n	800a62e <vl53l8cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 800a600:	7afb      	ldrb	r3, [r7, #11]
 800a602:	4a42      	ldr	r2, [pc, #264]	; (800a70c <vl53l8cx_get_result+0x1c8>)
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	7afa      	ldrb	r2, [r7, #11]
 800a60c:	7ab8      	ldrb	r0, [r7, #10]
 800a60e:	ee07 3a90 	vmov	s15, r3
 800a612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	4403      	add	r3, r0
 800a620:	3302      	adds	r3, #2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	3308      	adds	r3, #8
 800a628:	edc3 7a00 	vstr	s15, [r3]
 800a62c:	e00d      	b.n	800a64a <vl53l8cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 800a62e:	7afa      	ldrb	r2, [r7, #11]
 800a630:	7ab8      	ldrb	r0, [r7, #10]
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	4403      	add	r3, r0
 800a63c:	3302      	adds	r3, #2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	440b      	add	r3, r1
 800a642:	3308      	adds	r3, #8
 800a644:	f04f 0200 	mov.w	r2, #0
 800a648:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 800a650:	2b01      	cmp	r3, #1
 800a652:	d119      	bne.n	800a688 <vl53l8cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 800a654:	7afa      	ldrb	r2, [r7, #11]
 800a656:	7abb      	ldrb	r3, [r7, #10]
 800a658:	4413      	add	r3, r2
 800a65a:	4a2c      	ldr	r2, [pc, #176]	; (800a70c <vl53l8cx_get_result+0x1c8>)
 800a65c:	3350      	adds	r3, #80	; 0x50
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4413      	add	r3, r2
 800a662:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 800a664:	7afa      	ldrb	r2, [r7, #11]
 800a666:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 800a668:	ee07 3a90 	vmov	s15, r3
 800a66c:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	4403      	add	r3, r0
 800a67a:	3304      	adds	r3, #4
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	440b      	add	r3, r1
 800a680:	3304      	adds	r3, #4
 800a682:	edc3 7a00 	vstr	s15, [r3]
 800a686:	e00d      	b.n	800a6a4 <vl53l8cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 800a688:	7afa      	ldrb	r2, [r7, #11]
 800a68a:	7ab8      	ldrb	r0, [r7, #10]
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	4403      	add	r3, r0
 800a696:	3304      	adds	r3, #4
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	440b      	add	r3, r1
 800a69c:	3304      	adds	r3, #4
 800a69e:	f04f 0200 	mov.w	r2, #0
 800a6a2:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 800a6a4:	7afa      	ldrb	r2, [r7, #11]
 800a6a6:	7abb      	ldrb	r3, [r7, #10]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	4a18      	ldr	r2, [pc, #96]	; (800a70c <vl53l8cx_get_result+0x1c8>)
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a6b2:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l8cx_map_target_status(target_status);
 800a6b4:	7a7b      	ldrb	r3, [r7, #9]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 f82a 	bl	800a710 <vl53l8cx_map_target_status>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	7afa      	ldrb	r2, [r7, #11]
 800a6c0:	7ab8      	ldrb	r0, [r7, #10]
 800a6c2:	461c      	mov	r4, r3
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	4403      	add	r3, r0
 800a6ce:	3302      	adds	r3, #2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	440b      	add	r3, r1
 800a6d4:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 800a6d6:	7abb      	ldrb	r3, [r7, #10]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	72bb      	strb	r3, [r7, #10]
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	4a0b      	ldr	r2, [pc, #44]	; (800a70c <vl53l8cx_get_result+0x1c8>)
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a6e6:	7aba      	ldrb	r2, [r7, #10]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	f4ff af6f 	bcc.w	800a5cc <vl53l8cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 800a6ee:	7afb      	ldrb	r3, [r7, #11]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	72fb      	strb	r3, [r7, #11]
 800a6f4:	7a3b      	ldrb	r3, [r7, #8]
 800a6f6:	7afa      	ldrb	r2, [r7, #11]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	f4ff af55 	bcc.w	800a5a8 <vl53l8cx_get_result+0x64>
      }
    }

    ret = VL53L8CX_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a702:	68fb      	ldr	r3, [r7, #12]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd90      	pop	{r4, r7, pc}
 800a70c:	200038bc 	.word	0x200038bc

0800a710 <vl53l8cx_map_target_status>:

static uint8_t vl53l8cx_map_target_status(uint8_t status)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	2b05      	cmp	r3, #5
 800a71e:	d002      	beq.n	800a726 <vl53l8cx_map_target_status+0x16>
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	2b09      	cmp	r3, #9
 800a724:	d102      	bne.n	800a72c <vl53l8cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 800a726:	2300      	movs	r3, #0
 800a728:	73fb      	strb	r3, [r7, #15]
 800a72a:	e007      	b.n	800a73c <vl53l8cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 800a72c:	79fb      	ldrb	r3, [r7, #7]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d102      	bne.n	800a738 <vl53l8cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800a732:	23ff      	movs	r3, #255	; 0xff
 800a734:	73fb      	strb	r3, [r7, #15]
 800a736:	e001      	b.n	800a73c <vl53l8cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 800a738:	79fb      	ldrb	r3, [r7, #7]
 800a73a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
	...

0800a74c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800a750:	4b26      	ldr	r3, [pc, #152]	; (800a7ec <SystemInit+0xa0>)
 800a752:	2200      	movs	r2, #0
 800a754:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800a756:	4b25      	ldr	r3, [pc, #148]	; (800a7ec <SystemInit+0xa0>)
 800a758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75c:	4a23      	ldr	r2, [pc, #140]	; (800a7ec <SystemInit+0xa0>)
 800a75e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a762:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a770:	f043 0301 	orr.w	r3, r3, #1
 800a774:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800a776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a77a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800a77e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800a780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a78a:	4b19      	ldr	r3, [pc, #100]	; (800a7f0 <SystemInit+0xa4>)
 800a78c:	4013      	ands	r3, r2
 800a78e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800a790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a79c:	f023 0305 	bic.w	r3, r3, #5
 800a7a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800a7a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7b0:	f023 0301 	bic.w	r3, r3, #1
 800a7b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800a7b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7bc:	4a0d      	ldr	r2, [pc, #52]	; (800a7f4 <SystemInit+0xa8>)
 800a7be:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800a7c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7c4:	4a0b      	ldr	r2, [pc, #44]	; (800a7f4 <SystemInit+0xa8>)
 800a7c6:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a7c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a7d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7dc:	2200      	movs	r2, #0
 800a7de:	619a      	str	r2, [r3, #24]
}
 800a7e0:	bf00      	nop
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	e000ed00 	.word	0xe000ed00
 800a7f0:	faf6fefb 	.word	0xfaf6fefb
 800a7f4:	22041000 	.word	0x22041000

0800a7f8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800a7fc:	4b05      	ldr	r3, [pc, #20]	; (800a814 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	4a04      	ldr	r2, [pc, #16]	; (800a814 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800a802:	f043 0301 	orr.w	r3, r3, #1
 800a806:	6053      	str	r3, [r2, #4]
}
 800a808:	bf00      	nop
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	e0042000 	.word	0xe0042000

0800a818 <LL_DBGMCU_EnableDBGStopMode>:
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800a81c:	4b05      	ldr	r3, [pc, #20]	; (800a834 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	4a04      	ldr	r2, [pc, #16]	; (800a834 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800a822:	f043 0302 	orr.w	r3, r3, #2
 800a826:	6053      	str	r3, [r2, #4]
}
 800a828:	bf00      	nop
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	e0042000 	.word	0xe0042000

0800a838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a842:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <HAL_Init+0x3c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a0b      	ldr	r2, [pc, #44]	; (800a874 <HAL_Init+0x3c>)
 800a848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a84c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a84e:	2003      	movs	r0, #3
 800a850:	f000 f9e0 	bl	800ac14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a854:	2000      	movs	r0, #0
 800a856:	f000 f80f 	bl	800a878 <HAL_InitTick>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d002      	beq.n	800a866 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	71fb      	strb	r3, [r7, #7]
 800a864:	e001      	b.n	800a86a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a866:	f7f9 fc88 	bl	800417a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a86a:	79fb      	ldrb	r3, [r7, #7]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	58004000 	.word	0x58004000

0800a878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800a884:	4b17      	ldr	r3, [pc, #92]	; (800a8e4 <HAL_InitTick+0x6c>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d024      	beq.n	800a8d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a88c:	f004 f9bc 	bl	800ec08 <HAL_RCC_GetHCLKFreq>
 800a890:	4602      	mov	r2, r0
 800a892:	4b14      	ldr	r3, [pc, #80]	; (800a8e4 <HAL_InitTick+0x6c>)
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	4619      	mov	r1, r3
 800a898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a89c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 f9f6 	bl	800ac96 <HAL_SYSTICK_Config>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10f      	bne.n	800a8d0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b0f      	cmp	r3, #15
 800a8b4:	d809      	bhi.n	800a8ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	6879      	ldr	r1, [r7, #4]
 800a8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a8be:	f000 f9b4 	bl	800ac2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a8c2:	4a09      	ldr	r2, [pc, #36]	; (800a8e8 <HAL_InitTick+0x70>)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	e007      	b.n	800a8da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	73fb      	strb	r3, [r7, #15]
 800a8ce:	e004      	b.n	800a8da <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	73fb      	strb	r3, [r7, #15]
 800a8d4:	e001      	b.n	800a8da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	200000e4 	.word	0x200000e4
 800a8e8:	200000e0 	.word	0x200000e0

0800a8ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a8f0:	4b06      	ldr	r3, [pc, #24]	; (800a90c <HAL_IncTick+0x20>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	4b06      	ldr	r3, [pc, #24]	; (800a910 <HAL_IncTick+0x24>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	4a04      	ldr	r2, [pc, #16]	; (800a910 <HAL_IncTick+0x24>)
 800a8fe:	6013      	str	r3, [r2, #0]
}
 800a900:	bf00      	nop
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	200000e4 	.word	0x200000e4
 800a910:	20003c8c 	.word	0x20003c8c

0800a914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a914:	b480      	push	{r7}
 800a916:	af00      	add	r7, sp, #0
  return uwTick;
 800a918:	4b03      	ldr	r3, [pc, #12]	; (800a928 <HAL_GetTick+0x14>)
 800a91a:	681b      	ldr	r3, [r3, #0]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	20003c8c 	.word	0x20003c8c

0800a92c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800a92c:	b480      	push	{r7}
 800a92e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800a930:	4b03      	ldr	r3, [pc, #12]	; (800a940 <HAL_GetTickPrio+0x14>)
 800a932:	681b      	ldr	r3, [r3, #0]
}
 800a934:	4618      	mov	r0, r3
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	200000e0 	.word	0x200000e0

0800a944 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800a944:	b480      	push	{r7}
 800a946:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800a948:	4b03      	ldr	r3, [pc, #12]	; (800a958 <HAL_GetTickFreq+0x14>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	200000e4 	.word	0x200000e4

0800a95c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800a960:	4b05      	ldr	r3, [pc, #20]	; (800a978 <HAL_SuspendTick+0x1c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a04      	ldr	r2, [pc, #16]	; (800a978 <HAL_SuspendTick+0x1c>)
 800a966:	f023 0302 	bic.w	r3, r3, #2
 800a96a:	6013      	str	r3, [r2, #0]
}
 800a96c:	bf00      	nop
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	e000e010 	.word	0xe000e010

0800a97c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800a97c:	b480      	push	{r7}
 800a97e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800a980:	4b05      	ldr	r3, [pc, #20]	; (800a998 <HAL_ResumeTick+0x1c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a04      	ldr	r2, [pc, #16]	; (800a998 <HAL_ResumeTick+0x1c>)
 800a986:	f043 0302 	orr.w	r3, r3, #2
 800a98a:	6013      	str	r3, [r2, #0]
}
 800a98c:	bf00      	nop
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	e000e010 	.word	0xe000e010

0800a99c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800a9a0:	f7ff ff2a 	bl	800a7f8 <LL_DBGMCU_EnableDBGSleepMode>
}
 800a9a4:	bf00      	nop
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800a9ac:	f7ff ff34 	bl	800a818 <LL_DBGMCU_EnableDBGStopMode>
}
 800a9b0:	bf00      	nop
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a9c4:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <__NVIC_SetPriorityGrouping+0x44>)
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a9dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a9e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a9e6:	4a04      	ldr	r2, [pc, #16]	; (800a9f8 <__NVIC_SetPriorityGrouping+0x44>)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	60d3      	str	r3, [r2, #12]
}
 800a9ec:	bf00      	nop
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	e000ed00 	.word	0xe000ed00

0800a9fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aa00:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <__NVIC_GetPriorityGrouping+0x18>)
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	0a1b      	lsrs	r3, r3, #8
 800aa06:	f003 0307 	and.w	r3, r3, #7
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	e000ed00 	.word	0xe000ed00

0800aa18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	db0b      	blt.n	800aa42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aa2a:	79fb      	ldrb	r3, [r7, #7]
 800aa2c:	f003 021f 	and.w	r2, r3, #31
 800aa30:	4907      	ldr	r1, [pc, #28]	; (800aa50 <__NVIC_EnableIRQ+0x38>)
 800aa32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa36:	095b      	lsrs	r3, r3, #5
 800aa38:	2001      	movs	r0, #1
 800aa3a:	fa00 f202 	lsl.w	r2, r0, r2
 800aa3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800aa42:	bf00      	nop
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	e000e100 	.word	0xe000e100

0800aa54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	db12      	blt.n	800aa8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aa66:	79fb      	ldrb	r3, [r7, #7]
 800aa68:	f003 021f 	and.w	r2, r3, #31
 800aa6c:	490a      	ldr	r1, [pc, #40]	; (800aa98 <__NVIC_DisableIRQ+0x44>)
 800aa6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa72:	095b      	lsrs	r3, r3, #5
 800aa74:	2001      	movs	r0, #1
 800aa76:	fa00 f202 	lsl.w	r2, r0, r2
 800aa7a:	3320      	adds	r3, #32
 800aa7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800aa80:	f3bf 8f4f 	dsb	sy
}
 800aa84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aa86:	f3bf 8f6f 	isb	sy
}
 800aa8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	e000e100 	.word	0xe000e100

0800aa9c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aaa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	db0c      	blt.n	800aac8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	f003 021f 	and.w	r2, r3, #31
 800aab4:	4907      	ldr	r1, [pc, #28]	; (800aad4 <__NVIC_SetPendingIRQ+0x38>)
 800aab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaba:	095b      	lsrs	r3, r3, #5
 800aabc:	2001      	movs	r0, #1
 800aabe:	fa00 f202 	lsl.w	r2, r0, r2
 800aac2:	3340      	adds	r3, #64	; 0x40
 800aac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	e000e100 	.word	0xe000e100

0800aad8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	db0c      	blt.n	800ab04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aaea:	79fb      	ldrb	r3, [r7, #7]
 800aaec:	f003 021f 	and.w	r2, r3, #31
 800aaf0:	4907      	ldr	r1, [pc, #28]	; (800ab10 <__NVIC_ClearPendingIRQ+0x38>)
 800aaf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aaf6:	095b      	lsrs	r3, r3, #5
 800aaf8:	2001      	movs	r0, #1
 800aafa:	fa00 f202 	lsl.w	r2, r0, r2
 800aafe:	3360      	adds	r3, #96	; 0x60
 800ab00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ab04:	bf00      	nop
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	e000e100 	.word	0xe000e100

0800ab14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	6039      	str	r1, [r7, #0]
 800ab1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	db0a      	blt.n	800ab3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	490c      	ldr	r1, [pc, #48]	; (800ab60 <__NVIC_SetPriority+0x4c>)
 800ab2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab32:	0112      	lsls	r2, r2, #4
 800ab34:	b2d2      	uxtb	r2, r2
 800ab36:	440b      	add	r3, r1
 800ab38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ab3c:	e00a      	b.n	800ab54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	4908      	ldr	r1, [pc, #32]	; (800ab64 <__NVIC_SetPriority+0x50>)
 800ab44:	79fb      	ldrb	r3, [r7, #7]
 800ab46:	f003 030f 	and.w	r3, r3, #15
 800ab4a:	3b04      	subs	r3, #4
 800ab4c:	0112      	lsls	r2, r2, #4
 800ab4e:	b2d2      	uxtb	r2, r2
 800ab50:	440b      	add	r3, r1
 800ab52:	761a      	strb	r2, [r3, #24]
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	e000e100 	.word	0xe000e100
 800ab64:	e000ed00 	.word	0xe000ed00

0800ab68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b089      	sub	sp, #36	; 0x24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	f1c3 0307 	rsb	r3, r3, #7
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	bf28      	it	cs
 800ab86:	2304      	movcs	r3, #4
 800ab88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	2b06      	cmp	r3, #6
 800ab90:	d902      	bls.n	800ab98 <NVIC_EncodePriority+0x30>
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	3b03      	subs	r3, #3
 800ab96:	e000      	b.n	800ab9a <NVIC_EncodePriority+0x32>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	fa02 f303 	lsl.w	r3, r2, r3
 800aba6:	43da      	mvns	r2, r3
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	401a      	ands	r2, r3
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800abb0:	f04f 31ff 	mov.w	r1, #4294967295
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	fa01 f303 	lsl.w	r3, r1, r3
 800abba:	43d9      	mvns	r1, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800abc0:	4313      	orrs	r3, r2
         );
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3724      	adds	r7, #36	; 0x24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3b01      	subs	r3, #1
 800abdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800abe0:	d301      	bcc.n	800abe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800abe2:	2301      	movs	r3, #1
 800abe4:	e00f      	b.n	800ac06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800abe6:	4a0a      	ldr	r2, [pc, #40]	; (800ac10 <SysTick_Config+0x40>)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3b01      	subs	r3, #1
 800abec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800abee:	210f      	movs	r1, #15
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295
 800abf4:	f7ff ff8e 	bl	800ab14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800abf8:	4b05      	ldr	r3, [pc, #20]	; (800ac10 <SysTick_Config+0x40>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800abfe:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <SysTick_Config+0x40>)
 800ac00:	2207      	movs	r2, #7
 800ac02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	e000e010 	.word	0xe000e010

0800ac14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff fec9 	bl	800a9b4 <__NVIC_SetPriorityGrouping>
}
 800ac22:	bf00      	nop
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b086      	sub	sp, #24
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	4603      	mov	r3, r0
 800ac32:	60b9      	str	r1, [r7, #8]
 800ac34:	607a      	str	r2, [r7, #4]
 800ac36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ac38:	f7ff fee0 	bl	800a9fc <__NVIC_GetPriorityGrouping>
 800ac3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	68b9      	ldr	r1, [r7, #8]
 800ac42:	6978      	ldr	r0, [r7, #20]
 800ac44:	f7ff ff90 	bl	800ab68 <NVIC_EncodePriority>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac4e:	4611      	mov	r1, r2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7ff ff5f 	bl	800ab14 <__NVIC_SetPriority>
}
 800ac56:	bf00      	nop
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b082      	sub	sp, #8
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	4603      	mov	r3, r0
 800ac66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ac68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7ff fed3 	bl	800aa18 <__NVIC_EnableIRQ>
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	4603      	mov	r3, r0
 800ac82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ac84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff fee3 	bl	800aa54 <__NVIC_DisableIRQ>
}
 800ac8e:	bf00      	nop
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff ff96 	bl	800abd0 <SysTick_Config>
 800aca4:	4603      	mov	r3, r0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	4603      	mov	r3, r0
 800acb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800acb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff feed 	bl	800aa9c <__NVIC_SetPendingIRQ>
}
 800acc2:	bf00      	nop
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b082      	sub	sp, #8
 800acce:	af00      	add	r7, sp, #0
 800acd0:	4603      	mov	r3, r0
 800acd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800acd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acd8:	4618      	mov	r0, r3
 800acda:	f7ff fefd 	bl	800aad8 <__NVIC_ClearPendingIRQ>
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
	...

0800ace8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800acf2:	2300      	movs	r3, #0
 800acf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800acf6:	e14c      	b.n	800af92 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	2101      	movs	r1, #1
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	fa01 f303 	lsl.w	r3, r1, r3
 800ad04:	4013      	ands	r3, r2
 800ad06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 813e 	beq.w	800af8c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	f003 0303 	and.w	r3, r3, #3
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d005      	beq.n	800ad28 <HAL_GPIO_Init+0x40>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	f003 0303 	and.w	r3, r3, #3
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d130      	bne.n	800ad8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	2203      	movs	r2, #3
 800ad34:	fa02 f303 	lsl.w	r3, r2, r3
 800ad38:	43db      	mvns	r3, r3
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	68da      	ldr	r2, [r3, #12]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ad5e:	2201      	movs	r2, #1
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	fa02 f303 	lsl.w	r3, r2, r3
 800ad66:	43db      	mvns	r3, r3
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	091b      	lsrs	r3, r3, #4
 800ad74:	f003 0201 	and.w	r2, r3, #1
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d017      	beq.n	800adc6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	2203      	movs	r2, #3
 800ada2:	fa02 f303 	lsl.w	r3, r2, r3
 800ada6:	43db      	mvns	r3, r3
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	4013      	ands	r3, r2
 800adac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	fa02 f303 	lsl.w	r3, r2, r3
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f003 0303 	and.w	r3, r3, #3
 800adce:	2b02      	cmp	r3, #2
 800add0:	d123      	bne.n	800ae1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	08da      	lsrs	r2, r3, #3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3208      	adds	r2, #8
 800adda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	220f      	movs	r2, #15
 800adea:	fa02 f303 	lsl.w	r3, r2, r3
 800adee:	43db      	mvns	r3, r3
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	4013      	ands	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	691a      	ldr	r2, [r3, #16]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f003 0307 	and.w	r3, r3, #7
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	fa02 f303 	lsl.w	r3, r2, r3
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	08da      	lsrs	r2, r3, #3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3208      	adds	r2, #8
 800ae14:	6939      	ldr	r1, [r7, #16]
 800ae16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	005b      	lsls	r3, r3, #1
 800ae24:	2203      	movs	r2, #3
 800ae26:	fa02 f303 	lsl.w	r3, r2, r3
 800ae2a:	43db      	mvns	r3, r3
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	4013      	ands	r3, r2
 800ae30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	f003 0203 	and.w	r2, r3, #3
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	005b      	lsls	r3, r3, #1
 800ae3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae42:	693a      	ldr	r2, [r7, #16]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f000 8098 	beq.w	800af8c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800ae5c:	4a54      	ldr	r2, [pc, #336]	; (800afb0 <HAL_GPIO_Init+0x2c8>)
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	089b      	lsrs	r3, r3, #2
 800ae62:	3302      	adds	r3, #2
 800ae64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f003 0303 	and.w	r3, r3, #3
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	220f      	movs	r2, #15
 800ae74:	fa02 f303 	lsl.w	r3, r2, r3
 800ae78:	43db      	mvns	r3, r3
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ae86:	d019      	beq.n	800aebc <HAL_GPIO_Init+0x1d4>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a4a      	ldr	r2, [pc, #296]	; (800afb4 <HAL_GPIO_Init+0x2cc>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d013      	beq.n	800aeb8 <HAL_GPIO_Init+0x1d0>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a49      	ldr	r2, [pc, #292]	; (800afb8 <HAL_GPIO_Init+0x2d0>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d00d      	beq.n	800aeb4 <HAL_GPIO_Init+0x1cc>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a48      	ldr	r2, [pc, #288]	; (800afbc <HAL_GPIO_Init+0x2d4>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d007      	beq.n	800aeb0 <HAL_GPIO_Init+0x1c8>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a47      	ldr	r2, [pc, #284]	; (800afc0 <HAL_GPIO_Init+0x2d8>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d101      	bne.n	800aeac <HAL_GPIO_Init+0x1c4>
 800aea8:	2304      	movs	r3, #4
 800aeaa:	e008      	b.n	800aebe <HAL_GPIO_Init+0x1d6>
 800aeac:	2307      	movs	r3, #7
 800aeae:	e006      	b.n	800aebe <HAL_GPIO_Init+0x1d6>
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e004      	b.n	800aebe <HAL_GPIO_Init+0x1d6>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	e002      	b.n	800aebe <HAL_GPIO_Init+0x1d6>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e000      	b.n	800aebe <HAL_GPIO_Init+0x1d6>
 800aebc:	2300      	movs	r3, #0
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	f002 0203 	and.w	r2, r2, #3
 800aec4:	0092      	lsls	r2, r2, #2
 800aec6:	4093      	lsls	r3, r2
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800aece:	4938      	ldr	r1, [pc, #224]	; (800afb0 <HAL_GPIO_Init+0x2c8>)
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	089b      	lsrs	r3, r3, #2
 800aed4:	3302      	adds	r3, #2
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aedc:	4b39      	ldr	r3, [pc, #228]	; (800afc4 <HAL_GPIO_Init+0x2dc>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	43db      	mvns	r3, r3
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	4013      	ands	r3, r2
 800aeea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800af00:	4a30      	ldr	r2, [pc, #192]	; (800afc4 <HAL_GPIO_Init+0x2dc>)
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800af06:	4b2f      	ldr	r3, [pc, #188]	; (800afc4 <HAL_GPIO_Init+0x2dc>)
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	43db      	mvns	r3, r3
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4013      	ands	r3, r2
 800af14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	4313      	orrs	r3, r2
 800af28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800af2a:	4a26      	ldr	r2, [pc, #152]	; (800afc4 <HAL_GPIO_Init+0x2dc>)
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800af30:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <HAL_GPIO_Init+0x2dc>)
 800af32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	43db      	mvns	r3, r3
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	4013      	ands	r3, r2
 800af40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d003      	beq.n	800af56 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4313      	orrs	r3, r2
 800af54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800af56:	4a1b      	ldr	r2, [pc, #108]	; (800afc4 <HAL_GPIO_Init+0x2dc>)
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800af5e:	4b19      	ldr	r3, [pc, #100]	; (800afc4 <HAL_GPIO_Init+0x2dc>)
 800af60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	43db      	mvns	r3, r3
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	4013      	ands	r3, r2
 800af6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	4313      	orrs	r3, r2
 800af82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800af84:	4a0f      	ldr	r2, [pc, #60]	; (800afc4 <HAL_GPIO_Init+0x2dc>)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	3301      	adds	r3, #1
 800af90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	fa22 f303 	lsr.w	r3, r2, r3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f47f aeab 	bne.w	800acf8 <HAL_GPIO_Init+0x10>
  }
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	371c      	adds	r7, #28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	40010000 	.word	0x40010000
 800afb4:	48000400 	.word	0x48000400
 800afb8:	48000800 	.word	0x48000800
 800afbc:	48000c00 	.word	0x48000c00
 800afc0:	48001000 	.word	0x48001000
 800afc4:	58000800 	.word	0x58000800

0800afc8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800afd6:	e0bb      	b.n	800b150 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800afd8:	2201      	movs	r2, #1
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	fa02 f303 	lsl.w	r3, r2, r3
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	4013      	ands	r3, r2
 800afe4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 80ae 	beq.w	800b14a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800afee:	4a5f      	ldr	r2, [pc, #380]	; (800b16c <HAL_GPIO_DeInit+0x1a4>)
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	089b      	lsrs	r3, r3, #2
 800aff4:	3302      	adds	r3, #2
 800aff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800affa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	f003 0303 	and.w	r3, r3, #3
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	220f      	movs	r2, #15
 800b006:	fa02 f303 	lsl.w	r3, r2, r3
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	4013      	ands	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b016:	d019      	beq.n	800b04c <HAL_GPIO_DeInit+0x84>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a55      	ldr	r2, [pc, #340]	; (800b170 <HAL_GPIO_DeInit+0x1a8>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d013      	beq.n	800b048 <HAL_GPIO_DeInit+0x80>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a54      	ldr	r2, [pc, #336]	; (800b174 <HAL_GPIO_DeInit+0x1ac>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d00d      	beq.n	800b044 <HAL_GPIO_DeInit+0x7c>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a53      	ldr	r2, [pc, #332]	; (800b178 <HAL_GPIO_DeInit+0x1b0>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d007      	beq.n	800b040 <HAL_GPIO_DeInit+0x78>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a52      	ldr	r2, [pc, #328]	; (800b17c <HAL_GPIO_DeInit+0x1b4>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d101      	bne.n	800b03c <HAL_GPIO_DeInit+0x74>
 800b038:	2304      	movs	r3, #4
 800b03a:	e008      	b.n	800b04e <HAL_GPIO_DeInit+0x86>
 800b03c:	2307      	movs	r3, #7
 800b03e:	e006      	b.n	800b04e <HAL_GPIO_DeInit+0x86>
 800b040:	2303      	movs	r3, #3
 800b042:	e004      	b.n	800b04e <HAL_GPIO_DeInit+0x86>
 800b044:	2302      	movs	r3, #2
 800b046:	e002      	b.n	800b04e <HAL_GPIO_DeInit+0x86>
 800b048:	2301      	movs	r3, #1
 800b04a:	e000      	b.n	800b04e <HAL_GPIO_DeInit+0x86>
 800b04c:	2300      	movs	r3, #0
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	f002 0203 	and.w	r2, r2, #3
 800b054:	0092      	lsls	r2, r2, #2
 800b056:	4093      	lsls	r3, r2
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d136      	bne.n	800b0cc <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800b05e:	4b48      	ldr	r3, [pc, #288]	; (800b180 <HAL_GPIO_DeInit+0x1b8>)
 800b060:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	43db      	mvns	r3, r3
 800b068:	4945      	ldr	r1, [pc, #276]	; (800b180 <HAL_GPIO_DeInit+0x1b8>)
 800b06a:	4013      	ands	r3, r2
 800b06c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800b070:	4b43      	ldr	r3, [pc, #268]	; (800b180 <HAL_GPIO_DeInit+0x1b8>)
 800b072:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	43db      	mvns	r3, r3
 800b07a:	4941      	ldr	r1, [pc, #260]	; (800b180 <HAL_GPIO_DeInit+0x1b8>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800b082:	4b3f      	ldr	r3, [pc, #252]	; (800b180 <HAL_GPIO_DeInit+0x1b8>)
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	43db      	mvns	r3, r3
 800b08a:	493d      	ldr	r1, [pc, #244]	; (800b180 <HAL_GPIO_DeInit+0x1b8>)
 800b08c:	4013      	ands	r3, r2
 800b08e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800b090:	4b3b      	ldr	r3, [pc, #236]	; (800b180 <HAL_GPIO_DeInit+0x1b8>)
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	43db      	mvns	r3, r3
 800b098:	4939      	ldr	r1, [pc, #228]	; (800b180 <HAL_GPIO_DeInit+0x1b8>)
 800b09a:	4013      	ands	r3, r2
 800b09c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	220f      	movs	r2, #15
 800b0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800b0ae:	4a2f      	ldr	r2, [pc, #188]	; (800b16c <HAL_GPIO_DeInit+0x1a4>)
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	089b      	lsrs	r3, r3, #2
 800b0b4:	3302      	adds	r3, #2
 800b0b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	43da      	mvns	r2, r3
 800b0be:	482b      	ldr	r0, [pc, #172]	; (800b16c <HAL_GPIO_DeInit+0x1a4>)
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	089b      	lsrs	r3, r3, #2
 800b0c4:	400a      	ands	r2, r1
 800b0c6:	3302      	adds	r3, #2
 800b0c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	2103      	movs	r1, #3
 800b0d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	08da      	lsrs	r2, r3, #3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3208      	adds	r2, #8
 800b0e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	f003 0307 	and.w	r3, r3, #7
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	220f      	movs	r2, #15
 800b0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fa:	43db      	mvns	r3, r3
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	08d2      	lsrs	r2, r2, #3
 800b100:	4019      	ands	r1, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	3208      	adds	r2, #8
 800b106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68da      	ldr	r2, [r3, #12]
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	005b      	lsls	r3, r3, #1
 800b112:	2103      	movs	r1, #3
 800b114:	fa01 f303 	lsl.w	r3, r1, r3
 800b118:	43db      	mvns	r3, r3
 800b11a:	401a      	ands	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	2101      	movs	r1, #1
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	fa01 f303 	lsl.w	r3, r1, r3
 800b12c:	43db      	mvns	r3, r3
 800b12e:	401a      	ands	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689a      	ldr	r2, [r3, #8]
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	005b      	lsls	r3, r3, #1
 800b13c:	2103      	movs	r1, #3
 800b13e:	fa01 f303 	lsl.w	r3, r1, r3
 800b142:	43db      	mvns	r3, r3
 800b144:	401a      	ands	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	3301      	adds	r3, #1
 800b14e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	fa22 f303 	lsr.w	r3, r2, r3
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f47f af3d 	bne.w	800afd8 <HAL_GPIO_DeInit+0x10>
  }
}
 800b15e:	bf00      	nop
 800b160:	bf00      	nop
 800b162:	371c      	adds	r7, #28
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	40010000 	.word	0x40010000
 800b170:	48000400 	.word	0x48000400
 800b174:	48000800 	.word	0x48000800
 800b178:	48000c00 	.word	0x48000c00
 800b17c:	48001000 	.word	0x48001000
 800b180:	58000800 	.word	0x58000800

0800b184 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	887b      	ldrh	r3, [r7, #2]
 800b196:	4013      	ands	r3, r2
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b19c:	2301      	movs	r3, #1
 800b19e:	73fb      	strb	r3, [r7, #15]
 800b1a0:	e001      	b.n	800b1a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	807b      	strh	r3, [r7, #2]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b1c4:	787b      	ldrb	r3, [r7, #1]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b1ca:	887a      	ldrh	r2, [r7, #2]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b1d0:	e002      	b.n	800b1d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b1d2:	887a      	ldrh	r2, [r7, #2]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b1d8:	bf00      	nop
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	695b      	ldr	r3, [r3, #20]
 800b1f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b1f6:	887a      	ldrh	r2, [r7, #2]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	041a      	lsls	r2, r3, #16
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	43d9      	mvns	r1, r3
 800b202:	887b      	ldrh	r3, [r7, #2]
 800b204:	400b      	ands	r3, r1
 800b206:	431a      	orrs	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	619a      	str	r2, [r3, #24]
}
 800b20c:	bf00      	nop
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b222:	4b08      	ldr	r3, [pc, #32]	; (800b244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b224:	68da      	ldr	r2, [r3, #12]
 800b226:	88fb      	ldrh	r3, [r7, #6]
 800b228:	4013      	ands	r3, r2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d006      	beq.n	800b23c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b22e:	4a05      	ldr	r2, [pc, #20]	; (800b244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b230:	88fb      	ldrh	r3, [r7, #6]
 800b232:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b234:	88fb      	ldrh	r3, [r7, #6]
 800b236:	4618      	mov	r0, r3
 800b238:	f7f7 f9c8 	bl	80025cc <HAL_GPIO_EXTI_Callback>
  }
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	58000800 	.word	0x58000800

0800b248 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800b24e:	4b0a      	ldr	r3, [pc, #40]	; (800b278 <HAL_HSEM_IRQHandler+0x30>)
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800b254:	4b08      	ldr	r3, [pc, #32]	; (800b278 <HAL_HSEM_IRQHandler+0x30>)
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	43db      	mvns	r3, r3
 800b25c:	4906      	ldr	r1, [pc, #24]	; (800b278 <HAL_HSEM_IRQHandler+0x30>)
 800b25e:	4013      	ands	r3, r2
 800b260:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800b262:	4a05      	ldr	r2, [pc, #20]	; (800b278 <HAL_HSEM_IRQHandler+0x30>)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f807 	bl	800b27c <HAL_HSEM_FreeCallback>
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	58001500 	.word	0x58001500

0800b27c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e081      	b.n	800b3a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7f8 ff70 	bl	800419c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2224      	movs	r2, #36	; 0x24
 800b2c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f022 0201 	bic.w	r2, r2, #1
 800b2d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b2e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d107      	bne.n	800b30a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689a      	ldr	r2, [r3, #8]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b306:	609a      	str	r2, [r3, #8]
 800b308:	e006      	b.n	800b318 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689a      	ldr	r2, [r3, #8]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b316:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d104      	bne.n	800b32a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b328:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	6812      	ldr	r2, [r2, #0]
 800b334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b33c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68da      	ldr	r2, [r3, #12]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b34c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	691a      	ldr	r2, [r3, #16]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	695b      	ldr	r3, [r3, #20]
 800b356:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	699b      	ldr	r3, [r3, #24]
 800b35e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	430a      	orrs	r2, r1
 800b366:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	69d9      	ldr	r1, [r3, #28]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a1a      	ldr	r2, [r3, #32]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	430a      	orrs	r2, r1
 800b376:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f042 0201 	orr.w	r2, r2, #1
 800b386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2220      	movs	r2, #32
 800b392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b082      	sub	sp, #8
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e021      	b.n	800b404 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2224      	movs	r2, #36	; 0x24
 800b3c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f022 0201 	bic.w	r2, r2, #1
 800b3d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f7f8 ff25 	bl	8004228 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af02      	add	r7, sp, #8
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	4608      	mov	r0, r1
 800b416:	4611      	mov	r1, r2
 800b418:	461a      	mov	r2, r3
 800b41a:	4603      	mov	r3, r0
 800b41c:	817b      	strh	r3, [r7, #10]
 800b41e:	460b      	mov	r3, r1
 800b420:	813b      	strh	r3, [r7, #8]
 800b422:	4613      	mov	r3, r2
 800b424:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b20      	cmp	r3, #32
 800b430:	f040 80f9 	bne.w	800b626 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d002      	beq.n	800b440 <HAL_I2C_Mem_Write+0x34>
 800b43a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d105      	bne.n	800b44c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b446:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e0ed      	b.n	800b628 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b452:	2b01      	cmp	r3, #1
 800b454:	d101      	bne.n	800b45a <HAL_I2C_Mem_Write+0x4e>
 800b456:	2302      	movs	r3, #2
 800b458:	e0e6      	b.n	800b628 <HAL_I2C_Mem_Write+0x21c>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b462:	f7ff fa57 	bl	800a914 <HAL_GetTick>
 800b466:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	2319      	movs	r3, #25
 800b46e:	2201      	movs	r2, #1
 800b470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f000 fadd 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e0d1      	b.n	800b628 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2221      	movs	r2, #33	; 0x21
 800b488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2240      	movs	r2, #64	; 0x40
 800b490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6a3a      	ldr	r2, [r7, #32]
 800b49e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b4a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b4ac:	88f8      	ldrh	r0, [r7, #6]
 800b4ae:	893a      	ldrh	r2, [r7, #8]
 800b4b0:	8979      	ldrh	r1, [r7, #10]
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f000 f9ed 	bl	800b89c <I2C_RequestMemoryWrite>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d005      	beq.n	800b4d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e0a9      	b.n	800b628 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	2bff      	cmp	r3, #255	; 0xff
 800b4dc:	d90e      	bls.n	800b4fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	22ff      	movs	r2, #255	; 0xff
 800b4e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	8979      	ldrh	r1, [r7, #10]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f000 fc57 	bl	800bda8 <I2C_TransferConfig>
 800b4fa:	e00f      	b.n	800b51c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b500:	b29a      	uxth	r2, r3
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50a:	b2da      	uxtb	r2, r3
 800b50c:	8979      	ldrh	r1, [r7, #10]
 800b50e:	2300      	movs	r3, #0
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f000 fc46 	bl	800bda8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 fad6 	bl	800bad2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e07b      	b.n	800b628 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	781a      	ldrb	r2, [r3, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	1c5a      	adds	r2, r3, #1
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	3b01      	subs	r3, #1
 800b54e:	b29a      	uxth	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b558:	3b01      	subs	r3, #1
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b564:	b29b      	uxth	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d034      	beq.n	800b5d4 <HAL_I2C_Mem_Write+0x1c8>
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d130      	bne.n	800b5d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	2200      	movs	r2, #0
 800b57a:	2180      	movs	r1, #128	; 0x80
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f000 fa59 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e04d      	b.n	800b628 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b590:	b29b      	uxth	r3, r3
 800b592:	2bff      	cmp	r3, #255	; 0xff
 800b594:	d90e      	bls.n	800b5b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	22ff      	movs	r2, #255	; 0xff
 800b59a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	8979      	ldrh	r1, [r7, #10]
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f000 fbfb 	bl	800bda8 <I2C_TransferConfig>
 800b5b2:	e00f      	b.n	800b5d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	8979      	ldrh	r1, [r7, #10]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f000 fbea 	bl	800bda8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d19e      	bne.n	800b51c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 fabc 	bl	800bb60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e01a      	b.n	800b628 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2220      	movs	r2, #32
 800b5f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6859      	ldr	r1, [r3, #4]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	4b0a      	ldr	r3, [pc, #40]	; (800b630 <HAL_I2C_Mem_Write+0x224>)
 800b606:	400b      	ands	r3, r1
 800b608:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2220      	movs	r2, #32
 800b60e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	e000      	b.n	800b628 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b626:	2302      	movs	r3, #2
  }
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	fe00e800 	.word	0xfe00e800

0800b634 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af02      	add	r7, sp, #8
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	461a      	mov	r2, r3
 800b642:	4603      	mov	r3, r0
 800b644:	817b      	strh	r3, [r7, #10]
 800b646:	460b      	mov	r3, r1
 800b648:	813b      	strh	r3, [r7, #8]
 800b64a:	4613      	mov	r3, r2
 800b64c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b20      	cmp	r3, #32
 800b658:	f040 80fd 	bne.w	800b856 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <HAL_I2C_Mem_Read+0x34>
 800b662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b664:	2b00      	cmp	r3, #0
 800b666:	d105      	bne.n	800b674 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b66e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e0f1      	b.n	800b858 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d101      	bne.n	800b682 <HAL_I2C_Mem_Read+0x4e>
 800b67e:	2302      	movs	r3, #2
 800b680:	e0ea      	b.n	800b858 <HAL_I2C_Mem_Read+0x224>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b68a:	f7ff f943 	bl	800a914 <HAL_GetTick>
 800b68e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	2319      	movs	r3, #25
 800b696:	2201      	movs	r2, #1
 800b698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 f9c9 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e0d5      	b.n	800b858 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2222      	movs	r2, #34	; 0x22
 800b6b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2240      	movs	r2, #64	; 0x40
 800b6b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6a3a      	ldr	r2, [r7, #32]
 800b6c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b6cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b6d4:	88f8      	ldrh	r0, [r7, #6]
 800b6d6:	893a      	ldrh	r2, [r7, #8]
 800b6d8:	8979      	ldrh	r1, [r7, #10]
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 f92d 	bl	800b944 <I2C_RequestMemoryRead>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d005      	beq.n	800b6fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e0ad      	b.n	800b858 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b700:	b29b      	uxth	r3, r3
 800b702:	2bff      	cmp	r3, #255	; 0xff
 800b704:	d90e      	bls.n	800b724 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	22ff      	movs	r2, #255	; 0xff
 800b70a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b710:	b2da      	uxtb	r2, r3
 800b712:	8979      	ldrh	r1, [r7, #10]
 800b714:	4b52      	ldr	r3, [pc, #328]	; (800b860 <HAL_I2C_Mem_Read+0x22c>)
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f000 fb43 	bl	800bda8 <I2C_TransferConfig>
 800b722:	e00f      	b.n	800b744 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b728:	b29a      	uxth	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b732:	b2da      	uxtb	r2, r3
 800b734:	8979      	ldrh	r1, [r7, #10]
 800b736:	4b4a      	ldr	r3, [pc, #296]	; (800b860 <HAL_I2C_Mem_Read+0x22c>)
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f000 fb32 	bl	800bda8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	2200      	movs	r2, #0
 800b74c:	2104      	movs	r1, #4
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f000 f970 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e07c      	b.n	800b858 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	b2d2      	uxtb	r2, r2
 800b76a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b77a:	3b01      	subs	r3, #1
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b786:	b29b      	uxth	r3, r3
 800b788:	3b01      	subs	r3, #1
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b794:	b29b      	uxth	r3, r3
 800b796:	2b00      	cmp	r3, #0
 800b798:	d034      	beq.n	800b804 <HAL_I2C_Mem_Read+0x1d0>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d130      	bne.n	800b804 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2180      	movs	r1, #128	; 0x80
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 f941 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e04d      	b.n	800b858 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	2bff      	cmp	r3, #255	; 0xff
 800b7c4:	d90e      	bls.n	800b7e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	22ff      	movs	r2, #255	; 0xff
 800b7ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d0:	b2da      	uxtb	r2, r3
 800b7d2:	8979      	ldrh	r1, [r7, #10]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 fae3 	bl	800bda8 <I2C_TransferConfig>
 800b7e2:	e00f      	b.n	800b804 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	8979      	ldrh	r1, [r7, #10]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f000 fad2 	bl	800bda8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b808:	b29b      	uxth	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d19a      	bne.n	800b744 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b80e:	697a      	ldr	r2, [r7, #20]
 800b810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f000 f9a4 	bl	800bb60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	e01a      	b.n	800b858 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2220      	movs	r2, #32
 800b828:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6859      	ldr	r1, [r3, #4]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	4b0b      	ldr	r3, [pc, #44]	; (800b864 <HAL_I2C_Mem_Read+0x230>)
 800b836:	400b      	ands	r3, r1
 800b838:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2220      	movs	r2, #32
 800b83e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	e000      	b.n	800b858 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b856:	2302      	movs	r3, #2
  }
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3718      	adds	r7, #24
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	80002400 	.word	0x80002400
 800b864:	fe00e800 	.word	0xfe00e800

0800b868 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b876:	b2db      	uxtb	r3, r3
}
 800b878:	4618      	mov	r0, r3
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af02      	add	r7, sp, #8
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	817b      	strh	r3, [r7, #10]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	813b      	strh	r3, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	8979      	ldrh	r1, [r7, #10]
 800b8bc:	4b20      	ldr	r3, [pc, #128]	; (800b940 <I2C_RequestMemoryWrite+0xa4>)
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f000 fa6f 	bl	800bda8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8ca:	69fa      	ldr	r2, [r7, #28]
 800b8cc:	69b9      	ldr	r1, [r7, #24]
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 f8ff 	bl	800bad2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e02c      	b.n	800b938 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b8de:	88fb      	ldrh	r3, [r7, #6]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d105      	bne.n	800b8f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b8e4:	893b      	ldrh	r3, [r7, #8]
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	629a      	str	r2, [r3, #40]	; 0x28
 800b8ee:	e015      	b.n	800b91c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b8f0:	893b      	ldrh	r3, [r7, #8]
 800b8f2:	0a1b      	lsrs	r3, r3, #8
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	b2da      	uxtb	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8fe:	69fa      	ldr	r2, [r7, #28]
 800b900:	69b9      	ldr	r1, [r7, #24]
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f000 f8e5 	bl	800bad2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e012      	b.n	800b938 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b912:	893b      	ldrh	r3, [r7, #8]
 800b914:	b2da      	uxtb	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	2200      	movs	r2, #0
 800b924:	2180      	movs	r1, #128	; 0x80
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f000 f884 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d001      	beq.n	800b936 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e000      	b.n	800b938 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	80002000 	.word	0x80002000

0800b944 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af02      	add	r7, sp, #8
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	4608      	mov	r0, r1
 800b94e:	4611      	mov	r1, r2
 800b950:	461a      	mov	r2, r3
 800b952:	4603      	mov	r3, r0
 800b954:	817b      	strh	r3, [r7, #10]
 800b956:	460b      	mov	r3, r1
 800b958:	813b      	strh	r3, [r7, #8]
 800b95a:	4613      	mov	r3, r2
 800b95c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b95e:	88fb      	ldrh	r3, [r7, #6]
 800b960:	b2da      	uxtb	r2, r3
 800b962:	8979      	ldrh	r1, [r7, #10]
 800b964:	4b20      	ldr	r3, [pc, #128]	; (800b9e8 <I2C_RequestMemoryRead+0xa4>)
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	2300      	movs	r3, #0
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f000 fa1c 	bl	800bda8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b970:	69fa      	ldr	r2, [r7, #28]
 800b972:	69b9      	ldr	r1, [r7, #24]
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 f8ac 	bl	800bad2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d001      	beq.n	800b984 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	e02c      	b.n	800b9de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b984:	88fb      	ldrh	r3, [r7, #6]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d105      	bne.n	800b996 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b98a:	893b      	ldrh	r3, [r7, #8]
 800b98c:	b2da      	uxtb	r2, r3
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	629a      	str	r2, [r3, #40]	; 0x28
 800b994:	e015      	b.n	800b9c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b996:	893b      	ldrh	r3, [r7, #8]
 800b998:	0a1b      	lsrs	r3, r3, #8
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9a4:	69fa      	ldr	r2, [r7, #28]
 800b9a6:	69b9      	ldr	r1, [r7, #24]
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f000 f892 	bl	800bad2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e012      	b.n	800b9de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b9b8:	893b      	ldrh	r3, [r7, #8]
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2140      	movs	r1, #64	; 0x40
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f000 f831 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e000      	b.n	800b9de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	80002000 	.word	0x80002000

0800b9ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d103      	bne.n	800ba0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2200      	movs	r2, #0
 800ba08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d007      	beq.n	800ba28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	699a      	ldr	r2, [r3, #24]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f042 0201 	orr.w	r2, r2, #1
 800ba26:	619a      	str	r2, [r3, #24]
  }
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	603b      	str	r3, [r7, #0]
 800ba40:	4613      	mov	r3, r2
 800ba42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba44:	e031      	b.n	800baaa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4c:	d02d      	beq.n	800baaa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba4e:	f7fe ff61 	bl	800a914 <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d302      	bcc.n	800ba64 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d122      	bne.n	800baaa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	699a      	ldr	r2, [r3, #24]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	bf0c      	ite	eq
 800ba74:	2301      	moveq	r3, #1
 800ba76:	2300      	movne	r3, #0
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d113      	bne.n	800baaa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba86:	f043 0220 	orr.w	r2, r3, #32
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2220      	movs	r2, #32
 800ba92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e00f      	b.n	800baca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	699a      	ldr	r2, [r3, #24]
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	4013      	ands	r3, r2
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	bf0c      	ite	eq
 800baba:	2301      	moveq	r3, #1
 800babc:	2300      	movne	r3, #0
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	461a      	mov	r2, r3
 800bac2:	79fb      	ldrb	r3, [r7, #7]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d0be      	beq.n	800ba46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bade:	e033      	b.n	800bb48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	68b9      	ldr	r1, [r7, #8]
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 f87f 	bl	800bbe8 <I2C_IsErrorOccurred>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e031      	b.n	800bb58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafa:	d025      	beq.n	800bb48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bafc:	f7fe ff0a 	bl	800a914 <HAL_GetTick>
 800bb00:	4602      	mov	r2, r0
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d302      	bcc.n	800bb12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d11a      	bne.n	800bb48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	f003 0302 	and.w	r3, r3, #2
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d013      	beq.n	800bb48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb24:	f043 0220 	orr.w	r2, r3, #32
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2220      	movs	r2, #32
 800bb30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	e007      	b.n	800bb58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	f003 0302 	and.w	r3, r3, #2
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d1c4      	bne.n	800bae0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb6c:	e02f      	b.n	800bbce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f000 f838 	bl	800bbe8 <I2C_IsErrorOccurred>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e02d      	b.n	800bbde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb82:	f7fe fec7 	bl	800a914 <HAL_GetTick>
 800bb86:	4602      	mov	r2, r0
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d302      	bcc.n	800bb98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d11a      	bne.n	800bbce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	f003 0320 	and.w	r3, r3, #32
 800bba2:	2b20      	cmp	r3, #32
 800bba4:	d013      	beq.n	800bbce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbaa:	f043 0220 	orr.w	r2, r3, #32
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2220      	movs	r2, #32
 800bbb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e007      	b.n	800bbde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	f003 0320 	and.w	r3, r3, #32
 800bbd8:	2b20      	cmp	r3, #32
 800bbda:	d1c8      	bne.n	800bb6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
	...

0800bbe8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08a      	sub	sp, #40	; 0x28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	699b      	ldr	r3, [r3, #24]
 800bc00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	f003 0310 	and.w	r3, r3, #16
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d068      	beq.n	800bce6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2210      	movs	r2, #16
 800bc1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bc1c:	e049      	b.n	800bcb2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc24:	d045      	beq.n	800bcb2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bc26:	f7fe fe75 	bl	800a914 <HAL_GetTick>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d302      	bcc.n	800bc3c <I2C_IsErrorOccurred+0x54>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d13a      	bne.n	800bcb2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc5e:	d121      	bne.n	800bca4 <I2C_IsErrorOccurred+0xbc>
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc66:	d01d      	beq.n	800bca4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bc68:	7cfb      	ldrb	r3, [r7, #19]
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	d01a      	beq.n	800bca4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	685a      	ldr	r2, [r3, #4]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bc7e:	f7fe fe49 	bl	800a914 <HAL_GetTick>
 800bc82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc84:	e00e      	b.n	800bca4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bc86:	f7fe fe45 	bl	800a914 <HAL_GetTick>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	1ad3      	subs	r3, r2, r3
 800bc90:	2b19      	cmp	r3, #25
 800bc92:	d907      	bls.n	800bca4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	f043 0320 	orr.w	r3, r3, #32
 800bc9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800bca2:	e006      	b.n	800bcb2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	f003 0320 	and.w	r3, r3, #32
 800bcae:	2b20      	cmp	r3, #32
 800bcb0:	d1e9      	bne.n	800bc86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	f003 0320 	and.w	r3, r3, #32
 800bcbc:	2b20      	cmp	r3, #32
 800bcbe:	d003      	beq.n	800bcc8 <I2C_IsErrorOccurred+0xe0>
 800bcc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d0aa      	beq.n	800bc1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bcc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d103      	bne.n	800bcd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	f043 0304 	orr.w	r3, r3, #4
 800bcde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00b      	beq.n	800bd10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bcf8:	6a3b      	ldr	r3, [r7, #32]
 800bcfa:	f043 0301 	orr.w	r3, r3, #1
 800bcfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00b      	beq.n	800bd32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bd1a:	6a3b      	ldr	r3, [r7, #32]
 800bd1c:	f043 0308 	orr.w	r3, r3, #8
 800bd20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00b      	beq.n	800bd54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
 800bd3e:	f043 0302 	orr.w	r3, r3, #2
 800bd42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800bd54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d01c      	beq.n	800bd96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff fe45 	bl	800b9ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6859      	ldr	r1, [r3, #4]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <I2C_IsErrorOccurred+0x1bc>)
 800bd6e:	400b      	ands	r3, r1
 800bd70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2220      	movs	r2, #32
 800bd82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800bd96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3728      	adds	r7, #40	; 0x28
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	fe00e800 	.word	0xfe00e800

0800bda8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	607b      	str	r3, [r7, #4]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	817b      	strh	r3, [r7, #10]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bdba:	897b      	ldrh	r3, [r7, #10]
 800bdbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bdc0:	7a7b      	ldrb	r3, [r7, #9]
 800bdc2:	041b      	lsls	r3, r3, #16
 800bdc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bdc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	0d5b      	lsrs	r3, r3, #21
 800bde2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bde6:	4b08      	ldr	r3, [pc, #32]	; (800be08 <I2C_TransferConfig+0x60>)
 800bde8:	430b      	orrs	r3, r1
 800bdea:	43db      	mvns	r3, r3
 800bdec:	ea02 0103 	and.w	r1, r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	697a      	ldr	r2, [r7, #20]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bdfa:	bf00      	nop
 800bdfc:	371c      	adds	r7, #28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	03ff63ff 	.word	0x03ff63ff

0800be0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b20      	cmp	r3, #32
 800be20:	d138      	bne.n	800be94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d101      	bne.n	800be30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800be2c:	2302      	movs	r3, #2
 800be2e:	e032      	b.n	800be96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2224      	movs	r2, #36	; 0x24
 800be3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f022 0201 	bic.w	r2, r2, #1
 800be4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800be5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6819      	ldr	r1, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	430a      	orrs	r2, r1
 800be6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f042 0201 	orr.w	r2, r2, #1
 800be7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2220      	movs	r2, #32
 800be84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	e000      	b.n	800be96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800be94:	2302      	movs	r3, #2
  }
}
 800be96:	4618      	mov	r0, r3
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b085      	sub	sp, #20
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b20      	cmp	r3, #32
 800beb6:	d139      	bne.n	800bf2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d101      	bne.n	800bec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bec2:	2302      	movs	r3, #2
 800bec4:	e033      	b.n	800bf2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2224      	movs	r2, #36	; 0x24
 800bed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f022 0201 	bic.w	r2, r2, #1
 800bee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	021b      	lsls	r3, r3, #8
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	4313      	orrs	r3, r2
 800befe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f042 0201 	orr.w	r2, r2, #1
 800bf16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2220      	movs	r2, #32
 800bf1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	e000      	b.n	800bf2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bf2c:	2302      	movs	r3, #2
  }
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
	...

0800bf3c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d01e      	beq.n	800bf8c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800bf4e:	4b13      	ldr	r3, [pc, #76]	; (800bf9c <HAL_IPCC_Init+0x60>)
 800bf50:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d102      	bne.n	800bf64 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7f8 f980 	bl	8004264 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800bf64:	68b8      	ldr	r0, [r7, #8]
 800bf66:	f000 f85b 	bl	800c020 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f82c 	bl	800bfd4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800bf8a:	e001      	b.n	800bf90 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	58000c00 	.word	0x58000c00

0800bfa0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800bfae:	bf00      	nop
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b085      	sub	sp, #20
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	60f8      	str	r0, [r7, #12]
 800bfc2:	60b9      	str	r1, [r7, #8]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800bfc8:	bf00      	nop
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800bfdc:	2300      	movs	r3, #0
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	e00f      	b.n	800c002 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	4a0b      	ldr	r2, [pc, #44]	; (800c018 <IPCC_SetDefaultCallbacks+0x44>)
 800bfec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	3306      	adds	r3, #6
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	4a08      	ldr	r2, [pc, #32]	; (800c01c <IPCC_SetDefaultCallbacks+0x48>)
 800bffa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3301      	adds	r3, #1
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b05      	cmp	r3, #5
 800c006:	d9ec      	bls.n	800bfe2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800c008:	bf00      	nop
 800c00a:	bf00      	nop
 800c00c:	3714      	adds	r7, #20
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr
 800c016:	bf00      	nop
 800c018:	0800bfa1 	.word	0x0800bfa1
 800c01c:	0800bfbb 	.word	0x0800bfbb

0800c020 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800c034:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	223f      	movs	r2, #63	; 0x3f
 800c03a:	609a      	str	r2, [r3, #8]
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d101      	bne.n	800c05a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	e0c0      	b.n	800c1dc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d106      	bne.n	800c074 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7fa fa80 	bl	8006574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2203      	movs	r2, #3
 800c078:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4618      	mov	r0, r3
 800c082:	f003 fcec 	bl	800fa5e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c086:	2300      	movs	r3, #0
 800c088:	73fb      	strb	r3, [r7, #15]
 800c08a:	e03e      	b.n	800c10a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c08c:	7bfa      	ldrb	r2, [r7, #15]
 800c08e:	6879      	ldr	r1, [r7, #4]
 800c090:	4613      	mov	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4413      	add	r3, r2
 800c096:	00db      	lsls	r3, r3, #3
 800c098:	440b      	add	r3, r1
 800c09a:	3311      	adds	r3, #17
 800c09c:	2201      	movs	r2, #1
 800c09e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c0a0:	7bfa      	ldrb	r2, [r7, #15]
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	440b      	add	r3, r1
 800c0ae:	3310      	adds	r3, #16
 800c0b0:	7bfa      	ldrb	r2, [r7, #15]
 800c0b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c0b4:	7bfa      	ldrb	r2, [r7, #15]
 800c0b6:	6879      	ldr	r1, [r7, #4]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4413      	add	r3, r2
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	440b      	add	r3, r1
 800c0c2:	3313      	adds	r3, #19
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c0c8:	7bfa      	ldrb	r2, [r7, #15]
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	00db      	lsls	r3, r3, #3
 800c0d4:	440b      	add	r3, r1
 800c0d6:	3320      	adds	r3, #32
 800c0d8:	2200      	movs	r2, #0
 800c0da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c0dc:	7bfa      	ldrb	r2, [r7, #15]
 800c0de:	6879      	ldr	r1, [r7, #4]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4413      	add	r3, r2
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	440b      	add	r3, r1
 800c0ea:	3324      	adds	r3, #36	; 0x24
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	1c5a      	adds	r2, r3, #1
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	440b      	add	r3, r1
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c104:	7bfb      	ldrb	r3, [r7, #15]
 800c106:	3301      	adds	r3, #1
 800c108:	73fb      	strb	r3, [r7, #15]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	791b      	ldrb	r3, [r3, #4]
 800c10e:	7bfa      	ldrb	r2, [r7, #15]
 800c110:	429a      	cmp	r2, r3
 800c112:	d3bb      	bcc.n	800c08c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c114:	2300      	movs	r3, #0
 800c116:	73fb      	strb	r3, [r7, #15]
 800c118:	e044      	b.n	800c1a4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c11a:	7bfa      	ldrb	r2, [r7, #15]
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	440b      	add	r3, r1
 800c128:	f203 1351 	addw	r3, r3, #337	; 0x151
 800c12c:	2200      	movs	r2, #0
 800c12e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c130:	7bfa      	ldrb	r2, [r7, #15]
 800c132:	6879      	ldr	r1, [r7, #4]
 800c134:	4613      	mov	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4413      	add	r3, r2
 800c13a:	00db      	lsls	r3, r3, #3
 800c13c:	440b      	add	r3, r1
 800c13e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c142:	7bfa      	ldrb	r2, [r7, #15]
 800c144:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c146:	7bfa      	ldrb	r2, [r7, #15]
 800c148:	6879      	ldr	r1, [r7, #4]
 800c14a:	4613      	mov	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	440b      	add	r3, r1
 800c154:	f203 1353 	addw	r3, r3, #339	; 0x153
 800c158:	2200      	movs	r2, #0
 800c15a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c15c:	7bfa      	ldrb	r2, [r7, #15]
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	4613      	mov	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4413      	add	r3, r2
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	440b      	add	r3, r1
 800c16a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c172:	7bfa      	ldrb	r2, [r7, #15]
 800c174:	6879      	ldr	r1, [r7, #4]
 800c176:	4613      	mov	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	440b      	add	r3, r1
 800c180:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c184:	2200      	movs	r2, #0
 800c186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c188:	7bfa      	ldrb	r2, [r7, #15]
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	440b      	add	r3, r1
 800c196:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	73fb      	strb	r3, [r7, #15]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	791b      	ldrb	r3, [r3, #4]
 800c1a8:	7bfa      	ldrb	r2, [r7, #15]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d3b5      	bcc.n	800c11a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6818      	ldr	r0, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c1ba:	f003 fc6b 	bl	800fa94 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	7a9b      	ldrb	r3, [r3, #10]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d102      	bne.n	800c1da <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f001 fc41 	bl	800da5c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d101      	bne.n	800c1fa <HAL_PCD_Start+0x16>
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	e012      	b.n	800c220 <HAL_PCD_Start+0x3c>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f003 fc12 	bl	800fa30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4618      	mov	r0, r3
 800c212:	f005 fed2 	bl	8011fba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4618      	mov	r0, r3
 800c236:	f005 fed7 	bl	8011fe8 <USB_ReadInterrupts>
 800c23a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fb04 	bl	800c854 <PCD_EP_ISR_Handler>

    return;
 800c24c:	e110      	b.n	800c470 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c254:	2b00      	cmp	r3, #0
 800c256:	d013      	beq.n	800c280 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c260:	b29a      	uxth	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c26a:	b292      	uxth	r2, r2
 800c26c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7fa fa22 	bl	80066ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800c276:	2100      	movs	r1, #0
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f8fc 	bl	800c476 <HAL_PCD_SetAddress>

    return;
 800c27e:	e0f7      	b.n	800c470 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00c      	beq.n	800c2a4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c29c:	b292      	uxth	r2, r2
 800c29e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c2a2:	e0e5      	b.n	800c470 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00c      	beq.n	800c2c8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2c0:	b292      	uxth	r2, r2
 800c2c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c2c6:	e0d3      	b.n	800c470 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d034      	beq.n	800c33c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f022 0204 	bic.w	r2, r2, #4
 800c2e4:	b292      	uxth	r2, r2
 800c2e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f022 0208 	bic.w	r2, r2, #8
 800c2fc:	b292      	uxth	r2, r2
 800c2fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d107      	bne.n	800c31c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c314:	2100      	movs	r1, #0
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7fa fbc4 	bl	8006aa4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7fa fa05 	bl	800672c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c334:	b292      	uxth	r2, r2
 800c336:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c33a:	e099      	b.n	800c470 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c342:	2b00      	cmp	r3, #0
 800c344:	d027      	beq.n	800c396 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c34e:	b29a      	uxth	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f042 0208 	orr.w	r2, r2, #8
 800c358:	b292      	uxth	r2, r2
 800c35a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c366:	b29a      	uxth	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c370:	b292      	uxth	r2, r2
 800c372:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c37e:	b29a      	uxth	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f042 0204 	orr.w	r2, r2, #4
 800c388:	b292      	uxth	r2, r2
 800c38a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7fa f9b2 	bl	80066f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c394:	e06c      	b.n	800c470 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d040      	beq.n	800c422 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c3b2:	b292      	uxth	r2, r2
 800c3b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d12b      	bne.n	800c41a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f042 0204 	orr.w	r2, r2, #4
 800c3d4:	b292      	uxth	r2, r2
 800c3d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f042 0208 	orr.w	r2, r2, #8
 800c3ec:	b292      	uxth	r2, r2
 800c3ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c402:	b29b      	uxth	r3, r3
 800c404:	089b      	lsrs	r3, r3, #2
 800c406:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c410:	2101      	movs	r1, #1
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7fa fb46 	bl	8006aa4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800c418:	e02a      	b.n	800c470 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7fa f96c 	bl	80066f8 <HAL_PCD_SuspendCallback>
    return;
 800c420:	e026      	b.n	800c470 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00f      	beq.n	800c44c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c434:	b29a      	uxth	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c43e:	b292      	uxth	r2, r2
 800c440:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7fa f92a 	bl	800669e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c44a:	e011      	b.n	800c470 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00c      	beq.n	800c470 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c45e:	b29a      	uxth	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c468:	b292      	uxth	r2, r2
 800c46a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800c46e:	bf00      	nop
  }
}
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	460b      	mov	r3, r1
 800c480:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d101      	bne.n	800c490 <HAL_PCD_SetAddress+0x1a>
 800c48c:	2302      	movs	r3, #2
 800c48e:	e012      	b.n	800c4b6 <HAL_PCD_SetAddress+0x40>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	78fa      	ldrb	r2, [r7, #3]
 800c49c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	78fa      	ldrb	r2, [r7, #3]
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f005 fd73 	bl	8011f92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	4608      	mov	r0, r1
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	70fb      	strb	r3, [r7, #3]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	803b      	strh	r3, [r7, #0]
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c4dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	da0e      	bge.n	800c502 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4e4:	78fb      	ldrb	r3, [r7, #3]
 800c4e6:	f003 0207 	and.w	r2, r3, #7
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	4413      	add	r3, r2
 800c4f0:	00db      	lsls	r3, r3, #3
 800c4f2:	3310      	adds	r3, #16
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	705a      	strb	r2, [r3, #1]
 800c500:	e00e      	b.n	800c520 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c502:	78fb      	ldrb	r3, [r7, #3]
 800c504:	f003 0207 	and.w	r2, r3, #7
 800c508:	4613      	mov	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	4413      	add	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	f003 0307 	and.w	r3, r3, #7
 800c526:	b2da      	uxtb	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c52c:	883a      	ldrh	r2, [r7, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	78ba      	ldrb	r2, [r7, #2]
 800c536:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c538:	78bb      	ldrb	r3, [r7, #2]
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d102      	bne.n	800c544 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d101      	bne.n	800c552 <HAL_PCD_EP_Open+0x94>
 800c54e:	2302      	movs	r3, #2
 800c550:	e00e      	b.n	800c570 <HAL_PCD_EP_Open+0xb2>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2201      	movs	r2, #1
 800c556:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68f9      	ldr	r1, [r7, #12]
 800c560:	4618      	mov	r0, r3
 800c562:	f003 fab5 	bl	800fad0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800c56e:	7afb      	ldrb	r3, [r7, #11]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	da0e      	bge.n	800c5aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c58c:	78fb      	ldrb	r3, [r7, #3]
 800c58e:	f003 0207 	and.w	r2, r3, #7
 800c592:	4613      	mov	r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4413      	add	r3, r2
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	3310      	adds	r3, #16
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	4413      	add	r3, r2
 800c5a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	705a      	strb	r2, [r3, #1]
 800c5a8:	e00e      	b.n	800c5c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c5aa:	78fb      	ldrb	r3, [r7, #3]
 800c5ac:	f003 0207 	and.w	r2, r3, #7
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	4413      	add	r3, r2
 800c5c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c5c8:	78fb      	ldrb	r3, [r7, #3]
 800c5ca:	f003 0307 	and.w	r3, r3, #7
 800c5ce:	b2da      	uxtb	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d101      	bne.n	800c5e2 <HAL_PCD_EP_Close+0x6a>
 800c5de:	2302      	movs	r3, #2
 800c5e0:	e00e      	b.n	800c600 <HAL_PCD_EP_Close+0x88>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	68f9      	ldr	r1, [r7, #12]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f003 fe31 	bl	8010258 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	607a      	str	r2, [r7, #4]
 800c612:	603b      	str	r3, [r7, #0]
 800c614:	460b      	mov	r3, r1
 800c616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c618:	7afb      	ldrb	r3, [r7, #11]
 800c61a:	f003 0207 	and.w	r2, r3, #7
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	4413      	add	r3, r2
 800c62e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2200      	movs	r2, #0
 800c640:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2200      	movs	r2, #0
 800c646:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c648:	7afb      	ldrb	r3, [r7, #11]
 800c64a:	f003 0307 	and.w	r3, r3, #7
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6979      	ldr	r1, [r7, #20]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f003 ffe9 	bl	8010632 <USB_EPStartXfer>

  return HAL_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c66a:	b480      	push	{r7}
 800c66c:	b083      	sub	sp, #12
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	460b      	mov	r3, r1
 800c674:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c676:	78fb      	ldrb	r3, [r7, #3]
 800c678:	f003 0207 	and.w	r2, r3, #7
 800c67c:	6879      	ldr	r1, [r7, #4]
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	00db      	lsls	r3, r3, #3
 800c686:	440b      	add	r3, r1
 800c688:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c68c:	681b      	ldr	r3, [r3, #0]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b086      	sub	sp, #24
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	607a      	str	r2, [r7, #4]
 800c6a4:	603b      	str	r3, [r7, #0]
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6aa:	7afb      	ldrb	r3, [r7, #11]
 800c6ac:	f003 0207 	and.w	r2, r3, #7
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	4413      	add	r3, r2
 800c6b6:	00db      	lsls	r3, r3, #3
 800c6b8:	3310      	adds	r3, #16
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	4413      	add	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c6e6:	7afb      	ldrb	r3, [r7, #11]
 800c6e8:	f003 0307 	and.w	r3, r3, #7
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	6979      	ldr	r1, [r7, #20]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f003 ff9a 	bl	8010632 <USB_EPStartXfer>

  return HAL_OK;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	3718      	adds	r7, #24
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	460b      	mov	r3, r1
 800c712:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c714:	78fb      	ldrb	r3, [r7, #3]
 800c716:	f003 0307 	and.w	r3, r3, #7
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	7912      	ldrb	r2, [r2, #4]
 800c71e:	4293      	cmp	r3, r2
 800c720:	d901      	bls.n	800c726 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	e03e      	b.n	800c7a4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	da0e      	bge.n	800c74c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c72e:	78fb      	ldrb	r3, [r7, #3]
 800c730:	f003 0207 	and.w	r2, r3, #7
 800c734:	4613      	mov	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	3310      	adds	r3, #16
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	4413      	add	r3, r2
 800c742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2201      	movs	r2, #1
 800c748:	705a      	strb	r2, [r3, #1]
 800c74a:	e00c      	b.n	800c766 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c74c:	78fa      	ldrb	r2, [r7, #3]
 800c74e:	4613      	mov	r3, r2
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	4413      	add	r3, r2
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	4413      	add	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2201      	movs	r2, #1
 800c76a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c76c:	78fb      	ldrb	r3, [r7, #3]
 800c76e:	f003 0307 	and.w	r3, r3, #7
 800c772:	b2da      	uxtb	r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d101      	bne.n	800c786 <HAL_PCD_EP_SetStall+0x7e>
 800c782:	2302      	movs	r3, #2
 800c784:	e00e      	b.n	800c7a4 <HAL_PCD_EP_SetStall+0x9c>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2201      	movs	r2, #1
 800c78a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68f9      	ldr	r1, [r7, #12]
 800c794:	4618      	mov	r0, r3
 800c796:	f005 fafd 	bl	8011d94 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c7b8:	78fb      	ldrb	r3, [r7, #3]
 800c7ba:	f003 030f 	and.w	r3, r3, #15
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	7912      	ldrb	r2, [r2, #4]
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d901      	bls.n	800c7ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e040      	b.n	800c84c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c7ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	da0e      	bge.n	800c7f0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	f003 0207 	and.w	r2, r3, #7
 800c7d8:	4613      	mov	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4413      	add	r3, r2
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	3310      	adds	r3, #16
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	705a      	strb	r2, [r3, #1]
 800c7ee:	e00e      	b.n	800c80e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c7f0:	78fb      	ldrb	r3, [r7, #3]
 800c7f2:	f003 0207 	and.w	r2, r3, #7
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	4413      	add	r3, r2
 800c7fc:	00db      	lsls	r3, r3, #3
 800c7fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	4413      	add	r3, r2
 800c806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2200      	movs	r2, #0
 800c80c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	f003 0307 	and.w	r3, r3, #7
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800c826:	2b01      	cmp	r3, #1
 800c828:	d101      	bne.n	800c82e <HAL_PCD_EP_ClrStall+0x82>
 800c82a:	2302      	movs	r3, #2
 800c82c:	e00e      	b.n	800c84c <HAL_PCD_EP_ClrStall+0xa0>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68f9      	ldr	r1, [r7, #12]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f005 fafa 	bl	8011e36 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b096      	sub	sp, #88	; 0x58
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c85c:	e3ae      	b.n	800cfbc <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c866:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800c86a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	f003 030f 	and.w	r3, r3, #15
 800c874:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800c878:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f040 8170 	bne.w	800cb62 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800c882:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c886:	f003 0310 	and.w	r3, r3, #16
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d14d      	bne.n	800c92a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	b29b      	uxth	r3, r3
 800c896:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c89a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c89e:	81fb      	strh	r3, [r7, #14]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	89fb      	ldrh	r3, [r7, #14]
 800c8a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3310      	adds	r3, #16
 800c8b6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	00db      	lsls	r3, r3, #3
 800c8ca:	4413      	add	r3, r2
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	6812      	ldr	r2, [r2, #0]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c8dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800c8e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8e2:	695a      	ldr	r2, [r3, #20]
 800c8e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8e6:	69db      	ldr	r3, [r3, #28]
 800c8e8:	441a      	add	r2, r3
 800c8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7f9 feba 	bl	800666a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	7b1b      	ldrb	r3, [r3, #12]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f000 835d 	beq.w	800cfbc <PCD_EP_ISR_Handler+0x768>
 800c902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	2b00      	cmp	r3, #0
 800c908:	f040 8358 	bne.w	800cfbc <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	7b1b      	ldrb	r3, [r3, #12]
 800c910:	b2db      	uxtb	r3, r3
 800c912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c916:	b2da      	uxtb	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	b292      	uxth	r2, r2
 800c91e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	731a      	strb	r2, [r3, #12]
 800c928:	e348      	b.n	800cfbc <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c930:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	881b      	ldrh	r3, [r3, #0]
 800c938:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800c93c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c944:	2b00      	cmp	r3, #0
 800c946:	d032      	beq.n	800c9ae <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c950:	b29b      	uxth	r3, r3
 800c952:	461a      	mov	r2, r3
 800c954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	4413      	add	r3, r2
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	6812      	ldr	r2, [r2, #0]
 800c960:	4413      	add	r3, r2
 800c962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c966:	881b      	ldrh	r3, [r3, #0]
 800c968:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c96c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c96e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6818      	ldr	r0, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800c97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c97c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800c97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c980:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800c982:	b29b      	uxth	r3, r3
 800c984:	f005 fb82 	bl	801208c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	b29a      	uxth	r2, r3
 800c990:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c994:	4013      	ands	r3, r2
 800c996:	823b      	strh	r3, [r7, #16]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	8a3a      	ldrh	r2, [r7, #16]
 800c99e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c9a2:	b292      	uxth	r2, r2
 800c9a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7f9 fe32 	bl	8006610 <HAL_PCD_SetupStageCallback>
 800c9ac:	e306      	b.n	800cfbc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800c9ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f280 8302 	bge.w	800cfbc <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	83fb      	strh	r3, [r7, #30]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	8bfa      	ldrh	r2, [r7, #30]
 800c9ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c9d2:	b292      	uxth	r2, r2
 800c9d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	4413      	add	r3, r2
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	6812      	ldr	r2, [r2, #0]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c9f4:	881b      	ldrh	r3, [r3, #0]
 800c9f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c9fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800c9fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d019      	beq.n	800ca3a <PCD_EP_ISR_Handler+0x1e6>
 800ca06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d015      	beq.n	800ca3a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6818      	ldr	r0, [r3, #0]
 800ca12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca14:	6959      	ldr	r1, [r3, #20]
 800ca16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca18:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ca1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca1c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	f005 fb34 	bl	801208c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ca24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca26:	695a      	ldr	r2, [r3, #20]
 800ca28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca2a:	69db      	ldr	r3, [r3, #28]
 800ca2c:	441a      	add	r2, r3
 800ca2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca30:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ca32:	2100      	movs	r1, #0
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7f9 fdfd 	bl	8006634 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ca44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ca48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f040 82b5 	bne.w	800cfbc <PCD_EP_ISR_Handler+0x768>
 800ca52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ca56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ca5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca5e:	f000 82ad 	beq.w	800cfbc <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	61bb      	str	r3, [r7, #24]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	461a      	mov	r2, r3
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	4413      	add	r3, r2
 800ca78:	61bb      	str	r3, [r7, #24]
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca80:	617b      	str	r3, [r7, #20]
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	881b      	ldrh	r3, [r3, #0]
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca8c:	b29a      	uxth	r2, r3
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	801a      	strh	r2, [r3, #0]
 800ca92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	2b3e      	cmp	r3, #62	; 0x3e
 800ca98:	d91d      	bls.n	800cad6 <PCD_EP_ISR_Handler+0x282>
 800ca9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	095b      	lsrs	r3, r3, #5
 800caa0:	647b      	str	r3, [r7, #68]	; 0x44
 800caa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	f003 031f 	and.w	r3, r3, #31
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d102      	bne.n	800cab4 <PCD_EP_ISR_Handler+0x260>
 800caae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cab0:	3b01      	subs	r3, #1
 800cab2:	647b      	str	r3, [r7, #68]	; 0x44
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	b29a      	uxth	r2, r3
 800caba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	029b      	lsls	r3, r3, #10
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	4313      	orrs	r3, r2
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cace:	b29a      	uxth	r2, r3
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	801a      	strh	r2, [r3, #0]
 800cad4:	e026      	b.n	800cb24 <PCD_EP_ISR_Handler+0x2d0>
 800cad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d10a      	bne.n	800caf4 <PCD_EP_ISR_Handler+0x2a0>
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	881b      	ldrh	r3, [r3, #0]
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caec:	b29a      	uxth	r2, r3
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	801a      	strh	r2, [r3, #0]
 800caf2:	e017      	b.n	800cb24 <PCD_EP_ISR_Handler+0x2d0>
 800caf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	085b      	lsrs	r3, r3, #1
 800cafa:	647b      	str	r3, [r7, #68]	; 0x44
 800cafc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <PCD_EP_ISR_Handler+0x2ba>
 800cb08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	647b      	str	r3, [r7, #68]	; 0x44
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	029b      	lsls	r3, r3, #10
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb34:	827b      	strh	r3, [r7, #18]
 800cb36:	8a7b      	ldrh	r3, [r7, #18]
 800cb38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb3c:	827b      	strh	r3, [r7, #18]
 800cb3e:	8a7b      	ldrh	r3, [r7, #18]
 800cb40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cb44:	827b      	strh	r3, [r7, #18]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	8a7b      	ldrh	r3, [r7, #18]
 800cb4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	8013      	strh	r3, [r2, #0]
 800cb60:	e22c      	b.n	800cfbc <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	461a      	mov	r2, r3
 800cb68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	881b      	ldrh	r3, [r3, #0]
 800cb72:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800cb76:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f280 80f6 	bge.w	800cd6c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	461a      	mov	r2, r3
 800cb86:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4413      	add	r3, r2
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	f640 738f 	movw	r3, #3983	; 0xf8f
 800cb96:	4013      	ands	r3, r2
 800cb98:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	461a      	mov	r2, r3
 800cba2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	4413      	add	r3, r2
 800cbaa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800cbae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cbb2:	b292      	uxth	r2, r2
 800cbb4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800cbb6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800cbba:	4613      	mov	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	00db      	lsls	r3, r3, #3
 800cbc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	4413      	add	r3, r2
 800cbca:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800cbcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbce:	7b1b      	ldrb	r3, [r3, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d123      	bne.n	800cc1c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	461a      	mov	r2, r3
 800cbe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	4413      	add	r3, r2
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	6812      	ldr	r2, [r2, #0]
 800cbec:	4413      	add	r3, r2
 800cbee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cbf2:	881b      	ldrh	r3, [r3, #0]
 800cbf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbf8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800cbfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 808e 	beq.w	800cd22 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6818      	ldr	r0, [r3, #0]
 800cc0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc0c:	6959      	ldr	r1, [r3, #20]
 800cc0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc10:	88da      	ldrh	r2, [r3, #6]
 800cc12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cc16:	f005 fa39 	bl	801208c <USB_ReadPMA>
 800cc1a:	e082      	b.n	800cd22 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800cc1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc1e:	78db      	ldrb	r3, [r3, #3]
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d10a      	bne.n	800cc3a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800cc24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cc28:	461a      	mov	r2, r3
 800cc2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f9d3 	bl	800cfd8 <HAL_PCD_EP_DB_Receive>
 800cc32:	4603      	mov	r3, r0
 800cc34:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800cc38:	e073      	b.n	800cd22 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4413      	add	r3, r2
 800cc48:	881b      	ldrh	r3, [r3, #0]
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc54:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	441a      	add	r2, r3
 800cc66:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800cc6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	461a      	mov	r2, r3
 800cc84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d022      	beq.n	800ccde <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	461a      	mov	r2, r3
 800cca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	00db      	lsls	r3, r3, #3
 800ccaa:	4413      	add	r3, r2
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	6812      	ldr	r2, [r2, #0]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ccb6:	881b      	ldrh	r3, [r3, #0]
 800ccb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccbc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800ccc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d02c      	beq.n	800cd22 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6818      	ldr	r0, [r3, #0]
 800cccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccce:	6959      	ldr	r1, [r3, #20]
 800ccd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccd2:	891a      	ldrh	r2, [r3, #8]
 800ccd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ccd8:	f005 f9d8 	bl	801208c <USB_ReadPMA>
 800ccdc:	e021      	b.n	800cd22 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	461a      	mov	r2, r3
 800ccea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	4413      	add	r3, r2
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	6812      	ldr	r2, [r2, #0]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ccfc:	881b      	ldrh	r3, [r3, #0]
 800ccfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd02:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800cd06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d009      	beq.n	800cd22 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6818      	ldr	r0, [r3, #0]
 800cd12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd14:	6959      	ldr	r1, [r3, #20]
 800cd16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd18:	895a      	ldrh	r2, [r3, #10]
 800cd1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cd1e:	f005 f9b5 	bl	801208c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800cd22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd24:	69da      	ldr	r2, [r3, #28]
 800cd26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cd2a:	441a      	add	r2, r3
 800cd2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800cd30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd32:	695a      	ldr	r2, [r3, #20]
 800cd34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800cd38:	441a      	add	r2, r3
 800cd3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd3c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800cd3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d005      	beq.n	800cd52 <PCD_EP_ISR_Handler+0x4fe>
 800cd46:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800cd4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d206      	bcs.n	800cd60 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800cd52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	4619      	mov	r1, r3
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7f9 fc6b 	bl	8006634 <HAL_PCD_DataOutStageCallback>
 800cd5e:	e005      	b.n	800cd6c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd66:	4618      	mov	r0, r3
 800cd68:	f003 fc63 	bl	8010632 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800cd6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cd70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f000 8121 	beq.w	800cfbc <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800cd7a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800cd7e:	4613      	mov	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	3310      	adds	r3, #16
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	4413      	add	r3, r2
 800cd9c:	881b      	ldrh	r3, [r3, #0]
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800cda4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cda8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	441a      	add	r2, r3
 800cdba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cdbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800cdca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdcc:	78db      	ldrb	r3, [r3, #3]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	f040 80a2 	bne.w	800cf18 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800cdd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800cdda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cddc:	7b1b      	ldrb	r3, [r3, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 8093 	beq.w	800cf0a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cde4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cde8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d046      	beq.n	800ce7e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cdf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf2:	785b      	ldrb	r3, [r3, #1]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d126      	bne.n	800ce46 <PCD_EP_ISR_Handler+0x5f2>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	461a      	mov	r2, r3
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0c:	4413      	add	r3, r2
 800ce0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ce10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	00da      	lsls	r2, r3, #3
 800ce16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce18:	4413      	add	r3, r2
 800ce1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce1e:	623b      	str	r3, [r7, #32]
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	881b      	ldrh	r3, [r3, #0]
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	801a      	strh	r2, [r3, #0]
 800ce30:	6a3b      	ldr	r3, [r7, #32]
 800ce32:	881b      	ldrh	r3, [r3, #0]
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	6a3b      	ldr	r3, [r7, #32]
 800ce42:	801a      	strh	r2, [r3, #0]
 800ce44:	e061      	b.n	800cf0a <PCD_EP_ISR_Handler+0x6b6>
 800ce46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce48:	785b      	ldrb	r3, [r3, #1]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d15d      	bne.n	800cf0a <PCD_EP_ISR_Handler+0x6b6>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	461a      	mov	r2, r3
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	4413      	add	r3, r2
 800ce64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	00da      	lsls	r2, r3, #3
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	4413      	add	r3, r2
 800ce70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce74:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	2200      	movs	r2, #0
 800ce7a:	801a      	strh	r2, [r3, #0]
 800ce7c:	e045      	b.n	800cf0a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce86:	785b      	ldrb	r3, [r3, #1]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d126      	bne.n	800ceda <PCD_EP_ISR_Handler+0x686>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	637b      	str	r3, [r7, #52]	; 0x34
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea0:	4413      	add	r3, r2
 800cea2:	637b      	str	r3, [r7, #52]	; 0x34
 800cea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	00da      	lsls	r2, r3, #3
 800ceaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceac:	4413      	add	r3, r2
 800ceae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ceb2:	633b      	str	r3, [r7, #48]	; 0x30
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	881b      	ldrh	r3, [r3, #0]
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec2:	801a      	strh	r2, [r3, #0]
 800cec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced6:	801a      	strh	r2, [r3, #0]
 800ced8:	e017      	b.n	800cf0a <PCD_EP_ISR_Handler+0x6b6>
 800ceda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cedc:	785b      	ldrb	r3, [r3, #1]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d113      	bne.n	800cf0a <PCD_EP_ISR_Handler+0x6b6>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	461a      	mov	r2, r3
 800ceee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef0:	4413      	add	r3, r2
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	00da      	lsls	r2, r3, #3
 800cefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cefc:	4413      	add	r3, r2
 800cefe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cf02:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf06:	2200      	movs	r2, #0
 800cf08:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cf0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7f9 fbaa 	bl	800666a <HAL_PCD_DataInStageCallback>
 800cf16:	e051      	b.n	800cfbc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800cf18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cf1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d144      	bne.n	800cfae <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	461a      	mov	r2, r3
 800cf30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	4413      	add	r3, r2
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	6812      	ldr	r2, [r2, #0]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf42:	881b      	ldrh	r3, [r3, #0]
 800cf44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800cf4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf4e:	699a      	ldr	r2, [r3, #24]
 800cf50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d907      	bls.n	800cf68 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800cf58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf5a:	699a      	ldr	r2, [r3, #24]
 800cf5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cf60:	1ad2      	subs	r2, r2, r3
 800cf62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf64:	619a      	str	r2, [r3, #24]
 800cf66:	e002      	b.n	800cf6e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800cf68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800cf6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d106      	bne.n	800cf84 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800cf76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7f9 fb74 	bl	800666a <HAL_PCD_DataInStageCallback>
 800cf82:	e01b      	b.n	800cfbc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800cf84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf86:	695a      	ldr	r2, [r3, #20]
 800cf88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cf8c:	441a      	add	r2, r3
 800cf8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf90:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800cf92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf94:	69da      	ldr	r2, [r3, #28]
 800cf96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cf9a:	441a      	add	r2, r3
 800cf9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf9e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f003 fb43 	bl	8010632 <USB_EPStartXfer>
 800cfac:	e006      	b.n	800cfbc <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800cfae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f917 	bl	800d1ea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	b21b      	sxth	r3, r3
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	f6ff ac48 	blt.w	800c85e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3758      	adds	r7, #88	; 0x58
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b088      	sub	sp, #32
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800cfe6:	88fb      	ldrh	r3, [r7, #6]
 800cfe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d07c      	beq.n	800d0ea <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	461a      	mov	r2, r3
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	4413      	add	r3, r2
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	6812      	ldr	r2, [r2, #0]
 800d008:	4413      	add	r3, r2
 800d00a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d00e:	881b      	ldrh	r3, [r3, #0]
 800d010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d014:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	699a      	ldr	r2, [r3, #24]
 800d01a:	8b7b      	ldrh	r3, [r7, #26]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d306      	bcc.n	800d02e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	699a      	ldr	r2, [r3, #24]
 800d024:	8b7b      	ldrh	r3, [r7, #26]
 800d026:	1ad2      	subs	r2, r2, r3
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	619a      	str	r2, [r3, #24]
 800d02c:	e002      	b.n	800d034 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2200      	movs	r2, #0
 800d032:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d123      	bne.n	800d084 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	461a      	mov	r2, r3
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4413      	add	r3, r2
 800d04a:	881b      	ldrh	r3, [r3, #0]
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d056:	833b      	strh	r3, [r7, #24]
 800d058:	8b3b      	ldrh	r3, [r7, #24]
 800d05a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d05e:	833b      	strh	r3, [r7, #24]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	461a      	mov	r2, r3
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	441a      	add	r2, r3
 800d06e:	8b3b      	ldrh	r3, [r7, #24]
 800d070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d080:	b29b      	uxth	r3, r3
 800d082:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d084:	88fb      	ldrh	r3, [r7, #6]
 800d086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d01f      	beq.n	800d0ce <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4413      	add	r3, r2
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0a8:	82fb      	strh	r3, [r7, #22]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	441a      	add	r2, r3
 800d0b8:	8afb      	ldrh	r3, [r7, #22]
 800d0ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800d0ce:	8b7b      	ldrh	r3, [r7, #26]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f000 8085 	beq.w	800d1e0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6818      	ldr	r0, [r3, #0]
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	6959      	ldr	r1, [r3, #20]
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	891a      	ldrh	r2, [r3, #8]
 800d0e2:	8b7b      	ldrh	r3, [r7, #26]
 800d0e4:	f004 ffd2 	bl	801208c <USB_ReadPMA>
 800d0e8:	e07a      	b.n	800d1e0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	4413      	add	r3, r2
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	6812      	ldr	r2, [r2, #0]
 800d102:	4413      	add	r3, r2
 800d104:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d108:	881b      	ldrh	r3, [r3, #0]
 800d10a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d10e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	699a      	ldr	r2, [r3, #24]
 800d114:	8b7b      	ldrh	r3, [r7, #26]
 800d116:	429a      	cmp	r2, r3
 800d118:	d306      	bcc.n	800d128 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	699a      	ldr	r2, [r3, #24]
 800d11e:	8b7b      	ldrh	r3, [r7, #26]
 800d120:	1ad2      	subs	r2, r2, r3
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	619a      	str	r2, [r3, #24]
 800d126:	e002      	b.n	800d12e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2200      	movs	r2, #0
 800d12c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d123      	bne.n	800d17e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	461a      	mov	r2, r3
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	881b      	ldrh	r3, [r3, #0]
 800d146:	b29b      	uxth	r3, r3
 800d148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d14c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d150:	83fb      	strh	r3, [r7, #30]
 800d152:	8bfb      	ldrh	r3, [r7, #30]
 800d154:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d158:	83fb      	strh	r3, [r7, #30]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	441a      	add	r2, r3
 800d168:	8bfb      	ldrh	r3, [r7, #30]
 800d16a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d16e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800d17e:	88fb      	ldrh	r3, [r7, #6]
 800d180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d184:	2b00      	cmp	r3, #0
 800d186:	d11f      	bne.n	800d1c8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	461a      	mov	r2, r3
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	b29b      	uxth	r3, r3
 800d19a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1a2:	83bb      	strh	r3, [r7, #28]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	441a      	add	r2, r3
 800d1b2:	8bbb      	ldrh	r3, [r7, #28]
 800d1b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800d1c8:	8b7b      	ldrh	r3, [r7, #26]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d008      	beq.n	800d1e0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6818      	ldr	r0, [r3, #0]
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	6959      	ldr	r1, [r3, #20]
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	895a      	ldrh	r2, [r3, #10]
 800d1da:	8b7b      	ldrh	r3, [r7, #26]
 800d1dc:	f004 ff56 	bl	801208c <USB_ReadPMA>
    }
  }

  return count;
 800d1e0:	8b7b      	ldrh	r3, [r7, #26]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3720      	adds	r7, #32
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b0a4      	sub	sp, #144	; 0x90
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	60f8      	str	r0, [r7, #12]
 800d1f2:	60b9      	str	r1, [r7, #8]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d1f8:	88fb      	ldrh	r3, [r7, #6]
 800d1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 81db 	beq.w	800d5ba <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	461a      	mov	r2, r3
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	00db      	lsls	r3, r3, #3
 800d216:	4413      	add	r3, r2
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	6812      	ldr	r2, [r2, #0]
 800d21c:	4413      	add	r3, r2
 800d21e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d222:	881b      	ldrh	r3, [r3, #0]
 800d224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d228:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	699a      	ldr	r2, [r3, #24]
 800d230:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d234:	429a      	cmp	r2, r3
 800d236:	d907      	bls.n	800d248 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	699a      	ldr	r2, [r3, #24]
 800d23c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d240:	1ad2      	subs	r2, r2, r3
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	619a      	str	r2, [r3, #24]
 800d246:	e002      	b.n	800d24e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	2200      	movs	r2, #0
 800d24c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	699b      	ldr	r3, [r3, #24]
 800d252:	2b00      	cmp	r3, #0
 800d254:	f040 80b9 	bne.w	800d3ca <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	785b      	ldrb	r3, [r3, #1]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d126      	bne.n	800d2ae <HAL_PCD_EP_DB_Transmit+0xc4>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d26e:	b29b      	uxth	r3, r3
 800d270:	461a      	mov	r2, r3
 800d272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d274:	4413      	add	r3, r2
 800d276:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	00da      	lsls	r2, r3, #3
 800d27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d280:	4413      	add	r3, r2
 800d282:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d286:	62bb      	str	r3, [r7, #40]	; 0x28
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	881b      	ldrh	r3, [r3, #0]
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d292:	b29a      	uxth	r2, r3
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	801a      	strh	r2, [r3, #0]
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	881b      	ldrh	r3, [r3, #0]
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	801a      	strh	r2, [r3, #0]
 800d2ac:	e01a      	b.n	800d2e4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	785b      	ldrb	r3, [r3, #1]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d116      	bne.n	800d2e4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ca:	4413      	add	r3, r2
 800d2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	00da      	lsls	r2, r3, #3
 800d2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d2dc:	633b      	str	r3, [r7, #48]	; 0x30
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	785b      	ldrb	r3, [r3, #1]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d126      	bne.n	800d340 <HAL_PCD_EP_DB_Transmit+0x156>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	61fb      	str	r3, [r7, #28]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d300:	b29b      	uxth	r3, r3
 800d302:	461a      	mov	r2, r3
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	4413      	add	r3, r2
 800d308:	61fb      	str	r3, [r7, #28]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	00da      	lsls	r2, r3, #3
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	4413      	add	r3, r2
 800d314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d318:	61bb      	str	r3, [r7, #24]
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	b29b      	uxth	r3, r3
 800d320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d324:	b29a      	uxth	r2, r3
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	801a      	strh	r2, [r3, #0]
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	881b      	ldrh	r3, [r3, #0]
 800d32e:	b29b      	uxth	r3, r3
 800d330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d338:	b29a      	uxth	r2, r3
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	801a      	strh	r2, [r3, #0]
 800d33e:	e017      	b.n	800d370 <HAL_PCD_EP_DB_Transmit+0x186>
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	785b      	ldrb	r3, [r3, #1]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d113      	bne.n	800d370 <HAL_PCD_EP_DB_Transmit+0x186>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d350:	b29b      	uxth	r3, r3
 800d352:	461a      	mov	r2, r3
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	4413      	add	r3, r2
 800d358:	627b      	str	r3, [r7, #36]	; 0x24
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	00da      	lsls	r2, r3, #3
 800d360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d362:	4413      	add	r3, r2
 800d364:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d368:	623b      	str	r3, [r7, #32]
 800d36a:	6a3b      	ldr	r3, [r7, #32]
 800d36c:	2200      	movs	r2, #0
 800d36e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	4619      	mov	r1, r3
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f7f9 f977 	bl	800666a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d37c:	88fb      	ldrh	r3, [r7, #6]
 800d37e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 82fa 	beq.w	800d97c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	461a      	mov	r2, r3
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	4413      	add	r3, r2
 800d396:	881b      	ldrh	r3, [r3, #0]
 800d398:	b29b      	uxth	r3, r3
 800d39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3a2:	82fb      	strh	r3, [r7, #22]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	441a      	add	r2, r3
 800d3b2:	8afb      	ldrh	r3, [r7, #22]
 800d3b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d3c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	8013      	strh	r3, [r2, #0]
 800d3c8:	e2d8      	b.n	800d97c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d3ca:	88fb      	ldrh	r3, [r7, #6]
 800d3cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d021      	beq.n	800d418 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4413      	add	r3, r2
 800d3e2:	881b      	ldrh	r3, [r3, #0]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3ee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	441a      	add	r2, r3
 800d400:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d40c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d414:	b29b      	uxth	r3, r3
 800d416:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d41e:	2b01      	cmp	r3, #1
 800d420:	f040 82ac 	bne.w	800d97c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	695a      	ldr	r2, [r3, #20]
 800d428:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d42c:	441a      	add	r2, r3
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	69da      	ldr	r2, [r3, #28]
 800d436:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d43a:	441a      	add	r2, r3
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	6a1a      	ldr	r2, [r3, #32]
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	691b      	ldr	r3, [r3, #16]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d30b      	bcc.n	800d464 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	6a1a      	ldr	r2, [r3, #32]
 800d458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d45c:	1ad2      	subs	r2, r2, r3
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	621a      	str	r2, [r3, #32]
 800d462:	e017      	b.n	800d494 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	6a1b      	ldr	r3, [r3, #32]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d108      	bne.n	800d47e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800d46c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d470:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2200      	movs	r2, #0
 800d478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d47c:	e00a      	b.n	800d494 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	6a1b      	ldr	r3, [r3, #32]
 800d48a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	2200      	movs	r2, #0
 800d492:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	785b      	ldrb	r3, [r3, #1]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d165      	bne.n	800d568 <HAL_PCD_EP_DB_Transmit+0x37e>
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b0:	4413      	add	r3, r2
 800d4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	00da      	lsls	r2, r3, #3
 800d4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4bc:	4413      	add	r3, r2
 800d4be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d4c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d2:	801a      	strh	r2, [r3, #0]
 800d4d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4d8:	2b3e      	cmp	r3, #62	; 0x3e
 800d4da:	d91d      	bls.n	800d518 <HAL_PCD_EP_DB_Transmit+0x32e>
 800d4dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4e0:	095b      	lsrs	r3, r3, #5
 800d4e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4e8:	f003 031f 	and.w	r3, r3, #31
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d102      	bne.n	800d4f6 <HAL_PCD_EP_DB_Transmit+0x30c>
 800d4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	029b      	lsls	r3, r3, #10
 800d502:	b29b      	uxth	r3, r3
 800d504:	4313      	orrs	r3, r2
 800d506:	b29b      	uxth	r3, r3
 800d508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d50c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d510:	b29a      	uxth	r2, r3
 800d512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d514:	801a      	strh	r2, [r3, #0]
 800d516:	e044      	b.n	800d5a2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10a      	bne.n	800d536 <HAL_PCD_EP_DB_Transmit+0x34c>
 800d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	b29b      	uxth	r3, r3
 800d526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d52a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d52e:	b29a      	uxth	r2, r3
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	801a      	strh	r2, [r3, #0]
 800d534:	e035      	b.n	800d5a2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d53a:	085b      	lsrs	r3, r3, #1
 800d53c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d53e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <HAL_PCD_EP_DB_Transmit+0x366>
 800d54a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d54c:	3301      	adds	r3, #1
 800d54e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d552:	881b      	ldrh	r3, [r3, #0]
 800d554:	b29a      	uxth	r2, r3
 800d556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d558:	b29b      	uxth	r3, r3
 800d55a:	029b      	lsls	r3, r3, #10
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	4313      	orrs	r3, r2
 800d560:	b29a      	uxth	r2, r3
 800d562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d564:	801a      	strh	r2, [r3, #0]
 800d566:	e01c      	b.n	800d5a2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	785b      	ldrb	r3, [r3, #1]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d118      	bne.n	800d5a2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	647b      	str	r3, [r7, #68]	; 0x44
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d57e:	b29b      	uxth	r3, r3
 800d580:	461a      	mov	r2, r3
 800d582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d584:	4413      	add	r3, r2
 800d586:	647b      	str	r3, [r7, #68]	; 0x44
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	00da      	lsls	r2, r3, #3
 800d58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d590:	4413      	add	r3, r2
 800d592:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d596:	643b      	str	r3, [r7, #64]	; 0x40
 800d598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6818      	ldr	r0, [r3, #0]
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	6959      	ldr	r1, [r3, #20]
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	891a      	ldrh	r2, [r3, #8]
 800d5ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	f004 fd28 	bl	8012008 <USB_WritePMA>
 800d5b8:	e1e0      	b.n	800d97c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	4413      	add	r3, r2
 800d5ce:	68fa      	ldr	r2, [r7, #12]
 800d5d0:	6812      	ldr	r2, [r2, #0]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	699a      	ldr	r2, [r3, #24]
 800d5e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d307      	bcc.n	800d5fe <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	699a      	ldr	r2, [r3, #24]
 800d5f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	619a      	str	r2, [r3, #24]
 800d5fc:	e002      	b.n	800d604 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	2200      	movs	r2, #0
 800d602:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f040 80c0 	bne.w	800d78e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	785b      	ldrb	r3, [r3, #1]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d126      	bne.n	800d664 <HAL_PCD_EP_DB_Transmit+0x47a>
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d624:	b29b      	uxth	r3, r3
 800d626:	461a      	mov	r2, r3
 800d628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d62a:	4413      	add	r3, r2
 800d62c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	00da      	lsls	r2, r3, #3
 800d634:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d636:	4413      	add	r3, r2
 800d638:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d63c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d63e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d640:	881b      	ldrh	r3, [r3, #0]
 800d642:	b29b      	uxth	r3, r3
 800d644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d648:	b29a      	uxth	r2, r3
 800d64a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d64c:	801a      	strh	r2, [r3, #0]
 800d64e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d650:	881b      	ldrh	r3, [r3, #0]
 800d652:	b29b      	uxth	r3, r3
 800d654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d660:	801a      	strh	r2, [r3, #0]
 800d662:	e01a      	b.n	800d69a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	785b      	ldrb	r3, [r3, #1]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d116      	bne.n	800d69a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	667b      	str	r3, [r7, #100]	; 0x64
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	461a      	mov	r2, r3
 800d67e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d680:	4413      	add	r3, r2
 800d682:	667b      	str	r3, [r7, #100]	; 0x64
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	00da      	lsls	r2, r3, #3
 800d68a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d68c:	4413      	add	r3, r2
 800d68e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d692:	663b      	str	r3, [r7, #96]	; 0x60
 800d694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d696:	2200      	movs	r2, #0
 800d698:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	677b      	str	r3, [r7, #116]	; 0x74
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	785b      	ldrb	r3, [r3, #1]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d12b      	bne.n	800d700 <HAL_PCD_EP_DB_Transmit+0x516>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6bc:	4413      	add	r3, r2
 800d6be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	00da      	lsls	r2, r3, #3
 800d6c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6c8:	4413      	add	r3, r2
 800d6ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d6ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d6d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d6e4:	801a      	strh	r2, [r3, #0]
 800d6e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d6fc:	801a      	strh	r2, [r3, #0]
 800d6fe:	e017      	b.n	800d730 <HAL_PCD_EP_DB_Transmit+0x546>
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	785b      	ldrb	r3, [r3, #1]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d113      	bne.n	800d730 <HAL_PCD_EP_DB_Transmit+0x546>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d710:	b29b      	uxth	r3, r3
 800d712:	461a      	mov	r2, r3
 800d714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d716:	4413      	add	r3, r2
 800d718:	677b      	str	r3, [r7, #116]	; 0x74
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	00da      	lsls	r2, r3, #3
 800d720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d722:	4413      	add	r3, r2
 800d724:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d728:	673b      	str	r3, [r7, #112]	; 0x70
 800d72a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d72c:	2200      	movs	r2, #0
 800d72e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	4619      	mov	r1, r3
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	f7f8 ff97 	bl	800666a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d73c:	88fb      	ldrh	r3, [r7, #6]
 800d73e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d742:	2b00      	cmp	r3, #0
 800d744:	f040 811a 	bne.w	800d97c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	4413      	add	r3, r2
 800d756:	881b      	ldrh	r3, [r3, #0]
 800d758:	b29b      	uxth	r3, r3
 800d75a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d762:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	461a      	mov	r2, r3
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	441a      	add	r2, r3
 800d774:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800d778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d77c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d788:	b29b      	uxth	r3, r3
 800d78a:	8013      	strh	r3, [r2, #0]
 800d78c:	e0f6      	b.n	800d97c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d78e:	88fb      	ldrh	r3, [r7, #6]
 800d790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d794:	2b00      	cmp	r3, #0
 800d796:	d121      	bne.n	800d7dc <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	461a      	mov	r2, r3
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	4413      	add	r3, r2
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	441a      	add	r2, r3
 800d7c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d7c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	f040 80ca 	bne.w	800d97c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	695a      	ldr	r2, [r3, #20]
 800d7ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d7f0:	441a      	add	r2, r3
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	69da      	ldr	r2, [r3, #28]
 800d7fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d7fe:	441a      	add	r2, r3
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	6a1a      	ldr	r2, [r3, #32]
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d30b      	bcc.n	800d828 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	691b      	ldr	r3, [r3, #16]
 800d814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	6a1a      	ldr	r2, [r3, #32]
 800d81c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d820:	1ad2      	subs	r2, r2, r3
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	621a      	str	r2, [r3, #32]
 800d826:	e017      	b.n	800d858 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	6a1b      	ldr	r3, [r3, #32]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d108      	bne.n	800d842 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800d830:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d840:	e00a      	b.n	800d858 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	6a1b      	ldr	r3, [r3, #32]
 800d846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	2200      	movs	r2, #0
 800d84e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	2200      	movs	r2, #0
 800d854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	657b      	str	r3, [r7, #84]	; 0x54
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	785b      	ldrb	r3, [r3, #1]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d165      	bne.n	800d932 <HAL_PCD_EP_DB_Transmit+0x748>
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d874:	b29b      	uxth	r3, r3
 800d876:	461a      	mov	r2, r3
 800d878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d87a:	4413      	add	r3, r2
 800d87c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	00da      	lsls	r2, r3, #3
 800d884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d886:	4413      	add	r3, r2
 800d888:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d88c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d88e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	b29b      	uxth	r3, r3
 800d894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d898:	b29a      	uxth	r2, r3
 800d89a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d89c:	801a      	strh	r2, [r3, #0]
 800d89e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8a2:	2b3e      	cmp	r3, #62	; 0x3e
 800d8a4:	d91d      	bls.n	800d8e2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800d8a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8aa:	095b      	lsrs	r3, r3, #5
 800d8ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8b2:	f003 031f 	and.w	r3, r3, #31
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d102      	bne.n	800d8c0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800d8ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8c2:	881b      	ldrh	r3, [r3, #0]
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	029b      	lsls	r3, r3, #10
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8de:	801a      	strh	r2, [r3, #0]
 800d8e0:	e041      	b.n	800d966 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d8e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d10a      	bne.n	800d900 <HAL_PCD_EP_DB_Transmit+0x716>
 800d8ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8ec:	881b      	ldrh	r3, [r3, #0]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8fc:	801a      	strh	r2, [r3, #0]
 800d8fe:	e032      	b.n	800d966 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d904:	085b      	lsrs	r3, r3, #1
 800d906:	66bb      	str	r3, [r7, #104]	; 0x68
 800d908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <HAL_PCD_EP_DB_Transmit+0x730>
 800d914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d916:	3301      	adds	r3, #1
 800d918:	66bb      	str	r3, [r7, #104]	; 0x68
 800d91a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d91c:	881b      	ldrh	r3, [r3, #0]
 800d91e:	b29a      	uxth	r2, r3
 800d920:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d922:	b29b      	uxth	r3, r3
 800d924:	029b      	lsls	r3, r3, #10
 800d926:	b29b      	uxth	r3, r3
 800d928:	4313      	orrs	r3, r2
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d92e:	801a      	strh	r2, [r3, #0]
 800d930:	e019      	b.n	800d966 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	785b      	ldrb	r3, [r3, #1]
 800d936:	2b01      	cmp	r3, #1
 800d938:	d115      	bne.n	800d966 <HAL_PCD_EP_DB_Transmit+0x77c>
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d942:	b29b      	uxth	r3, r3
 800d944:	461a      	mov	r2, r3
 800d946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d948:	4413      	add	r3, r2
 800d94a:	657b      	str	r3, [r7, #84]	; 0x54
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	00da      	lsls	r2, r3, #3
 800d952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d954:	4413      	add	r3, r2
 800d956:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d95a:	653b      	str	r3, [r7, #80]	; 0x50
 800d95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d960:	b29a      	uxth	r2, r3
 800d962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d964:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6818      	ldr	r0, [r3, #0]
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	6959      	ldr	r1, [r3, #20]
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	895a      	ldrh	r2, [r3, #10]
 800d972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d976:	b29b      	uxth	r3, r3
 800d978:	f004 fb46 	bl	8012008 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	461a      	mov	r2, r3
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4413      	add	r3, r2
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d996:	82bb      	strh	r3, [r7, #20]
 800d998:	8abb      	ldrh	r3, [r7, #20]
 800d99a:	f083 0310 	eor.w	r3, r3, #16
 800d99e:	82bb      	strh	r3, [r7, #20]
 800d9a0:	8abb      	ldrh	r3, [r7, #20]
 800d9a2:	f083 0320 	eor.w	r3, r3, #32
 800d9a6:	82bb      	strh	r3, [r7, #20]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	441a      	add	r2, r3
 800d9b6:	8abb      	ldrh	r3, [r7, #20]
 800d9b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3790      	adds	r7, #144	; 0x90
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	b087      	sub	sp, #28
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	60f8      	str	r0, [r7, #12]
 800d9de:	607b      	str	r3, [r7, #4]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	817b      	strh	r3, [r7, #10]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800d9e8:	897b      	ldrh	r3, [r7, #10]
 800d9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00b      	beq.n	800da0c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d9f4:	897b      	ldrh	r3, [r7, #10]
 800d9f6:	f003 0207 	and.w	r2, r3, #7
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	3310      	adds	r3, #16
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	4413      	add	r3, r2
 800da08:	617b      	str	r3, [r7, #20]
 800da0a:	e009      	b.n	800da20 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800da0c:	897a      	ldrh	r2, [r7, #10]
 800da0e:	4613      	mov	r3, r2
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4413      	add	r3, r2
 800da14:	00db      	lsls	r3, r3, #3
 800da16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	4413      	add	r3, r2
 800da1e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800da20:	893b      	ldrh	r3, [r7, #8]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d107      	bne.n	800da36 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2200      	movs	r2, #0
 800da2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	b29a      	uxth	r2, r3
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	80da      	strh	r2, [r3, #6]
 800da34:	e00b      	b.n	800da4e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2201      	movs	r2, #1
 800da3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	b29a      	uxth	r2, r3
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	0c1b      	lsrs	r3, r3, #16
 800da48:	b29a      	uxth	r2, r3
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800da4e:	2300      	movs	r3, #0
}
 800da50:	4618      	mov	r0, r3
 800da52:	371c      	adds	r7, #28
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2201      	movs	r2, #1
 800da6e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800da80:	b29b      	uxth	r3, r3
 800da82:	f043 0301 	orr.w	r3, r3, #1
 800da86:	b29a      	uxth	r2, r3
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800da94:	b29b      	uxth	r3, r3
 800da96:	f043 0302 	orr.w	r3, r3, #2
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3714      	adds	r7, #20
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800dab0:	b480      	push	{r7}
 800dab2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dab4:	4b05      	ldr	r3, [pc, #20]	; (800dacc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a04      	ldr	r2, [pc, #16]	; (800dacc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800daba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dabe:	6013      	str	r3, [r2, #0]
}
 800dac0:	bf00      	nop
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	58000400 	.word	0x58000400

0800dad0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800dad0:	b480      	push	{r7}
 800dad2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800dad4:	4b04      	ldr	r3, [pc, #16]	; (800dae8 <HAL_PWREx_GetVoltageRange+0x18>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800dadc:	4618      	mov	r0, r3
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	58000400 	.word	0x58000400

0800daec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800daec:	b480      	push	{r7}
 800daee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800daf0:	4b05      	ldr	r3, [pc, #20]	; (800db08 <HAL_PWREx_EnableVddUSB+0x1c>)
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	4a04      	ldr	r2, [pc, #16]	; (800db08 <HAL_PWREx_EnableVddUSB+0x1c>)
 800daf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dafa:	6053      	str	r3, [r2, #4]
}
 800dafc:	bf00      	nop
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	58000400 	.word	0x58000400

0800db0c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800db0c:	b480      	push	{r7}
 800db0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800db10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db1e:	d101      	bne.n	800db24 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800db20:	2301      	movs	r3, #1
 800db22:	e000      	b.n	800db26 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr

0800db30 <LL_RCC_HSE_Enable>:
{
 800db30:	b480      	push	{r7}
 800db32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800db34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db42:	6013      	str	r3, [r2, #0]
}
 800db44:	bf00      	nop
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <LL_RCC_HSE_Disable>:
{
 800db4e:	b480      	push	{r7}
 800db50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800db52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db60:	6013      	str	r3, [r2, #0]
}
 800db62:	bf00      	nop
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <LL_RCC_HSE_IsReady>:
{
 800db6c:	b480      	push	{r7}
 800db6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800db70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db7e:	d101      	bne.n	800db84 <LL_RCC_HSE_IsReady+0x18>
 800db80:	2301      	movs	r3, #1
 800db82:	e000      	b.n	800db86 <LL_RCC_HSE_IsReady+0x1a>
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <LL_RCC_HSI_Enable>:
{
 800db90:	b480      	push	{r7}
 800db92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800db94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dba2:	6013      	str	r3, [r2, #0]
}
 800dba4:	bf00      	nop
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr

0800dbae <LL_RCC_HSI_Disable>:
{
 800dbae:	b480      	push	{r7}
 800dbb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800dbb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dbbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbc0:	6013      	str	r3, [r2, #0]
}
 800dbc2:	bf00      	nop
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <LL_RCC_HSI_IsReady>:
{
 800dbcc:	b480      	push	{r7}
 800dbce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800dbd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbde:	d101      	bne.n	800dbe4 <LL_RCC_HSI_IsReady+0x18>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e000      	b.n	800dbe6 <LL_RCC_HSI_IsReady+0x1a>
 800dbe4:	2300      	movs	r3, #0
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <LL_RCC_HSI_SetCalibTrimming>:
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800dbf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	061b      	lsls	r3, r3, #24
 800dc06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	604b      	str	r3, [r1, #4]
}
 800dc0e:	bf00      	nop
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <LL_RCC_HSI48_Enable>:
{
 800dc1a:	b480      	push	{r7}
 800dc1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800dc1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dc26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc2a:	f043 0301 	orr.w	r3, r3, #1
 800dc2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800dc32:	bf00      	nop
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <LL_RCC_HSI48_Disable>:
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800dc40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dc48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc4c:	f023 0301 	bic.w	r3, r3, #1
 800dc50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800dc54:	bf00      	nop
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr

0800dc5e <LL_RCC_HSI48_IsReady>:
{
 800dc5e:	b480      	push	{r7}
 800dc60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800dc62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dc6a:	f003 0302 	and.w	r3, r3, #2
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d101      	bne.n	800dc76 <LL_RCC_HSI48_IsReady+0x18>
 800dc72:	2301      	movs	r3, #1
 800dc74:	e000      	b.n	800dc78 <LL_RCC_HSI48_IsReady+0x1a>
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr

0800dc82 <LL_RCC_LSE_Enable>:
{
 800dc82:	b480      	push	{r7}
 800dc84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800dc86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc92:	f043 0301 	orr.w	r3, r3, #1
 800dc96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800dc9a:	bf00      	nop
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <LL_RCC_LSE_Disable>:
{
 800dca4:	b480      	push	{r7}
 800dca6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800dca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dcac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dcb4:	f023 0301 	bic.w	r3, r3, #1
 800dcb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800dcbc:	bf00      	nop
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr

0800dcc6 <LL_RCC_LSE_EnableBypass>:
{
 800dcc6:	b480      	push	{r7}
 800dcc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800dcca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dcd6:	f043 0304 	orr.w	r3, r3, #4
 800dcda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800dcde:	bf00      	nop
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <LL_RCC_LSE_DisableBypass>:
{
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800dcec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dcf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dcf8:	f023 0304 	bic.w	r3, r3, #4
 800dcfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800dd00:	bf00      	nop
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr

0800dd0a <LL_RCC_LSE_IsReady>:
{
 800dd0a:	b480      	push	{r7}
 800dd0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800dd0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd16:	f003 0302 	and.w	r3, r3, #2
 800dd1a:	2b02      	cmp	r3, #2
 800dd1c:	d101      	bne.n	800dd22 <LL_RCC_LSE_IsReady+0x18>
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e000      	b.n	800dd24 <LL_RCC_LSE_IsReady+0x1a>
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr

0800dd2e <LL_RCC_LSI1_Enable>:
{
 800dd2e:	b480      	push	{r7}
 800dd30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800dd32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dd3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dd3e:	f043 0301 	orr.w	r3, r3, #1
 800dd42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800dd46:	bf00      	nop
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <LL_RCC_LSI1_Disable>:
{
 800dd50:	b480      	push	{r7}
 800dd52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800dd54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dd5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dd60:	f023 0301 	bic.w	r3, r3, #1
 800dd64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800dd68:	bf00      	nop
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <LL_RCC_LSI1_IsReady>:
{
 800dd72:	b480      	push	{r7}
 800dd74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800dd76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dd7e:	f003 0302 	and.w	r3, r3, #2
 800dd82:	2b02      	cmp	r3, #2
 800dd84:	d101      	bne.n	800dd8a <LL_RCC_LSI1_IsReady+0x18>
 800dd86:	2301      	movs	r3, #1
 800dd88:	e000      	b.n	800dd8c <LL_RCC_LSI1_IsReady+0x1a>
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr

0800dd96 <LL_RCC_LSI2_Enable>:
{
 800dd96:	b480      	push	{r7}
 800dd98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800dd9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dda2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dda6:	f043 0304 	orr.w	r3, r3, #4
 800ddaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ddae:	bf00      	nop
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <LL_RCC_LSI2_Disable>:
{
 800ddb8:	b480      	push	{r7}
 800ddba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ddbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ddc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ddc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ddc8:	f023 0304 	bic.w	r3, r3, #4
 800ddcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800ddd0:	bf00      	nop
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <LL_RCC_LSI2_IsReady>:
{
 800ddda:	b480      	push	{r7}
 800dddc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ddde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dde2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dde6:	f003 0308 	and.w	r3, r3, #8
 800ddea:	2b08      	cmp	r3, #8
 800ddec:	d101      	bne.n	800ddf2 <LL_RCC_LSI2_IsReady+0x18>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e000      	b.n	800ddf4 <LL_RCC_LSI2_IsReady+0x1a>
 800ddf2:	2300      	movs	r3, #0
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr

0800ddfe <LL_RCC_LSI2_SetTrimming>:
{
 800ddfe:	b480      	push	{r7}
 800de00:	b083      	sub	sp, #12
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800de06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	021b      	lsls	r3, r3, #8
 800de16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800de1a:	4313      	orrs	r3, r2
 800de1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800de20:	bf00      	nop
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <LL_RCC_MSI_Enable>:
{
 800de2c:	b480      	push	{r7}
 800de2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800de30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800de3a:	f043 0301 	orr.w	r3, r3, #1
 800de3e:	6013      	str	r3, [r2, #0]
}
 800de40:	bf00      	nop
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <LL_RCC_MSI_Disable>:
{
 800de4a:	b480      	push	{r7}
 800de4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800de4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800de58:	f023 0301 	bic.w	r3, r3, #1
 800de5c:	6013      	str	r3, [r2, #0]
}
 800de5e:	bf00      	nop
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <LL_RCC_MSI_IsReady>:
{
 800de68:	b480      	push	{r7}
 800de6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800de6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f003 0302 	and.w	r3, r3, #2
 800de76:	2b02      	cmp	r3, #2
 800de78:	d101      	bne.n	800de7e <LL_RCC_MSI_IsReady+0x16>
 800de7a:	2301      	movs	r3, #1
 800de7c:	e000      	b.n	800de80 <LL_RCC_MSI_IsReady+0x18>
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr

0800de8a <LL_RCC_MSI_SetRange>:
{
 800de8a:	b480      	push	{r7}
 800de8c:	b083      	sub	sp, #12
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800de92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800de9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	600b      	str	r3, [r1, #0]
}
 800dea6:	bf00      	nop
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <LL_RCC_MSI_GetRange>:
{
 800deb2:	b480      	push	{r7}
 800deb4:	b083      	sub	sp, #12
 800deb6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800deb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dec2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2bb0      	cmp	r3, #176	; 0xb0
 800dec8:	d901      	bls.n	800dece <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800deca:	23b0      	movs	r3, #176	; 0xb0
 800decc:	607b      	str	r3, [r7, #4]
  return msiRange;
 800dece:	687b      	ldr	r3, [r7, #4]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <LL_RCC_MSI_SetCalibTrimming>:
{
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800dee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	021b      	lsls	r3, r3, #8
 800def2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800def6:	4313      	orrs	r3, r2
 800def8:	604b      	str	r3, [r1, #4]
}
 800defa:	bf00      	nop
 800defc:	370c      	adds	r7, #12
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <LL_RCC_SetSysClkSource>:
{
 800df06:	b480      	push	{r7}
 800df08:	b083      	sub	sp, #12
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800df0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	f023 0203 	bic.w	r2, r3, #3
 800df18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	4313      	orrs	r3, r2
 800df20:	608b      	str	r3, [r1, #8]
}
 800df22:	bf00      	nop
 800df24:	370c      	adds	r7, #12
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <LL_RCC_GetSysClkSource>:
{
 800df2e:	b480      	push	{r7}
 800df30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800df32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f003 030c 	and.w	r3, r3, #12
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <LL_RCC_SetAHBPrescaler>:
{
 800df46:	b480      	push	{r7}
 800df48:	b083      	sub	sp, #12
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800df4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800df58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	4313      	orrs	r3, r2
 800df60:	608b      	str	r3, [r1, #8]
}
 800df62:	bf00      	nop
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <LL_C2_RCC_SetAHBPrescaler>:
{
 800df6e:	b480      	push	{r7}
 800df70:	b083      	sub	sp, #12
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800df76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800df7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800df82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4313      	orrs	r3, r2
 800df8a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800df8e:	bf00      	nop
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr

0800df9a <LL_RCC_SetAHB4Prescaler>:
{
 800df9a:	b480      	push	{r7}
 800df9c:	b083      	sub	sp, #12
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800dfa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800dfaa:	f023 020f 	bic.w	r2, r3, #15
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	091b      	lsrs	r3, r3, #4
 800dfb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <LL_RCC_SetAPB1Prescaler>:
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800dfd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dfda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	608b      	str	r3, [r1, #8]
}
 800dfe4:	bf00      	nop
 800dfe6:	370c      	adds	r7, #12
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr

0800dff0 <LL_RCC_SetAPB2Prescaler>:
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800dff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dffc:	689b      	ldr	r3, [r3, #8]
 800dffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4313      	orrs	r3, r2
 800e00a:	608b      	str	r3, [r1, #8]
}
 800e00c:	bf00      	nop
 800e00e:	370c      	adds	r7, #12
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <LL_RCC_GetAHBPrescaler>:
{
 800e018:	b480      	push	{r7}
 800e01a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e01c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800e026:	4618      	mov	r0, r3
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <LL_RCC_GetAHB4Prescaler>:
{
 800e030:	b480      	push	{r7}
 800e032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800e034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e038:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800e03c:	011b      	lsls	r3, r3, #4
 800e03e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800e042:	4618      	mov	r0, r3
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <LL_RCC_PLL_Enable>:
{
 800e04c:	b480      	push	{r7}
 800e04e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e05a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e05e:	6013      	str	r3, [r2, #0]
}
 800e060:	bf00      	nop
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr

0800e06a <LL_RCC_PLL_Disable>:
{
 800e06a:	b480      	push	{r7}
 800e06c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e06e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e07c:	6013      	str	r3, [r2, #0]
}
 800e07e:	bf00      	nop
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <LL_RCC_PLL_IsReady>:
{
 800e088:	b480      	push	{r7}
 800e08a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800e08c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e09a:	d101      	bne.n	800e0a0 <LL_RCC_PLL_IsReady+0x18>
 800e09c:	2301      	movs	r3, #1
 800e09e:	e000      	b.n	800e0a2 <LL_RCC_PLL_IsReady+0x1a>
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <LL_RCC_PLL_GetN>:
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e0b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	0a1b      	lsrs	r3, r3, #8
 800e0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <LL_RCC_PLL_GetR>:
{
 800e0c6:	b480      	push	{r7}
 800e0c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e0ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <LL_RCC_PLL_GetDivider>:
{
 800e0de:	b480      	push	{r7}
 800e0e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e0e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <LL_RCC_PLL_GetMainSource>:
{
 800e0f6:	b480      	push	{r7}
 800e0f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e0fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	f003 0303 	and.w	r3, r3, #3
}
 800e104:	4618      	mov	r0, r3
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <LL_RCC_IsActiveFlag_HPRE>:
{
 800e10e:	b480      	push	{r7}
 800e110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800e112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e120:	d101      	bne.n	800e126 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800e122:	2301      	movs	r3, #1
 800e124:	e000      	b.n	800e128 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr

0800e132 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800e132:	b480      	push	{r7}
 800e134:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800e136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e13a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800e13e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e146:	d101      	bne.n	800e14c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800e148:	2301      	movs	r3, #1
 800e14a:	e000      	b.n	800e14e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800e158:	b480      	push	{r7}
 800e15a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800e15c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e160:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800e164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e16c:	d101      	bne.n	800e172 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800e16e:	2301      	movs	r3, #1
 800e170:	e000      	b.n	800e174 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800e172:	2300      	movs	r3, #0
}
 800e174:	4618      	mov	r0, r3
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr

0800e17e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800e17e:	b480      	push	{r7}
 800e180:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800e182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e18c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e190:	d101      	bne.n	800e196 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800e192:	2301      	movs	r3, #1
 800e194:	e000      	b.n	800e198 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800e1a2:	b480      	push	{r7}
 800e1a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800e1a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e1b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e1b4:	d101      	bne.n	800e1ba <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e000      	b.n	800e1bc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
	...

0800e1c8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e1c8:	b590      	push	{r4, r7, lr}
 800e1ca:	b08d      	sub	sp, #52	; 0x34
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e363      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f003 0320 	and.w	r3, r3, #32
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	f000 808d 	beq.w	800e302 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e1e8:	f7ff fea1 	bl	800df2e <LL_RCC_GetSysClkSource>
 800e1ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e1ee:	f7ff ff82 	bl	800e0f6 <LL_RCC_PLL_GetMainSource>
 800e1f2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d005      	beq.n	800e206 <HAL_RCC_OscConfig+0x3e>
 800e1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fc:	2b0c      	cmp	r3, #12
 800e1fe:	d147      	bne.n	800e290 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800e200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e202:	2b01      	cmp	r3, #1
 800e204:	d144      	bne.n	800e290 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	69db      	ldr	r3, [r3, #28]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	e347      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e216:	f7ff fe4c 	bl	800deb2 <LL_RCC_MSI_GetRange>
 800e21a:	4603      	mov	r3, r0
 800e21c:	429c      	cmp	r4, r3
 800e21e:	d914      	bls.n	800e24a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e224:	4618      	mov	r0, r3
 800e226:	f000 fd03 	bl	800ec30 <RCC_SetFlashLatencyFromMSIRange>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800e230:	2301      	movs	r3, #1
 800e232:	e336      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e238:	4618      	mov	r0, r3
 800e23a:	f7ff fe26 	bl	800de8a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a1b      	ldr	r3, [r3, #32]
 800e242:	4618      	mov	r0, r3
 800e244:	f7ff fe4a 	bl	800dedc <LL_RCC_MSI_SetCalibTrimming>
 800e248:	e013      	b.n	800e272 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24e:	4618      	mov	r0, r3
 800e250:	f7ff fe1b 	bl	800de8a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a1b      	ldr	r3, [r3, #32]
 800e258:	4618      	mov	r0, r3
 800e25a:	f7ff fe3f 	bl	800dedc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e262:	4618      	mov	r0, r3
 800e264:	f000 fce4 	bl	800ec30 <RCC_SetFlashLatencyFromMSIRange>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d001      	beq.n	800e272 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800e26e:	2301      	movs	r3, #1
 800e270:	e317      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e272:	f000 fcc9 	bl	800ec08 <HAL_RCC_GetHCLKFreq>
 800e276:	4603      	mov	r3, r0
 800e278:	4aa4      	ldr	r2, [pc, #656]	; (800e50c <HAL_RCC_OscConfig+0x344>)
 800e27a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e27c:	4ba4      	ldr	r3, [pc, #656]	; (800e510 <HAL_RCC_OscConfig+0x348>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4618      	mov	r0, r3
 800e282:	f7fc faf9 	bl	800a878 <HAL_InitTick>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d039      	beq.n	800e300 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
 800e28e:	e308      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	69db      	ldr	r3, [r3, #28]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d01e      	beq.n	800e2d6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e298:	f7ff fdc8 	bl	800de2c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e29c:	f7fc fb3a 	bl	800a914 <HAL_GetTick>
 800e2a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800e2a2:	e008      	b.n	800e2b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e2a4:	f7fc fb36 	bl	800a914 <HAL_GetTick>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	1ad3      	subs	r3, r2, r3
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	d901      	bls.n	800e2b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e2b2:	2303      	movs	r3, #3
 800e2b4:	e2f5      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800e2b6:	f7ff fdd7 	bl	800de68 <LL_RCC_MSI_IsReady>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d0f1      	beq.n	800e2a4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff fde0 	bl	800de8a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7ff fe04 	bl	800dedc <LL_RCC_MSI_SetCalibTrimming>
 800e2d4:	e015      	b.n	800e302 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e2d6:	f7ff fdb8 	bl	800de4a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e2da:	f7fc fb1b 	bl	800a914 <HAL_GetTick>
 800e2de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800e2e0:	e008      	b.n	800e2f4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e2e2:	f7fc fb17 	bl	800a914 <HAL_GetTick>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	2b02      	cmp	r3, #2
 800e2ee:	d901      	bls.n	800e2f4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800e2f0:	2303      	movs	r3, #3
 800e2f2:	e2d6      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800e2f4:	f7ff fdb8 	bl	800de68 <LL_RCC_MSI_IsReady>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1f1      	bne.n	800e2e2 <HAL_RCC_OscConfig+0x11a>
 800e2fe:	e000      	b.n	800e302 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e300:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d047      	beq.n	800e39e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e30e:	f7ff fe0e 	bl	800df2e <LL_RCC_GetSysClkSource>
 800e312:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e314:	f7ff feef 	bl	800e0f6 <LL_RCC_PLL_GetMainSource>
 800e318:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	2b08      	cmp	r3, #8
 800e31e:	d005      	beq.n	800e32c <HAL_RCC_OscConfig+0x164>
 800e320:	6a3b      	ldr	r3, [r7, #32]
 800e322:	2b0c      	cmp	r3, #12
 800e324:	d108      	bne.n	800e338 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	2b03      	cmp	r3, #3
 800e32a:	d105      	bne.n	800e338 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d134      	bne.n	800e39e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	e2b4      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e340:	d102      	bne.n	800e348 <HAL_RCC_OscConfig+0x180>
 800e342:	f7ff fbf5 	bl	800db30 <LL_RCC_HSE_Enable>
 800e346:	e001      	b.n	800e34c <HAL_RCC_OscConfig+0x184>
 800e348:	f7ff fc01 	bl	800db4e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d012      	beq.n	800e37a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e354:	f7fc fade 	bl	800a914 <HAL_GetTick>
 800e358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800e35a:	e008      	b.n	800e36e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e35c:	f7fc fada 	bl	800a914 <HAL_GetTick>
 800e360:	4602      	mov	r2, r0
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	1ad3      	subs	r3, r2, r3
 800e366:	2b64      	cmp	r3, #100	; 0x64
 800e368:	d901      	bls.n	800e36e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800e36a:	2303      	movs	r3, #3
 800e36c:	e299      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800e36e:	f7ff fbfd 	bl	800db6c <LL_RCC_HSE_IsReady>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d0f1      	beq.n	800e35c <HAL_RCC_OscConfig+0x194>
 800e378:	e011      	b.n	800e39e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e37a:	f7fc facb 	bl	800a914 <HAL_GetTick>
 800e37e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800e380:	e008      	b.n	800e394 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e382:	f7fc fac7 	bl	800a914 <HAL_GetTick>
 800e386:	4602      	mov	r2, r0
 800e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38a:	1ad3      	subs	r3, r2, r3
 800e38c:	2b64      	cmp	r3, #100	; 0x64
 800e38e:	d901      	bls.n	800e394 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e390:	2303      	movs	r3, #3
 800e392:	e286      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800e394:	f7ff fbea 	bl	800db6c <LL_RCC_HSE_IsReady>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1f1      	bne.n	800e382 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f003 0302 	and.w	r3, r3, #2
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d04c      	beq.n	800e444 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e3aa:	f7ff fdc0 	bl	800df2e <LL_RCC_GetSysClkSource>
 800e3ae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e3b0:	f7ff fea1 	bl	800e0f6 <LL_RCC_PLL_GetMainSource>
 800e3b4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	2b04      	cmp	r3, #4
 800e3ba:	d005      	beq.n	800e3c8 <HAL_RCC_OscConfig+0x200>
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	2b0c      	cmp	r3, #12
 800e3c0:	d10e      	bne.n	800e3e0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	2b02      	cmp	r3, #2
 800e3c6:	d10b      	bne.n	800e3e0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d101      	bne.n	800e3d4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	e266      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7ff fc09 	bl	800dbf0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e3de:	e031      	b.n	800e444 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d019      	beq.n	800e41c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e3e8:	f7ff fbd2 	bl	800db90 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3ec:	f7fc fa92 	bl	800a914 <HAL_GetTick>
 800e3f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800e3f2:	e008      	b.n	800e406 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e3f4:	f7fc fa8e 	bl	800a914 <HAL_GetTick>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	d901      	bls.n	800e406 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e402:	2303      	movs	r3, #3
 800e404:	e24d      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800e406:	f7ff fbe1 	bl	800dbcc <LL_RCC_HSI_IsReady>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d0f1      	beq.n	800e3f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff fbeb 	bl	800dbf0 <LL_RCC_HSI_SetCalibTrimming>
 800e41a:	e013      	b.n	800e444 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e41c:	f7ff fbc7 	bl	800dbae <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e420:	f7fc fa78 	bl	800a914 <HAL_GetTick>
 800e424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800e426:	e008      	b.n	800e43a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e428:	f7fc fa74 	bl	800a914 <HAL_GetTick>
 800e42c:	4602      	mov	r2, r0
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	1ad3      	subs	r3, r2, r3
 800e432:	2b02      	cmp	r3, #2
 800e434:	d901      	bls.n	800e43a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800e436:	2303      	movs	r3, #3
 800e438:	e233      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800e43a:	f7ff fbc7 	bl	800dbcc <LL_RCC_HSI_IsReady>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1f1      	bne.n	800e428 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f003 0308 	and.w	r3, r3, #8
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d106      	bne.n	800e45e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f000 80a3 	beq.w	800e5a4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	695b      	ldr	r3, [r3, #20]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d076      	beq.n	800e554 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f003 0310 	and.w	r3, r3, #16
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d046      	beq.n	800e500 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800e472:	f7ff fc7e 	bl	800dd72 <LL_RCC_LSI1_IsReady>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d113      	bne.n	800e4a4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800e47c:	f7ff fc57 	bl	800dd2e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e480:	f7fc fa48 	bl	800a914 <HAL_GetTick>
 800e484:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e486:	e008      	b.n	800e49a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e488:	f7fc fa44 	bl	800a914 <HAL_GetTick>
 800e48c:	4602      	mov	r2, r0
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	2b02      	cmp	r3, #2
 800e494:	d901      	bls.n	800e49a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800e496:	2303      	movs	r3, #3
 800e498:	e203      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e49a:	f7ff fc6a 	bl	800dd72 <LL_RCC_LSI1_IsReady>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d0f1      	beq.n	800e488 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800e4a4:	f7ff fc77 	bl	800dd96 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4a8:	f7fc fa34 	bl	800a914 <HAL_GetTick>
 800e4ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e4ae:	e008      	b.n	800e4c2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e4b0:	f7fc fa30 	bl	800a914 <HAL_GetTick>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	1ad3      	subs	r3, r2, r3
 800e4ba:	2b03      	cmp	r3, #3
 800e4bc:	d901      	bls.n	800e4c2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	e1ef      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e4c2:	f7ff fc8a 	bl	800ddda <LL_RCC_LSI2_IsReady>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d0f1      	beq.n	800e4b0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	699b      	ldr	r3, [r3, #24]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7ff fc94 	bl	800ddfe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800e4d6:	f7ff fc3b 	bl	800dd50 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4da:	f7fc fa1b 	bl	800a914 <HAL_GetTick>
 800e4de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e4e0:	e008      	b.n	800e4f4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e4e2:	f7fc fa17 	bl	800a914 <HAL_GetTick>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	2b02      	cmp	r3, #2
 800e4ee:	d901      	bls.n	800e4f4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800e4f0:	2303      	movs	r3, #3
 800e4f2:	e1d6      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e4f4:	f7ff fc3d 	bl	800dd72 <LL_RCC_LSI1_IsReady>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1f1      	bne.n	800e4e2 <HAL_RCC_OscConfig+0x31a>
 800e4fe:	e051      	b.n	800e5a4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800e500:	f7ff fc15 	bl	800dd2e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e504:	f7fc fa06 	bl	800a914 <HAL_GetTick>
 800e508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e50a:	e00c      	b.n	800e526 <HAL_RCC_OscConfig+0x35e>
 800e50c:	200000dc 	.word	0x200000dc
 800e510:	200000e0 	.word	0x200000e0
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e514:	f7fc f9fe 	bl	800a914 <HAL_GetTick>
 800e518:	4602      	mov	r2, r0
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	1ad3      	subs	r3, r2, r3
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d901      	bls.n	800e526 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800e522:	2303      	movs	r3, #3
 800e524:	e1bd      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e526:	f7ff fc24 	bl	800dd72 <LL_RCC_LSI1_IsReady>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d0f1      	beq.n	800e514 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800e530:	f7ff fc42 	bl	800ddb8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e534:	e008      	b.n	800e548 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e536:	f7fc f9ed 	bl	800a914 <HAL_GetTick>
 800e53a:	4602      	mov	r2, r0
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	2b03      	cmp	r3, #3
 800e542:	d901      	bls.n	800e548 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800e544:	2303      	movs	r3, #3
 800e546:	e1ac      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e548:	f7ff fc47 	bl	800ddda <LL_RCC_LSI2_IsReady>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1f1      	bne.n	800e536 <HAL_RCC_OscConfig+0x36e>
 800e552:	e027      	b.n	800e5a4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800e554:	f7ff fc30 	bl	800ddb8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e558:	f7fc f9dc 	bl	800a914 <HAL_GetTick>
 800e55c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e55e:	e008      	b.n	800e572 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e560:	f7fc f9d8 	bl	800a914 <HAL_GetTick>
 800e564:	4602      	mov	r2, r0
 800e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e568:	1ad3      	subs	r3, r2, r3
 800e56a:	2b03      	cmp	r3, #3
 800e56c:	d901      	bls.n	800e572 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e56e:	2303      	movs	r3, #3
 800e570:	e197      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e572:	f7ff fc32 	bl	800ddda <LL_RCC_LSI2_IsReady>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1f1      	bne.n	800e560 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800e57c:	f7ff fbe8 	bl	800dd50 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e580:	f7fc f9c8 	bl	800a914 <HAL_GetTick>
 800e584:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e586:	e008      	b.n	800e59a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e588:	f7fc f9c4 	bl	800a914 <HAL_GetTick>
 800e58c:	4602      	mov	r2, r0
 800e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	2b02      	cmp	r3, #2
 800e594:	d901      	bls.n	800e59a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800e596:	2303      	movs	r3, #3
 800e598:	e183      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e59a:	f7ff fbea 	bl	800dd72 <LL_RCC_LSI1_IsReady>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1f1      	bne.n	800e588 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f003 0304 	and.w	r3, r3, #4
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d05b      	beq.n	800e668 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e5b0:	4ba7      	ldr	r3, [pc, #668]	; (800e850 <HAL_RCC_OscConfig+0x688>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d114      	bne.n	800e5e6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e5bc:	f7ff fa78 	bl	800dab0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e5c0:	f7fc f9a8 	bl	800a914 <HAL_GetTick>
 800e5c4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e5c6:	e008      	b.n	800e5da <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e5c8:	f7fc f9a4 	bl	800a914 <HAL_GetTick>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d901      	bls.n	800e5da <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	e163      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e5da:	4b9d      	ldr	r3, [pc, #628]	; (800e850 <HAL_RCC_OscConfig+0x688>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d0f0      	beq.n	800e5c8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	d102      	bne.n	800e5f4 <HAL_RCC_OscConfig+0x42c>
 800e5ee:	f7ff fb48 	bl	800dc82 <LL_RCC_LSE_Enable>
 800e5f2:	e00c      	b.n	800e60e <HAL_RCC_OscConfig+0x446>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	2b05      	cmp	r3, #5
 800e5fa:	d104      	bne.n	800e606 <HAL_RCC_OscConfig+0x43e>
 800e5fc:	f7ff fb63 	bl	800dcc6 <LL_RCC_LSE_EnableBypass>
 800e600:	f7ff fb3f 	bl	800dc82 <LL_RCC_LSE_Enable>
 800e604:	e003      	b.n	800e60e <HAL_RCC_OscConfig+0x446>
 800e606:	f7ff fb4d 	bl	800dca4 <LL_RCC_LSE_Disable>
 800e60a:	f7ff fb6d 	bl	800dce8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	689b      	ldr	r3, [r3, #8]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d014      	beq.n	800e640 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e616:	f7fc f97d 	bl	800a914 <HAL_GetTick>
 800e61a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800e61c:	e00a      	b.n	800e634 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e61e:	f7fc f979 	bl	800a914 <HAL_GetTick>
 800e622:	4602      	mov	r2, r0
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	1ad3      	subs	r3, r2, r3
 800e628:	f241 3288 	movw	r2, #5000	; 0x1388
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d901      	bls.n	800e634 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800e630:	2303      	movs	r3, #3
 800e632:	e136      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800e634:	f7ff fb69 	bl	800dd0a <LL_RCC_LSE_IsReady>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0ef      	beq.n	800e61e <HAL_RCC_OscConfig+0x456>
 800e63e:	e013      	b.n	800e668 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e640:	f7fc f968 	bl	800a914 <HAL_GetTick>
 800e644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800e646:	e00a      	b.n	800e65e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e648:	f7fc f964 	bl	800a914 <HAL_GetTick>
 800e64c:	4602      	mov	r2, r0
 800e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e650:	1ad3      	subs	r3, r2, r3
 800e652:	f241 3288 	movw	r2, #5000	; 0x1388
 800e656:	4293      	cmp	r3, r2
 800e658:	d901      	bls.n	800e65e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800e65a:	2303      	movs	r3, #3
 800e65c:	e121      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800e65e:	f7ff fb54 	bl	800dd0a <LL_RCC_LSE_IsReady>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1ef      	bne.n	800e648 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e670:	2b00      	cmp	r3, #0
 800e672:	d02c      	beq.n	800e6ce <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d014      	beq.n	800e6a6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e67c:	f7ff facd 	bl	800dc1a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e680:	f7fc f948 	bl	800a914 <HAL_GetTick>
 800e684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e686:	e008      	b.n	800e69a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e688:	f7fc f944 	bl	800a914 <HAL_GetTick>
 800e68c:	4602      	mov	r2, r0
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	2b02      	cmp	r3, #2
 800e694:	d901      	bls.n	800e69a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800e696:	2303      	movs	r3, #3
 800e698:	e103      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e69a:	f7ff fae0 	bl	800dc5e <LL_RCC_HSI48_IsReady>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d0f1      	beq.n	800e688 <HAL_RCC_OscConfig+0x4c0>
 800e6a4:	e013      	b.n	800e6ce <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e6a6:	f7ff fac9 	bl	800dc3c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e6aa:	f7fc f933 	bl	800a914 <HAL_GetTick>
 800e6ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e6b0:	e008      	b.n	800e6c4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e6b2:	f7fc f92f 	bl	800a914 <HAL_GetTick>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d901      	bls.n	800e6c4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800e6c0:	2303      	movs	r3, #3
 800e6c2:	e0ee      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e6c4:	f7ff facb 	bl	800dc5e <LL_RCC_HSI48_IsReady>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1f1      	bne.n	800e6b2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	f000 80e4 	beq.w	800e8a0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e6d8:	f7ff fc29 	bl	800df2e <LL_RCC_GetSysClkSource>
 800e6dc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800e6de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	f040 80b4 	bne.w	800e858 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f003 0203 	and.w	r2, r3, #3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d123      	bne.n	800e746 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e708:	429a      	cmp	r2, r3
 800e70a:	d11c      	bne.n	800e746 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	0a1b      	lsrs	r3, r3, #8
 800e710:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e718:	429a      	cmp	r2, r3
 800e71a:	d114      	bne.n	800e746 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e726:	429a      	cmp	r2, r3
 800e728:	d10d      	bne.n	800e746 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e734:	429a      	cmp	r2, r3
 800e736:	d106      	bne.n	800e746 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e742:	429a      	cmp	r2, r3
 800e744:	d05d      	beq.n	800e802 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	2b0c      	cmp	r3, #12
 800e74a:	d058      	beq.n	800e7fe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800e74c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e756:	2b00      	cmp	r3, #0
 800e758:	d001      	beq.n	800e75e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e0a1      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800e75e:	f7ff fc84 	bl	800e06a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e762:	f7fc f8d7 	bl	800a914 <HAL_GetTick>
 800e766:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e768:	e008      	b.n	800e77c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e76a:	f7fc f8d3 	bl	800a914 <HAL_GetTick>
 800e76e:	4602      	mov	r2, r0
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	2b02      	cmp	r3, #2
 800e776:	d901      	bls.n	800e77c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800e778:	2303      	movs	r3, #3
 800e77a:	e092      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e77c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1ef      	bne.n	800e76a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e78a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e78e:	68da      	ldr	r2, [r3, #12]
 800e790:	4b30      	ldr	r3, [pc, #192]	; (800e854 <HAL_RCC_OscConfig+0x68c>)
 800e792:	4013      	ands	r3, r2
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e79c:	4311      	orrs	r1, r2
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e7a2:	0212      	lsls	r2, r2, #8
 800e7a4:	4311      	orrs	r1, r2
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e7aa:	4311      	orrs	r1, r2
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e7b0:	4311      	orrs	r1, r2
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e7b6:	430a      	orrs	r2, r1
 800e7b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800e7c0:	f7ff fc44 	bl	800e04c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e7c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e7ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e7d4:	f7fc f89e 	bl	800a914 <HAL_GetTick>
 800e7d8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e7da:	e008      	b.n	800e7ee <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e7dc:	f7fc f89a 	bl	800a914 <HAL_GetTick>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d901      	bls.n	800e7ee <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800e7ea:	2303      	movs	r3, #3
 800e7ec:	e059      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e7ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d0ef      	beq.n	800e7dc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e7fc:	e050      	b.n	800e8a0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e04f      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d147      	bne.n	800e8a0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800e810:	f7ff fc1c 	bl	800e04c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e81e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e822:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e824:	f7fc f876 	bl	800a914 <HAL_GetTick>
 800e828:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e82a:	e008      	b.n	800e83e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e82c:	f7fc f872 	bl	800a914 <HAL_GetTick>
 800e830:	4602      	mov	r2, r0
 800e832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	2b02      	cmp	r3, #2
 800e838:	d901      	bls.n	800e83e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800e83a:	2303      	movs	r3, #3
 800e83c:	e031      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e83e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d0ef      	beq.n	800e82c <HAL_RCC_OscConfig+0x664>
 800e84c:	e028      	b.n	800e8a0 <HAL_RCC_OscConfig+0x6d8>
 800e84e:	bf00      	nop
 800e850:	58000400 	.word	0x58000400
 800e854:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	2b0c      	cmp	r3, #12
 800e85c:	d01e      	beq.n	800e89c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e85e:	f7ff fc04 	bl	800e06a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e862:	f7fc f857 	bl	800a914 <HAL_GetTick>
 800e866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e868:	e008      	b.n	800e87c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e86a:	f7fc f853 	bl	800a914 <HAL_GetTick>
 800e86e:	4602      	mov	r2, r0
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	2b02      	cmp	r3, #2
 800e876:	d901      	bls.n	800e87c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800e878:	2303      	movs	r3, #3
 800e87a:	e012      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e87c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1ef      	bne.n	800e86a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800e88a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e88e:	68da      	ldr	r2, [r3, #12]
 800e890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e894:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <HAL_RCC_OscConfig+0x6e4>)
 800e896:	4013      	ands	r3, r2
 800e898:	60cb      	str	r3, [r1, #12]
 800e89a:	e001      	b.n	800e8a0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800e89c:	2301      	movs	r3, #1
 800e89e:	e000      	b.n	800e8a2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3734      	adds	r7, #52	; 0x34
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd90      	pop	{r4, r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	eefefffc 	.word	0xeefefffc

0800e8b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d101      	bne.n	800e8c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	e12d      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e8c4:	4b98      	ldr	r3, [pc, #608]	; (800eb28 <HAL_RCC_ClockConfig+0x278>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f003 0307 	and.w	r3, r3, #7
 800e8cc:	683a      	ldr	r2, [r7, #0]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d91b      	bls.n	800e90a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8d2:	4b95      	ldr	r3, [pc, #596]	; (800eb28 <HAL_RCC_ClockConfig+0x278>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f023 0207 	bic.w	r2, r3, #7
 800e8da:	4993      	ldr	r1, [pc, #588]	; (800eb28 <HAL_RCC_ClockConfig+0x278>)
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8e2:	f7fc f817 	bl	800a914 <HAL_GetTick>
 800e8e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8e8:	e008      	b.n	800e8fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e8ea:	f7fc f813 	bl	800a914 <HAL_GetTick>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d901      	bls.n	800e8fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e111      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8fc:	4b8a      	ldr	r3, [pc, #552]	; (800eb28 <HAL_RCC_ClockConfig+0x278>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f003 0307 	and.w	r3, r3, #7
 800e904:	683a      	ldr	r2, [r7, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	d1ef      	bne.n	800e8ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f003 0302 	and.w	r3, r3, #2
 800e912:	2b00      	cmp	r3, #0
 800e914:	d016      	beq.n	800e944 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7ff fb13 	bl	800df46 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e920:	f7fb fff8 	bl	800a914 <HAL_GetTick>
 800e924:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e926:	e008      	b.n	800e93a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e928:	f7fb fff4 	bl	800a914 <HAL_GetTick>
 800e92c:	4602      	mov	r2, r0
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	2b02      	cmp	r3, #2
 800e934:	d901      	bls.n	800e93a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800e936:	2303      	movs	r3, #3
 800e938:	e0f2      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e93a:	f7ff fbe8 	bl	800e10e <LL_RCC_IsActiveFlag_HPRE>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d0f1      	beq.n	800e928 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f003 0320 	and.w	r3, r3, #32
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d016      	beq.n	800e97e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	695b      	ldr	r3, [r3, #20]
 800e954:	4618      	mov	r0, r3
 800e956:	f7ff fb0a 	bl	800df6e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e95a:	f7fb ffdb 	bl	800a914 <HAL_GetTick>
 800e95e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e960:	e008      	b.n	800e974 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e962:	f7fb ffd7 	bl	800a914 <HAL_GetTick>
 800e966:	4602      	mov	r2, r0
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	1ad3      	subs	r3, r2, r3
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d901      	bls.n	800e974 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800e970:	2303      	movs	r3, #3
 800e972:	e0d5      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e974:	f7ff fbdd 	bl	800e132 <LL_RCC_IsActiveFlag_C2HPRE>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d0f1      	beq.n	800e962 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e986:	2b00      	cmp	r3, #0
 800e988:	d016      	beq.n	800e9b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	699b      	ldr	r3, [r3, #24]
 800e98e:	4618      	mov	r0, r3
 800e990:	f7ff fb03 	bl	800df9a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e994:	f7fb ffbe 	bl	800a914 <HAL_GetTick>
 800e998:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e99a:	e008      	b.n	800e9ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e99c:	f7fb ffba 	bl	800a914 <HAL_GetTick>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	2b02      	cmp	r3, #2
 800e9a8:	d901      	bls.n	800e9ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	e0b8      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e9ae:	f7ff fbd3 	bl	800e158 <LL_RCC_IsActiveFlag_SHDHPRE>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d0f1      	beq.n	800e99c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f003 0304 	and.w	r3, r3, #4
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d016      	beq.n	800e9f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7ff fafd 	bl	800dfc8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e9ce:	f7fb ffa1 	bl	800a914 <HAL_GetTick>
 800e9d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e9d4:	e008      	b.n	800e9e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e9d6:	f7fb ff9d 	bl	800a914 <HAL_GetTick>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	1ad3      	subs	r3, r2, r3
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	d901      	bls.n	800e9e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800e9e4:	2303      	movs	r3, #3
 800e9e6:	e09b      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e9e8:	f7ff fbc9 	bl	800e17e <LL_RCC_IsActiveFlag_PPRE1>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d0f1      	beq.n	800e9d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f003 0308 	and.w	r3, r3, #8
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d017      	beq.n	800ea2e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	691b      	ldr	r3, [r3, #16]
 800ea02:	00db      	lsls	r3, r3, #3
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7ff faf3 	bl	800dff0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ea0a:	f7fb ff83 	bl	800a914 <HAL_GetTick>
 800ea0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ea10:	e008      	b.n	800ea24 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ea12:	f7fb ff7f 	bl	800a914 <HAL_GetTick>
 800ea16:	4602      	mov	r2, r0
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d901      	bls.n	800ea24 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800ea20:	2303      	movs	r3, #3
 800ea22:	e07d      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ea24:	f7ff fbbd 	bl	800e1a2 <LL_RCC_IsActiveFlag_PPRE2>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d0f1      	beq.n	800ea12 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f003 0301 	and.w	r3, r3, #1
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d043      	beq.n	800eac2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	2b02      	cmp	r3, #2
 800ea40:	d106      	bne.n	800ea50 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800ea42:	f7ff f893 	bl	800db6c <LL_RCC_HSE_IsReady>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d11e      	bne.n	800ea8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	e067      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	2b03      	cmp	r3, #3
 800ea56:	d106      	bne.n	800ea66 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800ea58:	f7ff fb16 	bl	800e088 <LL_RCC_PLL_IsReady>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d113      	bne.n	800ea8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	e05c      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d106      	bne.n	800ea7c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800ea6e:	f7ff f9fb 	bl	800de68 <LL_RCC_MSI_IsReady>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d108      	bne.n	800ea8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e051      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800ea7c:	f7ff f8a6 	bl	800dbcc <LL_RCC_HSI_IsReady>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d101      	bne.n	800ea8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ea86:	2301      	movs	r3, #1
 800ea88:	e04a      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff fa39 	bl	800df06 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea94:	f7fb ff3e 	bl	800a914 <HAL_GetTick>
 800ea98:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea9a:	e00a      	b.n	800eab2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ea9c:	f7fb ff3a 	bl	800a914 <HAL_GetTick>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d901      	bls.n	800eab2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800eaae:	2303      	movs	r3, #3
 800eab0:	e036      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eab2:	f7ff fa3c 	bl	800df2e <LL_RCC_GetSysClkSource>
 800eab6:	4602      	mov	r2, r0
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d1ec      	bne.n	800ea9c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eac2:	4b19      	ldr	r3, [pc, #100]	; (800eb28 <HAL_RCC_ClockConfig+0x278>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f003 0307 	and.w	r3, r3, #7
 800eaca:	683a      	ldr	r2, [r7, #0]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d21b      	bcs.n	800eb08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ead0:	4b15      	ldr	r3, [pc, #84]	; (800eb28 <HAL_RCC_ClockConfig+0x278>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f023 0207 	bic.w	r2, r3, #7
 800ead8:	4913      	ldr	r1, [pc, #76]	; (800eb28 <HAL_RCC_ClockConfig+0x278>)
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	4313      	orrs	r3, r2
 800eade:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eae0:	f7fb ff18 	bl	800a914 <HAL_GetTick>
 800eae4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eae6:	e008      	b.n	800eafa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800eae8:	f7fb ff14 	bl	800a914 <HAL_GetTick>
 800eaec:	4602      	mov	r2, r0
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d901      	bls.n	800eafa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	e012      	b.n	800eb20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eafa:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <HAL_RCC_ClockConfig+0x278>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f003 0307 	and.w	r3, r3, #7
 800eb02:	683a      	ldr	r2, [r7, #0]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d1ef      	bne.n	800eae8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800eb08:	f000 f87e 	bl	800ec08 <HAL_RCC_GetHCLKFreq>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	4a07      	ldr	r2, [pc, #28]	; (800eb2c <HAL_RCC_ClockConfig+0x27c>)
 800eb10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800eb12:	f7fb ff0b 	bl	800a92c <HAL_GetTickPrio>
 800eb16:	4603      	mov	r3, r0
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fb fead 	bl	800a878 <HAL_InitTick>
 800eb1e:	4603      	mov	r3, r0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	58004000 	.word	0x58004000
 800eb2c:	200000dc 	.word	0x200000dc

0800eb30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eb30:	b590      	push	{r4, r7, lr}
 800eb32:	b085      	sub	sp, #20
 800eb34:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eb36:	f7ff f9fa 	bl	800df2e <LL_RCC_GetSysClkSource>
 800eb3a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d10a      	bne.n	800eb58 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800eb42:	f7ff f9b6 	bl	800deb2 <LL_RCC_MSI_GetRange>
 800eb46:	4603      	mov	r3, r0
 800eb48:	091b      	lsrs	r3, r3, #4
 800eb4a:	f003 030f 	and.w	r3, r3, #15
 800eb4e:	4a2b      	ldr	r2, [pc, #172]	; (800ebfc <HAL_RCC_GetSysClockFreq+0xcc>)
 800eb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb54:	60fb      	str	r3, [r7, #12]
 800eb56:	e04b      	b.n	800ebf0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b04      	cmp	r3, #4
 800eb5c:	d102      	bne.n	800eb64 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800eb5e:	4b28      	ldr	r3, [pc, #160]	; (800ec00 <HAL_RCC_GetSysClockFreq+0xd0>)
 800eb60:	60fb      	str	r3, [r7, #12]
 800eb62:	e045      	b.n	800ebf0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b08      	cmp	r3, #8
 800eb68:	d10a      	bne.n	800eb80 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800eb6a:	f7fe ffcf 	bl	800db0c <LL_RCC_HSE_IsEnabledDiv2>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d102      	bne.n	800eb7a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800eb74:	4b22      	ldr	r3, [pc, #136]	; (800ec00 <HAL_RCC_GetSysClockFreq+0xd0>)
 800eb76:	60fb      	str	r3, [r7, #12]
 800eb78:	e03a      	b.n	800ebf0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800eb7a:	4b22      	ldr	r3, [pc, #136]	; (800ec04 <HAL_RCC_GetSysClockFreq+0xd4>)
 800eb7c:	60fb      	str	r3, [r7, #12]
 800eb7e:	e037      	b.n	800ebf0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800eb80:	f7ff fab9 	bl	800e0f6 <LL_RCC_PLL_GetMainSource>
 800eb84:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d003      	beq.n	800eb94 <HAL_RCC_GetSysClockFreq+0x64>
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	2b03      	cmp	r3, #3
 800eb90:	d003      	beq.n	800eb9a <HAL_RCC_GetSysClockFreq+0x6a>
 800eb92:	e00d      	b.n	800ebb0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800eb94:	4b1a      	ldr	r3, [pc, #104]	; (800ec00 <HAL_RCC_GetSysClockFreq+0xd0>)
 800eb96:	60bb      	str	r3, [r7, #8]
        break;
 800eb98:	e015      	b.n	800ebc6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800eb9a:	f7fe ffb7 	bl	800db0c <LL_RCC_HSE_IsEnabledDiv2>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d102      	bne.n	800ebaa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800eba4:	4b16      	ldr	r3, [pc, #88]	; (800ec00 <HAL_RCC_GetSysClockFreq+0xd0>)
 800eba6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800eba8:	e00d      	b.n	800ebc6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800ebaa:	4b16      	ldr	r3, [pc, #88]	; (800ec04 <HAL_RCC_GetSysClockFreq+0xd4>)
 800ebac:	60bb      	str	r3, [r7, #8]
        break;
 800ebae:	e00a      	b.n	800ebc6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ebb0:	f7ff f97f 	bl	800deb2 <LL_RCC_MSI_GetRange>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	091b      	lsrs	r3, r3, #4
 800ebb8:	f003 030f 	and.w	r3, r3, #15
 800ebbc:	4a0f      	ldr	r2, [pc, #60]	; (800ebfc <HAL_RCC_GetSysClockFreq+0xcc>)
 800ebbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebc2:	60bb      	str	r3, [r7, #8]
        break;
 800ebc4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800ebc6:	f7ff fa71 	bl	800e0ac <LL_RCC_PLL_GetN>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	fb03 f402 	mul.w	r4, r3, r2
 800ebd2:	f7ff fa84 	bl	800e0de <LL_RCC_PLL_GetDivider>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	091b      	lsrs	r3, r3, #4
 800ebda:	3301      	adds	r3, #1
 800ebdc:	fbb4 f4f3 	udiv	r4, r4, r3
 800ebe0:	f7ff fa71 	bl	800e0c6 <LL_RCC_PLL_GetR>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	0f5b      	lsrs	r3, r3, #29
 800ebe8:	3301      	adds	r3, #1
 800ebea:	fbb4 f3f3 	udiv	r3, r4, r3
 800ebee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3714      	adds	r7, #20
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd90      	pop	{r4, r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	0802f83c 	.word	0x0802f83c
 800ec00:	00f42400 	.word	0x00f42400
 800ec04:	01e84800 	.word	0x01e84800

0800ec08 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ec08:	b598      	push	{r3, r4, r7, lr}
 800ec0a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800ec0c:	f7ff ff90 	bl	800eb30 <HAL_RCC_GetSysClockFreq>
 800ec10:	4604      	mov	r4, r0
 800ec12:	f7ff fa01 	bl	800e018 <LL_RCC_GetAHBPrescaler>
 800ec16:	4603      	mov	r3, r0
 800ec18:	091b      	lsrs	r3, r3, #4
 800ec1a:	f003 030f 	and.w	r3, r3, #15
 800ec1e:	4a03      	ldr	r2, [pc, #12]	; (800ec2c <HAL_RCC_GetHCLKFreq+0x24>)
 800ec20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec24:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	bd98      	pop	{r3, r4, r7, pc}
 800ec2c:	0802f7fc 	.word	0x0802f7fc

0800ec30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ec30:	b590      	push	{r4, r7, lr}
 800ec32:	b085      	sub	sp, #20
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2bb0      	cmp	r3, #176	; 0xb0
 800ec3c:	d903      	bls.n	800ec46 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ec3e:	4b15      	ldr	r3, [pc, #84]	; (800ec94 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ec40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	e007      	b.n	800ec56 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	091b      	lsrs	r3, r3, #4
 800ec4a:	f003 030f 	and.w	r3, r3, #15
 800ec4e:	4a11      	ldr	r2, [pc, #68]	; (800ec94 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ec50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec54:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ec56:	f7ff f9eb 	bl	800e030 <LL_RCC_GetAHB4Prescaler>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	091b      	lsrs	r3, r3, #4
 800ec5e:	f003 030f 	and.w	r3, r3, #15
 800ec62:	4a0d      	ldr	r2, [pc, #52]	; (800ec98 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ec64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec68:	68fa      	ldr	r2, [r7, #12]
 800ec6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec6e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	4a0a      	ldr	r2, [pc, #40]	; (800ec9c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ec74:	fba2 2303 	umull	r2, r3, r2, r3
 800ec78:	0c9c      	lsrs	r4, r3, #18
 800ec7a:	f7fe ff29 	bl	800dad0 <HAL_PWREx_GetVoltageRange>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	4619      	mov	r1, r3
 800ec82:	4620      	mov	r0, r4
 800ec84:	f000 f80c 	bl	800eca0 <RCC_SetFlashLatency>
 800ec88:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3714      	adds	r7, #20
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd90      	pop	{r4, r7, pc}
 800ec92:	bf00      	nop
 800ec94:	0802f83c 	.word	0x0802f83c
 800ec98:	0802f7fc 	.word	0x0802f7fc
 800ec9c:	431bde83 	.word	0x431bde83

0800eca0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800eca0:	b590      	push	{r4, r7, lr}
 800eca2:	b093      	sub	sp, #76	; 0x4c
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800ecaa:	4b37      	ldr	r3, [pc, #220]	; (800ed88 <RCC_SetFlashLatency+0xe8>)
 800ecac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ecb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ecb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ecb6:	4a35      	ldr	r2, [pc, #212]	; (800ed8c <RCC_SetFlashLatency+0xec>)
 800ecb8:	f107 031c 	add.w	r3, r7, #28
 800ecbc:	ca07      	ldmia	r2, {r0, r1, r2}
 800ecbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ecc2:	4b33      	ldr	r3, [pc, #204]	; (800ed90 <RCC_SetFlashLatency+0xf0>)
 800ecc4:	f107 040c 	add.w	r4, r7, #12
 800ecc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ecca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ecce:	2300      	movs	r3, #0
 800ecd0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecd8:	d11a      	bne.n	800ed10 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ecda:	2300      	movs	r3, #0
 800ecdc:	643b      	str	r3, [r7, #64]	; 0x40
 800ecde:	e013      	b.n	800ed08 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ece0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	3348      	adds	r3, #72	; 0x48
 800ece6:	443b      	add	r3, r7
 800ece8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d807      	bhi.n	800ed02 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ecf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	3348      	adds	r3, #72	; 0x48
 800ecf8:	443b      	add	r3, r7
 800ecfa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ecfe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800ed00:	e020      	b.n	800ed44 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ed02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed04:	3301      	adds	r3, #1
 800ed06:	643b      	str	r3, [r7, #64]	; 0x40
 800ed08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed0a:	2b03      	cmp	r3, #3
 800ed0c:	d9e8      	bls.n	800ece0 <RCC_SetFlashLatency+0x40>
 800ed0e:	e019      	b.n	800ed44 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ed10:	2300      	movs	r3, #0
 800ed12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed14:	e013      	b.n	800ed3e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ed16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	3348      	adds	r3, #72	; 0x48
 800ed1c:	443b      	add	r3, r7
 800ed1e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d807      	bhi.n	800ed38 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ed28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	3348      	adds	r3, #72	; 0x48
 800ed2e:	443b      	add	r3, r7
 800ed30:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ed34:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800ed36:	e005      	b.n	800ed44 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ed38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	d9e8      	bls.n	800ed16 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800ed44:	4b13      	ldr	r3, [pc, #76]	; (800ed94 <RCC_SetFlashLatency+0xf4>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f023 0207 	bic.w	r2, r3, #7
 800ed4c:	4911      	ldr	r1, [pc, #68]	; (800ed94 <RCC_SetFlashLatency+0xf4>)
 800ed4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed50:	4313      	orrs	r3, r2
 800ed52:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ed54:	f7fb fdde 	bl	800a914 <HAL_GetTick>
 800ed58:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ed5a:	e008      	b.n	800ed6e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ed5c:	f7fb fdda 	bl	800a914 <HAL_GetTick>
 800ed60:	4602      	mov	r2, r0
 800ed62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed64:	1ad3      	subs	r3, r2, r3
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d901      	bls.n	800ed6e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800ed6a:	2303      	movs	r3, #3
 800ed6c:	e007      	b.n	800ed7e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ed6e:	4b09      	ldr	r3, [pc, #36]	; (800ed94 <RCC_SetFlashLatency+0xf4>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f003 0307 	and.w	r3, r3, #7
 800ed76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d1ef      	bne.n	800ed5c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800ed7c:	2300      	movs	r3, #0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	374c      	adds	r7, #76	; 0x4c
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd90      	pop	{r4, r7, pc}
 800ed86:	bf00      	nop
 800ed88:	08019f4c 	.word	0x08019f4c
 800ed8c:	08019f5c 	.word	0x08019f5c
 800ed90:	08019f68 	.word	0x08019f68
 800ed94:	58004000 	.word	0x58004000

0800ed98 <LL_RCC_LSE_IsEnabled>:
{
 800ed98:	b480      	push	{r7}
 800ed9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ed9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eda0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eda4:	f003 0301 	and.w	r3, r3, #1
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d101      	bne.n	800edb0 <LL_RCC_LSE_IsEnabled+0x18>
 800edac:	2301      	movs	r3, #1
 800edae:	e000      	b.n	800edb2 <LL_RCC_LSE_IsEnabled+0x1a>
 800edb0:	2300      	movs	r3, #0
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <LL_RCC_LSE_IsReady>:
{
 800edbc:	b480      	push	{r7}
 800edbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800edc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edc8:	f003 0302 	and.w	r3, r3, #2
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d101      	bne.n	800edd4 <LL_RCC_LSE_IsReady+0x18>
 800edd0:	2301      	movs	r3, #1
 800edd2:	e000      	b.n	800edd6 <LL_RCC_LSE_IsReady+0x1a>
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <LL_RCC_SetRFWKPClockSource>:
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ede8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800edec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800edf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800edf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800ee00:	bf00      	nop
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <LL_RCC_SetSMPSClockSource>:
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ee14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1a:	f023 0203 	bic.w	r2, r3, #3
 800ee1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4313      	orrs	r3, r2
 800ee26:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ee28:	bf00      	nop
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <LL_RCC_SetSMPSPrescaler>:
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ee3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ee46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ee50:	bf00      	nop
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr

0800ee5c <LL_RCC_SetUSARTClockSource>:
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ee64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee6c:	f023 0203 	bic.w	r2, r3, #3
 800ee70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4313      	orrs	r3, r2
 800ee78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ee7c:	bf00      	nop
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <LL_RCC_SetLPUARTClockSource>:
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800ee90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ee9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4313      	orrs	r3, r2
 800eea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800eea8:	bf00      	nop
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <LL_RCC_SetI2CClockSource>:
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800eebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eec0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	091b      	lsrs	r3, r3, #4
 800eec8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800eecc:	43db      	mvns	r3, r3
 800eece:	401a      	ands	r2, r3
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	011b      	lsls	r3, r3, #4
 800eed4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800eed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800eedc:	4313      	orrs	r3, r2
 800eede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800eee2:	bf00      	nop
 800eee4:	370c      	adds	r7, #12
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr

0800eeee <LL_RCC_SetLPTIMClockSource>:
{
 800eeee:	b480      	push	{r7}
 800eef0:	b083      	sub	sp, #12
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800eef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eefa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	0c1b      	lsrs	r3, r3, #16
 800ef02:	041b      	lsls	r3, r3, #16
 800ef04:	43db      	mvns	r3, r3
 800ef06:	401a      	ands	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	041b      	lsls	r3, r3, #16
 800ef0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ef10:	4313      	orrs	r3, r2
 800ef12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ef16:	bf00      	nop
 800ef18:	370c      	adds	r7, #12
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr

0800ef22 <LL_RCC_SetSAIClockSource>:
{
 800ef22:	b480      	push	{r7}
 800ef24:	b083      	sub	sp, #12
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800ef2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ef36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ef42:	bf00      	nop
 800ef44:	370c      	adds	r7, #12
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <LL_RCC_SetRNGClockSource>:
{
 800ef4e:	b480      	push	{r7}
 800ef50:	b083      	sub	sp, #12
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800ef56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800ef62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ef6e:	bf00      	nop
 800ef70:	370c      	adds	r7, #12
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr

0800ef7a <LL_RCC_SetCLK48ClockSource>:
{
 800ef7a:	b480      	push	{r7}
 800ef7c:	b083      	sub	sp, #12
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800ef82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ef8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	4313      	orrs	r3, r2
 800ef96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ef9a:	bf00      	nop
 800ef9c:	370c      	adds	r7, #12
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr

0800efa6 <LL_RCC_SetUSBClockSource>:
{
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b082      	sub	sp, #8
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f7ff ffe3 	bl	800ef7a <LL_RCC_SetCLK48ClockSource>
}
 800efb4:	bf00      	nop
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <LL_RCC_SetADCClockSource>:
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800efc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800efcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800efd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4313      	orrs	r3, r2
 800efd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800efdc:	bf00      	nop
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <LL_RCC_SetRTCClockSource>:
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800eff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800effc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4313      	orrs	r3, r2
 800f004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800f008:	bf00      	nop
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <LL_RCC_GetRTCClockSource>:
{
 800f014:	b480      	push	{r7}
 800f016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800f018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f020:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800f024:	4618      	mov	r0, r3
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr

0800f02e <LL_RCC_ForceBackupDomainReset>:
{
 800f02e:	b480      	push	{r7}
 800f030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f03a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f03e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800f046:	bf00      	nop
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <LL_RCC_ReleaseBackupDomainReset>:
{
 800f050:	b480      	push	{r7}
 800f052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f05c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800f068:	bf00      	nop
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <LL_RCC_PLLSAI1_Enable>:
{
 800f072:	b480      	push	{r7}
 800f074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f080:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f084:	6013      	str	r3, [r2, #0]
}
 800f086:	bf00      	nop
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <LL_RCC_PLLSAI1_Disable>:
{
 800f090:	b480      	push	{r7}
 800f092:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f09e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f0a2:	6013      	str	r3, [r2, #0]
}
 800f0a4:	bf00      	nop
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr

0800f0ae <LL_RCC_PLLSAI1_IsReady>:
{
 800f0ae:	b480      	push	{r7}
 800f0b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800f0b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0c0:	d101      	bne.n	800f0c6 <LL_RCC_PLLSAI1_IsReady+0x18>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e000      	b.n	800f0c8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr

0800f0d2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b088      	sub	sp, #32
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800f0da:	2300      	movs	r3, #0
 800f0dc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800f0de:	2300      	movs	r3, #0
 800f0e0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d034      	beq.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800f0f6:	d021      	beq.n	800f13c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800f0f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800f0fc:	d81b      	bhi.n	800f136 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f0fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f102:	d01d      	beq.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800f104:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f108:	d815      	bhi.n	800f136 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00b      	beq.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800f10e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f112:	d110      	bne.n	800f136 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800f114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f118:	68db      	ldr	r3, [r3, #12]
 800f11a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f11e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f122:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800f124:	e00d      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	3304      	adds	r3, #4
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 f947 	bl	800f3be <RCCEx_PLLSAI1_ConfigNP>
 800f130:	4603      	mov	r3, r0
 800f132:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f134:	e005      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800f136:	2301      	movs	r3, #1
 800f138:	77fb      	strb	r3, [r7, #31]
        break;
 800f13a:	e002      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f13c:	bf00      	nop
 800f13e:	e000      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f140:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f142:	7ffb      	ldrb	r3, [r7, #31]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d105      	bne.n	800f154 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7ff fee8 	bl	800ef22 <LL_RCC_SetSAIClockSource>
 800f152:	e001      	b.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f154:	7ffb      	ldrb	r3, [r7, #31]
 800f156:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f160:	2b00      	cmp	r3, #0
 800f162:	d046      	beq.n	800f1f2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800f164:	f7ff ff56 	bl	800f014 <LL_RCC_GetRTCClockSource>
 800f168:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f16e:	69ba      	ldr	r2, [r7, #24]
 800f170:	429a      	cmp	r2, r3
 800f172:	d03c      	beq.n	800f1ee <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f174:	f7fe fc9c 	bl	800dab0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800f178:	69bb      	ldr	r3, [r7, #24]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d105      	bne.n	800f18a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff ff30 	bl	800efe8 <LL_RCC_SetRTCClockSource>
 800f188:	e02e      	b.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800f18a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f192:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800f194:	f7ff ff4b 	bl	800f02e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800f198:	f7ff ff5a 	bl	800f050 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800f1aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800f1b4:	f7ff fdf0 	bl	800ed98 <LL_RCC_LSE_IsEnabled>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d114      	bne.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f1be:	f7fb fba9 	bl	800a914 <HAL_GetTick>
 800f1c2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800f1c4:	e00b      	b.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f1c6:	f7fb fba5 	bl	800a914 <HAL_GetTick>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d902      	bls.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800f1d8:	2303      	movs	r3, #3
 800f1da:	77fb      	strb	r3, [r7, #31]
              break;
 800f1dc:	e004      	b.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800f1de:	f7ff fded 	bl	800edbc <LL_RCC_LSE_IsReady>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d1ee      	bne.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800f1e8:	7ffb      	ldrb	r3, [r7, #31]
 800f1ea:	77bb      	strb	r3, [r7, #30]
 800f1ec:	e001      	b.n	800f1f2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1ee:	7ffb      	ldrb	r3, [r7, #31]
 800f1f0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f003 0301 	and.w	r3, r3, #1
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d004      	beq.n	800f208 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	699b      	ldr	r3, [r3, #24]
 800f202:	4618      	mov	r0, r3
 800f204:	f7ff fe2a 	bl	800ee5c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f003 0302 	and.w	r3, r3, #2
 800f210:	2b00      	cmp	r3, #0
 800f212:	d004      	beq.n	800f21e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	69db      	ldr	r3, [r3, #28]
 800f218:	4618      	mov	r0, r3
 800f21a:	f7ff fe35 	bl	800ee88 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f003 0310 	and.w	r3, r3, #16
 800f226:	2b00      	cmp	r3, #0
 800f228:	d004      	beq.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f22e:	4618      	mov	r0, r3
 800f230:	f7ff fe5d 	bl	800eeee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f003 0320 	and.w	r3, r3, #32
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d004      	beq.n	800f24a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f244:	4618      	mov	r0, r3
 800f246:	f7ff fe52 	bl	800eeee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f003 0304 	and.w	r3, r3, #4
 800f252:	2b00      	cmp	r3, #0
 800f254:	d004      	beq.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a1b      	ldr	r3, [r3, #32]
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7ff fe2a 	bl	800eeb4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f003 0308 	and.w	r3, r3, #8
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d004      	beq.n	800f276 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f270:	4618      	mov	r0, r3
 800f272:	f7ff fe1f 	bl	800eeb4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d022      	beq.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f286:	4618      	mov	r0, r3
 800f288:	f7ff fe8d 	bl	800efa6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f294:	d107      	bne.n	800f2a6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800f296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f2a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f2a4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f2ae:	d10b      	bne.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f000 f8dd 	bl	800f474 <RCCEx_PLLSAI1_ConfigNQ>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f2be:	7ffb      	ldrb	r3, [r7, #31]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800f2c4:	7ffb      	ldrb	r3, [r7, #31]
 800f2c6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d02b      	beq.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2dc:	d008      	beq.n	800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2e6:	d003      	beq.n	800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d105      	bne.n	800f2fc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7ff fe2a 	bl	800ef4e <LL_RCC_SetRNGClockSource>
 800f2fa:	e00a      	b.n	800f312 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f304:	60fb      	str	r3, [r7, #12]
 800f306:	2000      	movs	r0, #0
 800f308:	f7ff fe21 	bl	800ef4e <LL_RCC_SetRNGClockSource>
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f7ff fe34 	bl	800ef7a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f316:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800f31a:	d107      	bne.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800f31c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f32a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f334:	2b00      	cmp	r3, #0
 800f336:	d022      	beq.n	800f37e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f33c:	4618      	mov	r0, r3
 800f33e:	f7ff fe3d 	bl	800efbc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f34a:	d107      	bne.n	800f35c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f34c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f35a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f364:	d10b      	bne.n	800f37e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	3304      	adds	r3, #4
 800f36a:	4618      	mov	r0, r3
 800f36c:	f000 f8dd 	bl	800f52a <RCCEx_PLLSAI1_ConfigNR>
 800f370:	4603      	mov	r3, r0
 800f372:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f374:	7ffb      	ldrb	r3, [r7, #31]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d001      	beq.n	800f37e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800f37a:	7ffb      	ldrb	r3, [r7, #31]
 800f37c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f386:	2b00      	cmp	r3, #0
 800f388:	d004      	beq.n	800f394 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff fd26 	bl	800ede0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d009      	beq.n	800f3b4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7ff fd45 	bl	800ee34 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7ff fd2c 	bl	800ee0c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800f3b4:	7fbb      	ldrb	r3, [r7, #30]
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3720      	adds	r7, #32
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b084      	sub	sp, #16
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f3ca:	f7ff fe61 	bl	800f090 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f3ce:	f7fb faa1 	bl	800a914 <HAL_GetTick>
 800f3d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f3d4:	e009      	b.n	800f3ea <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f3d6:	f7fb fa9d 	bl	800a914 <HAL_GetTick>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	d902      	bls.n	800f3ea <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800f3e4:	2303      	movs	r3, #3
 800f3e6:	73fb      	strb	r3, [r7, #15]
      break;
 800f3e8:	e004      	b.n	800f3f4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f3ea:	f7ff fe60 	bl	800f0ae <LL_RCC_PLLSAI1_IsReady>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d1f0      	bne.n	800f3d6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800f3f4:	7bfb      	ldrb	r3, [r7, #15]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d137      	bne.n	800f46a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f3fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	021b      	lsls	r3, r3, #8
 800f40a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f40e:	4313      	orrs	r3, r2
 800f410:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800f412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f416:	691b      	ldr	r3, [r3, #16]
 800f418:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f424:	4313      	orrs	r3, r2
 800f426:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f428:	f7ff fe23 	bl	800f072 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f42c:	f7fb fa72 	bl	800a914 <HAL_GetTick>
 800f430:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f432:	e009      	b.n	800f448 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f434:	f7fb fa6e 	bl	800a914 <HAL_GetTick>
 800f438:	4602      	mov	r2, r0
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d902      	bls.n	800f448 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800f442:	2303      	movs	r3, #3
 800f444:	73fb      	strb	r3, [r7, #15]
        break;
 800f446:	e004      	b.n	800f452 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f448:	f7ff fe31 	bl	800f0ae <LL_RCC_PLLSAI1_IsReady>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d1f0      	bne.n	800f434 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800f452:	7bfb      	ldrb	r3, [r7, #15]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d108      	bne.n	800f46a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f45c:	691a      	ldr	r2, [r3, #16]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f466:	4313      	orrs	r3, r2
 800f468:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3710      	adds	r7, #16
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f47c:	2300      	movs	r3, #0
 800f47e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f480:	f7ff fe06 	bl	800f090 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f484:	f7fb fa46 	bl	800a914 <HAL_GetTick>
 800f488:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f48a:	e009      	b.n	800f4a0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f48c:	f7fb fa42 	bl	800a914 <HAL_GetTick>
 800f490:	4602      	mov	r2, r0
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	1ad3      	subs	r3, r2, r3
 800f496:	2b02      	cmp	r3, #2
 800f498:	d902      	bls.n	800f4a0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800f49a:	2303      	movs	r3, #3
 800f49c:	73fb      	strb	r3, [r7, #15]
      break;
 800f49e:	e004      	b.n	800f4aa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f4a0:	f7ff fe05 	bl	800f0ae <LL_RCC_PLLSAI1_IsReady>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d1f0      	bne.n	800f48c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d137      	bne.n	800f520 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f4b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	021b      	lsls	r3, r3, #8
 800f4c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f4c4:	4313      	orrs	r3, r2
 800f4c6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800f4c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4cc:	691b      	ldr	r3, [r3, #16]
 800f4ce:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f4de:	f7ff fdc8 	bl	800f072 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4e2:	f7fb fa17 	bl	800a914 <HAL_GetTick>
 800f4e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f4e8:	e009      	b.n	800f4fe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f4ea:	f7fb fa13 	bl	800a914 <HAL_GetTick>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	1ad3      	subs	r3, r2, r3
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d902      	bls.n	800f4fe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800f4f8:	2303      	movs	r3, #3
 800f4fa:	73fb      	strb	r3, [r7, #15]
        break;
 800f4fc:	e004      	b.n	800f508 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f4fe:	f7ff fdd6 	bl	800f0ae <LL_RCC_PLLSAI1_IsReady>
 800f502:	4603      	mov	r3, r0
 800f504:	2b01      	cmp	r3, #1
 800f506:	d1f0      	bne.n	800f4ea <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800f508:	7bfb      	ldrb	r3, [r7, #15]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d108      	bne.n	800f520 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f50e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f512:	691a      	ldr	r2, [r3, #16]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	691b      	ldr	r3, [r3, #16]
 800f518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f51c:	4313      	orrs	r3, r2
 800f51e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f520:	7bfb      	ldrb	r3, [r7, #15]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b084      	sub	sp, #16
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f532:	2300      	movs	r3, #0
 800f534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f536:	f7ff fdab 	bl	800f090 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f53a:	f7fb f9eb 	bl	800a914 <HAL_GetTick>
 800f53e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f540:	e009      	b.n	800f556 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f542:	f7fb f9e7 	bl	800a914 <HAL_GetTick>
 800f546:	4602      	mov	r2, r0
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d902      	bls.n	800f556 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800f550:	2303      	movs	r3, #3
 800f552:	73fb      	strb	r3, [r7, #15]
      break;
 800f554:	e004      	b.n	800f560 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f556:	f7ff fdaa 	bl	800f0ae <LL_RCC_PLLSAI1_IsReady>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1f0      	bne.n	800f542 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800f560:	7bfb      	ldrb	r3, [r7, #15]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d137      	bne.n	800f5d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f56a:	691b      	ldr	r3, [r3, #16]
 800f56c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	021b      	lsls	r3, r3, #8
 800f576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f57a:	4313      	orrs	r3, r2
 800f57c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800f57e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f582:	691b      	ldr	r3, [r3, #16]
 800f584:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f590:	4313      	orrs	r3, r2
 800f592:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f594:	f7ff fd6d 	bl	800f072 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f598:	f7fb f9bc 	bl	800a914 <HAL_GetTick>
 800f59c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f59e:	e009      	b.n	800f5b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f5a0:	f7fb f9b8 	bl	800a914 <HAL_GetTick>
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	1ad3      	subs	r3, r2, r3
 800f5aa:	2b02      	cmp	r3, #2
 800f5ac:	d902      	bls.n	800f5b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800f5ae:	2303      	movs	r3, #3
 800f5b0:	73fb      	strb	r3, [r7, #15]
        break;
 800f5b2:	e004      	b.n	800f5be <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f5b4:	f7ff fd7b 	bl	800f0ae <LL_RCC_PLLSAI1_IsReady>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d1f0      	bne.n	800f5a0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800f5be:	7bfb      	ldrb	r3, [r7, #15]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d108      	bne.n	800f5d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f5c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f5c8:	691a      	ldr	r2, [r3, #16]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	691b      	ldr	r3, [r3, #16]
 800f5ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3710      	adds	r7, #16
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d101      	bne.n	800f5f2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e027      	b.n	800f642 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	7a5b      	ldrb	r3, [r3, #9]
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d105      	bne.n	800f608 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f7f4 fe52 	bl	80042ac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2202      	movs	r2, #2
 800f60c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f023 0120 	bic.w	r1, r3, #32
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	685a      	ldr	r2, [r3, #4]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	430a      	orrs	r2, r1
 800f622:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f042 0204 	orr.w	r2, r2, #4
 800f632:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800f640:	2300      	movs	r3, #0
}
 800f642:	4618      	mov	r0, r3
 800f644:	3708      	adds	r7, #8
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
	...

0800f64c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b084      	sub	sp, #16
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d101      	bne.n	800f65e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800f65a:	2301      	movs	r3, #1
 800f65c:	e09f      	b.n	800f79e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d106      	bne.n	800f678 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7f4 fe44 	bl	8004300 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2202      	movs	r2, #2
 800f67c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f680:	4b49      	ldr	r3, [pc, #292]	; (800f7a8 <HAL_RTC_Init+0x15c>)
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	f003 0310 	and.w	r3, r3, #16
 800f688:	2b10      	cmp	r3, #16
 800f68a:	d07e      	beq.n	800f78a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	22ca      	movs	r2, #202	; 0xca
 800f692:	625a      	str	r2, [r3, #36]	; 0x24
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2253      	movs	r2, #83	; 0x53
 800f69a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f000 f8ab 	bl	800f7f8 <RTC_EnterInitMode>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d00a      	beq.n	800f6be <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	22ff      	movs	r2, #255	; 0xff
 800f6ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2204      	movs	r2, #4
 800f6b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	73fb      	strb	r3, [r7, #15]
 800f6bc:	e067      	b.n	800f78e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	6812      	ldr	r2, [r2, #0]
 800f6c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f6cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6d0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	6899      	ldr	r1, [r3, #8]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	685a      	ldr	r2, [r3, #4]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	691b      	ldr	r3, [r3, #16]
 800f6e0:	431a      	orrs	r2, r3
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	699b      	ldr	r3, [r3, #24]
 800f6e6:	431a      	orrs	r2, r3
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	430a      	orrs	r2, r1
 800f6ee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	68d2      	ldr	r2, [r2, #12]
 800f6f8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	6919      	ldr	r1, [r3, #16]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	041a      	lsls	r2, r3, #16
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	430a      	orrs	r2, r1
 800f70c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	68da      	ldr	r2, [r3, #12]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f71c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f022 0203 	bic.w	r2, r2, #3
 800f72c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	69da      	ldr	r2, [r3, #28]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	695b      	ldr	r3, [r3, #20]
 800f73c:	431a      	orrs	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	430a      	orrs	r2, r1
 800f744:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	f003 0320 	and.w	r3, r3, #32
 800f750:	2b00      	cmp	r3, #0
 800f752:	d113      	bne.n	800f77c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f000 f829 	bl	800f7ac <HAL_RTC_WaitForSynchro>
 800f75a:	4603      	mov	r3, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00d      	beq.n	800f77c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	22ff      	movs	r2, #255	; 0xff
 800f766:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2204      	movs	r2, #4
 800f76c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800f778:	2301      	movs	r3, #1
 800f77a:	e010      	b.n	800f79e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	22ff      	movs	r2, #255	; 0xff
 800f782:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800f784:	2300      	movs	r3, #0
 800f786:	73fb      	strb	r3, [r7, #15]
 800f788:	e001      	b.n	800f78e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800f78a:	2300      	movs	r3, #0
 800f78c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800f78e:	7bfb      	ldrb	r3, [r7, #15]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d103      	bne.n	800f79c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2201      	movs	r2, #1
 800f798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800f79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	40002800 	.word	0x40002800

0800f7ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	68da      	ldr	r2, [r3, #12]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f7c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800f7c4:	f7fb f8a6 	bl	800a914 <HAL_GetTick>
 800f7c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f7ca:	e009      	b.n	800f7e0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f7cc:	f7fb f8a2 	bl	800a914 <HAL_GetTick>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f7da:	d901      	bls.n	800f7e0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800f7dc:	2303      	movs	r3, #3
 800f7de:	e007      	b.n	800f7f0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	f003 0320 	and.w	r3, r3, #32
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d0ee      	beq.n	800f7cc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d119      	bne.n	800f842 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f04f 32ff 	mov.w	r2, #4294967295
 800f816:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f818:	f7fb f87c 	bl	800a914 <HAL_GetTick>
 800f81c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f81e:	e009      	b.n	800f834 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f820:	f7fb f878 	bl	800a914 <HAL_GetTick>
 800f824:	4602      	mov	r2, r0
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	1ad3      	subs	r3, r2, r3
 800f82a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f82e:	d901      	bls.n	800f834 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800f830:	2303      	movs	r3, #3
 800f832:	e007      	b.n	800f844 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d0ee      	beq.n	800f820 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d101      	bne.n	800f866 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800f862:	2302      	movs	r3, #2
 800f864:	e0a8      	b.n	800f9b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2201      	movs	r2, #1
 800f86a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2202      	movs	r2, #2
 800f872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	22ca      	movs	r2, #202	; 0xca
 800f87c:	625a      	str	r2, [r3, #36]	; 0x24
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2253      	movs	r2, #83	; 0x53
 800f884:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f890:	2b00      	cmp	r3, #0
 800f892:	d020      	beq.n	800f8d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800f894:	f7fb f83e 	bl	800a914 <HAL_GetTick>
 800f898:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800f89a:	e015      	b.n	800f8c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f89c:	f7fb f83a 	bl	800a914 <HAL_GetTick>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f8aa:	d90d      	bls.n	800f8c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	22ff      	movs	r2, #255	; 0xff
 800f8b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2203      	movs	r2, #3
 800f8b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800f8c4:	2303      	movs	r3, #3
 800f8c6:	e077      	b.n	800f9b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	f003 0304 	and.w	r3, r3, #4
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1e2      	bne.n	800f89c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	689a      	ldr	r2, [r3, #8]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8e4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	b2da      	uxtb	r2, r3
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800f8f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800f8f8:	f7fb f80c 	bl	800a914 <HAL_GetTick>
 800f8fc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f8fe:	e015      	b.n	800f92c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f900:	f7fb f808 	bl	800a914 <HAL_GetTick>
 800f904:	4602      	mov	r2, r0
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	1ad3      	subs	r3, r2, r3
 800f90a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f90e:	d90d      	bls.n	800f92c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	22ff      	movs	r2, #255	; 0xff
 800f916:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2203      	movs	r2, #3
 800f91c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800f928:	2303      	movs	r3, #3
 800f92a:	e045      	b.n	800f9b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	f003 0304 	and.w	r3, r3, #4
 800f936:	2b00      	cmp	r3, #0
 800f938:	d0e2      	beq.n	800f900 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68ba      	ldr	r2, [r7, #8]
 800f940:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	689a      	ldr	r2, [r3, #8]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f022 0207 	bic.w	r2, r2, #7
 800f950:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	6899      	ldr	r1, [r3, #8]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	430a      	orrs	r2, r1
 800f960:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800f962:	4b17      	ldr	r3, [pc, #92]	; (800f9c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800f964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f968:	4a15      	ldr	r2, [pc, #84]	; (800f9c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800f96a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f96e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800f972:	4b13      	ldr	r3, [pc, #76]	; (800f9c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4a12      	ldr	r2, [pc, #72]	; (800f9c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800f978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f97c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	689a      	ldr	r2, [r3, #8]
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f98c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	689a      	ldr	r2, [r3, #8]
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f99c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	22ff      	movs	r2, #255	; 0xff
 800f9a4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800f9b6:	2300      	movs	r3, #0
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3718      	adds	r7, #24
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	58000800 	.word	0x58000800

0800f9c4 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d101      	bne.n	800f9da <HAL_RTCEx_EnableBypassShadow+0x16>
 800f9d6:	2302      	movs	r3, #2
 800f9d8:	e024      	b.n	800fa24 <HAL_RTCEx_EnableBypassShadow+0x60>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2202      	movs	r2, #2
 800f9e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	22ca      	movs	r2, #202	; 0xca
 800f9f0:	625a      	str	r2, [r3, #36]	; 0x24
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2253      	movs	r2, #83	; 0x53
 800f9f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	689a      	ldr	r2, [r3, #8]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	f042 0220 	orr.w	r2, r2, #32
 800fa08:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	22ff      	movs	r2, #255	; 0xff
 800fa10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2201      	movs	r2, #1
 800fa16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800fa22:	2300      	movs	r3, #0
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fa40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800fa44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	b29a      	uxth	r2, r3
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3714      	adds	r7, #20
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr

0800fa5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fa5e:	b480      	push	{r7}
 800fa60:	b085      	sub	sp, #20
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fa66:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800fa6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	43db      	mvns	r3, r3
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	4013      	ands	r3, r2
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fa86:	2300      	movs	r3, #0
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	1d3b      	adds	r3, r7, #4
 800fa9e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2201      	movs	r2, #1
 800faa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2200      	movs	r2, #0
 800faae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2200      	movs	r2, #0
 800fabe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3714      	adds	r7, #20
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b09d      	sub	sp, #116	; 0x74
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fada:	2300      	movs	r3, #0
 800fadc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800fae0:	687a      	ldr	r2, [r7, #4]
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	009b      	lsls	r3, r3, #2
 800fae8:	4413      	add	r3, r2
 800faea:	881b      	ldrh	r3, [r3, #0]
 800faec:	b29b      	uxth	r3, r3
 800faee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800faf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faf6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	78db      	ldrb	r3, [r3, #3]
 800fafe:	2b03      	cmp	r3, #3
 800fb00:	d81f      	bhi.n	800fb42 <USB_ActivateEndpoint+0x72>
 800fb02:	a201      	add	r2, pc, #4	; (adr r2, 800fb08 <USB_ActivateEndpoint+0x38>)
 800fb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb08:	0800fb19 	.word	0x0800fb19
 800fb0c:	0800fb35 	.word	0x0800fb35
 800fb10:	0800fb4b 	.word	0x0800fb4b
 800fb14:	0800fb27 	.word	0x0800fb27
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800fb18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fb1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fb20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fb24:	e012      	b.n	800fb4c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800fb26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fb2a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800fb2e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fb32:	e00b      	b.n	800fb4c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800fb34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fb38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fb3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fb40:	e004      	b.n	800fb4c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800fb42:	2301      	movs	r3, #1
 800fb44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800fb48:	e000      	b.n	800fb4c <USB_ActivateEndpoint+0x7c>
      break;
 800fb4a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	441a      	add	r2, r3
 800fb56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fb5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fb6e:	687a      	ldr	r2, [r7, #4]
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	4413      	add	r3, r2
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	b21b      	sxth	r3, r3
 800fb7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb86:	b21a      	sxth	r2, r3
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	b21b      	sxth	r3, r3
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	b21b      	sxth	r3, r3
 800fb92:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	441a      	add	r2, r3
 800fba0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800fba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fbac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	7b1b      	ldrb	r3, [r3, #12]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f040 8178 	bne.w	800feb2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	785b      	ldrb	r3, [r3, #1]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	f000 8084 	beq.w	800fcd4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	61bb      	str	r3, [r7, #24]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	461a      	mov	r2, r3
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	4413      	add	r3, r2
 800fbde:	61bb      	str	r3, [r7, #24]
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	00da      	lsls	r2, r3, #3
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	4413      	add	r3, r2
 800fbea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbee:	617b      	str	r3, [r7, #20]
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	88db      	ldrh	r3, [r3, #6]
 800fbf4:	085b      	lsrs	r3, r3, #1
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	4413      	add	r3, r2
 800fc0a:	881b      	ldrh	r3, [r3, #0]
 800fc0c:	827b      	strh	r3, [r7, #18]
 800fc0e:	8a7b      	ldrh	r3, [r7, #18]
 800fc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d01b      	beq.n	800fc50 <USB_ActivateEndpoint+0x180>
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	4413      	add	r3, r2
 800fc22:	881b      	ldrh	r3, [r3, #0]
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc2e:	823b      	strh	r3, [r7, #16]
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	441a      	add	r2, r3
 800fc3a:	8a3b      	ldrh	r3, [r7, #16]
 800fc3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	78db      	ldrb	r3, [r3, #3]
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	d020      	beq.n	800fc9a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	4413      	add	r3, r2
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc6e:	81bb      	strh	r3, [r7, #12]
 800fc70:	89bb      	ldrh	r3, [r7, #12]
 800fc72:	f083 0320 	eor.w	r3, r3, #32
 800fc76:	81bb      	strh	r3, [r7, #12]
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	009b      	lsls	r3, r3, #2
 800fc80:	441a      	add	r2, r3
 800fc82:	89bb      	ldrh	r3, [r7, #12]
 800fc84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	8013      	strh	r3, [r2, #0]
 800fc98:	e2d5      	b.n	8010246 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fc9a:	687a      	ldr	r2, [r7, #4]
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	009b      	lsls	r3, r3, #2
 800fca2:	4413      	add	r3, r2
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fcac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcb0:	81fb      	strh	r3, [r7, #14]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	441a      	add	r2, r3
 800fcbc:	89fb      	ldrh	r3, [r7, #14]
 800fcbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fcc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fcc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	8013      	strh	r3, [r2, #0]
 800fcd2:	e2b8      	b.n	8010246 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	633b      	str	r3, [r7, #48]	; 0x30
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	461a      	mov	r2, r3
 800fce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce4:	4413      	add	r3, r2
 800fce6:	633b      	str	r3, [r7, #48]	; 0x30
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	00da      	lsls	r2, r3, #3
 800fcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf0:	4413      	add	r3, r2
 800fcf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	88db      	ldrh	r3, [r3, #6]
 800fcfc:	085b      	lsrs	r3, r3, #1
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	005b      	lsls	r3, r3, #1
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd06:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	461a      	mov	r2, r3
 800fd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd18:	4413      	add	r3, r2
 800fd1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	00da      	lsls	r2, r3, #3
 800fd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd24:	4413      	add	r3, r2
 800fd26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fd2a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2e:	881b      	ldrh	r3, [r3, #0]
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3a:	801a      	strh	r2, [r3, #0]
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	691b      	ldr	r3, [r3, #16]
 800fd40:	2b3e      	cmp	r3, #62	; 0x3e
 800fd42:	d91d      	bls.n	800fd80 <USB_ActivateEndpoint+0x2b0>
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	691b      	ldr	r3, [r3, #16]
 800fd48:	095b      	lsrs	r3, r3, #5
 800fd4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	691b      	ldr	r3, [r3, #16]
 800fd50:	f003 031f 	and.w	r3, r3, #31
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d102      	bne.n	800fd5e <USB_ActivateEndpoint+0x28e>
 800fd58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd5a:	3b01      	subs	r3, #1
 800fd5c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	b29a      	uxth	r2, r3
 800fd64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	029b      	lsls	r3, r3, #10
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7c:	801a      	strh	r2, [r3, #0]
 800fd7e:	e026      	b.n	800fdce <USB_ActivateEndpoint+0x2fe>
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	691b      	ldr	r3, [r3, #16]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10a      	bne.n	800fd9e <USB_ActivateEndpoint+0x2ce>
 800fd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8a:	881b      	ldrh	r3, [r3, #0]
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd96:	b29a      	uxth	r2, r3
 800fd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9a:	801a      	strh	r2, [r3, #0]
 800fd9c:	e017      	b.n	800fdce <USB_ActivateEndpoint+0x2fe>
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	085b      	lsrs	r3, r3, #1
 800fda4:	66bb      	str	r3, [r7, #104]	; 0x68
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	691b      	ldr	r3, [r3, #16]
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d002      	beq.n	800fdb8 <USB_ActivateEndpoint+0x2e8>
 800fdb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800fdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdba:	881b      	ldrh	r3, [r3, #0]
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	029b      	lsls	r3, r3, #10
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	881b      	ldrh	r3, [r3, #0]
 800fdda:	847b      	strh	r3, [r7, #34]	; 0x22
 800fddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d01b      	beq.n	800fe1e <USB_ActivateEndpoint+0x34e>
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	009b      	lsls	r3, r3, #2
 800fdee:	4413      	add	r3, r2
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fdf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdfc:	843b      	strh	r3, [r7, #32]
 800fdfe:	687a      	ldr	r2, [r7, #4]
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	009b      	lsls	r3, r3, #2
 800fe06:	441a      	add	r2, r3
 800fe08:	8c3b      	ldrh	r3, [r7, #32]
 800fe0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fe16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d124      	bne.n	800fe70 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fe38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe3c:	83bb      	strh	r3, [r7, #28]
 800fe3e:	8bbb      	ldrh	r3, [r7, #28]
 800fe40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fe44:	83bb      	strh	r3, [r7, #28]
 800fe46:	8bbb      	ldrh	r3, [r7, #28]
 800fe48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fe4c:	83bb      	strh	r3, [r7, #28]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	441a      	add	r2, r3
 800fe58:	8bbb      	ldrh	r3, [r7, #28]
 800fe5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	8013      	strh	r3, [r2, #0]
 800fe6e:	e1ea      	b.n	8010246 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4413      	add	r3, r2
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fe82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe86:	83fb      	strh	r3, [r7, #30]
 800fe88:	8bfb      	ldrh	r3, [r7, #30]
 800fe8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fe8e:	83fb      	strh	r3, [r7, #30]
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	441a      	add	r2, r3
 800fe9a:	8bfb      	ldrh	r3, [r7, #30]
 800fe9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feac:	b29b      	uxth	r3, r3
 800feae:	8013      	strh	r3, [r2, #0]
 800feb0:	e1c9      	b.n	8010246 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	78db      	ldrb	r3, [r3, #3]
 800feb6:	2b02      	cmp	r3, #2
 800feb8:	d11e      	bne.n	800fef8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800feba:	687a      	ldr	r2, [r7, #4]
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	4413      	add	r3, r2
 800fec4:	881b      	ldrh	r3, [r3, #0]
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fed0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	441a      	add	r2, r3
 800fede:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800feea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800feee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	8013      	strh	r3, [r2, #0]
 800fef6:	e01d      	b.n	800ff34 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	4413      	add	r3, r2
 800ff02:	881b      	ldrh	r3, [r3, #0]
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ff0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ff12:	687a      	ldr	r2, [r7, #4]
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	441a      	add	r2, r3
 800ff1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ff20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	461a      	mov	r2, r3
 800ff42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff44:	4413      	add	r3, r2
 800ff46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	00da      	lsls	r2, r3, #3
 800ff4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff50:	4413      	add	r3, r2
 800ff52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ff56:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	891b      	ldrh	r3, [r3, #8]
 800ff5c:	085b      	lsrs	r3, r3, #1
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	005b      	lsls	r3, r3, #1
 800ff62:	b29a      	uxth	r2, r3
 800ff64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff66:	801a      	strh	r2, [r3, #0]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	657b      	str	r3, [r7, #84]	; 0x54
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	461a      	mov	r2, r3
 800ff76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff78:	4413      	add	r3, r2
 800ff7a:	657b      	str	r3, [r7, #84]	; 0x54
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	00da      	lsls	r2, r3, #3
 800ff82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff84:	4413      	add	r3, r2
 800ff86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ff8a:	653b      	str	r3, [r7, #80]	; 0x50
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	895b      	ldrh	r3, [r3, #10]
 800ff90:	085b      	lsrs	r3, r3, #1
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	005b      	lsls	r3, r3, #1
 800ff96:	b29a      	uxth	r2, r3
 800ff98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff9a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	785b      	ldrb	r3, [r3, #1]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f040 8093 	bne.w	80100cc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	881b      	ldrh	r3, [r3, #0]
 800ffb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ffb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ffba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d01b      	beq.n	800fffa <USB_ActivateEndpoint+0x52a>
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	4413      	add	r3, r2
 800ffcc:	881b      	ldrh	r3, [r3, #0]
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	441a      	add	r2, r3
 800ffe4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ffe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	009b      	lsls	r3, r3, #2
 8010002:	4413      	add	r3, r2
 8010004:	881b      	ldrh	r3, [r3, #0]
 8010006:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010008:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801000a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801000e:	2b00      	cmp	r3, #0
 8010010:	d01b      	beq.n	801004a <USB_ActivateEndpoint+0x57a>
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	4413      	add	r3, r2
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	b29b      	uxth	r3, r3
 8010020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010028:	877b      	strh	r3, [r7, #58]	; 0x3a
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	441a      	add	r2, r3
 8010034:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801003a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801003e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010042:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010046:	b29b      	uxth	r3, r3
 8010048:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	4413      	add	r3, r2
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	b29b      	uxth	r3, r3
 8010058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801005c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010060:	873b      	strh	r3, [r7, #56]	; 0x38
 8010062:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010064:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010068:	873b      	strh	r3, [r7, #56]	; 0x38
 801006a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801006c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010070:	873b      	strh	r3, [r7, #56]	; 0x38
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	441a      	add	r2, r3
 801007c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801007e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801008a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801008e:	b29b      	uxth	r3, r3
 8010090:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010092:	687a      	ldr	r2, [r7, #4]
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	4413      	add	r3, r2
 801009c:	881b      	ldrh	r3, [r3, #0]
 801009e:	b29b      	uxth	r3, r3
 80100a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	441a      	add	r2, r3
 80100b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80100b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	8013      	strh	r3, [r2, #0]
 80100ca:	e0bc      	b.n	8010246 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	4413      	add	r3, r2
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80100dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80100e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d01d      	beq.n	8010124 <USB_ActivateEndpoint+0x654>
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	4413      	add	r3, r2
 80100f2:	881b      	ldrh	r3, [r3, #0]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	441a      	add	r2, r3
 801010c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801011c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010120:	b29b      	uxth	r3, r3
 8010122:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	009b      	lsls	r3, r3, #2
 801012c:	4413      	add	r3, r2
 801012e:	881b      	ldrh	r3, [r3, #0]
 8010130:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010134:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8010138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801013c:	2b00      	cmp	r3, #0
 801013e:	d01d      	beq.n	801017c <USB_ActivateEndpoint+0x6ac>
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	4413      	add	r3, r2
 801014a:	881b      	ldrh	r3, [r3, #0]
 801014c:	b29b      	uxth	r3, r3
 801014e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010156:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	441a      	add	r2, r3
 8010164:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801016c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010174:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010178:	b29b      	uxth	r3, r3
 801017a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	78db      	ldrb	r3, [r3, #3]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d024      	beq.n	80101ce <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	4413      	add	r3, r2
 801018e:	881b      	ldrh	r3, [r3, #0]
 8010190:	b29b      	uxth	r3, r3
 8010192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801019a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801019e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80101a2:	f083 0320 	eor.w	r3, r3, #32
 80101a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	441a      	add	r2, r3
 80101b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80101b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	8013      	strh	r3, [r2, #0]
 80101cc:	e01d      	b.n	801020a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	4413      	add	r3, r2
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	b29b      	uxth	r3, r3
 80101dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80101e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	441a      	add	r2, r3
 80101f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80101f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010206:	b29b      	uxth	r3, r3
 8010208:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	4413      	add	r3, r2
 8010214:	881b      	ldrh	r3, [r3, #0]
 8010216:	b29b      	uxth	r3, r3
 8010218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801021c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010220:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	009b      	lsls	r3, r3, #2
 801022c:	441a      	add	r2, r3
 801022e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801023a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801023e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010242:	b29b      	uxth	r3, r3
 8010244:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010246:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801024a:	4618      	mov	r0, r3
 801024c:	3774      	adds	r7, #116	; 0x74
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop

08010258 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010258:	b480      	push	{r7}
 801025a:	b08d      	sub	sp, #52	; 0x34
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	7b1b      	ldrb	r3, [r3, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	f040 808e 	bne.w	8010388 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	785b      	ldrb	r3, [r3, #1]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d044      	beq.n	80102fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	009b      	lsls	r3, r3, #2
 801027c:	4413      	add	r3, r2
 801027e:	881b      	ldrh	r3, [r3, #0]
 8010280:	81bb      	strh	r3, [r7, #12]
 8010282:	89bb      	ldrh	r3, [r7, #12]
 8010284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010288:	2b00      	cmp	r3, #0
 801028a:	d01b      	beq.n	80102c4 <USB_DeactivateEndpoint+0x6c>
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	009b      	lsls	r3, r3, #2
 8010294:	4413      	add	r3, r2
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	b29b      	uxth	r3, r3
 801029a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801029e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102a2:	817b      	strh	r3, [r7, #10]
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	441a      	add	r2, r3
 80102ae:	897b      	ldrh	r3, [r7, #10]
 80102b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4413      	add	r3, r2
 80102ce:	881b      	ldrh	r3, [r3, #0]
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102da:	813b      	strh	r3, [r7, #8]
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	441a      	add	r2, r3
 80102e6:	893b      	ldrh	r3, [r7, #8]
 80102e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	8013      	strh	r3, [r2, #0]
 80102fc:	e192      	b.n	8010624 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	781b      	ldrb	r3, [r3, #0]
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	4413      	add	r3, r2
 8010308:	881b      	ldrh	r3, [r3, #0]
 801030a:	827b      	strh	r3, [r7, #18]
 801030c:	8a7b      	ldrh	r3, [r7, #18]
 801030e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010312:	2b00      	cmp	r3, #0
 8010314:	d01b      	beq.n	801034e <USB_DeactivateEndpoint+0xf6>
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	4413      	add	r3, r2
 8010320:	881b      	ldrh	r3, [r3, #0]
 8010322:	b29b      	uxth	r3, r3
 8010324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801032c:	823b      	strh	r3, [r7, #16]
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	441a      	add	r2, r3
 8010338:	8a3b      	ldrh	r3, [r7, #16]
 801033a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801033e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801034a:	b29b      	uxth	r3, r3
 801034c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	4413      	add	r3, r2
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	b29b      	uxth	r3, r3
 801035c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010364:	81fb      	strh	r3, [r7, #14]
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	441a      	add	r2, r3
 8010370:	89fb      	ldrh	r3, [r7, #14]
 8010372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801037a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801037e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010382:	b29b      	uxth	r3, r3
 8010384:	8013      	strh	r3, [r2, #0]
 8010386:	e14d      	b.n	8010624 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	785b      	ldrb	r3, [r3, #1]
 801038c:	2b00      	cmp	r3, #0
 801038e:	f040 80a5 	bne.w	80104dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	4413      	add	r3, r2
 801039c:	881b      	ldrh	r3, [r3, #0]
 801039e:	843b      	strh	r3, [r7, #32]
 80103a0:	8c3b      	ldrh	r3, [r7, #32]
 80103a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d01b      	beq.n	80103e2 <USB_DeactivateEndpoint+0x18a>
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	009b      	lsls	r3, r3, #2
 80103b2:	4413      	add	r3, r2
 80103b4:	881b      	ldrh	r3, [r3, #0]
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103c0:	83fb      	strh	r3, [r7, #30]
 80103c2:	687a      	ldr	r2, [r7, #4]
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	441a      	add	r2, r3
 80103cc:	8bfb      	ldrh	r3, [r7, #30]
 80103ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80103da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103de:	b29b      	uxth	r3, r3
 80103e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	009b      	lsls	r3, r3, #2
 80103ea:	4413      	add	r3, r2
 80103ec:	881b      	ldrh	r3, [r3, #0]
 80103ee:	83bb      	strh	r3, [r7, #28]
 80103f0:	8bbb      	ldrh	r3, [r7, #28]
 80103f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d01b      	beq.n	8010432 <USB_DeactivateEndpoint+0x1da>
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	4413      	add	r3, r2
 8010404:	881b      	ldrh	r3, [r3, #0]
 8010406:	b29b      	uxth	r3, r3
 8010408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801040c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010410:	837b      	strh	r3, [r7, #26]
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	441a      	add	r2, r3
 801041c:	8b7b      	ldrh	r3, [r7, #26]
 801041e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801042a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801042e:	b29b      	uxth	r3, r3
 8010430:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	4413      	add	r3, r2
 801043c:	881b      	ldrh	r3, [r3, #0]
 801043e:	b29b      	uxth	r3, r3
 8010440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010448:	833b      	strh	r3, [r7, #24]
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	441a      	add	r2, r3
 8010454:	8b3b      	ldrh	r3, [r7, #24]
 8010456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801045a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801045e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010462:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010466:	b29b      	uxth	r3, r3
 8010468:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	4413      	add	r3, r2
 8010474:	881b      	ldrh	r3, [r3, #0]
 8010476:	b29b      	uxth	r3, r3
 8010478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801047c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010480:	82fb      	strh	r3, [r7, #22]
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	441a      	add	r2, r3
 801048c:	8afb      	ldrh	r3, [r7, #22]
 801048e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801049a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801049e:	b29b      	uxth	r3, r3
 80104a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	009b      	lsls	r3, r3, #2
 80104aa:	4413      	add	r3, r2
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104b8:	82bb      	strh	r3, [r7, #20]
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	441a      	add	r2, r3
 80104c4:	8abb      	ldrh	r3, [r7, #20]
 80104c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	8013      	strh	r3, [r2, #0]
 80104da:	e0a3      	b.n	8010624 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	4413      	add	r3, r2
 80104e6:	881b      	ldrh	r3, [r3, #0]
 80104e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80104ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80104ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d01b      	beq.n	801052c <USB_DeactivateEndpoint+0x2d4>
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	4413      	add	r3, r2
 80104fe:	881b      	ldrh	r3, [r3, #0]
 8010500:	b29b      	uxth	r3, r3
 8010502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801050a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	441a      	add	r2, r3
 8010516:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801051c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010528:	b29b      	uxth	r3, r3
 801052a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	4413      	add	r3, r2
 8010536:	881b      	ldrh	r3, [r3, #0]
 8010538:	857b      	strh	r3, [r7, #42]	; 0x2a
 801053a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801053c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010540:	2b00      	cmp	r3, #0
 8010542:	d01b      	beq.n	801057c <USB_DeactivateEndpoint+0x324>
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	4413      	add	r3, r2
 801054e:	881b      	ldrh	r3, [r3, #0]
 8010550:	b29b      	uxth	r3, r3
 8010552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801055a:	853b      	strh	r3, [r7, #40]	; 0x28
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	441a      	add	r2, r3
 8010566:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801056c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010574:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010578:	b29b      	uxth	r3, r3
 801057a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	4413      	add	r3, r2
 8010586:	881b      	ldrh	r3, [r3, #0]
 8010588:	b29b      	uxth	r3, r3
 801058a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801058e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010592:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	441a      	add	r2, r3
 801059e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80105a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80105ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4413      	add	r3, r2
 80105be:	881b      	ldrh	r3, [r3, #0]
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	009b      	lsls	r3, r3, #2
 80105d4:	441a      	add	r2, r3
 80105d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	009b      	lsls	r3, r3, #2
 80105f4:	4413      	add	r3, r2
 80105f6:	881b      	ldrh	r3, [r3, #0]
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010602:	847b      	strh	r3, [r7, #34]	; 0x22
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	009b      	lsls	r3, r3, #2
 801060c:	441a      	add	r2, r3
 801060e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010620:	b29b      	uxth	r3, r3
 8010622:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	3734      	adds	r7, #52	; 0x34
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr

08010632 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b0c2      	sub	sp, #264	; 0x108
 8010636:	af00      	add	r7, sp, #0
 8010638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801063c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010640:	6018      	str	r0, [r3, #0]
 8010642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801064a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801064c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	785b      	ldrb	r3, [r3, #1]
 8010658:	2b01      	cmp	r3, #1
 801065a:	f040 86b7 	bne.w	80113cc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801065e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	699a      	ldr	r2, [r3, #24]
 801066a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801066e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	691b      	ldr	r3, [r3, #16]
 8010676:	429a      	cmp	r2, r3
 8010678:	d908      	bls.n	801068c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 801067a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801067e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801068a:	e007      	b.n	801069c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 801068c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	699b      	ldr	r3, [r3, #24]
 8010698:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801069c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	7b1b      	ldrb	r3, [r3, #12]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d13a      	bne.n	8010722 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80106ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	6959      	ldr	r1, [r3, #20]
 80106b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	88da      	ldrh	r2, [r3, #6]
 80106c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80106ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80106d2:	6800      	ldr	r0, [r0, #0]
 80106d4:	f001 fc98 	bl	8012008 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80106d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	613b      	str	r3, [r7, #16]
 80106e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	461a      	mov	r2, r3
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	4413      	add	r3, r2
 80106fa:	613b      	str	r3, [r7, #16]
 80106fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	00da      	lsls	r2, r3, #3
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	4413      	add	r3, r2
 801070e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010712:	60fb      	str	r3, [r7, #12]
 8010714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010718:	b29a      	uxth	r2, r3
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	801a      	strh	r2, [r3, #0]
 801071e:	f000 be1f 	b.w	8011360 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	78db      	ldrb	r3, [r3, #3]
 801072e:	2b02      	cmp	r3, #2
 8010730:	f040 8462 	bne.w	8010ff8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	6a1a      	ldr	r2, [r3, #32]
 8010740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	691b      	ldr	r3, [r3, #16]
 801074c:	429a      	cmp	r2, r3
 801074e:	f240 83df 	bls.w	8010f10 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	4413      	add	r3, r2
 801076c:	881b      	ldrh	r3, [r3, #0]
 801076e:	b29b      	uxth	r3, r3
 8010770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010778:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801077c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801078a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	441a      	add	r2, r3
 8010796:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801079a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801079e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80107a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80107ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	6a1a      	ldr	r2, [r3, #32]
 80107ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107be:	1ad2      	subs	r2, r2, r3
 80107c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80107cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	009b      	lsls	r3, r3, #2
 80107e4:	4413      	add	r3, r2
 80107e6:	881b      	ldrh	r3, [r3, #0]
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	f000 81c7 	beq.w	8010b82 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80107f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	633b      	str	r3, [r7, #48]	; 0x30
 8010800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	785b      	ldrb	r3, [r3, #1]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d177      	bne.n	8010900 <USB_EPStartXfer+0x2ce>
 8010810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	62bb      	str	r3, [r7, #40]	; 0x28
 801081c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801082a:	b29b      	uxth	r3, r3
 801082c:	461a      	mov	r2, r3
 801082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010830:	4413      	add	r3, r2
 8010832:	62bb      	str	r3, [r7, #40]	; 0x28
 8010834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	00da      	lsls	r2, r3, #3
 8010842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010844:	4413      	add	r3, r2
 8010846:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801084a:	627b      	str	r3, [r7, #36]	; 0x24
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	881b      	ldrh	r3, [r3, #0]
 8010850:	b29b      	uxth	r3, r3
 8010852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010856:	b29a      	uxth	r2, r3
 8010858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085a:	801a      	strh	r2, [r3, #0]
 801085c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010860:	2b3e      	cmp	r3, #62	; 0x3e
 8010862:	d921      	bls.n	80108a8 <USB_EPStartXfer+0x276>
 8010864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010868:	095b      	lsrs	r3, r3, #5
 801086a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801086e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010872:	f003 031f 	and.w	r3, r3, #31
 8010876:	2b00      	cmp	r3, #0
 8010878:	d104      	bne.n	8010884 <USB_EPStartXfer+0x252>
 801087a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801087e:	3b01      	subs	r3, #1
 8010880:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	b29a      	uxth	r2, r3
 801088a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801088e:	b29b      	uxth	r3, r3
 8010890:	029b      	lsls	r3, r3, #10
 8010892:	b29b      	uxth	r3, r3
 8010894:	4313      	orrs	r3, r2
 8010896:	b29b      	uxth	r3, r3
 8010898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801089c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a4:	801a      	strh	r2, [r3, #0]
 80108a6:	e050      	b.n	801094a <USB_EPStartXfer+0x318>
 80108a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d10a      	bne.n	80108c6 <USB_EPStartXfer+0x294>
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	881b      	ldrh	r3, [r3, #0]
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108be:	b29a      	uxth	r2, r3
 80108c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c2:	801a      	strh	r2, [r3, #0]
 80108c4:	e041      	b.n	801094a <USB_EPStartXfer+0x318>
 80108c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ca:	085b      	lsrs	r3, r3, #1
 80108cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80108d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108d4:	f003 0301 	and.w	r3, r3, #1
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d004      	beq.n	80108e6 <USB_EPStartXfer+0x2b4>
 80108dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80108e0:	3301      	adds	r3, #1
 80108e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80108e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e8:	881b      	ldrh	r3, [r3, #0]
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	029b      	lsls	r3, r3, #10
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	4313      	orrs	r3, r2
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fc:	801a      	strh	r2, [r3, #0]
 80108fe:	e024      	b.n	801094a <USB_EPStartXfer+0x318>
 8010900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	785b      	ldrb	r3, [r3, #1]
 801090c:	2b01      	cmp	r3, #1
 801090e:	d11c      	bne.n	801094a <USB_EPStartXfer+0x318>
 8010910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010914:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801091e:	b29b      	uxth	r3, r3
 8010920:	461a      	mov	r2, r3
 8010922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010924:	4413      	add	r3, r2
 8010926:	633b      	str	r3, [r7, #48]	; 0x30
 8010928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801092c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	00da      	lsls	r2, r3, #3
 8010936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010938:	4413      	add	r3, r2
 801093a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801093e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010944:	b29a      	uxth	r2, r3
 8010946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010948:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801094a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801094e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	895b      	ldrh	r3, [r3, #10]
 8010956:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801095a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801095e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6959      	ldr	r1, [r3, #20]
 8010966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801096a:	b29b      	uxth	r3, r3
 801096c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010970:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010974:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010978:	6800      	ldr	r0, [r0, #0]
 801097a:	f001 fb45 	bl	8012008 <USB_WritePMA>
            ep->xfer_buff += len;
 801097e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	695a      	ldr	r2, [r3, #20]
 801098a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801098e:	441a      	add	r2, r3
 8010990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801099c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	6a1a      	ldr	r2, [r3, #32]
 80109a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	691b      	ldr	r3, [r3, #16]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d90f      	bls.n	80109d8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80109b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6a1a      	ldr	r2, [r3, #32]
 80109c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109c8:	1ad2      	subs	r2, r2, r3
 80109ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	621a      	str	r2, [r3, #32]
 80109d6:	e00e      	b.n	80109f6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80109d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	6a1b      	ldr	r3, [r3, #32]
 80109e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80109e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2200      	movs	r2, #0
 80109f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80109f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	785b      	ldrb	r3, [r3, #1]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d177      	bne.n	8010af6 <USB_EPStartXfer+0x4c4>
 8010a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	61bb      	str	r3, [r7, #24]
 8010a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	461a      	mov	r2, r3
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	4413      	add	r3, r2
 8010a28:	61bb      	str	r3, [r7, #24]
 8010a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	00da      	lsls	r2, r3, #3
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010a40:	617b      	str	r3, [r7, #20]
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	881b      	ldrh	r3, [r3, #0]
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	801a      	strh	r2, [r3, #0]
 8010a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a56:	2b3e      	cmp	r3, #62	; 0x3e
 8010a58:	d921      	bls.n	8010a9e <USB_EPStartXfer+0x46c>
 8010a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a5e:	095b      	lsrs	r3, r3, #5
 8010a60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a68:	f003 031f 	and.w	r3, r3, #31
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d104      	bne.n	8010a7a <USB_EPStartXfer+0x448>
 8010a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a74:	3b01      	subs	r3, #1
 8010a76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	029b      	lsls	r3, r3, #10
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a96:	b29a      	uxth	r2, r3
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	801a      	strh	r2, [r3, #0]
 8010a9c:	e056      	b.n	8010b4c <USB_EPStartXfer+0x51a>
 8010a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d10a      	bne.n	8010abc <USB_EPStartXfer+0x48a>
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	881b      	ldrh	r3, [r3, #0]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	801a      	strh	r2, [r3, #0]
 8010aba:	e047      	b.n	8010b4c <USB_EPStartXfer+0x51a>
 8010abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ac0:	085b      	lsrs	r3, r3, #1
 8010ac2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010aca:	f003 0301 	and.w	r3, r3, #1
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d004      	beq.n	8010adc <USB_EPStartXfer+0x4aa>
 8010ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	029b      	lsls	r3, r3, #10
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	4313      	orrs	r3, r2
 8010aee:	b29a      	uxth	r2, r3
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	801a      	strh	r2, [r3, #0]
 8010af4:	e02a      	b.n	8010b4c <USB_EPStartXfer+0x51a>
 8010af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	785b      	ldrb	r3, [r3, #1]
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d122      	bne.n	8010b4c <USB_EPStartXfer+0x51a>
 8010b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	623b      	str	r3, [r7, #32]
 8010b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	461a      	mov	r2, r3
 8010b24:	6a3b      	ldr	r3, [r7, #32]
 8010b26:	4413      	add	r3, r2
 8010b28:	623b      	str	r3, [r7, #32]
 8010b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	00da      	lsls	r2, r3, #3
 8010b38:	6a3b      	ldr	r3, [r7, #32]
 8010b3a:	4413      	add	r3, r2
 8010b3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010b40:	61fb      	str	r3, [r7, #28]
 8010b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b46:	b29a      	uxth	r2, r3
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	891b      	ldrh	r3, [r3, #8]
 8010b58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	6959      	ldr	r1, [r3, #20]
 8010b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010b72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010b76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010b7a:	6800      	ldr	r0, [r0, #0]
 8010b7c:	f001 fa44 	bl	8012008 <USB_WritePMA>
 8010b80:	e3ee      	b.n	8011360 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	785b      	ldrb	r3, [r3, #1]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d177      	bne.n	8010c82 <USB_EPStartXfer+0x650>
 8010b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	461a      	mov	r2, r3
 8010bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bb2:	4413      	add	r3, r2
 8010bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8010bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	00da      	lsls	r2, r3, #3
 8010bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bc6:	4413      	add	r3, r2
 8010bc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8010bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bd0:	881b      	ldrh	r3, [r3, #0]
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bdc:	801a      	strh	r2, [r3, #0]
 8010bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010be2:	2b3e      	cmp	r3, #62	; 0x3e
 8010be4:	d921      	bls.n	8010c2a <USB_EPStartXfer+0x5f8>
 8010be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bea:	095b      	lsrs	r3, r3, #5
 8010bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bf4:	f003 031f 	and.w	r3, r3, #31
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d104      	bne.n	8010c06 <USB_EPStartXfer+0x5d4>
 8010bfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010c00:	3b01      	subs	r3, #1
 8010c02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	029b      	lsls	r3, r3, #10
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	4313      	orrs	r3, r2
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c22:	b29a      	uxth	r2, r3
 8010c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c26:	801a      	strh	r2, [r3, #0]
 8010c28:	e056      	b.n	8010cd8 <USB_EPStartXfer+0x6a6>
 8010c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d10a      	bne.n	8010c48 <USB_EPStartXfer+0x616>
 8010c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c34:	881b      	ldrh	r3, [r3, #0]
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c44:	801a      	strh	r2, [r3, #0]
 8010c46:	e047      	b.n	8010cd8 <USB_EPStartXfer+0x6a6>
 8010c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c4c:	085b      	lsrs	r3, r3, #1
 8010c4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c56:	f003 0301 	and.w	r3, r3, #1
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d004      	beq.n	8010c68 <USB_EPStartXfer+0x636>
 8010c5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010c62:	3301      	adds	r3, #1
 8010c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c6a:	881b      	ldrh	r3, [r3, #0]
 8010c6c:	b29a      	uxth	r2, r3
 8010c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	029b      	lsls	r3, r3, #10
 8010c76:	b29b      	uxth	r3, r3
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	b29a      	uxth	r2, r3
 8010c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c7e:	801a      	strh	r2, [r3, #0]
 8010c80:	e02a      	b.n	8010cd8 <USB_EPStartXfer+0x6a6>
 8010c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	785b      	ldrb	r3, [r3, #1]
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d122      	bne.n	8010cd8 <USB_EPStartXfer+0x6a6>
 8010c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8010c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	461a      	mov	r2, r3
 8010cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cb2:	4413      	add	r3, r2
 8010cb4:	653b      	str	r3, [r7, #80]	; 0x50
 8010cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	781b      	ldrb	r3, [r3, #0]
 8010cc2:	00da      	lsls	r2, r3, #3
 8010cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cc6:	4413      	add	r3, r2
 8010cc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cd2:	b29a      	uxth	r2, r3
 8010cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cd6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	891b      	ldrh	r3, [r3, #8]
 8010ce4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	6959      	ldr	r1, [r3, #20]
 8010cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010cfe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010d02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010d06:	6800      	ldr	r0, [r0, #0]
 8010d08:	f001 f97e 	bl	8012008 <USB_WritePMA>
            ep->xfer_buff += len;
 8010d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	695a      	ldr	r2, [r3, #20]
 8010d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d1c:	441a      	add	r2, r3
 8010d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	6a1a      	ldr	r2, [r3, #32]
 8010d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	691b      	ldr	r3, [r3, #16]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d90f      	bls.n	8010d66 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	6a1a      	ldr	r2, [r3, #32]
 8010d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d56:	1ad2      	subs	r2, r2, r3
 8010d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	621a      	str	r2, [r3, #32]
 8010d64:	e00e      	b.n	8010d84 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	6a1b      	ldr	r3, [r3, #32]
 8010d72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2200      	movs	r2, #0
 8010d82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8010d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	785b      	ldrb	r3, [r3, #1]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d177      	bne.n	8010e90 <USB_EPStartXfer+0x85e>
 8010da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010da4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8010dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc0:	4413      	add	r3, r2
 8010dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8010dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	00da      	lsls	r2, r3, #3
 8010dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd4:	4413      	add	r3, r2
 8010dd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010dda:	637b      	str	r3, [r7, #52]	; 0x34
 8010ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dde:	881b      	ldrh	r3, [r3, #0]
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dea:	801a      	strh	r2, [r3, #0]
 8010dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010df0:	2b3e      	cmp	r3, #62	; 0x3e
 8010df2:	d921      	bls.n	8010e38 <USB_EPStartXfer+0x806>
 8010df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010df8:	095b      	lsrs	r3, r3, #5
 8010dfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e02:	f003 031f 	and.w	r3, r3, #31
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d104      	bne.n	8010e14 <USB_EPStartXfer+0x7e2>
 8010e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e16:	881b      	ldrh	r3, [r3, #0]
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	029b      	lsls	r3, r3, #10
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	4313      	orrs	r3, r2
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e34:	801a      	strh	r2, [r3, #0]
 8010e36:	e050      	b.n	8010eda <USB_EPStartXfer+0x8a8>
 8010e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d10a      	bne.n	8010e56 <USB_EPStartXfer+0x824>
 8010e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e42:	881b      	ldrh	r3, [r3, #0]
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e4e:	b29a      	uxth	r2, r3
 8010e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e52:	801a      	strh	r2, [r3, #0]
 8010e54:	e041      	b.n	8010eda <USB_EPStartXfer+0x8a8>
 8010e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e5a:	085b      	lsrs	r3, r3, #1
 8010e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e64:	f003 0301 	and.w	r3, r3, #1
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d004      	beq.n	8010e76 <USB_EPStartXfer+0x844>
 8010e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e70:	3301      	adds	r3, #1
 8010e72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e78:	881b      	ldrh	r3, [r3, #0]
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	029b      	lsls	r3, r3, #10
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	4313      	orrs	r3, r2
 8010e88:	b29a      	uxth	r2, r3
 8010e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e8c:	801a      	strh	r2, [r3, #0]
 8010e8e:	e024      	b.n	8010eda <USB_EPStartXfer+0x8a8>
 8010e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	785b      	ldrb	r3, [r3, #1]
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d11c      	bne.n	8010eda <USB_EPStartXfer+0x8a8>
 8010ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010eb4:	4413      	add	r3, r2
 8010eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8010eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	00da      	lsls	r2, r3, #3
 8010ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ec8:	4413      	add	r3, r2
 8010eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ed4:	b29a      	uxth	r2, r3
 8010ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ed8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	895b      	ldrh	r3, [r3, #10]
 8010ee6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	6959      	ldr	r1, [r3, #20]
 8010ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010f00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010f04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010f08:	6800      	ldr	r0, [r0, #0]
 8010f0a:	f001 f87d 	bl	8012008 <USB_WritePMA>
 8010f0e:	e227      	b.n	8011360 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	6a1b      	ldr	r3, [r3, #32]
 8010f1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	4413      	add	r3, r2
 8010f3a:	881b      	ldrh	r3, [r3, #0]
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f46:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	009b      	lsls	r3, r3, #2
 8010f62:	441a      	add	r2, r3
 8010f64:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	461a      	mov	r2, r3
 8010f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f9c:	4413      	add	r3, r2
 8010f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	00da      	lsls	r2, r3, #3
 8010fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fb0:	4413      	add	r3, r2
 8010fb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010fb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8010fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	891b      	ldrh	r3, [r3, #8]
 8010fce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	6959      	ldr	r1, [r3, #20]
 8010fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010fe8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010fec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010ff0:	6800      	ldr	r0, [r0, #0]
 8010ff2:	f001 f809 	bl	8012008 <USB_WritePMA>
 8010ff6:	e1b3      	b.n	8011360 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	6a1a      	ldr	r2, [r3, #32]
 8011004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011008:	1ad2      	subs	r2, r2, r3
 801100a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801100e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801101a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	009b      	lsls	r3, r3, #2
 801102e:	4413      	add	r3, r2
 8011030:	881b      	ldrh	r3, [r3, #0]
 8011032:	b29b      	uxth	r3, r3
 8011034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011038:	2b00      	cmp	r3, #0
 801103a:	f000 80c6 	beq.w	80111ca <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801103e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	673b      	str	r3, [r7, #112]	; 0x70
 801104a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801104e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	785b      	ldrb	r3, [r3, #1]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d177      	bne.n	801114a <USB_EPStartXfer+0xb18>
 801105a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801105e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	66bb      	str	r3, [r7, #104]	; 0x68
 8011066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801106a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011074:	b29b      	uxth	r3, r3
 8011076:	461a      	mov	r2, r3
 8011078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801107a:	4413      	add	r3, r2
 801107c:	66bb      	str	r3, [r7, #104]	; 0x68
 801107e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	00da      	lsls	r2, r3, #3
 801108c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801108e:	4413      	add	r3, r2
 8011090:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011094:	667b      	str	r3, [r7, #100]	; 0x64
 8011096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011098:	881b      	ldrh	r3, [r3, #0]
 801109a:	b29b      	uxth	r3, r3
 801109c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110a4:	801a      	strh	r2, [r3, #0]
 80110a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110aa:	2b3e      	cmp	r3, #62	; 0x3e
 80110ac:	d921      	bls.n	80110f2 <USB_EPStartXfer+0xac0>
 80110ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110b2:	095b      	lsrs	r3, r3, #5
 80110b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80110b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110bc:	f003 031f 	and.w	r3, r3, #31
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d104      	bne.n	80110ce <USB_EPStartXfer+0xa9c>
 80110c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80110c8:	3b01      	subs	r3, #1
 80110ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80110ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110d0:	881b      	ldrh	r3, [r3, #0]
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80110d8:	b29b      	uxth	r3, r3
 80110da:	029b      	lsls	r3, r3, #10
 80110dc:	b29b      	uxth	r3, r3
 80110de:	4313      	orrs	r3, r2
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110ee:	801a      	strh	r2, [r3, #0]
 80110f0:	e050      	b.n	8011194 <USB_EPStartXfer+0xb62>
 80110f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d10a      	bne.n	8011110 <USB_EPStartXfer+0xade>
 80110fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110fc:	881b      	ldrh	r3, [r3, #0]
 80110fe:	b29b      	uxth	r3, r3
 8011100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011108:	b29a      	uxth	r2, r3
 801110a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801110c:	801a      	strh	r2, [r3, #0]
 801110e:	e041      	b.n	8011194 <USB_EPStartXfer+0xb62>
 8011110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011114:	085b      	lsrs	r3, r3, #1
 8011116:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801111a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801111e:	f003 0301 	and.w	r3, r3, #1
 8011122:	2b00      	cmp	r3, #0
 8011124:	d004      	beq.n	8011130 <USB_EPStartXfer+0xafe>
 8011126:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801112a:	3301      	adds	r3, #1
 801112c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011132:	881b      	ldrh	r3, [r3, #0]
 8011134:	b29a      	uxth	r2, r3
 8011136:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801113a:	b29b      	uxth	r3, r3
 801113c:	029b      	lsls	r3, r3, #10
 801113e:	b29b      	uxth	r3, r3
 8011140:	4313      	orrs	r3, r2
 8011142:	b29a      	uxth	r2, r3
 8011144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011146:	801a      	strh	r2, [r3, #0]
 8011148:	e024      	b.n	8011194 <USB_EPStartXfer+0xb62>
 801114a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801114e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	785b      	ldrb	r3, [r3, #1]
 8011156:	2b01      	cmp	r3, #1
 8011158:	d11c      	bne.n	8011194 <USB_EPStartXfer+0xb62>
 801115a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801115e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011168:	b29b      	uxth	r3, r3
 801116a:	461a      	mov	r2, r3
 801116c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801116e:	4413      	add	r3, r2
 8011170:	673b      	str	r3, [r7, #112]	; 0x70
 8011172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	00da      	lsls	r2, r3, #3
 8011180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011182:	4413      	add	r3, r2
 8011184:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011188:	66fb      	str	r3, [r7, #108]	; 0x6c
 801118a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801118e:	b29a      	uxth	r2, r3
 8011190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011192:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	895b      	ldrh	r3, [r3, #10]
 80111a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80111a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	6959      	ldr	r1, [r3, #20]
 80111b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80111ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80111be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80111c2:	6800      	ldr	r0, [r0, #0]
 80111c4:	f000 ff20 	bl	8012008 <USB_WritePMA>
 80111c8:	e0ca      	b.n	8011360 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80111ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	785b      	ldrb	r3, [r3, #1]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d177      	bne.n	80112ca <USB_EPStartXfer+0xc98>
 80111da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80111e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	461a      	mov	r2, r3
 80111f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80111fa:	4413      	add	r3, r2
 80111fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80111fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	00da      	lsls	r2, r3, #3
 801120c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801120e:	4413      	add	r3, r2
 8011210:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011214:	67bb      	str	r3, [r7, #120]	; 0x78
 8011216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011218:	881b      	ldrh	r3, [r3, #0]
 801121a:	b29b      	uxth	r3, r3
 801121c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011220:	b29a      	uxth	r2, r3
 8011222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011224:	801a      	strh	r2, [r3, #0]
 8011226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801122a:	2b3e      	cmp	r3, #62	; 0x3e
 801122c:	d921      	bls.n	8011272 <USB_EPStartXfer+0xc40>
 801122e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011232:	095b      	lsrs	r3, r3, #5
 8011234:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801123c:	f003 031f 	and.w	r3, r3, #31
 8011240:	2b00      	cmp	r3, #0
 8011242:	d104      	bne.n	801124e <USB_EPStartXfer+0xc1c>
 8011244:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011248:	3b01      	subs	r3, #1
 801124a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801124e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011250:	881b      	ldrh	r3, [r3, #0]
 8011252:	b29a      	uxth	r2, r3
 8011254:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011258:	b29b      	uxth	r3, r3
 801125a:	029b      	lsls	r3, r3, #10
 801125c:	b29b      	uxth	r3, r3
 801125e:	4313      	orrs	r3, r2
 8011260:	b29b      	uxth	r3, r3
 8011262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801126a:	b29a      	uxth	r2, r3
 801126c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801126e:	801a      	strh	r2, [r3, #0]
 8011270:	e05c      	b.n	801132c <USB_EPStartXfer+0xcfa>
 8011272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011276:	2b00      	cmp	r3, #0
 8011278:	d10a      	bne.n	8011290 <USB_EPStartXfer+0xc5e>
 801127a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801127c:	881b      	ldrh	r3, [r3, #0]
 801127e:	b29b      	uxth	r3, r3
 8011280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011288:	b29a      	uxth	r2, r3
 801128a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801128c:	801a      	strh	r2, [r3, #0]
 801128e:	e04d      	b.n	801132c <USB_EPStartXfer+0xcfa>
 8011290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011294:	085b      	lsrs	r3, r3, #1
 8011296:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801129a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801129e:	f003 0301 	and.w	r3, r3, #1
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d004      	beq.n	80112b0 <USB_EPStartXfer+0xc7e>
 80112a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80112aa:	3301      	adds	r3, #1
 80112ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80112b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112b2:	881b      	ldrh	r3, [r3, #0]
 80112b4:	b29a      	uxth	r2, r3
 80112b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	029b      	lsls	r3, r3, #10
 80112be:	b29b      	uxth	r3, r3
 80112c0:	4313      	orrs	r3, r2
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112c6:	801a      	strh	r2, [r3, #0]
 80112c8:	e030      	b.n	801132c <USB_EPStartXfer+0xcfa>
 80112ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	785b      	ldrb	r3, [r3, #1]
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d128      	bne.n	801132c <USB_EPStartXfer+0xcfa>
 80112da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80112e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	461a      	mov	r2, r3
 80112fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80112fe:	4413      	add	r3, r2
 8011300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	00da      	lsls	r2, r3, #3
 8011312:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011316:	4413      	add	r3, r2
 8011318:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801131c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011324:	b29a      	uxth	r2, r3
 8011326:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801132a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801132c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	891b      	ldrh	r3, [r3, #8]
 8011338:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801133c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	6959      	ldr	r1, [r3, #20]
 8011348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801134c:	b29b      	uxth	r3, r3
 801134e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011352:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011356:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801135a:	6800      	ldr	r0, [r0, #0]
 801135c:	f000 fe54 	bl	8012008 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801136e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	4413      	add	r3, r2
 801137a:	881b      	ldrh	r3, [r3, #0]
 801137c:	b29b      	uxth	r3, r3
 801137e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011386:	817b      	strh	r3, [r7, #10]
 8011388:	897b      	ldrh	r3, [r7, #10]
 801138a:	f083 0310 	eor.w	r3, r3, #16
 801138e:	817b      	strh	r3, [r7, #10]
 8011390:	897b      	ldrh	r3, [r7, #10]
 8011392:	f083 0320 	eor.w	r3, r3, #32
 8011396:	817b      	strh	r3, [r7, #10]
 8011398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801139c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	441a      	add	r2, r3
 80113b2:	897b      	ldrh	r3, [r7, #10]
 80113b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	8013      	strh	r3, [r2, #0]
 80113c8:	f000 bcde 	b.w	8011d88 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80113cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	7b1b      	ldrb	r3, [r3, #12]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	f040 80bb 	bne.w	8011554 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80113de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	699a      	ldr	r2, [r3, #24]
 80113ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d917      	bls.n	801142a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80113fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	691b      	ldr	r3, [r3, #16]
 8011406:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 801140a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801140e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	699a      	ldr	r2, [r3, #24]
 8011416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801141a:	1ad2      	subs	r2, r2, r3
 801141c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	619a      	str	r2, [r3, #24]
 8011428:	e00e      	b.n	8011448 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 801142a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801142e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	699b      	ldr	r3, [r3, #24]
 8011436:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801143a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801143e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2200      	movs	r2, #0
 8011446:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801144c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801145a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011464:	b29b      	uxth	r3, r3
 8011466:	461a      	mov	r2, r3
 8011468:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801146c:	4413      	add	r3, r2
 801146e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	00da      	lsls	r2, r3, #3
 8011480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011484:	4413      	add	r3, r2
 8011486:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801148a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801148e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011492:	881b      	ldrh	r3, [r3, #0]
 8011494:	b29b      	uxth	r3, r3
 8011496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801149a:	b29a      	uxth	r2, r3
 801149c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80114a0:	801a      	strh	r2, [r3, #0]
 80114a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114a6:	2b3e      	cmp	r3, #62	; 0x3e
 80114a8:	d924      	bls.n	80114f4 <USB_EPStartXfer+0xec2>
 80114aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114ae:	095b      	lsrs	r3, r3, #5
 80114b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80114b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114b8:	f003 031f 	and.w	r3, r3, #31
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d104      	bne.n	80114ca <USB_EPStartXfer+0xe98>
 80114c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80114c4:	3b01      	subs	r3, #1
 80114c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80114ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80114ce:	881b      	ldrh	r3, [r3, #0]
 80114d0:	b29a      	uxth	r2, r3
 80114d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	029b      	lsls	r3, r3, #10
 80114da:	b29b      	uxth	r3, r3
 80114dc:	4313      	orrs	r3, r2
 80114de:	b29b      	uxth	r3, r3
 80114e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114e8:	b29a      	uxth	r2, r3
 80114ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80114ee:	801a      	strh	r2, [r3, #0]
 80114f0:	f000 bc10 	b.w	8011d14 <USB_EPStartXfer+0x16e2>
 80114f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d10c      	bne.n	8011516 <USB_EPStartXfer+0xee4>
 80114fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011500:	881b      	ldrh	r3, [r3, #0]
 8011502:	b29b      	uxth	r3, r3
 8011504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801150c:	b29a      	uxth	r2, r3
 801150e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011512:	801a      	strh	r2, [r3, #0]
 8011514:	e3fe      	b.n	8011d14 <USB_EPStartXfer+0x16e2>
 8011516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801151a:	085b      	lsrs	r3, r3, #1
 801151c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011524:	f003 0301 	and.w	r3, r3, #1
 8011528:	2b00      	cmp	r3, #0
 801152a:	d004      	beq.n	8011536 <USB_EPStartXfer+0xf04>
 801152c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011530:	3301      	adds	r3, #1
 8011532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801153a:	881b      	ldrh	r3, [r3, #0]
 801153c:	b29a      	uxth	r2, r3
 801153e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011542:	b29b      	uxth	r3, r3
 8011544:	029b      	lsls	r3, r3, #10
 8011546:	b29b      	uxth	r3, r3
 8011548:	4313      	orrs	r3, r2
 801154a:	b29a      	uxth	r2, r3
 801154c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011550:	801a      	strh	r2, [r3, #0]
 8011552:	e3df      	b.n	8011d14 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	78db      	ldrb	r3, [r3, #3]
 8011560:	2b02      	cmp	r3, #2
 8011562:	f040 8218 	bne.w	8011996 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801156a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	785b      	ldrb	r3, [r3, #1]
 8011572:	2b00      	cmp	r3, #0
 8011574:	f040 809d 	bne.w	80116b2 <USB_EPStartXfer+0x1080>
 8011578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801157c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801158a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011594:	b29b      	uxth	r3, r3
 8011596:	461a      	mov	r2, r3
 8011598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801159c:	4413      	add	r3, r2
 801159e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80115a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	00da      	lsls	r2, r3, #3
 80115b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80115b4:	4413      	add	r3, r2
 80115b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80115ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80115be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115c2:	881b      	ldrh	r3, [r3, #0]
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80115d0:	801a      	strh	r2, [r3, #0]
 80115d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	691b      	ldr	r3, [r3, #16]
 80115de:	2b3e      	cmp	r3, #62	; 0x3e
 80115e0:	d92b      	bls.n	801163a <USB_EPStartXfer+0x1008>
 80115e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	691b      	ldr	r3, [r3, #16]
 80115ee:	095b      	lsrs	r3, r3, #5
 80115f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80115f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	691b      	ldr	r3, [r3, #16]
 8011600:	f003 031f 	and.w	r3, r3, #31
 8011604:	2b00      	cmp	r3, #0
 8011606:	d104      	bne.n	8011612 <USB_EPStartXfer+0xfe0>
 8011608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801160c:	3b01      	subs	r3, #1
 801160e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011612:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011616:	881b      	ldrh	r3, [r3, #0]
 8011618:	b29a      	uxth	r2, r3
 801161a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801161e:	b29b      	uxth	r3, r3
 8011620:	029b      	lsls	r3, r3, #10
 8011622:	b29b      	uxth	r3, r3
 8011624:	4313      	orrs	r3, r2
 8011626:	b29b      	uxth	r3, r3
 8011628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801162c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011630:	b29a      	uxth	r2, r3
 8011632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011636:	801a      	strh	r2, [r3, #0]
 8011638:	e070      	b.n	801171c <USB_EPStartXfer+0x10ea>
 801163a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801163e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	691b      	ldr	r3, [r3, #16]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d10c      	bne.n	8011664 <USB_EPStartXfer+0x1032>
 801164a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801164e:	881b      	ldrh	r3, [r3, #0]
 8011650:	b29b      	uxth	r3, r3
 8011652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801165a:	b29a      	uxth	r2, r3
 801165c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011660:	801a      	strh	r2, [r3, #0]
 8011662:	e05b      	b.n	801171c <USB_EPStartXfer+0x10ea>
 8011664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	691b      	ldr	r3, [r3, #16]
 8011670:	085b      	lsrs	r3, r3, #1
 8011672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801167a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	691b      	ldr	r3, [r3, #16]
 8011682:	f003 0301 	and.w	r3, r3, #1
 8011686:	2b00      	cmp	r3, #0
 8011688:	d004      	beq.n	8011694 <USB_EPStartXfer+0x1062>
 801168a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801168e:	3301      	adds	r3, #1
 8011690:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	b29a      	uxth	r2, r3
 801169c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	029b      	lsls	r3, r3, #10
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	4313      	orrs	r3, r2
 80116a8:	b29a      	uxth	r2, r3
 80116aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80116ae:	801a      	strh	r2, [r3, #0]
 80116b0:	e034      	b.n	801171c <USB_EPStartXfer+0x10ea>
 80116b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	785b      	ldrb	r3, [r3, #1]
 80116be:	2b01      	cmp	r3, #1
 80116c0:	d12c      	bne.n	801171c <USB_EPStartXfer+0x10ea>
 80116c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80116d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80116de:	b29b      	uxth	r3, r3
 80116e0:	461a      	mov	r2, r3
 80116e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80116e6:	4413      	add	r3, r2
 80116e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80116ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	00da      	lsls	r2, r3, #3
 80116fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80116fe:	4413      	add	r3, r2
 8011700:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801170c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	691b      	ldr	r3, [r3, #16]
 8011714:	b29a      	uxth	r2, r3
 8011716:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801171a:	801a      	strh	r2, [r3, #0]
 801171c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801172a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801172e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	785b      	ldrb	r3, [r3, #1]
 8011736:	2b00      	cmp	r3, #0
 8011738:	f040 809d 	bne.w	8011876 <USB_EPStartXfer+0x1244>
 801173c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801174a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801174e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011758:	b29b      	uxth	r3, r3
 801175a:	461a      	mov	r2, r3
 801175c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011760:	4413      	add	r3, r2
 8011762:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801176a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	00da      	lsls	r2, r3, #3
 8011774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011778:	4413      	add	r3, r2
 801177a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801177e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011786:	881b      	ldrh	r3, [r3, #0]
 8011788:	b29b      	uxth	r3, r3
 801178a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801178e:	b29a      	uxth	r2, r3
 8011790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011794:	801a      	strh	r2, [r3, #0]
 8011796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801179a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	691b      	ldr	r3, [r3, #16]
 80117a2:	2b3e      	cmp	r3, #62	; 0x3e
 80117a4:	d92b      	bls.n	80117fe <USB_EPStartXfer+0x11cc>
 80117a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	095b      	lsrs	r3, r3, #5
 80117b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80117b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	f003 031f 	and.w	r3, r3, #31
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d104      	bne.n	80117d6 <USB_EPStartXfer+0x11a4>
 80117cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117d0:	3b01      	subs	r3, #1
 80117d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80117d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117da:	881b      	ldrh	r3, [r3, #0]
 80117dc:	b29a      	uxth	r2, r3
 80117de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	029b      	lsls	r3, r3, #10
 80117e6:	b29b      	uxth	r3, r3
 80117e8:	4313      	orrs	r3, r2
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117fa:	801a      	strh	r2, [r3, #0]
 80117fc:	e069      	b.n	80118d2 <USB_EPStartXfer+0x12a0>
 80117fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	691b      	ldr	r3, [r3, #16]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d10c      	bne.n	8011828 <USB_EPStartXfer+0x11f6>
 801180e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011812:	881b      	ldrh	r3, [r3, #0]
 8011814:	b29b      	uxth	r3, r3
 8011816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801181a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801181e:	b29a      	uxth	r2, r3
 8011820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011824:	801a      	strh	r2, [r3, #0]
 8011826:	e054      	b.n	80118d2 <USB_EPStartXfer+0x12a0>
 8011828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801182c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	691b      	ldr	r3, [r3, #16]
 8011834:	085b      	lsrs	r3, r3, #1
 8011836:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801183a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801183e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	691b      	ldr	r3, [r3, #16]
 8011846:	f003 0301 	and.w	r3, r3, #1
 801184a:	2b00      	cmp	r3, #0
 801184c:	d004      	beq.n	8011858 <USB_EPStartXfer+0x1226>
 801184e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011852:	3301      	adds	r3, #1
 8011854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801185c:	881b      	ldrh	r3, [r3, #0]
 801185e:	b29a      	uxth	r2, r3
 8011860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011864:	b29b      	uxth	r3, r3
 8011866:	029b      	lsls	r3, r3, #10
 8011868:	b29b      	uxth	r3, r3
 801186a:	4313      	orrs	r3, r2
 801186c:	b29a      	uxth	r2, r3
 801186e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011872:	801a      	strh	r2, [r3, #0]
 8011874:	e02d      	b.n	80118d2 <USB_EPStartXfer+0x12a0>
 8011876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801187a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	785b      	ldrb	r3, [r3, #1]
 8011882:	2b01      	cmp	r3, #1
 8011884:	d125      	bne.n	80118d2 <USB_EPStartXfer+0x12a0>
 8011886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801188a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011894:	b29b      	uxth	r3, r3
 8011896:	461a      	mov	r2, r3
 8011898:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801189c:	4413      	add	r3, r2
 801189e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80118a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	00da      	lsls	r2, r3, #3
 80118b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80118b4:	4413      	add	r3, r2
 80118b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80118ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80118be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	691b      	ldr	r3, [r3, #16]
 80118ca:	b29a      	uxth	r2, r3
 80118cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80118d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80118d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	69db      	ldr	r3, [r3, #28]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f000 8218 	beq.w	8011d14 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80118e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	4413      	add	r3, r2
 80118fe:	881b      	ldrh	r3, [r3, #0]
 8011900:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011904:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801190c:	2b00      	cmp	r3, #0
 801190e:	d005      	beq.n	801191c <USB_EPStartXfer+0x12ea>
 8011910:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10d      	bne.n	8011938 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801191c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011924:	2b00      	cmp	r3, #0
 8011926:	f040 81f5 	bne.w	8011d14 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801192a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801192e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011932:	2b00      	cmp	r3, #0
 8011934:	f040 81ee 	bne.w	8011d14 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801193c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	4413      	add	r3, r2
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	b29b      	uxth	r3, r3
 8011956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801195a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801195e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801196a:	681a      	ldr	r2, [r3, #0]
 801196c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	441a      	add	r2, r3
 801197c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801198c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011990:	b29b      	uxth	r3, r3
 8011992:	8013      	strh	r3, [r2, #0]
 8011994:	e1be      	b.n	8011d14 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801199a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	78db      	ldrb	r3, [r3, #3]
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	f040 81b4 	bne.w	8011d10 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80119a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	699a      	ldr	r2, [r3, #24]
 80119b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d917      	bls.n	80119f4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80119c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	691b      	ldr	r3, [r3, #16]
 80119d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80119d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	699a      	ldr	r2, [r3, #24]
 80119e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119e4:	1ad2      	subs	r2, r2, r3
 80119e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	619a      	str	r2, [r3, #24]
 80119f2:	e00e      	b.n	8011a12 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80119f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	699b      	ldr	r3, [r3, #24]
 8011a00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	785b      	ldrb	r3, [r3, #1]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f040 8085 	bne.w	8011b2e <USB_EPStartXfer+0x14fc>
 8011a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	461a      	mov	r2, r3
 8011a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011a48:	4413      	add	r3, r2
 8011a4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	00da      	lsls	r2, r3, #3
 8011a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011a60:	4413      	add	r3, r2
 8011a62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011a66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a6e:	881b      	ldrh	r3, [r3, #0]
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a7c:	801a      	strh	r2, [r3, #0]
 8011a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a82:	2b3e      	cmp	r3, #62	; 0x3e
 8011a84:	d923      	bls.n	8011ace <USB_EPStartXfer+0x149c>
 8011a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a8a:	095b      	lsrs	r3, r3, #5
 8011a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a94:	f003 031f 	and.w	r3, r3, #31
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d104      	bne.n	8011aa6 <USB_EPStartXfer+0x1474>
 8011a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011aa0:	3b01      	subs	r3, #1
 8011aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011aaa:	881b      	ldrh	r3, [r3, #0]
 8011aac:	b29a      	uxth	r2, r3
 8011aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	029b      	lsls	r3, r3, #10
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	4313      	orrs	r3, r2
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ac4:	b29a      	uxth	r2, r3
 8011ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011aca:	801a      	strh	r2, [r3, #0]
 8011acc:	e060      	b.n	8011b90 <USB_EPStartXfer+0x155e>
 8011ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d10c      	bne.n	8011af0 <USB_EPStartXfer+0x14be>
 8011ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011ada:	881b      	ldrh	r3, [r3, #0]
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ae6:	b29a      	uxth	r2, r3
 8011ae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011aec:	801a      	strh	r2, [r3, #0]
 8011aee:	e04f      	b.n	8011b90 <USB_EPStartXfer+0x155e>
 8011af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011af4:	085b      	lsrs	r3, r3, #1
 8011af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011afe:	f003 0301 	and.w	r3, r3, #1
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d004      	beq.n	8011b10 <USB_EPStartXfer+0x14de>
 8011b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b14:	881b      	ldrh	r3, [r3, #0]
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	029b      	lsls	r3, r3, #10
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	4313      	orrs	r3, r2
 8011b24:	b29a      	uxth	r2, r3
 8011b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b2a:	801a      	strh	r2, [r3, #0]
 8011b2c:	e030      	b.n	8011b90 <USB_EPStartXfer+0x155e>
 8011b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	785b      	ldrb	r3, [r3, #1]
 8011b3a:	2b01      	cmp	r3, #1
 8011b3c:	d128      	bne.n	8011b90 <USB_EPStartXfer+0x155e>
 8011b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011b62:	4413      	add	r3, r2
 8011b64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	00da      	lsls	r2, r3, #3
 8011b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011b7a:	4413      	add	r3, r2
 8011b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011b8e:	801a      	strh	r2, [r3, #0]
 8011b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	785b      	ldrb	r3, [r3, #1]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	f040 8085 	bne.w	8011cba <USB_EPStartXfer+0x1688>
 8011bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	461a      	mov	r2, r3
 8011bd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011bd4:	4413      	add	r3, r2
 8011bd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	00da      	lsls	r2, r3, #3
 8011be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011bec:	4413      	add	r3, r2
 8011bee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011bf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011bfa:	881b      	ldrh	r3, [r3, #0]
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c08:	801a      	strh	r2, [r3, #0]
 8011c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8011c10:	d923      	bls.n	8011c5a <USB_EPStartXfer+0x1628>
 8011c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c16:	095b      	lsrs	r3, r3, #5
 8011c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c20:	f003 031f 	and.w	r3, r3, #31
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d104      	bne.n	8011c32 <USB_EPStartXfer+0x1600>
 8011c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011c2c:	3b01      	subs	r3, #1
 8011c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011c32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	b29a      	uxth	r2, r3
 8011c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	029b      	lsls	r3, r3, #10
 8011c42:	b29b      	uxth	r3, r3
 8011c44:	4313      	orrs	r3, r2
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c50:	b29a      	uxth	r2, r3
 8011c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c56:	801a      	strh	r2, [r3, #0]
 8011c58:	e05c      	b.n	8011d14 <USB_EPStartXfer+0x16e2>
 8011c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d10c      	bne.n	8011c7c <USB_EPStartXfer+0x164a>
 8011c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c66:	881b      	ldrh	r3, [r3, #0]
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c78:	801a      	strh	r2, [r3, #0]
 8011c7a:	e04b      	b.n	8011d14 <USB_EPStartXfer+0x16e2>
 8011c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c80:	085b      	lsrs	r3, r3, #1
 8011c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c8a:	f003 0301 	and.w	r3, r3, #1
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d004      	beq.n	8011c9c <USB_EPStartXfer+0x166a>
 8011c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011c96:	3301      	adds	r3, #1
 8011c98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	029b      	lsls	r3, r3, #10
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	b29a      	uxth	r2, r3
 8011cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011cb6:	801a      	strh	r2, [r3, #0]
 8011cb8:	e02c      	b.n	8011d14 <USB_EPStartXfer+0x16e2>
 8011cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	785b      	ldrb	r3, [r3, #1]
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d124      	bne.n	8011d14 <USB_EPStartXfer+0x16e2>
 8011cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	461a      	mov	r2, r3
 8011cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011ce0:	4413      	add	r3, r2
 8011ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	00da      	lsls	r2, r3, #3
 8011cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011cf8:	4413      	add	r3, r2
 8011cfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011cfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d06:	b29a      	uxth	r2, r3
 8011d08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011d0c:	801a      	strh	r2, [r3, #0]
 8011d0e:	e001      	b.n	8011d14 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011d10:	2301      	movs	r3, #1
 8011d12:	e03a      	b.n	8011d8a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d1c:	681a      	ldr	r2, [r3, #0]
 8011d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	881b      	ldrh	r3, [r3, #0]
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d3a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011d3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011d42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011d46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011d4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011d4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011d52:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	009b      	lsls	r3, r3, #2
 8011d6e:	441a      	add	r2, r3
 8011d70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011d88:	2300      	movs	r3, #0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b085      	sub	sp, #20
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	785b      	ldrb	r3, [r3, #1]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d020      	beq.n	8011de8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011da6:	687a      	ldr	r2, [r7, #4]
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	009b      	lsls	r3, r3, #2
 8011dae:	4413      	add	r3, r2
 8011db0:	881b      	ldrh	r3, [r3, #0]
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011dbc:	81bb      	strh	r3, [r7, #12]
 8011dbe:	89bb      	ldrh	r3, [r7, #12]
 8011dc0:	f083 0310 	eor.w	r3, r3, #16
 8011dc4:	81bb      	strh	r3, [r7, #12]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	009b      	lsls	r3, r3, #2
 8011dce:	441a      	add	r2, r3
 8011dd0:	89bb      	ldrh	r3, [r7, #12]
 8011dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	8013      	strh	r3, [r2, #0]
 8011de6:	e01f      	b.n	8011e28 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	881b      	ldrh	r3, [r3, #0]
 8011df4:	b29b      	uxth	r3, r3
 8011df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011dfe:	81fb      	strh	r3, [r7, #14]
 8011e00:	89fb      	ldrh	r3, [r7, #14]
 8011e02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011e06:	81fb      	strh	r3, [r7, #14]
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	441a      	add	r2, r3
 8011e12:	89fb      	ldrh	r3, [r7, #14]
 8011e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011e28:	2300      	movs	r3, #0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3714      	adds	r7, #20
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr

08011e36 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011e36:	b480      	push	{r7}
 8011e38:	b087      	sub	sp, #28
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
 8011e3e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	7b1b      	ldrb	r3, [r3, #12]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	f040 809d 	bne.w	8011f84 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	785b      	ldrb	r3, [r3, #1]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d04c      	beq.n	8011eec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011e52:	687a      	ldr	r2, [r7, #4]
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	009b      	lsls	r3, r3, #2
 8011e5a:	4413      	add	r3, r2
 8011e5c:	881b      	ldrh	r3, [r3, #0]
 8011e5e:	823b      	strh	r3, [r7, #16]
 8011e60:	8a3b      	ldrh	r3, [r7, #16]
 8011e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d01b      	beq.n	8011ea2 <USB_EPClearStall+0x6c>
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	4413      	add	r3, r2
 8011e74:	881b      	ldrh	r3, [r3, #0]
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e80:	81fb      	strh	r3, [r7, #14]
 8011e82:	687a      	ldr	r2, [r7, #4]
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	441a      	add	r2, r3
 8011e8c:	89fb      	ldrh	r3, [r7, #14]
 8011e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	78db      	ldrb	r3, [r3, #3]
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d06c      	beq.n	8011f84 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	009b      	lsls	r3, r3, #2
 8011eb2:	4413      	add	r3, r2
 8011eb4:	881b      	ldrh	r3, [r3, #0]
 8011eb6:	b29b      	uxth	r3, r3
 8011eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ec0:	81bb      	strh	r3, [r7, #12]
 8011ec2:	89bb      	ldrh	r3, [r7, #12]
 8011ec4:	f083 0320 	eor.w	r3, r3, #32
 8011ec8:	81bb      	strh	r3, [r7, #12]
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	441a      	add	r2, r3
 8011ed4:	89bb      	ldrh	r3, [r7, #12]
 8011ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	8013      	strh	r3, [r2, #0]
 8011eea:	e04b      	b.n	8011f84 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	4413      	add	r3, r2
 8011ef6:	881b      	ldrh	r3, [r3, #0]
 8011ef8:	82fb      	strh	r3, [r7, #22]
 8011efa:	8afb      	ldrh	r3, [r7, #22]
 8011efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d01b      	beq.n	8011f3c <USB_EPClearStall+0x106>
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	009b      	lsls	r3, r3, #2
 8011f0c:	4413      	add	r3, r2
 8011f0e:	881b      	ldrh	r3, [r3, #0]
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f1a:	82bb      	strh	r3, [r7, #20]
 8011f1c:	687a      	ldr	r2, [r7, #4]
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	009b      	lsls	r3, r3, #2
 8011f24:	441a      	add	r2, r3
 8011f26:	8abb      	ldrh	r3, [r7, #20]
 8011f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011f3c:	687a      	ldr	r2, [r7, #4]
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	4413      	add	r3, r2
 8011f46:	881b      	ldrh	r3, [r3, #0]
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f52:	827b      	strh	r3, [r7, #18]
 8011f54:	8a7b      	ldrh	r3, [r7, #18]
 8011f56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011f5a:	827b      	strh	r3, [r7, #18]
 8011f5c:	8a7b      	ldrh	r3, [r7, #18]
 8011f5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011f62:	827b      	strh	r3, [r7, #18]
 8011f64:	687a      	ldr	r2, [r7, #4]
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	441a      	add	r2, r3
 8011f6e:	8a7b      	ldrh	r3, [r7, #18]
 8011f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011f84:	2300      	movs	r3, #0
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	371c      	adds	r7, #28
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f90:	4770      	bx	lr

08011f92 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011f92:	b480      	push	{r7}
 8011f94:	b083      	sub	sp, #12
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
 8011f9a:	460b      	mov	r3, r1
 8011f9c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011f9e:	78fb      	ldrb	r3, [r7, #3]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d103      	bne.n	8011fac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2280      	movs	r2, #128	; 0x80
 8011fa8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8011fac:	2300      	movs	r3, #0
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	370c      	adds	r7, #12
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr

08011fba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011fba:	b480      	push	{r7}
 8011fbc:	b083      	sub	sp, #12
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011fd2:	b29a      	uxth	r2, r3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011fda:	2300      	movs	r3, #0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr

08011fe8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b085      	sub	sp, #20
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011ff6:	b29b      	uxth	r3, r3
 8011ff8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3714      	adds	r7, #20
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012008:	b480      	push	{r7}
 801200a:	b08b      	sub	sp, #44	; 0x2c
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	4611      	mov	r1, r2
 8012014:	461a      	mov	r2, r3
 8012016:	460b      	mov	r3, r1
 8012018:	80fb      	strh	r3, [r7, #6]
 801201a:	4613      	mov	r3, r2
 801201c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801201e:	88bb      	ldrh	r3, [r7, #4]
 8012020:	3301      	adds	r3, #1
 8012022:	085b      	lsrs	r3, r3, #1
 8012024:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801202e:	88fa      	ldrh	r2, [r7, #6]
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	4413      	add	r3, r2
 8012034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012038:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	627b      	str	r3, [r7, #36]	; 0x24
 801203e:	e01b      	b.n	8012078 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012040:	69fb      	ldr	r3, [r7, #28]
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	3301      	adds	r3, #1
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	021b      	lsls	r3, r3, #8
 801204e:	b21a      	sxth	r2, r3
 8012050:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012054:	4313      	orrs	r3, r2
 8012056:	b21b      	sxth	r3, r3
 8012058:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801205a:	6a3b      	ldr	r3, [r7, #32]
 801205c:	8a7a      	ldrh	r2, [r7, #18]
 801205e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012060:	6a3b      	ldr	r3, [r7, #32]
 8012062:	3302      	adds	r3, #2
 8012064:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	3301      	adds	r3, #1
 801206a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	3301      	adds	r3, #1
 8012070:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012074:	3b01      	subs	r3, #1
 8012076:	627b      	str	r3, [r7, #36]	; 0x24
 8012078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207a:	2b00      	cmp	r3, #0
 801207c:	d1e0      	bne.n	8012040 <USB_WritePMA+0x38>
  }
}
 801207e:	bf00      	nop
 8012080:	bf00      	nop
 8012082:	372c      	adds	r7, #44	; 0x2c
 8012084:	46bd      	mov	sp, r7
 8012086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208a:	4770      	bx	lr

0801208c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801208c:	b480      	push	{r7}
 801208e:	b08b      	sub	sp, #44	; 0x2c
 8012090:	af00      	add	r7, sp, #0
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	60b9      	str	r1, [r7, #8]
 8012096:	4611      	mov	r1, r2
 8012098:	461a      	mov	r2, r3
 801209a:	460b      	mov	r3, r1
 801209c:	80fb      	strh	r3, [r7, #6]
 801209e:	4613      	mov	r3, r2
 80120a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80120a2:	88bb      	ldrh	r3, [r7, #4]
 80120a4:	085b      	lsrs	r3, r3, #1
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80120ae:	68bb      	ldr	r3, [r7, #8]
 80120b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80120b2:	88fa      	ldrh	r2, [r7, #6]
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	4413      	add	r3, r2
 80120b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	627b      	str	r3, [r7, #36]	; 0x24
 80120c2:	e018      	b.n	80120f6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80120c4:	6a3b      	ldr	r3, [r7, #32]
 80120c6:	881b      	ldrh	r3, [r3, #0]
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80120cc:	6a3b      	ldr	r3, [r7, #32]
 80120ce:	3302      	adds	r3, #2
 80120d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	3301      	adds	r3, #1
 80120de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	0a1b      	lsrs	r3, r3, #8
 80120e4:	b2da      	uxtb	r2, r3
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80120ea:	69fb      	ldr	r3, [r7, #28]
 80120ec:	3301      	adds	r3, #1
 80120ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80120f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f2:	3b01      	subs	r3, #1
 80120f4:	627b      	str	r3, [r7, #36]	; 0x24
 80120f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1e3      	bne.n	80120c4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80120fc:	88bb      	ldrh	r3, [r7, #4]
 80120fe:	f003 0301 	and.w	r3, r3, #1
 8012102:	b29b      	uxth	r3, r3
 8012104:	2b00      	cmp	r3, #0
 8012106:	d007      	beq.n	8012118 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012108:	6a3b      	ldr	r3, [r7, #32]
 801210a:	881b      	ldrh	r3, [r3, #0]
 801210c:	b29b      	uxth	r3, r3
 801210e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	b2da      	uxtb	r2, r3
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	701a      	strb	r2, [r3, #0]
  }
}
 8012118:	bf00      	nop
 801211a:	372c      	adds	r7, #44	; 0x2c
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b088      	sub	sp, #32
 8012128:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801212a:	2300      	movs	r3, #0
 801212c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801212e:	f107 0308 	add.w	r3, r7, #8
 8012132:	2218      	movs	r2, #24
 8012134:	2100      	movs	r1, #0
 8012136:	4618      	mov	r0, r3
 8012138:	f001 fbe6 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 801213c:	233f      	movs	r3, #63	; 0x3f
 801213e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8012140:	2381      	movs	r3, #129	; 0x81
 8012142:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8012144:	1dfb      	adds	r3, r7, #7
 8012146:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8012148:	2301      	movs	r3, #1
 801214a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801214c:	f107 0308 	add.w	r3, r7, #8
 8012150:	2100      	movs	r1, #0
 8012152:	4618      	mov	r0, r3
 8012154:	f001 fa96 	bl	8013684 <hci_send_req>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	da01      	bge.n	8012162 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 801215e:	23ff      	movs	r3, #255	; 0xff
 8012160:	e000      	b.n	8012164 <aci_gap_set_non_discoverable+0x40>
  return status;
 8012162:	79fb      	ldrb	r3, [r7, #7]
}
 8012164:	4618      	mov	r0, r3
 8012166:	3720      	adds	r7, #32
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 801216c:	b5b0      	push	{r4, r5, r7, lr}
 801216e:	b0ce      	sub	sp, #312	; 0x138
 8012170:	af00      	add	r7, sp, #0
 8012172:	4605      	mov	r5, r0
 8012174:	460c      	mov	r4, r1
 8012176:	4610      	mov	r0, r2
 8012178:	4619      	mov	r1, r3
 801217a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801217e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8012182:	462a      	mov	r2, r5
 8012184:	701a      	strb	r2, [r3, #0]
 8012186:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801218a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801218e:	4622      	mov	r2, r4
 8012190:	801a      	strh	r2, [r3, #0]
 8012192:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012196:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 801219a:	4602      	mov	r2, r0
 801219c:	801a      	strh	r2, [r3, #0]
 801219e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121a2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80121a6:	460a      	mov	r2, r1
 80121a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80121aa:	f107 0310 	add.w	r3, r7, #16
 80121ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80121b2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80121b6:	3308      	adds	r3, #8
 80121b8:	f107 0210 	add.w	r2, r7, #16
 80121bc:	4413      	add	r3, r2
 80121be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80121c2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80121c6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80121ca:	4413      	add	r3, r2
 80121cc:	3309      	adds	r3, #9
 80121ce:	f107 0210 	add.w	r2, r7, #16
 80121d2:	4413      	add	r3, r2
 80121d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80121d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80121dc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80121e0:	2200      	movs	r2, #0
 80121e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80121e4:	2300      	movs	r3, #0
 80121e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80121ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80121ee:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80121f2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80121f6:	7812      	ldrb	r2, [r2, #0]
 80121f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80121fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80121fe:	3301      	adds	r3, #1
 8012200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8012204:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012208:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801220c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8012210:	8812      	ldrh	r2, [r2, #0]
 8012212:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8012216:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801221a:	3302      	adds	r3, #2
 801221c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8012220:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012224:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8012228:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 801222c:	8812      	ldrh	r2, [r2, #0]
 801222e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8012232:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012236:	3302      	adds	r3, #2
 8012238:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 801223c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012240:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8012244:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8012248:	7812      	ldrb	r2, [r2, #0]
 801224a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801224c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012250:	3301      	adds	r3, #1
 8012252:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8012256:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801225a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 801225e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8012260:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012264:	3301      	adds	r3, #1
 8012266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 801226a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801226e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8012272:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8012274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012278:	3301      	adds	r3, #1
 801227a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 801227e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012282:	3308      	adds	r3, #8
 8012284:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8012288:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 801228c:	4618      	mov	r0, r3
 801228e:	f001 fb2b 	bl	80138e8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8012292:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8012296:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801229a:	4413      	add	r3, r2
 801229c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80122a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80122a4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80122a8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80122aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80122ae:	3301      	adds	r3, #1
 80122b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80122b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80122b8:	3301      	adds	r3, #1
 80122ba:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80122be:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80122c2:	4618      	mov	r0, r3
 80122c4:	f001 fb10 	bl	80138e8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80122c8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80122cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80122d0:	4413      	add	r3, r2
 80122d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80122d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80122da:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80122de:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80122e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80122e4:	3302      	adds	r3, #2
 80122e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80122ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80122ee:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80122f2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80122f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80122f8:	3302      	adds	r3, #2
 80122fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80122fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012302:	2218      	movs	r2, #24
 8012304:	2100      	movs	r1, #0
 8012306:	4618      	mov	r0, r3
 8012308:	f001 fafe 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 801230c:	233f      	movs	r3, #63	; 0x3f
 801230e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8012312:	2383      	movs	r3, #131	; 0x83
 8012314:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012318:	f107 0310 	add.w	r3, r7, #16
 801231c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8012320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012324:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8012328:	f107 030f 	add.w	r3, r7, #15
 801232c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8012330:	2301      	movs	r3, #1
 8012332:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012336:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801233a:	2100      	movs	r1, #0
 801233c:	4618      	mov	r0, r3
 801233e:	f001 f9a1 	bl	8013684 <hci_send_req>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	da01      	bge.n	801234c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8012348:	23ff      	movs	r3, #255	; 0xff
 801234a:	e004      	b.n	8012356 <aci_gap_set_discoverable+0x1ea>
  return status;
 801234c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012350:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8012354:	781b      	ldrb	r3, [r3, #0]
}
 8012356:	4618      	mov	r0, r3
 8012358:	f507 779c 	add.w	r7, r7, #312	; 0x138
 801235c:	46bd      	mov	sp, r7
 801235e:	bdb0      	pop	{r4, r5, r7, pc}

08012360 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b0cc      	sub	sp, #304	; 0x130
 8012364:	af00      	add	r7, sp, #0
 8012366:	4602      	mov	r2, r0
 8012368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801236c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8012370:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8012372:	f107 0310 	add.w	r3, r7, #16
 8012376:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801237a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801237e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012382:	2200      	movs	r2, #0
 8012384:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012386:	2300      	movs	r3, #0
 8012388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 801238c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012390:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012394:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8012398:	7812      	ldrb	r2, [r2, #0]
 801239a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801239c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80123a0:	3301      	adds	r3, #1
 80123a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80123a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80123aa:	2218      	movs	r2, #24
 80123ac:	2100      	movs	r1, #0
 80123ae:	4618      	mov	r0, r3
 80123b0:	f001 faaa 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 80123b4:	233f      	movs	r3, #63	; 0x3f
 80123b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80123ba:	2385      	movs	r3, #133	; 0x85
 80123bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80123c0:	f107 0310 	add.w	r3, r7, #16
 80123c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80123c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80123cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80123d0:	f107 030f 	add.w	r3, r7, #15
 80123d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80123d8:	2301      	movs	r3, #1
 80123da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80123de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80123e2:	2100      	movs	r1, #0
 80123e4:	4618      	mov	r0, r3
 80123e6:	f001 f94d 	bl	8013684 <hci_send_req>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	da01      	bge.n	80123f4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80123f0:	23ff      	movs	r3, #255	; 0xff
 80123f2:	e004      	b.n	80123fe <aci_gap_set_io_capability+0x9e>
  return status;
 80123f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80123f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80123fc:	781b      	ldrb	r3, [r3, #0]
}
 80123fe:	4618      	mov	r0, r3
 8012400:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8012408:	b5b0      	push	{r4, r5, r7, lr}
 801240a:	b0cc      	sub	sp, #304	; 0x130
 801240c:	af00      	add	r7, sp, #0
 801240e:	4605      	mov	r5, r0
 8012410:	460c      	mov	r4, r1
 8012412:	4610      	mov	r0, r2
 8012414:	4619      	mov	r1, r3
 8012416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801241a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801241e:	462a      	mov	r2, r5
 8012420:	701a      	strb	r2, [r3, #0]
 8012422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012426:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801242a:	4622      	mov	r2, r4
 801242c:	701a      	strb	r2, [r3, #0]
 801242e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012432:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8012436:	4602      	mov	r2, r0
 8012438:	701a      	strb	r2, [r3, #0]
 801243a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801243e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012442:	460a      	mov	r2, r1
 8012444:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8012446:	f107 0310 	add.w	r3, r7, #16
 801244a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801244e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012452:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012456:	2200      	movs	r2, #0
 8012458:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801245a:	2300      	movs	r3, #0
 801245c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8012460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012464:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012468:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 801246c:	7812      	ldrb	r2, [r2, #0]
 801246e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8012470:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012474:	3301      	adds	r3, #1
 8012476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 801247a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801247e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012482:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8012486:	7812      	ldrb	r2, [r2, #0]
 8012488:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801248a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801248e:	3301      	adds	r3, #1
 8012490:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8012494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012498:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801249c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80124a0:	7812      	ldrb	r2, [r2, #0]
 80124a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80124a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124a8:	3301      	adds	r3, #1
 80124aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80124ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80124b6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80124ba:	7812      	ldrb	r2, [r2, #0]
 80124bc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80124be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124c2:	3301      	adds	r3, #1
 80124c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80124c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124cc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80124d0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80124d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124d6:	3301      	adds	r3, #1
 80124d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80124dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124e0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80124e4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80124e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124ea:	3301      	adds	r3, #1
 80124ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80124f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124f4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80124f8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80124fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124fe:	3301      	adds	r3, #1
 8012500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8012504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012508:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801250c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8012510:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012514:	3304      	adds	r3, #4
 8012516:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 801251a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801251e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8012522:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8012524:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012528:	3301      	adds	r3, #1
 801252a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801252e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012532:	2218      	movs	r2, #24
 8012534:	2100      	movs	r1, #0
 8012536:	4618      	mov	r0, r3
 8012538:	f001 f9e6 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 801253c:	233f      	movs	r3, #63	; 0x3f
 801253e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8012542:	2386      	movs	r3, #134	; 0x86
 8012544:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012548:	f107 0310 	add.w	r3, r7, #16
 801254c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8012550:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012554:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8012558:	f107 030f 	add.w	r3, r7, #15
 801255c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8012560:	2301      	movs	r3, #1
 8012562:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012566:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801256a:	2100      	movs	r1, #0
 801256c:	4618      	mov	r0, r3
 801256e:	f001 f889 	bl	8013684 <hci_send_req>
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	da01      	bge.n	801257c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8012578:	23ff      	movs	r3, #255	; 0xff
 801257a:	e004      	b.n	8012586 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 801257c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012580:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012584:	781b      	ldrb	r3, [r3, #0]
}
 8012586:	4618      	mov	r0, r3
 8012588:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801258c:	46bd      	mov	sp, r7
 801258e:	bdb0      	pop	{r4, r5, r7, pc}

08012590 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b0cc      	sub	sp, #304	; 0x130
 8012594:	af00      	add	r7, sp, #0
 8012596:	4602      	mov	r2, r0
 8012598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801259c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80125a0:	6019      	str	r1, [r3, #0]
 80125a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80125a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80125aa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80125ac:	f107 0310 	add.w	r3, r7, #16
 80125b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80125b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80125b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80125bc:	2200      	movs	r2, #0
 80125be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80125c0:	2300      	movs	r3, #0
 80125c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80125c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80125ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80125ce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80125d2:	8812      	ldrh	r2, [r2, #0]
 80125d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80125d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80125da:	3302      	adds	r3, #2
 80125dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80125e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80125e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80125e8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80125ec:	6812      	ldr	r2, [r2, #0]
 80125ee:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80125f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80125f6:	3304      	adds	r3, #4
 80125f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80125fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012600:	2218      	movs	r2, #24
 8012602:	2100      	movs	r1, #0
 8012604:	4618      	mov	r0, r3
 8012606:	f001 f97f 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 801260a:	233f      	movs	r3, #63	; 0x3f
 801260c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8012610:	2388      	movs	r3, #136	; 0x88
 8012612:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012616:	f107 0310 	add.w	r3, r7, #16
 801261a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801261e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012622:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8012626:	f107 030f 	add.w	r3, r7, #15
 801262a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801262e:	2301      	movs	r3, #1
 8012630:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012634:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012638:	2100      	movs	r1, #0
 801263a:	4618      	mov	r0, r3
 801263c:	f001 f822 	bl	8013684 <hci_send_req>
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	da01      	bge.n	801264a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8012646:	23ff      	movs	r3, #255	; 0xff
 8012648:	e004      	b.n	8012654 <aci_gap_pass_key_resp+0xc4>
  return status;
 801264a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801264e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012652:	781b      	ldrb	r3, [r3, #0]
}
 8012654:	4618      	mov	r0, r3
 8012656:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}

0801265e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 801265e:	b590      	push	{r4, r7, lr}
 8012660:	b0cd      	sub	sp, #308	; 0x134
 8012662:	af00      	add	r7, sp, #0
 8012664:	4604      	mov	r4, r0
 8012666:	4608      	mov	r0, r1
 8012668:	4611      	mov	r1, r2
 801266a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801266e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8012672:	6013      	str	r3, [r2, #0]
 8012674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012678:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801267c:	4622      	mov	r2, r4
 801267e:	701a      	strb	r2, [r3, #0]
 8012680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012684:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8012688:	4602      	mov	r2, r0
 801268a:	701a      	strb	r2, [r3, #0]
 801268c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012690:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8012694:	460a      	mov	r2, r1
 8012696:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8012698:	f107 0310 	add.w	r3, r7, #16
 801269c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80126a0:	f107 0308 	add.w	r3, r7, #8
 80126a4:	2207      	movs	r2, #7
 80126a6:	2100      	movs	r1, #0
 80126a8:	4618      	mov	r0, r3
 80126aa:	f001 f92d 	bl	8013908 <Osal_MemSet>
  int index_input = 0;
 80126ae:	2300      	movs	r3, #0
 80126b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80126b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80126b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80126bc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80126c0:	7812      	ldrb	r2, [r2, #0]
 80126c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80126c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80126c8:	3301      	adds	r3, #1
 80126ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80126ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80126d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80126d6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80126da:	7812      	ldrb	r2, [r2, #0]
 80126dc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80126de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80126e2:	3301      	adds	r3, #1
 80126e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80126e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80126ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80126f0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80126f4:	7812      	ldrb	r2, [r2, #0]
 80126f6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80126f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80126fc:	3301      	adds	r3, #1
 80126fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012702:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012706:	2218      	movs	r2, #24
 8012708:	2100      	movs	r1, #0
 801270a:	4618      	mov	r0, r3
 801270c:	f001 f8fc 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012710:	233f      	movs	r3, #63	; 0x3f
 8012712:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8012716:	238a      	movs	r3, #138	; 0x8a
 8012718:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801271c:	f107 0310 	add.w	r3, r7, #16
 8012720:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8012724:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012728:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 801272c:	f107 0308 	add.w	r3, r7, #8
 8012730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8012734:	2307      	movs	r3, #7
 8012736:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801273a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801273e:	2100      	movs	r1, #0
 8012740:	4618      	mov	r0, r3
 8012742:	f000 ff9f 	bl	8013684 <hci_send_req>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	da01      	bge.n	8012750 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 801274c:	23ff      	movs	r3, #255	; 0xff
 801274e:	e02e      	b.n	80127ae <aci_gap_init+0x150>
  if ( resp.Status )
 8012750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012754:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d005      	beq.n	801276a <aci_gap_init+0x10c>
    return resp.Status;
 801275e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012762:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	e021      	b.n	80127ae <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 801276a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801276e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012772:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012776:	b29a      	uxth	r2, r3
 8012778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801277c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8012784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012788:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801278c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8012790:	b29a      	uxth	r2, r3
 8012792:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8012796:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8012798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801279c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80127a0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80127a4:	b29a      	uxth	r2, r3
 80127a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80127aa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80127ac:	2300      	movs	r3, #0
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd90      	pop	{r4, r7, pc}

080127b8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b0cc      	sub	sp, #304	; 0x130
 80127bc:	af00      	add	r7, sp, #0
 80127be:	4602      	mov	r2, r0
 80127c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80127c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80127c8:	6019      	str	r1, [r3, #0]
 80127ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80127ce:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80127d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80127d4:	f107 0310 	add.w	r3, r7, #16
 80127d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80127dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80127e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80127e4:	2200      	movs	r2, #0
 80127e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80127e8:	2300      	movs	r3, #0
 80127ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80127ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80127f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80127f6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80127fa:	7812      	ldrb	r2, [r2, #0]
 80127fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80127fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012802:	3301      	adds	r3, #1
 8012804:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8012808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801280c:	1c58      	adds	r0, r3, #1
 801280e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012812:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8012816:	781a      	ldrb	r2, [r3, #0]
 8012818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801281c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8012820:	6819      	ldr	r1, [r3, #0]
 8012822:	f001 f861 	bl	80138e8 <Osal_MemCpy>
  index_input += AdvDataLen;
 8012826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801282a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8012834:	4413      	add	r3, r2
 8012836:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801283a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801283e:	2218      	movs	r2, #24
 8012840:	2100      	movs	r1, #0
 8012842:	4618      	mov	r0, r3
 8012844:	f001 f860 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012848:	233f      	movs	r3, #63	; 0x3f
 801284a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 801284e:	238e      	movs	r3, #142	; 0x8e
 8012850:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012854:	f107 0310 	add.w	r3, r7, #16
 8012858:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801285c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012860:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8012864:	f107 030f 	add.w	r3, r7, #15
 8012868:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801286c:	2301      	movs	r3, #1
 801286e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012876:	2100      	movs	r1, #0
 8012878:	4618      	mov	r0, r3
 801287a:	f000 ff03 	bl	8013684 <hci_send_req>
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	da01      	bge.n	8012888 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8012884:	23ff      	movs	r3, #255	; 0xff
 8012886:	e004      	b.n	8012892 <aci_gap_update_adv_data+0xda>
  return status;
 8012888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801288c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012890:	781b      	ldrb	r3, [r3, #0]
}
 8012892:	4618      	mov	r0, r3
 8012894:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b088      	sub	sp, #32
 80128a0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80128a2:	2300      	movs	r3, #0
 80128a4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80128a6:	f107 0308 	add.w	r3, r7, #8
 80128aa:	2218      	movs	r2, #24
 80128ac:	2100      	movs	r1, #0
 80128ae:	4618      	mov	r0, r3
 80128b0:	f001 f82a 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 80128b4:	233f      	movs	r3, #63	; 0x3f
 80128b6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80128b8:	2392      	movs	r3, #146	; 0x92
 80128ba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80128bc:	1dfb      	adds	r3, r7, #7
 80128be:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80128c0:	2301      	movs	r3, #1
 80128c2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80128c4:	f107 0308 	add.w	r3, r7, #8
 80128c8:	2100      	movs	r1, #0
 80128ca:	4618      	mov	r0, r3
 80128cc:	f000 feda 	bl	8013684 <hci_send_req>
 80128d0:	4603      	mov	r3, r0
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	da01      	bge.n	80128da <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80128d6:	23ff      	movs	r3, #255	; 0xff
 80128d8:	e000      	b.n	80128dc <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80128da:	79fb      	ldrb	r3, [r7, #7]
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3720      	adds	r7, #32
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b0cc      	sub	sp, #304	; 0x130
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	4602      	mov	r2, r0
 80128ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80128f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80128f4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 80128f6:	f107 0310 	add.w	r3, r7, #16
 80128fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80128fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012902:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012906:	2200      	movs	r2, #0
 8012908:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801290a:	2300      	movs	r3, #0
 801290c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8012910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012914:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012918:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801291c:	8812      	ldrh	r2, [r2, #0]
 801291e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8012920:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012924:	3302      	adds	r3, #2
 8012926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801292a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801292e:	2218      	movs	r2, #24
 8012930:	2100      	movs	r1, #0
 8012932:	4618      	mov	r0, r3
 8012934:	f000 ffe8 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012938:	233f      	movs	r3, #63	; 0x3f
 801293a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 801293e:	2395      	movs	r3, #149	; 0x95
 8012940:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012944:	f107 0310 	add.w	r3, r7, #16
 8012948:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801294c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012950:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8012954:	f107 030f 	add.w	r3, r7, #15
 8012958:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801295c:	2301      	movs	r3, #1
 801295e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012962:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012966:	2100      	movs	r1, #0
 8012968:	4618      	mov	r0, r3
 801296a:	f000 fe8b 	bl	8013684 <hci_send_req>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	da01      	bge.n	8012978 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8012974:	23ff      	movs	r3, #255	; 0xff
 8012976:	e004      	b.n	8012982 <aci_gap_allow_rebond+0x9e>
  return status;
 8012978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801297c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012980:	781b      	ldrb	r3, [r3, #0]
}
 8012982:	4618      	mov	r0, r3
 8012984:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}

0801298c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b0cc      	sub	sp, #304	; 0x130
 8012990:	af00      	add	r7, sp, #0
 8012992:	4602      	mov	r2, r0
 8012994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012998:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801299c:	801a      	strh	r2, [r3, #0]
 801299e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80129a2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80129a6:	460a      	mov	r2, r1
 80129a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80129aa:	f107 0310 	add.w	r3, r7, #16
 80129ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80129b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80129b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80129ba:	2200      	movs	r2, #0
 80129bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80129be:	2300      	movs	r3, #0
 80129c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80129c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80129c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80129cc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80129d0:	8812      	ldrh	r2, [r2, #0]
 80129d2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80129d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80129d8:	3302      	adds	r3, #2
 80129da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80129de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80129e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80129e6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80129ea:	7812      	ldrb	r2, [r2, #0]
 80129ec:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80129ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80129f2:	3301      	adds	r3, #1
 80129f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80129f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80129fc:	2218      	movs	r2, #24
 80129fe:	2100      	movs	r1, #0
 8012a00:	4618      	mov	r0, r3
 8012a02:	f000 ff81 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012a06:	233f      	movs	r3, #63	; 0x3f
 8012a08:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8012a0c:	23a5      	movs	r3, #165	; 0xa5
 8012a0e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012a12:	f107 0310 	add.w	r3, r7, #16
 8012a16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8012a1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012a1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8012a22:	f107 030f 	add.w	r3, r7, #15
 8012a26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012a30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a34:	2100      	movs	r1, #0
 8012a36:	4618      	mov	r0, r3
 8012a38:	f000 fe24 	bl	8013684 <hci_send_req>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	da01      	bge.n	8012a46 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8012a42:	23ff      	movs	r3, #255	; 0xff
 8012a44:	e004      	b.n	8012a50 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8012a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012a4a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012a4e:	781b      	ldrb	r3, [r3, #0]
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}

08012a5a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b088      	sub	sp, #32
 8012a5e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8012a60:	2300      	movs	r3, #0
 8012a62:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012a64:	f107 0308 	add.w	r3, r7, #8
 8012a68:	2218      	movs	r2, #24
 8012a6a:	2100      	movs	r1, #0
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f000 ff4b 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012a72:	233f      	movs	r3, #63	; 0x3f
 8012a74:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8012a76:	f240 1301 	movw	r3, #257	; 0x101
 8012a7a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8012a7c:	1dfb      	adds	r3, r7, #7
 8012a7e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8012a80:	2301      	movs	r3, #1
 8012a82:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012a84:	f107 0308 	add.w	r3, r7, #8
 8012a88:	2100      	movs	r1, #0
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f000 fdfa 	bl	8013684 <hci_send_req>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	da01      	bge.n	8012a9a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8012a96:	23ff      	movs	r3, #255	; 0xff
 8012a98:	e000      	b.n	8012a9c <aci_gatt_init+0x42>
  return status;
 8012a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3720      	adds	r7, #32
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8012aa4:	b590      	push	{r4, r7, lr}
 8012aa6:	b0cf      	sub	sp, #316	; 0x13c
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	4604      	mov	r4, r0
 8012aac:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8012ab0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8012ab4:	6001      	str	r1, [r0, #0]
 8012ab6:	4610      	mov	r0, r2
 8012ab8:	4619      	mov	r1, r3
 8012aba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012abe:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8012ac2:	4622      	mov	r2, r4
 8012ac4:	701a      	strb	r2, [r3, #0]
 8012ac6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012aca:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8012ace:	4602      	mov	r2, r0
 8012ad0:	701a      	strb	r2, [r3, #0]
 8012ad2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ad6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8012ada:	460a      	mov	r2, r1
 8012adc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8012ade:	f107 0310 	add.w	r3, r7, #16
 8012ae2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8012ae6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012aea:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d00a      	beq.n	8012b0a <aci_gatt_add_service+0x66>
 8012af4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012af8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	2b02      	cmp	r3, #2
 8012b00:	d101      	bne.n	8012b06 <aci_gatt_add_service+0x62>
 8012b02:	2311      	movs	r3, #17
 8012b04:	e002      	b.n	8012b0c <aci_gatt_add_service+0x68>
 8012b06:	2301      	movs	r3, #1
 8012b08:	e000      	b.n	8012b0c <aci_gatt_add_service+0x68>
 8012b0a:	2303      	movs	r3, #3
 8012b0c:	f107 0210 	add.w	r2, r7, #16
 8012b10:	4413      	add	r3, r2
 8012b12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8012b16:	f107 030c 	add.w	r3, r7, #12
 8012b1a:	2203      	movs	r2, #3
 8012b1c:	2100      	movs	r1, #0
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f000 fef2 	bl	8013908 <Osal_MemSet>
  int index_input = 0;
 8012b24:	2300      	movs	r3, #0
 8012b26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8012b2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012b2e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8012b32:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8012b36:	7812      	ldrb	r2, [r2, #0]
 8012b38:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8012b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012b3e:	3301      	adds	r3, #1
 8012b40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8012b44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b48:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d002      	beq.n	8012b58 <aci_gatt_add_service+0xb4>
 8012b52:	2b02      	cmp	r3, #2
 8012b54:	d004      	beq.n	8012b60 <aci_gatt_add_service+0xbc>
 8012b56:	e007      	b.n	8012b68 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8012b58:	2302      	movs	r3, #2
 8012b5a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8012b5e:	e005      	b.n	8012b6c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8012b60:	2310      	movs	r3, #16
 8012b62:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8012b66:	e001      	b.n	8012b6c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8012b68:	2397      	movs	r3, #151	; 0x97
 8012b6a:	e06c      	b.n	8012c46 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8012b6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012b70:	1c58      	adds	r0, r3, #1
 8012b72:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8012b76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012b7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8012b7e:	6819      	ldr	r1, [r3, #0]
 8012b80:	f000 feb2 	bl	80138e8 <Osal_MemCpy>
    index_input += size;
 8012b84:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8012b88:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8012b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012b96:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8012b9a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8012b9e:	7812      	ldrb	r2, [r2, #0]
 8012ba0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8012ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8012bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012bb0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8012bb4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8012bb8:	7812      	ldrb	r2, [r2, #0]
 8012bba:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8012bbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012bc0:	3301      	adds	r3, #1
 8012bc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012bc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012bca:	2218      	movs	r2, #24
 8012bcc:	2100      	movs	r1, #0
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f000 fe9a 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012bd4:	233f      	movs	r3, #63	; 0x3f
 8012bd6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8012bda:	f44f 7381 	mov.w	r3, #258	; 0x102
 8012bde:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012be2:	f107 0310 	add.w	r3, r7, #16
 8012be6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8012bea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012bee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8012bf2:	f107 030c 	add.w	r3, r7, #12
 8012bf6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8012bfa:	2303      	movs	r3, #3
 8012bfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012c00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c04:	2100      	movs	r1, #0
 8012c06:	4618      	mov	r0, r3
 8012c08:	f000 fd3c 	bl	8013684 <hci_send_req>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	da01      	bge.n	8012c16 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8012c12:	23ff      	movs	r3, #255	; 0xff
 8012c14:	e017      	b.n	8012c46 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8012c16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d005      	beq.n	8012c30 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8012c24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	e00a      	b.n	8012c46 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8012c30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012c38:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012c3c:	b29a      	uxth	r2, r3
 8012c3e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012c42:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8012c44:	2300      	movs	r3, #0
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd90      	pop	{r4, r7, pc}

08012c50 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8012c50:	b590      	push	{r4, r7, lr}
 8012c52:	b0d1      	sub	sp, #324	; 0x144
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	4604      	mov	r4, r0
 8012c58:	4608      	mov	r0, r1
 8012c5a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8012c5e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8012c62:	600a      	str	r2, [r1, #0]
 8012c64:	4619      	mov	r1, r3
 8012c66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012c6a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8012c6e:	4622      	mov	r2, r4
 8012c70:	801a      	strh	r2, [r3, #0]
 8012c72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012c76:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8012c7a:	4602      	mov	r2, r0
 8012c7c:	701a      	strb	r2, [r3, #0]
 8012c7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012c82:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8012c86:	460a      	mov	r2, r1
 8012c88:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8012c8a:	f107 0318 	add.w	r3, r7, #24
 8012c8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8012c92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012c96:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d00a      	beq.n	8012cb6 <aci_gatt_add_char+0x66>
 8012ca0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012ca4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	2b02      	cmp	r3, #2
 8012cac:	d101      	bne.n	8012cb2 <aci_gatt_add_char+0x62>
 8012cae:	2313      	movs	r3, #19
 8012cb0:	e002      	b.n	8012cb8 <aci_gatt_add_char+0x68>
 8012cb2:	2303      	movs	r3, #3
 8012cb4:	e000      	b.n	8012cb8 <aci_gatt_add_char+0x68>
 8012cb6:	2305      	movs	r3, #5
 8012cb8:	f107 0218 	add.w	r2, r7, #24
 8012cbc:	4413      	add	r3, r2
 8012cbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8012cc2:	f107 0314 	add.w	r3, r7, #20
 8012cc6:	2203      	movs	r2, #3
 8012cc8:	2100      	movs	r1, #0
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f000 fe1c 	bl	8013908 <Osal_MemSet>
  int index_input = 0;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8012cd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012cda:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8012cde:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8012ce2:	8812      	ldrh	r2, [r2, #0]
 8012ce4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8012ce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012cea:	3302      	adds	r3, #2
 8012cec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8012cf0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012cf4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8012cf8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8012cfc:	7812      	ldrb	r2, [r2, #0]
 8012cfe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8012d00:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012d04:	3301      	adds	r3, #1
 8012d06:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8012d0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012d0e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	2b01      	cmp	r3, #1
 8012d16:	d002      	beq.n	8012d1e <aci_gatt_add_char+0xce>
 8012d18:	2b02      	cmp	r3, #2
 8012d1a:	d004      	beq.n	8012d26 <aci_gatt_add_char+0xd6>
 8012d1c:	e007      	b.n	8012d2e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8012d1e:	2302      	movs	r3, #2
 8012d20:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8012d24:	e005      	b.n	8012d32 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8012d26:	2310      	movs	r3, #16
 8012d28:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8012d2c:	e001      	b.n	8012d32 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8012d2e:	2397      	movs	r3, #151	; 0x97
 8012d30:	e091      	b.n	8012e56 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8012d32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012d36:	1cd8      	adds	r0, r3, #3
 8012d38:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8012d3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012d40:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8012d44:	6819      	ldr	r1, [r3, #0]
 8012d46:	f000 fdcf 	bl	80138e8 <Osal_MemCpy>
    index_input += size;
 8012d4a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8012d4e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8012d52:	4413      	add	r3, r2
 8012d54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8012d58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d5c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8012d60:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8012d64:	8812      	ldrh	r2, [r2, #0]
 8012d66:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8012d68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012d6c:	3302      	adds	r3, #2
 8012d6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8012d72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d76:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8012d7a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8012d7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012d80:	3301      	adds	r3, #1
 8012d82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8012d86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d8a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8012d8e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8012d90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012d94:	3301      	adds	r3, #1
 8012d96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8012d9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d9e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8012da2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8012da4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012da8:	3301      	adds	r3, #1
 8012daa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8012dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012db2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8012db6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8012db8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8012dc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012dc6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8012dca:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8012dcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012dd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012dda:	2218      	movs	r2, #24
 8012ddc:	2100      	movs	r1, #0
 8012dde:	4618      	mov	r0, r3
 8012de0:	f000 fd92 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012de4:	233f      	movs	r3, #63	; 0x3f
 8012de6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8012dea:	f44f 7382 	mov.w	r3, #260	; 0x104
 8012dee:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8012df2:	f107 0318 	add.w	r3, r7, #24
 8012df6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8012dfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8012dfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8012e02:	f107 0314 	add.w	r3, r7, #20
 8012e06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8012e0a:	2303      	movs	r3, #3
 8012e0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012e10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012e14:	2100      	movs	r1, #0
 8012e16:	4618      	mov	r0, r3
 8012e18:	f000 fc34 	bl	8013684 <hci_send_req>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	da01      	bge.n	8012e26 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8012e22:	23ff      	movs	r3, #255	; 0xff
 8012e24:	e017      	b.n	8012e56 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8012e26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d005      	beq.n	8012e40 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8012e34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012e38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	e00a      	b.n	8012e56 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8012e40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e48:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8012e52:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd90      	pop	{r4, r7, pc}

08012e60 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8012e60:	b5b0      	push	{r4, r5, r7, lr}
 8012e62:	b0cc      	sub	sp, #304	; 0x130
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	4605      	mov	r5, r0
 8012e68:	460c      	mov	r4, r1
 8012e6a:	4610      	mov	r0, r2
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8012e76:	462a      	mov	r2, r5
 8012e78:	801a      	strh	r2, [r3, #0]
 8012e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e82:	4622      	mov	r2, r4
 8012e84:	801a      	strh	r2, [r3, #0]
 8012e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e8a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8012e8e:	4602      	mov	r2, r0
 8012e90:	701a      	strb	r2, [r3, #0]
 8012e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e96:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8012e9a:	460a      	mov	r2, r1
 8012e9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8012e9e:	f107 0310 	add.w	r3, r7, #16
 8012ea2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8012ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012eaa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012eae:	2200      	movs	r2, #0
 8012eb0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8012eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ebc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012ec0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8012ec4:	8812      	ldrh	r2, [r2, #0]
 8012ec6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8012ec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ecc:	3302      	adds	r3, #2
 8012ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8012ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ed6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012eda:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8012ede:	8812      	ldrh	r2, [r2, #0]
 8012ee0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8012ee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012ee6:	3302      	adds	r3, #2
 8012ee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8012eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ef0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012ef4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8012ef8:	7812      	ldrb	r2, [r2, #0]
 8012efa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8012efc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f00:	3301      	adds	r3, #1
 8012f02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8012f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012f0e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8012f12:	7812      	ldrb	r2, [r2, #0]
 8012f14:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8012f16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8012f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f24:	1d98      	adds	r0, r3, #6
 8012f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f2a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	461a      	mov	r2, r3
 8012f32:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8012f36:	f000 fcd7 	bl	80138e8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8012f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f3e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8012f48:	4413      	add	r3, r2
 8012f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012f4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f52:	2218      	movs	r2, #24
 8012f54:	2100      	movs	r1, #0
 8012f56:	4618      	mov	r0, r3
 8012f58:	f000 fcd6 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012f5c:	233f      	movs	r3, #63	; 0x3f
 8012f5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8012f62:	f44f 7383 	mov.w	r3, #262	; 0x106
 8012f66:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012f6a:	f107 0310 	add.w	r3, r7, #16
 8012f6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8012f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012f76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8012f7a:	f107 030f 	add.w	r3, r7, #15
 8012f7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8012f82:	2301      	movs	r3, #1
 8012f84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012f88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f8c:	2100      	movs	r1, #0
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f000 fb78 	bl	8013684 <hci_send_req>
 8012f94:	4603      	mov	r3, r0
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	da01      	bge.n	8012f9e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8012f9a:	23ff      	movs	r3, #255	; 0xff
 8012f9c:	e004      	b.n	8012fa8 <aci_gatt_update_char_value+0x148>
  return status;
 8012f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fa2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012fa6:	781b      	ldrb	r3, [r3, #0]
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bdb0      	pop	{r4, r5, r7, pc}

08012fb2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8012fb2:	b580      	push	{r7, lr}
 8012fb4:	b0cc      	sub	sp, #304	; 0x130
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8012fc0:	601a      	str	r2, [r3, #0]
 8012fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fc6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8012fca:	4602      	mov	r2, r0
 8012fcc:	701a      	strb	r2, [r3, #0]
 8012fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fd2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8012fd6:	460a      	mov	r2, r1
 8012fd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8012fda:	f107 0310 	add.w	r3, r7, #16
 8012fde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8012fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fe6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8012fea:	2200      	movs	r2, #0
 8012fec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8012ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ff8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8012ffc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8013000:	7812      	ldrb	r2, [r2, #0]
 8013002:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013004:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013008:	3301      	adds	r3, #1
 801300a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 801300e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013012:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8013016:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801301a:	7812      	ldrb	r2, [r2, #0]
 801301c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801301e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013022:	3301      	adds	r3, #1
 8013024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8013028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801302c:	1c98      	adds	r0, r3, #2
 801302e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013032:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8013036:	781a      	ldrb	r2, [r3, #0]
 8013038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801303c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013040:	6819      	ldr	r1, [r3, #0]
 8013042:	f000 fc51 	bl	80138e8 <Osal_MemCpy>
  index_input += Length;
 8013046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801304a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8013054:	4413      	add	r3, r2
 8013056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801305a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801305e:	2218      	movs	r2, #24
 8013060:	2100      	movs	r1, #0
 8013062:	4618      	mov	r0, r3
 8013064:	f000 fc50 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013068:	233f      	movs	r3, #63	; 0x3f
 801306a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 801306e:	230c      	movs	r3, #12
 8013070:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8013074:	f107 0310 	add.w	r3, r7, #16
 8013078:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801307c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013080:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8013084:	f107 030f 	add.w	r3, r7, #15
 8013088:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801308c:	2301      	movs	r3, #1
 801308e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013096:	2100      	movs	r1, #0
 8013098:	4618      	mov	r0, r3
 801309a:	f000 faf3 	bl	8013684 <hci_send_req>
 801309e:	4603      	mov	r3, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	da01      	bge.n	80130a8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80130a4:	23ff      	movs	r3, #255	; 0xff
 80130a6:	e004      	b.n	80130b2 <aci_hal_write_config_data+0x100>
  return status;
 80130a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80130b0:	781b      	ldrb	r3, [r3, #0]
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b0cc      	sub	sp, #304	; 0x130
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	4602      	mov	r2, r0
 80130c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130c8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80130cc:	701a      	strb	r2, [r3, #0]
 80130ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80130d6:	460a      	mov	r2, r1
 80130d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80130da:	f107 0310 	add.w	r3, r7, #16
 80130de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80130e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80130ea:	2200      	movs	r2, #0
 80130ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80130f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80130f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80130fc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8013100:	7812      	ldrb	r2, [r2, #0]
 8013102:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013108:	3301      	adds	r3, #1
 801310a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 801310e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013112:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8013116:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801311a:	7812      	ldrb	r2, [r2, #0]
 801311c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801311e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013122:	3301      	adds	r3, #1
 8013124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801312c:	2218      	movs	r2, #24
 801312e:	2100      	movs	r1, #0
 8013130:	4618      	mov	r0, r3
 8013132:	f000 fbe9 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013136:	233f      	movs	r3, #63	; 0x3f
 8013138:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 801313c:	230f      	movs	r3, #15
 801313e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8013142:	f107 0310 	add.w	r3, r7, #16
 8013146:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801314a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801314e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8013152:	f107 030f 	add.w	r3, r7, #15
 8013156:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801315a:	2301      	movs	r3, #1
 801315c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013164:	2100      	movs	r1, #0
 8013166:	4618      	mov	r0, r3
 8013168:	f000 fa8c 	bl	8013684 <hci_send_req>
 801316c:	4603      	mov	r3, r0
 801316e:	2b00      	cmp	r3, #0
 8013170:	da01      	bge.n	8013176 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8013172:	23ff      	movs	r3, #255	; 0xff
 8013174:	e004      	b.n	8013180 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8013176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801317a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801317e:	781b      	ldrb	r3, [r3, #0]
}
 8013180:	4618      	mov	r0, r3
 8013182:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}

0801318a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 801318a:	b580      	push	{r7, lr}
 801318c:	b0cc      	sub	sp, #304	; 0x130
 801318e:	af00      	add	r7, sp, #0
 8013190:	4602      	mov	r2, r0
 8013192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013196:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801319a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 801319c:	f107 0310 	add.w	r3, r7, #16
 80131a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80131a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80131a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80131ac:	2200      	movs	r2, #0
 80131ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80131b0:	2300      	movs	r3, #0
 80131b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80131b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80131ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80131be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80131c2:	8812      	ldrh	r2, [r2, #0]
 80131c4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80131c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80131ca:	3302      	adds	r3, #2
 80131cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80131d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80131d4:	2218      	movs	r2, #24
 80131d6:	2100      	movs	r1, #0
 80131d8:	4618      	mov	r0, r3
 80131da:	f000 fb95 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 80131de:	233f      	movs	r3, #63	; 0x3f
 80131e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80131e4:	2318      	movs	r3, #24
 80131e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80131ea:	f107 0310 	add.w	r3, r7, #16
 80131ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80131f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80131f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80131fa:	f107 030f 	add.w	r3, r7, #15
 80131fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8013202:	2301      	movs	r3, #1
 8013204:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013208:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801320c:	2100      	movs	r1, #0
 801320e:	4618      	mov	r0, r3
 8013210:	f000 fa38 	bl	8013684 <hci_send_req>
 8013214:	4603      	mov	r3, r0
 8013216:	2b00      	cmp	r3, #0
 8013218:	da01      	bge.n	801321e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 801321a:	23ff      	movs	r3, #255	; 0xff
 801321c:	e004      	b.n	8013228 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 801321e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013222:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8013226:	781b      	ldrb	r3, [r3, #0]
}
 8013228:	4618      	mov	r0, r3
 801322a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}

08013232 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8013232:	b580      	push	{r7, lr}
 8013234:	b088      	sub	sp, #32
 8013236:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8013238:	2300      	movs	r3, #0
 801323a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801323c:	f107 0308 	add.w	r3, r7, #8
 8013240:	2218      	movs	r2, #24
 8013242:	2100      	movs	r1, #0
 8013244:	4618      	mov	r0, r3
 8013246:	f000 fb5f 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x03;
 801324a:	2303      	movs	r3, #3
 801324c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 801324e:	2303      	movs	r3, #3
 8013250:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8013252:	1dfb      	adds	r3, r7, #7
 8013254:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8013256:	2301      	movs	r3, #1
 8013258:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801325a:	f107 0308 	add.w	r3, r7, #8
 801325e:	2100      	movs	r1, #0
 8013260:	4618      	mov	r0, r3
 8013262:	f000 fa0f 	bl	8013684 <hci_send_req>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	da01      	bge.n	8013270 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 801326c:	23ff      	movs	r3, #255	; 0xff
 801326e:	e000      	b.n	8013272 <hci_reset+0x40>
  return status;
 8013270:	79fb      	ldrb	r3, [r7, #7]
}
 8013272:	4618      	mov	r0, r3
 8013274:	3720      	adds	r7, #32
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}

0801327a <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 801327a:	b580      	push	{r7, lr}
 801327c:	b0ce      	sub	sp, #312	; 0x138
 801327e:	af00      	add	r7, sp, #0
 8013280:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013288:	6019      	str	r1, [r3, #0]
 801328a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801328e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8013292:	601a      	str	r2, [r3, #0]
 8013294:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013298:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801329c:	4602      	mov	r2, r0
 801329e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80132a0:	f107 0318 	add.w	r3, r7, #24
 80132a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80132a8:	f107 0310 	add.w	r3, r7, #16
 80132ac:	2205      	movs	r2, #5
 80132ae:	2100      	movs	r1, #0
 80132b0:	4618      	mov	r0, r3
 80132b2:	f000 fb29 	bl	8013908 <Osal_MemSet>
  int index_input = 0;
 80132b6:	2300      	movs	r3, #0
 80132b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 80132bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80132c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80132c4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80132c8:	8812      	ldrh	r2, [r2, #0]
 80132ca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80132cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80132d0:	3302      	adds	r3, #2
 80132d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80132d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80132da:	2218      	movs	r2, #24
 80132dc:	2100      	movs	r1, #0
 80132de:	4618      	mov	r0, r3
 80132e0:	f000 fb12 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x08;
 80132e4:	2308      	movs	r3, #8
 80132e6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 80132ea:	2330      	movs	r3, #48	; 0x30
 80132ec:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80132f0:	f107 0318 	add.w	r3, r7, #24
 80132f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80132f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80132fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8013300:	f107 0310 	add.w	r3, r7, #16
 8013304:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8013308:	2305      	movs	r3, #5
 801330a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 801330e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013312:	2100      	movs	r1, #0
 8013314:	4618      	mov	r0, r3
 8013316:	f000 f9b5 	bl	8013684 <hci_send_req>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	da01      	bge.n	8013324 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8013320:	23ff      	movs	r3, #255	; 0xff
 8013322:	e023      	b.n	801336c <hci_le_read_phy+0xf2>
  if ( resp.Status )
 8013324:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013328:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d005      	beq.n	801333e <hci_le_read_phy+0xc4>
    return resp.Status;
 8013332:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013336:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	e016      	b.n	801336c <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 801333e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013342:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8013346:	78da      	ldrb	r2, [r3, #3]
 8013348:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801334c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8013354:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013358:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801335c:	791a      	ldrb	r2, [r3, #4]
 801335e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013362:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 801336a:	2300      	movs	r3, #0
}
 801336c:	4618      	mov	r0, r3
 801336e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}

08013376 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8013376:	b590      	push	{r4, r7, lr}
 8013378:	b0cd      	sub	sp, #308	; 0x134
 801337a:	af00      	add	r7, sp, #0
 801337c:	4604      	mov	r4, r0
 801337e:	4608      	mov	r0, r1
 8013380:	4611      	mov	r1, r2
 8013382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013386:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801338a:	4622      	mov	r2, r4
 801338c:	701a      	strb	r2, [r3, #0]
 801338e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013392:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8013396:	4602      	mov	r2, r0
 8013398:	701a      	strb	r2, [r3, #0]
 801339a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801339e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80133a2:	460a      	mov	r2, r1
 80133a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80133a6:	f107 0310 	add.w	r3, r7, #16
 80133aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80133ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80133b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80133b6:	2200      	movs	r2, #0
 80133b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80133ba:	2300      	movs	r3, #0
 80133bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80133c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80133c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80133c8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80133cc:	7812      	ldrb	r2, [r2, #0]
 80133ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80133d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80133d4:	3301      	adds	r3, #1
 80133d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80133da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80133de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80133e2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80133e6:	7812      	ldrb	r2, [r2, #0]
 80133e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80133ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80133ee:	3301      	adds	r3, #1
 80133f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80133f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80133f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80133fc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8013400:	7812      	ldrb	r2, [r2, #0]
 8013402:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8013404:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013408:	3301      	adds	r3, #1
 801340a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801340e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013412:	2218      	movs	r2, #24
 8013414:	2100      	movs	r1, #0
 8013416:	4618      	mov	r0, r3
 8013418:	f000 fa76 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x08;
 801341c:	2308      	movs	r3, #8
 801341e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8013422:	2331      	movs	r3, #49	; 0x31
 8013424:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8013428:	f107 0310 	add.w	r3, r7, #16
 801342c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8013430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013434:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8013438:	f107 030f 	add.w	r3, r7, #15
 801343c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8013440:	2301      	movs	r3, #1
 8013442:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013446:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801344a:	2100      	movs	r1, #0
 801344c:	4618      	mov	r0, r3
 801344e:	f000 f919 	bl	8013684 <hci_send_req>
 8013452:	4603      	mov	r3, r0
 8013454:	2b00      	cmp	r3, #0
 8013456:	da01      	bge.n	801345c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8013458:	23ff      	movs	r3, #255	; 0xff
 801345a:	e004      	b.n	8013466 <hci_le_set_default_phy+0xf0>
  return status;
 801345c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013460:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8013464:	781b      	ldrb	r3, [r3, #0]
}
 8013466:	4618      	mov	r0, r3
 8013468:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801346c:	46bd      	mov	sp, r7
 801346e:	bd90      	pop	{r4, r7, pc}

08013470 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8013470:	b5b0      	push	{r4, r5, r7, lr}
 8013472:	b0cc      	sub	sp, #304	; 0x130
 8013474:	af00      	add	r7, sp, #0
 8013476:	4605      	mov	r5, r0
 8013478:	460c      	mov	r4, r1
 801347a:	4610      	mov	r0, r2
 801347c:	4619      	mov	r1, r3
 801347e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013482:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8013486:	462a      	mov	r2, r5
 8013488:	801a      	strh	r2, [r3, #0]
 801348a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801348e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013492:	4622      	mov	r2, r4
 8013494:	801a      	strh	r2, [r3, #0]
 8013496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801349a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 801349e:	4602      	mov	r2, r0
 80134a0:	801a      	strh	r2, [r3, #0]
 80134a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80134a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80134aa:	460a      	mov	r2, r1
 80134ac:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 80134ae:	f107 0310 	add.w	r3, r7, #16
 80134b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80134b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80134ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80134be:	2200      	movs	r2, #0
 80134c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80134c2:	2300      	movs	r3, #0
 80134c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80134c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80134cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80134d0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80134d4:	8812      	ldrh	r2, [r2, #0]
 80134d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80134d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134dc:	3302      	adds	r3, #2
 80134de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 80134e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80134e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80134ea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80134ee:	8812      	ldrh	r2, [r2, #0]
 80134f0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80134f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134f6:	3302      	adds	r3, #2
 80134f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80134fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013500:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8013504:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8013508:	8812      	ldrh	r2, [r2, #0]
 801350a:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 801350c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013510:	3302      	adds	r3, #2
 8013512:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 8013516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801351a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801351e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8013522:	8812      	ldrh	r2, [r2, #0]
 8013524:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8013526:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801352a:	3302      	adds	r3, #2
 801352c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8013530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013534:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8013538:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 801353a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801353e:	3302      	adds	r3, #2
 8013540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013548:	2218      	movs	r2, #24
 801354a:	2100      	movs	r1, #0
 801354c:	4618      	mov	r0, r3
 801354e:	f000 f9db 	bl	8013908 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013552:	233f      	movs	r3, #63	; 0x3f
 8013554:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8013558:	f240 1381 	movw	r3, #385	; 0x181
 801355c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8013560:	230f      	movs	r3, #15
 8013562:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8013566:	f107 0310 	add.w	r3, r7, #16
 801356a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801356e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013572:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8013576:	f107 030f 	add.w	r3, r7, #15
 801357a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801357e:	2301      	movs	r3, #1
 8013580:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013584:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013588:	2100      	movs	r1, #0
 801358a:	4618      	mov	r0, r3
 801358c:	f000 f87a 	bl	8013684 <hci_send_req>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	da01      	bge.n	801359a <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8013596:	23ff      	movs	r3, #255	; 0xff
 8013598:	e004      	b.n	80135a4 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 801359a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801359e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80135a2:	781b      	ldrb	r3, [r3, #0]
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080135b0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	4a08      	ldr	r2, [pc, #32]	; (80135e0 <hci_init+0x30>)
 80135c0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80135c2:	4a08      	ldr	r2, [pc, #32]	; (80135e4 <hci_init+0x34>)
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80135c8:	4806      	ldr	r0, [pc, #24]	; (80135e4 <hci_init+0x34>)
 80135ca:	f000 f979 	bl	80138c0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	4618      	mov	r0, r3
 80135d4:	f000 f8da 	bl	801378c <TlInit>

  return;
 80135d8:	bf00      	nop
}
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	20003cb8 	.word	0x20003cb8
 80135e4:	20003c90 	.word	0x20003c90

080135e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b084      	sub	sp, #16
 80135ec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80135ee:	4822      	ldr	r0, [pc, #136]	; (8013678 <hci_user_evt_proc+0x90>)
 80135f0:	f000 fd26 	bl	8014040 <LST_is_empty>
 80135f4:	4603      	mov	r3, r0
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d12b      	bne.n	8013652 <hci_user_evt_proc+0x6a>
 80135fa:	4b20      	ldr	r3, [pc, #128]	; (801367c <hci_user_evt_proc+0x94>)
 80135fc:	781b      	ldrb	r3, [r3, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d027      	beq.n	8013652 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8013602:	f107 030c 	add.w	r3, r7, #12
 8013606:	4619      	mov	r1, r3
 8013608:	481b      	ldr	r0, [pc, #108]	; (8013678 <hci_user_evt_proc+0x90>)
 801360a:	f000 fda8 	bl	801415e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801360e:	4b1c      	ldr	r3, [pc, #112]	; (8013680 <hci_user_evt_proc+0x98>)
 8013610:	69db      	ldr	r3, [r3, #28]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d00c      	beq.n	8013630 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801361a:	2301      	movs	r3, #1
 801361c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801361e:	4b18      	ldr	r3, [pc, #96]	; (8013680 <hci_user_evt_proc+0x98>)
 8013620:	69db      	ldr	r3, [r3, #28]
 8013622:	1d3a      	adds	r2, r7, #4
 8013624:	4610      	mov	r0, r2
 8013626:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8013628:	793a      	ldrb	r2, [r7, #4]
 801362a:	4b14      	ldr	r3, [pc, #80]	; (801367c <hci_user_evt_proc+0x94>)
 801362c:	701a      	strb	r2, [r3, #0]
 801362e:	e002      	b.n	8013636 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8013630:	4b12      	ldr	r3, [pc, #72]	; (801367c <hci_user_evt_proc+0x94>)
 8013632:	2201      	movs	r2, #1
 8013634:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8013636:	4b11      	ldr	r3, [pc, #68]	; (801367c <hci_user_evt_proc+0x94>)
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d004      	beq.n	8013648 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	4618      	mov	r0, r3
 8013642:	f001 f84d 	bl	80146e0 <TL_MM_EvtDone>
 8013646:	e004      	b.n	8013652 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	4619      	mov	r1, r3
 801364c:	480a      	ldr	r0, [pc, #40]	; (8013678 <hci_user_evt_proc+0x90>)
 801364e:	f000 fd19 	bl	8014084 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8013652:	4809      	ldr	r0, [pc, #36]	; (8013678 <hci_user_evt_proc+0x90>)
 8013654:	f000 fcf4 	bl	8014040 <LST_is_empty>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d107      	bne.n	801366e <hci_user_evt_proc+0x86>
 801365e:	4b07      	ldr	r3, [pc, #28]	; (801367c <hci_user_evt_proc+0x94>)
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d003      	beq.n	801366e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8013666:	4804      	ldr	r0, [pc, #16]	; (8013678 <hci_user_evt_proc+0x90>)
 8013668:	f7f1 fdce 	bl	8005208 <hci_notify_asynch_evt>
  }


  return;
 801366c:	bf00      	nop
 801366e:	bf00      	nop
}
 8013670:	3710      	adds	r7, #16
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}
 8013676:	bf00      	nop
 8013678:	20000348 	.word	0x20000348
 801367c:	20000354 	.word	0x20000354
 8013680:	20003c90 	.word	0x20003c90

08013684 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b088      	sub	sp, #32
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	460b      	mov	r3, r1
 801368e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8013690:	2000      	movs	r0, #0
 8013692:	f000 f8d1 	bl	8013838 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8013696:	2300      	movs	r3, #0
 8013698:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	885b      	ldrh	r3, [r3, #2]
 801369e:	b21b      	sxth	r3, r3
 80136a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80136a4:	b21a      	sxth	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	881b      	ldrh	r3, [r3, #0]
 80136aa:	029b      	lsls	r3, r3, #10
 80136ac:	b21b      	sxth	r3, r3
 80136ae:	4313      	orrs	r3, r2
 80136b0:	b21b      	sxth	r3, r3
 80136b2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80136b4:	4b33      	ldr	r3, [pc, #204]	; (8013784 <hci_send_req+0x100>)
 80136b6:	2201      	movs	r2, #1
 80136b8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	68db      	ldr	r3, [r3, #12]
 80136be:	b2d9      	uxtb	r1, r3
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	689a      	ldr	r2, [r3, #8]
 80136c4:	8bbb      	ldrh	r3, [r7, #28]
 80136c6:	4618      	mov	r0, r3
 80136c8:	f000 f890 	bl	80137ec <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80136cc:	e04e      	b.n	801376c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80136ce:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80136d2:	f7f1 fdb0 	bl	8005236 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80136d6:	e043      	b.n	8013760 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80136d8:	f107 030c 	add.w	r3, r7, #12
 80136dc:	4619      	mov	r1, r3
 80136de:	482a      	ldr	r0, [pc, #168]	; (8013788 <hci_send_req+0x104>)
 80136e0:	f000 fd3d 	bl	801415e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	7a5b      	ldrb	r3, [r3, #9]
 80136e8:	2b0f      	cmp	r3, #15
 80136ea:	d114      	bne.n	8013716 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	330b      	adds	r3, #11
 80136f0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	885b      	ldrh	r3, [r3, #2]
 80136f6:	b29b      	uxth	r3, r3
 80136f8:	8bba      	ldrh	r2, [r7, #28]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d104      	bne.n	8013708 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	691b      	ldr	r3, [r3, #16]
 8013702:	693a      	ldr	r2, [r7, #16]
 8013704:	7812      	ldrb	r2, [r2, #0]
 8013706:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	785b      	ldrb	r3, [r3, #1]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d027      	beq.n	8013760 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8013710:	2301      	movs	r3, #1
 8013712:	77fb      	strb	r3, [r7, #31]
 8013714:	e024      	b.n	8013760 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	330b      	adds	r3, #11
 801371a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 801371c:	69bb      	ldr	r3, [r7, #24]
 801371e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013722:	b29b      	uxth	r3, r3
 8013724:	8bba      	ldrh	r2, [r7, #28]
 8013726:	429a      	cmp	r2, r3
 8013728:	d114      	bne.n	8013754 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	7a9b      	ldrb	r3, [r3, #10]
 801372e:	3b03      	subs	r3, #3
 8013730:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	695a      	ldr	r2, [r3, #20]
 8013736:	7dfb      	ldrb	r3, [r7, #23]
 8013738:	429a      	cmp	r2, r3
 801373a:	bfa8      	it	ge
 801373c:	461a      	movge	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6918      	ldr	r0, [r3, #16]
 8013746:	69bb      	ldr	r3, [r7, #24]
 8013748:	1cd9      	adds	r1, r3, #3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	695b      	ldr	r3, [r3, #20]
 801374e:	461a      	mov	r2, r3
 8013750:	f004 f995 	bl	8017a7e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8013754:	69bb      	ldr	r3, [r7, #24]
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d001      	beq.n	8013760 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801375c:	2301      	movs	r3, #1
 801375e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8013760:	4809      	ldr	r0, [pc, #36]	; (8013788 <hci_send_req+0x104>)
 8013762:	f000 fc6d 	bl	8014040 <LST_is_empty>
 8013766:	4603      	mov	r3, r0
 8013768:	2b00      	cmp	r3, #0
 801376a:	d0b5      	beq.n	80136d8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801376c:	7ffb      	ldrb	r3, [r7, #31]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d0ad      	beq.n	80136ce <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8013772:	2001      	movs	r0, #1
 8013774:	f000 f860 	bl	8013838 <NotifyCmdStatus>

  return 0;
 8013778:	2300      	movs	r3, #0
}
 801377a:	4618      	mov	r0, r3
 801377c:	3720      	adds	r7, #32
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	20003cbc 	.word	0x20003cbc
 8013788:	20003cb0 	.word	0x20003cb0

0801378c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b086      	sub	sp, #24
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8013794:	480f      	ldr	r0, [pc, #60]	; (80137d4 <TlInit+0x48>)
 8013796:	f000 fc43 	bl	8014020 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801379a:	4a0f      	ldr	r2, [pc, #60]	; (80137d8 <TlInit+0x4c>)
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80137a0:	480e      	ldr	r0, [pc, #56]	; (80137dc <TlInit+0x50>)
 80137a2:	f000 fc3d 	bl	8014020 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80137a6:	4b0e      	ldr	r3, [pc, #56]	; (80137e0 <TlInit+0x54>)
 80137a8:	2201      	movs	r2, #1
 80137aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80137ac:	4b0d      	ldr	r3, [pc, #52]	; (80137e4 <TlInit+0x58>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d00a      	beq.n	80137ca <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80137b8:	4b0b      	ldr	r3, [pc, #44]	; (80137e8 <TlInit+0x5c>)
 80137ba:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80137bc:	4b09      	ldr	r3, [pc, #36]	; (80137e4 <TlInit+0x58>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	f107 0208 	add.w	r2, r7, #8
 80137c4:	4610      	mov	r0, r2
 80137c6:	4798      	blx	r3
  }

  return;
 80137c8:	bf00      	nop
 80137ca:	bf00      	nop
}
 80137cc:	3718      	adds	r7, #24
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	20003cb0 	.word	0x20003cb0
 80137d8:	20000350 	.word	0x20000350
 80137dc:	20000348 	.word	0x20000348
 80137e0:	20000354 	.word	0x20000354
 80137e4:	20003c90 	.word	0x20003c90
 80137e8:	08013879 	.word	0x08013879

080137ec <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b082      	sub	sp, #8
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	4603      	mov	r3, r0
 80137f4:	603a      	str	r2, [r7, #0]
 80137f6:	80fb      	strh	r3, [r7, #6]
 80137f8:	460b      	mov	r3, r1
 80137fa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80137fc:	4b0c      	ldr	r3, [pc, #48]	; (8013830 <SendCmd+0x44>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	88fa      	ldrh	r2, [r7, #6]
 8013802:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8013806:	4b0a      	ldr	r3, [pc, #40]	; (8013830 <SendCmd+0x44>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	797a      	ldrb	r2, [r7, #5]
 801380c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801380e:	4b08      	ldr	r3, [pc, #32]	; (8013830 <SendCmd+0x44>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	330c      	adds	r3, #12
 8013814:	797a      	ldrb	r2, [r7, #5]
 8013816:	6839      	ldr	r1, [r7, #0]
 8013818:	4618      	mov	r0, r3
 801381a:	f004 f930 	bl	8017a7e <memcpy>

  hciContext.io.Send(0,0);
 801381e:	4b05      	ldr	r3, [pc, #20]	; (8013834 <SendCmd+0x48>)
 8013820:	691b      	ldr	r3, [r3, #16]
 8013822:	2100      	movs	r1, #0
 8013824:	2000      	movs	r0, #0
 8013826:	4798      	blx	r3

  return;
 8013828:	bf00      	nop
}
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}
 8013830:	20000350 	.word	0x20000350
 8013834:	20003c90 	.word	0x20003c90

08013838 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
 801383e:	4603      	mov	r3, r0
 8013840:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8013842:	79fb      	ldrb	r3, [r7, #7]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d108      	bne.n	801385a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8013848:	4b0a      	ldr	r3, [pc, #40]	; (8013874 <NotifyCmdStatus+0x3c>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00d      	beq.n	801386c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8013850:	4b08      	ldr	r3, [pc, #32]	; (8013874 <NotifyCmdStatus+0x3c>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	2000      	movs	r0, #0
 8013856:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8013858:	e008      	b.n	801386c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801385a:	4b06      	ldr	r3, [pc, #24]	; (8013874 <NotifyCmdStatus+0x3c>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d004      	beq.n	801386c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8013862:	4b04      	ldr	r3, [pc, #16]	; (8013874 <NotifyCmdStatus+0x3c>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	2001      	movs	r0, #1
 8013868:	4798      	blx	r3
  return;
 801386a:	bf00      	nop
 801386c:	bf00      	nop
}
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}
 8013874:	20003cb8 	.word	0x20003cb8

08013878 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	7a5b      	ldrb	r3, [r3, #9]
 8013884:	2b0f      	cmp	r3, #15
 8013886:	d003      	beq.n	8013890 <TlEvtReceived+0x18>
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	7a5b      	ldrb	r3, [r3, #9]
 801388c:	2b0e      	cmp	r3, #14
 801388e:	d107      	bne.n	80138a0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8013890:	6879      	ldr	r1, [r7, #4]
 8013892:	4809      	ldr	r0, [pc, #36]	; (80138b8 <TlEvtReceived+0x40>)
 8013894:	f000 fc1c 	bl	80140d0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8013898:	2000      	movs	r0, #0
 801389a:	f7f1 fcc1 	bl	8005220 <hci_cmd_resp_release>
 801389e:	e006      	b.n	80138ae <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80138a0:	6879      	ldr	r1, [r7, #4]
 80138a2:	4806      	ldr	r0, [pc, #24]	; (80138bc <TlEvtReceived+0x44>)
 80138a4:	f000 fc14 	bl	80140d0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80138a8:	4804      	ldr	r0, [pc, #16]	; (80138bc <TlEvtReceived+0x44>)
 80138aa:	f7f1 fcad 	bl	8005208 <hci_notify_asynch_evt>
  }

  return;
 80138ae:	bf00      	nop
}
 80138b0:	3708      	adds	r7, #8
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
 80138b6:	bf00      	nop
 80138b8:	20003cb0 	.word	0x20003cb0
 80138bc:	20000348 	.word	0x20000348

080138c0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80138c0:	b480      	push	{r7}
 80138c2:	b083      	sub	sp, #12
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	4a05      	ldr	r2, [pc, #20]	; (80138e0 <hci_register_io_bus+0x20>)
 80138cc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	4a04      	ldr	r2, [pc, #16]	; (80138e4 <hci_register_io_bus+0x24>)
 80138d2:	611a      	str	r2, [r3, #16]

  return;
 80138d4:	bf00      	nop
}
 80138d6:	370c      	adds	r7, #12
 80138d8:	46bd      	mov	sp, r7
 80138da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138de:	4770      	bx	lr
 80138e0:	08014459 	.word	0x08014459
 80138e4:	080144c1 	.word	0x080144c1

080138e8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b084      	sub	sp, #16
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80138f4:	687a      	ldr	r2, [r7, #4]
 80138f6:	68b9      	ldr	r1, [r7, #8]
 80138f8:	68f8      	ldr	r0, [r7, #12]
 80138fa:	f004 f8c0 	bl	8017a7e <memcpy>
 80138fe:	4603      	mov	r3, r0
}
 8013900:	4618      	mov	r0, r3
 8013902:	3710      	adds	r7, #16
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b084      	sub	sp, #16
 801390c:	af00      	add	r7, sp, #0
 801390e:	60f8      	str	r0, [r7, #12]
 8013910:	60b9      	str	r1, [r7, #8]
 8013912:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	68b9      	ldr	r1, [r7, #8]
 8013918:	68f8      	ldr	r0, [r7, #12]
 801391a:	f004 f831 	bl	8017980 <memset>
 801391e:	4603      	mov	r3, r0
}
 8013920:	4618      	mov	r0, r3
 8013922:	3710      	adds	r7, #16
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8013928:	b480      	push	{r7}
 801392a:	b085      	sub	sp, #20
 801392c:	af00      	add	r7, sp, #0
 801392e:	4603      	mov	r3, r0
 8013930:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8013932:	4b0f      	ldr	r3, [pc, #60]	; (8013970 <OTP_Read+0x48>)
 8013934:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8013936:	e002      	b.n	801393e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	3b08      	subs	r3, #8
 801393c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	3307      	adds	r3, #7
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	79fa      	ldrb	r2, [r7, #7]
 8013946:	429a      	cmp	r2, r3
 8013948:	d003      	beq.n	8013952 <OTP_Read+0x2a>
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	4a09      	ldr	r2, [pc, #36]	; (8013974 <OTP_Read+0x4c>)
 801394e:	4293      	cmp	r3, r2
 8013950:	d1f2      	bne.n	8013938 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	3307      	adds	r3, #7
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	79fa      	ldrb	r2, [r7, #7]
 801395a:	429a      	cmp	r2, r3
 801395c:	d001      	beq.n	8013962 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801395e:	2300      	movs	r3, #0
 8013960:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8013962:	68fb      	ldr	r3, [r7, #12]
}
 8013964:	4618      	mov	r0, r3
 8013966:	3714      	adds	r7, #20
 8013968:	46bd      	mov	sp, r7
 801396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396e:	4770      	bx	lr
 8013970:	1fff73f8 	.word	0x1fff73f8
 8013974:	1fff7000 	.word	0x1fff7000

08013978 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b08a      	sub	sp, #40	; 0x28
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8013980:	2300      	movs	r3, #0
 8013982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	3301      	adds	r3, #1
 801398a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 801398c:	6a3b      	ldr	r3, [r7, #32]
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	2bff      	cmp	r3, #255	; 0xff
 8013992:	d14c      	bne.n	8013a2e <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8013994:	6a3b      	ldr	r3, [r7, #32]
 8013996:	3302      	adds	r3, #2
 8013998:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	881b      	ldrh	r3, [r3, #0]
 801399e:	b29b      	uxth	r3, r3
 80139a0:	461a      	mov	r2, r3
 80139a2:	f640 4301 	movw	r3, #3073	; 0xc01
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d13d      	bne.n	8013a26 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80139aa:	69fb      	ldr	r3, [r7, #28]
 80139ac:	3302      	adds	r3, #2
 80139ae:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 80139b0:	69bb      	ldr	r3, [r7, #24]
 80139b2:	885b      	ldrh	r3, [r3, #2]
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	461a      	mov	r2, r3
 80139b8:	4b20      	ldr	r3, [pc, #128]	; (8013a3c <PeerToPeer_Event_Handler+0xc4>)
 80139ba:	889b      	ldrh	r3, [r3, #4]
 80139bc:	3302      	adds	r3, #2
 80139be:	429a      	cmp	r2, r3
 80139c0:	d118      	bne.n	80139f4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 80139c2:	2301      	movs	r3, #1
 80139c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 80139c8:	69bb      	ldr	r3, [r7, #24]
 80139ca:	7a1b      	ldrb	r3, [r3, #8]
 80139cc:	f003 0301 	and.w	r3, r3, #1
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d007      	beq.n	80139e4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80139d4:	2300      	movs	r3, #0
 80139d6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80139d8:	f107 0308 	add.w	r3, r7, #8
 80139dc:	4618      	mov	r0, r3
 80139de:	f7f1 fc6f 	bl	80052c0 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 80139e2:	e022      	b.n	8013a2a <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80139e4:	2301      	movs	r3, #1
 80139e6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80139e8:	f107 0308 	add.w	r3, r7, #8
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7f1 fc67 	bl	80052c0 <P2PS_STM_App_Notification>
        break;
 80139f2:	e01a      	b.n	8013a2a <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	885b      	ldrh	r3, [r3, #2]
 80139f8:	b29b      	uxth	r3, r3
 80139fa:	461a      	mov	r2, r3
 80139fc:	4b0f      	ldr	r3, [pc, #60]	; (8013a3c <PeerToPeer_Event_Handler+0xc4>)
 80139fe:	885b      	ldrh	r3, [r3, #2]
 8013a00:	3301      	adds	r3, #1
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d111      	bne.n	8013a2a <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8013a06:	2303      	movs	r3, #3
 8013a08:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	88db      	ldrh	r3, [r3, #6]
 8013a0e:	b29b      	uxth	r3, r3
 8013a10:	b2db      	uxtb	r3, r3
 8013a12:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8013a14:	69bb      	ldr	r3, [r7, #24]
 8013a16:	3308      	adds	r3, #8
 8013a18:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8013a1a:	f107 0308 	add.w	r3, r7, #8
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7f1 fc4e 	bl	80052c0 <P2PS_STM_App_Notification>
        break;
 8013a24:	e001      	b.n	8013a2a <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 8013a26:	bf00      	nop
 8013a28:	e002      	b.n	8013a30 <PeerToPeer_Event_Handler+0xb8>
        break;
 8013a2a:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8013a2c:	e000      	b.n	8013a30 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 8013a2e:	bf00      	nop
  }

  return(return_value);
 8013a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8013a34:	4618      	mov	r0, r3
 8013a36:	3728      	adds	r7, #40	; 0x28
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	20000358 	.word	0x20000358

08013a40 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b08a      	sub	sp, #40	; 0x28
 8013a44:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8013a46:	484a      	ldr	r0, [pc, #296]	; (8013b70 <P2PS_STM_Init+0x130>)
 8013a48:	f000 fc58 	bl	80142fc <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8013a4c:	238f      	movs	r3, #143	; 0x8f
 8013a4e:	703b      	strb	r3, [r7, #0]
 8013a50:	23e5      	movs	r3, #229	; 0xe5
 8013a52:	707b      	strb	r3, [r7, #1]
 8013a54:	23b3      	movs	r3, #179	; 0xb3
 8013a56:	70bb      	strb	r3, [r7, #2]
 8013a58:	23d5      	movs	r3, #213	; 0xd5
 8013a5a:	70fb      	strb	r3, [r7, #3]
 8013a5c:	232e      	movs	r3, #46	; 0x2e
 8013a5e:	713b      	strb	r3, [r7, #4]
 8013a60:	237f      	movs	r3, #127	; 0x7f
 8013a62:	717b      	strb	r3, [r7, #5]
 8013a64:	234a      	movs	r3, #74	; 0x4a
 8013a66:	71bb      	strb	r3, [r7, #6]
 8013a68:	2398      	movs	r3, #152	; 0x98
 8013a6a:	71fb      	strb	r3, [r7, #7]
 8013a6c:	232a      	movs	r3, #42	; 0x2a
 8013a6e:	723b      	strb	r3, [r7, #8]
 8013a70:	2348      	movs	r3, #72	; 0x48
 8013a72:	727b      	strb	r3, [r7, #9]
 8013a74:	237a      	movs	r3, #122	; 0x7a
 8013a76:	72bb      	strb	r3, [r7, #10]
 8013a78:	23cc      	movs	r3, #204	; 0xcc
 8013a7a:	72fb      	strb	r3, [r7, #11]
 8013a7c:	2340      	movs	r3, #64	; 0x40
 8013a7e:	733b      	strb	r3, [r7, #12]
 8013a80:	23fe      	movs	r3, #254	; 0xfe
 8013a82:	737b      	strb	r3, [r7, #13]
 8013a84:	2300      	movs	r3, #0
 8013a86:	73bb      	strb	r3, [r7, #14]
 8013a88:	2300      	movs	r3, #0
 8013a8a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8013a8c:	4639      	mov	r1, r7
 8013a8e:	4b39      	ldr	r3, [pc, #228]	; (8013b74 <P2PS_STM_Init+0x134>)
 8013a90:	9300      	str	r3, [sp, #0]
 8013a92:	2306      	movs	r3, #6
 8013a94:	2201      	movs	r2, #1
 8013a96:	2002      	movs	r0, #2
 8013a98:	f7ff f804 	bl	8012aa4 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8013a9c:	2319      	movs	r3, #25
 8013a9e:	703b      	strb	r3, [r7, #0]
 8013aa0:	23ed      	movs	r3, #237	; 0xed
 8013aa2:	707b      	strb	r3, [r7, #1]
 8013aa4:	2382      	movs	r3, #130	; 0x82
 8013aa6:	70bb      	strb	r3, [r7, #2]
 8013aa8:	23ae      	movs	r3, #174	; 0xae
 8013aaa:	70fb      	strb	r3, [r7, #3]
 8013aac:	23ed      	movs	r3, #237	; 0xed
 8013aae:	713b      	strb	r3, [r7, #4]
 8013ab0:	2321      	movs	r3, #33	; 0x21
 8013ab2:	717b      	strb	r3, [r7, #5]
 8013ab4:	234c      	movs	r3, #76	; 0x4c
 8013ab6:	71bb      	strb	r3, [r7, #6]
 8013ab8:	239d      	movs	r3, #157	; 0x9d
 8013aba:	71fb      	strb	r3, [r7, #7]
 8013abc:	2341      	movs	r3, #65	; 0x41
 8013abe:	723b      	strb	r3, [r7, #8]
 8013ac0:	2345      	movs	r3, #69	; 0x45
 8013ac2:	727b      	strb	r3, [r7, #9]
 8013ac4:	2322      	movs	r3, #34	; 0x22
 8013ac6:	72bb      	strb	r3, [r7, #10]
 8013ac8:	238e      	movs	r3, #142	; 0x8e
 8013aca:	72fb      	strb	r3, [r7, #11]
 8013acc:	2341      	movs	r3, #65	; 0x41
 8013ace:	733b      	strb	r3, [r7, #12]
 8013ad0:	23fe      	movs	r3, #254	; 0xfe
 8013ad2:	737b      	strb	r3, [r7, #13]
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	73bb      	strb	r3, [r7, #14]
 8013ad8:	2300      	movs	r3, #0
 8013ada:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8013adc:	4b25      	ldr	r3, [pc, #148]	; (8013b74 <P2PS_STM_Init+0x134>)
 8013ade:	8818      	ldrh	r0, [r3, #0]
 8013ae0:	463a      	mov	r2, r7
 8013ae2:	4b25      	ldr	r3, [pc, #148]	; (8013b78 <P2PS_STM_Init+0x138>)
 8013ae4:	9305      	str	r3, [sp, #20]
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	9304      	str	r3, [sp, #16]
 8013aea:	230a      	movs	r3, #10
 8013aec:	9303      	str	r3, [sp, #12]
 8013aee:	2301      	movs	r3, #1
 8013af0:	9302      	str	r3, [sp, #8]
 8013af2:	2300      	movs	r3, #0
 8013af4:	9301      	str	r3, [sp, #4]
 8013af6:	2306      	movs	r3, #6
 8013af8:	9300      	str	r3, [sp, #0]
 8013afa:	2302      	movs	r3, #2
 8013afc:	2102      	movs	r1, #2
 8013afe:	f7ff f8a7 	bl	8012c50 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8013b02:	2319      	movs	r3, #25
 8013b04:	703b      	strb	r3, [r7, #0]
 8013b06:	23ed      	movs	r3, #237	; 0xed
 8013b08:	707b      	strb	r3, [r7, #1]
 8013b0a:	2382      	movs	r3, #130	; 0x82
 8013b0c:	70bb      	strb	r3, [r7, #2]
 8013b0e:	23ae      	movs	r3, #174	; 0xae
 8013b10:	70fb      	strb	r3, [r7, #3]
 8013b12:	23ed      	movs	r3, #237	; 0xed
 8013b14:	713b      	strb	r3, [r7, #4]
 8013b16:	2321      	movs	r3, #33	; 0x21
 8013b18:	717b      	strb	r3, [r7, #5]
 8013b1a:	234c      	movs	r3, #76	; 0x4c
 8013b1c:	71bb      	strb	r3, [r7, #6]
 8013b1e:	239d      	movs	r3, #157	; 0x9d
 8013b20:	71fb      	strb	r3, [r7, #7]
 8013b22:	2341      	movs	r3, #65	; 0x41
 8013b24:	723b      	strb	r3, [r7, #8]
 8013b26:	2345      	movs	r3, #69	; 0x45
 8013b28:	727b      	strb	r3, [r7, #9]
 8013b2a:	2322      	movs	r3, #34	; 0x22
 8013b2c:	72bb      	strb	r3, [r7, #10]
 8013b2e:	238e      	movs	r3, #142	; 0x8e
 8013b30:	72fb      	strb	r3, [r7, #11]
 8013b32:	2342      	movs	r3, #66	; 0x42
 8013b34:	733b      	strb	r3, [r7, #12]
 8013b36:	23fe      	movs	r3, #254	; 0xfe
 8013b38:	737b      	strb	r3, [r7, #13]
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	73bb      	strb	r3, [r7, #14]
 8013b3e:	2300      	movs	r3, #0
 8013b40:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8013b42:	4b0c      	ldr	r3, [pc, #48]	; (8013b74 <P2PS_STM_Init+0x134>)
 8013b44:	8818      	ldrh	r0, [r3, #0]
 8013b46:	463a      	mov	r2, r7
 8013b48:	4b0c      	ldr	r3, [pc, #48]	; (8013b7c <P2PS_STM_Init+0x13c>)
 8013b4a:	9305      	str	r3, [sp, #20]
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	9304      	str	r3, [sp, #16]
 8013b50:	230a      	movs	r3, #10
 8013b52:	9303      	str	r3, [sp, #12]
 8013b54:	2301      	movs	r3, #1
 8013b56:	9302      	str	r3, [sp, #8]
 8013b58:	2300      	movs	r3, #0
 8013b5a:	9301      	str	r3, [sp, #4]
 8013b5c:	2310      	movs	r3, #16
 8013b5e:	9300      	str	r3, [sp, #0]
 8013b60:	23c8      	movs	r3, #200	; 0xc8
 8013b62:	2102      	movs	r1, #2
 8013b64:	f7ff f874 	bl	8012c50 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8013b68:	bf00      	nop
}
 8013b6a:	3710      	adds	r7, #16
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	08013979 	.word	0x08013979
 8013b74:	20000358 	.word	0x20000358
 8013b78:	2000035a 	.word	0x2000035a
 8013b7c:	2000035c 	.word	0x2000035c

08013b80 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload, uint16_t datalen)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b086      	sub	sp, #24
 8013b84:	af02      	add	r7, sp, #8
 8013b86:	4603      	mov	r3, r0
 8013b88:	6039      	str	r1, [r7, #0]
 8013b8a:	80fb      	strh	r3, [r7, #6]
 8013b8c:	4613      	mov	r3, r2
 8013b8e:	80bb      	strh	r3, [r7, #4]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8013b90:	2392      	movs	r3, #146	; 0x92
 8013b92:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8013b94:	88fb      	ldrh	r3, [r7, #6]
 8013b96:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d10e      	bne.n	8013bbc <P2PS_STM_App_Update_Char+0x3c>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8013b9e:	4b0a      	ldr	r3, [pc, #40]	; (8013bc8 <P2PS_STM_App_Update_Char+0x48>)
 8013ba0:	8818      	ldrh	r0, [r3, #0]
 8013ba2:	4b09      	ldr	r3, [pc, #36]	; (8013bc8 <P2PS_STM_App_Update_Char+0x48>)
 8013ba4:	8899      	ldrh	r1, [r3, #4]
 8013ba6:	88bb      	ldrh	r3, [r7, #4]
 8013ba8:	b2da      	uxtb	r2, r3
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	9300      	str	r3, [sp, #0]
 8013bae:	4613      	mov	r3, r2
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	f7ff f955 	bl	8012e60 <aci_gatt_update_char_value>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
							  datalen, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8013bba:	e000      	b.n	8013bbe <P2PS_STM_App_Update_Char+0x3e>

    default:
      break;
 8013bbc:	bf00      	nop
  }

  return result;
 8013bbe:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3710      	adds	r7, #16
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	20000358 	.word	0x20000358

08013bcc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b088      	sub	sp, #32
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8013bd4:	f107 030c 	add.w	r3, r7, #12
 8013bd8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	212e      	movs	r1, #46	; 0x2e
 8013be4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8013be8:	f000 f94c 	bl	8013e84 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8013bec:	69fb      	ldr	r3, [r7, #28]
 8013bee:	330b      	adds	r3, #11
 8013bf0:	78db      	ldrb	r3, [r3, #3]
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	3720      	adds	r7, #32
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b088      	sub	sp, #32
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8013c02:	f107 030c 	add.w	r3, r7, #12
 8013c06:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	210f      	movs	r1, #15
 8013c12:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8013c16:	f000 f935 	bl	8013e84 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8013c1a:	69fb      	ldr	r3, [r7, #28]
 8013c1c:	330b      	adds	r3, #11
 8013c1e:	78db      	ldrb	r3, [r3, #3]
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	3720      	adds	r7, #32
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b088      	sub	sp, #32
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8013c30:	f107 030c 	add.w	r3, r7, #12
 8013c34:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	2110      	movs	r1, #16
 8013c3c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8013c40:	f000 f920 	bl	8013e84 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8013c44:	69fb      	ldr	r3, [r7, #28]
 8013c46:	330b      	adds	r3, #11
 8013c48:	78db      	ldrb	r3, [r3, #3]
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3720      	adds	r7, #32
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
	...

08013c54 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8013c54:	b480      	push	{r7}
 8013c56:	b08b      	sub	sp, #44	; 0x2c
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8013c60:	2300      	movs	r3, #0
 8013c62:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8013c64:	2300      	movs	r3, #0
 8013c66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8013c70:	2300      	movs	r3, #0
 8013c72:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8013c7c:	4b4a      	ldr	r3, [pc, #296]	; (8013da8 <SHCI_GetWirelessFwInfo+0x154>)
 8013c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c80:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c84:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	009b      	lsls	r3, r3, #2
 8013c8a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8013c8e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	4a44      	ldr	r2, [pc, #272]	; (8013dac <SHCI_GetWirelessFwInfo+0x158>)
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d10f      	bne.n	8013cc0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	695b      	ldr	r3, [r3, #20]
 8013ca4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	699b      	ldr	r3, [r3, #24]
 8013caa:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	69db      	ldr	r3, [r3, #28]
 8013cb0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	68db      	ldr	r3, [r3, #12]
 8013cb6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	691b      	ldr	r3, [r3, #16]
 8013cbc:	617b      	str	r3, [r7, #20]
 8013cbe:	e01a      	b.n	8013cf6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8013cc8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8013ccc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	691b      	ldr	r3, [r3, #16]
 8013cd4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	695b      	ldr	r3, [r3, #20]
 8013cdc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	699b      	ldr	r3, [r3, #24]
 8013ce4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	689b      	ldr	r3, [r3, #8]
 8013cf4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8013cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf8:	0e1b      	lsrs	r3, r3, #24
 8013cfa:	b2da      	uxtb	r2, r3
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d02:	0c1b      	lsrs	r3, r3, #16
 8013d04:	b2da      	uxtb	r2, r3
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0c:	0a1b      	lsrs	r3, r3, #8
 8013d0e:	b2da      	uxtb	r2, r3
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8013d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d16:	091b      	lsrs	r3, r3, #4
 8013d18:	b2db      	uxtb	r3, r3
 8013d1a:	f003 030f 	and.w	r3, r3, #15
 8013d1e:	b2da      	uxtb	r2, r3
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8013d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d26:	b2db      	uxtb	r3, r3
 8013d28:	f003 030f 	and.w	r3, r3, #15
 8013d2c:	b2da      	uxtb	r2, r3
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013d32:	6a3b      	ldr	r3, [r7, #32]
 8013d34:	0e1b      	lsrs	r3, r3, #24
 8013d36:	b2da      	uxtb	r2, r3
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8013d3c:	6a3b      	ldr	r3, [r7, #32]
 8013d3e:	0c1b      	lsrs	r3, r3, #16
 8013d40:	b2da      	uxtb	r2, r3
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8013d46:	6a3b      	ldr	r3, [r7, #32]
 8013d48:	0a1b      	lsrs	r3, r3, #8
 8013d4a:	b2da      	uxtb	r2, r3
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8013d50:	6a3b      	ldr	r3, [r7, #32]
 8013d52:	b2da      	uxtb	r2, r3
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	b2da      	uxtb	r2, r3
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8013d60:	69bb      	ldr	r3, [r7, #24]
 8013d62:	0e1b      	lsrs	r3, r3, #24
 8013d64:	b2da      	uxtb	r2, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013d6a:	69bb      	ldr	r3, [r7, #24]
 8013d6c:	0c1b      	lsrs	r3, r3, #16
 8013d6e:	b2da      	uxtb	r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	0a1b      	lsrs	r3, r3, #8
 8013d78:	b2da      	uxtb	r2, r3
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	0e1b      	lsrs	r3, r3, #24
 8013d82:	b2da      	uxtb	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	0c1b      	lsrs	r3, r3, #16
 8013d8c:	b2da      	uxtb	r2, r3
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8013d92:	697b      	ldr	r3, [r7, #20]
 8013d94:	b2da      	uxtb	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8013d9a:	2300      	movs	r3, #0
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	372c      	adds	r7, #44	; 0x2c
 8013da0:	46bd      	mov	sp, r7
 8013da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da6:	4770      	bx	lr
 8013da8:	58004000 	.word	0x58004000
 8013dac:	a94656b9 	.word	0xa94656b9

08013db0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b082      	sub	sp, #8
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	4a08      	ldr	r2, [pc, #32]	; (8013de0 <shci_init+0x30>)
 8013dc0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8013dc2:	4a08      	ldr	r2, [pc, #32]	; (8013de4 <shci_init+0x34>)
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8013dc8:	4806      	ldr	r0, [pc, #24]	; (8013de4 <shci_init+0x34>)
 8013dca:	f000 f915 	bl	8013ff8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f000 f898 	bl	8013f08 <TlInit>

  return;
 8013dd8:	bf00      	nop
}
 8013dda:	3708      	adds	r7, #8
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}
 8013de0:	20003ce0 	.word	0x20003ce0
 8013de4:	20003cc0 	.word	0x20003cc0

08013de8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b084      	sub	sp, #16
 8013dec:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013dee:	4822      	ldr	r0, [pc, #136]	; (8013e78 <shci_user_evt_proc+0x90>)
 8013df0:	f000 f926 	bl	8014040 <LST_is_empty>
 8013df4:	4603      	mov	r3, r0
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d12b      	bne.n	8013e52 <shci_user_evt_proc+0x6a>
 8013dfa:	4b20      	ldr	r3, [pc, #128]	; (8013e7c <shci_user_evt_proc+0x94>)
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d027      	beq.n	8013e52 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8013e02:	f107 030c 	add.w	r3, r7, #12
 8013e06:	4619      	mov	r1, r3
 8013e08:	481b      	ldr	r0, [pc, #108]	; (8013e78 <shci_user_evt_proc+0x90>)
 8013e0a:	f000 f9a8 	bl	801415e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8013e0e:	4b1c      	ldr	r3, [pc, #112]	; (8013e80 <shci_user_evt_proc+0x98>)
 8013e10:	69db      	ldr	r3, [r3, #28]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d00c      	beq.n	8013e30 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8013e1e:	4b18      	ldr	r3, [pc, #96]	; (8013e80 <shci_user_evt_proc+0x98>)
 8013e20:	69db      	ldr	r3, [r3, #28]
 8013e22:	1d3a      	adds	r2, r7, #4
 8013e24:	4610      	mov	r0, r2
 8013e26:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8013e28:	793a      	ldrb	r2, [r7, #4]
 8013e2a:	4b14      	ldr	r3, [pc, #80]	; (8013e7c <shci_user_evt_proc+0x94>)
 8013e2c:	701a      	strb	r2, [r3, #0]
 8013e2e:	e002      	b.n	8013e36 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013e30:	4b12      	ldr	r3, [pc, #72]	; (8013e7c <shci_user_evt_proc+0x94>)
 8013e32:	2201      	movs	r2, #1
 8013e34:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8013e36:	4b11      	ldr	r3, [pc, #68]	; (8013e7c <shci_user_evt_proc+0x94>)
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d004      	beq.n	8013e48 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	4618      	mov	r0, r3
 8013e42:	f000 fc4d 	bl	80146e0 <TL_MM_EvtDone>
 8013e46:	e004      	b.n	8013e52 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	480a      	ldr	r0, [pc, #40]	; (8013e78 <shci_user_evt_proc+0x90>)
 8013e4e:	f000 f919 	bl	8014084 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013e52:	4809      	ldr	r0, [pc, #36]	; (8013e78 <shci_user_evt_proc+0x90>)
 8013e54:	f000 f8f4 	bl	8014040 <LST_is_empty>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d107      	bne.n	8013e6e <shci_user_evt_proc+0x86>
 8013e5e:	4b07      	ldr	r3, [pc, #28]	; (8013e7c <shci_user_evt_proc+0x94>)
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d003      	beq.n	8013e6e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8013e66:	4804      	ldr	r0, [pc, #16]	; (8013e78 <shci_user_evt_proc+0x90>)
 8013e68:	f7ee fb8c 	bl	8002584 <shci_notify_asynch_evt>
  }


  return;
 8013e6c:	bf00      	nop
 8013e6e:	bf00      	nop
}
 8013e70:	3710      	adds	r7, #16
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
 8013e76:	bf00      	nop
 8013e78:	2000036c 	.word	0x2000036c
 8013e7c:	2000037c 	.word	0x2000037c
 8013e80:	20003cc0 	.word	0x20003cc0

08013e84 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	60ba      	str	r2, [r7, #8]
 8013e8c:	607b      	str	r3, [r7, #4]
 8013e8e:	4603      	mov	r3, r0
 8013e90:	81fb      	strh	r3, [r7, #14]
 8013e92:	460b      	mov	r3, r1
 8013e94:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8013e96:	2000      	movs	r0, #0
 8013e98:	f000 f868 	bl	8013f6c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8013e9c:	4b17      	ldr	r3, [pc, #92]	; (8013efc <shci_send+0x78>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	89fa      	ldrh	r2, [r7, #14]
 8013ea2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8013ea6:	4b15      	ldr	r3, [pc, #84]	; (8013efc <shci_send+0x78>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	7b7a      	ldrb	r2, [r7, #13]
 8013eac:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8013eae:	4b13      	ldr	r3, [pc, #76]	; (8013efc <shci_send+0x78>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	330c      	adds	r3, #12
 8013eb4:	7b7a      	ldrb	r2, [r7, #13]
 8013eb6:	68b9      	ldr	r1, [r7, #8]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f003 fde0 	bl	8017a7e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8013ebe:	4b10      	ldr	r3, [pc, #64]	; (8013f00 <shci_send+0x7c>)
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8013ec4:	4b0f      	ldr	r3, [pc, #60]	; (8013f04 <shci_send+0x80>)
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	2100      	movs	r1, #0
 8013eca:	2000      	movs	r0, #0
 8013ecc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8013ece:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8013ed2:	f7ee fb6f 	bl	80025b4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f103 0008 	add.w	r0, r3, #8
 8013edc:	4b07      	ldr	r3, [pc, #28]	; (8013efc <shci_send+0x78>)
 8013ede:	6819      	ldr	r1, [r3, #0]
 8013ee0:	4b06      	ldr	r3, [pc, #24]	; (8013efc <shci_send+0x78>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	789b      	ldrb	r3, [r3, #2]
 8013ee6:	3303      	adds	r3, #3
 8013ee8:	461a      	mov	r2, r3
 8013eea:	f003 fdc8 	bl	8017a7e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013eee:	2001      	movs	r0, #1
 8013ef0:	f000 f83c 	bl	8013f6c <Cmd_SetStatus>

  return;
 8013ef4:	bf00      	nop
}
 8013ef6:	3710      	adds	r7, #16
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	20000378 	.word	0x20000378
 8013f00:	20003ce4 	.word	0x20003ce4
 8013f04:	20003cc0 	.word	0x20003cc0

08013f08 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b086      	sub	sp, #24
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8013f10:	4a10      	ldr	r2, [pc, #64]	; (8013f54 <TlInit+0x4c>)
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8013f16:	4810      	ldr	r0, [pc, #64]	; (8013f58 <TlInit+0x50>)
 8013f18:	f000 f882 	bl	8014020 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013f1c:	2001      	movs	r0, #1
 8013f1e:	f000 f825 	bl	8013f6c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013f22:	4b0e      	ldr	r3, [pc, #56]	; (8013f5c <TlInit+0x54>)
 8013f24:	2201      	movs	r2, #1
 8013f26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8013f28:	4b0d      	ldr	r3, [pc, #52]	; (8013f60 <TlInit+0x58>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d00c      	beq.n	8013f4a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8013f34:	4b0b      	ldr	r3, [pc, #44]	; (8013f64 <TlInit+0x5c>)
 8013f36:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8013f38:	4b0b      	ldr	r3, [pc, #44]	; (8013f68 <TlInit+0x60>)
 8013f3a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8013f3c:	4b08      	ldr	r3, [pc, #32]	; (8013f60 <TlInit+0x58>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	f107 020c 	add.w	r2, r7, #12
 8013f44:	4610      	mov	r0, r2
 8013f46:	4798      	blx	r3
  }

  return;
 8013f48:	bf00      	nop
 8013f4a:	bf00      	nop
}
 8013f4c:	3718      	adds	r7, #24
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	20000378 	.word	0x20000378
 8013f58:	2000036c 	.word	0x2000036c
 8013f5c:	2000037c 	.word	0x2000037c
 8013f60:	20003cc0 	.word	0x20003cc0
 8013f64:	08013fbd 	.word	0x08013fbd
 8013f68:	08013fd5 	.word	0x08013fd5

08013f6c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b082      	sub	sp, #8
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	4603      	mov	r3, r0
 8013f74:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8013f76:	79fb      	ldrb	r3, [r7, #7]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d10b      	bne.n	8013f94 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8013f7c:	4b0d      	ldr	r3, [pc, #52]	; (8013fb4 <Cmd_SetStatus+0x48>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d003      	beq.n	8013f8c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8013f84:	4b0b      	ldr	r3, [pc, #44]	; (8013fb4 <Cmd_SetStatus+0x48>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2000      	movs	r0, #0
 8013f8a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8013f8c:	4b0a      	ldr	r3, [pc, #40]	; (8013fb8 <Cmd_SetStatus+0x4c>)
 8013f8e:	2200      	movs	r2, #0
 8013f90:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8013f92:	e00b      	b.n	8013fac <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8013f94:	4b08      	ldr	r3, [pc, #32]	; (8013fb8 <Cmd_SetStatus+0x4c>)
 8013f96:	2201      	movs	r2, #1
 8013f98:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8013f9a:	4b06      	ldr	r3, [pc, #24]	; (8013fb4 <Cmd_SetStatus+0x48>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d004      	beq.n	8013fac <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8013fa2:	4b04      	ldr	r3, [pc, #16]	; (8013fb4 <Cmd_SetStatus+0x48>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2001      	movs	r0, #1
 8013fa8:	4798      	blx	r3
  return;
 8013faa:	bf00      	nop
 8013fac:	bf00      	nop
}
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	20003ce0 	.word	0x20003ce0
 8013fb8:	20000374 	.word	0x20000374

08013fbc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b082      	sub	sp, #8
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8013fc4:	2000      	movs	r0, #0
 8013fc6:	f7ee faea 	bl	800259e <shci_cmd_resp_release>

  return;
 8013fca:	bf00      	nop
}
 8013fcc:	3708      	adds	r7, #8
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}
	...

08013fd4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b082      	sub	sp, #8
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8013fdc:	6879      	ldr	r1, [r7, #4]
 8013fde:	4805      	ldr	r0, [pc, #20]	; (8013ff4 <TlUserEvtReceived+0x20>)
 8013fe0:	f000 f876 	bl	80140d0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8013fe4:	4803      	ldr	r0, [pc, #12]	; (8013ff4 <TlUserEvtReceived+0x20>)
 8013fe6:	f7ee facd 	bl	8002584 <shci_notify_asynch_evt>

  return;
 8013fea:	bf00      	nop
}
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	2000036c 	.word	0x2000036c

08013ff8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	4a05      	ldr	r2, [pc, #20]	; (8014018 <shci_register_io_bus+0x20>)
 8014004:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4a04      	ldr	r2, [pc, #16]	; (801401c <shci_register_io_bus+0x24>)
 801400a:	611a      	str	r2, [r3, #16]

  return;
 801400c:	bf00      	nop
}
 801400e:	370c      	adds	r7, #12
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr
 8014018:	0801456d 	.word	0x0801456d
 801401c:	080145c1 	.word	0x080145c1

08014020 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8014020:	b480      	push	{r7}
 8014022:	b083      	sub	sp, #12
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	687a      	ldr	r2, [r7, #4]
 8014032:	605a      	str	r2, [r3, #4]
}
 8014034:	bf00      	nop
 8014036:	370c      	adds	r7, #12
 8014038:	46bd      	mov	sp, r7
 801403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403e:	4770      	bx	lr

08014040 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8014040:	b480      	push	{r7}
 8014042:	b087      	sub	sp, #28
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014048:	f3ef 8310 	mrs	r3, PRIMASK
 801404c:	60fb      	str	r3, [r7, #12]
  return(result);
 801404e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014052:	b672      	cpsid	i
}
 8014054:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	429a      	cmp	r2, r3
 801405e:	d102      	bne.n	8014066 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8014060:	2301      	movs	r3, #1
 8014062:	75fb      	strb	r3, [r7, #23]
 8014064:	e001      	b.n	801406a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8014066:	2300      	movs	r3, #0
 8014068:	75fb      	strb	r3, [r7, #23]
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	f383 8810 	msr	PRIMASK, r3
}
 8014074:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8014076:	7dfb      	ldrb	r3, [r7, #23]
}
 8014078:	4618      	mov	r0, r3
 801407a:	371c      	adds	r7, #28
 801407c:	46bd      	mov	sp, r7
 801407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014082:	4770      	bx	lr

08014084 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8014084:	b480      	push	{r7}
 8014086:	b087      	sub	sp, #28
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801408e:	f3ef 8310 	mrs	r3, PRIMASK
 8014092:	60fb      	str	r3, [r7, #12]
  return(result);
 8014094:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014096:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014098:	b672      	cpsid	i
}
 801409a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	687a      	ldr	r2, [r7, #4]
 80140a8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	683a      	ldr	r2, [r7, #0]
 80140ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	683a      	ldr	r2, [r7, #0]
 80140b6:	605a      	str	r2, [r3, #4]
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	f383 8810 	msr	PRIMASK, r3
}
 80140c2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80140c4:	bf00      	nop
 80140c6:	371c      	adds	r7, #28
 80140c8:	46bd      	mov	sp, r7
 80140ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ce:	4770      	bx	lr

080140d0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80140d0:	b480      	push	{r7}
 80140d2:	b087      	sub	sp, #28
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140da:	f3ef 8310 	mrs	r3, PRIMASK
 80140de:	60fb      	str	r3, [r7, #12]
  return(result);
 80140e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80140e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80140e4:	b672      	cpsid	i
}
 80140e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	685a      	ldr	r2, [r3, #4]
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	683a      	ldr	r2, [r7, #0]
 80140fa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	685b      	ldr	r3, [r3, #4]
 8014100:	683a      	ldr	r2, [r7, #0]
 8014102:	601a      	str	r2, [r3, #0]
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014108:	693b      	ldr	r3, [r7, #16]
 801410a:	f383 8810 	msr	PRIMASK, r3
}
 801410e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014110:	bf00      	nop
 8014112:	371c      	adds	r7, #28
 8014114:	46bd      	mov	sp, r7
 8014116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411a:	4770      	bx	lr

0801411c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 801411c:	b480      	push	{r7}
 801411e:	b087      	sub	sp, #28
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014124:	f3ef 8310 	mrs	r3, PRIMASK
 8014128:	60fb      	str	r3, [r7, #12]
  return(result);
 801412a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801412c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801412e:	b672      	cpsid	i
}
 8014130:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	6812      	ldr	r2, [r2, #0]
 801413a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	6852      	ldr	r2, [r2, #4]
 8014144:	605a      	str	r2, [r3, #4]
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	f383 8810 	msr	PRIMASK, r3
}
 8014150:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014152:	bf00      	nop
 8014154:	371c      	adds	r7, #28
 8014156:	46bd      	mov	sp, r7
 8014158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415c:	4770      	bx	lr

0801415e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801415e:	b580      	push	{r7, lr}
 8014160:	b086      	sub	sp, #24
 8014162:	af00      	add	r7, sp, #0
 8014164:	6078      	str	r0, [r7, #4]
 8014166:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014168:	f3ef 8310 	mrs	r3, PRIMASK
 801416c:	60fb      	str	r3, [r7, #12]
  return(result);
 801416e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014170:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014172:	b672      	cpsid	i
}
 8014174:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	4618      	mov	r0, r3
 8014184:	f7ff ffca 	bl	801411c <LST_remove_node>
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801418c:	693b      	ldr	r3, [r7, #16]
 801418e:	f383 8810 	msr	PRIMASK, r3
}
 8014192:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014194:	bf00      	nop
 8014196:	3718      	adds	r7, #24
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}

0801419c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 801419c:	b480      	push	{r7}
 801419e:	af00      	add	r7, sp, #0
  return;
 80141a0:	bf00      	nop
}
 80141a2:	46bd      	mov	sp, r7
 80141a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a8:	4770      	bx	lr

080141aa <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80141aa:	b480      	push	{r7}
 80141ac:	af00      	add	r7, sp, #0
  return;
 80141ae:	bf00      	nop
}
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr

080141b8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80141b8:	b480      	push	{r7}
 80141ba:	af00      	add	r7, sp, #0
  return;
 80141bc:	bf00      	nop
}
 80141be:	46bd      	mov	sp, r7
 80141c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c4:	4770      	bx	lr

080141c6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80141c6:	b480      	push	{r7}
 80141c8:	af00      	add	r7, sp, #0
  return;
 80141ca:	bf00      	nop
}
 80141cc:	46bd      	mov	sp, r7
 80141ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d2:	4770      	bx	lr

080141d4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80141d4:	b480      	push	{r7}
 80141d6:	af00      	add	r7, sp, #0
  return;
 80141d8:	bf00      	nop
}
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr

080141e2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80141e2:	b480      	push	{r7}
 80141e4:	af00      	add	r7, sp, #0
  return;
 80141e6:	bf00      	nop
}
 80141e8:	46bd      	mov	sp, r7
 80141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ee:	4770      	bx	lr

080141f0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80141f0:	b480      	push	{r7}
 80141f2:	af00      	add	r7, sp, #0
  return;
 80141f4:	bf00      	nop
}
 80141f6:	46bd      	mov	sp, r7
 80141f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fc:	4770      	bx	lr

080141fe <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80141fe:	b480      	push	{r7}
 8014200:	af00      	add	r7, sp, #0
  return;
 8014202:	bf00      	nop
}
 8014204:	46bd      	mov	sp, r7
 8014206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420a:	4770      	bx	lr

0801420c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801420c:	b480      	push	{r7}
 801420e:	af00      	add	r7, sp, #0
  return;
 8014210:	bf00      	nop
}
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr

0801421a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801421a:	b480      	push	{r7}
 801421c:	af00      	add	r7, sp, #0
  return;
 801421e:	bf00      	nop
}
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr

08014228 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8014228:	b480      	push	{r7}
 801422a:	af00      	add	r7, sp, #0
  return;
 801422c:	bf00      	nop
}
 801422e:	46bd      	mov	sp, r7
 8014230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014234:	4770      	bx	lr

08014236 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8014236:	b480      	push	{r7}
 8014238:	af00      	add	r7, sp, #0
  return;
 801423a:	bf00      	nop
}
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr

08014244 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 8014244:	b480      	push	{r7}
 8014246:	af00      	add	r7, sp, #0
  return;
 8014248:	bf00      	nop
}
 801424a:	46bd      	mov	sp, r7
 801424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014250:	4770      	bx	lr

08014252 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8014252:	b480      	push	{r7}
 8014254:	af00      	add	r7, sp, #0
  return;
 8014256:	bf00      	nop
}
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr

08014260 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8014260:	b480      	push	{r7}
 8014262:	af00      	add	r7, sp, #0
  return;
 8014264:	bf00      	nop
}
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr

0801426e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 801426e:	b480      	push	{r7}
 8014270:	af00      	add	r7, sp, #0
  return;
 8014272:	bf00      	nop
}
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr

0801427c <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 801427c:	b480      	push	{r7}
 801427e:	af00      	add	r7, sp, #0
  return;
 8014280:	bf00      	nop
}
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr
	...

0801428c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 801428c:	b580      	push	{r7, lr}
 801428e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8014290:	4b04      	ldr	r3, [pc, #16]	; (80142a4 <SVCCTL_Init+0x18>)
 8014292:	2200      	movs	r2, #0
 8014294:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8014296:	4b04      	ldr	r3, [pc, #16]	; (80142a8 <SVCCTL_Init+0x1c>)
 8014298:	2200      	movs	r2, #0
 801429a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 801429c:	f000 f806 	bl	80142ac <SVCCTL_SvcInit>

  return;
 80142a0:	bf00      	nop
}
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	20000360 	.word	0x20000360
 80142a8:	20000368 	.word	0x20000368

080142ac <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	af00      	add	r7, sp, #0
  BAS_Init();
 80142b0:	f7ff ff74 	bl	801419c <BAS_Init>

  BLS_Init();
 80142b4:	f7ff ff79 	bl	80141aa <BLS_Init>

  CRS_STM_Init();
 80142b8:	f7ff ff7e 	bl	80141b8 <CRS_STM_Init>

  DIS_Init();
 80142bc:	f7ff ff83 	bl	80141c6 <DIS_Init>

  EDS_STM_Init();
 80142c0:	f7ff ff88 	bl	80141d4 <EDS_STM_Init>

  HIDS_Init();
 80142c4:	f7ff ff8d 	bl	80141e2 <HIDS_Init>

  HRS_Init();
 80142c8:	f7ff ff92 	bl	80141f0 <HRS_Init>

  HTS_Init();
 80142cc:	f7ff ff97 	bl	80141fe <HTS_Init>

  IAS_Init();
 80142d0:	f7ff ff9c 	bl	801420c <IAS_Init>

  LLS_Init();
 80142d4:	f7ff ffa1 	bl	801421a <LLS_Init>

  TPS_Init();
 80142d8:	f7ff ffa6 	bl	8014228 <TPS_Init>

  MOTENV_STM_Init();
 80142dc:	f7ff ffab 	bl	8014236 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80142e0:	f7ff fbae 	bl	8013a40 <P2PS_STM_Init>

  ZDD_STM_Init();
 80142e4:	f7ff ffae 	bl	8014244 <ZDD_STM_Init>

  OTAS_STM_Init();
 80142e8:	f7ff ffb3 	bl	8014252 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80142ec:	f7ff ffbf 	bl	801426e <BVOPUS_STM_Init>

  MESH_Init();
 80142f0:	f7ff ffb6 	bl	8014260 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80142f4:	f7ff ffc2 	bl	801427c <SVCCTL_InitCustomSvc>
  
  return;
 80142f8:	bf00      	nop
}
 80142fa:	bd80      	pop	{r7, pc}

080142fc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80142fc:	b480      	push	{r7}
 80142fe:	b083      	sub	sp, #12
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8014304:	4b09      	ldr	r3, [pc, #36]	; (801432c <SVCCTL_RegisterSvcHandler+0x30>)
 8014306:	791b      	ldrb	r3, [r3, #4]
 8014308:	4619      	mov	r1, r3
 801430a:	4a08      	ldr	r2, [pc, #32]	; (801432c <SVCCTL_RegisterSvcHandler+0x30>)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8014312:	4b06      	ldr	r3, [pc, #24]	; (801432c <SVCCTL_RegisterSvcHandler+0x30>)
 8014314:	791b      	ldrb	r3, [r3, #4]
 8014316:	3301      	adds	r3, #1
 8014318:	b2da      	uxtb	r2, r3
 801431a:	4b04      	ldr	r3, [pc, #16]	; (801432c <SVCCTL_RegisterSvcHandler+0x30>)
 801431c:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801431e:	bf00      	nop
}
 8014320:	370c      	adds	r7, #12
 8014322:	46bd      	mov	sp, r7
 8014324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014328:	4770      	bx	lr
 801432a:	bf00      	nop
 801432c:	20000360 	.word	0x20000360

08014330 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b086      	sub	sp, #24
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	3301      	adds	r3, #1
 801433c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801433e:	2300      	movs	r3, #0
 8014340:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	2bff      	cmp	r3, #255	; 0xff
 8014348:	d125      	bne.n	8014396 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	3302      	adds	r3, #2
 801434e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	881b      	ldrh	r3, [r3, #0]
 8014354:	b29b      	uxth	r3, r3
 8014356:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801435a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801435e:	d118      	bne.n	8014392 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8014360:	2300      	movs	r3, #0
 8014362:	757b      	strb	r3, [r7, #21]
 8014364:	e00d      	b.n	8014382 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8014366:	7d7b      	ldrb	r3, [r7, #21]
 8014368:	4a1a      	ldr	r2, [pc, #104]	; (80143d4 <SVCCTL_UserEvtRx+0xa4>)
 801436a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	4798      	blx	r3
 8014372:	4603      	mov	r3, r0
 8014374:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8014376:	7dfb      	ldrb	r3, [r7, #23]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d108      	bne.n	801438e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801437c:	7d7b      	ldrb	r3, [r7, #21]
 801437e:	3301      	adds	r3, #1
 8014380:	757b      	strb	r3, [r7, #21]
 8014382:	4b14      	ldr	r3, [pc, #80]	; (80143d4 <SVCCTL_UserEvtRx+0xa4>)
 8014384:	791b      	ldrb	r3, [r3, #4]
 8014386:	7d7a      	ldrb	r2, [r7, #21]
 8014388:	429a      	cmp	r2, r3
 801438a:	d3ec      	bcc.n	8014366 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 801438c:	e002      	b.n	8014394 <SVCCTL_UserEvtRx+0x64>
              break;
 801438e:	bf00      	nop
          break;
 8014390:	e000      	b.n	8014394 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8014392:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8014394:	e000      	b.n	8014398 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8014396:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8014398:	7dfb      	ldrb	r3, [r7, #23]
 801439a:	2b02      	cmp	r3, #2
 801439c:	d00f      	beq.n	80143be <SVCCTL_UserEvtRx+0x8e>
 801439e:	2b02      	cmp	r3, #2
 80143a0:	dc10      	bgt.n	80143c4 <SVCCTL_UserEvtRx+0x94>
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d002      	beq.n	80143ac <SVCCTL_UserEvtRx+0x7c>
 80143a6:	2b01      	cmp	r3, #1
 80143a8:	d006      	beq.n	80143b8 <SVCCTL_UserEvtRx+0x88>
 80143aa:	e00b      	b.n	80143c4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f7f0 fbe7 	bl	8004b80 <SVCCTL_App_Notification>
 80143b2:	4603      	mov	r3, r0
 80143b4:	75bb      	strb	r3, [r7, #22]
      break;
 80143b6:	e008      	b.n	80143ca <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80143b8:	2301      	movs	r3, #1
 80143ba:	75bb      	strb	r3, [r7, #22]
      break;
 80143bc:	e005      	b.n	80143ca <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80143be:	2300      	movs	r3, #0
 80143c0:	75bb      	strb	r3, [r7, #22]
      break;
 80143c2:	e002      	b.n	80143ca <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80143c4:	2301      	movs	r3, #1
 80143c6:	75bb      	strb	r3, [r7, #22]
      break;
 80143c8:	bf00      	nop
  }

  return (return_status);
 80143ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3718      	adds	r7, #24
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}
 80143d4:	20000360 	.word	0x20000360

080143d8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80143dc:	f7f1 fd86 	bl	8005eec <HW_IPCC_Enable>

  return;
 80143e0:	bf00      	nop
}
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <TL_Init>:


void TL_Init( void )
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80143e8:	4b10      	ldr	r3, [pc, #64]	; (801442c <TL_Init+0x48>)
 80143ea:	4a11      	ldr	r2, [pc, #68]	; (8014430 <TL_Init+0x4c>)
 80143ec:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80143ee:	4b0f      	ldr	r3, [pc, #60]	; (801442c <TL_Init+0x48>)
 80143f0:	4a10      	ldr	r2, [pc, #64]	; (8014434 <TL_Init+0x50>)
 80143f2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80143f4:	4b0d      	ldr	r3, [pc, #52]	; (801442c <TL_Init+0x48>)
 80143f6:	4a10      	ldr	r2, [pc, #64]	; (8014438 <TL_Init+0x54>)
 80143f8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80143fa:	4b0c      	ldr	r3, [pc, #48]	; (801442c <TL_Init+0x48>)
 80143fc:	4a0f      	ldr	r2, [pc, #60]	; (801443c <TL_Init+0x58>)
 80143fe:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8014400:	4b0a      	ldr	r3, [pc, #40]	; (801442c <TL_Init+0x48>)
 8014402:	4a0f      	ldr	r2, [pc, #60]	; (8014440 <TL_Init+0x5c>)
 8014404:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8014406:	4b09      	ldr	r3, [pc, #36]	; (801442c <TL_Init+0x48>)
 8014408:	4a0e      	ldr	r2, [pc, #56]	; (8014444 <TL_Init+0x60>)
 801440a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 801440c:	4b07      	ldr	r3, [pc, #28]	; (801442c <TL_Init+0x48>)
 801440e:	4a0e      	ldr	r2, [pc, #56]	; (8014448 <TL_Init+0x64>)
 8014410:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8014412:	4b06      	ldr	r3, [pc, #24]	; (801442c <TL_Init+0x48>)
 8014414:	4a0d      	ldr	r2, [pc, #52]	; (801444c <TL_Init+0x68>)
 8014416:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8014418:	4b04      	ldr	r3, [pc, #16]	; (801442c <TL_Init+0x48>)
 801441a:	4a0d      	ldr	r2, [pc, #52]	; (8014450 <TL_Init+0x6c>)
 801441c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801441e:	4b03      	ldr	r3, [pc, #12]	; (801442c <TL_Init+0x48>)
 8014420:	4a0c      	ldr	r2, [pc, #48]	; (8014454 <TL_Init+0x70>)
 8014422:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8014424:	f7f1 fd76 	bl	8005f14 <HW_IPCC_Init>

  return;
 8014428:	bf00      	nop
}
 801442a:	bd80      	pop	{r7, pc}
 801442c:	20030000 	.word	0x20030000
 8014430:	20030134 	.word	0x20030134
 8014434:	20030154 	.word	0x20030154
 8014438:	20030164 	.word	0x20030164
 801443c:	20030174 	.word	0x20030174
 8014440:	2003017c 	.word	0x2003017c
 8014444:	20030184 	.word	0x20030184
 8014448:	2003018c 	.word	0x2003018c
 801444c:	200301a8 	.word	0x200301a8
 8014450:	200301ac 	.word	0x200301ac
 8014454:	200301b8 	.word	0x200301b8

08014458 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8014464:	4811      	ldr	r0, [pc, #68]	; (80144ac <TL_BLE_Init+0x54>)
 8014466:	f7ff fddb 	bl	8014020 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 801446a:	4b11      	ldr	r3, [pc, #68]	; (80144b0 <TL_BLE_Init+0x58>)
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	689a      	ldr	r2, [r3, #8]
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	68da      	ldr	r2, [r3, #12]
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	4a0c      	ldr	r2, [pc, #48]	; (80144b4 <TL_BLE_Init+0x5c>)
 8014484:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	4a08      	ldr	r2, [pc, #32]	; (80144ac <TL_BLE_Init+0x54>)
 801448a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 801448c:	f7f1 fd58 	bl	8005f40 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	4a08      	ldr	r2, [pc, #32]	; (80144b8 <TL_BLE_Init+0x60>)
 8014496:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	685b      	ldr	r3, [r3, #4]
 801449c:	4a07      	ldr	r2, [pc, #28]	; (80144bc <TL_BLE_Init+0x64>)
 801449e:	6013      	str	r3, [r2, #0]

  return 0;
 80144a0:	2300      	movs	r3, #0
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3710      	adds	r7, #16
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	200301d4 	.word	0x200301d4
 80144b0:	20030000 	.word	0x20030000
 80144b4:	20030a58 	.word	0x20030a58
 80144b8:	20003cf0 	.word	0x20003cf0
 80144bc:	20003cf4 	.word	0x20003cf4

080144c0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	460b      	mov	r3, r1
 80144ca:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80144cc:	4b09      	ldr	r3, [pc, #36]	; (80144f4 <TL_BLE_SendCmd+0x34>)
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2201      	movs	r2, #1
 80144d4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80144d6:	4b07      	ldr	r3, [pc, #28]	; (80144f4 <TL_BLE_SendCmd+0x34>)
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	4619      	mov	r1, r3
 80144de:	2001      	movs	r0, #1
 80144e0:	f000 f96c 	bl	80147bc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80144e4:	f7f1 fd36 	bl	8005f54 <HW_IPCC_BLE_SendCmd>

  return 0;
 80144e8:	2300      	movs	r3, #0
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3708      	adds	r7, #8
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	20030000 	.word	0x20030000

080144f8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80144fe:	e01c      	b.n	801453a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8014500:	1d3b      	adds	r3, r7, #4
 8014502:	4619      	mov	r1, r3
 8014504:	4812      	ldr	r0, [pc, #72]	; (8014550 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8014506:	f7ff fe2a 	bl	801415e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	7a5b      	ldrb	r3, [r3, #9]
 801450e:	2b0f      	cmp	r3, #15
 8014510:	d003      	beq.n	801451a <HW_IPCC_BLE_RxEvtNot+0x22>
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	7a5b      	ldrb	r3, [r3, #9]
 8014516:	2b0e      	cmp	r3, #14
 8014518:	d105      	bne.n	8014526 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	4619      	mov	r1, r3
 801451e:	2002      	movs	r0, #2
 8014520:	f000 f94c 	bl	80147bc <OutputDbgTrace>
 8014524:	e004      	b.n	8014530 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	4619      	mov	r1, r3
 801452a:	2003      	movs	r0, #3
 801452c:	f000 f946 	bl	80147bc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8014530:	4b08      	ldr	r3, [pc, #32]	; (8014554 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	687a      	ldr	r2, [r7, #4]
 8014536:	4610      	mov	r0, r2
 8014538:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 801453a:	4805      	ldr	r0, [pc, #20]	; (8014550 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801453c:	f7ff fd80 	bl	8014040 <LST_is_empty>
 8014540:	4603      	mov	r3, r0
 8014542:	2b00      	cmp	r3, #0
 8014544:	d0dc      	beq.n	8014500 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8014546:	bf00      	nop
}
 8014548:	3708      	adds	r7, #8
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	200301d4 	.word	0x200301d4
 8014554:	20003cf0 	.word	0x20003cf0

08014558 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 801455c:	4b02      	ldr	r3, [pc, #8]	; (8014568 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	4798      	blx	r3

  return;
 8014562:	bf00      	nop
}
 8014564:	bd80      	pop	{r7, pc}
 8014566:	bf00      	nop
 8014568:	20003cf4 	.word	0x20003cf4

0801456c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b084      	sub	sp, #16
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8014578:	480d      	ldr	r0, [pc, #52]	; (80145b0 <TL_SYS_Init+0x44>)
 801457a:	f7ff fd51 	bl	8014020 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801457e:	4b0d      	ldr	r3, [pc, #52]	; (80145b4 <TL_SYS_Init+0x48>)
 8014580:	68db      	ldr	r3, [r3, #12]
 8014582:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	689a      	ldr	r2, [r3, #8]
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	4a08      	ldr	r2, [pc, #32]	; (80145b0 <TL_SYS_Init+0x44>)
 8014590:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8014592:	f7f1 fd01 	bl	8005f98 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	4a07      	ldr	r2, [pc, #28]	; (80145b8 <TL_SYS_Init+0x4c>)
 801459c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	685b      	ldr	r3, [r3, #4]
 80145a2:	4a06      	ldr	r2, [pc, #24]	; (80145bc <TL_SYS_Init+0x50>)
 80145a4:	6013      	str	r3, [r2, #0]

  return 0;
 80145a6:	2300      	movs	r3, #0
}
 80145a8:	4618      	mov	r0, r3
 80145aa:	3710      	adds	r7, #16
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}
 80145b0:	200301dc 	.word	0x200301dc
 80145b4:	20030000 	.word	0x20030000
 80145b8:	20003cf8 	.word	0x20003cf8
 80145bc:	20003cfc 	.word	0x20003cfc

080145c0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	460b      	mov	r3, r1
 80145ca:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80145cc:	4b09      	ldr	r3, [pc, #36]	; (80145f4 <TL_SYS_SendCmd+0x34>)
 80145ce:	68db      	ldr	r3, [r3, #12]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2210      	movs	r2, #16
 80145d4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80145d6:	4b07      	ldr	r3, [pc, #28]	; (80145f4 <TL_SYS_SendCmd+0x34>)
 80145d8:	68db      	ldr	r3, [r3, #12]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	4619      	mov	r1, r3
 80145de:	2004      	movs	r0, #4
 80145e0:	f000 f8ec 	bl	80147bc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80145e4:	f7f1 fce2 	bl	8005fac <HW_IPCC_SYS_SendCmd>

  return 0;
 80145e8:	2300      	movs	r3, #0
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3708      	adds	r7, #8
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}
 80145f2:	bf00      	nop
 80145f4:	20030000 	.word	0x20030000

080145f8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80145fc:	4b07      	ldr	r3, [pc, #28]	; (801461c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	4619      	mov	r1, r3
 8014604:	2005      	movs	r0, #5
 8014606:	f000 f8d9 	bl	80147bc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801460a:	4b05      	ldr	r3, [pc, #20]	; (8014620 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	4a03      	ldr	r2, [pc, #12]	; (801461c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8014610:	68d2      	ldr	r2, [r2, #12]
 8014612:	6812      	ldr	r2, [r2, #0]
 8014614:	4610      	mov	r0, r2
 8014616:	4798      	blx	r3

  return;
 8014618:	bf00      	nop
}
 801461a:	bd80      	pop	{r7, pc}
 801461c:	20030000 	.word	0x20030000
 8014620:	20003cf8 	.word	0x20003cf8

08014624 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801462a:	e00e      	b.n	801464a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 801462c:	1d3b      	adds	r3, r7, #4
 801462e:	4619      	mov	r1, r3
 8014630:	480b      	ldr	r0, [pc, #44]	; (8014660 <HW_IPCC_SYS_EvtNot+0x3c>)
 8014632:	f7ff fd94 	bl	801415e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	4619      	mov	r1, r3
 801463a:	2006      	movs	r0, #6
 801463c:	f000 f8be 	bl	80147bc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8014640:	4b08      	ldr	r3, [pc, #32]	; (8014664 <HW_IPCC_SYS_EvtNot+0x40>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	4610      	mov	r0, r2
 8014648:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801464a:	4805      	ldr	r0, [pc, #20]	; (8014660 <HW_IPCC_SYS_EvtNot+0x3c>)
 801464c:	f7ff fcf8 	bl	8014040 <LST_is_empty>
 8014650:	4603      	mov	r3, r0
 8014652:	2b00      	cmp	r3, #0
 8014654:	d0ea      	beq.n	801462c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8014656:	bf00      	nop
}
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	200301dc 	.word	0x200301dc
 8014664:	20003cfc 	.word	0x20003cfc

08014668 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014670:	4817      	ldr	r0, [pc, #92]	; (80146d0 <TL_MM_Init+0x68>)
 8014672:	f7ff fcd5 	bl	8014020 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8014676:	4817      	ldr	r0, [pc, #92]	; (80146d4 <TL_MM_Init+0x6c>)
 8014678:	f7ff fcd2 	bl	8014020 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801467c:	4b16      	ldr	r3, [pc, #88]	; (80146d8 <TL_MM_Init+0x70>)
 801467e:	691b      	ldr	r3, [r3, #16]
 8014680:	4a16      	ldr	r2, [pc, #88]	; (80146dc <TL_MM_Init+0x74>)
 8014682:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8014684:	4b15      	ldr	r3, [pc, #84]	; (80146dc <TL_MM_Init+0x74>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	6892      	ldr	r2, [r2, #8]
 801468c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801468e:	4b13      	ldr	r3, [pc, #76]	; (80146dc <TL_MM_Init+0x74>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	68d2      	ldr	r2, [r2, #12]
 8014696:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8014698:	4b10      	ldr	r3, [pc, #64]	; (80146dc <TL_MM_Init+0x74>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	4a0c      	ldr	r2, [pc, #48]	; (80146d0 <TL_MM_Init+0x68>)
 801469e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80146a0:	4b0e      	ldr	r3, [pc, #56]	; (80146dc <TL_MM_Init+0x74>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	6812      	ldr	r2, [r2, #0]
 80146a8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80146aa:	4b0c      	ldr	r3, [pc, #48]	; (80146dc <TL_MM_Init+0x74>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	6852      	ldr	r2, [r2, #4]
 80146b2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80146b4:	4b09      	ldr	r3, [pc, #36]	; (80146dc <TL_MM_Init+0x74>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	687a      	ldr	r2, [r7, #4]
 80146ba:	6912      	ldr	r2, [r2, #16]
 80146bc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80146be:	4b07      	ldr	r3, [pc, #28]	; (80146dc <TL_MM_Init+0x74>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	6952      	ldr	r2, [r2, #20]
 80146c6:	619a      	str	r2, [r3, #24]

  return;
 80146c8:	bf00      	nop
}
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	200301c4 	.word	0x200301c4
 80146d4:	20003ce8 	.word	0x20003ce8
 80146d8:	20030000 	.word	0x20030000
 80146dc:	20003d00 	.word	0x20003d00

080146e0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80146e8:	6879      	ldr	r1, [r7, #4]
 80146ea:	4807      	ldr	r0, [pc, #28]	; (8014708 <TL_MM_EvtDone+0x28>)
 80146ec:	f7ff fcf0 	bl	80140d0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80146f0:	6879      	ldr	r1, [r7, #4]
 80146f2:	2000      	movs	r0, #0
 80146f4:	f000 f862 	bl	80147bc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80146f8:	4804      	ldr	r0, [pc, #16]	; (801470c <TL_MM_EvtDone+0x2c>)
 80146fa:	f7f1 fc7d 	bl	8005ff8 <HW_IPCC_MM_SendFreeBuf>

  return;
 80146fe:	bf00      	nop
}
 8014700:	3708      	adds	r7, #8
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
 8014706:	bf00      	nop
 8014708:	20003ce8 	.word	0x20003ce8
 801470c:	08014711 	.word	0x08014711

08014710 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8014716:	e00c      	b.n	8014732 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8014718:	1d3b      	adds	r3, r7, #4
 801471a:	4619      	mov	r1, r3
 801471c:	480a      	ldr	r0, [pc, #40]	; (8014748 <SendFreeBuf+0x38>)
 801471e:	f7ff fd1e 	bl	801415e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8014722:	4b0a      	ldr	r3, [pc, #40]	; (801474c <SendFreeBuf+0x3c>)
 8014724:	691b      	ldr	r3, [r3, #16]
 8014726:	691b      	ldr	r3, [r3, #16]
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	4611      	mov	r1, r2
 801472c:	4618      	mov	r0, r3
 801472e:	f7ff fccf 	bl	80140d0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8014732:	4805      	ldr	r0, [pc, #20]	; (8014748 <SendFreeBuf+0x38>)
 8014734:	f7ff fc84 	bl	8014040 <LST_is_empty>
 8014738:	4603      	mov	r3, r0
 801473a:	2b00      	cmp	r3, #0
 801473c:	d0ec      	beq.n	8014718 <SendFreeBuf+0x8>
  }

  return;
 801473e:	bf00      	nop
}
 8014740:	3708      	adds	r7, #8
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	20003ce8 	.word	0x20003ce8
 801474c:	20030000 	.word	0x20030000

08014750 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8014750:	b580      	push	{r7, lr}
 8014752:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8014754:	4805      	ldr	r0, [pc, #20]	; (801476c <TL_TRACES_Init+0x1c>)
 8014756:	f7ff fc63 	bl	8014020 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801475a:	4b05      	ldr	r3, [pc, #20]	; (8014770 <TL_TRACES_Init+0x20>)
 801475c:	695b      	ldr	r3, [r3, #20]
 801475e:	4a03      	ldr	r2, [pc, #12]	; (801476c <TL_TRACES_Init+0x1c>)
 8014760:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8014762:	f7f1 fc7f 	bl	8006064 <HW_IPCC_TRACES_Init>

  return;
 8014766:	bf00      	nop
}
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	200301cc 	.word	0x200301cc
 8014770:	20030000 	.word	0x20030000

08014774 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801477a:	e008      	b.n	801478e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 801477c:	1d3b      	adds	r3, r7, #4
 801477e:	4619      	mov	r1, r3
 8014780:	4808      	ldr	r0, [pc, #32]	; (80147a4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014782:	f7ff fcec 	bl	801415e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	4618      	mov	r0, r3
 801478a:	f000 f80d 	bl	80147a8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801478e:	4805      	ldr	r0, [pc, #20]	; (80147a4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014790:	f7ff fc56 	bl	8014040 <LST_is_empty>
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	d0f0      	beq.n	801477c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801479a:	bf00      	nop
}
 801479c:	3708      	adds	r7, #8
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	200301cc 	.word	0x200301cc

080147a8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80147a8:	b480      	push	{r7}
 80147aa:	b083      	sub	sp, #12
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80147b0:	bf00      	nop
 80147b2:	370c      	adds	r7, #12
 80147b4:	46bd      	mov	sp, r7
 80147b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ba:	4770      	bx	lr

080147bc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80147bc:	b480      	push	{r7}
 80147be:	b085      	sub	sp, #20
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	4603      	mov	r3, r0
 80147c4:	6039      	str	r1, [r7, #0]
 80147c6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80147c8:	79fb      	ldrb	r3, [r7, #7]
 80147ca:	2b06      	cmp	r3, #6
 80147cc:	d845      	bhi.n	801485a <OutputDbgTrace+0x9e>
 80147ce:	a201      	add	r2, pc, #4	; (adr r2, 80147d4 <OutputDbgTrace+0x18>)
 80147d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147d4:	080147f1 	.word	0x080147f1
 80147d8:	08014815 	.word	0x08014815
 80147dc:	0801481b 	.word	0x0801481b
 80147e0:	0801482f 	.word	0x0801482f
 80147e4:	0801483b 	.word	0x0801483b
 80147e8:	08014841 	.word	0x08014841
 80147ec:	0801484f 	.word	0x0801484f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	7a5b      	ldrb	r3, [r3, #9]
 80147f8:	2bff      	cmp	r3, #255	; 0xff
 80147fa:	d005      	beq.n	8014808 <OutputDbgTrace+0x4c>
 80147fc:	2bff      	cmp	r3, #255	; 0xff
 80147fe:	dc05      	bgt.n	801480c <OutputDbgTrace+0x50>
 8014800:	2b0e      	cmp	r3, #14
 8014802:	d005      	beq.n	8014810 <OutputDbgTrace+0x54>
 8014804:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8014806:	e001      	b.n	801480c <OutputDbgTrace+0x50>
          break;
 8014808:	bf00      	nop
 801480a:	e027      	b.n	801485c <OutputDbgTrace+0xa0>
          break;
 801480c:	bf00      	nop
 801480e:	e025      	b.n	801485c <OutputDbgTrace+0xa0>
          break;
 8014810:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8014812:	e023      	b.n	801485c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8014818:	e020      	b.n	801485c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	7a5b      	ldrb	r3, [r3, #9]
 8014822:	2b0e      	cmp	r3, #14
 8014824:	d001      	beq.n	801482a <OutputDbgTrace+0x6e>
 8014826:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8014828:	e000      	b.n	801482c <OutputDbgTrace+0x70>
          break;
 801482a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801482c:	e016      	b.n	801485c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	7a5b      	ldrb	r3, [r3, #9]
 8014836:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8014838:	e010      	b.n	801485c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801483e:	e00d      	b.n	801485c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	7a5b      	ldrb	r3, [r3, #9]
 8014848:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801484a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801484c:	e006      	b.n	801485c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	7a5b      	ldrb	r3, [r3, #9]
 8014856:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8014858:	e000      	b.n	801485c <OutputDbgTrace+0xa0>

    default:
      break;
 801485a:	bf00      	nop
  }

  return;
 801485c:	bf00      	nop
}
 801485e:	3714      	adds	r7, #20
 8014860:	46bd      	mov	sp, r7
 8014862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014866:	4770      	bx	lr

08014868 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b084      	sub	sp, #16
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	460b      	mov	r3, r1
 8014872:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014874:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014878:	f7f2 f94a 	bl	8006b10 <USBD_static_malloc>
 801487c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d109      	bne.n	8014898 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	32b0      	adds	r2, #176	; 0xb0
 801488e:	2100      	movs	r1, #0
 8014890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014894:	2302      	movs	r3, #2
 8014896:	e0d4      	b.n	8014a42 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014898:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801489c:	2100      	movs	r1, #0
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f003 f86e 	bl	8017980 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	32b0      	adds	r2, #176	; 0xb0
 80148ae:	68f9      	ldr	r1, [r7, #12]
 80148b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	32b0      	adds	r2, #176	; 0xb0
 80148be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	7c1b      	ldrb	r3, [r3, #16]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d138      	bne.n	8014942 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80148d0:	4b5e      	ldr	r3, [pc, #376]	; (8014a4c <USBD_CDC_Init+0x1e4>)
 80148d2:	7819      	ldrb	r1, [r3, #0]
 80148d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80148d8:	2202      	movs	r2, #2
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f7f1 ffbf 	bl	800685e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80148e0:	4b5a      	ldr	r3, [pc, #360]	; (8014a4c <USBD_CDC_Init+0x1e4>)
 80148e2:	781b      	ldrb	r3, [r3, #0]
 80148e4:	f003 020f 	and.w	r2, r3, #15
 80148e8:	6879      	ldr	r1, [r7, #4]
 80148ea:	4613      	mov	r3, r2
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	4413      	add	r3, r2
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	440b      	add	r3, r1
 80148f4:	3324      	adds	r3, #36	; 0x24
 80148f6:	2201      	movs	r2, #1
 80148f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80148fa:	4b55      	ldr	r3, [pc, #340]	; (8014a50 <USBD_CDC_Init+0x1e8>)
 80148fc:	7819      	ldrb	r1, [r3, #0]
 80148fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014902:	2202      	movs	r2, #2
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7f1 ffaa 	bl	800685e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801490a:	4b51      	ldr	r3, [pc, #324]	; (8014a50 <USBD_CDC_Init+0x1e8>)
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	f003 020f 	and.w	r2, r3, #15
 8014912:	6879      	ldr	r1, [r7, #4]
 8014914:	4613      	mov	r3, r2
 8014916:	009b      	lsls	r3, r3, #2
 8014918:	4413      	add	r3, r2
 801491a:	009b      	lsls	r3, r3, #2
 801491c:	440b      	add	r3, r1
 801491e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014922:	2201      	movs	r2, #1
 8014924:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014926:	4b4b      	ldr	r3, [pc, #300]	; (8014a54 <USBD_CDC_Init+0x1ec>)
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	f003 020f 	and.w	r2, r3, #15
 801492e:	6879      	ldr	r1, [r7, #4]
 8014930:	4613      	mov	r3, r2
 8014932:	009b      	lsls	r3, r3, #2
 8014934:	4413      	add	r3, r2
 8014936:	009b      	lsls	r3, r3, #2
 8014938:	440b      	add	r3, r1
 801493a:	3326      	adds	r3, #38	; 0x26
 801493c:	2210      	movs	r2, #16
 801493e:	801a      	strh	r2, [r3, #0]
 8014940:	e035      	b.n	80149ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014942:	4b42      	ldr	r3, [pc, #264]	; (8014a4c <USBD_CDC_Init+0x1e4>)
 8014944:	7819      	ldrb	r1, [r3, #0]
 8014946:	2340      	movs	r3, #64	; 0x40
 8014948:	2202      	movs	r2, #2
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7f1 ff87 	bl	800685e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014950:	4b3e      	ldr	r3, [pc, #248]	; (8014a4c <USBD_CDC_Init+0x1e4>)
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	f003 020f 	and.w	r2, r3, #15
 8014958:	6879      	ldr	r1, [r7, #4]
 801495a:	4613      	mov	r3, r2
 801495c:	009b      	lsls	r3, r3, #2
 801495e:	4413      	add	r3, r2
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	440b      	add	r3, r1
 8014964:	3324      	adds	r3, #36	; 0x24
 8014966:	2201      	movs	r2, #1
 8014968:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801496a:	4b39      	ldr	r3, [pc, #228]	; (8014a50 <USBD_CDC_Init+0x1e8>)
 801496c:	7819      	ldrb	r1, [r3, #0]
 801496e:	2340      	movs	r3, #64	; 0x40
 8014970:	2202      	movs	r2, #2
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f7f1 ff73 	bl	800685e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014978:	4b35      	ldr	r3, [pc, #212]	; (8014a50 <USBD_CDC_Init+0x1e8>)
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	f003 020f 	and.w	r2, r3, #15
 8014980:	6879      	ldr	r1, [r7, #4]
 8014982:	4613      	mov	r3, r2
 8014984:	009b      	lsls	r3, r3, #2
 8014986:	4413      	add	r3, r2
 8014988:	009b      	lsls	r3, r3, #2
 801498a:	440b      	add	r3, r1
 801498c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014990:	2201      	movs	r2, #1
 8014992:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014994:	4b2f      	ldr	r3, [pc, #188]	; (8014a54 <USBD_CDC_Init+0x1ec>)
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	f003 020f 	and.w	r2, r3, #15
 801499c:	6879      	ldr	r1, [r7, #4]
 801499e:	4613      	mov	r3, r2
 80149a0:	009b      	lsls	r3, r3, #2
 80149a2:	4413      	add	r3, r2
 80149a4:	009b      	lsls	r3, r3, #2
 80149a6:	440b      	add	r3, r1
 80149a8:	3326      	adds	r3, #38	; 0x26
 80149aa:	2210      	movs	r2, #16
 80149ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80149ae:	4b29      	ldr	r3, [pc, #164]	; (8014a54 <USBD_CDC_Init+0x1ec>)
 80149b0:	7819      	ldrb	r1, [r3, #0]
 80149b2:	2308      	movs	r3, #8
 80149b4:	2203      	movs	r2, #3
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f7f1 ff51 	bl	800685e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80149bc:	4b25      	ldr	r3, [pc, #148]	; (8014a54 <USBD_CDC_Init+0x1ec>)
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	f003 020f 	and.w	r2, r3, #15
 80149c4:	6879      	ldr	r1, [r7, #4]
 80149c6:	4613      	mov	r3, r2
 80149c8:	009b      	lsls	r3, r3, #2
 80149ca:	4413      	add	r3, r2
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	440b      	add	r3, r1
 80149d0:	3324      	adds	r3, #36	; 0x24
 80149d2:	2201      	movs	r2, #1
 80149d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2200      	movs	r2, #0
 80149da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	33b0      	adds	r3, #176	; 0xb0
 80149e8:	009b      	lsls	r3, r3, #2
 80149ea:	4413      	add	r3, r2
 80149ec:	685b      	ldr	r3, [r3, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	2200      	movs	r2, #0
 80149f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	2200      	movs	r2, #0
 80149fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d101      	bne.n	8014a10 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014a0c:	2302      	movs	r3, #2
 8014a0e:	e018      	b.n	8014a42 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	7c1b      	ldrb	r3, [r3, #16]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d10a      	bne.n	8014a2e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a18:	4b0d      	ldr	r3, [pc, #52]	; (8014a50 <USBD_CDC_Init+0x1e8>)
 8014a1a:	7819      	ldrb	r1, [r3, #0]
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f7f2 f808 	bl	8006a3c <USBD_LL_PrepareReceive>
 8014a2c:	e008      	b.n	8014a40 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014a2e:	4b08      	ldr	r3, [pc, #32]	; (8014a50 <USBD_CDC_Init+0x1e8>)
 8014a30:	7819      	ldrb	r1, [r3, #0]
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014a38:	2340      	movs	r3, #64	; 0x40
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f7f1 fffe 	bl	8006a3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014a40:	2300      	movs	r3, #0
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3710      	adds	r7, #16
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	2000016f 	.word	0x2000016f
 8014a50:	20000170 	.word	0x20000170
 8014a54:	20000171 	.word	0x20000171

08014a58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b082      	sub	sp, #8
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	460b      	mov	r3, r1
 8014a62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014a64:	4b3a      	ldr	r3, [pc, #232]	; (8014b50 <USBD_CDC_DeInit+0xf8>)
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	4619      	mov	r1, r3
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7f1 ff1d 	bl	80068aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014a70:	4b37      	ldr	r3, [pc, #220]	; (8014b50 <USBD_CDC_DeInit+0xf8>)
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	f003 020f 	and.w	r2, r3, #15
 8014a78:	6879      	ldr	r1, [r7, #4]
 8014a7a:	4613      	mov	r3, r2
 8014a7c:	009b      	lsls	r3, r3, #2
 8014a7e:	4413      	add	r3, r2
 8014a80:	009b      	lsls	r3, r3, #2
 8014a82:	440b      	add	r3, r1
 8014a84:	3324      	adds	r3, #36	; 0x24
 8014a86:	2200      	movs	r2, #0
 8014a88:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014a8a:	4b32      	ldr	r3, [pc, #200]	; (8014b54 <USBD_CDC_DeInit+0xfc>)
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	4619      	mov	r1, r3
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f7f1 ff0a 	bl	80068aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014a96:	4b2f      	ldr	r3, [pc, #188]	; (8014b54 <USBD_CDC_DeInit+0xfc>)
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	f003 020f 	and.w	r2, r3, #15
 8014a9e:	6879      	ldr	r1, [r7, #4]
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	4413      	add	r3, r2
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	440b      	add	r3, r1
 8014aaa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014aae:	2200      	movs	r2, #0
 8014ab0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014ab2:	4b29      	ldr	r3, [pc, #164]	; (8014b58 <USBD_CDC_DeInit+0x100>)
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f7f1 fef6 	bl	80068aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014abe:	4b26      	ldr	r3, [pc, #152]	; (8014b58 <USBD_CDC_DeInit+0x100>)
 8014ac0:	781b      	ldrb	r3, [r3, #0]
 8014ac2:	f003 020f 	and.w	r2, r3, #15
 8014ac6:	6879      	ldr	r1, [r7, #4]
 8014ac8:	4613      	mov	r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	4413      	add	r3, r2
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	440b      	add	r3, r1
 8014ad2:	3324      	adds	r3, #36	; 0x24
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014ad8:	4b1f      	ldr	r3, [pc, #124]	; (8014b58 <USBD_CDC_DeInit+0x100>)
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	f003 020f 	and.w	r2, r3, #15
 8014ae0:	6879      	ldr	r1, [r7, #4]
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	009b      	lsls	r3, r3, #2
 8014ae6:	4413      	add	r3, r2
 8014ae8:	009b      	lsls	r3, r3, #2
 8014aea:	440b      	add	r3, r1
 8014aec:	3326      	adds	r3, #38	; 0x26
 8014aee:	2200      	movs	r2, #0
 8014af0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	32b0      	adds	r2, #176	; 0xb0
 8014afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d01f      	beq.n	8014b44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b0a:	687a      	ldr	r2, [r7, #4]
 8014b0c:	33b0      	adds	r3, #176	; 0xb0
 8014b0e:	009b      	lsls	r3, r3, #2
 8014b10:	4413      	add	r3, r2
 8014b12:	685b      	ldr	r3, [r3, #4]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	32b0      	adds	r2, #176	; 0xb0
 8014b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7f2 f800 	bl	8006b2c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	32b0      	adds	r2, #176	; 0xb0
 8014b36:	2100      	movs	r1, #0
 8014b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014b44:	2300      	movs	r3, #0
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3708      	adds	r7, #8
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}
 8014b4e:	bf00      	nop
 8014b50:	2000016f 	.word	0x2000016f
 8014b54:	20000170 	.word	0x20000170
 8014b58:	20000171 	.word	0x20000171

08014b5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b086      	sub	sp, #24
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
 8014b64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	32b0      	adds	r2, #176	; 0xb0
 8014b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014b76:	2300      	movs	r3, #0
 8014b78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014b82:	693b      	ldr	r3, [r7, #16]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d101      	bne.n	8014b8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014b88:	2303      	movs	r3, #3
 8014b8a:	e0bf      	b.n	8014d0c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d050      	beq.n	8014c3a <USBD_CDC_Setup+0xde>
 8014b98:	2b20      	cmp	r3, #32
 8014b9a:	f040 80af 	bne.w	8014cfc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	88db      	ldrh	r3, [r3, #6]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d03a      	beq.n	8014c1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	781b      	ldrb	r3, [r3, #0]
 8014baa:	b25b      	sxtb	r3, r3
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	da1b      	bge.n	8014be8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	33b0      	adds	r3, #176	; 0xb0
 8014bba:	009b      	lsls	r3, r3, #2
 8014bbc:	4413      	add	r3, r2
 8014bbe:	685b      	ldr	r3, [r3, #4]
 8014bc0:	689b      	ldr	r3, [r3, #8]
 8014bc2:	683a      	ldr	r2, [r7, #0]
 8014bc4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014bc6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014bc8:	683a      	ldr	r2, [r7, #0]
 8014bca:	88d2      	ldrh	r2, [r2, #6]
 8014bcc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	88db      	ldrh	r3, [r3, #6]
 8014bd2:	2b07      	cmp	r3, #7
 8014bd4:	bf28      	it	cs
 8014bd6:	2307      	movcs	r3, #7
 8014bd8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	89fa      	ldrh	r2, [r7, #14]
 8014bde:	4619      	mov	r1, r3
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f001 fd21 	bl	8016628 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014be6:	e090      	b.n	8014d0a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	785a      	ldrb	r2, [r3, #1]
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	88db      	ldrh	r3, [r3, #6]
 8014bf6:	2b3f      	cmp	r3, #63	; 0x3f
 8014bf8:	d803      	bhi.n	8014c02 <USBD_CDC_Setup+0xa6>
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	88db      	ldrh	r3, [r3, #6]
 8014bfe:	b2da      	uxtb	r2, r3
 8014c00:	e000      	b.n	8014c04 <USBD_CDC_Setup+0xa8>
 8014c02:	2240      	movs	r2, #64	; 0x40
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014c0a:	6939      	ldr	r1, [r7, #16]
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014c12:	461a      	mov	r2, r3
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f001 fd33 	bl	8016680 <USBD_CtlPrepareRx>
      break;
 8014c1a:	e076      	b.n	8014d0a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	33b0      	adds	r3, #176	; 0xb0
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	4413      	add	r3, r2
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	689b      	ldr	r3, [r3, #8]
 8014c2e:	683a      	ldr	r2, [r7, #0]
 8014c30:	7850      	ldrb	r0, [r2, #1]
 8014c32:	2200      	movs	r2, #0
 8014c34:	6839      	ldr	r1, [r7, #0]
 8014c36:	4798      	blx	r3
      break;
 8014c38:	e067      	b.n	8014d0a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	785b      	ldrb	r3, [r3, #1]
 8014c3e:	2b0b      	cmp	r3, #11
 8014c40:	d851      	bhi.n	8014ce6 <USBD_CDC_Setup+0x18a>
 8014c42:	a201      	add	r2, pc, #4	; (adr r2, 8014c48 <USBD_CDC_Setup+0xec>)
 8014c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c48:	08014c79 	.word	0x08014c79
 8014c4c:	08014cf5 	.word	0x08014cf5
 8014c50:	08014ce7 	.word	0x08014ce7
 8014c54:	08014ce7 	.word	0x08014ce7
 8014c58:	08014ce7 	.word	0x08014ce7
 8014c5c:	08014ce7 	.word	0x08014ce7
 8014c60:	08014ce7 	.word	0x08014ce7
 8014c64:	08014ce7 	.word	0x08014ce7
 8014c68:	08014ce7 	.word	0x08014ce7
 8014c6c:	08014ce7 	.word	0x08014ce7
 8014c70:	08014ca3 	.word	0x08014ca3
 8014c74:	08014ccd 	.word	0x08014ccd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	2b03      	cmp	r3, #3
 8014c82:	d107      	bne.n	8014c94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014c84:	f107 030a 	add.w	r3, r7, #10
 8014c88:	2202      	movs	r2, #2
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f001 fccb 	bl	8016628 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014c92:	e032      	b.n	8014cfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014c94:	6839      	ldr	r1, [r7, #0]
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f001 fc55 	bl	8016546 <USBD_CtlError>
            ret = USBD_FAIL;
 8014c9c:	2303      	movs	r3, #3
 8014c9e:	75fb      	strb	r3, [r7, #23]
          break;
 8014ca0:	e02b      	b.n	8014cfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	2b03      	cmp	r3, #3
 8014cac:	d107      	bne.n	8014cbe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014cae:	f107 030d 	add.w	r3, r7, #13
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	4619      	mov	r1, r3
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f001 fcb6 	bl	8016628 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014cbc:	e01d      	b.n	8014cfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014cbe:	6839      	ldr	r1, [r7, #0]
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f001 fc40 	bl	8016546 <USBD_CtlError>
            ret = USBD_FAIL;
 8014cc6:	2303      	movs	r3, #3
 8014cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8014cca:	e016      	b.n	8014cfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	2b03      	cmp	r3, #3
 8014cd6:	d00f      	beq.n	8014cf8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014cd8:	6839      	ldr	r1, [r7, #0]
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	f001 fc33 	bl	8016546 <USBD_CtlError>
            ret = USBD_FAIL;
 8014ce0:	2303      	movs	r3, #3
 8014ce2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014ce4:	e008      	b.n	8014cf8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014ce6:	6839      	ldr	r1, [r7, #0]
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f001 fc2c 	bl	8016546 <USBD_CtlError>
          ret = USBD_FAIL;
 8014cee:	2303      	movs	r3, #3
 8014cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8014cf2:	e002      	b.n	8014cfa <USBD_CDC_Setup+0x19e>
          break;
 8014cf4:	bf00      	nop
 8014cf6:	e008      	b.n	8014d0a <USBD_CDC_Setup+0x1ae>
          break;
 8014cf8:	bf00      	nop
      }
      break;
 8014cfa:	e006      	b.n	8014d0a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014cfc:	6839      	ldr	r1, [r7, #0]
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f001 fc21 	bl	8016546 <USBD_CtlError>
      ret = USBD_FAIL;
 8014d04:	2303      	movs	r3, #3
 8014d06:	75fb      	strb	r3, [r7, #23]
      break;
 8014d08:	bf00      	nop
  }

  return (uint8_t)ret;
 8014d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3718      	adds	r7, #24
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b084      	sub	sp, #16
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014d26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	32b0      	adds	r2, #176	; 0xb0
 8014d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d101      	bne.n	8014d3e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014d3a:	2303      	movs	r3, #3
 8014d3c:	e065      	b.n	8014e0a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	32b0      	adds	r2, #176	; 0xb0
 8014d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014d4e:	78fb      	ldrb	r3, [r7, #3]
 8014d50:	f003 020f 	and.w	r2, r3, #15
 8014d54:	6879      	ldr	r1, [r7, #4]
 8014d56:	4613      	mov	r3, r2
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	4413      	add	r3, r2
 8014d5c:	009b      	lsls	r3, r3, #2
 8014d5e:	440b      	add	r3, r1
 8014d60:	3318      	adds	r3, #24
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d02f      	beq.n	8014dc8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014d68:	78fb      	ldrb	r3, [r7, #3]
 8014d6a:	f003 020f 	and.w	r2, r3, #15
 8014d6e:	6879      	ldr	r1, [r7, #4]
 8014d70:	4613      	mov	r3, r2
 8014d72:	009b      	lsls	r3, r3, #2
 8014d74:	4413      	add	r3, r2
 8014d76:	009b      	lsls	r3, r3, #2
 8014d78:	440b      	add	r3, r1
 8014d7a:	3318      	adds	r3, #24
 8014d7c:	681a      	ldr	r2, [r3, #0]
 8014d7e:	78fb      	ldrb	r3, [r7, #3]
 8014d80:	f003 010f 	and.w	r1, r3, #15
 8014d84:	68f8      	ldr	r0, [r7, #12]
 8014d86:	460b      	mov	r3, r1
 8014d88:	009b      	lsls	r3, r3, #2
 8014d8a:	440b      	add	r3, r1
 8014d8c:	00db      	lsls	r3, r3, #3
 8014d8e:	4403      	add	r3, r0
 8014d90:	3320      	adds	r3, #32
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	fbb2 f1f3 	udiv	r1, r2, r3
 8014d98:	fb01 f303 	mul.w	r3, r1, r3
 8014d9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d112      	bne.n	8014dc8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014da2:	78fb      	ldrb	r3, [r7, #3]
 8014da4:	f003 020f 	and.w	r2, r3, #15
 8014da8:	6879      	ldr	r1, [r7, #4]
 8014daa:	4613      	mov	r3, r2
 8014dac:	009b      	lsls	r3, r3, #2
 8014dae:	4413      	add	r3, r2
 8014db0:	009b      	lsls	r3, r3, #2
 8014db2:	440b      	add	r3, r1
 8014db4:	3318      	adds	r3, #24
 8014db6:	2200      	movs	r2, #0
 8014db8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014dba:	78f9      	ldrb	r1, [r7, #3]
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	6878      	ldr	r0, [r7, #4]
 8014dc2:	f7f1 fe1a 	bl	80069fa <USBD_LL_Transmit>
 8014dc6:	e01f      	b.n	8014e08 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	33b0      	adds	r3, #176	; 0xb0
 8014dda:	009b      	lsls	r3, r3, #2
 8014ddc:	4413      	add	r3, r2
 8014dde:	685b      	ldr	r3, [r3, #4]
 8014de0:	691b      	ldr	r3, [r3, #16]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d010      	beq.n	8014e08 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dec:	687a      	ldr	r2, [r7, #4]
 8014dee:	33b0      	adds	r3, #176	; 0xb0
 8014df0:	009b      	lsls	r3, r3, #2
 8014df2:	4413      	add	r3, r2
 8014df4:	685b      	ldr	r3, [r3, #4]
 8014df6:	691b      	ldr	r3, [r3, #16]
 8014df8:	68ba      	ldr	r2, [r7, #8]
 8014dfa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014dfe:	68ba      	ldr	r2, [r7, #8]
 8014e00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014e04:	78fa      	ldrb	r2, [r7, #3]
 8014e06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014e08:	2300      	movs	r3, #0
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}

08014e12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014e12:	b580      	push	{r7, lr}
 8014e14:	b084      	sub	sp, #16
 8014e16:	af00      	add	r7, sp, #0
 8014e18:	6078      	str	r0, [r7, #4]
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	32b0      	adds	r2, #176	; 0xb0
 8014e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	32b0      	adds	r2, #176	; 0xb0
 8014e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d101      	bne.n	8014e44 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014e40:	2303      	movs	r3, #3
 8014e42:	e01a      	b.n	8014e7a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014e44:	78fb      	ldrb	r3, [r7, #3]
 8014e46:	4619      	mov	r1, r3
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f7f1 fe18 	bl	8006a7e <USBD_LL_GetRxDataSize>
 8014e4e:	4602      	mov	r2, r0
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e5c:	687a      	ldr	r2, [r7, #4]
 8014e5e:	33b0      	adds	r3, #176	; 0xb0
 8014e60:	009b      	lsls	r3, r3, #2
 8014e62:	4413      	add	r3, r2
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	68db      	ldr	r3, [r3, #12]
 8014e68:	68fa      	ldr	r2, [r7, #12]
 8014e6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014e6e:	68fa      	ldr	r2, [r7, #12]
 8014e70:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014e74:	4611      	mov	r1, r2
 8014e76:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014e78:	2300      	movs	r3, #0
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3710      	adds	r7, #16
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}

08014e82 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014e82:	b580      	push	{r7, lr}
 8014e84:	b084      	sub	sp, #16
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	32b0      	adds	r2, #176	; 0xb0
 8014e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d101      	bne.n	8014ea4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014ea0:	2303      	movs	r3, #3
 8014ea2:	e025      	b.n	8014ef0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014eaa:	687a      	ldr	r2, [r7, #4]
 8014eac:	33b0      	adds	r3, #176	; 0xb0
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	4413      	add	r3, r2
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d01a      	beq.n	8014eee <USBD_CDC_EP0_RxReady+0x6c>
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014ebe:	2bff      	cmp	r3, #255	; 0xff
 8014ec0:	d015      	beq.n	8014eee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	33b0      	adds	r3, #176	; 0xb0
 8014ecc:	009b      	lsls	r3, r3, #2
 8014ece:	4413      	add	r3, r2
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	689b      	ldr	r3, [r3, #8]
 8014ed4:	68fa      	ldr	r2, [r7, #12]
 8014ed6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014eda:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014edc:	68fa      	ldr	r2, [r7, #12]
 8014ede:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014ee2:	b292      	uxth	r2, r2
 8014ee4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	22ff      	movs	r2, #255	; 0xff
 8014eea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014eee:	2300      	movs	r3, #0
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	3710      	adds	r7, #16
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}

08014ef8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b086      	sub	sp, #24
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014f00:	2182      	movs	r1, #130	; 0x82
 8014f02:	4818      	ldr	r0, [pc, #96]	; (8014f64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014f04:	f000 fcbd 	bl	8015882 <USBD_GetEpDesc>
 8014f08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014f0a:	2101      	movs	r1, #1
 8014f0c:	4815      	ldr	r0, [pc, #84]	; (8014f64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014f0e:	f000 fcb8 	bl	8015882 <USBD_GetEpDesc>
 8014f12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014f14:	2181      	movs	r1, #129	; 0x81
 8014f16:	4813      	ldr	r0, [pc, #76]	; (8014f64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014f18:	f000 fcb3 	bl	8015882 <USBD_GetEpDesc>
 8014f1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d002      	beq.n	8014f2a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	2210      	movs	r2, #16
 8014f28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d006      	beq.n	8014f3e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	2200      	movs	r2, #0
 8014f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014f38:	711a      	strb	r2, [r3, #4]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d006      	beq.n	8014f52 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2200      	movs	r2, #0
 8014f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014f4c:	711a      	strb	r2, [r3, #4]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2243      	movs	r2, #67	; 0x43
 8014f56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014f58:	4b02      	ldr	r3, [pc, #8]	; (8014f64 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3718      	adds	r7, #24
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}
 8014f62:	bf00      	nop
 8014f64:	2000012c 	.word	0x2000012c

08014f68 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b086      	sub	sp, #24
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014f70:	2182      	movs	r1, #130	; 0x82
 8014f72:	4818      	ldr	r0, [pc, #96]	; (8014fd4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f74:	f000 fc85 	bl	8015882 <USBD_GetEpDesc>
 8014f78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014f7a:	2101      	movs	r1, #1
 8014f7c:	4815      	ldr	r0, [pc, #84]	; (8014fd4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f7e:	f000 fc80 	bl	8015882 <USBD_GetEpDesc>
 8014f82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014f84:	2181      	movs	r1, #129	; 0x81
 8014f86:	4813      	ldr	r0, [pc, #76]	; (8014fd4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014f88:	f000 fc7b 	bl	8015882 <USBD_GetEpDesc>
 8014f8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d002      	beq.n	8014f9a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	2210      	movs	r2, #16
 8014f98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d006      	beq.n	8014fae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	711a      	strb	r2, [r3, #4]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	f042 0202 	orr.w	r2, r2, #2
 8014fac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d006      	beq.n	8014fc2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	711a      	strb	r2, [r3, #4]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	f042 0202 	orr.w	r2, r2, #2
 8014fc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2243      	movs	r2, #67	; 0x43
 8014fc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014fc8:	4b02      	ldr	r3, [pc, #8]	; (8014fd4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3718      	adds	r7, #24
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	2000012c 	.word	0x2000012c

08014fd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b086      	sub	sp, #24
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014fe0:	2182      	movs	r1, #130	; 0x82
 8014fe2:	4818      	ldr	r0, [pc, #96]	; (8015044 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014fe4:	f000 fc4d 	bl	8015882 <USBD_GetEpDesc>
 8014fe8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014fea:	2101      	movs	r1, #1
 8014fec:	4815      	ldr	r0, [pc, #84]	; (8015044 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014fee:	f000 fc48 	bl	8015882 <USBD_GetEpDesc>
 8014ff2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ff4:	2181      	movs	r1, #129	; 0x81
 8014ff6:	4813      	ldr	r0, [pc, #76]	; (8015044 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014ff8:	f000 fc43 	bl	8015882 <USBD_GetEpDesc>
 8014ffc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d002      	beq.n	801500a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	2210      	movs	r2, #16
 8015008:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d006      	beq.n	801501e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	2200      	movs	r2, #0
 8015014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015018:	711a      	strb	r2, [r3, #4]
 801501a:	2200      	movs	r2, #0
 801501c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d006      	beq.n	8015032 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	2200      	movs	r2, #0
 8015028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801502c:	711a      	strb	r2, [r3, #4]
 801502e:	2200      	movs	r2, #0
 8015030:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2243      	movs	r2, #67	; 0x43
 8015036:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015038:	4b02      	ldr	r3, [pc, #8]	; (8015044 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801503a:	4618      	mov	r0, r3
 801503c:	3718      	adds	r7, #24
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}
 8015042:	bf00      	nop
 8015044:	2000012c 	.word	0x2000012c

08015048 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015048:	b480      	push	{r7}
 801504a:	b083      	sub	sp, #12
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	220a      	movs	r2, #10
 8015054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015056:	4b03      	ldr	r3, [pc, #12]	; (8015064 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015058:	4618      	mov	r0, r3
 801505a:	370c      	adds	r7, #12
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr
 8015064:	200000e8 	.word	0x200000e8

08015068 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015068:	b480      	push	{r7}
 801506a:	b083      	sub	sp, #12
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d101      	bne.n	801507c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015078:	2303      	movs	r3, #3
 801507a:	e009      	b.n	8015090 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015082:	687a      	ldr	r2, [r7, #4]
 8015084:	33b0      	adds	r3, #176	; 0xb0
 8015086:	009b      	lsls	r3, r3, #2
 8015088:	4413      	add	r3, r2
 801508a:	683a      	ldr	r2, [r7, #0]
 801508c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801508e:	2300      	movs	r3, #0
}
 8015090:	4618      	mov	r0, r3
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr

0801509c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801509c:	b480      	push	{r7}
 801509e:	b087      	sub	sp, #28
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	32b0      	adds	r2, #176	; 0xb0
 80150b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80150b8:	697b      	ldr	r3, [r7, #20]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d101      	bne.n	80150c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80150be:	2303      	movs	r3, #3
 80150c0:	e008      	b.n	80150d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	68ba      	ldr	r2, [r7, #8]
 80150c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	687a      	ldr	r2, [r7, #4]
 80150ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80150d2:	2300      	movs	r3, #0
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	371c      	adds	r7, #28
 80150d8:	46bd      	mov	sp, r7
 80150da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150de:	4770      	bx	lr

080150e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80150e0:	b480      	push	{r7}
 80150e2:	b085      	sub	sp, #20
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	32b0      	adds	r2, #176	; 0xb0
 80150f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d101      	bne.n	8015104 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015100:	2303      	movs	r3, #3
 8015102:	e004      	b.n	801510e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	683a      	ldr	r2, [r7, #0]
 8015108:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801510c:	2300      	movs	r3, #0
}
 801510e:	4618      	mov	r0, r3
 8015110:	3714      	adds	r7, #20
 8015112:	46bd      	mov	sp, r7
 8015114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015118:	4770      	bx	lr
	...

0801511c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b084      	sub	sp, #16
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	32b0      	adds	r2, #176	; 0xb0
 801512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015132:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015134:	2301      	movs	r3, #1
 8015136:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d101      	bne.n	8015142 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801513e:	2303      	movs	r3, #3
 8015140:	e025      	b.n	801518e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015148:	2b00      	cmp	r3, #0
 801514a:	d11f      	bne.n	801518c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	2201      	movs	r2, #1
 8015150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015154:	4b10      	ldr	r3, [pc, #64]	; (8015198 <USBD_CDC_TransmitPacket+0x7c>)
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	f003 020f 	and.w	r2, r3, #15
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	4613      	mov	r3, r2
 8015166:	009b      	lsls	r3, r3, #2
 8015168:	4413      	add	r3, r2
 801516a:	009b      	lsls	r3, r3, #2
 801516c:	4403      	add	r3, r0
 801516e:	3318      	adds	r3, #24
 8015170:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015172:	4b09      	ldr	r3, [pc, #36]	; (8015198 <USBD_CDC_TransmitPacket+0x7c>)
 8015174:	7819      	ldrb	r1, [r3, #0]
 8015176:	68bb      	ldr	r3, [r7, #8]
 8015178:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015182:	6878      	ldr	r0, [r7, #4]
 8015184:	f7f1 fc39 	bl	80069fa <USBD_LL_Transmit>

    ret = USBD_OK;
 8015188:	2300      	movs	r3, #0
 801518a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801518c:	7bfb      	ldrb	r3, [r7, #15]
}
 801518e:	4618      	mov	r0, r3
 8015190:	3710      	adds	r7, #16
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}
 8015196:	bf00      	nop
 8015198:	2000016f 	.word	0x2000016f

0801519c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b084      	sub	sp, #16
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	32b0      	adds	r2, #176	; 0xb0
 80151ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	32b0      	adds	r2, #176	; 0xb0
 80151be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d101      	bne.n	80151ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80151c6:	2303      	movs	r3, #3
 80151c8:	e018      	b.n	80151fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	7c1b      	ldrb	r3, [r3, #16]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d10a      	bne.n	80151e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80151d2:	4b0c      	ldr	r3, [pc, #48]	; (8015204 <USBD_CDC_ReceivePacket+0x68>)
 80151d4:	7819      	ldrb	r1, [r3, #0]
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80151dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	f7f1 fc2b 	bl	8006a3c <USBD_LL_PrepareReceive>
 80151e6:	e008      	b.n	80151fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80151e8:	4b06      	ldr	r3, [pc, #24]	; (8015204 <USBD_CDC_ReceivePacket+0x68>)
 80151ea:	7819      	ldrb	r1, [r3, #0]
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80151f2:	2340      	movs	r3, #64	; 0x40
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7f1 fc21 	bl	8006a3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80151fa:	2300      	movs	r3, #0
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3710      	adds	r7, #16
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	20000170 	.word	0x20000170

08015208 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b086      	sub	sp, #24
 801520c:	af00      	add	r7, sp, #0
 801520e:	60f8      	str	r0, [r7, #12]
 8015210:	60b9      	str	r1, [r7, #8]
 8015212:	4613      	mov	r3, r2
 8015214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d101      	bne.n	8015220 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801521c:	2303      	movs	r3, #3
 801521e:	e01f      	b.n	8015260 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	2200      	movs	r2, #0
 8015224:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2200      	movs	r2, #0
 801522c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	2200      	movs	r2, #0
 8015234:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d003      	beq.n	8015246 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	68ba      	ldr	r2, [r7, #8]
 8015242:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	2201      	movs	r2, #1
 801524a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	79fa      	ldrb	r2, [r7, #7]
 8015252:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015254:	68f8      	ldr	r0, [r7, #12]
 8015256:	f7f1 fa85 	bl	8006764 <USBD_LL_Init>
 801525a:	4603      	mov	r3, r0
 801525c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801525e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015260:	4618      	mov	r0, r3
 8015262:	3718      	adds	r7, #24
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}

08015268 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b084      	sub	sp, #16
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015272:	2300      	movs	r3, #0
 8015274:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d101      	bne.n	8015280 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801527c:	2303      	movs	r3, #3
 801527e:	e025      	b.n	80152cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	683a      	ldr	r2, [r7, #0]
 8015284:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	32ae      	adds	r2, #174	; 0xae
 8015292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015298:	2b00      	cmp	r3, #0
 801529a:	d00f      	beq.n	80152bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	32ae      	adds	r2, #174	; 0xae
 80152a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ac:	f107 020e 	add.w	r2, r7, #14
 80152b0:	4610      	mov	r0, r2
 80152b2:	4798      	blx	r3
 80152b4:	4602      	mov	r2, r0
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80152c2:	1c5a      	adds	r2, r3, #1
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80152ca:	2300      	movs	r3, #0
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3710      	adds	r7, #16
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80152dc:	6878      	ldr	r0, [r7, #4]
 80152de:	f7f1 faa3 	bl	8006828 <USBD_LL_Start>
 80152e2:	4603      	mov	r3, r0
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3708      	adds	r7, #8
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80152ec:	b480      	push	{r7}
 80152ee:	b083      	sub	sp, #12
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80152f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	370c      	adds	r7, #12
 80152fa:	46bd      	mov	sp, r7
 80152fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015300:	4770      	bx	lr

08015302 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b084      	sub	sp, #16
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
 801530a:	460b      	mov	r3, r1
 801530c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801530e:	2300      	movs	r3, #0
 8015310:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015318:	2b00      	cmp	r3, #0
 801531a:	d009      	beq.n	8015330 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	78fa      	ldrb	r2, [r7, #3]
 8015326:	4611      	mov	r1, r2
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	4798      	blx	r3
 801532c:	4603      	mov	r3, r0
 801532e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015330:	7bfb      	ldrb	r3, [r7, #15]
}
 8015332:	4618      	mov	r0, r3
 8015334:	3710      	adds	r7, #16
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}

0801533a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801533a:	b580      	push	{r7, lr}
 801533c:	b084      	sub	sp, #16
 801533e:	af00      	add	r7, sp, #0
 8015340:	6078      	str	r0, [r7, #4]
 8015342:	460b      	mov	r3, r1
 8015344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015346:	2300      	movs	r3, #0
 8015348:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	78fa      	ldrb	r2, [r7, #3]
 8015354:	4611      	mov	r1, r2
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	4798      	blx	r3
 801535a:	4603      	mov	r3, r0
 801535c:	2b00      	cmp	r3, #0
 801535e:	d001      	beq.n	8015364 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015360:	2303      	movs	r3, #3
 8015362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015364:	7bfb      	ldrb	r3, [r7, #15]
}
 8015366:	4618      	mov	r0, r3
 8015368:	3710      	adds	r7, #16
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}

0801536e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801536e:	b580      	push	{r7, lr}
 8015370:	b084      	sub	sp, #16
 8015372:	af00      	add	r7, sp, #0
 8015374:	6078      	str	r0, [r7, #4]
 8015376:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801537e:	6839      	ldr	r1, [r7, #0]
 8015380:	4618      	mov	r0, r3
 8015382:	f001 f8a6 	bl	80164d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2201      	movs	r2, #1
 801538a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015394:	461a      	mov	r2, r3
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153a2:	f003 031f 	and.w	r3, r3, #31
 80153a6:	2b02      	cmp	r3, #2
 80153a8:	d01a      	beq.n	80153e0 <USBD_LL_SetupStage+0x72>
 80153aa:	2b02      	cmp	r3, #2
 80153ac:	d822      	bhi.n	80153f4 <USBD_LL_SetupStage+0x86>
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d002      	beq.n	80153b8 <USBD_LL_SetupStage+0x4a>
 80153b2:	2b01      	cmp	r3, #1
 80153b4:	d00a      	beq.n	80153cc <USBD_LL_SetupStage+0x5e>
 80153b6:	e01d      	b.n	80153f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153be:	4619      	mov	r1, r3
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f000 fad3 	bl	801596c <USBD_StdDevReq>
 80153c6:	4603      	mov	r3, r0
 80153c8:	73fb      	strb	r3, [r7, #15]
      break;
 80153ca:	e020      	b.n	801540e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153d2:	4619      	mov	r1, r3
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f000 fb3b 	bl	8015a50 <USBD_StdItfReq>
 80153da:	4603      	mov	r3, r0
 80153dc:	73fb      	strb	r3, [r7, #15]
      break;
 80153de:	e016      	b.n	801540e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153e6:	4619      	mov	r1, r3
 80153e8:	6878      	ldr	r0, [r7, #4]
 80153ea:	f000 fb9d 	bl	8015b28 <USBD_StdEPReq>
 80153ee:	4603      	mov	r3, r0
 80153f0:	73fb      	strb	r3, [r7, #15]
      break;
 80153f2:	e00c      	b.n	801540e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80153fe:	b2db      	uxtb	r3, r3
 8015400:	4619      	mov	r1, r3
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f7f1 fa70 	bl	80068e8 <USBD_LL_StallEP>
 8015408:	4603      	mov	r3, r0
 801540a:	73fb      	strb	r3, [r7, #15]
      break;
 801540c:	bf00      	nop
  }

  return ret;
 801540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015410:	4618      	mov	r0, r3
 8015412:	3710      	adds	r7, #16
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b086      	sub	sp, #24
 801541c:	af00      	add	r7, sp, #0
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	460b      	mov	r3, r1
 8015422:	607a      	str	r2, [r7, #4]
 8015424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015426:	2300      	movs	r3, #0
 8015428:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801542a:	7afb      	ldrb	r3, [r7, #11]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d16e      	bne.n	801550e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801543e:	2b03      	cmp	r3, #3
 8015440:	f040 8098 	bne.w	8015574 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	689a      	ldr	r2, [r3, #8]
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	68db      	ldr	r3, [r3, #12]
 801544c:	429a      	cmp	r2, r3
 801544e:	d913      	bls.n	8015478 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	689a      	ldr	r2, [r3, #8]
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	1ad2      	subs	r2, r2, r3
 801545a:	693b      	ldr	r3, [r7, #16]
 801545c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801545e:	693b      	ldr	r3, [r7, #16]
 8015460:	68da      	ldr	r2, [r3, #12]
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	689b      	ldr	r3, [r3, #8]
 8015466:	4293      	cmp	r3, r2
 8015468:	bf28      	it	cs
 801546a:	4613      	movcs	r3, r2
 801546c:	461a      	mov	r2, r3
 801546e:	6879      	ldr	r1, [r7, #4]
 8015470:	68f8      	ldr	r0, [r7, #12]
 8015472:	f001 f922 	bl	80166ba <USBD_CtlContinueRx>
 8015476:	e07d      	b.n	8015574 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801547e:	f003 031f 	and.w	r3, r3, #31
 8015482:	2b02      	cmp	r3, #2
 8015484:	d014      	beq.n	80154b0 <USBD_LL_DataOutStage+0x98>
 8015486:	2b02      	cmp	r3, #2
 8015488:	d81d      	bhi.n	80154c6 <USBD_LL_DataOutStage+0xae>
 801548a:	2b00      	cmp	r3, #0
 801548c:	d002      	beq.n	8015494 <USBD_LL_DataOutStage+0x7c>
 801548e:	2b01      	cmp	r3, #1
 8015490:	d003      	beq.n	801549a <USBD_LL_DataOutStage+0x82>
 8015492:	e018      	b.n	80154c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015494:	2300      	movs	r3, #0
 8015496:	75bb      	strb	r3, [r7, #22]
            break;
 8015498:	e018      	b.n	80154cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	4619      	mov	r1, r3
 80154a4:	68f8      	ldr	r0, [r7, #12]
 80154a6:	f000 f9d2 	bl	801584e <USBD_CoreFindIF>
 80154aa:	4603      	mov	r3, r0
 80154ac:	75bb      	strb	r3, [r7, #22]
            break;
 80154ae:	e00d      	b.n	80154cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80154b6:	b2db      	uxtb	r3, r3
 80154b8:	4619      	mov	r1, r3
 80154ba:	68f8      	ldr	r0, [r7, #12]
 80154bc:	f000 f9d4 	bl	8015868 <USBD_CoreFindEP>
 80154c0:	4603      	mov	r3, r0
 80154c2:	75bb      	strb	r3, [r7, #22]
            break;
 80154c4:	e002      	b.n	80154cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80154c6:	2300      	movs	r3, #0
 80154c8:	75bb      	strb	r3, [r7, #22]
            break;
 80154ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80154cc:	7dbb      	ldrb	r3, [r7, #22]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d119      	bne.n	8015506 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154d8:	b2db      	uxtb	r3, r3
 80154da:	2b03      	cmp	r3, #3
 80154dc:	d113      	bne.n	8015506 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80154de:	7dba      	ldrb	r2, [r7, #22]
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	32ae      	adds	r2, #174	; 0xae
 80154e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154e8:	691b      	ldr	r3, [r3, #16]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d00b      	beq.n	8015506 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80154ee:	7dba      	ldrb	r2, [r7, #22]
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80154f6:	7dba      	ldrb	r2, [r7, #22]
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	32ae      	adds	r2, #174	; 0xae
 80154fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015500:	691b      	ldr	r3, [r3, #16]
 8015502:	68f8      	ldr	r0, [r7, #12]
 8015504:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015506:	68f8      	ldr	r0, [r7, #12]
 8015508:	f001 f8e8 	bl	80166dc <USBD_CtlSendStatus>
 801550c:	e032      	b.n	8015574 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801550e:	7afb      	ldrb	r3, [r7, #11]
 8015510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015514:	b2db      	uxtb	r3, r3
 8015516:	4619      	mov	r1, r3
 8015518:	68f8      	ldr	r0, [r7, #12]
 801551a:	f000 f9a5 	bl	8015868 <USBD_CoreFindEP>
 801551e:	4603      	mov	r3, r0
 8015520:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015522:	7dbb      	ldrb	r3, [r7, #22]
 8015524:	2bff      	cmp	r3, #255	; 0xff
 8015526:	d025      	beq.n	8015574 <USBD_LL_DataOutStage+0x15c>
 8015528:	7dbb      	ldrb	r3, [r7, #22]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d122      	bne.n	8015574 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015534:	b2db      	uxtb	r3, r3
 8015536:	2b03      	cmp	r3, #3
 8015538:	d117      	bne.n	801556a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801553a:	7dba      	ldrb	r2, [r7, #22]
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	32ae      	adds	r2, #174	; 0xae
 8015540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015544:	699b      	ldr	r3, [r3, #24]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d00f      	beq.n	801556a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801554a:	7dba      	ldrb	r2, [r7, #22]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015552:	7dba      	ldrb	r2, [r7, #22]
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	32ae      	adds	r2, #174	; 0xae
 8015558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801555c:	699b      	ldr	r3, [r3, #24]
 801555e:	7afa      	ldrb	r2, [r7, #11]
 8015560:	4611      	mov	r1, r2
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	4798      	blx	r3
 8015566:	4603      	mov	r3, r0
 8015568:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801556a:	7dfb      	ldrb	r3, [r7, #23]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d001      	beq.n	8015574 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015570:	7dfb      	ldrb	r3, [r7, #23]
 8015572:	e000      	b.n	8015576 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015574:	2300      	movs	r3, #0
}
 8015576:	4618      	mov	r0, r3
 8015578:	3718      	adds	r7, #24
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}

0801557e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801557e:	b580      	push	{r7, lr}
 8015580:	b086      	sub	sp, #24
 8015582:	af00      	add	r7, sp, #0
 8015584:	60f8      	str	r0, [r7, #12]
 8015586:	460b      	mov	r3, r1
 8015588:	607a      	str	r2, [r7, #4]
 801558a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801558c:	7afb      	ldrb	r3, [r7, #11]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d16f      	bne.n	8015672 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	3314      	adds	r3, #20
 8015596:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801559e:	2b02      	cmp	r3, #2
 80155a0:	d15a      	bne.n	8015658 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	689a      	ldr	r2, [r3, #8]
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	68db      	ldr	r3, [r3, #12]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d914      	bls.n	80155d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80155ae:	693b      	ldr	r3, [r7, #16]
 80155b0:	689a      	ldr	r2, [r3, #8]
 80155b2:	693b      	ldr	r3, [r7, #16]
 80155b4:	68db      	ldr	r3, [r3, #12]
 80155b6:	1ad2      	subs	r2, r2, r3
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80155bc:	693b      	ldr	r3, [r7, #16]
 80155be:	689b      	ldr	r3, [r3, #8]
 80155c0:	461a      	mov	r2, r3
 80155c2:	6879      	ldr	r1, [r7, #4]
 80155c4:	68f8      	ldr	r0, [r7, #12]
 80155c6:	f001 f84a 	bl	801665e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155ca:	2300      	movs	r3, #0
 80155cc:	2200      	movs	r2, #0
 80155ce:	2100      	movs	r1, #0
 80155d0:	68f8      	ldr	r0, [r7, #12]
 80155d2:	f7f1 fa33 	bl	8006a3c <USBD_LL_PrepareReceive>
 80155d6:	e03f      	b.n	8015658 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80155d8:	693b      	ldr	r3, [r7, #16]
 80155da:	68da      	ldr	r2, [r3, #12]
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	689b      	ldr	r3, [r3, #8]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d11c      	bne.n	801561e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	685a      	ldr	r2, [r3, #4]
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d316      	bcc.n	801561e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80155f0:	693b      	ldr	r3, [r7, #16]
 80155f2:	685a      	ldr	r2, [r3, #4]
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d20f      	bcs.n	801561e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80155fe:	2200      	movs	r2, #0
 8015600:	2100      	movs	r1, #0
 8015602:	68f8      	ldr	r0, [r7, #12]
 8015604:	f001 f82b 	bl	801665e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2200      	movs	r2, #0
 801560c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015610:	2300      	movs	r3, #0
 8015612:	2200      	movs	r2, #0
 8015614:	2100      	movs	r1, #0
 8015616:	68f8      	ldr	r0, [r7, #12]
 8015618:	f7f1 fa10 	bl	8006a3c <USBD_LL_PrepareReceive>
 801561c:	e01c      	b.n	8015658 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015624:	b2db      	uxtb	r3, r3
 8015626:	2b03      	cmp	r3, #3
 8015628:	d10f      	bne.n	801564a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015630:	68db      	ldr	r3, [r3, #12]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d009      	beq.n	801564a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	2200      	movs	r2, #0
 801563a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015644:	68db      	ldr	r3, [r3, #12]
 8015646:	68f8      	ldr	r0, [r7, #12]
 8015648:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801564a:	2180      	movs	r1, #128	; 0x80
 801564c:	68f8      	ldr	r0, [r7, #12]
 801564e:	f7f1 f94b 	bl	80068e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015652:	68f8      	ldr	r0, [r7, #12]
 8015654:	f001 f855 	bl	8016702 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801565e:	2b00      	cmp	r3, #0
 8015660:	d03a      	beq.n	80156d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015662:	68f8      	ldr	r0, [r7, #12]
 8015664:	f7ff fe42 	bl	80152ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	2200      	movs	r2, #0
 801566c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015670:	e032      	b.n	80156d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015672:	7afb      	ldrb	r3, [r7, #11]
 8015674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015678:	b2db      	uxtb	r3, r3
 801567a:	4619      	mov	r1, r3
 801567c:	68f8      	ldr	r0, [r7, #12]
 801567e:	f000 f8f3 	bl	8015868 <USBD_CoreFindEP>
 8015682:	4603      	mov	r3, r0
 8015684:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015686:	7dfb      	ldrb	r3, [r7, #23]
 8015688:	2bff      	cmp	r3, #255	; 0xff
 801568a:	d025      	beq.n	80156d8 <USBD_LL_DataInStage+0x15a>
 801568c:	7dfb      	ldrb	r3, [r7, #23]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d122      	bne.n	80156d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015698:	b2db      	uxtb	r3, r3
 801569a:	2b03      	cmp	r3, #3
 801569c:	d11c      	bne.n	80156d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801569e:	7dfa      	ldrb	r2, [r7, #23]
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	32ae      	adds	r2, #174	; 0xae
 80156a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a8:	695b      	ldr	r3, [r3, #20]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d014      	beq.n	80156d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80156ae:	7dfa      	ldrb	r2, [r7, #23]
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80156b6:	7dfa      	ldrb	r2, [r7, #23]
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	32ae      	adds	r2, #174	; 0xae
 80156bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156c0:	695b      	ldr	r3, [r3, #20]
 80156c2:	7afa      	ldrb	r2, [r7, #11]
 80156c4:	4611      	mov	r1, r2
 80156c6:	68f8      	ldr	r0, [r7, #12]
 80156c8:	4798      	blx	r3
 80156ca:	4603      	mov	r3, r0
 80156cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80156ce:	7dbb      	ldrb	r3, [r7, #22]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d001      	beq.n	80156d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80156d4:	7dbb      	ldrb	r3, [r7, #22]
 80156d6:	e000      	b.n	80156da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80156d8:	2300      	movs	r3, #0
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3718      	adds	r7, #24
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}

080156e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80156e2:	b580      	push	{r7, lr}
 80156e4:	b084      	sub	sp, #16
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80156ea:	2300      	movs	r3, #0
 80156ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2201      	movs	r2, #1
 80156f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2200      	movs	r2, #0
 80156fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2200      	movs	r2, #0
 8015702:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	2200      	movs	r2, #0
 8015708:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2200      	movs	r2, #0
 8015710:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801571a:	2b00      	cmp	r3, #0
 801571c:	d014      	beq.n	8015748 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d00e      	beq.n	8015748 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015730:	685b      	ldr	r3, [r3, #4]
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	6852      	ldr	r2, [r2, #4]
 8015736:	b2d2      	uxtb	r2, r2
 8015738:	4611      	mov	r1, r2
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	4798      	blx	r3
 801573e:	4603      	mov	r3, r0
 8015740:	2b00      	cmp	r3, #0
 8015742:	d001      	beq.n	8015748 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015744:	2303      	movs	r3, #3
 8015746:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015748:	2340      	movs	r3, #64	; 0x40
 801574a:	2200      	movs	r2, #0
 801574c:	2100      	movs	r1, #0
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f7f1 f885 	bl	800685e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2201      	movs	r2, #1
 8015758:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2240      	movs	r2, #64	; 0x40
 8015760:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015764:	2340      	movs	r3, #64	; 0x40
 8015766:	2200      	movs	r2, #0
 8015768:	2180      	movs	r1, #128	; 0x80
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f7f1 f877 	bl	800685e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2201      	movs	r2, #1
 8015774:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	2240      	movs	r2, #64	; 0x40
 801577a:	621a      	str	r2, [r3, #32]

  return ret;
 801577c:	7bfb      	ldrb	r3, [r7, #15]
}
 801577e:	4618      	mov	r0, r3
 8015780:	3710      	adds	r7, #16
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}

08015786 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015786:	b480      	push	{r7}
 8015788:	b083      	sub	sp, #12
 801578a:	af00      	add	r7, sp, #0
 801578c:	6078      	str	r0, [r7, #4]
 801578e:	460b      	mov	r3, r1
 8015790:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	78fa      	ldrb	r2, [r7, #3]
 8015796:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015798:	2300      	movs	r3, #0
}
 801579a:	4618      	mov	r0, r3
 801579c:	370c      	adds	r7, #12
 801579e:	46bd      	mov	sp, r7
 80157a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a4:	4770      	bx	lr

080157a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80157a6:	b480      	push	{r7}
 80157a8:	b083      	sub	sp, #12
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	2b04      	cmp	r3, #4
 80157b8:	d006      	beq.n	80157c8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157c0:	b2da      	uxtb	r2, r3
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2204      	movs	r2, #4
 80157cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80157d0:	2300      	movs	r3, #0
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	370c      	adds	r7, #12
 80157d6:	46bd      	mov	sp, r7
 80157d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157dc:	4770      	bx	lr

080157de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80157de:	b480      	push	{r7}
 80157e0:	b083      	sub	sp, #12
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157ec:	b2db      	uxtb	r3, r3
 80157ee:	2b04      	cmp	r3, #4
 80157f0:	d106      	bne.n	8015800 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80157f8:	b2da      	uxtb	r2, r3
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015800:	2300      	movs	r3, #0
}
 8015802:	4618      	mov	r0, r3
 8015804:	370c      	adds	r7, #12
 8015806:	46bd      	mov	sp, r7
 8015808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580c:	4770      	bx	lr

0801580e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801580e:	b580      	push	{r7, lr}
 8015810:	b082      	sub	sp, #8
 8015812:	af00      	add	r7, sp, #0
 8015814:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801581c:	b2db      	uxtb	r3, r3
 801581e:	2b03      	cmp	r3, #3
 8015820:	d110      	bne.n	8015844 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015828:	2b00      	cmp	r3, #0
 801582a:	d00b      	beq.n	8015844 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015832:	69db      	ldr	r3, [r3, #28]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d005      	beq.n	8015844 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801583e:	69db      	ldr	r3, [r3, #28]
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015844:	2300      	movs	r3, #0
}
 8015846:	4618      	mov	r0, r3
 8015848:	3708      	adds	r7, #8
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}

0801584e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801584e:	b480      	push	{r7}
 8015850:	b083      	sub	sp, #12
 8015852:	af00      	add	r7, sp, #0
 8015854:	6078      	str	r0, [r7, #4]
 8015856:	460b      	mov	r3, r1
 8015858:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801585a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801585c:	4618      	mov	r0, r3
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr

08015868 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	460b      	mov	r3, r1
 8015872:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015874:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015876:	4618      	mov	r0, r3
 8015878:	370c      	adds	r7, #12
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr

08015882 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015882:	b580      	push	{r7, lr}
 8015884:	b086      	sub	sp, #24
 8015886:	af00      	add	r7, sp, #0
 8015888:	6078      	str	r0, [r7, #4]
 801588a:	460b      	mov	r3, r1
 801588c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015896:	2300      	movs	r3, #0
 8015898:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	885b      	ldrh	r3, [r3, #2]
 801589e:	b29a      	uxth	r2, r3
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d920      	bls.n	80158ec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80158b2:	e013      	b.n	80158dc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80158b4:	f107 030a 	add.w	r3, r7, #10
 80158b8:	4619      	mov	r1, r3
 80158ba:	6978      	ldr	r0, [r7, #20]
 80158bc:	f000 f81b 	bl	80158f6 <USBD_GetNextDesc>
 80158c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	785b      	ldrb	r3, [r3, #1]
 80158c6:	2b05      	cmp	r3, #5
 80158c8:	d108      	bne.n	80158dc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	789b      	ldrb	r3, [r3, #2]
 80158d2:	78fa      	ldrb	r2, [r7, #3]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d008      	beq.n	80158ea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80158d8:	2300      	movs	r3, #0
 80158da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	885b      	ldrh	r3, [r3, #2]
 80158e0:	b29a      	uxth	r2, r3
 80158e2:	897b      	ldrh	r3, [r7, #10]
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d8e5      	bhi.n	80158b4 <USBD_GetEpDesc+0x32>
 80158e8:	e000      	b.n	80158ec <USBD_GetEpDesc+0x6a>
          break;
 80158ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80158ec:	693b      	ldr	r3, [r7, #16]
}
 80158ee:	4618      	mov	r0, r3
 80158f0:	3718      	adds	r7, #24
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}

080158f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80158f6:	b480      	push	{r7}
 80158f8:	b085      	sub	sp, #20
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
 80158fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	881a      	ldrh	r2, [r3, #0]
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	b29b      	uxth	r3, r3
 801590e:	4413      	add	r3, r2
 8015910:	b29a      	uxth	r2, r3
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	461a      	mov	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	4413      	add	r3, r2
 8015920:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015922:	68fb      	ldr	r3, [r7, #12]
}
 8015924:	4618      	mov	r0, r3
 8015926:	3714      	adds	r7, #20
 8015928:	46bd      	mov	sp, r7
 801592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592e:	4770      	bx	lr

08015930 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015930:	b480      	push	{r7}
 8015932:	b087      	sub	sp, #28
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	3301      	adds	r3, #1
 8015946:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801594e:	8a3b      	ldrh	r3, [r7, #16]
 8015950:	021b      	lsls	r3, r3, #8
 8015952:	b21a      	sxth	r2, r3
 8015954:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015958:	4313      	orrs	r3, r2
 801595a:	b21b      	sxth	r3, r3
 801595c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801595e:	89fb      	ldrh	r3, [r7, #14]
}
 8015960:	4618      	mov	r0, r3
 8015962:	371c      	adds	r7, #28
 8015964:	46bd      	mov	sp, r7
 8015966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596a:	4770      	bx	lr

0801596c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015976:	2300      	movs	r3, #0
 8015978:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	781b      	ldrb	r3, [r3, #0]
 801597e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015982:	2b40      	cmp	r3, #64	; 0x40
 8015984:	d005      	beq.n	8015992 <USBD_StdDevReq+0x26>
 8015986:	2b40      	cmp	r3, #64	; 0x40
 8015988:	d857      	bhi.n	8015a3a <USBD_StdDevReq+0xce>
 801598a:	2b00      	cmp	r3, #0
 801598c:	d00f      	beq.n	80159ae <USBD_StdDevReq+0x42>
 801598e:	2b20      	cmp	r3, #32
 8015990:	d153      	bne.n	8015a3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	32ae      	adds	r2, #174	; 0xae
 801599c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159a0:	689b      	ldr	r3, [r3, #8]
 80159a2:	6839      	ldr	r1, [r7, #0]
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	4798      	blx	r3
 80159a8:	4603      	mov	r3, r0
 80159aa:	73fb      	strb	r3, [r7, #15]
      break;
 80159ac:	e04a      	b.n	8015a44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	785b      	ldrb	r3, [r3, #1]
 80159b2:	2b09      	cmp	r3, #9
 80159b4:	d83b      	bhi.n	8015a2e <USBD_StdDevReq+0xc2>
 80159b6:	a201      	add	r2, pc, #4	; (adr r2, 80159bc <USBD_StdDevReq+0x50>)
 80159b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159bc:	08015a11 	.word	0x08015a11
 80159c0:	08015a25 	.word	0x08015a25
 80159c4:	08015a2f 	.word	0x08015a2f
 80159c8:	08015a1b 	.word	0x08015a1b
 80159cc:	08015a2f 	.word	0x08015a2f
 80159d0:	080159ef 	.word	0x080159ef
 80159d4:	080159e5 	.word	0x080159e5
 80159d8:	08015a2f 	.word	0x08015a2f
 80159dc:	08015a07 	.word	0x08015a07
 80159e0:	080159f9 	.word	0x080159f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80159e4:	6839      	ldr	r1, [r7, #0]
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f000 fa3c 	bl	8015e64 <USBD_GetDescriptor>
          break;
 80159ec:	e024      	b.n	8015a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80159ee:	6839      	ldr	r1, [r7, #0]
 80159f0:	6878      	ldr	r0, [r7, #4]
 80159f2:	f000 fbcb 	bl	801618c <USBD_SetAddress>
          break;
 80159f6:	e01f      	b.n	8015a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80159f8:	6839      	ldr	r1, [r7, #0]
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f000 fc0a 	bl	8016214 <USBD_SetConfig>
 8015a00:	4603      	mov	r3, r0
 8015a02:	73fb      	strb	r3, [r7, #15]
          break;
 8015a04:	e018      	b.n	8015a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015a06:	6839      	ldr	r1, [r7, #0]
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f000 fcad 	bl	8016368 <USBD_GetConfig>
          break;
 8015a0e:	e013      	b.n	8015a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015a10:	6839      	ldr	r1, [r7, #0]
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f000 fcde 	bl	80163d4 <USBD_GetStatus>
          break;
 8015a18:	e00e      	b.n	8015a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015a1a:	6839      	ldr	r1, [r7, #0]
 8015a1c:	6878      	ldr	r0, [r7, #4]
 8015a1e:	f000 fd0d 	bl	801643c <USBD_SetFeature>
          break;
 8015a22:	e009      	b.n	8015a38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015a24:	6839      	ldr	r1, [r7, #0]
 8015a26:	6878      	ldr	r0, [r7, #4]
 8015a28:	f000 fd31 	bl	801648e <USBD_ClrFeature>
          break;
 8015a2c:	e004      	b.n	8015a38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015a2e:	6839      	ldr	r1, [r7, #0]
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f000 fd88 	bl	8016546 <USBD_CtlError>
          break;
 8015a36:	bf00      	nop
      }
      break;
 8015a38:	e004      	b.n	8015a44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015a3a:	6839      	ldr	r1, [r7, #0]
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f000 fd82 	bl	8016546 <USBD_CtlError>
      break;
 8015a42:	bf00      	nop
  }

  return ret;
 8015a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}
 8015a4e:	bf00      	nop

08015a50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b084      	sub	sp, #16
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	781b      	ldrb	r3, [r3, #0]
 8015a62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a66:	2b40      	cmp	r3, #64	; 0x40
 8015a68:	d005      	beq.n	8015a76 <USBD_StdItfReq+0x26>
 8015a6a:	2b40      	cmp	r3, #64	; 0x40
 8015a6c:	d852      	bhi.n	8015b14 <USBD_StdItfReq+0xc4>
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d001      	beq.n	8015a76 <USBD_StdItfReq+0x26>
 8015a72:	2b20      	cmp	r3, #32
 8015a74:	d14e      	bne.n	8015b14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a7c:	b2db      	uxtb	r3, r3
 8015a7e:	3b01      	subs	r3, #1
 8015a80:	2b02      	cmp	r3, #2
 8015a82:	d840      	bhi.n	8015b06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	889b      	ldrh	r3, [r3, #4]
 8015a88:	b2db      	uxtb	r3, r3
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	d836      	bhi.n	8015afc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	889b      	ldrh	r3, [r3, #4]
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	4619      	mov	r1, r3
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	f7ff fed9 	bl	801584e <USBD_CoreFindIF>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015aa0:	7bbb      	ldrb	r3, [r7, #14]
 8015aa2:	2bff      	cmp	r3, #255	; 0xff
 8015aa4:	d01d      	beq.n	8015ae2 <USBD_StdItfReq+0x92>
 8015aa6:	7bbb      	ldrb	r3, [r7, #14]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d11a      	bne.n	8015ae2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015aac:	7bba      	ldrb	r2, [r7, #14]
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	32ae      	adds	r2, #174	; 0xae
 8015ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ab6:	689b      	ldr	r3, [r3, #8]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d00f      	beq.n	8015adc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015abc:	7bba      	ldrb	r2, [r7, #14]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ac4:	7bba      	ldrb	r2, [r7, #14]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	32ae      	adds	r2, #174	; 0xae
 8015aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ace:	689b      	ldr	r3, [r3, #8]
 8015ad0:	6839      	ldr	r1, [r7, #0]
 8015ad2:	6878      	ldr	r0, [r7, #4]
 8015ad4:	4798      	blx	r3
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015ada:	e004      	b.n	8015ae6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015adc:	2303      	movs	r3, #3
 8015ade:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015ae0:	e001      	b.n	8015ae6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015ae2:	2303      	movs	r3, #3
 8015ae4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	88db      	ldrh	r3, [r3, #6]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d110      	bne.n	8015b10 <USBD_StdItfReq+0xc0>
 8015aee:	7bfb      	ldrb	r3, [r7, #15]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d10d      	bne.n	8015b10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f000 fdf1 	bl	80166dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015afa:	e009      	b.n	8015b10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015afc:	6839      	ldr	r1, [r7, #0]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f000 fd21 	bl	8016546 <USBD_CtlError>
          break;
 8015b04:	e004      	b.n	8015b10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015b06:	6839      	ldr	r1, [r7, #0]
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f000 fd1c 	bl	8016546 <USBD_CtlError>
          break;
 8015b0e:	e000      	b.n	8015b12 <USBD_StdItfReq+0xc2>
          break;
 8015b10:	bf00      	nop
      }
      break;
 8015b12:	e004      	b.n	8015b1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015b14:	6839      	ldr	r1, [r7, #0]
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f000 fd15 	bl	8016546 <USBD_CtlError>
      break;
 8015b1c:	bf00      	nop
  }

  return ret;
 8015b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3710      	adds	r7, #16
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b084      	sub	sp, #16
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015b32:	2300      	movs	r3, #0
 8015b34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	889b      	ldrh	r3, [r3, #4]
 8015b3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	781b      	ldrb	r3, [r3, #0]
 8015b40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015b44:	2b40      	cmp	r3, #64	; 0x40
 8015b46:	d007      	beq.n	8015b58 <USBD_StdEPReq+0x30>
 8015b48:	2b40      	cmp	r3, #64	; 0x40
 8015b4a:	f200 817f 	bhi.w	8015e4c <USBD_StdEPReq+0x324>
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d02a      	beq.n	8015ba8 <USBD_StdEPReq+0x80>
 8015b52:	2b20      	cmp	r3, #32
 8015b54:	f040 817a 	bne.w	8015e4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b58:	7bbb      	ldrb	r3, [r7, #14]
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f7ff fe83 	bl	8015868 <USBD_CoreFindEP>
 8015b62:	4603      	mov	r3, r0
 8015b64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b66:	7b7b      	ldrb	r3, [r7, #13]
 8015b68:	2bff      	cmp	r3, #255	; 0xff
 8015b6a:	f000 8174 	beq.w	8015e56 <USBD_StdEPReq+0x32e>
 8015b6e:	7b7b      	ldrb	r3, [r7, #13]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	f040 8170 	bne.w	8015e56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015b76:	7b7a      	ldrb	r2, [r7, #13]
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015b7e:	7b7a      	ldrb	r2, [r7, #13]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	32ae      	adds	r2, #174	; 0xae
 8015b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b88:	689b      	ldr	r3, [r3, #8]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	f000 8163 	beq.w	8015e56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015b90:	7b7a      	ldrb	r2, [r7, #13]
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	32ae      	adds	r2, #174	; 0xae
 8015b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b9a:	689b      	ldr	r3, [r3, #8]
 8015b9c:	6839      	ldr	r1, [r7, #0]
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	4798      	blx	r3
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015ba6:	e156      	b.n	8015e56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	785b      	ldrb	r3, [r3, #1]
 8015bac:	2b03      	cmp	r3, #3
 8015bae:	d008      	beq.n	8015bc2 <USBD_StdEPReq+0x9a>
 8015bb0:	2b03      	cmp	r3, #3
 8015bb2:	f300 8145 	bgt.w	8015e40 <USBD_StdEPReq+0x318>
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	f000 809b 	beq.w	8015cf2 <USBD_StdEPReq+0x1ca>
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d03c      	beq.n	8015c3a <USBD_StdEPReq+0x112>
 8015bc0:	e13e      	b.n	8015e40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2b02      	cmp	r3, #2
 8015bcc:	d002      	beq.n	8015bd4 <USBD_StdEPReq+0xac>
 8015bce:	2b03      	cmp	r3, #3
 8015bd0:	d016      	beq.n	8015c00 <USBD_StdEPReq+0xd8>
 8015bd2:	e02c      	b.n	8015c2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015bd4:	7bbb      	ldrb	r3, [r7, #14]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d00d      	beq.n	8015bf6 <USBD_StdEPReq+0xce>
 8015bda:	7bbb      	ldrb	r3, [r7, #14]
 8015bdc:	2b80      	cmp	r3, #128	; 0x80
 8015bde:	d00a      	beq.n	8015bf6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015be0:	7bbb      	ldrb	r3, [r7, #14]
 8015be2:	4619      	mov	r1, r3
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f7f0 fe7f 	bl	80068e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015bea:	2180      	movs	r1, #128	; 0x80
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f7f0 fe7b 	bl	80068e8 <USBD_LL_StallEP>
 8015bf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015bf4:	e020      	b.n	8015c38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015bf6:	6839      	ldr	r1, [r7, #0]
 8015bf8:	6878      	ldr	r0, [r7, #4]
 8015bfa:	f000 fca4 	bl	8016546 <USBD_CtlError>
              break;
 8015bfe:	e01b      	b.n	8015c38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	885b      	ldrh	r3, [r3, #2]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d10e      	bne.n	8015c26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015c08:	7bbb      	ldrb	r3, [r7, #14]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d00b      	beq.n	8015c26 <USBD_StdEPReq+0xfe>
 8015c0e:	7bbb      	ldrb	r3, [r7, #14]
 8015c10:	2b80      	cmp	r3, #128	; 0x80
 8015c12:	d008      	beq.n	8015c26 <USBD_StdEPReq+0xfe>
 8015c14:	683b      	ldr	r3, [r7, #0]
 8015c16:	88db      	ldrh	r3, [r3, #6]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d104      	bne.n	8015c26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015c1c:	7bbb      	ldrb	r3, [r7, #14]
 8015c1e:	4619      	mov	r1, r3
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f7f0 fe61 	bl	80068e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 fd58 	bl	80166dc <USBD_CtlSendStatus>

              break;
 8015c2c:	e004      	b.n	8015c38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015c2e:	6839      	ldr	r1, [r7, #0]
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f000 fc88 	bl	8016546 <USBD_CtlError>
              break;
 8015c36:	bf00      	nop
          }
          break;
 8015c38:	e107      	b.n	8015e4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c40:	b2db      	uxtb	r3, r3
 8015c42:	2b02      	cmp	r3, #2
 8015c44:	d002      	beq.n	8015c4c <USBD_StdEPReq+0x124>
 8015c46:	2b03      	cmp	r3, #3
 8015c48:	d016      	beq.n	8015c78 <USBD_StdEPReq+0x150>
 8015c4a:	e04b      	b.n	8015ce4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c4c:	7bbb      	ldrb	r3, [r7, #14]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d00d      	beq.n	8015c6e <USBD_StdEPReq+0x146>
 8015c52:	7bbb      	ldrb	r3, [r7, #14]
 8015c54:	2b80      	cmp	r3, #128	; 0x80
 8015c56:	d00a      	beq.n	8015c6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015c58:	7bbb      	ldrb	r3, [r7, #14]
 8015c5a:	4619      	mov	r1, r3
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f7f0 fe43 	bl	80068e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015c62:	2180      	movs	r1, #128	; 0x80
 8015c64:	6878      	ldr	r0, [r7, #4]
 8015c66:	f7f0 fe3f 	bl	80068e8 <USBD_LL_StallEP>
 8015c6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015c6c:	e040      	b.n	8015cf0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015c6e:	6839      	ldr	r1, [r7, #0]
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f000 fc68 	bl	8016546 <USBD_CtlError>
              break;
 8015c76:	e03b      	b.n	8015cf0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	885b      	ldrh	r3, [r3, #2]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d136      	bne.n	8015cee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015c80:	7bbb      	ldrb	r3, [r7, #14]
 8015c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d004      	beq.n	8015c94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015c8a:	7bbb      	ldrb	r3, [r7, #14]
 8015c8c:	4619      	mov	r1, r3
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f7f0 fe49 	bl	8006926 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f000 fd21 	bl	80166dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015c9a:	7bbb      	ldrb	r3, [r7, #14]
 8015c9c:	4619      	mov	r1, r3
 8015c9e:	6878      	ldr	r0, [r7, #4]
 8015ca0:	f7ff fde2 	bl	8015868 <USBD_CoreFindEP>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ca8:	7b7b      	ldrb	r3, [r7, #13]
 8015caa:	2bff      	cmp	r3, #255	; 0xff
 8015cac:	d01f      	beq.n	8015cee <USBD_StdEPReq+0x1c6>
 8015cae:	7b7b      	ldrb	r3, [r7, #13]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d11c      	bne.n	8015cee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015cb4:	7b7a      	ldrb	r2, [r7, #13]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015cbc:	7b7a      	ldrb	r2, [r7, #13]
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	32ae      	adds	r2, #174	; 0xae
 8015cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cc6:	689b      	ldr	r3, [r3, #8]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d010      	beq.n	8015cee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ccc:	7b7a      	ldrb	r2, [r7, #13]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	32ae      	adds	r2, #174	; 0xae
 8015cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cd6:	689b      	ldr	r3, [r3, #8]
 8015cd8:	6839      	ldr	r1, [r7, #0]
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	4798      	blx	r3
 8015cde:	4603      	mov	r3, r0
 8015ce0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015ce2:	e004      	b.n	8015cee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015ce4:	6839      	ldr	r1, [r7, #0]
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f000 fc2d 	bl	8016546 <USBD_CtlError>
              break;
 8015cec:	e000      	b.n	8015cf0 <USBD_StdEPReq+0x1c8>
              break;
 8015cee:	bf00      	nop
          }
          break;
 8015cf0:	e0ab      	b.n	8015e4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cf8:	b2db      	uxtb	r3, r3
 8015cfa:	2b02      	cmp	r3, #2
 8015cfc:	d002      	beq.n	8015d04 <USBD_StdEPReq+0x1dc>
 8015cfe:	2b03      	cmp	r3, #3
 8015d00:	d032      	beq.n	8015d68 <USBD_StdEPReq+0x240>
 8015d02:	e097      	b.n	8015e34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015d04:	7bbb      	ldrb	r3, [r7, #14]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d007      	beq.n	8015d1a <USBD_StdEPReq+0x1f2>
 8015d0a:	7bbb      	ldrb	r3, [r7, #14]
 8015d0c:	2b80      	cmp	r3, #128	; 0x80
 8015d0e:	d004      	beq.n	8015d1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015d10:	6839      	ldr	r1, [r7, #0]
 8015d12:	6878      	ldr	r0, [r7, #4]
 8015d14:	f000 fc17 	bl	8016546 <USBD_CtlError>
                break;
 8015d18:	e091      	b.n	8015e3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	da0b      	bge.n	8015d3a <USBD_StdEPReq+0x212>
 8015d22:	7bbb      	ldrb	r3, [r7, #14]
 8015d24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d28:	4613      	mov	r3, r2
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	4413      	add	r3, r2
 8015d2e:	009b      	lsls	r3, r3, #2
 8015d30:	3310      	adds	r3, #16
 8015d32:	687a      	ldr	r2, [r7, #4]
 8015d34:	4413      	add	r3, r2
 8015d36:	3304      	adds	r3, #4
 8015d38:	e00b      	b.n	8015d52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015d3a:	7bbb      	ldrb	r3, [r7, #14]
 8015d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d40:	4613      	mov	r3, r2
 8015d42:	009b      	lsls	r3, r3, #2
 8015d44:	4413      	add	r3, r2
 8015d46:	009b      	lsls	r3, r3, #2
 8015d48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015d4c:	687a      	ldr	r2, [r7, #4]
 8015d4e:	4413      	add	r3, r2
 8015d50:	3304      	adds	r3, #4
 8015d52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	2200      	movs	r2, #0
 8015d58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	2202      	movs	r2, #2
 8015d5e:	4619      	mov	r1, r3
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f000 fc61 	bl	8016628 <USBD_CtlSendData>
              break;
 8015d66:	e06a      	b.n	8015e3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	da11      	bge.n	8015d94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015d70:	7bbb      	ldrb	r3, [r7, #14]
 8015d72:	f003 020f 	and.w	r2, r3, #15
 8015d76:	6879      	ldr	r1, [r7, #4]
 8015d78:	4613      	mov	r3, r2
 8015d7a:	009b      	lsls	r3, r3, #2
 8015d7c:	4413      	add	r3, r2
 8015d7e:	009b      	lsls	r3, r3, #2
 8015d80:	440b      	add	r3, r1
 8015d82:	3324      	adds	r3, #36	; 0x24
 8015d84:	881b      	ldrh	r3, [r3, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d117      	bne.n	8015dba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015d8a:	6839      	ldr	r1, [r7, #0]
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f000 fbda 	bl	8016546 <USBD_CtlError>
                  break;
 8015d92:	e054      	b.n	8015e3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015d94:	7bbb      	ldrb	r3, [r7, #14]
 8015d96:	f003 020f 	and.w	r2, r3, #15
 8015d9a:	6879      	ldr	r1, [r7, #4]
 8015d9c:	4613      	mov	r3, r2
 8015d9e:	009b      	lsls	r3, r3, #2
 8015da0:	4413      	add	r3, r2
 8015da2:	009b      	lsls	r3, r3, #2
 8015da4:	440b      	add	r3, r1
 8015da6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015daa:	881b      	ldrh	r3, [r3, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d104      	bne.n	8015dba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015db0:	6839      	ldr	r1, [r7, #0]
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f000 fbc7 	bl	8016546 <USBD_CtlError>
                  break;
 8015db8:	e041      	b.n	8015e3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	da0b      	bge.n	8015dda <USBD_StdEPReq+0x2b2>
 8015dc2:	7bbb      	ldrb	r3, [r7, #14]
 8015dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015dc8:	4613      	mov	r3, r2
 8015dca:	009b      	lsls	r3, r3, #2
 8015dcc:	4413      	add	r3, r2
 8015dce:	009b      	lsls	r3, r3, #2
 8015dd0:	3310      	adds	r3, #16
 8015dd2:	687a      	ldr	r2, [r7, #4]
 8015dd4:	4413      	add	r3, r2
 8015dd6:	3304      	adds	r3, #4
 8015dd8:	e00b      	b.n	8015df2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015dda:	7bbb      	ldrb	r3, [r7, #14]
 8015ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015de0:	4613      	mov	r3, r2
 8015de2:	009b      	lsls	r3, r3, #2
 8015de4:	4413      	add	r3, r2
 8015de6:	009b      	lsls	r3, r3, #2
 8015de8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015dec:	687a      	ldr	r2, [r7, #4]
 8015dee:	4413      	add	r3, r2
 8015df0:	3304      	adds	r3, #4
 8015df2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015df4:	7bbb      	ldrb	r3, [r7, #14]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d002      	beq.n	8015e00 <USBD_StdEPReq+0x2d8>
 8015dfa:	7bbb      	ldrb	r3, [r7, #14]
 8015dfc:	2b80      	cmp	r3, #128	; 0x80
 8015dfe:	d103      	bne.n	8015e08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	2200      	movs	r2, #0
 8015e04:	601a      	str	r2, [r3, #0]
 8015e06:	e00e      	b.n	8015e26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015e08:	7bbb      	ldrb	r3, [r7, #14]
 8015e0a:	4619      	mov	r1, r3
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f7f0 fda9 	bl	8006964 <USBD_LL_IsStallEP>
 8015e12:	4603      	mov	r3, r0
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d003      	beq.n	8015e20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	2201      	movs	r2, #1
 8015e1c:	601a      	str	r2, [r3, #0]
 8015e1e:	e002      	b.n	8015e26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	2200      	movs	r2, #0
 8015e24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	2202      	movs	r2, #2
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f000 fbfb 	bl	8016628 <USBD_CtlSendData>
              break;
 8015e32:	e004      	b.n	8015e3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015e34:	6839      	ldr	r1, [r7, #0]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f000 fb85 	bl	8016546 <USBD_CtlError>
              break;
 8015e3c:	bf00      	nop
          }
          break;
 8015e3e:	e004      	b.n	8015e4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015e40:	6839      	ldr	r1, [r7, #0]
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f000 fb7f 	bl	8016546 <USBD_CtlError>
          break;
 8015e48:	bf00      	nop
      }
      break;
 8015e4a:	e005      	b.n	8015e58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015e4c:	6839      	ldr	r1, [r7, #0]
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f000 fb79 	bl	8016546 <USBD_CtlError>
      break;
 8015e54:	e000      	b.n	8015e58 <USBD_StdEPReq+0x330>
      break;
 8015e56:	bf00      	nop
  }

  return ret;
 8015e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3710      	adds	r7, #16
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
	...

08015e64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b084      	sub	sp, #16
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015e72:	2300      	movs	r3, #0
 8015e74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015e76:	2300      	movs	r3, #0
 8015e78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	885b      	ldrh	r3, [r3, #2]
 8015e7e:	0a1b      	lsrs	r3, r3, #8
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	3b01      	subs	r3, #1
 8015e84:	2b0e      	cmp	r3, #14
 8015e86:	f200 8152 	bhi.w	801612e <USBD_GetDescriptor+0x2ca>
 8015e8a:	a201      	add	r2, pc, #4	; (adr r2, 8015e90 <USBD_GetDescriptor+0x2c>)
 8015e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e90:	08015f01 	.word	0x08015f01
 8015e94:	08015f19 	.word	0x08015f19
 8015e98:	08015f59 	.word	0x08015f59
 8015e9c:	0801612f 	.word	0x0801612f
 8015ea0:	0801612f 	.word	0x0801612f
 8015ea4:	080160cf 	.word	0x080160cf
 8015ea8:	080160fb 	.word	0x080160fb
 8015eac:	0801612f 	.word	0x0801612f
 8015eb0:	0801612f 	.word	0x0801612f
 8015eb4:	0801612f 	.word	0x0801612f
 8015eb8:	0801612f 	.word	0x0801612f
 8015ebc:	0801612f 	.word	0x0801612f
 8015ec0:	0801612f 	.word	0x0801612f
 8015ec4:	0801612f 	.word	0x0801612f
 8015ec8:	08015ecd 	.word	0x08015ecd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ed2:	69db      	ldr	r3, [r3, #28]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d00b      	beq.n	8015ef0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ede:	69db      	ldr	r3, [r3, #28]
 8015ee0:	687a      	ldr	r2, [r7, #4]
 8015ee2:	7c12      	ldrb	r2, [r2, #16]
 8015ee4:	f107 0108 	add.w	r1, r7, #8
 8015ee8:	4610      	mov	r0, r2
 8015eea:	4798      	blx	r3
 8015eec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015eee:	e126      	b.n	801613e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015ef0:	6839      	ldr	r1, [r7, #0]
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f000 fb27 	bl	8016546 <USBD_CtlError>
        err++;
 8015ef8:	7afb      	ldrb	r3, [r7, #11]
 8015efa:	3301      	adds	r3, #1
 8015efc:	72fb      	strb	r3, [r7, #11]
      break;
 8015efe:	e11e      	b.n	801613e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	7c12      	ldrb	r2, [r2, #16]
 8015f0c:	f107 0108 	add.w	r1, r7, #8
 8015f10:	4610      	mov	r0, r2
 8015f12:	4798      	blx	r3
 8015f14:	60f8      	str	r0, [r7, #12]
      break;
 8015f16:	e112      	b.n	801613e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	7c1b      	ldrb	r3, [r3, #16]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d10d      	bne.n	8015f3c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f28:	f107 0208 	add.w	r2, r7, #8
 8015f2c:	4610      	mov	r0, r2
 8015f2e:	4798      	blx	r3
 8015f30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	3301      	adds	r3, #1
 8015f36:	2202      	movs	r2, #2
 8015f38:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015f3a:	e100      	b.n	801613e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f44:	f107 0208 	add.w	r2, r7, #8
 8015f48:	4610      	mov	r0, r2
 8015f4a:	4798      	blx	r3
 8015f4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	3301      	adds	r3, #1
 8015f52:	2202      	movs	r2, #2
 8015f54:	701a      	strb	r2, [r3, #0]
      break;
 8015f56:	e0f2      	b.n	801613e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015f58:	683b      	ldr	r3, [r7, #0]
 8015f5a:	885b      	ldrh	r3, [r3, #2]
 8015f5c:	b2db      	uxtb	r3, r3
 8015f5e:	2b05      	cmp	r3, #5
 8015f60:	f200 80ac 	bhi.w	80160bc <USBD_GetDescriptor+0x258>
 8015f64:	a201      	add	r2, pc, #4	; (adr r2, 8015f6c <USBD_GetDescriptor+0x108>)
 8015f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f6a:	bf00      	nop
 8015f6c:	08015f85 	.word	0x08015f85
 8015f70:	08015fb9 	.word	0x08015fb9
 8015f74:	08015fed 	.word	0x08015fed
 8015f78:	08016021 	.word	0x08016021
 8015f7c:	08016055 	.word	0x08016055
 8015f80:	08016089 	.word	0x08016089
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d00b      	beq.n	8015fa8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	687a      	ldr	r2, [r7, #4]
 8015f9a:	7c12      	ldrb	r2, [r2, #16]
 8015f9c:	f107 0108 	add.w	r1, r7, #8
 8015fa0:	4610      	mov	r0, r2
 8015fa2:	4798      	blx	r3
 8015fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015fa6:	e091      	b.n	80160cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015fa8:	6839      	ldr	r1, [r7, #0]
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f000 facb 	bl	8016546 <USBD_CtlError>
            err++;
 8015fb0:	7afb      	ldrb	r3, [r7, #11]
 8015fb2:	3301      	adds	r3, #1
 8015fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8015fb6:	e089      	b.n	80160cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015fbe:	689b      	ldr	r3, [r3, #8]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d00b      	beq.n	8015fdc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015fca:	689b      	ldr	r3, [r3, #8]
 8015fcc:	687a      	ldr	r2, [r7, #4]
 8015fce:	7c12      	ldrb	r2, [r2, #16]
 8015fd0:	f107 0108 	add.w	r1, r7, #8
 8015fd4:	4610      	mov	r0, r2
 8015fd6:	4798      	blx	r3
 8015fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015fda:	e077      	b.n	80160cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015fdc:	6839      	ldr	r1, [r7, #0]
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f000 fab1 	bl	8016546 <USBD_CtlError>
            err++;
 8015fe4:	7afb      	ldrb	r3, [r7, #11]
 8015fe6:	3301      	adds	r3, #1
 8015fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8015fea:	e06f      	b.n	80160cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ff2:	68db      	ldr	r3, [r3, #12]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d00b      	beq.n	8016010 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ffe:	68db      	ldr	r3, [r3, #12]
 8016000:	687a      	ldr	r2, [r7, #4]
 8016002:	7c12      	ldrb	r2, [r2, #16]
 8016004:	f107 0108 	add.w	r1, r7, #8
 8016008:	4610      	mov	r0, r2
 801600a:	4798      	blx	r3
 801600c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801600e:	e05d      	b.n	80160cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016010:	6839      	ldr	r1, [r7, #0]
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f000 fa97 	bl	8016546 <USBD_CtlError>
            err++;
 8016018:	7afb      	ldrb	r3, [r7, #11]
 801601a:	3301      	adds	r3, #1
 801601c:	72fb      	strb	r3, [r7, #11]
          break;
 801601e:	e055      	b.n	80160cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016026:	691b      	ldr	r3, [r3, #16]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d00b      	beq.n	8016044 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016032:	691b      	ldr	r3, [r3, #16]
 8016034:	687a      	ldr	r2, [r7, #4]
 8016036:	7c12      	ldrb	r2, [r2, #16]
 8016038:	f107 0108 	add.w	r1, r7, #8
 801603c:	4610      	mov	r0, r2
 801603e:	4798      	blx	r3
 8016040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016042:	e043      	b.n	80160cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016044:	6839      	ldr	r1, [r7, #0]
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f000 fa7d 	bl	8016546 <USBD_CtlError>
            err++;
 801604c:	7afb      	ldrb	r3, [r7, #11]
 801604e:	3301      	adds	r3, #1
 8016050:	72fb      	strb	r3, [r7, #11]
          break;
 8016052:	e03b      	b.n	80160cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801605a:	695b      	ldr	r3, [r3, #20]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d00b      	beq.n	8016078 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016066:	695b      	ldr	r3, [r3, #20]
 8016068:	687a      	ldr	r2, [r7, #4]
 801606a:	7c12      	ldrb	r2, [r2, #16]
 801606c:	f107 0108 	add.w	r1, r7, #8
 8016070:	4610      	mov	r0, r2
 8016072:	4798      	blx	r3
 8016074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016076:	e029      	b.n	80160cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016078:	6839      	ldr	r1, [r7, #0]
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f000 fa63 	bl	8016546 <USBD_CtlError>
            err++;
 8016080:	7afb      	ldrb	r3, [r7, #11]
 8016082:	3301      	adds	r3, #1
 8016084:	72fb      	strb	r3, [r7, #11]
          break;
 8016086:	e021      	b.n	80160cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801608e:	699b      	ldr	r3, [r3, #24]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d00b      	beq.n	80160ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801609a:	699b      	ldr	r3, [r3, #24]
 801609c:	687a      	ldr	r2, [r7, #4]
 801609e:	7c12      	ldrb	r2, [r2, #16]
 80160a0:	f107 0108 	add.w	r1, r7, #8
 80160a4:	4610      	mov	r0, r2
 80160a6:	4798      	blx	r3
 80160a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160aa:	e00f      	b.n	80160cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80160ac:	6839      	ldr	r1, [r7, #0]
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f000 fa49 	bl	8016546 <USBD_CtlError>
            err++;
 80160b4:	7afb      	ldrb	r3, [r7, #11]
 80160b6:	3301      	adds	r3, #1
 80160b8:	72fb      	strb	r3, [r7, #11]
          break;
 80160ba:	e007      	b.n	80160cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80160bc:	6839      	ldr	r1, [r7, #0]
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f000 fa41 	bl	8016546 <USBD_CtlError>
          err++;
 80160c4:	7afb      	ldrb	r3, [r7, #11]
 80160c6:	3301      	adds	r3, #1
 80160c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80160ca:	bf00      	nop
      }
      break;
 80160cc:	e037      	b.n	801613e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	7c1b      	ldrb	r3, [r3, #16]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d109      	bne.n	80160ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160de:	f107 0208 	add.w	r2, r7, #8
 80160e2:	4610      	mov	r0, r2
 80160e4:	4798      	blx	r3
 80160e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80160e8:	e029      	b.n	801613e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80160ea:	6839      	ldr	r1, [r7, #0]
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f000 fa2a 	bl	8016546 <USBD_CtlError>
        err++;
 80160f2:	7afb      	ldrb	r3, [r7, #11]
 80160f4:	3301      	adds	r3, #1
 80160f6:	72fb      	strb	r3, [r7, #11]
      break;
 80160f8:	e021      	b.n	801613e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	7c1b      	ldrb	r3, [r3, #16]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d10d      	bne.n	801611e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801610a:	f107 0208 	add.w	r2, r7, #8
 801610e:	4610      	mov	r0, r2
 8016110:	4798      	blx	r3
 8016112:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	3301      	adds	r3, #1
 8016118:	2207      	movs	r2, #7
 801611a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801611c:	e00f      	b.n	801613e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801611e:	6839      	ldr	r1, [r7, #0]
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f000 fa10 	bl	8016546 <USBD_CtlError>
        err++;
 8016126:	7afb      	ldrb	r3, [r7, #11]
 8016128:	3301      	adds	r3, #1
 801612a:	72fb      	strb	r3, [r7, #11]
      break;
 801612c:	e007      	b.n	801613e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801612e:	6839      	ldr	r1, [r7, #0]
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f000 fa08 	bl	8016546 <USBD_CtlError>
      err++;
 8016136:	7afb      	ldrb	r3, [r7, #11]
 8016138:	3301      	adds	r3, #1
 801613a:	72fb      	strb	r3, [r7, #11]
      break;
 801613c:	bf00      	nop
  }

  if (err != 0U)
 801613e:	7afb      	ldrb	r3, [r7, #11]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d11e      	bne.n	8016182 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	88db      	ldrh	r3, [r3, #6]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d016      	beq.n	801617a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801614c:	893b      	ldrh	r3, [r7, #8]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d00e      	beq.n	8016170 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	88da      	ldrh	r2, [r3, #6]
 8016156:	893b      	ldrh	r3, [r7, #8]
 8016158:	4293      	cmp	r3, r2
 801615a:	bf28      	it	cs
 801615c:	4613      	movcs	r3, r2
 801615e:	b29b      	uxth	r3, r3
 8016160:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016162:	893b      	ldrh	r3, [r7, #8]
 8016164:	461a      	mov	r2, r3
 8016166:	68f9      	ldr	r1, [r7, #12]
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f000 fa5d 	bl	8016628 <USBD_CtlSendData>
 801616e:	e009      	b.n	8016184 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016170:	6839      	ldr	r1, [r7, #0]
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	f000 f9e7 	bl	8016546 <USBD_CtlError>
 8016178:	e004      	b.n	8016184 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f000 faae 	bl	80166dc <USBD_CtlSendStatus>
 8016180:	e000      	b.n	8016184 <USBD_GetDescriptor+0x320>
    return;
 8016182:	bf00      	nop
  }
}
 8016184:	3710      	adds	r7, #16
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop

0801618c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	889b      	ldrh	r3, [r3, #4]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d131      	bne.n	8016202 <USBD_SetAddress+0x76>
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	88db      	ldrh	r3, [r3, #6]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d12d      	bne.n	8016202 <USBD_SetAddress+0x76>
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	885b      	ldrh	r3, [r3, #2]
 80161aa:	2b7f      	cmp	r3, #127	; 0x7f
 80161ac:	d829      	bhi.n	8016202 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	885b      	ldrh	r3, [r3, #2]
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	2b03      	cmp	r3, #3
 80161c4:	d104      	bne.n	80161d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80161c6:	6839      	ldr	r1, [r7, #0]
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f000 f9bc 	bl	8016546 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161ce:	e01d      	b.n	801620c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	7bfa      	ldrb	r2, [r7, #15]
 80161d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80161d8:	7bfb      	ldrb	r3, [r7, #15]
 80161da:	4619      	mov	r1, r3
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f7f0 fbed 	bl	80069bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 fa7a 	bl	80166dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80161e8:	7bfb      	ldrb	r3, [r7, #15]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d004      	beq.n	80161f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	2202      	movs	r2, #2
 80161f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161f6:	e009      	b.n	801620c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	2201      	movs	r2, #1
 80161fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016200:	e004      	b.n	801620c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016202:	6839      	ldr	r1, [r7, #0]
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f000 f99e 	bl	8016546 <USBD_CtlError>
  }
}
 801620a:	bf00      	nop
 801620c:	bf00      	nop
 801620e:	3710      	adds	r7, #16
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}

08016214 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b084      	sub	sp, #16
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
 801621c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801621e:	2300      	movs	r3, #0
 8016220:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	885b      	ldrh	r3, [r3, #2]
 8016226:	b2da      	uxtb	r2, r3
 8016228:	4b4e      	ldr	r3, [pc, #312]	; (8016364 <USBD_SetConfig+0x150>)
 801622a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801622c:	4b4d      	ldr	r3, [pc, #308]	; (8016364 <USBD_SetConfig+0x150>)
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	2b01      	cmp	r3, #1
 8016232:	d905      	bls.n	8016240 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016234:	6839      	ldr	r1, [r7, #0]
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f000 f985 	bl	8016546 <USBD_CtlError>
    return USBD_FAIL;
 801623c:	2303      	movs	r3, #3
 801623e:	e08c      	b.n	801635a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016246:	b2db      	uxtb	r3, r3
 8016248:	2b02      	cmp	r3, #2
 801624a:	d002      	beq.n	8016252 <USBD_SetConfig+0x3e>
 801624c:	2b03      	cmp	r3, #3
 801624e:	d029      	beq.n	80162a4 <USBD_SetConfig+0x90>
 8016250:	e075      	b.n	801633e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016252:	4b44      	ldr	r3, [pc, #272]	; (8016364 <USBD_SetConfig+0x150>)
 8016254:	781b      	ldrb	r3, [r3, #0]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d020      	beq.n	801629c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801625a:	4b42      	ldr	r3, [pc, #264]	; (8016364 <USBD_SetConfig+0x150>)
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	461a      	mov	r2, r3
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016264:	4b3f      	ldr	r3, [pc, #252]	; (8016364 <USBD_SetConfig+0x150>)
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	4619      	mov	r1, r3
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f7ff f849 	bl	8015302 <USBD_SetClassConfig>
 8016270:	4603      	mov	r3, r0
 8016272:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016274:	7bfb      	ldrb	r3, [r7, #15]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d008      	beq.n	801628c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801627a:	6839      	ldr	r1, [r7, #0]
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 f962 	bl	8016546 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	2202      	movs	r2, #2
 8016286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801628a:	e065      	b.n	8016358 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f000 fa25 	bl	80166dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2203      	movs	r2, #3
 8016296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801629a:	e05d      	b.n	8016358 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f000 fa1d 	bl	80166dc <USBD_CtlSendStatus>
      break;
 80162a2:	e059      	b.n	8016358 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80162a4:	4b2f      	ldr	r3, [pc, #188]	; (8016364 <USBD_SetConfig+0x150>)
 80162a6:	781b      	ldrb	r3, [r3, #0]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d112      	bne.n	80162d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2202      	movs	r2, #2
 80162b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80162b4:	4b2b      	ldr	r3, [pc, #172]	; (8016364 <USBD_SetConfig+0x150>)
 80162b6:	781b      	ldrb	r3, [r3, #0]
 80162b8:	461a      	mov	r2, r3
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80162be:	4b29      	ldr	r3, [pc, #164]	; (8016364 <USBD_SetConfig+0x150>)
 80162c0:	781b      	ldrb	r3, [r3, #0]
 80162c2:	4619      	mov	r1, r3
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f7ff f838 	bl	801533a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	f000 fa06 	bl	80166dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80162d0:	e042      	b.n	8016358 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80162d2:	4b24      	ldr	r3, [pc, #144]	; (8016364 <USBD_SetConfig+0x150>)
 80162d4:	781b      	ldrb	r3, [r3, #0]
 80162d6:	461a      	mov	r2, r3
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	685b      	ldr	r3, [r3, #4]
 80162dc:	429a      	cmp	r2, r3
 80162de:	d02a      	beq.n	8016336 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	4619      	mov	r1, r3
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f7ff f826 	bl	801533a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80162ee:	4b1d      	ldr	r3, [pc, #116]	; (8016364 <USBD_SetConfig+0x150>)
 80162f0:	781b      	ldrb	r3, [r3, #0]
 80162f2:	461a      	mov	r2, r3
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80162f8:	4b1a      	ldr	r3, [pc, #104]	; (8016364 <USBD_SetConfig+0x150>)
 80162fa:	781b      	ldrb	r3, [r3, #0]
 80162fc:	4619      	mov	r1, r3
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f7fe ffff 	bl	8015302 <USBD_SetClassConfig>
 8016304:	4603      	mov	r3, r0
 8016306:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016308:	7bfb      	ldrb	r3, [r7, #15]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d00f      	beq.n	801632e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801630e:	6839      	ldr	r1, [r7, #0]
 8016310:	6878      	ldr	r0, [r7, #4]
 8016312:	f000 f918 	bl	8016546 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	685b      	ldr	r3, [r3, #4]
 801631a:	b2db      	uxtb	r3, r3
 801631c:	4619      	mov	r1, r3
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f7ff f80b 	bl	801533a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2202      	movs	r2, #2
 8016328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801632c:	e014      	b.n	8016358 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 f9d4 	bl	80166dc <USBD_CtlSendStatus>
      break;
 8016334:	e010      	b.n	8016358 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f000 f9d0 	bl	80166dc <USBD_CtlSendStatus>
      break;
 801633c:	e00c      	b.n	8016358 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801633e:	6839      	ldr	r1, [r7, #0]
 8016340:	6878      	ldr	r0, [r7, #4]
 8016342:	f000 f900 	bl	8016546 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016346:	4b07      	ldr	r3, [pc, #28]	; (8016364 <USBD_SetConfig+0x150>)
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	4619      	mov	r1, r3
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f7fe fff4 	bl	801533a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016352:	2303      	movs	r3, #3
 8016354:	73fb      	strb	r3, [r7, #15]
      break;
 8016356:	bf00      	nop
  }

  return ret;
 8016358:	7bfb      	ldrb	r3, [r7, #15]
}
 801635a:	4618      	mov	r0, r3
 801635c:	3710      	adds	r7, #16
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
 8016362:	bf00      	nop
 8016364:	20003d04 	.word	0x20003d04

08016368 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	88db      	ldrh	r3, [r3, #6]
 8016376:	2b01      	cmp	r3, #1
 8016378:	d004      	beq.n	8016384 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801637a:	6839      	ldr	r1, [r7, #0]
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f000 f8e2 	bl	8016546 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016382:	e023      	b.n	80163cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801638a:	b2db      	uxtb	r3, r3
 801638c:	2b02      	cmp	r3, #2
 801638e:	dc02      	bgt.n	8016396 <USBD_GetConfig+0x2e>
 8016390:	2b00      	cmp	r3, #0
 8016392:	dc03      	bgt.n	801639c <USBD_GetConfig+0x34>
 8016394:	e015      	b.n	80163c2 <USBD_GetConfig+0x5a>
 8016396:	2b03      	cmp	r3, #3
 8016398:	d00b      	beq.n	80163b2 <USBD_GetConfig+0x4a>
 801639a:	e012      	b.n	80163c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2200      	movs	r2, #0
 80163a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	3308      	adds	r3, #8
 80163a6:	2201      	movs	r2, #1
 80163a8:	4619      	mov	r1, r3
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f000 f93c 	bl	8016628 <USBD_CtlSendData>
        break;
 80163b0:	e00c      	b.n	80163cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	3304      	adds	r3, #4
 80163b6:	2201      	movs	r2, #1
 80163b8:	4619      	mov	r1, r3
 80163ba:	6878      	ldr	r0, [r7, #4]
 80163bc:	f000 f934 	bl	8016628 <USBD_CtlSendData>
        break;
 80163c0:	e004      	b.n	80163cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80163c2:	6839      	ldr	r1, [r7, #0]
 80163c4:	6878      	ldr	r0, [r7, #4]
 80163c6:	f000 f8be 	bl	8016546 <USBD_CtlError>
        break;
 80163ca:	bf00      	nop
}
 80163cc:	bf00      	nop
 80163ce:	3708      	adds	r7, #8
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}

080163d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b082      	sub	sp, #8
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163e4:	b2db      	uxtb	r3, r3
 80163e6:	3b01      	subs	r3, #1
 80163e8:	2b02      	cmp	r3, #2
 80163ea:	d81e      	bhi.n	801642a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	88db      	ldrh	r3, [r3, #6]
 80163f0:	2b02      	cmp	r3, #2
 80163f2:	d004      	beq.n	80163fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80163f4:	6839      	ldr	r1, [r7, #0]
 80163f6:	6878      	ldr	r0, [r7, #4]
 80163f8:	f000 f8a5 	bl	8016546 <USBD_CtlError>
        break;
 80163fc:	e01a      	b.n	8016434 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	2201      	movs	r2, #1
 8016402:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801640a:	2b00      	cmp	r3, #0
 801640c:	d005      	beq.n	801641a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	68db      	ldr	r3, [r3, #12]
 8016412:	f043 0202 	orr.w	r2, r3, #2
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	330c      	adds	r3, #12
 801641e:	2202      	movs	r2, #2
 8016420:	4619      	mov	r1, r3
 8016422:	6878      	ldr	r0, [r7, #4]
 8016424:	f000 f900 	bl	8016628 <USBD_CtlSendData>
      break;
 8016428:	e004      	b.n	8016434 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801642a:	6839      	ldr	r1, [r7, #0]
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f000 f88a 	bl	8016546 <USBD_CtlError>
      break;
 8016432:	bf00      	nop
  }
}
 8016434:	bf00      	nop
 8016436:	3708      	adds	r7, #8
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}

0801643c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	885b      	ldrh	r3, [r3, #2]
 801644a:	2b01      	cmp	r3, #1
 801644c:	d107      	bne.n	801645e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	2201      	movs	r2, #1
 8016452:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	f000 f940 	bl	80166dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801645c:	e013      	b.n	8016486 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	885b      	ldrh	r3, [r3, #2]
 8016462:	2b02      	cmp	r3, #2
 8016464:	d10b      	bne.n	801647e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	889b      	ldrh	r3, [r3, #4]
 801646a:	0a1b      	lsrs	r3, r3, #8
 801646c:	b29b      	uxth	r3, r3
 801646e:	b2da      	uxtb	r2, r3
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f000 f930 	bl	80166dc <USBD_CtlSendStatus>
}
 801647c:	e003      	b.n	8016486 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801647e:	6839      	ldr	r1, [r7, #0]
 8016480:	6878      	ldr	r0, [r7, #4]
 8016482:	f000 f860 	bl	8016546 <USBD_CtlError>
}
 8016486:	bf00      	nop
 8016488:	3708      	adds	r7, #8
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}

0801648e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801648e:	b580      	push	{r7, lr}
 8016490:	b082      	sub	sp, #8
 8016492:	af00      	add	r7, sp, #0
 8016494:	6078      	str	r0, [r7, #4]
 8016496:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801649e:	b2db      	uxtb	r3, r3
 80164a0:	3b01      	subs	r3, #1
 80164a2:	2b02      	cmp	r3, #2
 80164a4:	d80b      	bhi.n	80164be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	885b      	ldrh	r3, [r3, #2]
 80164aa:	2b01      	cmp	r3, #1
 80164ac:	d10c      	bne.n	80164c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2200      	movs	r2, #0
 80164b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80164b6:	6878      	ldr	r0, [r7, #4]
 80164b8:	f000 f910 	bl	80166dc <USBD_CtlSendStatus>
      }
      break;
 80164bc:	e004      	b.n	80164c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80164be:	6839      	ldr	r1, [r7, #0]
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f000 f840 	bl	8016546 <USBD_CtlError>
      break;
 80164c6:	e000      	b.n	80164ca <USBD_ClrFeature+0x3c>
      break;
 80164c8:	bf00      	nop
  }
}
 80164ca:	bf00      	nop
 80164cc:	3708      	adds	r7, #8
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}

080164d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80164d2:	b580      	push	{r7, lr}
 80164d4:	b084      	sub	sp, #16
 80164d6:	af00      	add	r7, sp, #0
 80164d8:	6078      	str	r0, [r7, #4]
 80164da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	781a      	ldrb	r2, [r3, #0]
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	3301      	adds	r3, #1
 80164ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	781a      	ldrb	r2, [r3, #0]
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	3301      	adds	r3, #1
 80164fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80164fc:	68f8      	ldr	r0, [r7, #12]
 80164fe:	f7ff fa17 	bl	8015930 <SWAPBYTE>
 8016502:	4603      	mov	r3, r0
 8016504:	461a      	mov	r2, r3
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	3301      	adds	r3, #1
 801650e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	3301      	adds	r3, #1
 8016514:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016516:	68f8      	ldr	r0, [r7, #12]
 8016518:	f7ff fa0a 	bl	8015930 <SWAPBYTE>
 801651c:	4603      	mov	r3, r0
 801651e:	461a      	mov	r2, r3
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	3301      	adds	r3, #1
 8016528:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	3301      	adds	r3, #1
 801652e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016530:	68f8      	ldr	r0, [r7, #12]
 8016532:	f7ff f9fd 	bl	8015930 <SWAPBYTE>
 8016536:	4603      	mov	r3, r0
 8016538:	461a      	mov	r2, r3
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	80da      	strh	r2, [r3, #6]
}
 801653e:	bf00      	nop
 8016540:	3710      	adds	r7, #16
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}

08016546 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016546:	b580      	push	{r7, lr}
 8016548:	b082      	sub	sp, #8
 801654a:	af00      	add	r7, sp, #0
 801654c:	6078      	str	r0, [r7, #4]
 801654e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016550:	2180      	movs	r1, #128	; 0x80
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f7f0 f9c8 	bl	80068e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016558:	2100      	movs	r1, #0
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f7f0 f9c4 	bl	80068e8 <USBD_LL_StallEP>
}
 8016560:	bf00      	nop
 8016562:	3708      	adds	r7, #8
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}

08016568 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b086      	sub	sp, #24
 801656c:	af00      	add	r7, sp, #0
 801656e:	60f8      	str	r0, [r7, #12]
 8016570:	60b9      	str	r1, [r7, #8]
 8016572:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016574:	2300      	movs	r3, #0
 8016576:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d036      	beq.n	80165ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016582:	6938      	ldr	r0, [r7, #16]
 8016584:	f000 f836 	bl	80165f4 <USBD_GetLen>
 8016588:	4603      	mov	r3, r0
 801658a:	3301      	adds	r3, #1
 801658c:	b29b      	uxth	r3, r3
 801658e:	005b      	lsls	r3, r3, #1
 8016590:	b29a      	uxth	r2, r3
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016596:	7dfb      	ldrb	r3, [r7, #23]
 8016598:	68ba      	ldr	r2, [r7, #8]
 801659a:	4413      	add	r3, r2
 801659c:	687a      	ldr	r2, [r7, #4]
 801659e:	7812      	ldrb	r2, [r2, #0]
 80165a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80165a2:	7dfb      	ldrb	r3, [r7, #23]
 80165a4:	3301      	adds	r3, #1
 80165a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80165a8:	7dfb      	ldrb	r3, [r7, #23]
 80165aa:	68ba      	ldr	r2, [r7, #8]
 80165ac:	4413      	add	r3, r2
 80165ae:	2203      	movs	r2, #3
 80165b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80165b2:	7dfb      	ldrb	r3, [r7, #23]
 80165b4:	3301      	adds	r3, #1
 80165b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80165b8:	e013      	b.n	80165e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80165ba:	7dfb      	ldrb	r3, [r7, #23]
 80165bc:	68ba      	ldr	r2, [r7, #8]
 80165be:	4413      	add	r3, r2
 80165c0:	693a      	ldr	r2, [r7, #16]
 80165c2:	7812      	ldrb	r2, [r2, #0]
 80165c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80165c6:	693b      	ldr	r3, [r7, #16]
 80165c8:	3301      	adds	r3, #1
 80165ca:	613b      	str	r3, [r7, #16]
    idx++;
 80165cc:	7dfb      	ldrb	r3, [r7, #23]
 80165ce:	3301      	adds	r3, #1
 80165d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80165d2:	7dfb      	ldrb	r3, [r7, #23]
 80165d4:	68ba      	ldr	r2, [r7, #8]
 80165d6:	4413      	add	r3, r2
 80165d8:	2200      	movs	r2, #0
 80165da:	701a      	strb	r2, [r3, #0]
    idx++;
 80165dc:	7dfb      	ldrb	r3, [r7, #23]
 80165de:	3301      	adds	r3, #1
 80165e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	781b      	ldrb	r3, [r3, #0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d1e7      	bne.n	80165ba <USBD_GetString+0x52>
 80165ea:	e000      	b.n	80165ee <USBD_GetString+0x86>
    return;
 80165ec:	bf00      	nop
  }
}
 80165ee:	3718      	adds	r7, #24
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}

080165f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80165f4:	b480      	push	{r7}
 80165f6:	b085      	sub	sp, #20
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80165fc:	2300      	movs	r3, #0
 80165fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016604:	e005      	b.n	8016612 <USBD_GetLen+0x1e>
  {
    len++;
 8016606:	7bfb      	ldrb	r3, [r7, #15]
 8016608:	3301      	adds	r3, #1
 801660a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	3301      	adds	r3, #1
 8016610:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d1f5      	bne.n	8016606 <USBD_GetLen+0x12>
  }

  return len;
 801661a:	7bfb      	ldrb	r3, [r7, #15]
}
 801661c:	4618      	mov	r0, r3
 801661e:	3714      	adds	r7, #20
 8016620:	46bd      	mov	sp, r7
 8016622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016626:	4770      	bx	lr

08016628 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b084      	sub	sp, #16
 801662c:	af00      	add	r7, sp, #0
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	2202      	movs	r2, #2
 8016638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	687a      	ldr	r2, [r7, #4]
 8016640:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	687a      	ldr	r2, [r7, #4]
 8016646:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	68ba      	ldr	r2, [r7, #8]
 801664c:	2100      	movs	r1, #0
 801664e:	68f8      	ldr	r0, [r7, #12]
 8016650:	f7f0 f9d3 	bl	80069fa <USBD_LL_Transmit>

  return USBD_OK;
 8016654:	2300      	movs	r3, #0
}
 8016656:	4618      	mov	r0, r3
 8016658:	3710      	adds	r7, #16
 801665a:	46bd      	mov	sp, r7
 801665c:	bd80      	pop	{r7, pc}

0801665e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801665e:	b580      	push	{r7, lr}
 8016660:	b084      	sub	sp, #16
 8016662:	af00      	add	r7, sp, #0
 8016664:	60f8      	str	r0, [r7, #12]
 8016666:	60b9      	str	r1, [r7, #8]
 8016668:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	68ba      	ldr	r2, [r7, #8]
 801666e:	2100      	movs	r1, #0
 8016670:	68f8      	ldr	r0, [r7, #12]
 8016672:	f7f0 f9c2 	bl	80069fa <USBD_LL_Transmit>

  return USBD_OK;
 8016676:	2300      	movs	r3, #0
}
 8016678:	4618      	mov	r0, r3
 801667a:	3710      	adds	r7, #16
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b084      	sub	sp, #16
 8016684:	af00      	add	r7, sp, #0
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	60b9      	str	r1, [r7, #8]
 801668a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	2203      	movs	r2, #3
 8016690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	687a      	ldr	r2, [r7, #4]
 8016698:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	68ba      	ldr	r2, [r7, #8]
 80166a8:	2100      	movs	r1, #0
 80166aa:	68f8      	ldr	r0, [r7, #12]
 80166ac:	f7f0 f9c6 	bl	8006a3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80166b0:	2300      	movs	r3, #0
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3710      	adds	r7, #16
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}

080166ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80166ba:	b580      	push	{r7, lr}
 80166bc:	b084      	sub	sp, #16
 80166be:	af00      	add	r7, sp, #0
 80166c0:	60f8      	str	r0, [r7, #12]
 80166c2:	60b9      	str	r1, [r7, #8]
 80166c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	68ba      	ldr	r2, [r7, #8]
 80166ca:	2100      	movs	r1, #0
 80166cc:	68f8      	ldr	r0, [r7, #12]
 80166ce:	f7f0 f9b5 	bl	8006a3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80166d2:	2300      	movs	r3, #0
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	3710      	adds	r7, #16
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b082      	sub	sp, #8
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2204      	movs	r2, #4
 80166e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80166ec:	2300      	movs	r3, #0
 80166ee:	2200      	movs	r2, #0
 80166f0:	2100      	movs	r1, #0
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f7f0 f981 	bl	80069fa <USBD_LL_Transmit>

  return USBD_OK;
 80166f8:	2300      	movs	r3, #0
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	3708      	adds	r7, #8
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}

08016702 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016702:	b580      	push	{r7, lr}
 8016704:	b082      	sub	sp, #8
 8016706:	af00      	add	r7, sp, #0
 8016708:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	2205      	movs	r2, #5
 801670e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016712:	2300      	movs	r3, #0
 8016714:	2200      	movs	r2, #0
 8016716:	2100      	movs	r1, #0
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f7f0 f98f 	bl	8006a3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801671e:	2300      	movs	r3, #0
}
 8016720:	4618      	mov	r0, r3
 8016722:	3708      	adds	r7, #8
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8016728:	b480      	push	{r7}
 801672a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801672c:	4b05      	ldr	r3, [pc, #20]	; (8016744 <UTIL_LPM_Init+0x1c>)
 801672e:	2200      	movs	r2, #0
 8016730:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8016732:	4b05      	ldr	r3, [pc, #20]	; (8016748 <UTIL_LPM_Init+0x20>)
 8016734:	2200      	movs	r2, #0
 8016736:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016738:	bf00      	nop
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr
 8016742:	bf00      	nop
 8016744:	20003d08 	.word	0x20003d08
 8016748:	20003d0c 	.word	0x20003d0c

0801674c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801674c:	b480      	push	{r7}
 801674e:	b087      	sub	sp, #28
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
 8016754:	460b      	mov	r3, r1
 8016756:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016758:	f3ef 8310 	mrs	r3, PRIMASK
 801675c:	613b      	str	r3, [r7, #16]
  return(result);
 801675e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016760:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016762:	b672      	cpsid	i
}
 8016764:	bf00      	nop
  
  switch(state)
 8016766:	78fb      	ldrb	r3, [r7, #3]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d008      	beq.n	801677e <UTIL_LPM_SetOffMode+0x32>
 801676c:	2b01      	cmp	r3, #1
 801676e:	d10e      	bne.n	801678e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8016770:	4b0d      	ldr	r3, [pc, #52]	; (80167a8 <UTIL_LPM_SetOffMode+0x5c>)
 8016772:	681a      	ldr	r2, [r3, #0]
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	4313      	orrs	r3, r2
 8016778:	4a0b      	ldr	r2, [pc, #44]	; (80167a8 <UTIL_LPM_SetOffMode+0x5c>)
 801677a:	6013      	str	r3, [r2, #0]
      break;
 801677c:	e008      	b.n	8016790 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	43da      	mvns	r2, r3
 8016782:	4b09      	ldr	r3, [pc, #36]	; (80167a8 <UTIL_LPM_SetOffMode+0x5c>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	4013      	ands	r3, r2
 8016788:	4a07      	ldr	r2, [pc, #28]	; (80167a8 <UTIL_LPM_SetOffMode+0x5c>)
 801678a:	6013      	str	r3, [r2, #0]
      break;
 801678c:	e000      	b.n	8016790 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801678e:	bf00      	nop
 8016790:	697b      	ldr	r3, [r7, #20]
 8016792:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	f383 8810 	msr	PRIMASK, r3
}
 801679a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801679c:	bf00      	nop
 801679e:	371c      	adds	r7, #28
 80167a0:	46bd      	mov	sp, r7
 80167a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a6:	4770      	bx	lr
 80167a8:	20003d0c 	.word	0x20003d0c

080167ac <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b084      	sub	sp, #16
 80167b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167b2:	f3ef 8310 	mrs	r3, PRIMASK
 80167b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80167b8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 80167ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80167bc:	b672      	cpsid	i
}
 80167be:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80167c0:	4b12      	ldr	r3, [pc, #72]	; (801680c <UTIL_LPM_EnterLowPower+0x60>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d006      	beq.n	80167d6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80167c8:	4b11      	ldr	r3, [pc, #68]	; (8016810 <UTIL_LPM_EnterLowPower+0x64>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80167ce:	4b10      	ldr	r3, [pc, #64]	; (8016810 <UTIL_LPM_EnterLowPower+0x64>)
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	4798      	blx	r3
 80167d4:	e010      	b.n	80167f8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80167d6:	4b0f      	ldr	r3, [pc, #60]	; (8016814 <UTIL_LPM_EnterLowPower+0x68>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d006      	beq.n	80167ec <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 80167de:	4b0c      	ldr	r3, [pc, #48]	; (8016810 <UTIL_LPM_EnterLowPower+0x64>)
 80167e0:	689b      	ldr	r3, [r3, #8]
 80167e2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80167e4:	4b0a      	ldr	r3, [pc, #40]	; (8016810 <UTIL_LPM_EnterLowPower+0x64>)
 80167e6:	68db      	ldr	r3, [r3, #12]
 80167e8:	4798      	blx	r3
 80167ea:	e005      	b.n	80167f8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 80167ec:	4b08      	ldr	r3, [pc, #32]	; (8016810 <UTIL_LPM_EnterLowPower+0x64>)
 80167ee:	691b      	ldr	r3, [r3, #16]
 80167f0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80167f2:	4b07      	ldr	r3, [pc, #28]	; (8016810 <UTIL_LPM_EnterLowPower+0x64>)
 80167f4:	695b      	ldr	r3, [r3, #20]
 80167f6:	4798      	blx	r3
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f383 8810 	msr	PRIMASK, r3
}
 8016802:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8016804:	bf00      	nop
 8016806:	3710      	adds	r7, #16
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}
 801680c:	20003d08 	.word	0x20003d08
 8016810:	0801a0a8 	.word	0x0801a0a8
 8016814:	20003d0c 	.word	0x20003d0c

08016818 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b090      	sub	sp, #64	; 0x40
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8016820:	4b73      	ldr	r3, [pc, #460]	; (80169f0 <UTIL_SEQ_Run+0x1d8>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8016826:	4b72      	ldr	r3, [pc, #456]	; (80169f0 <UTIL_SEQ_Run+0x1d8>)
 8016828:	681a      	ldr	r2, [r3, #0]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	4013      	ands	r3, r2
 801682e:	4a70      	ldr	r2, [pc, #448]	; (80169f0 <UTIL_SEQ_Run+0x1d8>)
 8016830:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8016832:	4b70      	ldr	r3, [pc, #448]	; (80169f4 <UTIL_SEQ_Run+0x1dc>)
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8016838:	4b6f      	ldr	r3, [pc, #444]	; (80169f8 <UTIL_SEQ_Run+0x1e0>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801683e:	4b6f      	ldr	r3, [pc, #444]	; (80169fc <UTIL_SEQ_Run+0x1e4>)
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8016844:	4b6e      	ldr	r3, [pc, #440]	; (8016a00 <UTIL_SEQ_Run+0x1e8>)
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801684a:	e08d      	b.n	8016968 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801684c:	2300      	movs	r3, #0
 801684e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016850:	e002      	b.n	8016858 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8016852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016854:	3301      	adds	r3, #1
 8016856:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016858:	4a6a      	ldr	r2, [pc, #424]	; (8016a04 <UTIL_SEQ_Run+0x1ec>)
 801685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801685c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016862:	401a      	ands	r2, r3
 8016864:	4b62      	ldr	r3, [pc, #392]	; (80169f0 <UTIL_SEQ_Run+0x1d8>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	4013      	ands	r3, r2
 801686a:	2b00      	cmp	r3, #0
 801686c:	d0f1      	beq.n	8016852 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801686e:	4a65      	ldr	r2, [pc, #404]	; (8016a04 <UTIL_SEQ_Run+0x1ec>)
 8016870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016872:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016878:	401a      	ands	r2, r3
 801687a:	4b5d      	ldr	r3, [pc, #372]	; (80169f0 <UTIL_SEQ_Run+0x1d8>)
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	4013      	ands	r3, r2
 8016880:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8016882:	4a60      	ldr	r2, [pc, #384]	; (8016a04 <UTIL_SEQ_Run+0x1ec>)
 8016884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016886:	00db      	lsls	r3, r3, #3
 8016888:	4413      	add	r3, r2
 801688a:	685a      	ldr	r2, [r3, #4]
 801688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801688e:	4013      	ands	r3, r2
 8016890:	2b00      	cmp	r3, #0
 8016892:	d106      	bne.n	80168a2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8016894:	4a5b      	ldr	r2, [pc, #364]	; (8016a04 <UTIL_SEQ_Run+0x1ec>)
 8016896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016898:	00db      	lsls	r3, r3, #3
 801689a:	4413      	add	r3, r2
 801689c:	f04f 32ff 	mov.w	r2, #4294967295
 80168a0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80168a2:	4a58      	ldr	r2, [pc, #352]	; (8016a04 <UTIL_SEQ_Run+0x1ec>)
 80168a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168a6:	00db      	lsls	r3, r3, #3
 80168a8:	4413      	add	r3, r2
 80168aa:	685a      	ldr	r2, [r3, #4]
 80168ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ae:	4013      	ands	r3, r2
 80168b0:	4618      	mov	r0, r3
 80168b2:	f000 f9b3 	bl	8016c1c <SEQ_BitPosition>
 80168b6:	4603      	mov	r3, r0
 80168b8:	461a      	mov	r2, r3
 80168ba:	4b53      	ldr	r3, [pc, #332]	; (8016a08 <UTIL_SEQ_Run+0x1f0>)
 80168bc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80168be:	4a51      	ldr	r2, [pc, #324]	; (8016a04 <UTIL_SEQ_Run+0x1ec>)
 80168c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168c2:	00db      	lsls	r3, r3, #3
 80168c4:	4413      	add	r3, r2
 80168c6:	685a      	ldr	r2, [r3, #4]
 80168c8:	4b4f      	ldr	r3, [pc, #316]	; (8016a08 <UTIL_SEQ_Run+0x1f0>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	2101      	movs	r1, #1
 80168ce:	fa01 f303 	lsl.w	r3, r1, r3
 80168d2:	43db      	mvns	r3, r3
 80168d4:	401a      	ands	r2, r3
 80168d6:	494b      	ldr	r1, [pc, #300]	; (8016a04 <UTIL_SEQ_Run+0x1ec>)
 80168d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168da:	00db      	lsls	r3, r3, #3
 80168dc:	440b      	add	r3, r1
 80168de:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168e0:	f3ef 8310 	mrs	r3, PRIMASK
 80168e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80168e6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80168e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80168ea:	b672      	cpsid	i
}
 80168ec:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80168ee:	4b46      	ldr	r3, [pc, #280]	; (8016a08 <UTIL_SEQ_Run+0x1f0>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	2201      	movs	r2, #1
 80168f4:	fa02 f303 	lsl.w	r3, r2, r3
 80168f8:	43da      	mvns	r2, r3
 80168fa:	4b3e      	ldr	r3, [pc, #248]	; (80169f4 <UTIL_SEQ_Run+0x1dc>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	4013      	ands	r3, r2
 8016900:	4a3c      	ldr	r2, [pc, #240]	; (80169f4 <UTIL_SEQ_Run+0x1dc>)
 8016902:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016904:	2302      	movs	r3, #2
 8016906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016908:	e013      	b.n	8016932 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801690a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801690c:	3b01      	subs	r3, #1
 801690e:	4a3d      	ldr	r2, [pc, #244]	; (8016a04 <UTIL_SEQ_Run+0x1ec>)
 8016910:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8016914:	4b3c      	ldr	r3, [pc, #240]	; (8016a08 <UTIL_SEQ_Run+0x1f0>)
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	2201      	movs	r2, #1
 801691a:	fa02 f303 	lsl.w	r3, r2, r3
 801691e:	43da      	mvns	r2, r3
 8016920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016922:	3b01      	subs	r3, #1
 8016924:	400a      	ands	r2, r1
 8016926:	4937      	ldr	r1, [pc, #220]	; (8016a04 <UTIL_SEQ_Run+0x1ec>)
 8016928:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801692c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801692e:	3b01      	subs	r3, #1
 8016930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016934:	2b00      	cmp	r3, #0
 8016936:	d1e8      	bne.n	801690a <UTIL_SEQ_Run+0xf2>
 8016938:	6a3b      	ldr	r3, [r7, #32]
 801693a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801693c:	697b      	ldr	r3, [r7, #20]
 801693e:	f383 8810 	msr	PRIMASK, r3
}
 8016942:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8016944:	4b30      	ldr	r3, [pc, #192]	; (8016a08 <UTIL_SEQ_Run+0x1f0>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4a30      	ldr	r2, [pc, #192]	; (8016a0c <UTIL_SEQ_Run+0x1f4>)
 801694a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801694e:	4798      	blx	r3

    local_taskset = TaskSet;
 8016950:	4b28      	ldr	r3, [pc, #160]	; (80169f4 <UTIL_SEQ_Run+0x1dc>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8016956:	4b28      	ldr	r3, [pc, #160]	; (80169f8 <UTIL_SEQ_Run+0x1e0>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801695c:	4b27      	ldr	r3, [pc, #156]	; (80169fc <UTIL_SEQ_Run+0x1e4>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8016962:	4b27      	ldr	r3, [pc, #156]	; (8016a00 <UTIL_SEQ_Run+0x1e8>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8016968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696c:	401a      	ands	r2, r3
 801696e:	4b20      	ldr	r3, [pc, #128]	; (80169f0 <UTIL_SEQ_Run+0x1d8>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	4013      	ands	r3, r2
 8016974:	2b00      	cmp	r3, #0
 8016976:	d005      	beq.n	8016984 <UTIL_SEQ_Run+0x16c>
 8016978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801697c:	4013      	ands	r3, r2
 801697e:	2b00      	cmp	r3, #0
 8016980:	f43f af64 	beq.w	801684c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8016984:	4b20      	ldr	r3, [pc, #128]	; (8016a08 <UTIL_SEQ_Run+0x1f0>)
 8016986:	f04f 32ff 	mov.w	r2, #4294967295
 801698a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801698c:	f000 f938 	bl	8016c00 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016990:	f3ef 8310 	mrs	r3, PRIMASK
 8016994:	613b      	str	r3, [r7, #16]
  return(result);
 8016996:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8016998:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801699a:	b672      	cpsid	i
}
 801699c:	bf00      	nop
  local_taskset = TaskSet;
 801699e:	4b15      	ldr	r3, [pc, #84]	; (80169f4 <UTIL_SEQ_Run+0x1dc>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80169a4:	4b14      	ldr	r3, [pc, #80]	; (80169f8 <UTIL_SEQ_Run+0x1e0>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80169aa:	4b14      	ldr	r3, [pc, #80]	; (80169fc <UTIL_SEQ_Run+0x1e4>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80169b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b4:	401a      	ands	r2, r3
 80169b6:	4b0e      	ldr	r3, [pc, #56]	; (80169f0 <UTIL_SEQ_Run+0x1d8>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	4013      	ands	r3, r2
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d107      	bne.n	80169d0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80169c0:	4b0f      	ldr	r3, [pc, #60]	; (8016a00 <UTIL_SEQ_Run+0x1e8>)
 80169c2:	681a      	ldr	r2, [r3, #0]
 80169c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169c6:	4013      	ands	r3, r2
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d101      	bne.n	80169d0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80169cc:	f7eb fdc7 	bl	800255e <UTIL_SEQ_Idle>
 80169d0:	69fb      	ldr	r3, [r7, #28]
 80169d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	f383 8810 	msr	PRIMASK, r3
}
 80169da:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80169dc:	f000 f917 	bl	8016c0e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80169e0:	4a03      	ldr	r2, [pc, #12]	; (80169f0 <UTIL_SEQ_Run+0x1d8>)
 80169e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e4:	6013      	str	r3, [r2, #0]

  return;
 80169e6:	bf00      	nop
}
 80169e8:	3740      	adds	r7, #64	; 0x40
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}
 80169ee:	bf00      	nop
 80169f0:	20000178 	.word	0x20000178
 80169f4:	20003d10 	.word	0x20003d10
 80169f8:	20003d14 	.word	0x20003d14
 80169fc:	20000174 	.word	0x20000174
 8016a00:	20003d18 	.word	0x20003d18
 8016a04:	20003da0 	.word	0x20003da0
 8016a08:	20003d1c 	.word	0x20003d1c
 8016a0c:	20003d20 	.word	0x20003d20

08016a10 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b088      	sub	sp, #32
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8016a20:	617b      	str	r3, [r7, #20]
  return(result);
 8016a22:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8016a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016a26:	b672      	cpsid	i
}
 8016a28:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8016a2a:	68f8      	ldr	r0, [r7, #12]
 8016a2c:	f000 f8f6 	bl	8016c1c <SEQ_BitPosition>
 8016a30:	4603      	mov	r3, r0
 8016a32:	4619      	mov	r1, r3
 8016a34:	4a06      	ldr	r2, [pc, #24]	; (8016a50 <UTIL_SEQ_RegTask+0x40>)
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016a3c:	69fb      	ldr	r3, [r7, #28]
 8016a3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a40:	69bb      	ldr	r3, [r7, #24]
 8016a42:	f383 8810 	msr	PRIMASK, r3
}
 8016a46:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8016a48:	bf00      	nop
}
 8016a4a:	3720      	adds	r7, #32
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	20003d20 	.word	0x20003d20

08016a54 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8016a54:	b480      	push	{r7}
 8016a56:	b087      	sub	sp, #28
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
 8016a5c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8016a62:	60fb      	str	r3, [r7, #12]
  return(result);
 8016a64:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016a66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016a68:	b672      	cpsid	i
}
 8016a6a:	bf00      	nop

  TaskSet |= TaskId_bm;
 8016a6c:	4b0d      	ldr	r3, [pc, #52]	; (8016aa4 <UTIL_SEQ_SetTask+0x50>)
 8016a6e:	681a      	ldr	r2, [r3, #0]
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	4313      	orrs	r3, r2
 8016a74:	4a0b      	ldr	r2, [pc, #44]	; (8016aa4 <UTIL_SEQ_SetTask+0x50>)
 8016a76:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8016a78:	4a0b      	ldr	r2, [pc, #44]	; (8016aa8 <UTIL_SEQ_SetTask+0x54>)
 8016a7a:	683b      	ldr	r3, [r7, #0]
 8016a7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	431a      	orrs	r2, r3
 8016a84:	4908      	ldr	r1, [pc, #32]	; (8016aa8 <UTIL_SEQ_SetTask+0x54>)
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	f383 8810 	msr	PRIMASK, r3
}
 8016a96:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016a98:	bf00      	nop
}
 8016a9a:	371c      	adds	r7, #28
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa2:	4770      	bx	lr
 8016aa4:	20003d10 	.word	0x20003d10
 8016aa8:	20003da0 	.word	0x20003da0

08016aac <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8016aac:	b480      	push	{r7}
 8016aae:	b087      	sub	sp, #28
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8016ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8016aba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016abe:	b672      	cpsid	i
}
 8016ac0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	43da      	mvns	r2, r3
 8016ac6:	4b08      	ldr	r3, [pc, #32]	; (8016ae8 <UTIL_SEQ_PauseTask+0x3c>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	4013      	ands	r3, r2
 8016acc:	4a06      	ldr	r2, [pc, #24]	; (8016ae8 <UTIL_SEQ_PauseTask+0x3c>)
 8016ace:	6013      	str	r3, [r2, #0]
 8016ad0:	697b      	ldr	r3, [r7, #20]
 8016ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	f383 8810 	msr	PRIMASK, r3
}
 8016ada:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016adc:	bf00      	nop
}
 8016ade:	371c      	adds	r7, #28
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae6:	4770      	bx	lr
 8016ae8:	20000174 	.word	0x20000174

08016aec <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8016aec:	b480      	push	{r7}
 8016aee:	b087      	sub	sp, #28
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016af4:	f3ef 8310 	mrs	r3, PRIMASK
 8016af8:	60fb      	str	r3, [r7, #12]
  return(result);
 8016afa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016afe:	b672      	cpsid	i
}
 8016b00:	bf00      	nop

  TaskMask |= TaskId_bm;
 8016b02:	4b09      	ldr	r3, [pc, #36]	; (8016b28 <UTIL_SEQ_ResumeTask+0x3c>)
 8016b04:	681a      	ldr	r2, [r3, #0]
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	4313      	orrs	r3, r2
 8016b0a:	4a07      	ldr	r2, [pc, #28]	; (8016b28 <UTIL_SEQ_ResumeTask+0x3c>)
 8016b0c:	6013      	str	r3, [r2, #0]
 8016b0e:	697b      	ldr	r3, [r7, #20]
 8016b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b12:	693b      	ldr	r3, [r7, #16]
 8016b14:	f383 8810 	msr	PRIMASK, r3
}
 8016b18:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016b1a:	bf00      	nop
}
 8016b1c:	371c      	adds	r7, #28
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b24:	4770      	bx	lr
 8016b26:	bf00      	nop
 8016b28:	20000174 	.word	0x20000174

08016b2c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8016b2c:	b480      	push	{r7}
 8016b2e:	b087      	sub	sp, #28
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b34:	f3ef 8310 	mrs	r3, PRIMASK
 8016b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b3a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016b3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016b3e:	b672      	cpsid	i
}
 8016b40:	bf00      	nop

  EvtSet |= EvtId_bm;
 8016b42:	4b09      	ldr	r3, [pc, #36]	; (8016b68 <UTIL_SEQ_SetEvt+0x3c>)
 8016b44:	681a      	ldr	r2, [r3, #0]
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	4313      	orrs	r3, r2
 8016b4a:	4a07      	ldr	r2, [pc, #28]	; (8016b68 <UTIL_SEQ_SetEvt+0x3c>)
 8016b4c:	6013      	str	r3, [r2, #0]
 8016b4e:	697b      	ldr	r3, [r7, #20]
 8016b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b52:	693b      	ldr	r3, [r7, #16]
 8016b54:	f383 8810 	msr	PRIMASK, r3
}
 8016b58:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016b5a:	bf00      	nop
}
 8016b5c:	371c      	adds	r7, #28
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b64:	4770      	bx	lr
 8016b66:	bf00      	nop
 8016b68:	20003d14 	.word	0x20003d14

08016b6c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b088      	sub	sp, #32
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8016b74:	4b1f      	ldr	r3, [pc, #124]	; (8016bf4 <UTIL_SEQ_WaitEvt+0x88>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8016b7a:	4b1e      	ldr	r3, [pc, #120]	; (8016bf4 <UTIL_SEQ_WaitEvt+0x88>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b82:	d102      	bne.n	8016b8a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8016b84:	2300      	movs	r3, #0
 8016b86:	61fb      	str	r3, [r7, #28]
 8016b88:	e005      	b.n	8016b96 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8016b8a:	4b1a      	ldr	r3, [pc, #104]	; (8016bf4 <UTIL_SEQ_WaitEvt+0x88>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	2201      	movs	r2, #1
 8016b90:	fa02 f303 	lsl.w	r3, r2, r3
 8016b94:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8016b96:	4b18      	ldr	r3, [pc, #96]	; (8016bf8 <UTIL_SEQ_WaitEvt+0x8c>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8016b9c:	4a16      	ldr	r2, [pc, #88]	; (8016bf8 <UTIL_SEQ_WaitEvt+0x8c>)
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8016ba2:	e003      	b.n	8016bac <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8016ba4:	6879      	ldr	r1, [r7, #4]
 8016ba6:	69f8      	ldr	r0, [r7, #28]
 8016ba8:	f7eb fcdf 	bl	800256a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8016bac:	4b13      	ldr	r3, [pc, #76]	; (8016bfc <UTIL_SEQ_WaitEvt+0x90>)
 8016bae:	681a      	ldr	r2, [r3, #0]
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	4013      	ands	r3, r2
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d0f5      	beq.n	8016ba4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8016bb8:	4a0e      	ldr	r2, [pc, #56]	; (8016bf4 <UTIL_SEQ_WaitEvt+0x88>)
 8016bba:	69bb      	ldr	r3, [r7, #24]
 8016bbc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8016bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8016bc4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016bc8:	b672      	cpsid	i
}
 8016bca:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	43da      	mvns	r2, r3
 8016bd0:	4b0a      	ldr	r3, [pc, #40]	; (8016bfc <UTIL_SEQ_WaitEvt+0x90>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	4013      	ands	r3, r2
 8016bd6:	4a09      	ldr	r2, [pc, #36]	; (8016bfc <UTIL_SEQ_WaitEvt+0x90>)
 8016bd8:	6013      	str	r3, [r2, #0]
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	f383 8810 	msr	PRIMASK, r3
}
 8016be4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8016be6:	4a04      	ldr	r2, [pc, #16]	; (8016bf8 <UTIL_SEQ_WaitEvt+0x8c>)
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	6013      	str	r3, [r2, #0]
  return;
 8016bec:	bf00      	nop
}
 8016bee:	3720      	adds	r7, #32
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}
 8016bf4:	20003d1c 	.word	0x20003d1c
 8016bf8:	20003d18 	.word	0x20003d18
 8016bfc:	20003d14 	.word	0x20003d14

08016c00 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8016c00:	b480      	push	{r7}
 8016c02:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016c04:	bf00      	nop
}
 8016c06:	46bd      	mov	sp, r7
 8016c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0c:	4770      	bx	lr

08016c0e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8016c0e:	b480      	push	{r7}
 8016c10:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016c12:	bf00      	nop
}
 8016c14:	46bd      	mov	sp, r7
 8016c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1a:	4770      	bx	lr

08016c1c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8016c1c:	b480      	push	{r7}
 8016c1e:	b085      	sub	sp, #20
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8016c24:	2300      	movs	r3, #0
 8016c26:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	0c1b      	lsrs	r3, r3, #16
 8016c30:	041b      	lsls	r3, r3, #16
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d104      	bne.n	8016c40 <SEQ_BitPosition+0x24>
 8016c36:	2310      	movs	r3, #16
 8016c38:	73fb      	strb	r3, [r7, #15]
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	041b      	lsls	r3, r3, #16
 8016c3e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d105      	bne.n	8016c56 <SEQ_BitPosition+0x3a>
 8016c4a:	7bfb      	ldrb	r3, [r7, #15]
 8016c4c:	3308      	adds	r3, #8
 8016c4e:	73fb      	strb	r3, [r7, #15]
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	021b      	lsls	r3, r3, #8
 8016c54:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d105      	bne.n	8016c6c <SEQ_BitPosition+0x50>
 8016c60:	7bfb      	ldrb	r3, [r7, #15]
 8016c62:	3304      	adds	r3, #4
 8016c64:	73fb      	strb	r3, [r7, #15]
 8016c66:	68bb      	ldr	r3, [r7, #8]
 8016c68:	011b      	lsls	r3, r3, #4
 8016c6a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	0f1b      	lsrs	r3, r3, #28
 8016c70:	4a07      	ldr	r2, [pc, #28]	; (8016c90 <SEQ_BitPosition+0x74>)
 8016c72:	5cd2      	ldrb	r2, [r2, r3]
 8016c74:	7bfb      	ldrb	r3, [r7, #15]
 8016c76:	4413      	add	r3, r2
 8016c78:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8016c7a:	7bfb      	ldrb	r3, [r7, #15]
 8016c7c:	f1c3 031f 	rsb	r3, r3, #31
 8016c80:	b2db      	uxtb	r3, r3
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3714      	adds	r7, #20
 8016c86:	46bd      	mov	sp, r7
 8016c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8c:	4770      	bx	lr
 8016c8e:	bf00      	nop
 8016c90:	0802f87c 	.word	0x0802f87c

08016c94 <__cvt>:
 8016c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c98:	ec55 4b10 	vmov	r4, r5, d0
 8016c9c:	2d00      	cmp	r5, #0
 8016c9e:	460e      	mov	r6, r1
 8016ca0:	4619      	mov	r1, r3
 8016ca2:	462b      	mov	r3, r5
 8016ca4:	bfbb      	ittet	lt
 8016ca6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016caa:	461d      	movlt	r5, r3
 8016cac:	2300      	movge	r3, #0
 8016cae:	232d      	movlt	r3, #45	; 0x2d
 8016cb0:	700b      	strb	r3, [r1, #0]
 8016cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016cb8:	4691      	mov	r9, r2
 8016cba:	f023 0820 	bic.w	r8, r3, #32
 8016cbe:	bfbc      	itt	lt
 8016cc0:	4622      	movlt	r2, r4
 8016cc2:	4614      	movlt	r4, r2
 8016cc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016cc8:	d005      	beq.n	8016cd6 <__cvt+0x42>
 8016cca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016cce:	d100      	bne.n	8016cd2 <__cvt+0x3e>
 8016cd0:	3601      	adds	r6, #1
 8016cd2:	2102      	movs	r1, #2
 8016cd4:	e000      	b.n	8016cd8 <__cvt+0x44>
 8016cd6:	2103      	movs	r1, #3
 8016cd8:	ab03      	add	r3, sp, #12
 8016cda:	9301      	str	r3, [sp, #4]
 8016cdc:	ab02      	add	r3, sp, #8
 8016cde:	9300      	str	r3, [sp, #0]
 8016ce0:	ec45 4b10 	vmov	d0, r4, r5
 8016ce4:	4653      	mov	r3, sl
 8016ce6:	4632      	mov	r2, r6
 8016ce8:	f000 ff62 	bl	8017bb0 <_dtoa_r>
 8016cec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016cf0:	4607      	mov	r7, r0
 8016cf2:	d102      	bne.n	8016cfa <__cvt+0x66>
 8016cf4:	f019 0f01 	tst.w	r9, #1
 8016cf8:	d022      	beq.n	8016d40 <__cvt+0xac>
 8016cfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016cfe:	eb07 0906 	add.w	r9, r7, r6
 8016d02:	d110      	bne.n	8016d26 <__cvt+0x92>
 8016d04:	783b      	ldrb	r3, [r7, #0]
 8016d06:	2b30      	cmp	r3, #48	; 0x30
 8016d08:	d10a      	bne.n	8016d20 <__cvt+0x8c>
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	4620      	mov	r0, r4
 8016d10:	4629      	mov	r1, r5
 8016d12:	f7e9 feb1 	bl	8000a78 <__aeabi_dcmpeq>
 8016d16:	b918      	cbnz	r0, 8016d20 <__cvt+0x8c>
 8016d18:	f1c6 0601 	rsb	r6, r6, #1
 8016d1c:	f8ca 6000 	str.w	r6, [sl]
 8016d20:	f8da 3000 	ldr.w	r3, [sl]
 8016d24:	4499      	add	r9, r3
 8016d26:	2200      	movs	r2, #0
 8016d28:	2300      	movs	r3, #0
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	4629      	mov	r1, r5
 8016d2e:	f7e9 fea3 	bl	8000a78 <__aeabi_dcmpeq>
 8016d32:	b108      	cbz	r0, 8016d38 <__cvt+0xa4>
 8016d34:	f8cd 900c 	str.w	r9, [sp, #12]
 8016d38:	2230      	movs	r2, #48	; 0x30
 8016d3a:	9b03      	ldr	r3, [sp, #12]
 8016d3c:	454b      	cmp	r3, r9
 8016d3e:	d307      	bcc.n	8016d50 <__cvt+0xbc>
 8016d40:	9b03      	ldr	r3, [sp, #12]
 8016d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d44:	1bdb      	subs	r3, r3, r7
 8016d46:	4638      	mov	r0, r7
 8016d48:	6013      	str	r3, [r2, #0]
 8016d4a:	b004      	add	sp, #16
 8016d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d50:	1c59      	adds	r1, r3, #1
 8016d52:	9103      	str	r1, [sp, #12]
 8016d54:	701a      	strb	r2, [r3, #0]
 8016d56:	e7f0      	b.n	8016d3a <__cvt+0xa6>

08016d58 <__exponent>:
 8016d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	2900      	cmp	r1, #0
 8016d5e:	bfb8      	it	lt
 8016d60:	4249      	neglt	r1, r1
 8016d62:	f803 2b02 	strb.w	r2, [r3], #2
 8016d66:	bfb4      	ite	lt
 8016d68:	222d      	movlt	r2, #45	; 0x2d
 8016d6a:	222b      	movge	r2, #43	; 0x2b
 8016d6c:	2909      	cmp	r1, #9
 8016d6e:	7042      	strb	r2, [r0, #1]
 8016d70:	dd2a      	ble.n	8016dc8 <__exponent+0x70>
 8016d72:	f10d 0207 	add.w	r2, sp, #7
 8016d76:	4617      	mov	r7, r2
 8016d78:	260a      	movs	r6, #10
 8016d7a:	4694      	mov	ip, r2
 8016d7c:	fb91 f5f6 	sdiv	r5, r1, r6
 8016d80:	fb06 1415 	mls	r4, r6, r5, r1
 8016d84:	3430      	adds	r4, #48	; 0x30
 8016d86:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016d8a:	460c      	mov	r4, r1
 8016d8c:	2c63      	cmp	r4, #99	; 0x63
 8016d8e:	f102 32ff 	add.w	r2, r2, #4294967295
 8016d92:	4629      	mov	r1, r5
 8016d94:	dcf1      	bgt.n	8016d7a <__exponent+0x22>
 8016d96:	3130      	adds	r1, #48	; 0x30
 8016d98:	f1ac 0402 	sub.w	r4, ip, #2
 8016d9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016da0:	1c41      	adds	r1, r0, #1
 8016da2:	4622      	mov	r2, r4
 8016da4:	42ba      	cmp	r2, r7
 8016da6:	d30a      	bcc.n	8016dbe <__exponent+0x66>
 8016da8:	f10d 0209 	add.w	r2, sp, #9
 8016dac:	eba2 020c 	sub.w	r2, r2, ip
 8016db0:	42bc      	cmp	r4, r7
 8016db2:	bf88      	it	hi
 8016db4:	2200      	movhi	r2, #0
 8016db6:	4413      	add	r3, r2
 8016db8:	1a18      	subs	r0, r3, r0
 8016dba:	b003      	add	sp, #12
 8016dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dbe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016dc2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016dc6:	e7ed      	b.n	8016da4 <__exponent+0x4c>
 8016dc8:	2330      	movs	r3, #48	; 0x30
 8016dca:	3130      	adds	r1, #48	; 0x30
 8016dcc:	7083      	strb	r3, [r0, #2]
 8016dce:	70c1      	strb	r1, [r0, #3]
 8016dd0:	1d03      	adds	r3, r0, #4
 8016dd2:	e7f1      	b.n	8016db8 <__exponent+0x60>

08016dd4 <_printf_float>:
 8016dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd8:	ed2d 8b02 	vpush	{d8}
 8016ddc:	b08d      	sub	sp, #52	; 0x34
 8016dde:	460c      	mov	r4, r1
 8016de0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016de4:	4616      	mov	r6, r2
 8016de6:	461f      	mov	r7, r3
 8016de8:	4605      	mov	r5, r0
 8016dea:	f000 fdd1 	bl	8017990 <_localeconv_r>
 8016dee:	f8d0 a000 	ldr.w	sl, [r0]
 8016df2:	4650      	mov	r0, sl
 8016df4:	f7e9 fa14 	bl	8000220 <strlen>
 8016df8:	2300      	movs	r3, #0
 8016dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8016dfc:	6823      	ldr	r3, [r4, #0]
 8016dfe:	9305      	str	r3, [sp, #20]
 8016e00:	f8d8 3000 	ldr.w	r3, [r8]
 8016e04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016e08:	3307      	adds	r3, #7
 8016e0a:	f023 0307 	bic.w	r3, r3, #7
 8016e0e:	f103 0208 	add.w	r2, r3, #8
 8016e12:	f8c8 2000 	str.w	r2, [r8]
 8016e16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016e1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016e1e:	9307      	str	r3, [sp, #28]
 8016e20:	f8cd 8018 	str.w	r8, [sp, #24]
 8016e24:	ee08 0a10 	vmov	s16, r0
 8016e28:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016e30:	4b9e      	ldr	r3, [pc, #632]	; (80170ac <_printf_float+0x2d8>)
 8016e32:	f04f 32ff 	mov.w	r2, #4294967295
 8016e36:	f7e9 fe51 	bl	8000adc <__aeabi_dcmpun>
 8016e3a:	bb88      	cbnz	r0, 8016ea0 <_printf_float+0xcc>
 8016e3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016e40:	4b9a      	ldr	r3, [pc, #616]	; (80170ac <_printf_float+0x2d8>)
 8016e42:	f04f 32ff 	mov.w	r2, #4294967295
 8016e46:	f7e9 fe2b 	bl	8000aa0 <__aeabi_dcmple>
 8016e4a:	bb48      	cbnz	r0, 8016ea0 <_printf_float+0xcc>
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	2300      	movs	r3, #0
 8016e50:	4640      	mov	r0, r8
 8016e52:	4649      	mov	r1, r9
 8016e54:	f7e9 fe1a 	bl	8000a8c <__aeabi_dcmplt>
 8016e58:	b110      	cbz	r0, 8016e60 <_printf_float+0x8c>
 8016e5a:	232d      	movs	r3, #45	; 0x2d
 8016e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e60:	4a93      	ldr	r2, [pc, #588]	; (80170b0 <_printf_float+0x2dc>)
 8016e62:	4b94      	ldr	r3, [pc, #592]	; (80170b4 <_printf_float+0x2e0>)
 8016e64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016e68:	bf94      	ite	ls
 8016e6a:	4690      	movls	r8, r2
 8016e6c:	4698      	movhi	r8, r3
 8016e6e:	2303      	movs	r3, #3
 8016e70:	6123      	str	r3, [r4, #16]
 8016e72:	9b05      	ldr	r3, [sp, #20]
 8016e74:	f023 0304 	bic.w	r3, r3, #4
 8016e78:	6023      	str	r3, [r4, #0]
 8016e7a:	f04f 0900 	mov.w	r9, #0
 8016e7e:	9700      	str	r7, [sp, #0]
 8016e80:	4633      	mov	r3, r6
 8016e82:	aa0b      	add	r2, sp, #44	; 0x2c
 8016e84:	4621      	mov	r1, r4
 8016e86:	4628      	mov	r0, r5
 8016e88:	f000 f9da 	bl	8017240 <_printf_common>
 8016e8c:	3001      	adds	r0, #1
 8016e8e:	f040 8090 	bne.w	8016fb2 <_printf_float+0x1de>
 8016e92:	f04f 30ff 	mov.w	r0, #4294967295
 8016e96:	b00d      	add	sp, #52	; 0x34
 8016e98:	ecbd 8b02 	vpop	{d8}
 8016e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ea0:	4642      	mov	r2, r8
 8016ea2:	464b      	mov	r3, r9
 8016ea4:	4640      	mov	r0, r8
 8016ea6:	4649      	mov	r1, r9
 8016ea8:	f7e9 fe18 	bl	8000adc <__aeabi_dcmpun>
 8016eac:	b140      	cbz	r0, 8016ec0 <_printf_float+0xec>
 8016eae:	464b      	mov	r3, r9
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	bfbc      	itt	lt
 8016eb4:	232d      	movlt	r3, #45	; 0x2d
 8016eb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016eba:	4a7f      	ldr	r2, [pc, #508]	; (80170b8 <_printf_float+0x2e4>)
 8016ebc:	4b7f      	ldr	r3, [pc, #508]	; (80170bc <_printf_float+0x2e8>)
 8016ebe:	e7d1      	b.n	8016e64 <_printf_float+0x90>
 8016ec0:	6863      	ldr	r3, [r4, #4]
 8016ec2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016ec6:	9206      	str	r2, [sp, #24]
 8016ec8:	1c5a      	adds	r2, r3, #1
 8016eca:	d13f      	bne.n	8016f4c <_printf_float+0x178>
 8016ecc:	2306      	movs	r3, #6
 8016ece:	6063      	str	r3, [r4, #4]
 8016ed0:	9b05      	ldr	r3, [sp, #20]
 8016ed2:	6861      	ldr	r1, [r4, #4]
 8016ed4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016ed8:	2300      	movs	r3, #0
 8016eda:	9303      	str	r3, [sp, #12]
 8016edc:	ab0a      	add	r3, sp, #40	; 0x28
 8016ede:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016ee2:	ab09      	add	r3, sp, #36	; 0x24
 8016ee4:	ec49 8b10 	vmov	d0, r8, r9
 8016ee8:	9300      	str	r3, [sp, #0]
 8016eea:	6022      	str	r2, [r4, #0]
 8016eec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016ef0:	4628      	mov	r0, r5
 8016ef2:	f7ff fecf 	bl	8016c94 <__cvt>
 8016ef6:	9b06      	ldr	r3, [sp, #24]
 8016ef8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016efa:	2b47      	cmp	r3, #71	; 0x47
 8016efc:	4680      	mov	r8, r0
 8016efe:	d108      	bne.n	8016f12 <_printf_float+0x13e>
 8016f00:	1cc8      	adds	r0, r1, #3
 8016f02:	db02      	blt.n	8016f0a <_printf_float+0x136>
 8016f04:	6863      	ldr	r3, [r4, #4]
 8016f06:	4299      	cmp	r1, r3
 8016f08:	dd41      	ble.n	8016f8e <_printf_float+0x1ba>
 8016f0a:	f1ab 0302 	sub.w	r3, fp, #2
 8016f0e:	fa5f fb83 	uxtb.w	fp, r3
 8016f12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016f16:	d820      	bhi.n	8016f5a <_printf_float+0x186>
 8016f18:	3901      	subs	r1, #1
 8016f1a:	465a      	mov	r2, fp
 8016f1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016f20:	9109      	str	r1, [sp, #36]	; 0x24
 8016f22:	f7ff ff19 	bl	8016d58 <__exponent>
 8016f26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f28:	1813      	adds	r3, r2, r0
 8016f2a:	2a01      	cmp	r2, #1
 8016f2c:	4681      	mov	r9, r0
 8016f2e:	6123      	str	r3, [r4, #16]
 8016f30:	dc02      	bgt.n	8016f38 <_printf_float+0x164>
 8016f32:	6822      	ldr	r2, [r4, #0]
 8016f34:	07d2      	lsls	r2, r2, #31
 8016f36:	d501      	bpl.n	8016f3c <_printf_float+0x168>
 8016f38:	3301      	adds	r3, #1
 8016f3a:	6123      	str	r3, [r4, #16]
 8016f3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d09c      	beq.n	8016e7e <_printf_float+0xaa>
 8016f44:	232d      	movs	r3, #45	; 0x2d
 8016f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f4a:	e798      	b.n	8016e7e <_printf_float+0xaa>
 8016f4c:	9a06      	ldr	r2, [sp, #24]
 8016f4e:	2a47      	cmp	r2, #71	; 0x47
 8016f50:	d1be      	bne.n	8016ed0 <_printf_float+0xfc>
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d1bc      	bne.n	8016ed0 <_printf_float+0xfc>
 8016f56:	2301      	movs	r3, #1
 8016f58:	e7b9      	b.n	8016ece <_printf_float+0xfa>
 8016f5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016f5e:	d118      	bne.n	8016f92 <_printf_float+0x1be>
 8016f60:	2900      	cmp	r1, #0
 8016f62:	6863      	ldr	r3, [r4, #4]
 8016f64:	dd0b      	ble.n	8016f7e <_printf_float+0x1aa>
 8016f66:	6121      	str	r1, [r4, #16]
 8016f68:	b913      	cbnz	r3, 8016f70 <_printf_float+0x19c>
 8016f6a:	6822      	ldr	r2, [r4, #0]
 8016f6c:	07d0      	lsls	r0, r2, #31
 8016f6e:	d502      	bpl.n	8016f76 <_printf_float+0x1a2>
 8016f70:	3301      	adds	r3, #1
 8016f72:	440b      	add	r3, r1
 8016f74:	6123      	str	r3, [r4, #16]
 8016f76:	65a1      	str	r1, [r4, #88]	; 0x58
 8016f78:	f04f 0900 	mov.w	r9, #0
 8016f7c:	e7de      	b.n	8016f3c <_printf_float+0x168>
 8016f7e:	b913      	cbnz	r3, 8016f86 <_printf_float+0x1b2>
 8016f80:	6822      	ldr	r2, [r4, #0]
 8016f82:	07d2      	lsls	r2, r2, #31
 8016f84:	d501      	bpl.n	8016f8a <_printf_float+0x1b6>
 8016f86:	3302      	adds	r3, #2
 8016f88:	e7f4      	b.n	8016f74 <_printf_float+0x1a0>
 8016f8a:	2301      	movs	r3, #1
 8016f8c:	e7f2      	b.n	8016f74 <_printf_float+0x1a0>
 8016f8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f94:	4299      	cmp	r1, r3
 8016f96:	db05      	blt.n	8016fa4 <_printf_float+0x1d0>
 8016f98:	6823      	ldr	r3, [r4, #0]
 8016f9a:	6121      	str	r1, [r4, #16]
 8016f9c:	07d8      	lsls	r0, r3, #31
 8016f9e:	d5ea      	bpl.n	8016f76 <_printf_float+0x1a2>
 8016fa0:	1c4b      	adds	r3, r1, #1
 8016fa2:	e7e7      	b.n	8016f74 <_printf_float+0x1a0>
 8016fa4:	2900      	cmp	r1, #0
 8016fa6:	bfd4      	ite	le
 8016fa8:	f1c1 0202 	rsble	r2, r1, #2
 8016fac:	2201      	movgt	r2, #1
 8016fae:	4413      	add	r3, r2
 8016fb0:	e7e0      	b.n	8016f74 <_printf_float+0x1a0>
 8016fb2:	6823      	ldr	r3, [r4, #0]
 8016fb4:	055a      	lsls	r2, r3, #21
 8016fb6:	d407      	bmi.n	8016fc8 <_printf_float+0x1f4>
 8016fb8:	6923      	ldr	r3, [r4, #16]
 8016fba:	4642      	mov	r2, r8
 8016fbc:	4631      	mov	r1, r6
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	47b8      	blx	r7
 8016fc2:	3001      	adds	r0, #1
 8016fc4:	d12c      	bne.n	8017020 <_printf_float+0x24c>
 8016fc6:	e764      	b.n	8016e92 <_printf_float+0xbe>
 8016fc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016fcc:	f240 80e0 	bls.w	8017190 <_printf_float+0x3bc>
 8016fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	f7e9 fd4e 	bl	8000a78 <__aeabi_dcmpeq>
 8016fdc:	2800      	cmp	r0, #0
 8016fde:	d034      	beq.n	801704a <_printf_float+0x276>
 8016fe0:	4a37      	ldr	r2, [pc, #220]	; (80170c0 <_printf_float+0x2ec>)
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	4631      	mov	r1, r6
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	47b8      	blx	r7
 8016fea:	3001      	adds	r0, #1
 8016fec:	f43f af51 	beq.w	8016e92 <_printf_float+0xbe>
 8016ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016ff4:	429a      	cmp	r2, r3
 8016ff6:	db02      	blt.n	8016ffe <_printf_float+0x22a>
 8016ff8:	6823      	ldr	r3, [r4, #0]
 8016ffa:	07d8      	lsls	r0, r3, #31
 8016ffc:	d510      	bpl.n	8017020 <_printf_float+0x24c>
 8016ffe:	ee18 3a10 	vmov	r3, s16
 8017002:	4652      	mov	r2, sl
 8017004:	4631      	mov	r1, r6
 8017006:	4628      	mov	r0, r5
 8017008:	47b8      	blx	r7
 801700a:	3001      	adds	r0, #1
 801700c:	f43f af41 	beq.w	8016e92 <_printf_float+0xbe>
 8017010:	f04f 0800 	mov.w	r8, #0
 8017014:	f104 091a 	add.w	r9, r4, #26
 8017018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801701a:	3b01      	subs	r3, #1
 801701c:	4543      	cmp	r3, r8
 801701e:	dc09      	bgt.n	8017034 <_printf_float+0x260>
 8017020:	6823      	ldr	r3, [r4, #0]
 8017022:	079b      	lsls	r3, r3, #30
 8017024:	f100 8107 	bmi.w	8017236 <_printf_float+0x462>
 8017028:	68e0      	ldr	r0, [r4, #12]
 801702a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801702c:	4298      	cmp	r0, r3
 801702e:	bfb8      	it	lt
 8017030:	4618      	movlt	r0, r3
 8017032:	e730      	b.n	8016e96 <_printf_float+0xc2>
 8017034:	2301      	movs	r3, #1
 8017036:	464a      	mov	r2, r9
 8017038:	4631      	mov	r1, r6
 801703a:	4628      	mov	r0, r5
 801703c:	47b8      	blx	r7
 801703e:	3001      	adds	r0, #1
 8017040:	f43f af27 	beq.w	8016e92 <_printf_float+0xbe>
 8017044:	f108 0801 	add.w	r8, r8, #1
 8017048:	e7e6      	b.n	8017018 <_printf_float+0x244>
 801704a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801704c:	2b00      	cmp	r3, #0
 801704e:	dc39      	bgt.n	80170c4 <_printf_float+0x2f0>
 8017050:	4a1b      	ldr	r2, [pc, #108]	; (80170c0 <_printf_float+0x2ec>)
 8017052:	2301      	movs	r3, #1
 8017054:	4631      	mov	r1, r6
 8017056:	4628      	mov	r0, r5
 8017058:	47b8      	blx	r7
 801705a:	3001      	adds	r0, #1
 801705c:	f43f af19 	beq.w	8016e92 <_printf_float+0xbe>
 8017060:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017064:	4313      	orrs	r3, r2
 8017066:	d102      	bne.n	801706e <_printf_float+0x29a>
 8017068:	6823      	ldr	r3, [r4, #0]
 801706a:	07d9      	lsls	r1, r3, #31
 801706c:	d5d8      	bpl.n	8017020 <_printf_float+0x24c>
 801706e:	ee18 3a10 	vmov	r3, s16
 8017072:	4652      	mov	r2, sl
 8017074:	4631      	mov	r1, r6
 8017076:	4628      	mov	r0, r5
 8017078:	47b8      	blx	r7
 801707a:	3001      	adds	r0, #1
 801707c:	f43f af09 	beq.w	8016e92 <_printf_float+0xbe>
 8017080:	f04f 0900 	mov.w	r9, #0
 8017084:	f104 0a1a 	add.w	sl, r4, #26
 8017088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801708a:	425b      	negs	r3, r3
 801708c:	454b      	cmp	r3, r9
 801708e:	dc01      	bgt.n	8017094 <_printf_float+0x2c0>
 8017090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017092:	e792      	b.n	8016fba <_printf_float+0x1e6>
 8017094:	2301      	movs	r3, #1
 8017096:	4652      	mov	r2, sl
 8017098:	4631      	mov	r1, r6
 801709a:	4628      	mov	r0, r5
 801709c:	47b8      	blx	r7
 801709e:	3001      	adds	r0, #1
 80170a0:	f43f aef7 	beq.w	8016e92 <_printf_float+0xbe>
 80170a4:	f109 0901 	add.w	r9, r9, #1
 80170a8:	e7ee      	b.n	8017088 <_printf_float+0x2b4>
 80170aa:	bf00      	nop
 80170ac:	7fefffff 	.word	0x7fefffff
 80170b0:	0802f88c 	.word	0x0802f88c
 80170b4:	0802f890 	.word	0x0802f890
 80170b8:	0802f894 	.word	0x0802f894
 80170bc:	0802f898 	.word	0x0802f898
 80170c0:	0802f89c 	.word	0x0802f89c
 80170c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80170c8:	429a      	cmp	r2, r3
 80170ca:	bfa8      	it	ge
 80170cc:	461a      	movge	r2, r3
 80170ce:	2a00      	cmp	r2, #0
 80170d0:	4691      	mov	r9, r2
 80170d2:	dc37      	bgt.n	8017144 <_printf_float+0x370>
 80170d4:	f04f 0b00 	mov.w	fp, #0
 80170d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80170dc:	f104 021a 	add.w	r2, r4, #26
 80170e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80170e2:	9305      	str	r3, [sp, #20]
 80170e4:	eba3 0309 	sub.w	r3, r3, r9
 80170e8:	455b      	cmp	r3, fp
 80170ea:	dc33      	bgt.n	8017154 <_printf_float+0x380>
 80170ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80170f0:	429a      	cmp	r2, r3
 80170f2:	db3b      	blt.n	801716c <_printf_float+0x398>
 80170f4:	6823      	ldr	r3, [r4, #0]
 80170f6:	07da      	lsls	r2, r3, #31
 80170f8:	d438      	bmi.n	801716c <_printf_float+0x398>
 80170fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80170fe:	eba2 0903 	sub.w	r9, r2, r3
 8017102:	9b05      	ldr	r3, [sp, #20]
 8017104:	1ad2      	subs	r2, r2, r3
 8017106:	4591      	cmp	r9, r2
 8017108:	bfa8      	it	ge
 801710a:	4691      	movge	r9, r2
 801710c:	f1b9 0f00 	cmp.w	r9, #0
 8017110:	dc35      	bgt.n	801717e <_printf_float+0x3aa>
 8017112:	f04f 0800 	mov.w	r8, #0
 8017116:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801711a:	f104 0a1a 	add.w	sl, r4, #26
 801711e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017122:	1a9b      	subs	r3, r3, r2
 8017124:	eba3 0309 	sub.w	r3, r3, r9
 8017128:	4543      	cmp	r3, r8
 801712a:	f77f af79 	ble.w	8017020 <_printf_float+0x24c>
 801712e:	2301      	movs	r3, #1
 8017130:	4652      	mov	r2, sl
 8017132:	4631      	mov	r1, r6
 8017134:	4628      	mov	r0, r5
 8017136:	47b8      	blx	r7
 8017138:	3001      	adds	r0, #1
 801713a:	f43f aeaa 	beq.w	8016e92 <_printf_float+0xbe>
 801713e:	f108 0801 	add.w	r8, r8, #1
 8017142:	e7ec      	b.n	801711e <_printf_float+0x34a>
 8017144:	4613      	mov	r3, r2
 8017146:	4631      	mov	r1, r6
 8017148:	4642      	mov	r2, r8
 801714a:	4628      	mov	r0, r5
 801714c:	47b8      	blx	r7
 801714e:	3001      	adds	r0, #1
 8017150:	d1c0      	bne.n	80170d4 <_printf_float+0x300>
 8017152:	e69e      	b.n	8016e92 <_printf_float+0xbe>
 8017154:	2301      	movs	r3, #1
 8017156:	4631      	mov	r1, r6
 8017158:	4628      	mov	r0, r5
 801715a:	9205      	str	r2, [sp, #20]
 801715c:	47b8      	blx	r7
 801715e:	3001      	adds	r0, #1
 8017160:	f43f ae97 	beq.w	8016e92 <_printf_float+0xbe>
 8017164:	9a05      	ldr	r2, [sp, #20]
 8017166:	f10b 0b01 	add.w	fp, fp, #1
 801716a:	e7b9      	b.n	80170e0 <_printf_float+0x30c>
 801716c:	ee18 3a10 	vmov	r3, s16
 8017170:	4652      	mov	r2, sl
 8017172:	4631      	mov	r1, r6
 8017174:	4628      	mov	r0, r5
 8017176:	47b8      	blx	r7
 8017178:	3001      	adds	r0, #1
 801717a:	d1be      	bne.n	80170fa <_printf_float+0x326>
 801717c:	e689      	b.n	8016e92 <_printf_float+0xbe>
 801717e:	9a05      	ldr	r2, [sp, #20]
 8017180:	464b      	mov	r3, r9
 8017182:	4442      	add	r2, r8
 8017184:	4631      	mov	r1, r6
 8017186:	4628      	mov	r0, r5
 8017188:	47b8      	blx	r7
 801718a:	3001      	adds	r0, #1
 801718c:	d1c1      	bne.n	8017112 <_printf_float+0x33e>
 801718e:	e680      	b.n	8016e92 <_printf_float+0xbe>
 8017190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017192:	2a01      	cmp	r2, #1
 8017194:	dc01      	bgt.n	801719a <_printf_float+0x3c6>
 8017196:	07db      	lsls	r3, r3, #31
 8017198:	d53a      	bpl.n	8017210 <_printf_float+0x43c>
 801719a:	2301      	movs	r3, #1
 801719c:	4642      	mov	r2, r8
 801719e:	4631      	mov	r1, r6
 80171a0:	4628      	mov	r0, r5
 80171a2:	47b8      	blx	r7
 80171a4:	3001      	adds	r0, #1
 80171a6:	f43f ae74 	beq.w	8016e92 <_printf_float+0xbe>
 80171aa:	ee18 3a10 	vmov	r3, s16
 80171ae:	4652      	mov	r2, sl
 80171b0:	4631      	mov	r1, r6
 80171b2:	4628      	mov	r0, r5
 80171b4:	47b8      	blx	r7
 80171b6:	3001      	adds	r0, #1
 80171b8:	f43f ae6b 	beq.w	8016e92 <_printf_float+0xbe>
 80171bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80171c0:	2200      	movs	r2, #0
 80171c2:	2300      	movs	r3, #0
 80171c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80171c8:	f7e9 fc56 	bl	8000a78 <__aeabi_dcmpeq>
 80171cc:	b9d8      	cbnz	r0, 8017206 <_printf_float+0x432>
 80171ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80171d2:	f108 0201 	add.w	r2, r8, #1
 80171d6:	4631      	mov	r1, r6
 80171d8:	4628      	mov	r0, r5
 80171da:	47b8      	blx	r7
 80171dc:	3001      	adds	r0, #1
 80171de:	d10e      	bne.n	80171fe <_printf_float+0x42a>
 80171e0:	e657      	b.n	8016e92 <_printf_float+0xbe>
 80171e2:	2301      	movs	r3, #1
 80171e4:	4652      	mov	r2, sl
 80171e6:	4631      	mov	r1, r6
 80171e8:	4628      	mov	r0, r5
 80171ea:	47b8      	blx	r7
 80171ec:	3001      	adds	r0, #1
 80171ee:	f43f ae50 	beq.w	8016e92 <_printf_float+0xbe>
 80171f2:	f108 0801 	add.w	r8, r8, #1
 80171f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171f8:	3b01      	subs	r3, #1
 80171fa:	4543      	cmp	r3, r8
 80171fc:	dcf1      	bgt.n	80171e2 <_printf_float+0x40e>
 80171fe:	464b      	mov	r3, r9
 8017200:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017204:	e6da      	b.n	8016fbc <_printf_float+0x1e8>
 8017206:	f04f 0800 	mov.w	r8, #0
 801720a:	f104 0a1a 	add.w	sl, r4, #26
 801720e:	e7f2      	b.n	80171f6 <_printf_float+0x422>
 8017210:	2301      	movs	r3, #1
 8017212:	4642      	mov	r2, r8
 8017214:	e7df      	b.n	80171d6 <_printf_float+0x402>
 8017216:	2301      	movs	r3, #1
 8017218:	464a      	mov	r2, r9
 801721a:	4631      	mov	r1, r6
 801721c:	4628      	mov	r0, r5
 801721e:	47b8      	blx	r7
 8017220:	3001      	adds	r0, #1
 8017222:	f43f ae36 	beq.w	8016e92 <_printf_float+0xbe>
 8017226:	f108 0801 	add.w	r8, r8, #1
 801722a:	68e3      	ldr	r3, [r4, #12]
 801722c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801722e:	1a5b      	subs	r3, r3, r1
 8017230:	4543      	cmp	r3, r8
 8017232:	dcf0      	bgt.n	8017216 <_printf_float+0x442>
 8017234:	e6f8      	b.n	8017028 <_printf_float+0x254>
 8017236:	f04f 0800 	mov.w	r8, #0
 801723a:	f104 0919 	add.w	r9, r4, #25
 801723e:	e7f4      	b.n	801722a <_printf_float+0x456>

08017240 <_printf_common>:
 8017240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017244:	4616      	mov	r6, r2
 8017246:	4699      	mov	r9, r3
 8017248:	688a      	ldr	r2, [r1, #8]
 801724a:	690b      	ldr	r3, [r1, #16]
 801724c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017250:	4293      	cmp	r3, r2
 8017252:	bfb8      	it	lt
 8017254:	4613      	movlt	r3, r2
 8017256:	6033      	str	r3, [r6, #0]
 8017258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801725c:	4607      	mov	r7, r0
 801725e:	460c      	mov	r4, r1
 8017260:	b10a      	cbz	r2, 8017266 <_printf_common+0x26>
 8017262:	3301      	adds	r3, #1
 8017264:	6033      	str	r3, [r6, #0]
 8017266:	6823      	ldr	r3, [r4, #0]
 8017268:	0699      	lsls	r1, r3, #26
 801726a:	bf42      	ittt	mi
 801726c:	6833      	ldrmi	r3, [r6, #0]
 801726e:	3302      	addmi	r3, #2
 8017270:	6033      	strmi	r3, [r6, #0]
 8017272:	6825      	ldr	r5, [r4, #0]
 8017274:	f015 0506 	ands.w	r5, r5, #6
 8017278:	d106      	bne.n	8017288 <_printf_common+0x48>
 801727a:	f104 0a19 	add.w	sl, r4, #25
 801727e:	68e3      	ldr	r3, [r4, #12]
 8017280:	6832      	ldr	r2, [r6, #0]
 8017282:	1a9b      	subs	r3, r3, r2
 8017284:	42ab      	cmp	r3, r5
 8017286:	dc26      	bgt.n	80172d6 <_printf_common+0x96>
 8017288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801728c:	1e13      	subs	r3, r2, #0
 801728e:	6822      	ldr	r2, [r4, #0]
 8017290:	bf18      	it	ne
 8017292:	2301      	movne	r3, #1
 8017294:	0692      	lsls	r2, r2, #26
 8017296:	d42b      	bmi.n	80172f0 <_printf_common+0xb0>
 8017298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801729c:	4649      	mov	r1, r9
 801729e:	4638      	mov	r0, r7
 80172a0:	47c0      	blx	r8
 80172a2:	3001      	adds	r0, #1
 80172a4:	d01e      	beq.n	80172e4 <_printf_common+0xa4>
 80172a6:	6823      	ldr	r3, [r4, #0]
 80172a8:	6922      	ldr	r2, [r4, #16]
 80172aa:	f003 0306 	and.w	r3, r3, #6
 80172ae:	2b04      	cmp	r3, #4
 80172b0:	bf02      	ittt	eq
 80172b2:	68e5      	ldreq	r5, [r4, #12]
 80172b4:	6833      	ldreq	r3, [r6, #0]
 80172b6:	1aed      	subeq	r5, r5, r3
 80172b8:	68a3      	ldr	r3, [r4, #8]
 80172ba:	bf0c      	ite	eq
 80172bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172c0:	2500      	movne	r5, #0
 80172c2:	4293      	cmp	r3, r2
 80172c4:	bfc4      	itt	gt
 80172c6:	1a9b      	subgt	r3, r3, r2
 80172c8:	18ed      	addgt	r5, r5, r3
 80172ca:	2600      	movs	r6, #0
 80172cc:	341a      	adds	r4, #26
 80172ce:	42b5      	cmp	r5, r6
 80172d0:	d11a      	bne.n	8017308 <_printf_common+0xc8>
 80172d2:	2000      	movs	r0, #0
 80172d4:	e008      	b.n	80172e8 <_printf_common+0xa8>
 80172d6:	2301      	movs	r3, #1
 80172d8:	4652      	mov	r2, sl
 80172da:	4649      	mov	r1, r9
 80172dc:	4638      	mov	r0, r7
 80172de:	47c0      	blx	r8
 80172e0:	3001      	adds	r0, #1
 80172e2:	d103      	bne.n	80172ec <_printf_common+0xac>
 80172e4:	f04f 30ff 	mov.w	r0, #4294967295
 80172e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ec:	3501      	adds	r5, #1
 80172ee:	e7c6      	b.n	801727e <_printf_common+0x3e>
 80172f0:	18e1      	adds	r1, r4, r3
 80172f2:	1c5a      	adds	r2, r3, #1
 80172f4:	2030      	movs	r0, #48	; 0x30
 80172f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80172fa:	4422      	add	r2, r4
 80172fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017304:	3302      	adds	r3, #2
 8017306:	e7c7      	b.n	8017298 <_printf_common+0x58>
 8017308:	2301      	movs	r3, #1
 801730a:	4622      	mov	r2, r4
 801730c:	4649      	mov	r1, r9
 801730e:	4638      	mov	r0, r7
 8017310:	47c0      	blx	r8
 8017312:	3001      	adds	r0, #1
 8017314:	d0e6      	beq.n	80172e4 <_printf_common+0xa4>
 8017316:	3601      	adds	r6, #1
 8017318:	e7d9      	b.n	80172ce <_printf_common+0x8e>
	...

0801731c <_printf_i>:
 801731c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017320:	7e0f      	ldrb	r7, [r1, #24]
 8017322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017324:	2f78      	cmp	r7, #120	; 0x78
 8017326:	4691      	mov	r9, r2
 8017328:	4680      	mov	r8, r0
 801732a:	460c      	mov	r4, r1
 801732c:	469a      	mov	sl, r3
 801732e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017332:	d807      	bhi.n	8017344 <_printf_i+0x28>
 8017334:	2f62      	cmp	r7, #98	; 0x62
 8017336:	d80a      	bhi.n	801734e <_printf_i+0x32>
 8017338:	2f00      	cmp	r7, #0
 801733a:	f000 80d4 	beq.w	80174e6 <_printf_i+0x1ca>
 801733e:	2f58      	cmp	r7, #88	; 0x58
 8017340:	f000 80c0 	beq.w	80174c4 <_printf_i+0x1a8>
 8017344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801734c:	e03a      	b.n	80173c4 <_printf_i+0xa8>
 801734e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017352:	2b15      	cmp	r3, #21
 8017354:	d8f6      	bhi.n	8017344 <_printf_i+0x28>
 8017356:	a101      	add	r1, pc, #4	; (adr r1, 801735c <_printf_i+0x40>)
 8017358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801735c:	080173b5 	.word	0x080173b5
 8017360:	080173c9 	.word	0x080173c9
 8017364:	08017345 	.word	0x08017345
 8017368:	08017345 	.word	0x08017345
 801736c:	08017345 	.word	0x08017345
 8017370:	08017345 	.word	0x08017345
 8017374:	080173c9 	.word	0x080173c9
 8017378:	08017345 	.word	0x08017345
 801737c:	08017345 	.word	0x08017345
 8017380:	08017345 	.word	0x08017345
 8017384:	08017345 	.word	0x08017345
 8017388:	080174cd 	.word	0x080174cd
 801738c:	080173f5 	.word	0x080173f5
 8017390:	08017487 	.word	0x08017487
 8017394:	08017345 	.word	0x08017345
 8017398:	08017345 	.word	0x08017345
 801739c:	080174ef 	.word	0x080174ef
 80173a0:	08017345 	.word	0x08017345
 80173a4:	080173f5 	.word	0x080173f5
 80173a8:	08017345 	.word	0x08017345
 80173ac:	08017345 	.word	0x08017345
 80173b0:	0801748f 	.word	0x0801748f
 80173b4:	682b      	ldr	r3, [r5, #0]
 80173b6:	1d1a      	adds	r2, r3, #4
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	602a      	str	r2, [r5, #0]
 80173bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80173c4:	2301      	movs	r3, #1
 80173c6:	e09f      	b.n	8017508 <_printf_i+0x1ec>
 80173c8:	6820      	ldr	r0, [r4, #0]
 80173ca:	682b      	ldr	r3, [r5, #0]
 80173cc:	0607      	lsls	r7, r0, #24
 80173ce:	f103 0104 	add.w	r1, r3, #4
 80173d2:	6029      	str	r1, [r5, #0]
 80173d4:	d501      	bpl.n	80173da <_printf_i+0xbe>
 80173d6:	681e      	ldr	r6, [r3, #0]
 80173d8:	e003      	b.n	80173e2 <_printf_i+0xc6>
 80173da:	0646      	lsls	r6, r0, #25
 80173dc:	d5fb      	bpl.n	80173d6 <_printf_i+0xba>
 80173de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80173e2:	2e00      	cmp	r6, #0
 80173e4:	da03      	bge.n	80173ee <_printf_i+0xd2>
 80173e6:	232d      	movs	r3, #45	; 0x2d
 80173e8:	4276      	negs	r6, r6
 80173ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80173ee:	485a      	ldr	r0, [pc, #360]	; (8017558 <_printf_i+0x23c>)
 80173f0:	230a      	movs	r3, #10
 80173f2:	e012      	b.n	801741a <_printf_i+0xfe>
 80173f4:	682b      	ldr	r3, [r5, #0]
 80173f6:	6820      	ldr	r0, [r4, #0]
 80173f8:	1d19      	adds	r1, r3, #4
 80173fa:	6029      	str	r1, [r5, #0]
 80173fc:	0605      	lsls	r5, r0, #24
 80173fe:	d501      	bpl.n	8017404 <_printf_i+0xe8>
 8017400:	681e      	ldr	r6, [r3, #0]
 8017402:	e002      	b.n	801740a <_printf_i+0xee>
 8017404:	0641      	lsls	r1, r0, #25
 8017406:	d5fb      	bpl.n	8017400 <_printf_i+0xe4>
 8017408:	881e      	ldrh	r6, [r3, #0]
 801740a:	4853      	ldr	r0, [pc, #332]	; (8017558 <_printf_i+0x23c>)
 801740c:	2f6f      	cmp	r7, #111	; 0x6f
 801740e:	bf0c      	ite	eq
 8017410:	2308      	moveq	r3, #8
 8017412:	230a      	movne	r3, #10
 8017414:	2100      	movs	r1, #0
 8017416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801741a:	6865      	ldr	r5, [r4, #4]
 801741c:	60a5      	str	r5, [r4, #8]
 801741e:	2d00      	cmp	r5, #0
 8017420:	bfa2      	ittt	ge
 8017422:	6821      	ldrge	r1, [r4, #0]
 8017424:	f021 0104 	bicge.w	r1, r1, #4
 8017428:	6021      	strge	r1, [r4, #0]
 801742a:	b90e      	cbnz	r6, 8017430 <_printf_i+0x114>
 801742c:	2d00      	cmp	r5, #0
 801742e:	d04b      	beq.n	80174c8 <_printf_i+0x1ac>
 8017430:	4615      	mov	r5, r2
 8017432:	fbb6 f1f3 	udiv	r1, r6, r3
 8017436:	fb03 6711 	mls	r7, r3, r1, r6
 801743a:	5dc7      	ldrb	r7, [r0, r7]
 801743c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017440:	4637      	mov	r7, r6
 8017442:	42bb      	cmp	r3, r7
 8017444:	460e      	mov	r6, r1
 8017446:	d9f4      	bls.n	8017432 <_printf_i+0x116>
 8017448:	2b08      	cmp	r3, #8
 801744a:	d10b      	bne.n	8017464 <_printf_i+0x148>
 801744c:	6823      	ldr	r3, [r4, #0]
 801744e:	07de      	lsls	r6, r3, #31
 8017450:	d508      	bpl.n	8017464 <_printf_i+0x148>
 8017452:	6923      	ldr	r3, [r4, #16]
 8017454:	6861      	ldr	r1, [r4, #4]
 8017456:	4299      	cmp	r1, r3
 8017458:	bfde      	ittt	le
 801745a:	2330      	movle	r3, #48	; 0x30
 801745c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017460:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017464:	1b52      	subs	r2, r2, r5
 8017466:	6122      	str	r2, [r4, #16]
 8017468:	f8cd a000 	str.w	sl, [sp]
 801746c:	464b      	mov	r3, r9
 801746e:	aa03      	add	r2, sp, #12
 8017470:	4621      	mov	r1, r4
 8017472:	4640      	mov	r0, r8
 8017474:	f7ff fee4 	bl	8017240 <_printf_common>
 8017478:	3001      	adds	r0, #1
 801747a:	d14a      	bne.n	8017512 <_printf_i+0x1f6>
 801747c:	f04f 30ff 	mov.w	r0, #4294967295
 8017480:	b004      	add	sp, #16
 8017482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017486:	6823      	ldr	r3, [r4, #0]
 8017488:	f043 0320 	orr.w	r3, r3, #32
 801748c:	6023      	str	r3, [r4, #0]
 801748e:	4833      	ldr	r0, [pc, #204]	; (801755c <_printf_i+0x240>)
 8017490:	2778      	movs	r7, #120	; 0x78
 8017492:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017496:	6823      	ldr	r3, [r4, #0]
 8017498:	6829      	ldr	r1, [r5, #0]
 801749a:	061f      	lsls	r7, r3, #24
 801749c:	f851 6b04 	ldr.w	r6, [r1], #4
 80174a0:	d402      	bmi.n	80174a8 <_printf_i+0x18c>
 80174a2:	065f      	lsls	r7, r3, #25
 80174a4:	bf48      	it	mi
 80174a6:	b2b6      	uxthmi	r6, r6
 80174a8:	07df      	lsls	r7, r3, #31
 80174aa:	bf48      	it	mi
 80174ac:	f043 0320 	orrmi.w	r3, r3, #32
 80174b0:	6029      	str	r1, [r5, #0]
 80174b2:	bf48      	it	mi
 80174b4:	6023      	strmi	r3, [r4, #0]
 80174b6:	b91e      	cbnz	r6, 80174c0 <_printf_i+0x1a4>
 80174b8:	6823      	ldr	r3, [r4, #0]
 80174ba:	f023 0320 	bic.w	r3, r3, #32
 80174be:	6023      	str	r3, [r4, #0]
 80174c0:	2310      	movs	r3, #16
 80174c2:	e7a7      	b.n	8017414 <_printf_i+0xf8>
 80174c4:	4824      	ldr	r0, [pc, #144]	; (8017558 <_printf_i+0x23c>)
 80174c6:	e7e4      	b.n	8017492 <_printf_i+0x176>
 80174c8:	4615      	mov	r5, r2
 80174ca:	e7bd      	b.n	8017448 <_printf_i+0x12c>
 80174cc:	682b      	ldr	r3, [r5, #0]
 80174ce:	6826      	ldr	r6, [r4, #0]
 80174d0:	6961      	ldr	r1, [r4, #20]
 80174d2:	1d18      	adds	r0, r3, #4
 80174d4:	6028      	str	r0, [r5, #0]
 80174d6:	0635      	lsls	r5, r6, #24
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	d501      	bpl.n	80174e0 <_printf_i+0x1c4>
 80174dc:	6019      	str	r1, [r3, #0]
 80174de:	e002      	b.n	80174e6 <_printf_i+0x1ca>
 80174e0:	0670      	lsls	r0, r6, #25
 80174e2:	d5fb      	bpl.n	80174dc <_printf_i+0x1c0>
 80174e4:	8019      	strh	r1, [r3, #0]
 80174e6:	2300      	movs	r3, #0
 80174e8:	6123      	str	r3, [r4, #16]
 80174ea:	4615      	mov	r5, r2
 80174ec:	e7bc      	b.n	8017468 <_printf_i+0x14c>
 80174ee:	682b      	ldr	r3, [r5, #0]
 80174f0:	1d1a      	adds	r2, r3, #4
 80174f2:	602a      	str	r2, [r5, #0]
 80174f4:	681d      	ldr	r5, [r3, #0]
 80174f6:	6862      	ldr	r2, [r4, #4]
 80174f8:	2100      	movs	r1, #0
 80174fa:	4628      	mov	r0, r5
 80174fc:	f7e8 fe40 	bl	8000180 <memchr>
 8017500:	b108      	cbz	r0, 8017506 <_printf_i+0x1ea>
 8017502:	1b40      	subs	r0, r0, r5
 8017504:	6060      	str	r0, [r4, #4]
 8017506:	6863      	ldr	r3, [r4, #4]
 8017508:	6123      	str	r3, [r4, #16]
 801750a:	2300      	movs	r3, #0
 801750c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017510:	e7aa      	b.n	8017468 <_printf_i+0x14c>
 8017512:	6923      	ldr	r3, [r4, #16]
 8017514:	462a      	mov	r2, r5
 8017516:	4649      	mov	r1, r9
 8017518:	4640      	mov	r0, r8
 801751a:	47d0      	blx	sl
 801751c:	3001      	adds	r0, #1
 801751e:	d0ad      	beq.n	801747c <_printf_i+0x160>
 8017520:	6823      	ldr	r3, [r4, #0]
 8017522:	079b      	lsls	r3, r3, #30
 8017524:	d413      	bmi.n	801754e <_printf_i+0x232>
 8017526:	68e0      	ldr	r0, [r4, #12]
 8017528:	9b03      	ldr	r3, [sp, #12]
 801752a:	4298      	cmp	r0, r3
 801752c:	bfb8      	it	lt
 801752e:	4618      	movlt	r0, r3
 8017530:	e7a6      	b.n	8017480 <_printf_i+0x164>
 8017532:	2301      	movs	r3, #1
 8017534:	4632      	mov	r2, r6
 8017536:	4649      	mov	r1, r9
 8017538:	4640      	mov	r0, r8
 801753a:	47d0      	blx	sl
 801753c:	3001      	adds	r0, #1
 801753e:	d09d      	beq.n	801747c <_printf_i+0x160>
 8017540:	3501      	adds	r5, #1
 8017542:	68e3      	ldr	r3, [r4, #12]
 8017544:	9903      	ldr	r1, [sp, #12]
 8017546:	1a5b      	subs	r3, r3, r1
 8017548:	42ab      	cmp	r3, r5
 801754a:	dcf2      	bgt.n	8017532 <_printf_i+0x216>
 801754c:	e7eb      	b.n	8017526 <_printf_i+0x20a>
 801754e:	2500      	movs	r5, #0
 8017550:	f104 0619 	add.w	r6, r4, #25
 8017554:	e7f5      	b.n	8017542 <_printf_i+0x226>
 8017556:	bf00      	nop
 8017558:	0802f89e 	.word	0x0802f89e
 801755c:	0802f8af 	.word	0x0802f8af

08017560 <std>:
 8017560:	2300      	movs	r3, #0
 8017562:	b510      	push	{r4, lr}
 8017564:	4604      	mov	r4, r0
 8017566:	e9c0 3300 	strd	r3, r3, [r0]
 801756a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801756e:	6083      	str	r3, [r0, #8]
 8017570:	8181      	strh	r1, [r0, #12]
 8017572:	6643      	str	r3, [r0, #100]	; 0x64
 8017574:	81c2      	strh	r2, [r0, #14]
 8017576:	6183      	str	r3, [r0, #24]
 8017578:	4619      	mov	r1, r3
 801757a:	2208      	movs	r2, #8
 801757c:	305c      	adds	r0, #92	; 0x5c
 801757e:	f000 f9ff 	bl	8017980 <memset>
 8017582:	4b0d      	ldr	r3, [pc, #52]	; (80175b8 <std+0x58>)
 8017584:	6263      	str	r3, [r4, #36]	; 0x24
 8017586:	4b0d      	ldr	r3, [pc, #52]	; (80175bc <std+0x5c>)
 8017588:	62a3      	str	r3, [r4, #40]	; 0x28
 801758a:	4b0d      	ldr	r3, [pc, #52]	; (80175c0 <std+0x60>)
 801758c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801758e:	4b0d      	ldr	r3, [pc, #52]	; (80175c4 <std+0x64>)
 8017590:	6323      	str	r3, [r4, #48]	; 0x30
 8017592:	4b0d      	ldr	r3, [pc, #52]	; (80175c8 <std+0x68>)
 8017594:	6224      	str	r4, [r4, #32]
 8017596:	429c      	cmp	r4, r3
 8017598:	d006      	beq.n	80175a8 <std+0x48>
 801759a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801759e:	4294      	cmp	r4, r2
 80175a0:	d002      	beq.n	80175a8 <std+0x48>
 80175a2:	33d0      	adds	r3, #208	; 0xd0
 80175a4:	429c      	cmp	r4, r3
 80175a6:	d105      	bne.n	80175b4 <std+0x54>
 80175a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80175ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175b0:	f000 ba62 	b.w	8017a78 <__retarget_lock_init_recursive>
 80175b4:	bd10      	pop	{r4, pc}
 80175b6:	bf00      	nop
 80175b8:	080177d1 	.word	0x080177d1
 80175bc:	080177f3 	.word	0x080177f3
 80175c0:	0801782b 	.word	0x0801782b
 80175c4:	0801784f 	.word	0x0801784f
 80175c8:	20003db0 	.word	0x20003db0

080175cc <stdio_exit_handler>:
 80175cc:	4a02      	ldr	r2, [pc, #8]	; (80175d8 <stdio_exit_handler+0xc>)
 80175ce:	4903      	ldr	r1, [pc, #12]	; (80175dc <stdio_exit_handler+0x10>)
 80175d0:	4803      	ldr	r0, [pc, #12]	; (80175e0 <stdio_exit_handler+0x14>)
 80175d2:	f000 b869 	b.w	80176a8 <_fwalk_sglue>
 80175d6:	bf00      	nop
 80175d8:	2000017c 	.word	0x2000017c
 80175dc:	08019421 	.word	0x08019421
 80175e0:	20000188 	.word	0x20000188

080175e4 <cleanup_stdio>:
 80175e4:	6841      	ldr	r1, [r0, #4]
 80175e6:	4b0c      	ldr	r3, [pc, #48]	; (8017618 <cleanup_stdio+0x34>)
 80175e8:	4299      	cmp	r1, r3
 80175ea:	b510      	push	{r4, lr}
 80175ec:	4604      	mov	r4, r0
 80175ee:	d001      	beq.n	80175f4 <cleanup_stdio+0x10>
 80175f0:	f001 ff16 	bl	8019420 <_fflush_r>
 80175f4:	68a1      	ldr	r1, [r4, #8]
 80175f6:	4b09      	ldr	r3, [pc, #36]	; (801761c <cleanup_stdio+0x38>)
 80175f8:	4299      	cmp	r1, r3
 80175fa:	d002      	beq.n	8017602 <cleanup_stdio+0x1e>
 80175fc:	4620      	mov	r0, r4
 80175fe:	f001 ff0f 	bl	8019420 <_fflush_r>
 8017602:	68e1      	ldr	r1, [r4, #12]
 8017604:	4b06      	ldr	r3, [pc, #24]	; (8017620 <cleanup_stdio+0x3c>)
 8017606:	4299      	cmp	r1, r3
 8017608:	d004      	beq.n	8017614 <cleanup_stdio+0x30>
 801760a:	4620      	mov	r0, r4
 801760c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017610:	f001 bf06 	b.w	8019420 <_fflush_r>
 8017614:	bd10      	pop	{r4, pc}
 8017616:	bf00      	nop
 8017618:	20003db0 	.word	0x20003db0
 801761c:	20003e18 	.word	0x20003e18
 8017620:	20003e80 	.word	0x20003e80

08017624 <global_stdio_init.part.0>:
 8017624:	b510      	push	{r4, lr}
 8017626:	4b0b      	ldr	r3, [pc, #44]	; (8017654 <global_stdio_init.part.0+0x30>)
 8017628:	4c0b      	ldr	r4, [pc, #44]	; (8017658 <global_stdio_init.part.0+0x34>)
 801762a:	4a0c      	ldr	r2, [pc, #48]	; (801765c <global_stdio_init.part.0+0x38>)
 801762c:	601a      	str	r2, [r3, #0]
 801762e:	4620      	mov	r0, r4
 8017630:	2200      	movs	r2, #0
 8017632:	2104      	movs	r1, #4
 8017634:	f7ff ff94 	bl	8017560 <std>
 8017638:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801763c:	2201      	movs	r2, #1
 801763e:	2109      	movs	r1, #9
 8017640:	f7ff ff8e 	bl	8017560 <std>
 8017644:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017648:	2202      	movs	r2, #2
 801764a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801764e:	2112      	movs	r1, #18
 8017650:	f7ff bf86 	b.w	8017560 <std>
 8017654:	20003ee8 	.word	0x20003ee8
 8017658:	20003db0 	.word	0x20003db0
 801765c:	080175cd 	.word	0x080175cd

08017660 <__sfp_lock_acquire>:
 8017660:	4801      	ldr	r0, [pc, #4]	; (8017668 <__sfp_lock_acquire+0x8>)
 8017662:	f000 ba0a 	b.w	8017a7a <__retarget_lock_acquire_recursive>
 8017666:	bf00      	nop
 8017668:	20003ef1 	.word	0x20003ef1

0801766c <__sfp_lock_release>:
 801766c:	4801      	ldr	r0, [pc, #4]	; (8017674 <__sfp_lock_release+0x8>)
 801766e:	f000 ba05 	b.w	8017a7c <__retarget_lock_release_recursive>
 8017672:	bf00      	nop
 8017674:	20003ef1 	.word	0x20003ef1

08017678 <__sinit>:
 8017678:	b510      	push	{r4, lr}
 801767a:	4604      	mov	r4, r0
 801767c:	f7ff fff0 	bl	8017660 <__sfp_lock_acquire>
 8017680:	6a23      	ldr	r3, [r4, #32]
 8017682:	b11b      	cbz	r3, 801768c <__sinit+0x14>
 8017684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017688:	f7ff bff0 	b.w	801766c <__sfp_lock_release>
 801768c:	4b04      	ldr	r3, [pc, #16]	; (80176a0 <__sinit+0x28>)
 801768e:	6223      	str	r3, [r4, #32]
 8017690:	4b04      	ldr	r3, [pc, #16]	; (80176a4 <__sinit+0x2c>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d1f5      	bne.n	8017684 <__sinit+0xc>
 8017698:	f7ff ffc4 	bl	8017624 <global_stdio_init.part.0>
 801769c:	e7f2      	b.n	8017684 <__sinit+0xc>
 801769e:	bf00      	nop
 80176a0:	080175e5 	.word	0x080175e5
 80176a4:	20003ee8 	.word	0x20003ee8

080176a8 <_fwalk_sglue>:
 80176a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176ac:	4607      	mov	r7, r0
 80176ae:	4688      	mov	r8, r1
 80176b0:	4614      	mov	r4, r2
 80176b2:	2600      	movs	r6, #0
 80176b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80176b8:	f1b9 0901 	subs.w	r9, r9, #1
 80176bc:	d505      	bpl.n	80176ca <_fwalk_sglue+0x22>
 80176be:	6824      	ldr	r4, [r4, #0]
 80176c0:	2c00      	cmp	r4, #0
 80176c2:	d1f7      	bne.n	80176b4 <_fwalk_sglue+0xc>
 80176c4:	4630      	mov	r0, r6
 80176c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176ca:	89ab      	ldrh	r3, [r5, #12]
 80176cc:	2b01      	cmp	r3, #1
 80176ce:	d907      	bls.n	80176e0 <_fwalk_sglue+0x38>
 80176d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80176d4:	3301      	adds	r3, #1
 80176d6:	d003      	beq.n	80176e0 <_fwalk_sglue+0x38>
 80176d8:	4629      	mov	r1, r5
 80176da:	4638      	mov	r0, r7
 80176dc:	47c0      	blx	r8
 80176de:	4306      	orrs	r6, r0
 80176e0:	3568      	adds	r5, #104	; 0x68
 80176e2:	e7e9      	b.n	80176b8 <_fwalk_sglue+0x10>

080176e4 <iprintf>:
 80176e4:	b40f      	push	{r0, r1, r2, r3}
 80176e6:	b507      	push	{r0, r1, r2, lr}
 80176e8:	4906      	ldr	r1, [pc, #24]	; (8017704 <iprintf+0x20>)
 80176ea:	ab04      	add	r3, sp, #16
 80176ec:	6808      	ldr	r0, [r1, #0]
 80176ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80176f2:	6881      	ldr	r1, [r0, #8]
 80176f4:	9301      	str	r3, [sp, #4]
 80176f6:	f001 fcf3 	bl	80190e0 <_vfiprintf_r>
 80176fa:	b003      	add	sp, #12
 80176fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017700:	b004      	add	sp, #16
 8017702:	4770      	bx	lr
 8017704:	200001d4 	.word	0x200001d4

08017708 <putchar>:
 8017708:	4b02      	ldr	r3, [pc, #8]	; (8017714 <putchar+0xc>)
 801770a:	4601      	mov	r1, r0
 801770c:	6818      	ldr	r0, [r3, #0]
 801770e:	6882      	ldr	r2, [r0, #8]
 8017710:	f001 bf10 	b.w	8019534 <_putc_r>
 8017714:	200001d4 	.word	0x200001d4

08017718 <_puts_r>:
 8017718:	6a03      	ldr	r3, [r0, #32]
 801771a:	b570      	push	{r4, r5, r6, lr}
 801771c:	6884      	ldr	r4, [r0, #8]
 801771e:	4605      	mov	r5, r0
 8017720:	460e      	mov	r6, r1
 8017722:	b90b      	cbnz	r3, 8017728 <_puts_r+0x10>
 8017724:	f7ff ffa8 	bl	8017678 <__sinit>
 8017728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801772a:	07db      	lsls	r3, r3, #31
 801772c:	d405      	bmi.n	801773a <_puts_r+0x22>
 801772e:	89a3      	ldrh	r3, [r4, #12]
 8017730:	0598      	lsls	r0, r3, #22
 8017732:	d402      	bmi.n	801773a <_puts_r+0x22>
 8017734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017736:	f000 f9a0 	bl	8017a7a <__retarget_lock_acquire_recursive>
 801773a:	89a3      	ldrh	r3, [r4, #12]
 801773c:	0719      	lsls	r1, r3, #28
 801773e:	d513      	bpl.n	8017768 <_puts_r+0x50>
 8017740:	6923      	ldr	r3, [r4, #16]
 8017742:	b18b      	cbz	r3, 8017768 <_puts_r+0x50>
 8017744:	3e01      	subs	r6, #1
 8017746:	68a3      	ldr	r3, [r4, #8]
 8017748:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801774c:	3b01      	subs	r3, #1
 801774e:	60a3      	str	r3, [r4, #8]
 8017750:	b9e9      	cbnz	r1, 801778e <_puts_r+0x76>
 8017752:	2b00      	cmp	r3, #0
 8017754:	da2e      	bge.n	80177b4 <_puts_r+0x9c>
 8017756:	4622      	mov	r2, r4
 8017758:	210a      	movs	r1, #10
 801775a:	4628      	mov	r0, r5
 801775c:	f000 f87b 	bl	8017856 <__swbuf_r>
 8017760:	3001      	adds	r0, #1
 8017762:	d007      	beq.n	8017774 <_puts_r+0x5c>
 8017764:	250a      	movs	r5, #10
 8017766:	e007      	b.n	8017778 <_puts_r+0x60>
 8017768:	4621      	mov	r1, r4
 801776a:	4628      	mov	r0, r5
 801776c:	f000 f8b0 	bl	80178d0 <__swsetup_r>
 8017770:	2800      	cmp	r0, #0
 8017772:	d0e7      	beq.n	8017744 <_puts_r+0x2c>
 8017774:	f04f 35ff 	mov.w	r5, #4294967295
 8017778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801777a:	07da      	lsls	r2, r3, #31
 801777c:	d405      	bmi.n	801778a <_puts_r+0x72>
 801777e:	89a3      	ldrh	r3, [r4, #12]
 8017780:	059b      	lsls	r3, r3, #22
 8017782:	d402      	bmi.n	801778a <_puts_r+0x72>
 8017784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017786:	f000 f979 	bl	8017a7c <__retarget_lock_release_recursive>
 801778a:	4628      	mov	r0, r5
 801778c:	bd70      	pop	{r4, r5, r6, pc}
 801778e:	2b00      	cmp	r3, #0
 8017790:	da04      	bge.n	801779c <_puts_r+0x84>
 8017792:	69a2      	ldr	r2, [r4, #24]
 8017794:	429a      	cmp	r2, r3
 8017796:	dc06      	bgt.n	80177a6 <_puts_r+0x8e>
 8017798:	290a      	cmp	r1, #10
 801779a:	d004      	beq.n	80177a6 <_puts_r+0x8e>
 801779c:	6823      	ldr	r3, [r4, #0]
 801779e:	1c5a      	adds	r2, r3, #1
 80177a0:	6022      	str	r2, [r4, #0]
 80177a2:	7019      	strb	r1, [r3, #0]
 80177a4:	e7cf      	b.n	8017746 <_puts_r+0x2e>
 80177a6:	4622      	mov	r2, r4
 80177a8:	4628      	mov	r0, r5
 80177aa:	f000 f854 	bl	8017856 <__swbuf_r>
 80177ae:	3001      	adds	r0, #1
 80177b0:	d1c9      	bne.n	8017746 <_puts_r+0x2e>
 80177b2:	e7df      	b.n	8017774 <_puts_r+0x5c>
 80177b4:	6823      	ldr	r3, [r4, #0]
 80177b6:	250a      	movs	r5, #10
 80177b8:	1c5a      	adds	r2, r3, #1
 80177ba:	6022      	str	r2, [r4, #0]
 80177bc:	701d      	strb	r5, [r3, #0]
 80177be:	e7db      	b.n	8017778 <_puts_r+0x60>

080177c0 <puts>:
 80177c0:	4b02      	ldr	r3, [pc, #8]	; (80177cc <puts+0xc>)
 80177c2:	4601      	mov	r1, r0
 80177c4:	6818      	ldr	r0, [r3, #0]
 80177c6:	f7ff bfa7 	b.w	8017718 <_puts_r>
 80177ca:	bf00      	nop
 80177cc:	200001d4 	.word	0x200001d4

080177d0 <__sread>:
 80177d0:	b510      	push	{r4, lr}
 80177d2:	460c      	mov	r4, r1
 80177d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177d8:	f000 f900 	bl	80179dc <_read_r>
 80177dc:	2800      	cmp	r0, #0
 80177de:	bfab      	itete	ge
 80177e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80177e2:	89a3      	ldrhlt	r3, [r4, #12]
 80177e4:	181b      	addge	r3, r3, r0
 80177e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80177ea:	bfac      	ite	ge
 80177ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80177ee:	81a3      	strhlt	r3, [r4, #12]
 80177f0:	bd10      	pop	{r4, pc}

080177f2 <__swrite>:
 80177f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177f6:	461f      	mov	r7, r3
 80177f8:	898b      	ldrh	r3, [r1, #12]
 80177fa:	05db      	lsls	r3, r3, #23
 80177fc:	4605      	mov	r5, r0
 80177fe:	460c      	mov	r4, r1
 8017800:	4616      	mov	r6, r2
 8017802:	d505      	bpl.n	8017810 <__swrite+0x1e>
 8017804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017808:	2302      	movs	r3, #2
 801780a:	2200      	movs	r2, #0
 801780c:	f000 f8d4 	bl	80179b8 <_lseek_r>
 8017810:	89a3      	ldrh	r3, [r4, #12]
 8017812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801781a:	81a3      	strh	r3, [r4, #12]
 801781c:	4632      	mov	r2, r6
 801781e:	463b      	mov	r3, r7
 8017820:	4628      	mov	r0, r5
 8017822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017826:	f000 b8eb 	b.w	8017a00 <_write_r>

0801782a <__sseek>:
 801782a:	b510      	push	{r4, lr}
 801782c:	460c      	mov	r4, r1
 801782e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017832:	f000 f8c1 	bl	80179b8 <_lseek_r>
 8017836:	1c43      	adds	r3, r0, #1
 8017838:	89a3      	ldrh	r3, [r4, #12]
 801783a:	bf15      	itete	ne
 801783c:	6560      	strne	r0, [r4, #84]	; 0x54
 801783e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017846:	81a3      	strheq	r3, [r4, #12]
 8017848:	bf18      	it	ne
 801784a:	81a3      	strhne	r3, [r4, #12]
 801784c:	bd10      	pop	{r4, pc}

0801784e <__sclose>:
 801784e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017852:	f000 b8a1 	b.w	8017998 <_close_r>

08017856 <__swbuf_r>:
 8017856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017858:	460e      	mov	r6, r1
 801785a:	4614      	mov	r4, r2
 801785c:	4605      	mov	r5, r0
 801785e:	b118      	cbz	r0, 8017868 <__swbuf_r+0x12>
 8017860:	6a03      	ldr	r3, [r0, #32]
 8017862:	b90b      	cbnz	r3, 8017868 <__swbuf_r+0x12>
 8017864:	f7ff ff08 	bl	8017678 <__sinit>
 8017868:	69a3      	ldr	r3, [r4, #24]
 801786a:	60a3      	str	r3, [r4, #8]
 801786c:	89a3      	ldrh	r3, [r4, #12]
 801786e:	071a      	lsls	r2, r3, #28
 8017870:	d525      	bpl.n	80178be <__swbuf_r+0x68>
 8017872:	6923      	ldr	r3, [r4, #16]
 8017874:	b31b      	cbz	r3, 80178be <__swbuf_r+0x68>
 8017876:	6823      	ldr	r3, [r4, #0]
 8017878:	6922      	ldr	r2, [r4, #16]
 801787a:	1a98      	subs	r0, r3, r2
 801787c:	6963      	ldr	r3, [r4, #20]
 801787e:	b2f6      	uxtb	r6, r6
 8017880:	4283      	cmp	r3, r0
 8017882:	4637      	mov	r7, r6
 8017884:	dc04      	bgt.n	8017890 <__swbuf_r+0x3a>
 8017886:	4621      	mov	r1, r4
 8017888:	4628      	mov	r0, r5
 801788a:	f001 fdc9 	bl	8019420 <_fflush_r>
 801788e:	b9e0      	cbnz	r0, 80178ca <__swbuf_r+0x74>
 8017890:	68a3      	ldr	r3, [r4, #8]
 8017892:	3b01      	subs	r3, #1
 8017894:	60a3      	str	r3, [r4, #8]
 8017896:	6823      	ldr	r3, [r4, #0]
 8017898:	1c5a      	adds	r2, r3, #1
 801789a:	6022      	str	r2, [r4, #0]
 801789c:	701e      	strb	r6, [r3, #0]
 801789e:	6962      	ldr	r2, [r4, #20]
 80178a0:	1c43      	adds	r3, r0, #1
 80178a2:	429a      	cmp	r2, r3
 80178a4:	d004      	beq.n	80178b0 <__swbuf_r+0x5a>
 80178a6:	89a3      	ldrh	r3, [r4, #12]
 80178a8:	07db      	lsls	r3, r3, #31
 80178aa:	d506      	bpl.n	80178ba <__swbuf_r+0x64>
 80178ac:	2e0a      	cmp	r6, #10
 80178ae:	d104      	bne.n	80178ba <__swbuf_r+0x64>
 80178b0:	4621      	mov	r1, r4
 80178b2:	4628      	mov	r0, r5
 80178b4:	f001 fdb4 	bl	8019420 <_fflush_r>
 80178b8:	b938      	cbnz	r0, 80178ca <__swbuf_r+0x74>
 80178ba:	4638      	mov	r0, r7
 80178bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178be:	4621      	mov	r1, r4
 80178c0:	4628      	mov	r0, r5
 80178c2:	f000 f805 	bl	80178d0 <__swsetup_r>
 80178c6:	2800      	cmp	r0, #0
 80178c8:	d0d5      	beq.n	8017876 <__swbuf_r+0x20>
 80178ca:	f04f 37ff 	mov.w	r7, #4294967295
 80178ce:	e7f4      	b.n	80178ba <__swbuf_r+0x64>

080178d0 <__swsetup_r>:
 80178d0:	b538      	push	{r3, r4, r5, lr}
 80178d2:	4b2a      	ldr	r3, [pc, #168]	; (801797c <__swsetup_r+0xac>)
 80178d4:	4605      	mov	r5, r0
 80178d6:	6818      	ldr	r0, [r3, #0]
 80178d8:	460c      	mov	r4, r1
 80178da:	b118      	cbz	r0, 80178e4 <__swsetup_r+0x14>
 80178dc:	6a03      	ldr	r3, [r0, #32]
 80178de:	b90b      	cbnz	r3, 80178e4 <__swsetup_r+0x14>
 80178e0:	f7ff feca 	bl	8017678 <__sinit>
 80178e4:	89a3      	ldrh	r3, [r4, #12]
 80178e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80178ea:	0718      	lsls	r0, r3, #28
 80178ec:	d422      	bmi.n	8017934 <__swsetup_r+0x64>
 80178ee:	06d9      	lsls	r1, r3, #27
 80178f0:	d407      	bmi.n	8017902 <__swsetup_r+0x32>
 80178f2:	2309      	movs	r3, #9
 80178f4:	602b      	str	r3, [r5, #0]
 80178f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80178fa:	81a3      	strh	r3, [r4, #12]
 80178fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017900:	e034      	b.n	801796c <__swsetup_r+0x9c>
 8017902:	0758      	lsls	r0, r3, #29
 8017904:	d512      	bpl.n	801792c <__swsetup_r+0x5c>
 8017906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017908:	b141      	cbz	r1, 801791c <__swsetup_r+0x4c>
 801790a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801790e:	4299      	cmp	r1, r3
 8017910:	d002      	beq.n	8017918 <__swsetup_r+0x48>
 8017912:	4628      	mov	r0, r5
 8017914:	f000 ff3e 	bl	8018794 <_free_r>
 8017918:	2300      	movs	r3, #0
 801791a:	6363      	str	r3, [r4, #52]	; 0x34
 801791c:	89a3      	ldrh	r3, [r4, #12]
 801791e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017922:	81a3      	strh	r3, [r4, #12]
 8017924:	2300      	movs	r3, #0
 8017926:	6063      	str	r3, [r4, #4]
 8017928:	6923      	ldr	r3, [r4, #16]
 801792a:	6023      	str	r3, [r4, #0]
 801792c:	89a3      	ldrh	r3, [r4, #12]
 801792e:	f043 0308 	orr.w	r3, r3, #8
 8017932:	81a3      	strh	r3, [r4, #12]
 8017934:	6923      	ldr	r3, [r4, #16]
 8017936:	b94b      	cbnz	r3, 801794c <__swsetup_r+0x7c>
 8017938:	89a3      	ldrh	r3, [r4, #12]
 801793a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801793e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017942:	d003      	beq.n	801794c <__swsetup_r+0x7c>
 8017944:	4621      	mov	r1, r4
 8017946:	4628      	mov	r0, r5
 8017948:	f001 fdb8 	bl	80194bc <__smakebuf_r>
 801794c:	89a0      	ldrh	r0, [r4, #12]
 801794e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017952:	f010 0301 	ands.w	r3, r0, #1
 8017956:	d00a      	beq.n	801796e <__swsetup_r+0x9e>
 8017958:	2300      	movs	r3, #0
 801795a:	60a3      	str	r3, [r4, #8]
 801795c:	6963      	ldr	r3, [r4, #20]
 801795e:	425b      	negs	r3, r3
 8017960:	61a3      	str	r3, [r4, #24]
 8017962:	6923      	ldr	r3, [r4, #16]
 8017964:	b943      	cbnz	r3, 8017978 <__swsetup_r+0xa8>
 8017966:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801796a:	d1c4      	bne.n	80178f6 <__swsetup_r+0x26>
 801796c:	bd38      	pop	{r3, r4, r5, pc}
 801796e:	0781      	lsls	r1, r0, #30
 8017970:	bf58      	it	pl
 8017972:	6963      	ldrpl	r3, [r4, #20]
 8017974:	60a3      	str	r3, [r4, #8]
 8017976:	e7f4      	b.n	8017962 <__swsetup_r+0x92>
 8017978:	2000      	movs	r0, #0
 801797a:	e7f7      	b.n	801796c <__swsetup_r+0x9c>
 801797c:	200001d4 	.word	0x200001d4

08017980 <memset>:
 8017980:	4402      	add	r2, r0
 8017982:	4603      	mov	r3, r0
 8017984:	4293      	cmp	r3, r2
 8017986:	d100      	bne.n	801798a <memset+0xa>
 8017988:	4770      	bx	lr
 801798a:	f803 1b01 	strb.w	r1, [r3], #1
 801798e:	e7f9      	b.n	8017984 <memset+0x4>

08017990 <_localeconv_r>:
 8017990:	4800      	ldr	r0, [pc, #0]	; (8017994 <_localeconv_r+0x4>)
 8017992:	4770      	bx	lr
 8017994:	200002c8 	.word	0x200002c8

08017998 <_close_r>:
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4d06      	ldr	r5, [pc, #24]	; (80179b4 <_close_r+0x1c>)
 801799c:	2300      	movs	r3, #0
 801799e:	4604      	mov	r4, r0
 80179a0:	4608      	mov	r0, r1
 80179a2:	602b      	str	r3, [r5, #0]
 80179a4:	f7ec ffd5 	bl	8004952 <_close>
 80179a8:	1c43      	adds	r3, r0, #1
 80179aa:	d102      	bne.n	80179b2 <_close_r+0x1a>
 80179ac:	682b      	ldr	r3, [r5, #0]
 80179ae:	b103      	cbz	r3, 80179b2 <_close_r+0x1a>
 80179b0:	6023      	str	r3, [r4, #0]
 80179b2:	bd38      	pop	{r3, r4, r5, pc}
 80179b4:	20003eec 	.word	0x20003eec

080179b8 <_lseek_r>:
 80179b8:	b538      	push	{r3, r4, r5, lr}
 80179ba:	4d07      	ldr	r5, [pc, #28]	; (80179d8 <_lseek_r+0x20>)
 80179bc:	4604      	mov	r4, r0
 80179be:	4608      	mov	r0, r1
 80179c0:	4611      	mov	r1, r2
 80179c2:	2200      	movs	r2, #0
 80179c4:	602a      	str	r2, [r5, #0]
 80179c6:	461a      	mov	r2, r3
 80179c8:	f7ec ffea 	bl	80049a0 <_lseek>
 80179cc:	1c43      	adds	r3, r0, #1
 80179ce:	d102      	bne.n	80179d6 <_lseek_r+0x1e>
 80179d0:	682b      	ldr	r3, [r5, #0]
 80179d2:	b103      	cbz	r3, 80179d6 <_lseek_r+0x1e>
 80179d4:	6023      	str	r3, [r4, #0]
 80179d6:	bd38      	pop	{r3, r4, r5, pc}
 80179d8:	20003eec 	.word	0x20003eec

080179dc <_read_r>:
 80179dc:	b538      	push	{r3, r4, r5, lr}
 80179de:	4d07      	ldr	r5, [pc, #28]	; (80179fc <_read_r+0x20>)
 80179e0:	4604      	mov	r4, r0
 80179e2:	4608      	mov	r0, r1
 80179e4:	4611      	mov	r1, r2
 80179e6:	2200      	movs	r2, #0
 80179e8:	602a      	str	r2, [r5, #0]
 80179ea:	461a      	mov	r2, r3
 80179ec:	f7ec ff78 	bl	80048e0 <_read>
 80179f0:	1c43      	adds	r3, r0, #1
 80179f2:	d102      	bne.n	80179fa <_read_r+0x1e>
 80179f4:	682b      	ldr	r3, [r5, #0]
 80179f6:	b103      	cbz	r3, 80179fa <_read_r+0x1e>
 80179f8:	6023      	str	r3, [r4, #0]
 80179fa:	bd38      	pop	{r3, r4, r5, pc}
 80179fc:	20003eec 	.word	0x20003eec

08017a00 <_write_r>:
 8017a00:	b538      	push	{r3, r4, r5, lr}
 8017a02:	4d07      	ldr	r5, [pc, #28]	; (8017a20 <_write_r+0x20>)
 8017a04:	4604      	mov	r4, r0
 8017a06:	4608      	mov	r0, r1
 8017a08:	4611      	mov	r1, r2
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	602a      	str	r2, [r5, #0]
 8017a0e:	461a      	mov	r2, r3
 8017a10:	f7ec ff83 	bl	800491a <_write>
 8017a14:	1c43      	adds	r3, r0, #1
 8017a16:	d102      	bne.n	8017a1e <_write_r+0x1e>
 8017a18:	682b      	ldr	r3, [r5, #0]
 8017a1a:	b103      	cbz	r3, 8017a1e <_write_r+0x1e>
 8017a1c:	6023      	str	r3, [r4, #0]
 8017a1e:	bd38      	pop	{r3, r4, r5, pc}
 8017a20:	20003eec 	.word	0x20003eec

08017a24 <__errno>:
 8017a24:	4b01      	ldr	r3, [pc, #4]	; (8017a2c <__errno+0x8>)
 8017a26:	6818      	ldr	r0, [r3, #0]
 8017a28:	4770      	bx	lr
 8017a2a:	bf00      	nop
 8017a2c:	200001d4 	.word	0x200001d4

08017a30 <__libc_init_array>:
 8017a30:	b570      	push	{r4, r5, r6, lr}
 8017a32:	4d0d      	ldr	r5, [pc, #52]	; (8017a68 <__libc_init_array+0x38>)
 8017a34:	4c0d      	ldr	r4, [pc, #52]	; (8017a6c <__libc_init_array+0x3c>)
 8017a36:	1b64      	subs	r4, r4, r5
 8017a38:	10a4      	asrs	r4, r4, #2
 8017a3a:	2600      	movs	r6, #0
 8017a3c:	42a6      	cmp	r6, r4
 8017a3e:	d109      	bne.n	8017a54 <__libc_init_array+0x24>
 8017a40:	4d0b      	ldr	r5, [pc, #44]	; (8017a70 <__libc_init_array+0x40>)
 8017a42:	4c0c      	ldr	r4, [pc, #48]	; (8017a74 <__libc_init_array+0x44>)
 8017a44:	f002 f82e 	bl	8019aa4 <_init>
 8017a48:	1b64      	subs	r4, r4, r5
 8017a4a:	10a4      	asrs	r4, r4, #2
 8017a4c:	2600      	movs	r6, #0
 8017a4e:	42a6      	cmp	r6, r4
 8017a50:	d105      	bne.n	8017a5e <__libc_init_array+0x2e>
 8017a52:	bd70      	pop	{r4, r5, r6, pc}
 8017a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a58:	4798      	blx	r3
 8017a5a:	3601      	adds	r6, #1
 8017a5c:	e7ee      	b.n	8017a3c <__libc_init_array+0xc>
 8017a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a62:	4798      	blx	r3
 8017a64:	3601      	adds	r6, #1
 8017a66:	e7f2      	b.n	8017a4e <__libc_init_array+0x1e>
 8017a68:	0802fc34 	.word	0x0802fc34
 8017a6c:	0802fc34 	.word	0x0802fc34
 8017a70:	0802fc34 	.word	0x0802fc34
 8017a74:	0802fc38 	.word	0x0802fc38

08017a78 <__retarget_lock_init_recursive>:
 8017a78:	4770      	bx	lr

08017a7a <__retarget_lock_acquire_recursive>:
 8017a7a:	4770      	bx	lr

08017a7c <__retarget_lock_release_recursive>:
 8017a7c:	4770      	bx	lr

08017a7e <memcpy>:
 8017a7e:	440a      	add	r2, r1
 8017a80:	4291      	cmp	r1, r2
 8017a82:	f100 33ff 	add.w	r3, r0, #4294967295
 8017a86:	d100      	bne.n	8017a8a <memcpy+0xc>
 8017a88:	4770      	bx	lr
 8017a8a:	b510      	push	{r4, lr}
 8017a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017a94:	4291      	cmp	r1, r2
 8017a96:	d1f9      	bne.n	8017a8c <memcpy+0xe>
 8017a98:	bd10      	pop	{r4, pc}

08017a9a <quorem>:
 8017a9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a9e:	6903      	ldr	r3, [r0, #16]
 8017aa0:	690c      	ldr	r4, [r1, #16]
 8017aa2:	42a3      	cmp	r3, r4
 8017aa4:	4607      	mov	r7, r0
 8017aa6:	db7e      	blt.n	8017ba6 <quorem+0x10c>
 8017aa8:	3c01      	subs	r4, #1
 8017aaa:	f101 0814 	add.w	r8, r1, #20
 8017aae:	f100 0514 	add.w	r5, r0, #20
 8017ab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ab6:	9301      	str	r3, [sp, #4]
 8017ab8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017abc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ac0:	3301      	adds	r3, #1
 8017ac2:	429a      	cmp	r2, r3
 8017ac4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017ac8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017acc:	fbb2 f6f3 	udiv	r6, r2, r3
 8017ad0:	d331      	bcc.n	8017b36 <quorem+0x9c>
 8017ad2:	f04f 0e00 	mov.w	lr, #0
 8017ad6:	4640      	mov	r0, r8
 8017ad8:	46ac      	mov	ip, r5
 8017ada:	46f2      	mov	sl, lr
 8017adc:	f850 2b04 	ldr.w	r2, [r0], #4
 8017ae0:	b293      	uxth	r3, r2
 8017ae2:	fb06 e303 	mla	r3, r6, r3, lr
 8017ae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017aea:	0c1a      	lsrs	r2, r3, #16
 8017aec:	b29b      	uxth	r3, r3
 8017aee:	ebaa 0303 	sub.w	r3, sl, r3
 8017af2:	f8dc a000 	ldr.w	sl, [ip]
 8017af6:	fa13 f38a 	uxtah	r3, r3, sl
 8017afa:	fb06 220e 	mla	r2, r6, lr, r2
 8017afe:	9300      	str	r3, [sp, #0]
 8017b00:	9b00      	ldr	r3, [sp, #0]
 8017b02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017b06:	b292      	uxth	r2, r2
 8017b08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b10:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b14:	4581      	cmp	r9, r0
 8017b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b1a:	f84c 3b04 	str.w	r3, [ip], #4
 8017b1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017b22:	d2db      	bcs.n	8017adc <quorem+0x42>
 8017b24:	f855 300b 	ldr.w	r3, [r5, fp]
 8017b28:	b92b      	cbnz	r3, 8017b36 <quorem+0x9c>
 8017b2a:	9b01      	ldr	r3, [sp, #4]
 8017b2c:	3b04      	subs	r3, #4
 8017b2e:	429d      	cmp	r5, r3
 8017b30:	461a      	mov	r2, r3
 8017b32:	d32c      	bcc.n	8017b8e <quorem+0xf4>
 8017b34:	613c      	str	r4, [r7, #16]
 8017b36:	4638      	mov	r0, r7
 8017b38:	f001 f9a8 	bl	8018e8c <__mcmp>
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	db22      	blt.n	8017b86 <quorem+0xec>
 8017b40:	3601      	adds	r6, #1
 8017b42:	4629      	mov	r1, r5
 8017b44:	2000      	movs	r0, #0
 8017b46:	f858 2b04 	ldr.w	r2, [r8], #4
 8017b4a:	f8d1 c000 	ldr.w	ip, [r1]
 8017b4e:	b293      	uxth	r3, r2
 8017b50:	1ac3      	subs	r3, r0, r3
 8017b52:	0c12      	lsrs	r2, r2, #16
 8017b54:	fa13 f38c 	uxtah	r3, r3, ip
 8017b58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017b5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b60:	b29b      	uxth	r3, r3
 8017b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b66:	45c1      	cmp	r9, r8
 8017b68:	f841 3b04 	str.w	r3, [r1], #4
 8017b6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017b70:	d2e9      	bcs.n	8017b46 <quorem+0xac>
 8017b72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017b7a:	b922      	cbnz	r2, 8017b86 <quorem+0xec>
 8017b7c:	3b04      	subs	r3, #4
 8017b7e:	429d      	cmp	r5, r3
 8017b80:	461a      	mov	r2, r3
 8017b82:	d30a      	bcc.n	8017b9a <quorem+0x100>
 8017b84:	613c      	str	r4, [r7, #16]
 8017b86:	4630      	mov	r0, r6
 8017b88:	b003      	add	sp, #12
 8017b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b8e:	6812      	ldr	r2, [r2, #0]
 8017b90:	3b04      	subs	r3, #4
 8017b92:	2a00      	cmp	r2, #0
 8017b94:	d1ce      	bne.n	8017b34 <quorem+0x9a>
 8017b96:	3c01      	subs	r4, #1
 8017b98:	e7c9      	b.n	8017b2e <quorem+0x94>
 8017b9a:	6812      	ldr	r2, [r2, #0]
 8017b9c:	3b04      	subs	r3, #4
 8017b9e:	2a00      	cmp	r2, #0
 8017ba0:	d1f0      	bne.n	8017b84 <quorem+0xea>
 8017ba2:	3c01      	subs	r4, #1
 8017ba4:	e7eb      	b.n	8017b7e <quorem+0xe4>
 8017ba6:	2000      	movs	r0, #0
 8017ba8:	e7ee      	b.n	8017b88 <quorem+0xee>
 8017baa:	0000      	movs	r0, r0
 8017bac:	0000      	movs	r0, r0
	...

08017bb0 <_dtoa_r>:
 8017bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bb4:	ed2d 8b04 	vpush	{d8-d9}
 8017bb8:	69c5      	ldr	r5, [r0, #28]
 8017bba:	b093      	sub	sp, #76	; 0x4c
 8017bbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017bc0:	ec57 6b10 	vmov	r6, r7, d0
 8017bc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017bc8:	9107      	str	r1, [sp, #28]
 8017bca:	4604      	mov	r4, r0
 8017bcc:	920a      	str	r2, [sp, #40]	; 0x28
 8017bce:	930d      	str	r3, [sp, #52]	; 0x34
 8017bd0:	b975      	cbnz	r5, 8017bf0 <_dtoa_r+0x40>
 8017bd2:	2010      	movs	r0, #16
 8017bd4:	f000 fe2a 	bl	801882c <malloc>
 8017bd8:	4602      	mov	r2, r0
 8017bda:	61e0      	str	r0, [r4, #28]
 8017bdc:	b920      	cbnz	r0, 8017be8 <_dtoa_r+0x38>
 8017bde:	4bae      	ldr	r3, [pc, #696]	; (8017e98 <_dtoa_r+0x2e8>)
 8017be0:	21ef      	movs	r1, #239	; 0xef
 8017be2:	48ae      	ldr	r0, [pc, #696]	; (8017e9c <_dtoa_r+0x2ec>)
 8017be4:	f001 fd0c 	bl	8019600 <__assert_func>
 8017be8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017bec:	6005      	str	r5, [r0, #0]
 8017bee:	60c5      	str	r5, [r0, #12]
 8017bf0:	69e3      	ldr	r3, [r4, #28]
 8017bf2:	6819      	ldr	r1, [r3, #0]
 8017bf4:	b151      	cbz	r1, 8017c0c <_dtoa_r+0x5c>
 8017bf6:	685a      	ldr	r2, [r3, #4]
 8017bf8:	604a      	str	r2, [r1, #4]
 8017bfa:	2301      	movs	r3, #1
 8017bfc:	4093      	lsls	r3, r2
 8017bfe:	608b      	str	r3, [r1, #8]
 8017c00:	4620      	mov	r0, r4
 8017c02:	f000 ff07 	bl	8018a14 <_Bfree>
 8017c06:	69e3      	ldr	r3, [r4, #28]
 8017c08:	2200      	movs	r2, #0
 8017c0a:	601a      	str	r2, [r3, #0]
 8017c0c:	1e3b      	subs	r3, r7, #0
 8017c0e:	bfbb      	ittet	lt
 8017c10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017c14:	9303      	strlt	r3, [sp, #12]
 8017c16:	2300      	movge	r3, #0
 8017c18:	2201      	movlt	r2, #1
 8017c1a:	bfac      	ite	ge
 8017c1c:	f8c8 3000 	strge.w	r3, [r8]
 8017c20:	f8c8 2000 	strlt.w	r2, [r8]
 8017c24:	4b9e      	ldr	r3, [pc, #632]	; (8017ea0 <_dtoa_r+0x2f0>)
 8017c26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017c2a:	ea33 0308 	bics.w	r3, r3, r8
 8017c2e:	d11b      	bne.n	8017c68 <_dtoa_r+0xb8>
 8017c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017c32:	f242 730f 	movw	r3, #9999	; 0x270f
 8017c36:	6013      	str	r3, [r2, #0]
 8017c38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017c3c:	4333      	orrs	r3, r6
 8017c3e:	f000 8593 	beq.w	8018768 <_dtoa_r+0xbb8>
 8017c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c44:	b963      	cbnz	r3, 8017c60 <_dtoa_r+0xb0>
 8017c46:	4b97      	ldr	r3, [pc, #604]	; (8017ea4 <_dtoa_r+0x2f4>)
 8017c48:	e027      	b.n	8017c9a <_dtoa_r+0xea>
 8017c4a:	4b97      	ldr	r3, [pc, #604]	; (8017ea8 <_dtoa_r+0x2f8>)
 8017c4c:	9300      	str	r3, [sp, #0]
 8017c4e:	3308      	adds	r3, #8
 8017c50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c52:	6013      	str	r3, [r2, #0]
 8017c54:	9800      	ldr	r0, [sp, #0]
 8017c56:	b013      	add	sp, #76	; 0x4c
 8017c58:	ecbd 8b04 	vpop	{d8-d9}
 8017c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c60:	4b90      	ldr	r3, [pc, #576]	; (8017ea4 <_dtoa_r+0x2f4>)
 8017c62:	9300      	str	r3, [sp, #0]
 8017c64:	3303      	adds	r3, #3
 8017c66:	e7f3      	b.n	8017c50 <_dtoa_r+0xa0>
 8017c68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	ec51 0b17 	vmov	r0, r1, d7
 8017c72:	eeb0 8a47 	vmov.f32	s16, s14
 8017c76:	eef0 8a67 	vmov.f32	s17, s15
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	f7e8 fefc 	bl	8000a78 <__aeabi_dcmpeq>
 8017c80:	4681      	mov	r9, r0
 8017c82:	b160      	cbz	r0, 8017c9e <_dtoa_r+0xee>
 8017c84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017c86:	2301      	movs	r3, #1
 8017c88:	6013      	str	r3, [r2, #0]
 8017c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	f000 8568 	beq.w	8018762 <_dtoa_r+0xbb2>
 8017c92:	4b86      	ldr	r3, [pc, #536]	; (8017eac <_dtoa_r+0x2fc>)
 8017c94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c96:	6013      	str	r3, [r2, #0]
 8017c98:	3b01      	subs	r3, #1
 8017c9a:	9300      	str	r3, [sp, #0]
 8017c9c:	e7da      	b.n	8017c54 <_dtoa_r+0xa4>
 8017c9e:	aa10      	add	r2, sp, #64	; 0x40
 8017ca0:	a911      	add	r1, sp, #68	; 0x44
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8017ca8:	eef0 0a68 	vmov.f32	s1, s17
 8017cac:	f001 f994 	bl	8018fd8 <__d2b>
 8017cb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017cb4:	4682      	mov	sl, r0
 8017cb6:	2d00      	cmp	r5, #0
 8017cb8:	d07f      	beq.n	8017dba <_dtoa_r+0x20a>
 8017cba:	ee18 3a90 	vmov	r3, s17
 8017cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017cc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017cc6:	ec51 0b18 	vmov	r0, r1, d8
 8017cca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017cd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017cd6:	4619      	mov	r1, r3
 8017cd8:	2200      	movs	r2, #0
 8017cda:	4b75      	ldr	r3, [pc, #468]	; (8017eb0 <_dtoa_r+0x300>)
 8017cdc:	f7e8 faac 	bl	8000238 <__aeabi_dsub>
 8017ce0:	a367      	add	r3, pc, #412	; (adr r3, 8017e80 <_dtoa_r+0x2d0>)
 8017ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce6:	f7e8 fc5f 	bl	80005a8 <__aeabi_dmul>
 8017cea:	a367      	add	r3, pc, #412	; (adr r3, 8017e88 <_dtoa_r+0x2d8>)
 8017cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cf0:	f7e8 faa4 	bl	800023c <__adddf3>
 8017cf4:	4606      	mov	r6, r0
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	460f      	mov	r7, r1
 8017cfa:	f7e8 fbeb 	bl	80004d4 <__aeabi_i2d>
 8017cfe:	a364      	add	r3, pc, #400	; (adr r3, 8017e90 <_dtoa_r+0x2e0>)
 8017d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d04:	f7e8 fc50 	bl	80005a8 <__aeabi_dmul>
 8017d08:	4602      	mov	r2, r0
 8017d0a:	460b      	mov	r3, r1
 8017d0c:	4630      	mov	r0, r6
 8017d0e:	4639      	mov	r1, r7
 8017d10:	f7e8 fa94 	bl	800023c <__adddf3>
 8017d14:	4606      	mov	r6, r0
 8017d16:	460f      	mov	r7, r1
 8017d18:	f7e8 fef6 	bl	8000b08 <__aeabi_d2iz>
 8017d1c:	2200      	movs	r2, #0
 8017d1e:	4683      	mov	fp, r0
 8017d20:	2300      	movs	r3, #0
 8017d22:	4630      	mov	r0, r6
 8017d24:	4639      	mov	r1, r7
 8017d26:	f7e8 feb1 	bl	8000a8c <__aeabi_dcmplt>
 8017d2a:	b148      	cbz	r0, 8017d40 <_dtoa_r+0x190>
 8017d2c:	4658      	mov	r0, fp
 8017d2e:	f7e8 fbd1 	bl	80004d4 <__aeabi_i2d>
 8017d32:	4632      	mov	r2, r6
 8017d34:	463b      	mov	r3, r7
 8017d36:	f7e8 fe9f 	bl	8000a78 <__aeabi_dcmpeq>
 8017d3a:	b908      	cbnz	r0, 8017d40 <_dtoa_r+0x190>
 8017d3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017d40:	f1bb 0f16 	cmp.w	fp, #22
 8017d44:	d857      	bhi.n	8017df6 <_dtoa_r+0x246>
 8017d46:	4b5b      	ldr	r3, [pc, #364]	; (8017eb4 <_dtoa_r+0x304>)
 8017d48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d50:	ec51 0b18 	vmov	r0, r1, d8
 8017d54:	f7e8 fe9a 	bl	8000a8c <__aeabi_dcmplt>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	d04e      	beq.n	8017dfa <_dtoa_r+0x24a>
 8017d5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017d60:	2300      	movs	r3, #0
 8017d62:	930c      	str	r3, [sp, #48]	; 0x30
 8017d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d66:	1b5b      	subs	r3, r3, r5
 8017d68:	1e5a      	subs	r2, r3, #1
 8017d6a:	bf45      	ittet	mi
 8017d6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8017d70:	9305      	strmi	r3, [sp, #20]
 8017d72:	2300      	movpl	r3, #0
 8017d74:	2300      	movmi	r3, #0
 8017d76:	9206      	str	r2, [sp, #24]
 8017d78:	bf54      	ite	pl
 8017d7a:	9305      	strpl	r3, [sp, #20]
 8017d7c:	9306      	strmi	r3, [sp, #24]
 8017d7e:	f1bb 0f00 	cmp.w	fp, #0
 8017d82:	db3c      	blt.n	8017dfe <_dtoa_r+0x24e>
 8017d84:	9b06      	ldr	r3, [sp, #24]
 8017d86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017d8a:	445b      	add	r3, fp
 8017d8c:	9306      	str	r3, [sp, #24]
 8017d8e:	2300      	movs	r3, #0
 8017d90:	9308      	str	r3, [sp, #32]
 8017d92:	9b07      	ldr	r3, [sp, #28]
 8017d94:	2b09      	cmp	r3, #9
 8017d96:	d868      	bhi.n	8017e6a <_dtoa_r+0x2ba>
 8017d98:	2b05      	cmp	r3, #5
 8017d9a:	bfc4      	itt	gt
 8017d9c:	3b04      	subgt	r3, #4
 8017d9e:	9307      	strgt	r3, [sp, #28]
 8017da0:	9b07      	ldr	r3, [sp, #28]
 8017da2:	f1a3 0302 	sub.w	r3, r3, #2
 8017da6:	bfcc      	ite	gt
 8017da8:	2500      	movgt	r5, #0
 8017daa:	2501      	movle	r5, #1
 8017dac:	2b03      	cmp	r3, #3
 8017dae:	f200 8085 	bhi.w	8017ebc <_dtoa_r+0x30c>
 8017db2:	e8df f003 	tbb	[pc, r3]
 8017db6:	3b2e      	.short	0x3b2e
 8017db8:	5839      	.short	0x5839
 8017dba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017dbe:	441d      	add	r5, r3
 8017dc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017dc4:	2b20      	cmp	r3, #32
 8017dc6:	bfc1      	itttt	gt
 8017dc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017dcc:	fa08 f803 	lslgt.w	r8, r8, r3
 8017dd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017dd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017dd8:	bfd6      	itet	le
 8017dda:	f1c3 0320 	rsble	r3, r3, #32
 8017dde:	ea48 0003 	orrgt.w	r0, r8, r3
 8017de2:	fa06 f003 	lslle.w	r0, r6, r3
 8017de6:	f7e8 fb65 	bl	80004b4 <__aeabi_ui2d>
 8017dea:	2201      	movs	r2, #1
 8017dec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017df0:	3d01      	subs	r5, #1
 8017df2:	920e      	str	r2, [sp, #56]	; 0x38
 8017df4:	e76f      	b.n	8017cd6 <_dtoa_r+0x126>
 8017df6:	2301      	movs	r3, #1
 8017df8:	e7b3      	b.n	8017d62 <_dtoa_r+0x1b2>
 8017dfa:	900c      	str	r0, [sp, #48]	; 0x30
 8017dfc:	e7b2      	b.n	8017d64 <_dtoa_r+0x1b4>
 8017dfe:	9b05      	ldr	r3, [sp, #20]
 8017e00:	eba3 030b 	sub.w	r3, r3, fp
 8017e04:	9305      	str	r3, [sp, #20]
 8017e06:	f1cb 0300 	rsb	r3, fp, #0
 8017e0a:	9308      	str	r3, [sp, #32]
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e10:	e7bf      	b.n	8017d92 <_dtoa_r+0x1e2>
 8017e12:	2300      	movs	r3, #0
 8017e14:	9309      	str	r3, [sp, #36]	; 0x24
 8017e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	dc52      	bgt.n	8017ec2 <_dtoa_r+0x312>
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	9301      	str	r3, [sp, #4]
 8017e20:	9304      	str	r3, [sp, #16]
 8017e22:	461a      	mov	r2, r3
 8017e24:	920a      	str	r2, [sp, #40]	; 0x28
 8017e26:	e00b      	b.n	8017e40 <_dtoa_r+0x290>
 8017e28:	2301      	movs	r3, #1
 8017e2a:	e7f3      	b.n	8017e14 <_dtoa_r+0x264>
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8017e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e32:	445b      	add	r3, fp
 8017e34:	9301      	str	r3, [sp, #4]
 8017e36:	3301      	adds	r3, #1
 8017e38:	2b01      	cmp	r3, #1
 8017e3a:	9304      	str	r3, [sp, #16]
 8017e3c:	bfb8      	it	lt
 8017e3e:	2301      	movlt	r3, #1
 8017e40:	69e0      	ldr	r0, [r4, #28]
 8017e42:	2100      	movs	r1, #0
 8017e44:	2204      	movs	r2, #4
 8017e46:	f102 0614 	add.w	r6, r2, #20
 8017e4a:	429e      	cmp	r6, r3
 8017e4c:	d93d      	bls.n	8017eca <_dtoa_r+0x31a>
 8017e4e:	6041      	str	r1, [r0, #4]
 8017e50:	4620      	mov	r0, r4
 8017e52:	f000 fd9f 	bl	8018994 <_Balloc>
 8017e56:	9000      	str	r0, [sp, #0]
 8017e58:	2800      	cmp	r0, #0
 8017e5a:	d139      	bne.n	8017ed0 <_dtoa_r+0x320>
 8017e5c:	4b16      	ldr	r3, [pc, #88]	; (8017eb8 <_dtoa_r+0x308>)
 8017e5e:	4602      	mov	r2, r0
 8017e60:	f240 11af 	movw	r1, #431	; 0x1af
 8017e64:	e6bd      	b.n	8017be2 <_dtoa_r+0x32>
 8017e66:	2301      	movs	r3, #1
 8017e68:	e7e1      	b.n	8017e2e <_dtoa_r+0x27e>
 8017e6a:	2501      	movs	r5, #1
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	9307      	str	r3, [sp, #28]
 8017e70:	9509      	str	r5, [sp, #36]	; 0x24
 8017e72:	f04f 33ff 	mov.w	r3, #4294967295
 8017e76:	9301      	str	r3, [sp, #4]
 8017e78:	9304      	str	r3, [sp, #16]
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	2312      	movs	r3, #18
 8017e7e:	e7d1      	b.n	8017e24 <_dtoa_r+0x274>
 8017e80:	636f4361 	.word	0x636f4361
 8017e84:	3fd287a7 	.word	0x3fd287a7
 8017e88:	8b60c8b3 	.word	0x8b60c8b3
 8017e8c:	3fc68a28 	.word	0x3fc68a28
 8017e90:	509f79fb 	.word	0x509f79fb
 8017e94:	3fd34413 	.word	0x3fd34413
 8017e98:	0802f8cd 	.word	0x0802f8cd
 8017e9c:	0802f8e4 	.word	0x0802f8e4
 8017ea0:	7ff00000 	.word	0x7ff00000
 8017ea4:	0802f8c9 	.word	0x0802f8c9
 8017ea8:	0802f8c0 	.word	0x0802f8c0
 8017eac:	0802f89d 	.word	0x0802f89d
 8017eb0:	3ff80000 	.word	0x3ff80000
 8017eb4:	0802f9d0 	.word	0x0802f9d0
 8017eb8:	0802f93c 	.word	0x0802f93c
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8017ec0:	e7d7      	b.n	8017e72 <_dtoa_r+0x2c2>
 8017ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ec4:	9301      	str	r3, [sp, #4]
 8017ec6:	9304      	str	r3, [sp, #16]
 8017ec8:	e7ba      	b.n	8017e40 <_dtoa_r+0x290>
 8017eca:	3101      	adds	r1, #1
 8017ecc:	0052      	lsls	r2, r2, #1
 8017ece:	e7ba      	b.n	8017e46 <_dtoa_r+0x296>
 8017ed0:	69e3      	ldr	r3, [r4, #28]
 8017ed2:	9a00      	ldr	r2, [sp, #0]
 8017ed4:	601a      	str	r2, [r3, #0]
 8017ed6:	9b04      	ldr	r3, [sp, #16]
 8017ed8:	2b0e      	cmp	r3, #14
 8017eda:	f200 80a8 	bhi.w	801802e <_dtoa_r+0x47e>
 8017ede:	2d00      	cmp	r5, #0
 8017ee0:	f000 80a5 	beq.w	801802e <_dtoa_r+0x47e>
 8017ee4:	f1bb 0f00 	cmp.w	fp, #0
 8017ee8:	dd38      	ble.n	8017f5c <_dtoa_r+0x3ac>
 8017eea:	4bc0      	ldr	r3, [pc, #768]	; (80181ec <_dtoa_r+0x63c>)
 8017eec:	f00b 020f 	and.w	r2, fp, #15
 8017ef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017ef4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017ef8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017efc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017f00:	d019      	beq.n	8017f36 <_dtoa_r+0x386>
 8017f02:	4bbb      	ldr	r3, [pc, #748]	; (80181f0 <_dtoa_r+0x640>)
 8017f04:	ec51 0b18 	vmov	r0, r1, d8
 8017f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017f0c:	f7e8 fc76 	bl	80007fc <__aeabi_ddiv>
 8017f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f14:	f008 080f 	and.w	r8, r8, #15
 8017f18:	2503      	movs	r5, #3
 8017f1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80181f0 <_dtoa_r+0x640>
 8017f1e:	f1b8 0f00 	cmp.w	r8, #0
 8017f22:	d10a      	bne.n	8017f3a <_dtoa_r+0x38a>
 8017f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f28:	4632      	mov	r2, r6
 8017f2a:	463b      	mov	r3, r7
 8017f2c:	f7e8 fc66 	bl	80007fc <__aeabi_ddiv>
 8017f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f34:	e02b      	b.n	8017f8e <_dtoa_r+0x3de>
 8017f36:	2502      	movs	r5, #2
 8017f38:	e7ef      	b.n	8017f1a <_dtoa_r+0x36a>
 8017f3a:	f018 0f01 	tst.w	r8, #1
 8017f3e:	d008      	beq.n	8017f52 <_dtoa_r+0x3a2>
 8017f40:	4630      	mov	r0, r6
 8017f42:	4639      	mov	r1, r7
 8017f44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017f48:	f7e8 fb2e 	bl	80005a8 <__aeabi_dmul>
 8017f4c:	3501      	adds	r5, #1
 8017f4e:	4606      	mov	r6, r0
 8017f50:	460f      	mov	r7, r1
 8017f52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017f56:	f109 0908 	add.w	r9, r9, #8
 8017f5a:	e7e0      	b.n	8017f1e <_dtoa_r+0x36e>
 8017f5c:	f000 809f 	beq.w	801809e <_dtoa_r+0x4ee>
 8017f60:	f1cb 0600 	rsb	r6, fp, #0
 8017f64:	4ba1      	ldr	r3, [pc, #644]	; (80181ec <_dtoa_r+0x63c>)
 8017f66:	4fa2      	ldr	r7, [pc, #648]	; (80181f0 <_dtoa_r+0x640>)
 8017f68:	f006 020f 	and.w	r2, r6, #15
 8017f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f74:	ec51 0b18 	vmov	r0, r1, d8
 8017f78:	f7e8 fb16 	bl	80005a8 <__aeabi_dmul>
 8017f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f80:	1136      	asrs	r6, r6, #4
 8017f82:	2300      	movs	r3, #0
 8017f84:	2502      	movs	r5, #2
 8017f86:	2e00      	cmp	r6, #0
 8017f88:	d17e      	bne.n	8018088 <_dtoa_r+0x4d8>
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d1d0      	bne.n	8017f30 <_dtoa_r+0x380>
 8017f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	f000 8084 	beq.w	80180a2 <_dtoa_r+0x4f2>
 8017f9a:	4b96      	ldr	r3, [pc, #600]	; (80181f4 <_dtoa_r+0x644>)
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	4640      	mov	r0, r8
 8017fa0:	4649      	mov	r1, r9
 8017fa2:	f7e8 fd73 	bl	8000a8c <__aeabi_dcmplt>
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	d07b      	beq.n	80180a2 <_dtoa_r+0x4f2>
 8017faa:	9b04      	ldr	r3, [sp, #16]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d078      	beq.n	80180a2 <_dtoa_r+0x4f2>
 8017fb0:	9b01      	ldr	r3, [sp, #4]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	dd39      	ble.n	801802a <_dtoa_r+0x47a>
 8017fb6:	4b90      	ldr	r3, [pc, #576]	; (80181f8 <_dtoa_r+0x648>)
 8017fb8:	2200      	movs	r2, #0
 8017fba:	4640      	mov	r0, r8
 8017fbc:	4649      	mov	r1, r9
 8017fbe:	f7e8 faf3 	bl	80005a8 <__aeabi_dmul>
 8017fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017fc6:	9e01      	ldr	r6, [sp, #4]
 8017fc8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017fcc:	3501      	adds	r5, #1
 8017fce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017fd2:	4628      	mov	r0, r5
 8017fd4:	f7e8 fa7e 	bl	80004d4 <__aeabi_i2d>
 8017fd8:	4642      	mov	r2, r8
 8017fda:	464b      	mov	r3, r9
 8017fdc:	f7e8 fae4 	bl	80005a8 <__aeabi_dmul>
 8017fe0:	4b86      	ldr	r3, [pc, #536]	; (80181fc <_dtoa_r+0x64c>)
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	f7e8 f92a 	bl	800023c <__adddf3>
 8017fe8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ff0:	9303      	str	r3, [sp, #12]
 8017ff2:	2e00      	cmp	r6, #0
 8017ff4:	d158      	bne.n	80180a8 <_dtoa_r+0x4f8>
 8017ff6:	4b82      	ldr	r3, [pc, #520]	; (8018200 <_dtoa_r+0x650>)
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	4640      	mov	r0, r8
 8017ffc:	4649      	mov	r1, r9
 8017ffe:	f7e8 f91b 	bl	8000238 <__aeabi_dsub>
 8018002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018006:	4680      	mov	r8, r0
 8018008:	4689      	mov	r9, r1
 801800a:	f7e8 fd5d 	bl	8000ac8 <__aeabi_dcmpgt>
 801800e:	2800      	cmp	r0, #0
 8018010:	f040 8296 	bne.w	8018540 <_dtoa_r+0x990>
 8018014:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018018:	4640      	mov	r0, r8
 801801a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801801e:	4649      	mov	r1, r9
 8018020:	f7e8 fd34 	bl	8000a8c <__aeabi_dcmplt>
 8018024:	2800      	cmp	r0, #0
 8018026:	f040 8289 	bne.w	801853c <_dtoa_r+0x98c>
 801802a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801802e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018030:	2b00      	cmp	r3, #0
 8018032:	f2c0 814e 	blt.w	80182d2 <_dtoa_r+0x722>
 8018036:	f1bb 0f0e 	cmp.w	fp, #14
 801803a:	f300 814a 	bgt.w	80182d2 <_dtoa_r+0x722>
 801803e:	4b6b      	ldr	r3, [pc, #428]	; (80181ec <_dtoa_r+0x63c>)
 8018040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018044:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801804a:	2b00      	cmp	r3, #0
 801804c:	f280 80dc 	bge.w	8018208 <_dtoa_r+0x658>
 8018050:	9b04      	ldr	r3, [sp, #16]
 8018052:	2b00      	cmp	r3, #0
 8018054:	f300 80d8 	bgt.w	8018208 <_dtoa_r+0x658>
 8018058:	f040 826f 	bne.w	801853a <_dtoa_r+0x98a>
 801805c:	4b68      	ldr	r3, [pc, #416]	; (8018200 <_dtoa_r+0x650>)
 801805e:	2200      	movs	r2, #0
 8018060:	4640      	mov	r0, r8
 8018062:	4649      	mov	r1, r9
 8018064:	f7e8 faa0 	bl	80005a8 <__aeabi_dmul>
 8018068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801806c:	f7e8 fd22 	bl	8000ab4 <__aeabi_dcmpge>
 8018070:	9e04      	ldr	r6, [sp, #16]
 8018072:	4637      	mov	r7, r6
 8018074:	2800      	cmp	r0, #0
 8018076:	f040 8245 	bne.w	8018504 <_dtoa_r+0x954>
 801807a:	9d00      	ldr	r5, [sp, #0]
 801807c:	2331      	movs	r3, #49	; 0x31
 801807e:	f805 3b01 	strb.w	r3, [r5], #1
 8018082:	f10b 0b01 	add.w	fp, fp, #1
 8018086:	e241      	b.n	801850c <_dtoa_r+0x95c>
 8018088:	07f2      	lsls	r2, r6, #31
 801808a:	d505      	bpl.n	8018098 <_dtoa_r+0x4e8>
 801808c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018090:	f7e8 fa8a 	bl	80005a8 <__aeabi_dmul>
 8018094:	3501      	adds	r5, #1
 8018096:	2301      	movs	r3, #1
 8018098:	1076      	asrs	r6, r6, #1
 801809a:	3708      	adds	r7, #8
 801809c:	e773      	b.n	8017f86 <_dtoa_r+0x3d6>
 801809e:	2502      	movs	r5, #2
 80180a0:	e775      	b.n	8017f8e <_dtoa_r+0x3de>
 80180a2:	9e04      	ldr	r6, [sp, #16]
 80180a4:	465f      	mov	r7, fp
 80180a6:	e792      	b.n	8017fce <_dtoa_r+0x41e>
 80180a8:	9900      	ldr	r1, [sp, #0]
 80180aa:	4b50      	ldr	r3, [pc, #320]	; (80181ec <_dtoa_r+0x63c>)
 80180ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80180b0:	4431      	add	r1, r6
 80180b2:	9102      	str	r1, [sp, #8]
 80180b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80180b6:	eeb0 9a47 	vmov.f32	s18, s14
 80180ba:	eef0 9a67 	vmov.f32	s19, s15
 80180be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80180c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80180c6:	2900      	cmp	r1, #0
 80180c8:	d044      	beq.n	8018154 <_dtoa_r+0x5a4>
 80180ca:	494e      	ldr	r1, [pc, #312]	; (8018204 <_dtoa_r+0x654>)
 80180cc:	2000      	movs	r0, #0
 80180ce:	f7e8 fb95 	bl	80007fc <__aeabi_ddiv>
 80180d2:	ec53 2b19 	vmov	r2, r3, d9
 80180d6:	f7e8 f8af 	bl	8000238 <__aeabi_dsub>
 80180da:	9d00      	ldr	r5, [sp, #0]
 80180dc:	ec41 0b19 	vmov	d9, r0, r1
 80180e0:	4649      	mov	r1, r9
 80180e2:	4640      	mov	r0, r8
 80180e4:	f7e8 fd10 	bl	8000b08 <__aeabi_d2iz>
 80180e8:	4606      	mov	r6, r0
 80180ea:	f7e8 f9f3 	bl	80004d4 <__aeabi_i2d>
 80180ee:	4602      	mov	r2, r0
 80180f0:	460b      	mov	r3, r1
 80180f2:	4640      	mov	r0, r8
 80180f4:	4649      	mov	r1, r9
 80180f6:	f7e8 f89f 	bl	8000238 <__aeabi_dsub>
 80180fa:	3630      	adds	r6, #48	; 0x30
 80180fc:	f805 6b01 	strb.w	r6, [r5], #1
 8018100:	ec53 2b19 	vmov	r2, r3, d9
 8018104:	4680      	mov	r8, r0
 8018106:	4689      	mov	r9, r1
 8018108:	f7e8 fcc0 	bl	8000a8c <__aeabi_dcmplt>
 801810c:	2800      	cmp	r0, #0
 801810e:	d164      	bne.n	80181da <_dtoa_r+0x62a>
 8018110:	4642      	mov	r2, r8
 8018112:	464b      	mov	r3, r9
 8018114:	4937      	ldr	r1, [pc, #220]	; (80181f4 <_dtoa_r+0x644>)
 8018116:	2000      	movs	r0, #0
 8018118:	f7e8 f88e 	bl	8000238 <__aeabi_dsub>
 801811c:	ec53 2b19 	vmov	r2, r3, d9
 8018120:	f7e8 fcb4 	bl	8000a8c <__aeabi_dcmplt>
 8018124:	2800      	cmp	r0, #0
 8018126:	f040 80b6 	bne.w	8018296 <_dtoa_r+0x6e6>
 801812a:	9b02      	ldr	r3, [sp, #8]
 801812c:	429d      	cmp	r5, r3
 801812e:	f43f af7c 	beq.w	801802a <_dtoa_r+0x47a>
 8018132:	4b31      	ldr	r3, [pc, #196]	; (80181f8 <_dtoa_r+0x648>)
 8018134:	ec51 0b19 	vmov	r0, r1, d9
 8018138:	2200      	movs	r2, #0
 801813a:	f7e8 fa35 	bl	80005a8 <__aeabi_dmul>
 801813e:	4b2e      	ldr	r3, [pc, #184]	; (80181f8 <_dtoa_r+0x648>)
 8018140:	ec41 0b19 	vmov	d9, r0, r1
 8018144:	2200      	movs	r2, #0
 8018146:	4640      	mov	r0, r8
 8018148:	4649      	mov	r1, r9
 801814a:	f7e8 fa2d 	bl	80005a8 <__aeabi_dmul>
 801814e:	4680      	mov	r8, r0
 8018150:	4689      	mov	r9, r1
 8018152:	e7c5      	b.n	80180e0 <_dtoa_r+0x530>
 8018154:	ec51 0b17 	vmov	r0, r1, d7
 8018158:	f7e8 fa26 	bl	80005a8 <__aeabi_dmul>
 801815c:	9b02      	ldr	r3, [sp, #8]
 801815e:	9d00      	ldr	r5, [sp, #0]
 8018160:	930f      	str	r3, [sp, #60]	; 0x3c
 8018162:	ec41 0b19 	vmov	d9, r0, r1
 8018166:	4649      	mov	r1, r9
 8018168:	4640      	mov	r0, r8
 801816a:	f7e8 fccd 	bl	8000b08 <__aeabi_d2iz>
 801816e:	4606      	mov	r6, r0
 8018170:	f7e8 f9b0 	bl	80004d4 <__aeabi_i2d>
 8018174:	3630      	adds	r6, #48	; 0x30
 8018176:	4602      	mov	r2, r0
 8018178:	460b      	mov	r3, r1
 801817a:	4640      	mov	r0, r8
 801817c:	4649      	mov	r1, r9
 801817e:	f7e8 f85b 	bl	8000238 <__aeabi_dsub>
 8018182:	f805 6b01 	strb.w	r6, [r5], #1
 8018186:	9b02      	ldr	r3, [sp, #8]
 8018188:	429d      	cmp	r5, r3
 801818a:	4680      	mov	r8, r0
 801818c:	4689      	mov	r9, r1
 801818e:	f04f 0200 	mov.w	r2, #0
 8018192:	d124      	bne.n	80181de <_dtoa_r+0x62e>
 8018194:	4b1b      	ldr	r3, [pc, #108]	; (8018204 <_dtoa_r+0x654>)
 8018196:	ec51 0b19 	vmov	r0, r1, d9
 801819a:	f7e8 f84f 	bl	800023c <__adddf3>
 801819e:	4602      	mov	r2, r0
 80181a0:	460b      	mov	r3, r1
 80181a2:	4640      	mov	r0, r8
 80181a4:	4649      	mov	r1, r9
 80181a6:	f7e8 fc8f 	bl	8000ac8 <__aeabi_dcmpgt>
 80181aa:	2800      	cmp	r0, #0
 80181ac:	d173      	bne.n	8018296 <_dtoa_r+0x6e6>
 80181ae:	ec53 2b19 	vmov	r2, r3, d9
 80181b2:	4914      	ldr	r1, [pc, #80]	; (8018204 <_dtoa_r+0x654>)
 80181b4:	2000      	movs	r0, #0
 80181b6:	f7e8 f83f 	bl	8000238 <__aeabi_dsub>
 80181ba:	4602      	mov	r2, r0
 80181bc:	460b      	mov	r3, r1
 80181be:	4640      	mov	r0, r8
 80181c0:	4649      	mov	r1, r9
 80181c2:	f7e8 fc63 	bl	8000a8c <__aeabi_dcmplt>
 80181c6:	2800      	cmp	r0, #0
 80181c8:	f43f af2f 	beq.w	801802a <_dtoa_r+0x47a>
 80181cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80181ce:	1e6b      	subs	r3, r5, #1
 80181d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80181d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80181d6:	2b30      	cmp	r3, #48	; 0x30
 80181d8:	d0f8      	beq.n	80181cc <_dtoa_r+0x61c>
 80181da:	46bb      	mov	fp, r7
 80181dc:	e04a      	b.n	8018274 <_dtoa_r+0x6c4>
 80181de:	4b06      	ldr	r3, [pc, #24]	; (80181f8 <_dtoa_r+0x648>)
 80181e0:	f7e8 f9e2 	bl	80005a8 <__aeabi_dmul>
 80181e4:	4680      	mov	r8, r0
 80181e6:	4689      	mov	r9, r1
 80181e8:	e7bd      	b.n	8018166 <_dtoa_r+0x5b6>
 80181ea:	bf00      	nop
 80181ec:	0802f9d0 	.word	0x0802f9d0
 80181f0:	0802f9a8 	.word	0x0802f9a8
 80181f4:	3ff00000 	.word	0x3ff00000
 80181f8:	40240000 	.word	0x40240000
 80181fc:	401c0000 	.word	0x401c0000
 8018200:	40140000 	.word	0x40140000
 8018204:	3fe00000 	.word	0x3fe00000
 8018208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801820c:	9d00      	ldr	r5, [sp, #0]
 801820e:	4642      	mov	r2, r8
 8018210:	464b      	mov	r3, r9
 8018212:	4630      	mov	r0, r6
 8018214:	4639      	mov	r1, r7
 8018216:	f7e8 faf1 	bl	80007fc <__aeabi_ddiv>
 801821a:	f7e8 fc75 	bl	8000b08 <__aeabi_d2iz>
 801821e:	9001      	str	r0, [sp, #4]
 8018220:	f7e8 f958 	bl	80004d4 <__aeabi_i2d>
 8018224:	4642      	mov	r2, r8
 8018226:	464b      	mov	r3, r9
 8018228:	f7e8 f9be 	bl	80005a8 <__aeabi_dmul>
 801822c:	4602      	mov	r2, r0
 801822e:	460b      	mov	r3, r1
 8018230:	4630      	mov	r0, r6
 8018232:	4639      	mov	r1, r7
 8018234:	f7e8 f800 	bl	8000238 <__aeabi_dsub>
 8018238:	9e01      	ldr	r6, [sp, #4]
 801823a:	9f04      	ldr	r7, [sp, #16]
 801823c:	3630      	adds	r6, #48	; 0x30
 801823e:	f805 6b01 	strb.w	r6, [r5], #1
 8018242:	9e00      	ldr	r6, [sp, #0]
 8018244:	1bae      	subs	r6, r5, r6
 8018246:	42b7      	cmp	r7, r6
 8018248:	4602      	mov	r2, r0
 801824a:	460b      	mov	r3, r1
 801824c:	d134      	bne.n	80182b8 <_dtoa_r+0x708>
 801824e:	f7e7 fff5 	bl	800023c <__adddf3>
 8018252:	4642      	mov	r2, r8
 8018254:	464b      	mov	r3, r9
 8018256:	4606      	mov	r6, r0
 8018258:	460f      	mov	r7, r1
 801825a:	f7e8 fc35 	bl	8000ac8 <__aeabi_dcmpgt>
 801825e:	b9c8      	cbnz	r0, 8018294 <_dtoa_r+0x6e4>
 8018260:	4642      	mov	r2, r8
 8018262:	464b      	mov	r3, r9
 8018264:	4630      	mov	r0, r6
 8018266:	4639      	mov	r1, r7
 8018268:	f7e8 fc06 	bl	8000a78 <__aeabi_dcmpeq>
 801826c:	b110      	cbz	r0, 8018274 <_dtoa_r+0x6c4>
 801826e:	9b01      	ldr	r3, [sp, #4]
 8018270:	07db      	lsls	r3, r3, #31
 8018272:	d40f      	bmi.n	8018294 <_dtoa_r+0x6e4>
 8018274:	4651      	mov	r1, sl
 8018276:	4620      	mov	r0, r4
 8018278:	f000 fbcc 	bl	8018a14 <_Bfree>
 801827c:	2300      	movs	r3, #0
 801827e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018280:	702b      	strb	r3, [r5, #0]
 8018282:	f10b 0301 	add.w	r3, fp, #1
 8018286:	6013      	str	r3, [r2, #0]
 8018288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801828a:	2b00      	cmp	r3, #0
 801828c:	f43f ace2 	beq.w	8017c54 <_dtoa_r+0xa4>
 8018290:	601d      	str	r5, [r3, #0]
 8018292:	e4df      	b.n	8017c54 <_dtoa_r+0xa4>
 8018294:	465f      	mov	r7, fp
 8018296:	462b      	mov	r3, r5
 8018298:	461d      	mov	r5, r3
 801829a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801829e:	2a39      	cmp	r2, #57	; 0x39
 80182a0:	d106      	bne.n	80182b0 <_dtoa_r+0x700>
 80182a2:	9a00      	ldr	r2, [sp, #0]
 80182a4:	429a      	cmp	r2, r3
 80182a6:	d1f7      	bne.n	8018298 <_dtoa_r+0x6e8>
 80182a8:	9900      	ldr	r1, [sp, #0]
 80182aa:	2230      	movs	r2, #48	; 0x30
 80182ac:	3701      	adds	r7, #1
 80182ae:	700a      	strb	r2, [r1, #0]
 80182b0:	781a      	ldrb	r2, [r3, #0]
 80182b2:	3201      	adds	r2, #1
 80182b4:	701a      	strb	r2, [r3, #0]
 80182b6:	e790      	b.n	80181da <_dtoa_r+0x62a>
 80182b8:	4ba3      	ldr	r3, [pc, #652]	; (8018548 <_dtoa_r+0x998>)
 80182ba:	2200      	movs	r2, #0
 80182bc:	f7e8 f974 	bl	80005a8 <__aeabi_dmul>
 80182c0:	2200      	movs	r2, #0
 80182c2:	2300      	movs	r3, #0
 80182c4:	4606      	mov	r6, r0
 80182c6:	460f      	mov	r7, r1
 80182c8:	f7e8 fbd6 	bl	8000a78 <__aeabi_dcmpeq>
 80182cc:	2800      	cmp	r0, #0
 80182ce:	d09e      	beq.n	801820e <_dtoa_r+0x65e>
 80182d0:	e7d0      	b.n	8018274 <_dtoa_r+0x6c4>
 80182d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80182d4:	2a00      	cmp	r2, #0
 80182d6:	f000 80ca 	beq.w	801846e <_dtoa_r+0x8be>
 80182da:	9a07      	ldr	r2, [sp, #28]
 80182dc:	2a01      	cmp	r2, #1
 80182de:	f300 80ad 	bgt.w	801843c <_dtoa_r+0x88c>
 80182e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80182e4:	2a00      	cmp	r2, #0
 80182e6:	f000 80a5 	beq.w	8018434 <_dtoa_r+0x884>
 80182ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80182ee:	9e08      	ldr	r6, [sp, #32]
 80182f0:	9d05      	ldr	r5, [sp, #20]
 80182f2:	9a05      	ldr	r2, [sp, #20]
 80182f4:	441a      	add	r2, r3
 80182f6:	9205      	str	r2, [sp, #20]
 80182f8:	9a06      	ldr	r2, [sp, #24]
 80182fa:	2101      	movs	r1, #1
 80182fc:	441a      	add	r2, r3
 80182fe:	4620      	mov	r0, r4
 8018300:	9206      	str	r2, [sp, #24]
 8018302:	f000 fc3d 	bl	8018b80 <__i2b>
 8018306:	4607      	mov	r7, r0
 8018308:	b165      	cbz	r5, 8018324 <_dtoa_r+0x774>
 801830a:	9b06      	ldr	r3, [sp, #24]
 801830c:	2b00      	cmp	r3, #0
 801830e:	dd09      	ble.n	8018324 <_dtoa_r+0x774>
 8018310:	42ab      	cmp	r3, r5
 8018312:	9a05      	ldr	r2, [sp, #20]
 8018314:	bfa8      	it	ge
 8018316:	462b      	movge	r3, r5
 8018318:	1ad2      	subs	r2, r2, r3
 801831a:	9205      	str	r2, [sp, #20]
 801831c:	9a06      	ldr	r2, [sp, #24]
 801831e:	1aed      	subs	r5, r5, r3
 8018320:	1ad3      	subs	r3, r2, r3
 8018322:	9306      	str	r3, [sp, #24]
 8018324:	9b08      	ldr	r3, [sp, #32]
 8018326:	b1f3      	cbz	r3, 8018366 <_dtoa_r+0x7b6>
 8018328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801832a:	2b00      	cmp	r3, #0
 801832c:	f000 80a3 	beq.w	8018476 <_dtoa_r+0x8c6>
 8018330:	2e00      	cmp	r6, #0
 8018332:	dd10      	ble.n	8018356 <_dtoa_r+0x7a6>
 8018334:	4639      	mov	r1, r7
 8018336:	4632      	mov	r2, r6
 8018338:	4620      	mov	r0, r4
 801833a:	f000 fce1 	bl	8018d00 <__pow5mult>
 801833e:	4652      	mov	r2, sl
 8018340:	4601      	mov	r1, r0
 8018342:	4607      	mov	r7, r0
 8018344:	4620      	mov	r0, r4
 8018346:	f000 fc31 	bl	8018bac <__multiply>
 801834a:	4651      	mov	r1, sl
 801834c:	4680      	mov	r8, r0
 801834e:	4620      	mov	r0, r4
 8018350:	f000 fb60 	bl	8018a14 <_Bfree>
 8018354:	46c2      	mov	sl, r8
 8018356:	9b08      	ldr	r3, [sp, #32]
 8018358:	1b9a      	subs	r2, r3, r6
 801835a:	d004      	beq.n	8018366 <_dtoa_r+0x7b6>
 801835c:	4651      	mov	r1, sl
 801835e:	4620      	mov	r0, r4
 8018360:	f000 fcce 	bl	8018d00 <__pow5mult>
 8018364:	4682      	mov	sl, r0
 8018366:	2101      	movs	r1, #1
 8018368:	4620      	mov	r0, r4
 801836a:	f000 fc09 	bl	8018b80 <__i2b>
 801836e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018370:	2b00      	cmp	r3, #0
 8018372:	4606      	mov	r6, r0
 8018374:	f340 8081 	ble.w	801847a <_dtoa_r+0x8ca>
 8018378:	461a      	mov	r2, r3
 801837a:	4601      	mov	r1, r0
 801837c:	4620      	mov	r0, r4
 801837e:	f000 fcbf 	bl	8018d00 <__pow5mult>
 8018382:	9b07      	ldr	r3, [sp, #28]
 8018384:	2b01      	cmp	r3, #1
 8018386:	4606      	mov	r6, r0
 8018388:	dd7a      	ble.n	8018480 <_dtoa_r+0x8d0>
 801838a:	f04f 0800 	mov.w	r8, #0
 801838e:	6933      	ldr	r3, [r6, #16]
 8018390:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018394:	6918      	ldr	r0, [r3, #16]
 8018396:	f000 fba5 	bl	8018ae4 <__hi0bits>
 801839a:	f1c0 0020 	rsb	r0, r0, #32
 801839e:	9b06      	ldr	r3, [sp, #24]
 80183a0:	4418      	add	r0, r3
 80183a2:	f010 001f 	ands.w	r0, r0, #31
 80183a6:	f000 8094 	beq.w	80184d2 <_dtoa_r+0x922>
 80183aa:	f1c0 0320 	rsb	r3, r0, #32
 80183ae:	2b04      	cmp	r3, #4
 80183b0:	f340 8085 	ble.w	80184be <_dtoa_r+0x90e>
 80183b4:	9b05      	ldr	r3, [sp, #20]
 80183b6:	f1c0 001c 	rsb	r0, r0, #28
 80183ba:	4403      	add	r3, r0
 80183bc:	9305      	str	r3, [sp, #20]
 80183be:	9b06      	ldr	r3, [sp, #24]
 80183c0:	4403      	add	r3, r0
 80183c2:	4405      	add	r5, r0
 80183c4:	9306      	str	r3, [sp, #24]
 80183c6:	9b05      	ldr	r3, [sp, #20]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	dd05      	ble.n	80183d8 <_dtoa_r+0x828>
 80183cc:	4651      	mov	r1, sl
 80183ce:	461a      	mov	r2, r3
 80183d0:	4620      	mov	r0, r4
 80183d2:	f000 fcef 	bl	8018db4 <__lshift>
 80183d6:	4682      	mov	sl, r0
 80183d8:	9b06      	ldr	r3, [sp, #24]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	dd05      	ble.n	80183ea <_dtoa_r+0x83a>
 80183de:	4631      	mov	r1, r6
 80183e0:	461a      	mov	r2, r3
 80183e2:	4620      	mov	r0, r4
 80183e4:	f000 fce6 	bl	8018db4 <__lshift>
 80183e8:	4606      	mov	r6, r0
 80183ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d072      	beq.n	80184d6 <_dtoa_r+0x926>
 80183f0:	4631      	mov	r1, r6
 80183f2:	4650      	mov	r0, sl
 80183f4:	f000 fd4a 	bl	8018e8c <__mcmp>
 80183f8:	2800      	cmp	r0, #0
 80183fa:	da6c      	bge.n	80184d6 <_dtoa_r+0x926>
 80183fc:	2300      	movs	r3, #0
 80183fe:	4651      	mov	r1, sl
 8018400:	220a      	movs	r2, #10
 8018402:	4620      	mov	r0, r4
 8018404:	f000 fb28 	bl	8018a58 <__multadd>
 8018408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801840a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801840e:	4682      	mov	sl, r0
 8018410:	2b00      	cmp	r3, #0
 8018412:	f000 81b0 	beq.w	8018776 <_dtoa_r+0xbc6>
 8018416:	2300      	movs	r3, #0
 8018418:	4639      	mov	r1, r7
 801841a:	220a      	movs	r2, #10
 801841c:	4620      	mov	r0, r4
 801841e:	f000 fb1b 	bl	8018a58 <__multadd>
 8018422:	9b01      	ldr	r3, [sp, #4]
 8018424:	2b00      	cmp	r3, #0
 8018426:	4607      	mov	r7, r0
 8018428:	f300 8096 	bgt.w	8018558 <_dtoa_r+0x9a8>
 801842c:	9b07      	ldr	r3, [sp, #28]
 801842e:	2b02      	cmp	r3, #2
 8018430:	dc59      	bgt.n	80184e6 <_dtoa_r+0x936>
 8018432:	e091      	b.n	8018558 <_dtoa_r+0x9a8>
 8018434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801843a:	e758      	b.n	80182ee <_dtoa_r+0x73e>
 801843c:	9b04      	ldr	r3, [sp, #16]
 801843e:	1e5e      	subs	r6, r3, #1
 8018440:	9b08      	ldr	r3, [sp, #32]
 8018442:	42b3      	cmp	r3, r6
 8018444:	bfbf      	itttt	lt
 8018446:	9b08      	ldrlt	r3, [sp, #32]
 8018448:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801844a:	9608      	strlt	r6, [sp, #32]
 801844c:	1af3      	sublt	r3, r6, r3
 801844e:	bfb4      	ite	lt
 8018450:	18d2      	addlt	r2, r2, r3
 8018452:	1b9e      	subge	r6, r3, r6
 8018454:	9b04      	ldr	r3, [sp, #16]
 8018456:	bfbc      	itt	lt
 8018458:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801845a:	2600      	movlt	r6, #0
 801845c:	2b00      	cmp	r3, #0
 801845e:	bfb7      	itett	lt
 8018460:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8018464:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018468:	1a9d      	sublt	r5, r3, r2
 801846a:	2300      	movlt	r3, #0
 801846c:	e741      	b.n	80182f2 <_dtoa_r+0x742>
 801846e:	9e08      	ldr	r6, [sp, #32]
 8018470:	9d05      	ldr	r5, [sp, #20]
 8018472:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018474:	e748      	b.n	8018308 <_dtoa_r+0x758>
 8018476:	9a08      	ldr	r2, [sp, #32]
 8018478:	e770      	b.n	801835c <_dtoa_r+0x7ac>
 801847a:	9b07      	ldr	r3, [sp, #28]
 801847c:	2b01      	cmp	r3, #1
 801847e:	dc19      	bgt.n	80184b4 <_dtoa_r+0x904>
 8018480:	9b02      	ldr	r3, [sp, #8]
 8018482:	b9bb      	cbnz	r3, 80184b4 <_dtoa_r+0x904>
 8018484:	9b03      	ldr	r3, [sp, #12]
 8018486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801848a:	b99b      	cbnz	r3, 80184b4 <_dtoa_r+0x904>
 801848c:	9b03      	ldr	r3, [sp, #12]
 801848e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018492:	0d1b      	lsrs	r3, r3, #20
 8018494:	051b      	lsls	r3, r3, #20
 8018496:	b183      	cbz	r3, 80184ba <_dtoa_r+0x90a>
 8018498:	9b05      	ldr	r3, [sp, #20]
 801849a:	3301      	adds	r3, #1
 801849c:	9305      	str	r3, [sp, #20]
 801849e:	9b06      	ldr	r3, [sp, #24]
 80184a0:	3301      	adds	r3, #1
 80184a2:	9306      	str	r3, [sp, #24]
 80184a4:	f04f 0801 	mov.w	r8, #1
 80184a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	f47f af6f 	bne.w	801838e <_dtoa_r+0x7de>
 80184b0:	2001      	movs	r0, #1
 80184b2:	e774      	b.n	801839e <_dtoa_r+0x7ee>
 80184b4:	f04f 0800 	mov.w	r8, #0
 80184b8:	e7f6      	b.n	80184a8 <_dtoa_r+0x8f8>
 80184ba:	4698      	mov	r8, r3
 80184bc:	e7f4      	b.n	80184a8 <_dtoa_r+0x8f8>
 80184be:	d082      	beq.n	80183c6 <_dtoa_r+0x816>
 80184c0:	9a05      	ldr	r2, [sp, #20]
 80184c2:	331c      	adds	r3, #28
 80184c4:	441a      	add	r2, r3
 80184c6:	9205      	str	r2, [sp, #20]
 80184c8:	9a06      	ldr	r2, [sp, #24]
 80184ca:	441a      	add	r2, r3
 80184cc:	441d      	add	r5, r3
 80184ce:	9206      	str	r2, [sp, #24]
 80184d0:	e779      	b.n	80183c6 <_dtoa_r+0x816>
 80184d2:	4603      	mov	r3, r0
 80184d4:	e7f4      	b.n	80184c0 <_dtoa_r+0x910>
 80184d6:	9b04      	ldr	r3, [sp, #16]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	dc37      	bgt.n	801854c <_dtoa_r+0x99c>
 80184dc:	9b07      	ldr	r3, [sp, #28]
 80184de:	2b02      	cmp	r3, #2
 80184e0:	dd34      	ble.n	801854c <_dtoa_r+0x99c>
 80184e2:	9b04      	ldr	r3, [sp, #16]
 80184e4:	9301      	str	r3, [sp, #4]
 80184e6:	9b01      	ldr	r3, [sp, #4]
 80184e8:	b963      	cbnz	r3, 8018504 <_dtoa_r+0x954>
 80184ea:	4631      	mov	r1, r6
 80184ec:	2205      	movs	r2, #5
 80184ee:	4620      	mov	r0, r4
 80184f0:	f000 fab2 	bl	8018a58 <__multadd>
 80184f4:	4601      	mov	r1, r0
 80184f6:	4606      	mov	r6, r0
 80184f8:	4650      	mov	r0, sl
 80184fa:	f000 fcc7 	bl	8018e8c <__mcmp>
 80184fe:	2800      	cmp	r0, #0
 8018500:	f73f adbb 	bgt.w	801807a <_dtoa_r+0x4ca>
 8018504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018506:	9d00      	ldr	r5, [sp, #0]
 8018508:	ea6f 0b03 	mvn.w	fp, r3
 801850c:	f04f 0800 	mov.w	r8, #0
 8018510:	4631      	mov	r1, r6
 8018512:	4620      	mov	r0, r4
 8018514:	f000 fa7e 	bl	8018a14 <_Bfree>
 8018518:	2f00      	cmp	r7, #0
 801851a:	f43f aeab 	beq.w	8018274 <_dtoa_r+0x6c4>
 801851e:	f1b8 0f00 	cmp.w	r8, #0
 8018522:	d005      	beq.n	8018530 <_dtoa_r+0x980>
 8018524:	45b8      	cmp	r8, r7
 8018526:	d003      	beq.n	8018530 <_dtoa_r+0x980>
 8018528:	4641      	mov	r1, r8
 801852a:	4620      	mov	r0, r4
 801852c:	f000 fa72 	bl	8018a14 <_Bfree>
 8018530:	4639      	mov	r1, r7
 8018532:	4620      	mov	r0, r4
 8018534:	f000 fa6e 	bl	8018a14 <_Bfree>
 8018538:	e69c      	b.n	8018274 <_dtoa_r+0x6c4>
 801853a:	2600      	movs	r6, #0
 801853c:	4637      	mov	r7, r6
 801853e:	e7e1      	b.n	8018504 <_dtoa_r+0x954>
 8018540:	46bb      	mov	fp, r7
 8018542:	4637      	mov	r7, r6
 8018544:	e599      	b.n	801807a <_dtoa_r+0x4ca>
 8018546:	bf00      	nop
 8018548:	40240000 	.word	0x40240000
 801854c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801854e:	2b00      	cmp	r3, #0
 8018550:	f000 80c8 	beq.w	80186e4 <_dtoa_r+0xb34>
 8018554:	9b04      	ldr	r3, [sp, #16]
 8018556:	9301      	str	r3, [sp, #4]
 8018558:	2d00      	cmp	r5, #0
 801855a:	dd05      	ble.n	8018568 <_dtoa_r+0x9b8>
 801855c:	4639      	mov	r1, r7
 801855e:	462a      	mov	r2, r5
 8018560:	4620      	mov	r0, r4
 8018562:	f000 fc27 	bl	8018db4 <__lshift>
 8018566:	4607      	mov	r7, r0
 8018568:	f1b8 0f00 	cmp.w	r8, #0
 801856c:	d05b      	beq.n	8018626 <_dtoa_r+0xa76>
 801856e:	6879      	ldr	r1, [r7, #4]
 8018570:	4620      	mov	r0, r4
 8018572:	f000 fa0f 	bl	8018994 <_Balloc>
 8018576:	4605      	mov	r5, r0
 8018578:	b928      	cbnz	r0, 8018586 <_dtoa_r+0x9d6>
 801857a:	4b83      	ldr	r3, [pc, #524]	; (8018788 <_dtoa_r+0xbd8>)
 801857c:	4602      	mov	r2, r0
 801857e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018582:	f7ff bb2e 	b.w	8017be2 <_dtoa_r+0x32>
 8018586:	693a      	ldr	r2, [r7, #16]
 8018588:	3202      	adds	r2, #2
 801858a:	0092      	lsls	r2, r2, #2
 801858c:	f107 010c 	add.w	r1, r7, #12
 8018590:	300c      	adds	r0, #12
 8018592:	f7ff fa74 	bl	8017a7e <memcpy>
 8018596:	2201      	movs	r2, #1
 8018598:	4629      	mov	r1, r5
 801859a:	4620      	mov	r0, r4
 801859c:	f000 fc0a 	bl	8018db4 <__lshift>
 80185a0:	9b00      	ldr	r3, [sp, #0]
 80185a2:	3301      	adds	r3, #1
 80185a4:	9304      	str	r3, [sp, #16]
 80185a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80185aa:	4413      	add	r3, r2
 80185ac:	9308      	str	r3, [sp, #32]
 80185ae:	9b02      	ldr	r3, [sp, #8]
 80185b0:	f003 0301 	and.w	r3, r3, #1
 80185b4:	46b8      	mov	r8, r7
 80185b6:	9306      	str	r3, [sp, #24]
 80185b8:	4607      	mov	r7, r0
 80185ba:	9b04      	ldr	r3, [sp, #16]
 80185bc:	4631      	mov	r1, r6
 80185be:	3b01      	subs	r3, #1
 80185c0:	4650      	mov	r0, sl
 80185c2:	9301      	str	r3, [sp, #4]
 80185c4:	f7ff fa69 	bl	8017a9a <quorem>
 80185c8:	4641      	mov	r1, r8
 80185ca:	9002      	str	r0, [sp, #8]
 80185cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80185d0:	4650      	mov	r0, sl
 80185d2:	f000 fc5b 	bl	8018e8c <__mcmp>
 80185d6:	463a      	mov	r2, r7
 80185d8:	9005      	str	r0, [sp, #20]
 80185da:	4631      	mov	r1, r6
 80185dc:	4620      	mov	r0, r4
 80185de:	f000 fc71 	bl	8018ec4 <__mdiff>
 80185e2:	68c2      	ldr	r2, [r0, #12]
 80185e4:	4605      	mov	r5, r0
 80185e6:	bb02      	cbnz	r2, 801862a <_dtoa_r+0xa7a>
 80185e8:	4601      	mov	r1, r0
 80185ea:	4650      	mov	r0, sl
 80185ec:	f000 fc4e 	bl	8018e8c <__mcmp>
 80185f0:	4602      	mov	r2, r0
 80185f2:	4629      	mov	r1, r5
 80185f4:	4620      	mov	r0, r4
 80185f6:	9209      	str	r2, [sp, #36]	; 0x24
 80185f8:	f000 fa0c 	bl	8018a14 <_Bfree>
 80185fc:	9b07      	ldr	r3, [sp, #28]
 80185fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018600:	9d04      	ldr	r5, [sp, #16]
 8018602:	ea43 0102 	orr.w	r1, r3, r2
 8018606:	9b06      	ldr	r3, [sp, #24]
 8018608:	4319      	orrs	r1, r3
 801860a:	d110      	bne.n	801862e <_dtoa_r+0xa7e>
 801860c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018610:	d029      	beq.n	8018666 <_dtoa_r+0xab6>
 8018612:	9b05      	ldr	r3, [sp, #20]
 8018614:	2b00      	cmp	r3, #0
 8018616:	dd02      	ble.n	801861e <_dtoa_r+0xa6e>
 8018618:	9b02      	ldr	r3, [sp, #8]
 801861a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801861e:	9b01      	ldr	r3, [sp, #4]
 8018620:	f883 9000 	strb.w	r9, [r3]
 8018624:	e774      	b.n	8018510 <_dtoa_r+0x960>
 8018626:	4638      	mov	r0, r7
 8018628:	e7ba      	b.n	80185a0 <_dtoa_r+0x9f0>
 801862a:	2201      	movs	r2, #1
 801862c:	e7e1      	b.n	80185f2 <_dtoa_r+0xa42>
 801862e:	9b05      	ldr	r3, [sp, #20]
 8018630:	2b00      	cmp	r3, #0
 8018632:	db04      	blt.n	801863e <_dtoa_r+0xa8e>
 8018634:	9907      	ldr	r1, [sp, #28]
 8018636:	430b      	orrs	r3, r1
 8018638:	9906      	ldr	r1, [sp, #24]
 801863a:	430b      	orrs	r3, r1
 801863c:	d120      	bne.n	8018680 <_dtoa_r+0xad0>
 801863e:	2a00      	cmp	r2, #0
 8018640:	dded      	ble.n	801861e <_dtoa_r+0xa6e>
 8018642:	4651      	mov	r1, sl
 8018644:	2201      	movs	r2, #1
 8018646:	4620      	mov	r0, r4
 8018648:	f000 fbb4 	bl	8018db4 <__lshift>
 801864c:	4631      	mov	r1, r6
 801864e:	4682      	mov	sl, r0
 8018650:	f000 fc1c 	bl	8018e8c <__mcmp>
 8018654:	2800      	cmp	r0, #0
 8018656:	dc03      	bgt.n	8018660 <_dtoa_r+0xab0>
 8018658:	d1e1      	bne.n	801861e <_dtoa_r+0xa6e>
 801865a:	f019 0f01 	tst.w	r9, #1
 801865e:	d0de      	beq.n	801861e <_dtoa_r+0xa6e>
 8018660:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018664:	d1d8      	bne.n	8018618 <_dtoa_r+0xa68>
 8018666:	9a01      	ldr	r2, [sp, #4]
 8018668:	2339      	movs	r3, #57	; 0x39
 801866a:	7013      	strb	r3, [r2, #0]
 801866c:	462b      	mov	r3, r5
 801866e:	461d      	mov	r5, r3
 8018670:	3b01      	subs	r3, #1
 8018672:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018676:	2a39      	cmp	r2, #57	; 0x39
 8018678:	d06c      	beq.n	8018754 <_dtoa_r+0xba4>
 801867a:	3201      	adds	r2, #1
 801867c:	701a      	strb	r2, [r3, #0]
 801867e:	e747      	b.n	8018510 <_dtoa_r+0x960>
 8018680:	2a00      	cmp	r2, #0
 8018682:	dd07      	ble.n	8018694 <_dtoa_r+0xae4>
 8018684:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018688:	d0ed      	beq.n	8018666 <_dtoa_r+0xab6>
 801868a:	9a01      	ldr	r2, [sp, #4]
 801868c:	f109 0301 	add.w	r3, r9, #1
 8018690:	7013      	strb	r3, [r2, #0]
 8018692:	e73d      	b.n	8018510 <_dtoa_r+0x960>
 8018694:	9b04      	ldr	r3, [sp, #16]
 8018696:	9a08      	ldr	r2, [sp, #32]
 8018698:	f803 9c01 	strb.w	r9, [r3, #-1]
 801869c:	4293      	cmp	r3, r2
 801869e:	d043      	beq.n	8018728 <_dtoa_r+0xb78>
 80186a0:	4651      	mov	r1, sl
 80186a2:	2300      	movs	r3, #0
 80186a4:	220a      	movs	r2, #10
 80186a6:	4620      	mov	r0, r4
 80186a8:	f000 f9d6 	bl	8018a58 <__multadd>
 80186ac:	45b8      	cmp	r8, r7
 80186ae:	4682      	mov	sl, r0
 80186b0:	f04f 0300 	mov.w	r3, #0
 80186b4:	f04f 020a 	mov.w	r2, #10
 80186b8:	4641      	mov	r1, r8
 80186ba:	4620      	mov	r0, r4
 80186bc:	d107      	bne.n	80186ce <_dtoa_r+0xb1e>
 80186be:	f000 f9cb 	bl	8018a58 <__multadd>
 80186c2:	4680      	mov	r8, r0
 80186c4:	4607      	mov	r7, r0
 80186c6:	9b04      	ldr	r3, [sp, #16]
 80186c8:	3301      	adds	r3, #1
 80186ca:	9304      	str	r3, [sp, #16]
 80186cc:	e775      	b.n	80185ba <_dtoa_r+0xa0a>
 80186ce:	f000 f9c3 	bl	8018a58 <__multadd>
 80186d2:	4639      	mov	r1, r7
 80186d4:	4680      	mov	r8, r0
 80186d6:	2300      	movs	r3, #0
 80186d8:	220a      	movs	r2, #10
 80186da:	4620      	mov	r0, r4
 80186dc:	f000 f9bc 	bl	8018a58 <__multadd>
 80186e0:	4607      	mov	r7, r0
 80186e2:	e7f0      	b.n	80186c6 <_dtoa_r+0xb16>
 80186e4:	9b04      	ldr	r3, [sp, #16]
 80186e6:	9301      	str	r3, [sp, #4]
 80186e8:	9d00      	ldr	r5, [sp, #0]
 80186ea:	4631      	mov	r1, r6
 80186ec:	4650      	mov	r0, sl
 80186ee:	f7ff f9d4 	bl	8017a9a <quorem>
 80186f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80186f6:	9b00      	ldr	r3, [sp, #0]
 80186f8:	f805 9b01 	strb.w	r9, [r5], #1
 80186fc:	1aea      	subs	r2, r5, r3
 80186fe:	9b01      	ldr	r3, [sp, #4]
 8018700:	4293      	cmp	r3, r2
 8018702:	dd07      	ble.n	8018714 <_dtoa_r+0xb64>
 8018704:	4651      	mov	r1, sl
 8018706:	2300      	movs	r3, #0
 8018708:	220a      	movs	r2, #10
 801870a:	4620      	mov	r0, r4
 801870c:	f000 f9a4 	bl	8018a58 <__multadd>
 8018710:	4682      	mov	sl, r0
 8018712:	e7ea      	b.n	80186ea <_dtoa_r+0xb3a>
 8018714:	9b01      	ldr	r3, [sp, #4]
 8018716:	2b00      	cmp	r3, #0
 8018718:	bfc8      	it	gt
 801871a:	461d      	movgt	r5, r3
 801871c:	9b00      	ldr	r3, [sp, #0]
 801871e:	bfd8      	it	le
 8018720:	2501      	movle	r5, #1
 8018722:	441d      	add	r5, r3
 8018724:	f04f 0800 	mov.w	r8, #0
 8018728:	4651      	mov	r1, sl
 801872a:	2201      	movs	r2, #1
 801872c:	4620      	mov	r0, r4
 801872e:	f000 fb41 	bl	8018db4 <__lshift>
 8018732:	4631      	mov	r1, r6
 8018734:	4682      	mov	sl, r0
 8018736:	f000 fba9 	bl	8018e8c <__mcmp>
 801873a:	2800      	cmp	r0, #0
 801873c:	dc96      	bgt.n	801866c <_dtoa_r+0xabc>
 801873e:	d102      	bne.n	8018746 <_dtoa_r+0xb96>
 8018740:	f019 0f01 	tst.w	r9, #1
 8018744:	d192      	bne.n	801866c <_dtoa_r+0xabc>
 8018746:	462b      	mov	r3, r5
 8018748:	461d      	mov	r5, r3
 801874a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801874e:	2a30      	cmp	r2, #48	; 0x30
 8018750:	d0fa      	beq.n	8018748 <_dtoa_r+0xb98>
 8018752:	e6dd      	b.n	8018510 <_dtoa_r+0x960>
 8018754:	9a00      	ldr	r2, [sp, #0]
 8018756:	429a      	cmp	r2, r3
 8018758:	d189      	bne.n	801866e <_dtoa_r+0xabe>
 801875a:	f10b 0b01 	add.w	fp, fp, #1
 801875e:	2331      	movs	r3, #49	; 0x31
 8018760:	e796      	b.n	8018690 <_dtoa_r+0xae0>
 8018762:	4b0a      	ldr	r3, [pc, #40]	; (801878c <_dtoa_r+0xbdc>)
 8018764:	f7ff ba99 	b.w	8017c9a <_dtoa_r+0xea>
 8018768:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801876a:	2b00      	cmp	r3, #0
 801876c:	f47f aa6d 	bne.w	8017c4a <_dtoa_r+0x9a>
 8018770:	4b07      	ldr	r3, [pc, #28]	; (8018790 <_dtoa_r+0xbe0>)
 8018772:	f7ff ba92 	b.w	8017c9a <_dtoa_r+0xea>
 8018776:	9b01      	ldr	r3, [sp, #4]
 8018778:	2b00      	cmp	r3, #0
 801877a:	dcb5      	bgt.n	80186e8 <_dtoa_r+0xb38>
 801877c:	9b07      	ldr	r3, [sp, #28]
 801877e:	2b02      	cmp	r3, #2
 8018780:	f73f aeb1 	bgt.w	80184e6 <_dtoa_r+0x936>
 8018784:	e7b0      	b.n	80186e8 <_dtoa_r+0xb38>
 8018786:	bf00      	nop
 8018788:	0802f93c 	.word	0x0802f93c
 801878c:	0802f89c 	.word	0x0802f89c
 8018790:	0802f8c0 	.word	0x0802f8c0

08018794 <_free_r>:
 8018794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018796:	2900      	cmp	r1, #0
 8018798:	d044      	beq.n	8018824 <_free_r+0x90>
 801879a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801879e:	9001      	str	r0, [sp, #4]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	f1a1 0404 	sub.w	r4, r1, #4
 80187a6:	bfb8      	it	lt
 80187a8:	18e4      	addlt	r4, r4, r3
 80187aa:	f000 f8e7 	bl	801897c <__malloc_lock>
 80187ae:	4a1e      	ldr	r2, [pc, #120]	; (8018828 <_free_r+0x94>)
 80187b0:	9801      	ldr	r0, [sp, #4]
 80187b2:	6813      	ldr	r3, [r2, #0]
 80187b4:	b933      	cbnz	r3, 80187c4 <_free_r+0x30>
 80187b6:	6063      	str	r3, [r4, #4]
 80187b8:	6014      	str	r4, [r2, #0]
 80187ba:	b003      	add	sp, #12
 80187bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80187c0:	f000 b8e2 	b.w	8018988 <__malloc_unlock>
 80187c4:	42a3      	cmp	r3, r4
 80187c6:	d908      	bls.n	80187da <_free_r+0x46>
 80187c8:	6825      	ldr	r5, [r4, #0]
 80187ca:	1961      	adds	r1, r4, r5
 80187cc:	428b      	cmp	r3, r1
 80187ce:	bf01      	itttt	eq
 80187d0:	6819      	ldreq	r1, [r3, #0]
 80187d2:	685b      	ldreq	r3, [r3, #4]
 80187d4:	1949      	addeq	r1, r1, r5
 80187d6:	6021      	streq	r1, [r4, #0]
 80187d8:	e7ed      	b.n	80187b6 <_free_r+0x22>
 80187da:	461a      	mov	r2, r3
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	b10b      	cbz	r3, 80187e4 <_free_r+0x50>
 80187e0:	42a3      	cmp	r3, r4
 80187e2:	d9fa      	bls.n	80187da <_free_r+0x46>
 80187e4:	6811      	ldr	r1, [r2, #0]
 80187e6:	1855      	adds	r5, r2, r1
 80187e8:	42a5      	cmp	r5, r4
 80187ea:	d10b      	bne.n	8018804 <_free_r+0x70>
 80187ec:	6824      	ldr	r4, [r4, #0]
 80187ee:	4421      	add	r1, r4
 80187f0:	1854      	adds	r4, r2, r1
 80187f2:	42a3      	cmp	r3, r4
 80187f4:	6011      	str	r1, [r2, #0]
 80187f6:	d1e0      	bne.n	80187ba <_free_r+0x26>
 80187f8:	681c      	ldr	r4, [r3, #0]
 80187fa:	685b      	ldr	r3, [r3, #4]
 80187fc:	6053      	str	r3, [r2, #4]
 80187fe:	440c      	add	r4, r1
 8018800:	6014      	str	r4, [r2, #0]
 8018802:	e7da      	b.n	80187ba <_free_r+0x26>
 8018804:	d902      	bls.n	801880c <_free_r+0x78>
 8018806:	230c      	movs	r3, #12
 8018808:	6003      	str	r3, [r0, #0]
 801880a:	e7d6      	b.n	80187ba <_free_r+0x26>
 801880c:	6825      	ldr	r5, [r4, #0]
 801880e:	1961      	adds	r1, r4, r5
 8018810:	428b      	cmp	r3, r1
 8018812:	bf04      	itt	eq
 8018814:	6819      	ldreq	r1, [r3, #0]
 8018816:	685b      	ldreq	r3, [r3, #4]
 8018818:	6063      	str	r3, [r4, #4]
 801881a:	bf04      	itt	eq
 801881c:	1949      	addeq	r1, r1, r5
 801881e:	6021      	streq	r1, [r4, #0]
 8018820:	6054      	str	r4, [r2, #4]
 8018822:	e7ca      	b.n	80187ba <_free_r+0x26>
 8018824:	b003      	add	sp, #12
 8018826:	bd30      	pop	{r4, r5, pc}
 8018828:	20003ef4 	.word	0x20003ef4

0801882c <malloc>:
 801882c:	4b02      	ldr	r3, [pc, #8]	; (8018838 <malloc+0xc>)
 801882e:	4601      	mov	r1, r0
 8018830:	6818      	ldr	r0, [r3, #0]
 8018832:	f000 b823 	b.w	801887c <_malloc_r>
 8018836:	bf00      	nop
 8018838:	200001d4 	.word	0x200001d4

0801883c <sbrk_aligned>:
 801883c:	b570      	push	{r4, r5, r6, lr}
 801883e:	4e0e      	ldr	r6, [pc, #56]	; (8018878 <sbrk_aligned+0x3c>)
 8018840:	460c      	mov	r4, r1
 8018842:	6831      	ldr	r1, [r6, #0]
 8018844:	4605      	mov	r5, r0
 8018846:	b911      	cbnz	r1, 801884e <sbrk_aligned+0x12>
 8018848:	f000 feca 	bl	80195e0 <_sbrk_r>
 801884c:	6030      	str	r0, [r6, #0]
 801884e:	4621      	mov	r1, r4
 8018850:	4628      	mov	r0, r5
 8018852:	f000 fec5 	bl	80195e0 <_sbrk_r>
 8018856:	1c43      	adds	r3, r0, #1
 8018858:	d00a      	beq.n	8018870 <sbrk_aligned+0x34>
 801885a:	1cc4      	adds	r4, r0, #3
 801885c:	f024 0403 	bic.w	r4, r4, #3
 8018860:	42a0      	cmp	r0, r4
 8018862:	d007      	beq.n	8018874 <sbrk_aligned+0x38>
 8018864:	1a21      	subs	r1, r4, r0
 8018866:	4628      	mov	r0, r5
 8018868:	f000 feba 	bl	80195e0 <_sbrk_r>
 801886c:	3001      	adds	r0, #1
 801886e:	d101      	bne.n	8018874 <sbrk_aligned+0x38>
 8018870:	f04f 34ff 	mov.w	r4, #4294967295
 8018874:	4620      	mov	r0, r4
 8018876:	bd70      	pop	{r4, r5, r6, pc}
 8018878:	20003ef8 	.word	0x20003ef8

0801887c <_malloc_r>:
 801887c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018880:	1ccd      	adds	r5, r1, #3
 8018882:	f025 0503 	bic.w	r5, r5, #3
 8018886:	3508      	adds	r5, #8
 8018888:	2d0c      	cmp	r5, #12
 801888a:	bf38      	it	cc
 801888c:	250c      	movcc	r5, #12
 801888e:	2d00      	cmp	r5, #0
 8018890:	4607      	mov	r7, r0
 8018892:	db01      	blt.n	8018898 <_malloc_r+0x1c>
 8018894:	42a9      	cmp	r1, r5
 8018896:	d905      	bls.n	80188a4 <_malloc_r+0x28>
 8018898:	230c      	movs	r3, #12
 801889a:	603b      	str	r3, [r7, #0]
 801889c:	2600      	movs	r6, #0
 801889e:	4630      	mov	r0, r6
 80188a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018978 <_malloc_r+0xfc>
 80188a8:	f000 f868 	bl	801897c <__malloc_lock>
 80188ac:	f8d8 3000 	ldr.w	r3, [r8]
 80188b0:	461c      	mov	r4, r3
 80188b2:	bb5c      	cbnz	r4, 801890c <_malloc_r+0x90>
 80188b4:	4629      	mov	r1, r5
 80188b6:	4638      	mov	r0, r7
 80188b8:	f7ff ffc0 	bl	801883c <sbrk_aligned>
 80188bc:	1c43      	adds	r3, r0, #1
 80188be:	4604      	mov	r4, r0
 80188c0:	d155      	bne.n	801896e <_malloc_r+0xf2>
 80188c2:	f8d8 4000 	ldr.w	r4, [r8]
 80188c6:	4626      	mov	r6, r4
 80188c8:	2e00      	cmp	r6, #0
 80188ca:	d145      	bne.n	8018958 <_malloc_r+0xdc>
 80188cc:	2c00      	cmp	r4, #0
 80188ce:	d048      	beq.n	8018962 <_malloc_r+0xe6>
 80188d0:	6823      	ldr	r3, [r4, #0]
 80188d2:	4631      	mov	r1, r6
 80188d4:	4638      	mov	r0, r7
 80188d6:	eb04 0903 	add.w	r9, r4, r3
 80188da:	f000 fe81 	bl	80195e0 <_sbrk_r>
 80188de:	4581      	cmp	r9, r0
 80188e0:	d13f      	bne.n	8018962 <_malloc_r+0xe6>
 80188e2:	6821      	ldr	r1, [r4, #0]
 80188e4:	1a6d      	subs	r5, r5, r1
 80188e6:	4629      	mov	r1, r5
 80188e8:	4638      	mov	r0, r7
 80188ea:	f7ff ffa7 	bl	801883c <sbrk_aligned>
 80188ee:	3001      	adds	r0, #1
 80188f0:	d037      	beq.n	8018962 <_malloc_r+0xe6>
 80188f2:	6823      	ldr	r3, [r4, #0]
 80188f4:	442b      	add	r3, r5
 80188f6:	6023      	str	r3, [r4, #0]
 80188f8:	f8d8 3000 	ldr.w	r3, [r8]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d038      	beq.n	8018972 <_malloc_r+0xf6>
 8018900:	685a      	ldr	r2, [r3, #4]
 8018902:	42a2      	cmp	r2, r4
 8018904:	d12b      	bne.n	801895e <_malloc_r+0xe2>
 8018906:	2200      	movs	r2, #0
 8018908:	605a      	str	r2, [r3, #4]
 801890a:	e00f      	b.n	801892c <_malloc_r+0xb0>
 801890c:	6822      	ldr	r2, [r4, #0]
 801890e:	1b52      	subs	r2, r2, r5
 8018910:	d41f      	bmi.n	8018952 <_malloc_r+0xd6>
 8018912:	2a0b      	cmp	r2, #11
 8018914:	d917      	bls.n	8018946 <_malloc_r+0xca>
 8018916:	1961      	adds	r1, r4, r5
 8018918:	42a3      	cmp	r3, r4
 801891a:	6025      	str	r5, [r4, #0]
 801891c:	bf18      	it	ne
 801891e:	6059      	strne	r1, [r3, #4]
 8018920:	6863      	ldr	r3, [r4, #4]
 8018922:	bf08      	it	eq
 8018924:	f8c8 1000 	streq.w	r1, [r8]
 8018928:	5162      	str	r2, [r4, r5]
 801892a:	604b      	str	r3, [r1, #4]
 801892c:	4638      	mov	r0, r7
 801892e:	f104 060b 	add.w	r6, r4, #11
 8018932:	f000 f829 	bl	8018988 <__malloc_unlock>
 8018936:	f026 0607 	bic.w	r6, r6, #7
 801893a:	1d23      	adds	r3, r4, #4
 801893c:	1af2      	subs	r2, r6, r3
 801893e:	d0ae      	beq.n	801889e <_malloc_r+0x22>
 8018940:	1b9b      	subs	r3, r3, r6
 8018942:	50a3      	str	r3, [r4, r2]
 8018944:	e7ab      	b.n	801889e <_malloc_r+0x22>
 8018946:	42a3      	cmp	r3, r4
 8018948:	6862      	ldr	r2, [r4, #4]
 801894a:	d1dd      	bne.n	8018908 <_malloc_r+0x8c>
 801894c:	f8c8 2000 	str.w	r2, [r8]
 8018950:	e7ec      	b.n	801892c <_malloc_r+0xb0>
 8018952:	4623      	mov	r3, r4
 8018954:	6864      	ldr	r4, [r4, #4]
 8018956:	e7ac      	b.n	80188b2 <_malloc_r+0x36>
 8018958:	4634      	mov	r4, r6
 801895a:	6876      	ldr	r6, [r6, #4]
 801895c:	e7b4      	b.n	80188c8 <_malloc_r+0x4c>
 801895e:	4613      	mov	r3, r2
 8018960:	e7cc      	b.n	80188fc <_malloc_r+0x80>
 8018962:	230c      	movs	r3, #12
 8018964:	603b      	str	r3, [r7, #0]
 8018966:	4638      	mov	r0, r7
 8018968:	f000 f80e 	bl	8018988 <__malloc_unlock>
 801896c:	e797      	b.n	801889e <_malloc_r+0x22>
 801896e:	6025      	str	r5, [r4, #0]
 8018970:	e7dc      	b.n	801892c <_malloc_r+0xb0>
 8018972:	605b      	str	r3, [r3, #4]
 8018974:	deff      	udf	#255	; 0xff
 8018976:	bf00      	nop
 8018978:	20003ef4 	.word	0x20003ef4

0801897c <__malloc_lock>:
 801897c:	4801      	ldr	r0, [pc, #4]	; (8018984 <__malloc_lock+0x8>)
 801897e:	f7ff b87c 	b.w	8017a7a <__retarget_lock_acquire_recursive>
 8018982:	bf00      	nop
 8018984:	20003ef0 	.word	0x20003ef0

08018988 <__malloc_unlock>:
 8018988:	4801      	ldr	r0, [pc, #4]	; (8018990 <__malloc_unlock+0x8>)
 801898a:	f7ff b877 	b.w	8017a7c <__retarget_lock_release_recursive>
 801898e:	bf00      	nop
 8018990:	20003ef0 	.word	0x20003ef0

08018994 <_Balloc>:
 8018994:	b570      	push	{r4, r5, r6, lr}
 8018996:	69c6      	ldr	r6, [r0, #28]
 8018998:	4604      	mov	r4, r0
 801899a:	460d      	mov	r5, r1
 801899c:	b976      	cbnz	r6, 80189bc <_Balloc+0x28>
 801899e:	2010      	movs	r0, #16
 80189a0:	f7ff ff44 	bl	801882c <malloc>
 80189a4:	4602      	mov	r2, r0
 80189a6:	61e0      	str	r0, [r4, #28]
 80189a8:	b920      	cbnz	r0, 80189b4 <_Balloc+0x20>
 80189aa:	4b18      	ldr	r3, [pc, #96]	; (8018a0c <_Balloc+0x78>)
 80189ac:	4818      	ldr	r0, [pc, #96]	; (8018a10 <_Balloc+0x7c>)
 80189ae:	216b      	movs	r1, #107	; 0x6b
 80189b0:	f000 fe26 	bl	8019600 <__assert_func>
 80189b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80189b8:	6006      	str	r6, [r0, #0]
 80189ba:	60c6      	str	r6, [r0, #12]
 80189bc:	69e6      	ldr	r6, [r4, #28]
 80189be:	68f3      	ldr	r3, [r6, #12]
 80189c0:	b183      	cbz	r3, 80189e4 <_Balloc+0x50>
 80189c2:	69e3      	ldr	r3, [r4, #28]
 80189c4:	68db      	ldr	r3, [r3, #12]
 80189c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80189ca:	b9b8      	cbnz	r0, 80189fc <_Balloc+0x68>
 80189cc:	2101      	movs	r1, #1
 80189ce:	fa01 f605 	lsl.w	r6, r1, r5
 80189d2:	1d72      	adds	r2, r6, #5
 80189d4:	0092      	lsls	r2, r2, #2
 80189d6:	4620      	mov	r0, r4
 80189d8:	f000 fe30 	bl	801963c <_calloc_r>
 80189dc:	b160      	cbz	r0, 80189f8 <_Balloc+0x64>
 80189de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80189e2:	e00e      	b.n	8018a02 <_Balloc+0x6e>
 80189e4:	2221      	movs	r2, #33	; 0x21
 80189e6:	2104      	movs	r1, #4
 80189e8:	4620      	mov	r0, r4
 80189ea:	f000 fe27 	bl	801963c <_calloc_r>
 80189ee:	69e3      	ldr	r3, [r4, #28]
 80189f0:	60f0      	str	r0, [r6, #12]
 80189f2:	68db      	ldr	r3, [r3, #12]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d1e4      	bne.n	80189c2 <_Balloc+0x2e>
 80189f8:	2000      	movs	r0, #0
 80189fa:	bd70      	pop	{r4, r5, r6, pc}
 80189fc:	6802      	ldr	r2, [r0, #0]
 80189fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018a02:	2300      	movs	r3, #0
 8018a04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018a08:	e7f7      	b.n	80189fa <_Balloc+0x66>
 8018a0a:	bf00      	nop
 8018a0c:	0802f8cd 	.word	0x0802f8cd
 8018a10:	0802f94d 	.word	0x0802f94d

08018a14 <_Bfree>:
 8018a14:	b570      	push	{r4, r5, r6, lr}
 8018a16:	69c6      	ldr	r6, [r0, #28]
 8018a18:	4605      	mov	r5, r0
 8018a1a:	460c      	mov	r4, r1
 8018a1c:	b976      	cbnz	r6, 8018a3c <_Bfree+0x28>
 8018a1e:	2010      	movs	r0, #16
 8018a20:	f7ff ff04 	bl	801882c <malloc>
 8018a24:	4602      	mov	r2, r0
 8018a26:	61e8      	str	r0, [r5, #28]
 8018a28:	b920      	cbnz	r0, 8018a34 <_Bfree+0x20>
 8018a2a:	4b09      	ldr	r3, [pc, #36]	; (8018a50 <_Bfree+0x3c>)
 8018a2c:	4809      	ldr	r0, [pc, #36]	; (8018a54 <_Bfree+0x40>)
 8018a2e:	218f      	movs	r1, #143	; 0x8f
 8018a30:	f000 fde6 	bl	8019600 <__assert_func>
 8018a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018a38:	6006      	str	r6, [r0, #0]
 8018a3a:	60c6      	str	r6, [r0, #12]
 8018a3c:	b13c      	cbz	r4, 8018a4e <_Bfree+0x3a>
 8018a3e:	69eb      	ldr	r3, [r5, #28]
 8018a40:	6862      	ldr	r2, [r4, #4]
 8018a42:	68db      	ldr	r3, [r3, #12]
 8018a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018a48:	6021      	str	r1, [r4, #0]
 8018a4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018a4e:	bd70      	pop	{r4, r5, r6, pc}
 8018a50:	0802f8cd 	.word	0x0802f8cd
 8018a54:	0802f94d 	.word	0x0802f94d

08018a58 <__multadd>:
 8018a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a5c:	690d      	ldr	r5, [r1, #16]
 8018a5e:	4607      	mov	r7, r0
 8018a60:	460c      	mov	r4, r1
 8018a62:	461e      	mov	r6, r3
 8018a64:	f101 0c14 	add.w	ip, r1, #20
 8018a68:	2000      	movs	r0, #0
 8018a6a:	f8dc 3000 	ldr.w	r3, [ip]
 8018a6e:	b299      	uxth	r1, r3
 8018a70:	fb02 6101 	mla	r1, r2, r1, r6
 8018a74:	0c1e      	lsrs	r6, r3, #16
 8018a76:	0c0b      	lsrs	r3, r1, #16
 8018a78:	fb02 3306 	mla	r3, r2, r6, r3
 8018a7c:	b289      	uxth	r1, r1
 8018a7e:	3001      	adds	r0, #1
 8018a80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018a84:	4285      	cmp	r5, r0
 8018a86:	f84c 1b04 	str.w	r1, [ip], #4
 8018a8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018a8e:	dcec      	bgt.n	8018a6a <__multadd+0x12>
 8018a90:	b30e      	cbz	r6, 8018ad6 <__multadd+0x7e>
 8018a92:	68a3      	ldr	r3, [r4, #8]
 8018a94:	42ab      	cmp	r3, r5
 8018a96:	dc19      	bgt.n	8018acc <__multadd+0x74>
 8018a98:	6861      	ldr	r1, [r4, #4]
 8018a9a:	4638      	mov	r0, r7
 8018a9c:	3101      	adds	r1, #1
 8018a9e:	f7ff ff79 	bl	8018994 <_Balloc>
 8018aa2:	4680      	mov	r8, r0
 8018aa4:	b928      	cbnz	r0, 8018ab2 <__multadd+0x5a>
 8018aa6:	4602      	mov	r2, r0
 8018aa8:	4b0c      	ldr	r3, [pc, #48]	; (8018adc <__multadd+0x84>)
 8018aaa:	480d      	ldr	r0, [pc, #52]	; (8018ae0 <__multadd+0x88>)
 8018aac:	21ba      	movs	r1, #186	; 0xba
 8018aae:	f000 fda7 	bl	8019600 <__assert_func>
 8018ab2:	6922      	ldr	r2, [r4, #16]
 8018ab4:	3202      	adds	r2, #2
 8018ab6:	f104 010c 	add.w	r1, r4, #12
 8018aba:	0092      	lsls	r2, r2, #2
 8018abc:	300c      	adds	r0, #12
 8018abe:	f7fe ffde 	bl	8017a7e <memcpy>
 8018ac2:	4621      	mov	r1, r4
 8018ac4:	4638      	mov	r0, r7
 8018ac6:	f7ff ffa5 	bl	8018a14 <_Bfree>
 8018aca:	4644      	mov	r4, r8
 8018acc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018ad0:	3501      	adds	r5, #1
 8018ad2:	615e      	str	r6, [r3, #20]
 8018ad4:	6125      	str	r5, [r4, #16]
 8018ad6:	4620      	mov	r0, r4
 8018ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018adc:	0802f93c 	.word	0x0802f93c
 8018ae0:	0802f94d 	.word	0x0802f94d

08018ae4 <__hi0bits>:
 8018ae4:	0c03      	lsrs	r3, r0, #16
 8018ae6:	041b      	lsls	r3, r3, #16
 8018ae8:	b9d3      	cbnz	r3, 8018b20 <__hi0bits+0x3c>
 8018aea:	0400      	lsls	r0, r0, #16
 8018aec:	2310      	movs	r3, #16
 8018aee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018af2:	bf04      	itt	eq
 8018af4:	0200      	lsleq	r0, r0, #8
 8018af6:	3308      	addeq	r3, #8
 8018af8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018afc:	bf04      	itt	eq
 8018afe:	0100      	lsleq	r0, r0, #4
 8018b00:	3304      	addeq	r3, #4
 8018b02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018b06:	bf04      	itt	eq
 8018b08:	0080      	lsleq	r0, r0, #2
 8018b0a:	3302      	addeq	r3, #2
 8018b0c:	2800      	cmp	r0, #0
 8018b0e:	db05      	blt.n	8018b1c <__hi0bits+0x38>
 8018b10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018b14:	f103 0301 	add.w	r3, r3, #1
 8018b18:	bf08      	it	eq
 8018b1a:	2320      	moveq	r3, #32
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	4770      	bx	lr
 8018b20:	2300      	movs	r3, #0
 8018b22:	e7e4      	b.n	8018aee <__hi0bits+0xa>

08018b24 <__lo0bits>:
 8018b24:	6803      	ldr	r3, [r0, #0]
 8018b26:	f013 0207 	ands.w	r2, r3, #7
 8018b2a:	d00c      	beq.n	8018b46 <__lo0bits+0x22>
 8018b2c:	07d9      	lsls	r1, r3, #31
 8018b2e:	d422      	bmi.n	8018b76 <__lo0bits+0x52>
 8018b30:	079a      	lsls	r2, r3, #30
 8018b32:	bf49      	itett	mi
 8018b34:	085b      	lsrmi	r3, r3, #1
 8018b36:	089b      	lsrpl	r3, r3, #2
 8018b38:	6003      	strmi	r3, [r0, #0]
 8018b3a:	2201      	movmi	r2, #1
 8018b3c:	bf5c      	itt	pl
 8018b3e:	6003      	strpl	r3, [r0, #0]
 8018b40:	2202      	movpl	r2, #2
 8018b42:	4610      	mov	r0, r2
 8018b44:	4770      	bx	lr
 8018b46:	b299      	uxth	r1, r3
 8018b48:	b909      	cbnz	r1, 8018b4e <__lo0bits+0x2a>
 8018b4a:	0c1b      	lsrs	r3, r3, #16
 8018b4c:	2210      	movs	r2, #16
 8018b4e:	b2d9      	uxtb	r1, r3
 8018b50:	b909      	cbnz	r1, 8018b56 <__lo0bits+0x32>
 8018b52:	3208      	adds	r2, #8
 8018b54:	0a1b      	lsrs	r3, r3, #8
 8018b56:	0719      	lsls	r1, r3, #28
 8018b58:	bf04      	itt	eq
 8018b5a:	091b      	lsreq	r3, r3, #4
 8018b5c:	3204      	addeq	r2, #4
 8018b5e:	0799      	lsls	r1, r3, #30
 8018b60:	bf04      	itt	eq
 8018b62:	089b      	lsreq	r3, r3, #2
 8018b64:	3202      	addeq	r2, #2
 8018b66:	07d9      	lsls	r1, r3, #31
 8018b68:	d403      	bmi.n	8018b72 <__lo0bits+0x4e>
 8018b6a:	085b      	lsrs	r3, r3, #1
 8018b6c:	f102 0201 	add.w	r2, r2, #1
 8018b70:	d003      	beq.n	8018b7a <__lo0bits+0x56>
 8018b72:	6003      	str	r3, [r0, #0]
 8018b74:	e7e5      	b.n	8018b42 <__lo0bits+0x1e>
 8018b76:	2200      	movs	r2, #0
 8018b78:	e7e3      	b.n	8018b42 <__lo0bits+0x1e>
 8018b7a:	2220      	movs	r2, #32
 8018b7c:	e7e1      	b.n	8018b42 <__lo0bits+0x1e>
	...

08018b80 <__i2b>:
 8018b80:	b510      	push	{r4, lr}
 8018b82:	460c      	mov	r4, r1
 8018b84:	2101      	movs	r1, #1
 8018b86:	f7ff ff05 	bl	8018994 <_Balloc>
 8018b8a:	4602      	mov	r2, r0
 8018b8c:	b928      	cbnz	r0, 8018b9a <__i2b+0x1a>
 8018b8e:	4b05      	ldr	r3, [pc, #20]	; (8018ba4 <__i2b+0x24>)
 8018b90:	4805      	ldr	r0, [pc, #20]	; (8018ba8 <__i2b+0x28>)
 8018b92:	f240 1145 	movw	r1, #325	; 0x145
 8018b96:	f000 fd33 	bl	8019600 <__assert_func>
 8018b9a:	2301      	movs	r3, #1
 8018b9c:	6144      	str	r4, [r0, #20]
 8018b9e:	6103      	str	r3, [r0, #16]
 8018ba0:	bd10      	pop	{r4, pc}
 8018ba2:	bf00      	nop
 8018ba4:	0802f93c 	.word	0x0802f93c
 8018ba8:	0802f94d 	.word	0x0802f94d

08018bac <__multiply>:
 8018bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb0:	4691      	mov	r9, r2
 8018bb2:	690a      	ldr	r2, [r1, #16]
 8018bb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018bb8:	429a      	cmp	r2, r3
 8018bba:	bfb8      	it	lt
 8018bbc:	460b      	movlt	r3, r1
 8018bbe:	460c      	mov	r4, r1
 8018bc0:	bfbc      	itt	lt
 8018bc2:	464c      	movlt	r4, r9
 8018bc4:	4699      	movlt	r9, r3
 8018bc6:	6927      	ldr	r7, [r4, #16]
 8018bc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018bcc:	68a3      	ldr	r3, [r4, #8]
 8018bce:	6861      	ldr	r1, [r4, #4]
 8018bd0:	eb07 060a 	add.w	r6, r7, sl
 8018bd4:	42b3      	cmp	r3, r6
 8018bd6:	b085      	sub	sp, #20
 8018bd8:	bfb8      	it	lt
 8018bda:	3101      	addlt	r1, #1
 8018bdc:	f7ff feda 	bl	8018994 <_Balloc>
 8018be0:	b930      	cbnz	r0, 8018bf0 <__multiply+0x44>
 8018be2:	4602      	mov	r2, r0
 8018be4:	4b44      	ldr	r3, [pc, #272]	; (8018cf8 <__multiply+0x14c>)
 8018be6:	4845      	ldr	r0, [pc, #276]	; (8018cfc <__multiply+0x150>)
 8018be8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018bec:	f000 fd08 	bl	8019600 <__assert_func>
 8018bf0:	f100 0514 	add.w	r5, r0, #20
 8018bf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018bf8:	462b      	mov	r3, r5
 8018bfa:	2200      	movs	r2, #0
 8018bfc:	4543      	cmp	r3, r8
 8018bfe:	d321      	bcc.n	8018c44 <__multiply+0x98>
 8018c00:	f104 0314 	add.w	r3, r4, #20
 8018c04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018c08:	f109 0314 	add.w	r3, r9, #20
 8018c0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018c10:	9202      	str	r2, [sp, #8]
 8018c12:	1b3a      	subs	r2, r7, r4
 8018c14:	3a15      	subs	r2, #21
 8018c16:	f022 0203 	bic.w	r2, r2, #3
 8018c1a:	3204      	adds	r2, #4
 8018c1c:	f104 0115 	add.w	r1, r4, #21
 8018c20:	428f      	cmp	r7, r1
 8018c22:	bf38      	it	cc
 8018c24:	2204      	movcc	r2, #4
 8018c26:	9201      	str	r2, [sp, #4]
 8018c28:	9a02      	ldr	r2, [sp, #8]
 8018c2a:	9303      	str	r3, [sp, #12]
 8018c2c:	429a      	cmp	r2, r3
 8018c2e:	d80c      	bhi.n	8018c4a <__multiply+0x9e>
 8018c30:	2e00      	cmp	r6, #0
 8018c32:	dd03      	ble.n	8018c3c <__multiply+0x90>
 8018c34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d05b      	beq.n	8018cf4 <__multiply+0x148>
 8018c3c:	6106      	str	r6, [r0, #16]
 8018c3e:	b005      	add	sp, #20
 8018c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c44:	f843 2b04 	str.w	r2, [r3], #4
 8018c48:	e7d8      	b.n	8018bfc <__multiply+0x50>
 8018c4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8018c4e:	f1ba 0f00 	cmp.w	sl, #0
 8018c52:	d024      	beq.n	8018c9e <__multiply+0xf2>
 8018c54:	f104 0e14 	add.w	lr, r4, #20
 8018c58:	46a9      	mov	r9, r5
 8018c5a:	f04f 0c00 	mov.w	ip, #0
 8018c5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018c62:	f8d9 1000 	ldr.w	r1, [r9]
 8018c66:	fa1f fb82 	uxth.w	fp, r2
 8018c6a:	b289      	uxth	r1, r1
 8018c6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8018c70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018c74:	f8d9 2000 	ldr.w	r2, [r9]
 8018c78:	4461      	add	r1, ip
 8018c7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018c7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8018c82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018c86:	b289      	uxth	r1, r1
 8018c88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018c8c:	4577      	cmp	r7, lr
 8018c8e:	f849 1b04 	str.w	r1, [r9], #4
 8018c92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018c96:	d8e2      	bhi.n	8018c5e <__multiply+0xb2>
 8018c98:	9a01      	ldr	r2, [sp, #4]
 8018c9a:	f845 c002 	str.w	ip, [r5, r2]
 8018c9e:	9a03      	ldr	r2, [sp, #12]
 8018ca0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018ca4:	3304      	adds	r3, #4
 8018ca6:	f1b9 0f00 	cmp.w	r9, #0
 8018caa:	d021      	beq.n	8018cf0 <__multiply+0x144>
 8018cac:	6829      	ldr	r1, [r5, #0]
 8018cae:	f104 0c14 	add.w	ip, r4, #20
 8018cb2:	46ae      	mov	lr, r5
 8018cb4:	f04f 0a00 	mov.w	sl, #0
 8018cb8:	f8bc b000 	ldrh.w	fp, [ip]
 8018cbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018cc0:	fb09 220b 	mla	r2, r9, fp, r2
 8018cc4:	4452      	add	r2, sl
 8018cc6:	b289      	uxth	r1, r1
 8018cc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018ccc:	f84e 1b04 	str.w	r1, [lr], #4
 8018cd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018cd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018cd8:	f8be 1000 	ldrh.w	r1, [lr]
 8018cdc:	fb09 110a 	mla	r1, r9, sl, r1
 8018ce0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018ce4:	4567      	cmp	r7, ip
 8018ce6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018cea:	d8e5      	bhi.n	8018cb8 <__multiply+0x10c>
 8018cec:	9a01      	ldr	r2, [sp, #4]
 8018cee:	50a9      	str	r1, [r5, r2]
 8018cf0:	3504      	adds	r5, #4
 8018cf2:	e799      	b.n	8018c28 <__multiply+0x7c>
 8018cf4:	3e01      	subs	r6, #1
 8018cf6:	e79b      	b.n	8018c30 <__multiply+0x84>
 8018cf8:	0802f93c 	.word	0x0802f93c
 8018cfc:	0802f94d 	.word	0x0802f94d

08018d00 <__pow5mult>:
 8018d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d04:	4615      	mov	r5, r2
 8018d06:	f012 0203 	ands.w	r2, r2, #3
 8018d0a:	4606      	mov	r6, r0
 8018d0c:	460f      	mov	r7, r1
 8018d0e:	d007      	beq.n	8018d20 <__pow5mult+0x20>
 8018d10:	4c25      	ldr	r4, [pc, #148]	; (8018da8 <__pow5mult+0xa8>)
 8018d12:	3a01      	subs	r2, #1
 8018d14:	2300      	movs	r3, #0
 8018d16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018d1a:	f7ff fe9d 	bl	8018a58 <__multadd>
 8018d1e:	4607      	mov	r7, r0
 8018d20:	10ad      	asrs	r5, r5, #2
 8018d22:	d03d      	beq.n	8018da0 <__pow5mult+0xa0>
 8018d24:	69f4      	ldr	r4, [r6, #28]
 8018d26:	b97c      	cbnz	r4, 8018d48 <__pow5mult+0x48>
 8018d28:	2010      	movs	r0, #16
 8018d2a:	f7ff fd7f 	bl	801882c <malloc>
 8018d2e:	4602      	mov	r2, r0
 8018d30:	61f0      	str	r0, [r6, #28]
 8018d32:	b928      	cbnz	r0, 8018d40 <__pow5mult+0x40>
 8018d34:	4b1d      	ldr	r3, [pc, #116]	; (8018dac <__pow5mult+0xac>)
 8018d36:	481e      	ldr	r0, [pc, #120]	; (8018db0 <__pow5mult+0xb0>)
 8018d38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018d3c:	f000 fc60 	bl	8019600 <__assert_func>
 8018d40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018d44:	6004      	str	r4, [r0, #0]
 8018d46:	60c4      	str	r4, [r0, #12]
 8018d48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018d4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018d50:	b94c      	cbnz	r4, 8018d66 <__pow5mult+0x66>
 8018d52:	f240 2171 	movw	r1, #625	; 0x271
 8018d56:	4630      	mov	r0, r6
 8018d58:	f7ff ff12 	bl	8018b80 <__i2b>
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018d62:	4604      	mov	r4, r0
 8018d64:	6003      	str	r3, [r0, #0]
 8018d66:	f04f 0900 	mov.w	r9, #0
 8018d6a:	07eb      	lsls	r3, r5, #31
 8018d6c:	d50a      	bpl.n	8018d84 <__pow5mult+0x84>
 8018d6e:	4639      	mov	r1, r7
 8018d70:	4622      	mov	r2, r4
 8018d72:	4630      	mov	r0, r6
 8018d74:	f7ff ff1a 	bl	8018bac <__multiply>
 8018d78:	4639      	mov	r1, r7
 8018d7a:	4680      	mov	r8, r0
 8018d7c:	4630      	mov	r0, r6
 8018d7e:	f7ff fe49 	bl	8018a14 <_Bfree>
 8018d82:	4647      	mov	r7, r8
 8018d84:	106d      	asrs	r5, r5, #1
 8018d86:	d00b      	beq.n	8018da0 <__pow5mult+0xa0>
 8018d88:	6820      	ldr	r0, [r4, #0]
 8018d8a:	b938      	cbnz	r0, 8018d9c <__pow5mult+0x9c>
 8018d8c:	4622      	mov	r2, r4
 8018d8e:	4621      	mov	r1, r4
 8018d90:	4630      	mov	r0, r6
 8018d92:	f7ff ff0b 	bl	8018bac <__multiply>
 8018d96:	6020      	str	r0, [r4, #0]
 8018d98:	f8c0 9000 	str.w	r9, [r0]
 8018d9c:	4604      	mov	r4, r0
 8018d9e:	e7e4      	b.n	8018d6a <__pow5mult+0x6a>
 8018da0:	4638      	mov	r0, r7
 8018da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018da6:	bf00      	nop
 8018da8:	0802fa98 	.word	0x0802fa98
 8018dac:	0802f8cd 	.word	0x0802f8cd
 8018db0:	0802f94d 	.word	0x0802f94d

08018db4 <__lshift>:
 8018db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018db8:	460c      	mov	r4, r1
 8018dba:	6849      	ldr	r1, [r1, #4]
 8018dbc:	6923      	ldr	r3, [r4, #16]
 8018dbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018dc2:	68a3      	ldr	r3, [r4, #8]
 8018dc4:	4607      	mov	r7, r0
 8018dc6:	4691      	mov	r9, r2
 8018dc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018dcc:	f108 0601 	add.w	r6, r8, #1
 8018dd0:	42b3      	cmp	r3, r6
 8018dd2:	db0b      	blt.n	8018dec <__lshift+0x38>
 8018dd4:	4638      	mov	r0, r7
 8018dd6:	f7ff fddd 	bl	8018994 <_Balloc>
 8018dda:	4605      	mov	r5, r0
 8018ddc:	b948      	cbnz	r0, 8018df2 <__lshift+0x3e>
 8018dde:	4602      	mov	r2, r0
 8018de0:	4b28      	ldr	r3, [pc, #160]	; (8018e84 <__lshift+0xd0>)
 8018de2:	4829      	ldr	r0, [pc, #164]	; (8018e88 <__lshift+0xd4>)
 8018de4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018de8:	f000 fc0a 	bl	8019600 <__assert_func>
 8018dec:	3101      	adds	r1, #1
 8018dee:	005b      	lsls	r3, r3, #1
 8018df0:	e7ee      	b.n	8018dd0 <__lshift+0x1c>
 8018df2:	2300      	movs	r3, #0
 8018df4:	f100 0114 	add.w	r1, r0, #20
 8018df8:	f100 0210 	add.w	r2, r0, #16
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	4553      	cmp	r3, sl
 8018e00:	db33      	blt.n	8018e6a <__lshift+0xb6>
 8018e02:	6920      	ldr	r0, [r4, #16]
 8018e04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018e08:	f104 0314 	add.w	r3, r4, #20
 8018e0c:	f019 091f 	ands.w	r9, r9, #31
 8018e10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018e14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018e18:	d02b      	beq.n	8018e72 <__lshift+0xbe>
 8018e1a:	f1c9 0e20 	rsb	lr, r9, #32
 8018e1e:	468a      	mov	sl, r1
 8018e20:	2200      	movs	r2, #0
 8018e22:	6818      	ldr	r0, [r3, #0]
 8018e24:	fa00 f009 	lsl.w	r0, r0, r9
 8018e28:	4310      	orrs	r0, r2
 8018e2a:	f84a 0b04 	str.w	r0, [sl], #4
 8018e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e32:	459c      	cmp	ip, r3
 8018e34:	fa22 f20e 	lsr.w	r2, r2, lr
 8018e38:	d8f3      	bhi.n	8018e22 <__lshift+0x6e>
 8018e3a:	ebac 0304 	sub.w	r3, ip, r4
 8018e3e:	3b15      	subs	r3, #21
 8018e40:	f023 0303 	bic.w	r3, r3, #3
 8018e44:	3304      	adds	r3, #4
 8018e46:	f104 0015 	add.w	r0, r4, #21
 8018e4a:	4584      	cmp	ip, r0
 8018e4c:	bf38      	it	cc
 8018e4e:	2304      	movcc	r3, #4
 8018e50:	50ca      	str	r2, [r1, r3]
 8018e52:	b10a      	cbz	r2, 8018e58 <__lshift+0xa4>
 8018e54:	f108 0602 	add.w	r6, r8, #2
 8018e58:	3e01      	subs	r6, #1
 8018e5a:	4638      	mov	r0, r7
 8018e5c:	612e      	str	r6, [r5, #16]
 8018e5e:	4621      	mov	r1, r4
 8018e60:	f7ff fdd8 	bl	8018a14 <_Bfree>
 8018e64:	4628      	mov	r0, r5
 8018e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8018e6e:	3301      	adds	r3, #1
 8018e70:	e7c5      	b.n	8018dfe <__lshift+0x4a>
 8018e72:	3904      	subs	r1, #4
 8018e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e78:	f841 2f04 	str.w	r2, [r1, #4]!
 8018e7c:	459c      	cmp	ip, r3
 8018e7e:	d8f9      	bhi.n	8018e74 <__lshift+0xc0>
 8018e80:	e7ea      	b.n	8018e58 <__lshift+0xa4>
 8018e82:	bf00      	nop
 8018e84:	0802f93c 	.word	0x0802f93c
 8018e88:	0802f94d 	.word	0x0802f94d

08018e8c <__mcmp>:
 8018e8c:	b530      	push	{r4, r5, lr}
 8018e8e:	6902      	ldr	r2, [r0, #16]
 8018e90:	690c      	ldr	r4, [r1, #16]
 8018e92:	1b12      	subs	r2, r2, r4
 8018e94:	d10e      	bne.n	8018eb4 <__mcmp+0x28>
 8018e96:	f100 0314 	add.w	r3, r0, #20
 8018e9a:	3114      	adds	r1, #20
 8018e9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018ea0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018ea4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018ea8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018eac:	42a5      	cmp	r5, r4
 8018eae:	d003      	beq.n	8018eb8 <__mcmp+0x2c>
 8018eb0:	d305      	bcc.n	8018ebe <__mcmp+0x32>
 8018eb2:	2201      	movs	r2, #1
 8018eb4:	4610      	mov	r0, r2
 8018eb6:	bd30      	pop	{r4, r5, pc}
 8018eb8:	4283      	cmp	r3, r0
 8018eba:	d3f3      	bcc.n	8018ea4 <__mcmp+0x18>
 8018ebc:	e7fa      	b.n	8018eb4 <__mcmp+0x28>
 8018ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8018ec2:	e7f7      	b.n	8018eb4 <__mcmp+0x28>

08018ec4 <__mdiff>:
 8018ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ec8:	460c      	mov	r4, r1
 8018eca:	4606      	mov	r6, r0
 8018ecc:	4611      	mov	r1, r2
 8018ece:	4620      	mov	r0, r4
 8018ed0:	4690      	mov	r8, r2
 8018ed2:	f7ff ffdb 	bl	8018e8c <__mcmp>
 8018ed6:	1e05      	subs	r5, r0, #0
 8018ed8:	d110      	bne.n	8018efc <__mdiff+0x38>
 8018eda:	4629      	mov	r1, r5
 8018edc:	4630      	mov	r0, r6
 8018ede:	f7ff fd59 	bl	8018994 <_Balloc>
 8018ee2:	b930      	cbnz	r0, 8018ef2 <__mdiff+0x2e>
 8018ee4:	4b3a      	ldr	r3, [pc, #232]	; (8018fd0 <__mdiff+0x10c>)
 8018ee6:	4602      	mov	r2, r0
 8018ee8:	f240 2137 	movw	r1, #567	; 0x237
 8018eec:	4839      	ldr	r0, [pc, #228]	; (8018fd4 <__mdiff+0x110>)
 8018eee:	f000 fb87 	bl	8019600 <__assert_func>
 8018ef2:	2301      	movs	r3, #1
 8018ef4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018ef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018efc:	bfa4      	itt	ge
 8018efe:	4643      	movge	r3, r8
 8018f00:	46a0      	movge	r8, r4
 8018f02:	4630      	mov	r0, r6
 8018f04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018f08:	bfa6      	itte	ge
 8018f0a:	461c      	movge	r4, r3
 8018f0c:	2500      	movge	r5, #0
 8018f0e:	2501      	movlt	r5, #1
 8018f10:	f7ff fd40 	bl	8018994 <_Balloc>
 8018f14:	b920      	cbnz	r0, 8018f20 <__mdiff+0x5c>
 8018f16:	4b2e      	ldr	r3, [pc, #184]	; (8018fd0 <__mdiff+0x10c>)
 8018f18:	4602      	mov	r2, r0
 8018f1a:	f240 2145 	movw	r1, #581	; 0x245
 8018f1e:	e7e5      	b.n	8018eec <__mdiff+0x28>
 8018f20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018f24:	6926      	ldr	r6, [r4, #16]
 8018f26:	60c5      	str	r5, [r0, #12]
 8018f28:	f104 0914 	add.w	r9, r4, #20
 8018f2c:	f108 0514 	add.w	r5, r8, #20
 8018f30:	f100 0e14 	add.w	lr, r0, #20
 8018f34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018f38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018f3c:	f108 0210 	add.w	r2, r8, #16
 8018f40:	46f2      	mov	sl, lr
 8018f42:	2100      	movs	r1, #0
 8018f44:	f859 3b04 	ldr.w	r3, [r9], #4
 8018f48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018f4c:	fa11 f88b 	uxtah	r8, r1, fp
 8018f50:	b299      	uxth	r1, r3
 8018f52:	0c1b      	lsrs	r3, r3, #16
 8018f54:	eba8 0801 	sub.w	r8, r8, r1
 8018f58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018f5c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018f60:	fa1f f888 	uxth.w	r8, r8
 8018f64:	1419      	asrs	r1, r3, #16
 8018f66:	454e      	cmp	r6, r9
 8018f68:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018f6c:	f84a 3b04 	str.w	r3, [sl], #4
 8018f70:	d8e8      	bhi.n	8018f44 <__mdiff+0x80>
 8018f72:	1b33      	subs	r3, r6, r4
 8018f74:	3b15      	subs	r3, #21
 8018f76:	f023 0303 	bic.w	r3, r3, #3
 8018f7a:	3304      	adds	r3, #4
 8018f7c:	3415      	adds	r4, #21
 8018f7e:	42a6      	cmp	r6, r4
 8018f80:	bf38      	it	cc
 8018f82:	2304      	movcc	r3, #4
 8018f84:	441d      	add	r5, r3
 8018f86:	4473      	add	r3, lr
 8018f88:	469e      	mov	lr, r3
 8018f8a:	462e      	mov	r6, r5
 8018f8c:	4566      	cmp	r6, ip
 8018f8e:	d30e      	bcc.n	8018fae <__mdiff+0xea>
 8018f90:	f10c 0203 	add.w	r2, ip, #3
 8018f94:	1b52      	subs	r2, r2, r5
 8018f96:	f022 0203 	bic.w	r2, r2, #3
 8018f9a:	3d03      	subs	r5, #3
 8018f9c:	45ac      	cmp	ip, r5
 8018f9e:	bf38      	it	cc
 8018fa0:	2200      	movcc	r2, #0
 8018fa2:	4413      	add	r3, r2
 8018fa4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018fa8:	b17a      	cbz	r2, 8018fca <__mdiff+0x106>
 8018faa:	6107      	str	r7, [r0, #16]
 8018fac:	e7a4      	b.n	8018ef8 <__mdiff+0x34>
 8018fae:	f856 8b04 	ldr.w	r8, [r6], #4
 8018fb2:	fa11 f288 	uxtah	r2, r1, r8
 8018fb6:	1414      	asrs	r4, r2, #16
 8018fb8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018fbc:	b292      	uxth	r2, r2
 8018fbe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018fc2:	f84e 2b04 	str.w	r2, [lr], #4
 8018fc6:	1421      	asrs	r1, r4, #16
 8018fc8:	e7e0      	b.n	8018f8c <__mdiff+0xc8>
 8018fca:	3f01      	subs	r7, #1
 8018fcc:	e7ea      	b.n	8018fa4 <__mdiff+0xe0>
 8018fce:	bf00      	nop
 8018fd0:	0802f93c 	.word	0x0802f93c
 8018fd4:	0802f94d 	.word	0x0802f94d

08018fd8 <__d2b>:
 8018fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018fdc:	460f      	mov	r7, r1
 8018fde:	2101      	movs	r1, #1
 8018fe0:	ec59 8b10 	vmov	r8, r9, d0
 8018fe4:	4616      	mov	r6, r2
 8018fe6:	f7ff fcd5 	bl	8018994 <_Balloc>
 8018fea:	4604      	mov	r4, r0
 8018fec:	b930      	cbnz	r0, 8018ffc <__d2b+0x24>
 8018fee:	4602      	mov	r2, r0
 8018ff0:	4b24      	ldr	r3, [pc, #144]	; (8019084 <__d2b+0xac>)
 8018ff2:	4825      	ldr	r0, [pc, #148]	; (8019088 <__d2b+0xb0>)
 8018ff4:	f240 310f 	movw	r1, #783	; 0x30f
 8018ff8:	f000 fb02 	bl	8019600 <__assert_func>
 8018ffc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019004:	bb2d      	cbnz	r5, 8019052 <__d2b+0x7a>
 8019006:	9301      	str	r3, [sp, #4]
 8019008:	f1b8 0300 	subs.w	r3, r8, #0
 801900c:	d026      	beq.n	801905c <__d2b+0x84>
 801900e:	4668      	mov	r0, sp
 8019010:	9300      	str	r3, [sp, #0]
 8019012:	f7ff fd87 	bl	8018b24 <__lo0bits>
 8019016:	e9dd 1200 	ldrd	r1, r2, [sp]
 801901a:	b1e8      	cbz	r0, 8019058 <__d2b+0x80>
 801901c:	f1c0 0320 	rsb	r3, r0, #32
 8019020:	fa02 f303 	lsl.w	r3, r2, r3
 8019024:	430b      	orrs	r3, r1
 8019026:	40c2      	lsrs	r2, r0
 8019028:	6163      	str	r3, [r4, #20]
 801902a:	9201      	str	r2, [sp, #4]
 801902c:	9b01      	ldr	r3, [sp, #4]
 801902e:	61a3      	str	r3, [r4, #24]
 8019030:	2b00      	cmp	r3, #0
 8019032:	bf14      	ite	ne
 8019034:	2202      	movne	r2, #2
 8019036:	2201      	moveq	r2, #1
 8019038:	6122      	str	r2, [r4, #16]
 801903a:	b1bd      	cbz	r5, 801906c <__d2b+0x94>
 801903c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019040:	4405      	add	r5, r0
 8019042:	603d      	str	r5, [r7, #0]
 8019044:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019048:	6030      	str	r0, [r6, #0]
 801904a:	4620      	mov	r0, r4
 801904c:	b003      	add	sp, #12
 801904e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019056:	e7d6      	b.n	8019006 <__d2b+0x2e>
 8019058:	6161      	str	r1, [r4, #20]
 801905a:	e7e7      	b.n	801902c <__d2b+0x54>
 801905c:	a801      	add	r0, sp, #4
 801905e:	f7ff fd61 	bl	8018b24 <__lo0bits>
 8019062:	9b01      	ldr	r3, [sp, #4]
 8019064:	6163      	str	r3, [r4, #20]
 8019066:	3020      	adds	r0, #32
 8019068:	2201      	movs	r2, #1
 801906a:	e7e5      	b.n	8019038 <__d2b+0x60>
 801906c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019070:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019074:	6038      	str	r0, [r7, #0]
 8019076:	6918      	ldr	r0, [r3, #16]
 8019078:	f7ff fd34 	bl	8018ae4 <__hi0bits>
 801907c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019080:	e7e2      	b.n	8019048 <__d2b+0x70>
 8019082:	bf00      	nop
 8019084:	0802f93c 	.word	0x0802f93c
 8019088:	0802f94d 	.word	0x0802f94d

0801908c <__sfputc_r>:
 801908c:	6893      	ldr	r3, [r2, #8]
 801908e:	3b01      	subs	r3, #1
 8019090:	2b00      	cmp	r3, #0
 8019092:	b410      	push	{r4}
 8019094:	6093      	str	r3, [r2, #8]
 8019096:	da08      	bge.n	80190aa <__sfputc_r+0x1e>
 8019098:	6994      	ldr	r4, [r2, #24]
 801909a:	42a3      	cmp	r3, r4
 801909c:	db01      	blt.n	80190a2 <__sfputc_r+0x16>
 801909e:	290a      	cmp	r1, #10
 80190a0:	d103      	bne.n	80190aa <__sfputc_r+0x1e>
 80190a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190a6:	f7fe bbd6 	b.w	8017856 <__swbuf_r>
 80190aa:	6813      	ldr	r3, [r2, #0]
 80190ac:	1c58      	adds	r0, r3, #1
 80190ae:	6010      	str	r0, [r2, #0]
 80190b0:	7019      	strb	r1, [r3, #0]
 80190b2:	4608      	mov	r0, r1
 80190b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190b8:	4770      	bx	lr

080190ba <__sfputs_r>:
 80190ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190bc:	4606      	mov	r6, r0
 80190be:	460f      	mov	r7, r1
 80190c0:	4614      	mov	r4, r2
 80190c2:	18d5      	adds	r5, r2, r3
 80190c4:	42ac      	cmp	r4, r5
 80190c6:	d101      	bne.n	80190cc <__sfputs_r+0x12>
 80190c8:	2000      	movs	r0, #0
 80190ca:	e007      	b.n	80190dc <__sfputs_r+0x22>
 80190cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190d0:	463a      	mov	r2, r7
 80190d2:	4630      	mov	r0, r6
 80190d4:	f7ff ffda 	bl	801908c <__sfputc_r>
 80190d8:	1c43      	adds	r3, r0, #1
 80190da:	d1f3      	bne.n	80190c4 <__sfputs_r+0xa>
 80190dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080190e0 <_vfiprintf_r>:
 80190e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190e4:	460d      	mov	r5, r1
 80190e6:	b09d      	sub	sp, #116	; 0x74
 80190e8:	4614      	mov	r4, r2
 80190ea:	4698      	mov	r8, r3
 80190ec:	4606      	mov	r6, r0
 80190ee:	b118      	cbz	r0, 80190f8 <_vfiprintf_r+0x18>
 80190f0:	6a03      	ldr	r3, [r0, #32]
 80190f2:	b90b      	cbnz	r3, 80190f8 <_vfiprintf_r+0x18>
 80190f4:	f7fe fac0 	bl	8017678 <__sinit>
 80190f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190fa:	07d9      	lsls	r1, r3, #31
 80190fc:	d405      	bmi.n	801910a <_vfiprintf_r+0x2a>
 80190fe:	89ab      	ldrh	r3, [r5, #12]
 8019100:	059a      	lsls	r2, r3, #22
 8019102:	d402      	bmi.n	801910a <_vfiprintf_r+0x2a>
 8019104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019106:	f7fe fcb8 	bl	8017a7a <__retarget_lock_acquire_recursive>
 801910a:	89ab      	ldrh	r3, [r5, #12]
 801910c:	071b      	lsls	r3, r3, #28
 801910e:	d501      	bpl.n	8019114 <_vfiprintf_r+0x34>
 8019110:	692b      	ldr	r3, [r5, #16]
 8019112:	b99b      	cbnz	r3, 801913c <_vfiprintf_r+0x5c>
 8019114:	4629      	mov	r1, r5
 8019116:	4630      	mov	r0, r6
 8019118:	f7fe fbda 	bl	80178d0 <__swsetup_r>
 801911c:	b170      	cbz	r0, 801913c <_vfiprintf_r+0x5c>
 801911e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019120:	07dc      	lsls	r4, r3, #31
 8019122:	d504      	bpl.n	801912e <_vfiprintf_r+0x4e>
 8019124:	f04f 30ff 	mov.w	r0, #4294967295
 8019128:	b01d      	add	sp, #116	; 0x74
 801912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801912e:	89ab      	ldrh	r3, [r5, #12]
 8019130:	0598      	lsls	r0, r3, #22
 8019132:	d4f7      	bmi.n	8019124 <_vfiprintf_r+0x44>
 8019134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019136:	f7fe fca1 	bl	8017a7c <__retarget_lock_release_recursive>
 801913a:	e7f3      	b.n	8019124 <_vfiprintf_r+0x44>
 801913c:	2300      	movs	r3, #0
 801913e:	9309      	str	r3, [sp, #36]	; 0x24
 8019140:	2320      	movs	r3, #32
 8019142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019146:	f8cd 800c 	str.w	r8, [sp, #12]
 801914a:	2330      	movs	r3, #48	; 0x30
 801914c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019300 <_vfiprintf_r+0x220>
 8019150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019154:	f04f 0901 	mov.w	r9, #1
 8019158:	4623      	mov	r3, r4
 801915a:	469a      	mov	sl, r3
 801915c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019160:	b10a      	cbz	r2, 8019166 <_vfiprintf_r+0x86>
 8019162:	2a25      	cmp	r2, #37	; 0x25
 8019164:	d1f9      	bne.n	801915a <_vfiprintf_r+0x7a>
 8019166:	ebba 0b04 	subs.w	fp, sl, r4
 801916a:	d00b      	beq.n	8019184 <_vfiprintf_r+0xa4>
 801916c:	465b      	mov	r3, fp
 801916e:	4622      	mov	r2, r4
 8019170:	4629      	mov	r1, r5
 8019172:	4630      	mov	r0, r6
 8019174:	f7ff ffa1 	bl	80190ba <__sfputs_r>
 8019178:	3001      	adds	r0, #1
 801917a:	f000 80a9 	beq.w	80192d0 <_vfiprintf_r+0x1f0>
 801917e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019180:	445a      	add	r2, fp
 8019182:	9209      	str	r2, [sp, #36]	; 0x24
 8019184:	f89a 3000 	ldrb.w	r3, [sl]
 8019188:	2b00      	cmp	r3, #0
 801918a:	f000 80a1 	beq.w	80192d0 <_vfiprintf_r+0x1f0>
 801918e:	2300      	movs	r3, #0
 8019190:	f04f 32ff 	mov.w	r2, #4294967295
 8019194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019198:	f10a 0a01 	add.w	sl, sl, #1
 801919c:	9304      	str	r3, [sp, #16]
 801919e:	9307      	str	r3, [sp, #28]
 80191a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191a4:	931a      	str	r3, [sp, #104]	; 0x68
 80191a6:	4654      	mov	r4, sl
 80191a8:	2205      	movs	r2, #5
 80191aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191ae:	4854      	ldr	r0, [pc, #336]	; (8019300 <_vfiprintf_r+0x220>)
 80191b0:	f7e6 ffe6 	bl	8000180 <memchr>
 80191b4:	9a04      	ldr	r2, [sp, #16]
 80191b6:	b9d8      	cbnz	r0, 80191f0 <_vfiprintf_r+0x110>
 80191b8:	06d1      	lsls	r1, r2, #27
 80191ba:	bf44      	itt	mi
 80191bc:	2320      	movmi	r3, #32
 80191be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80191c2:	0713      	lsls	r3, r2, #28
 80191c4:	bf44      	itt	mi
 80191c6:	232b      	movmi	r3, #43	; 0x2b
 80191c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80191cc:	f89a 3000 	ldrb.w	r3, [sl]
 80191d0:	2b2a      	cmp	r3, #42	; 0x2a
 80191d2:	d015      	beq.n	8019200 <_vfiprintf_r+0x120>
 80191d4:	9a07      	ldr	r2, [sp, #28]
 80191d6:	4654      	mov	r4, sl
 80191d8:	2000      	movs	r0, #0
 80191da:	f04f 0c0a 	mov.w	ip, #10
 80191de:	4621      	mov	r1, r4
 80191e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191e4:	3b30      	subs	r3, #48	; 0x30
 80191e6:	2b09      	cmp	r3, #9
 80191e8:	d94d      	bls.n	8019286 <_vfiprintf_r+0x1a6>
 80191ea:	b1b0      	cbz	r0, 801921a <_vfiprintf_r+0x13a>
 80191ec:	9207      	str	r2, [sp, #28]
 80191ee:	e014      	b.n	801921a <_vfiprintf_r+0x13a>
 80191f0:	eba0 0308 	sub.w	r3, r0, r8
 80191f4:	fa09 f303 	lsl.w	r3, r9, r3
 80191f8:	4313      	orrs	r3, r2
 80191fa:	9304      	str	r3, [sp, #16]
 80191fc:	46a2      	mov	sl, r4
 80191fe:	e7d2      	b.n	80191a6 <_vfiprintf_r+0xc6>
 8019200:	9b03      	ldr	r3, [sp, #12]
 8019202:	1d19      	adds	r1, r3, #4
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	9103      	str	r1, [sp, #12]
 8019208:	2b00      	cmp	r3, #0
 801920a:	bfbb      	ittet	lt
 801920c:	425b      	neglt	r3, r3
 801920e:	f042 0202 	orrlt.w	r2, r2, #2
 8019212:	9307      	strge	r3, [sp, #28]
 8019214:	9307      	strlt	r3, [sp, #28]
 8019216:	bfb8      	it	lt
 8019218:	9204      	strlt	r2, [sp, #16]
 801921a:	7823      	ldrb	r3, [r4, #0]
 801921c:	2b2e      	cmp	r3, #46	; 0x2e
 801921e:	d10c      	bne.n	801923a <_vfiprintf_r+0x15a>
 8019220:	7863      	ldrb	r3, [r4, #1]
 8019222:	2b2a      	cmp	r3, #42	; 0x2a
 8019224:	d134      	bne.n	8019290 <_vfiprintf_r+0x1b0>
 8019226:	9b03      	ldr	r3, [sp, #12]
 8019228:	1d1a      	adds	r2, r3, #4
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	9203      	str	r2, [sp, #12]
 801922e:	2b00      	cmp	r3, #0
 8019230:	bfb8      	it	lt
 8019232:	f04f 33ff 	movlt.w	r3, #4294967295
 8019236:	3402      	adds	r4, #2
 8019238:	9305      	str	r3, [sp, #20]
 801923a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019310 <_vfiprintf_r+0x230>
 801923e:	7821      	ldrb	r1, [r4, #0]
 8019240:	2203      	movs	r2, #3
 8019242:	4650      	mov	r0, sl
 8019244:	f7e6 ff9c 	bl	8000180 <memchr>
 8019248:	b138      	cbz	r0, 801925a <_vfiprintf_r+0x17a>
 801924a:	9b04      	ldr	r3, [sp, #16]
 801924c:	eba0 000a 	sub.w	r0, r0, sl
 8019250:	2240      	movs	r2, #64	; 0x40
 8019252:	4082      	lsls	r2, r0
 8019254:	4313      	orrs	r3, r2
 8019256:	3401      	adds	r4, #1
 8019258:	9304      	str	r3, [sp, #16]
 801925a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801925e:	4829      	ldr	r0, [pc, #164]	; (8019304 <_vfiprintf_r+0x224>)
 8019260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019264:	2206      	movs	r2, #6
 8019266:	f7e6 ff8b 	bl	8000180 <memchr>
 801926a:	2800      	cmp	r0, #0
 801926c:	d03f      	beq.n	80192ee <_vfiprintf_r+0x20e>
 801926e:	4b26      	ldr	r3, [pc, #152]	; (8019308 <_vfiprintf_r+0x228>)
 8019270:	bb1b      	cbnz	r3, 80192ba <_vfiprintf_r+0x1da>
 8019272:	9b03      	ldr	r3, [sp, #12]
 8019274:	3307      	adds	r3, #7
 8019276:	f023 0307 	bic.w	r3, r3, #7
 801927a:	3308      	adds	r3, #8
 801927c:	9303      	str	r3, [sp, #12]
 801927e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019280:	443b      	add	r3, r7
 8019282:	9309      	str	r3, [sp, #36]	; 0x24
 8019284:	e768      	b.n	8019158 <_vfiprintf_r+0x78>
 8019286:	fb0c 3202 	mla	r2, ip, r2, r3
 801928a:	460c      	mov	r4, r1
 801928c:	2001      	movs	r0, #1
 801928e:	e7a6      	b.n	80191de <_vfiprintf_r+0xfe>
 8019290:	2300      	movs	r3, #0
 8019292:	3401      	adds	r4, #1
 8019294:	9305      	str	r3, [sp, #20]
 8019296:	4619      	mov	r1, r3
 8019298:	f04f 0c0a 	mov.w	ip, #10
 801929c:	4620      	mov	r0, r4
 801929e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192a2:	3a30      	subs	r2, #48	; 0x30
 80192a4:	2a09      	cmp	r2, #9
 80192a6:	d903      	bls.n	80192b0 <_vfiprintf_r+0x1d0>
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d0c6      	beq.n	801923a <_vfiprintf_r+0x15a>
 80192ac:	9105      	str	r1, [sp, #20]
 80192ae:	e7c4      	b.n	801923a <_vfiprintf_r+0x15a>
 80192b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80192b4:	4604      	mov	r4, r0
 80192b6:	2301      	movs	r3, #1
 80192b8:	e7f0      	b.n	801929c <_vfiprintf_r+0x1bc>
 80192ba:	ab03      	add	r3, sp, #12
 80192bc:	9300      	str	r3, [sp, #0]
 80192be:	462a      	mov	r2, r5
 80192c0:	4b12      	ldr	r3, [pc, #72]	; (801930c <_vfiprintf_r+0x22c>)
 80192c2:	a904      	add	r1, sp, #16
 80192c4:	4630      	mov	r0, r6
 80192c6:	f7fd fd85 	bl	8016dd4 <_printf_float>
 80192ca:	4607      	mov	r7, r0
 80192cc:	1c78      	adds	r0, r7, #1
 80192ce:	d1d6      	bne.n	801927e <_vfiprintf_r+0x19e>
 80192d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80192d2:	07d9      	lsls	r1, r3, #31
 80192d4:	d405      	bmi.n	80192e2 <_vfiprintf_r+0x202>
 80192d6:	89ab      	ldrh	r3, [r5, #12]
 80192d8:	059a      	lsls	r2, r3, #22
 80192da:	d402      	bmi.n	80192e2 <_vfiprintf_r+0x202>
 80192dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80192de:	f7fe fbcd 	bl	8017a7c <__retarget_lock_release_recursive>
 80192e2:	89ab      	ldrh	r3, [r5, #12]
 80192e4:	065b      	lsls	r3, r3, #25
 80192e6:	f53f af1d 	bmi.w	8019124 <_vfiprintf_r+0x44>
 80192ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192ec:	e71c      	b.n	8019128 <_vfiprintf_r+0x48>
 80192ee:	ab03      	add	r3, sp, #12
 80192f0:	9300      	str	r3, [sp, #0]
 80192f2:	462a      	mov	r2, r5
 80192f4:	4b05      	ldr	r3, [pc, #20]	; (801930c <_vfiprintf_r+0x22c>)
 80192f6:	a904      	add	r1, sp, #16
 80192f8:	4630      	mov	r0, r6
 80192fa:	f7fe f80f 	bl	801731c <_printf_i>
 80192fe:	e7e4      	b.n	80192ca <_vfiprintf_r+0x1ea>
 8019300:	0802faa4 	.word	0x0802faa4
 8019304:	0802faae 	.word	0x0802faae
 8019308:	08016dd5 	.word	0x08016dd5
 801930c:	080190bb 	.word	0x080190bb
 8019310:	0802faaa 	.word	0x0802faaa

08019314 <__sflush_r>:
 8019314:	898a      	ldrh	r2, [r1, #12]
 8019316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801931a:	4605      	mov	r5, r0
 801931c:	0710      	lsls	r0, r2, #28
 801931e:	460c      	mov	r4, r1
 8019320:	d458      	bmi.n	80193d4 <__sflush_r+0xc0>
 8019322:	684b      	ldr	r3, [r1, #4]
 8019324:	2b00      	cmp	r3, #0
 8019326:	dc05      	bgt.n	8019334 <__sflush_r+0x20>
 8019328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801932a:	2b00      	cmp	r3, #0
 801932c:	dc02      	bgt.n	8019334 <__sflush_r+0x20>
 801932e:	2000      	movs	r0, #0
 8019330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019336:	2e00      	cmp	r6, #0
 8019338:	d0f9      	beq.n	801932e <__sflush_r+0x1a>
 801933a:	2300      	movs	r3, #0
 801933c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019340:	682f      	ldr	r7, [r5, #0]
 8019342:	6a21      	ldr	r1, [r4, #32]
 8019344:	602b      	str	r3, [r5, #0]
 8019346:	d032      	beq.n	80193ae <__sflush_r+0x9a>
 8019348:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801934a:	89a3      	ldrh	r3, [r4, #12]
 801934c:	075a      	lsls	r2, r3, #29
 801934e:	d505      	bpl.n	801935c <__sflush_r+0x48>
 8019350:	6863      	ldr	r3, [r4, #4]
 8019352:	1ac0      	subs	r0, r0, r3
 8019354:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019356:	b10b      	cbz	r3, 801935c <__sflush_r+0x48>
 8019358:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801935a:	1ac0      	subs	r0, r0, r3
 801935c:	2300      	movs	r3, #0
 801935e:	4602      	mov	r2, r0
 8019360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019362:	6a21      	ldr	r1, [r4, #32]
 8019364:	4628      	mov	r0, r5
 8019366:	47b0      	blx	r6
 8019368:	1c43      	adds	r3, r0, #1
 801936a:	89a3      	ldrh	r3, [r4, #12]
 801936c:	d106      	bne.n	801937c <__sflush_r+0x68>
 801936e:	6829      	ldr	r1, [r5, #0]
 8019370:	291d      	cmp	r1, #29
 8019372:	d82b      	bhi.n	80193cc <__sflush_r+0xb8>
 8019374:	4a29      	ldr	r2, [pc, #164]	; (801941c <__sflush_r+0x108>)
 8019376:	410a      	asrs	r2, r1
 8019378:	07d6      	lsls	r6, r2, #31
 801937a:	d427      	bmi.n	80193cc <__sflush_r+0xb8>
 801937c:	2200      	movs	r2, #0
 801937e:	6062      	str	r2, [r4, #4]
 8019380:	04d9      	lsls	r1, r3, #19
 8019382:	6922      	ldr	r2, [r4, #16]
 8019384:	6022      	str	r2, [r4, #0]
 8019386:	d504      	bpl.n	8019392 <__sflush_r+0x7e>
 8019388:	1c42      	adds	r2, r0, #1
 801938a:	d101      	bne.n	8019390 <__sflush_r+0x7c>
 801938c:	682b      	ldr	r3, [r5, #0]
 801938e:	b903      	cbnz	r3, 8019392 <__sflush_r+0x7e>
 8019390:	6560      	str	r0, [r4, #84]	; 0x54
 8019392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019394:	602f      	str	r7, [r5, #0]
 8019396:	2900      	cmp	r1, #0
 8019398:	d0c9      	beq.n	801932e <__sflush_r+0x1a>
 801939a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801939e:	4299      	cmp	r1, r3
 80193a0:	d002      	beq.n	80193a8 <__sflush_r+0x94>
 80193a2:	4628      	mov	r0, r5
 80193a4:	f7ff f9f6 	bl	8018794 <_free_r>
 80193a8:	2000      	movs	r0, #0
 80193aa:	6360      	str	r0, [r4, #52]	; 0x34
 80193ac:	e7c0      	b.n	8019330 <__sflush_r+0x1c>
 80193ae:	2301      	movs	r3, #1
 80193b0:	4628      	mov	r0, r5
 80193b2:	47b0      	blx	r6
 80193b4:	1c41      	adds	r1, r0, #1
 80193b6:	d1c8      	bne.n	801934a <__sflush_r+0x36>
 80193b8:	682b      	ldr	r3, [r5, #0]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d0c5      	beq.n	801934a <__sflush_r+0x36>
 80193be:	2b1d      	cmp	r3, #29
 80193c0:	d001      	beq.n	80193c6 <__sflush_r+0xb2>
 80193c2:	2b16      	cmp	r3, #22
 80193c4:	d101      	bne.n	80193ca <__sflush_r+0xb6>
 80193c6:	602f      	str	r7, [r5, #0]
 80193c8:	e7b1      	b.n	801932e <__sflush_r+0x1a>
 80193ca:	89a3      	ldrh	r3, [r4, #12]
 80193cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193d0:	81a3      	strh	r3, [r4, #12]
 80193d2:	e7ad      	b.n	8019330 <__sflush_r+0x1c>
 80193d4:	690f      	ldr	r7, [r1, #16]
 80193d6:	2f00      	cmp	r7, #0
 80193d8:	d0a9      	beq.n	801932e <__sflush_r+0x1a>
 80193da:	0793      	lsls	r3, r2, #30
 80193dc:	680e      	ldr	r6, [r1, #0]
 80193de:	bf08      	it	eq
 80193e0:	694b      	ldreq	r3, [r1, #20]
 80193e2:	600f      	str	r7, [r1, #0]
 80193e4:	bf18      	it	ne
 80193e6:	2300      	movne	r3, #0
 80193e8:	eba6 0807 	sub.w	r8, r6, r7
 80193ec:	608b      	str	r3, [r1, #8]
 80193ee:	f1b8 0f00 	cmp.w	r8, #0
 80193f2:	dd9c      	ble.n	801932e <__sflush_r+0x1a>
 80193f4:	6a21      	ldr	r1, [r4, #32]
 80193f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80193f8:	4643      	mov	r3, r8
 80193fa:	463a      	mov	r2, r7
 80193fc:	4628      	mov	r0, r5
 80193fe:	47b0      	blx	r6
 8019400:	2800      	cmp	r0, #0
 8019402:	dc06      	bgt.n	8019412 <__sflush_r+0xfe>
 8019404:	89a3      	ldrh	r3, [r4, #12]
 8019406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801940a:	81a3      	strh	r3, [r4, #12]
 801940c:	f04f 30ff 	mov.w	r0, #4294967295
 8019410:	e78e      	b.n	8019330 <__sflush_r+0x1c>
 8019412:	4407      	add	r7, r0
 8019414:	eba8 0800 	sub.w	r8, r8, r0
 8019418:	e7e9      	b.n	80193ee <__sflush_r+0xda>
 801941a:	bf00      	nop
 801941c:	dfbffffe 	.word	0xdfbffffe

08019420 <_fflush_r>:
 8019420:	b538      	push	{r3, r4, r5, lr}
 8019422:	690b      	ldr	r3, [r1, #16]
 8019424:	4605      	mov	r5, r0
 8019426:	460c      	mov	r4, r1
 8019428:	b913      	cbnz	r3, 8019430 <_fflush_r+0x10>
 801942a:	2500      	movs	r5, #0
 801942c:	4628      	mov	r0, r5
 801942e:	bd38      	pop	{r3, r4, r5, pc}
 8019430:	b118      	cbz	r0, 801943a <_fflush_r+0x1a>
 8019432:	6a03      	ldr	r3, [r0, #32]
 8019434:	b90b      	cbnz	r3, 801943a <_fflush_r+0x1a>
 8019436:	f7fe f91f 	bl	8017678 <__sinit>
 801943a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d0f3      	beq.n	801942a <_fflush_r+0xa>
 8019442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019444:	07d0      	lsls	r0, r2, #31
 8019446:	d404      	bmi.n	8019452 <_fflush_r+0x32>
 8019448:	0599      	lsls	r1, r3, #22
 801944a:	d402      	bmi.n	8019452 <_fflush_r+0x32>
 801944c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801944e:	f7fe fb14 	bl	8017a7a <__retarget_lock_acquire_recursive>
 8019452:	4628      	mov	r0, r5
 8019454:	4621      	mov	r1, r4
 8019456:	f7ff ff5d 	bl	8019314 <__sflush_r>
 801945a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801945c:	07da      	lsls	r2, r3, #31
 801945e:	4605      	mov	r5, r0
 8019460:	d4e4      	bmi.n	801942c <_fflush_r+0xc>
 8019462:	89a3      	ldrh	r3, [r4, #12]
 8019464:	059b      	lsls	r3, r3, #22
 8019466:	d4e1      	bmi.n	801942c <_fflush_r+0xc>
 8019468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801946a:	f7fe fb07 	bl	8017a7c <__retarget_lock_release_recursive>
 801946e:	e7dd      	b.n	801942c <_fflush_r+0xc>

08019470 <__swhatbuf_r>:
 8019470:	b570      	push	{r4, r5, r6, lr}
 8019472:	460c      	mov	r4, r1
 8019474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019478:	2900      	cmp	r1, #0
 801947a:	b096      	sub	sp, #88	; 0x58
 801947c:	4615      	mov	r5, r2
 801947e:	461e      	mov	r6, r3
 8019480:	da0d      	bge.n	801949e <__swhatbuf_r+0x2e>
 8019482:	89a3      	ldrh	r3, [r4, #12]
 8019484:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019488:	f04f 0100 	mov.w	r1, #0
 801948c:	bf0c      	ite	eq
 801948e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019492:	2340      	movne	r3, #64	; 0x40
 8019494:	2000      	movs	r0, #0
 8019496:	6031      	str	r1, [r6, #0]
 8019498:	602b      	str	r3, [r5, #0]
 801949a:	b016      	add	sp, #88	; 0x58
 801949c:	bd70      	pop	{r4, r5, r6, pc}
 801949e:	466a      	mov	r2, sp
 80194a0:	f000 f87c 	bl	801959c <_fstat_r>
 80194a4:	2800      	cmp	r0, #0
 80194a6:	dbec      	blt.n	8019482 <__swhatbuf_r+0x12>
 80194a8:	9901      	ldr	r1, [sp, #4]
 80194aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80194ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80194b2:	4259      	negs	r1, r3
 80194b4:	4159      	adcs	r1, r3
 80194b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80194ba:	e7eb      	b.n	8019494 <__swhatbuf_r+0x24>

080194bc <__smakebuf_r>:
 80194bc:	898b      	ldrh	r3, [r1, #12]
 80194be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80194c0:	079d      	lsls	r5, r3, #30
 80194c2:	4606      	mov	r6, r0
 80194c4:	460c      	mov	r4, r1
 80194c6:	d507      	bpl.n	80194d8 <__smakebuf_r+0x1c>
 80194c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80194cc:	6023      	str	r3, [r4, #0]
 80194ce:	6123      	str	r3, [r4, #16]
 80194d0:	2301      	movs	r3, #1
 80194d2:	6163      	str	r3, [r4, #20]
 80194d4:	b002      	add	sp, #8
 80194d6:	bd70      	pop	{r4, r5, r6, pc}
 80194d8:	ab01      	add	r3, sp, #4
 80194da:	466a      	mov	r2, sp
 80194dc:	f7ff ffc8 	bl	8019470 <__swhatbuf_r>
 80194e0:	9900      	ldr	r1, [sp, #0]
 80194e2:	4605      	mov	r5, r0
 80194e4:	4630      	mov	r0, r6
 80194e6:	f7ff f9c9 	bl	801887c <_malloc_r>
 80194ea:	b948      	cbnz	r0, 8019500 <__smakebuf_r+0x44>
 80194ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194f0:	059a      	lsls	r2, r3, #22
 80194f2:	d4ef      	bmi.n	80194d4 <__smakebuf_r+0x18>
 80194f4:	f023 0303 	bic.w	r3, r3, #3
 80194f8:	f043 0302 	orr.w	r3, r3, #2
 80194fc:	81a3      	strh	r3, [r4, #12]
 80194fe:	e7e3      	b.n	80194c8 <__smakebuf_r+0xc>
 8019500:	89a3      	ldrh	r3, [r4, #12]
 8019502:	6020      	str	r0, [r4, #0]
 8019504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019508:	81a3      	strh	r3, [r4, #12]
 801950a:	9b00      	ldr	r3, [sp, #0]
 801950c:	6163      	str	r3, [r4, #20]
 801950e:	9b01      	ldr	r3, [sp, #4]
 8019510:	6120      	str	r0, [r4, #16]
 8019512:	b15b      	cbz	r3, 801952c <__smakebuf_r+0x70>
 8019514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019518:	4630      	mov	r0, r6
 801951a:	f000 f851 	bl	80195c0 <_isatty_r>
 801951e:	b128      	cbz	r0, 801952c <__smakebuf_r+0x70>
 8019520:	89a3      	ldrh	r3, [r4, #12]
 8019522:	f023 0303 	bic.w	r3, r3, #3
 8019526:	f043 0301 	orr.w	r3, r3, #1
 801952a:	81a3      	strh	r3, [r4, #12]
 801952c:	89a3      	ldrh	r3, [r4, #12]
 801952e:	431d      	orrs	r5, r3
 8019530:	81a5      	strh	r5, [r4, #12]
 8019532:	e7cf      	b.n	80194d4 <__smakebuf_r+0x18>

08019534 <_putc_r>:
 8019534:	b570      	push	{r4, r5, r6, lr}
 8019536:	460d      	mov	r5, r1
 8019538:	4614      	mov	r4, r2
 801953a:	4606      	mov	r6, r0
 801953c:	b118      	cbz	r0, 8019546 <_putc_r+0x12>
 801953e:	6a03      	ldr	r3, [r0, #32]
 8019540:	b90b      	cbnz	r3, 8019546 <_putc_r+0x12>
 8019542:	f7fe f899 	bl	8017678 <__sinit>
 8019546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019548:	07d8      	lsls	r0, r3, #31
 801954a:	d405      	bmi.n	8019558 <_putc_r+0x24>
 801954c:	89a3      	ldrh	r3, [r4, #12]
 801954e:	0599      	lsls	r1, r3, #22
 8019550:	d402      	bmi.n	8019558 <_putc_r+0x24>
 8019552:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019554:	f7fe fa91 	bl	8017a7a <__retarget_lock_acquire_recursive>
 8019558:	68a3      	ldr	r3, [r4, #8]
 801955a:	3b01      	subs	r3, #1
 801955c:	2b00      	cmp	r3, #0
 801955e:	60a3      	str	r3, [r4, #8]
 8019560:	da05      	bge.n	801956e <_putc_r+0x3a>
 8019562:	69a2      	ldr	r2, [r4, #24]
 8019564:	4293      	cmp	r3, r2
 8019566:	db12      	blt.n	801958e <_putc_r+0x5a>
 8019568:	b2eb      	uxtb	r3, r5
 801956a:	2b0a      	cmp	r3, #10
 801956c:	d00f      	beq.n	801958e <_putc_r+0x5a>
 801956e:	6823      	ldr	r3, [r4, #0]
 8019570:	1c5a      	adds	r2, r3, #1
 8019572:	6022      	str	r2, [r4, #0]
 8019574:	701d      	strb	r5, [r3, #0]
 8019576:	b2ed      	uxtb	r5, r5
 8019578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801957a:	07da      	lsls	r2, r3, #31
 801957c:	d405      	bmi.n	801958a <_putc_r+0x56>
 801957e:	89a3      	ldrh	r3, [r4, #12]
 8019580:	059b      	lsls	r3, r3, #22
 8019582:	d402      	bmi.n	801958a <_putc_r+0x56>
 8019584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019586:	f7fe fa79 	bl	8017a7c <__retarget_lock_release_recursive>
 801958a:	4628      	mov	r0, r5
 801958c:	bd70      	pop	{r4, r5, r6, pc}
 801958e:	4629      	mov	r1, r5
 8019590:	4622      	mov	r2, r4
 8019592:	4630      	mov	r0, r6
 8019594:	f7fe f95f 	bl	8017856 <__swbuf_r>
 8019598:	4605      	mov	r5, r0
 801959a:	e7ed      	b.n	8019578 <_putc_r+0x44>

0801959c <_fstat_r>:
 801959c:	b538      	push	{r3, r4, r5, lr}
 801959e:	4d07      	ldr	r5, [pc, #28]	; (80195bc <_fstat_r+0x20>)
 80195a0:	2300      	movs	r3, #0
 80195a2:	4604      	mov	r4, r0
 80195a4:	4608      	mov	r0, r1
 80195a6:	4611      	mov	r1, r2
 80195a8:	602b      	str	r3, [r5, #0]
 80195aa:	f7eb f9de 	bl	800496a <_fstat>
 80195ae:	1c43      	adds	r3, r0, #1
 80195b0:	d102      	bne.n	80195b8 <_fstat_r+0x1c>
 80195b2:	682b      	ldr	r3, [r5, #0]
 80195b4:	b103      	cbz	r3, 80195b8 <_fstat_r+0x1c>
 80195b6:	6023      	str	r3, [r4, #0]
 80195b8:	bd38      	pop	{r3, r4, r5, pc}
 80195ba:	bf00      	nop
 80195bc:	20003eec 	.word	0x20003eec

080195c0 <_isatty_r>:
 80195c0:	b538      	push	{r3, r4, r5, lr}
 80195c2:	4d06      	ldr	r5, [pc, #24]	; (80195dc <_isatty_r+0x1c>)
 80195c4:	2300      	movs	r3, #0
 80195c6:	4604      	mov	r4, r0
 80195c8:	4608      	mov	r0, r1
 80195ca:	602b      	str	r3, [r5, #0]
 80195cc:	f7eb f9dd 	bl	800498a <_isatty>
 80195d0:	1c43      	adds	r3, r0, #1
 80195d2:	d102      	bne.n	80195da <_isatty_r+0x1a>
 80195d4:	682b      	ldr	r3, [r5, #0]
 80195d6:	b103      	cbz	r3, 80195da <_isatty_r+0x1a>
 80195d8:	6023      	str	r3, [r4, #0]
 80195da:	bd38      	pop	{r3, r4, r5, pc}
 80195dc:	20003eec 	.word	0x20003eec

080195e0 <_sbrk_r>:
 80195e0:	b538      	push	{r3, r4, r5, lr}
 80195e2:	4d06      	ldr	r5, [pc, #24]	; (80195fc <_sbrk_r+0x1c>)
 80195e4:	2300      	movs	r3, #0
 80195e6:	4604      	mov	r4, r0
 80195e8:	4608      	mov	r0, r1
 80195ea:	602b      	str	r3, [r5, #0]
 80195ec:	f7eb f9e6 	bl	80049bc <_sbrk>
 80195f0:	1c43      	adds	r3, r0, #1
 80195f2:	d102      	bne.n	80195fa <_sbrk_r+0x1a>
 80195f4:	682b      	ldr	r3, [r5, #0]
 80195f6:	b103      	cbz	r3, 80195fa <_sbrk_r+0x1a>
 80195f8:	6023      	str	r3, [r4, #0]
 80195fa:	bd38      	pop	{r3, r4, r5, pc}
 80195fc:	20003eec 	.word	0x20003eec

08019600 <__assert_func>:
 8019600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019602:	4614      	mov	r4, r2
 8019604:	461a      	mov	r2, r3
 8019606:	4b09      	ldr	r3, [pc, #36]	; (801962c <__assert_func+0x2c>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	4605      	mov	r5, r0
 801960c:	68d8      	ldr	r0, [r3, #12]
 801960e:	b14c      	cbz	r4, 8019624 <__assert_func+0x24>
 8019610:	4b07      	ldr	r3, [pc, #28]	; (8019630 <__assert_func+0x30>)
 8019612:	9100      	str	r1, [sp, #0]
 8019614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019618:	4906      	ldr	r1, [pc, #24]	; (8019634 <__assert_func+0x34>)
 801961a:	462b      	mov	r3, r5
 801961c:	f000 f844 	bl	80196a8 <fiprintf>
 8019620:	f000 f854 	bl	80196cc <abort>
 8019624:	4b04      	ldr	r3, [pc, #16]	; (8019638 <__assert_func+0x38>)
 8019626:	461c      	mov	r4, r3
 8019628:	e7f3      	b.n	8019612 <__assert_func+0x12>
 801962a:	bf00      	nop
 801962c:	200001d4 	.word	0x200001d4
 8019630:	0802fabf 	.word	0x0802fabf
 8019634:	0802facc 	.word	0x0802facc
 8019638:	0802fafa 	.word	0x0802fafa

0801963c <_calloc_r>:
 801963c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801963e:	fba1 2402 	umull	r2, r4, r1, r2
 8019642:	b94c      	cbnz	r4, 8019658 <_calloc_r+0x1c>
 8019644:	4611      	mov	r1, r2
 8019646:	9201      	str	r2, [sp, #4]
 8019648:	f7ff f918 	bl	801887c <_malloc_r>
 801964c:	9a01      	ldr	r2, [sp, #4]
 801964e:	4605      	mov	r5, r0
 8019650:	b930      	cbnz	r0, 8019660 <_calloc_r+0x24>
 8019652:	4628      	mov	r0, r5
 8019654:	b003      	add	sp, #12
 8019656:	bd30      	pop	{r4, r5, pc}
 8019658:	220c      	movs	r2, #12
 801965a:	6002      	str	r2, [r0, #0]
 801965c:	2500      	movs	r5, #0
 801965e:	e7f8      	b.n	8019652 <_calloc_r+0x16>
 8019660:	4621      	mov	r1, r4
 8019662:	f7fe f98d 	bl	8017980 <memset>
 8019666:	e7f4      	b.n	8019652 <_calloc_r+0x16>

08019668 <__ascii_mbtowc>:
 8019668:	b082      	sub	sp, #8
 801966a:	b901      	cbnz	r1, 801966e <__ascii_mbtowc+0x6>
 801966c:	a901      	add	r1, sp, #4
 801966e:	b142      	cbz	r2, 8019682 <__ascii_mbtowc+0x1a>
 8019670:	b14b      	cbz	r3, 8019686 <__ascii_mbtowc+0x1e>
 8019672:	7813      	ldrb	r3, [r2, #0]
 8019674:	600b      	str	r3, [r1, #0]
 8019676:	7812      	ldrb	r2, [r2, #0]
 8019678:	1e10      	subs	r0, r2, #0
 801967a:	bf18      	it	ne
 801967c:	2001      	movne	r0, #1
 801967e:	b002      	add	sp, #8
 8019680:	4770      	bx	lr
 8019682:	4610      	mov	r0, r2
 8019684:	e7fb      	b.n	801967e <__ascii_mbtowc+0x16>
 8019686:	f06f 0001 	mvn.w	r0, #1
 801968a:	e7f8      	b.n	801967e <__ascii_mbtowc+0x16>

0801968c <__ascii_wctomb>:
 801968c:	b149      	cbz	r1, 80196a2 <__ascii_wctomb+0x16>
 801968e:	2aff      	cmp	r2, #255	; 0xff
 8019690:	bf85      	ittet	hi
 8019692:	238a      	movhi	r3, #138	; 0x8a
 8019694:	6003      	strhi	r3, [r0, #0]
 8019696:	700a      	strbls	r2, [r1, #0]
 8019698:	f04f 30ff 	movhi.w	r0, #4294967295
 801969c:	bf98      	it	ls
 801969e:	2001      	movls	r0, #1
 80196a0:	4770      	bx	lr
 80196a2:	4608      	mov	r0, r1
 80196a4:	4770      	bx	lr
	...

080196a8 <fiprintf>:
 80196a8:	b40e      	push	{r1, r2, r3}
 80196aa:	b503      	push	{r0, r1, lr}
 80196ac:	4601      	mov	r1, r0
 80196ae:	ab03      	add	r3, sp, #12
 80196b0:	4805      	ldr	r0, [pc, #20]	; (80196c8 <fiprintf+0x20>)
 80196b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80196b6:	6800      	ldr	r0, [r0, #0]
 80196b8:	9301      	str	r3, [sp, #4]
 80196ba:	f7ff fd11 	bl	80190e0 <_vfiprintf_r>
 80196be:	b002      	add	sp, #8
 80196c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80196c4:	b003      	add	sp, #12
 80196c6:	4770      	bx	lr
 80196c8:	200001d4 	.word	0x200001d4

080196cc <abort>:
 80196cc:	b508      	push	{r3, lr}
 80196ce:	2006      	movs	r0, #6
 80196d0:	f000 f82c 	bl	801972c <raise>
 80196d4:	2001      	movs	r0, #1
 80196d6:	f7eb f8f9 	bl	80048cc <_exit>

080196da <_raise_r>:
 80196da:	291f      	cmp	r1, #31
 80196dc:	b538      	push	{r3, r4, r5, lr}
 80196de:	4604      	mov	r4, r0
 80196e0:	460d      	mov	r5, r1
 80196e2:	d904      	bls.n	80196ee <_raise_r+0x14>
 80196e4:	2316      	movs	r3, #22
 80196e6:	6003      	str	r3, [r0, #0]
 80196e8:	f04f 30ff 	mov.w	r0, #4294967295
 80196ec:	bd38      	pop	{r3, r4, r5, pc}
 80196ee:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80196f0:	b112      	cbz	r2, 80196f8 <_raise_r+0x1e>
 80196f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80196f6:	b94b      	cbnz	r3, 801970c <_raise_r+0x32>
 80196f8:	4620      	mov	r0, r4
 80196fa:	f000 f831 	bl	8019760 <_getpid_r>
 80196fe:	462a      	mov	r2, r5
 8019700:	4601      	mov	r1, r0
 8019702:	4620      	mov	r0, r4
 8019704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019708:	f000 b818 	b.w	801973c <_kill_r>
 801970c:	2b01      	cmp	r3, #1
 801970e:	d00a      	beq.n	8019726 <_raise_r+0x4c>
 8019710:	1c59      	adds	r1, r3, #1
 8019712:	d103      	bne.n	801971c <_raise_r+0x42>
 8019714:	2316      	movs	r3, #22
 8019716:	6003      	str	r3, [r0, #0]
 8019718:	2001      	movs	r0, #1
 801971a:	e7e7      	b.n	80196ec <_raise_r+0x12>
 801971c:	2400      	movs	r4, #0
 801971e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019722:	4628      	mov	r0, r5
 8019724:	4798      	blx	r3
 8019726:	2000      	movs	r0, #0
 8019728:	e7e0      	b.n	80196ec <_raise_r+0x12>
	...

0801972c <raise>:
 801972c:	4b02      	ldr	r3, [pc, #8]	; (8019738 <raise+0xc>)
 801972e:	4601      	mov	r1, r0
 8019730:	6818      	ldr	r0, [r3, #0]
 8019732:	f7ff bfd2 	b.w	80196da <_raise_r>
 8019736:	bf00      	nop
 8019738:	200001d4 	.word	0x200001d4

0801973c <_kill_r>:
 801973c:	b538      	push	{r3, r4, r5, lr}
 801973e:	4d07      	ldr	r5, [pc, #28]	; (801975c <_kill_r+0x20>)
 8019740:	2300      	movs	r3, #0
 8019742:	4604      	mov	r4, r0
 8019744:	4608      	mov	r0, r1
 8019746:	4611      	mov	r1, r2
 8019748:	602b      	str	r3, [r5, #0]
 801974a:	f7eb f8af 	bl	80048ac <_kill>
 801974e:	1c43      	adds	r3, r0, #1
 8019750:	d102      	bne.n	8019758 <_kill_r+0x1c>
 8019752:	682b      	ldr	r3, [r5, #0]
 8019754:	b103      	cbz	r3, 8019758 <_kill_r+0x1c>
 8019756:	6023      	str	r3, [r4, #0]
 8019758:	bd38      	pop	{r3, r4, r5, pc}
 801975a:	bf00      	nop
 801975c:	20003eec 	.word	0x20003eec

08019760 <_getpid_r>:
 8019760:	f7eb b89c 	b.w	800489c <_getpid>

08019764 <atan2f>:
 8019764:	f000 b822 	b.w	80197ac <__ieee754_atan2f>

08019768 <sqrtf>:
 8019768:	b508      	push	{r3, lr}
 801976a:	ed2d 8b02 	vpush	{d8}
 801976e:	eeb0 8a40 	vmov.f32	s16, s0
 8019772:	f000 f817 	bl	80197a4 <__ieee754_sqrtf>
 8019776:	eeb4 8a48 	vcmp.f32	s16, s16
 801977a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801977e:	d60c      	bvs.n	801979a <sqrtf+0x32>
 8019780:	eddf 8a07 	vldr	s17, [pc, #28]	; 80197a0 <sqrtf+0x38>
 8019784:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801978c:	d505      	bpl.n	801979a <sqrtf+0x32>
 801978e:	f7fe f949 	bl	8017a24 <__errno>
 8019792:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019796:	2321      	movs	r3, #33	; 0x21
 8019798:	6003      	str	r3, [r0, #0]
 801979a:	ecbd 8b02 	vpop	{d8}
 801979e:	bd08      	pop	{r3, pc}
 80197a0:	00000000 	.word	0x00000000

080197a4 <__ieee754_sqrtf>:
 80197a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80197a8:	4770      	bx	lr
	...

080197ac <__ieee754_atan2f>:
 80197ac:	ee10 2a90 	vmov	r2, s1
 80197b0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80197b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80197b8:	b510      	push	{r4, lr}
 80197ba:	eef0 7a40 	vmov.f32	s15, s0
 80197be:	dc06      	bgt.n	80197ce <__ieee754_atan2f+0x22>
 80197c0:	ee10 0a10 	vmov	r0, s0
 80197c4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80197c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80197cc:	dd04      	ble.n	80197d8 <__ieee754_atan2f+0x2c>
 80197ce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80197d2:	eeb0 0a67 	vmov.f32	s0, s15
 80197d6:	bd10      	pop	{r4, pc}
 80197d8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80197dc:	d103      	bne.n	80197e6 <__ieee754_atan2f+0x3a>
 80197de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197e2:	f000 b883 	b.w	80198ec <atanf>
 80197e6:	1794      	asrs	r4, r2, #30
 80197e8:	f004 0402 	and.w	r4, r4, #2
 80197ec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80197f0:	b943      	cbnz	r3, 8019804 <__ieee754_atan2f+0x58>
 80197f2:	2c02      	cmp	r4, #2
 80197f4:	d05e      	beq.n	80198b4 <__ieee754_atan2f+0x108>
 80197f6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80198c8 <__ieee754_atan2f+0x11c>
 80197fa:	2c03      	cmp	r4, #3
 80197fc:	bf08      	it	eq
 80197fe:	eef0 7a47 	vmoveq.f32	s15, s14
 8019802:	e7e6      	b.n	80197d2 <__ieee754_atan2f+0x26>
 8019804:	b941      	cbnz	r1, 8019818 <__ieee754_atan2f+0x6c>
 8019806:	eddf 7a31 	vldr	s15, [pc, #196]	; 80198cc <__ieee754_atan2f+0x120>
 801980a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80198d0 <__ieee754_atan2f+0x124>
 801980e:	2800      	cmp	r0, #0
 8019810:	bfb8      	it	lt
 8019812:	eef0 7a47 	vmovlt.f32	s15, s14
 8019816:	e7dc      	b.n	80197d2 <__ieee754_atan2f+0x26>
 8019818:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801981c:	d110      	bne.n	8019840 <__ieee754_atan2f+0x94>
 801981e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019822:	f104 34ff 	add.w	r4, r4, #4294967295
 8019826:	d107      	bne.n	8019838 <__ieee754_atan2f+0x8c>
 8019828:	2c02      	cmp	r4, #2
 801982a:	d846      	bhi.n	80198ba <__ieee754_atan2f+0x10e>
 801982c:	4b29      	ldr	r3, [pc, #164]	; (80198d4 <__ieee754_atan2f+0x128>)
 801982e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019832:	edd3 7a00 	vldr	s15, [r3]
 8019836:	e7cc      	b.n	80197d2 <__ieee754_atan2f+0x26>
 8019838:	2c02      	cmp	r4, #2
 801983a:	d841      	bhi.n	80198c0 <__ieee754_atan2f+0x114>
 801983c:	4b26      	ldr	r3, [pc, #152]	; (80198d8 <__ieee754_atan2f+0x12c>)
 801983e:	e7f6      	b.n	801982e <__ieee754_atan2f+0x82>
 8019840:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019844:	d0df      	beq.n	8019806 <__ieee754_atan2f+0x5a>
 8019846:	1a5b      	subs	r3, r3, r1
 8019848:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801984c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019850:	da1a      	bge.n	8019888 <__ieee754_atan2f+0xdc>
 8019852:	2a00      	cmp	r2, #0
 8019854:	da01      	bge.n	801985a <__ieee754_atan2f+0xae>
 8019856:	313c      	adds	r1, #60	; 0x3c
 8019858:	db19      	blt.n	801988e <__ieee754_atan2f+0xe2>
 801985a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801985e:	f000 f919 	bl	8019a94 <fabsf>
 8019862:	f000 f843 	bl	80198ec <atanf>
 8019866:	eef0 7a40 	vmov.f32	s15, s0
 801986a:	2c01      	cmp	r4, #1
 801986c:	d012      	beq.n	8019894 <__ieee754_atan2f+0xe8>
 801986e:	2c02      	cmp	r4, #2
 8019870:	d017      	beq.n	80198a2 <__ieee754_atan2f+0xf6>
 8019872:	2c00      	cmp	r4, #0
 8019874:	d0ad      	beq.n	80197d2 <__ieee754_atan2f+0x26>
 8019876:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80198dc <__ieee754_atan2f+0x130>
 801987a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801987e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80198e0 <__ieee754_atan2f+0x134>
 8019882:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019886:	e7a4      	b.n	80197d2 <__ieee754_atan2f+0x26>
 8019888:	eddf 7a10 	vldr	s15, [pc, #64]	; 80198cc <__ieee754_atan2f+0x120>
 801988c:	e7ed      	b.n	801986a <__ieee754_atan2f+0xbe>
 801988e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80198e4 <__ieee754_atan2f+0x138>
 8019892:	e7ea      	b.n	801986a <__ieee754_atan2f+0xbe>
 8019894:	ee17 3a90 	vmov	r3, s15
 8019898:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801989c:	ee07 3a90 	vmov	s15, r3
 80198a0:	e797      	b.n	80197d2 <__ieee754_atan2f+0x26>
 80198a2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80198dc <__ieee754_atan2f+0x130>
 80198a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80198aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80198e0 <__ieee754_atan2f+0x134>
 80198ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80198b2:	e78e      	b.n	80197d2 <__ieee754_atan2f+0x26>
 80198b4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80198e0 <__ieee754_atan2f+0x134>
 80198b8:	e78b      	b.n	80197d2 <__ieee754_atan2f+0x26>
 80198ba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80198e8 <__ieee754_atan2f+0x13c>
 80198be:	e788      	b.n	80197d2 <__ieee754_atan2f+0x26>
 80198c0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80198e4 <__ieee754_atan2f+0x138>
 80198c4:	e785      	b.n	80197d2 <__ieee754_atan2f+0x26>
 80198c6:	bf00      	nop
 80198c8:	c0490fdb 	.word	0xc0490fdb
 80198cc:	3fc90fdb 	.word	0x3fc90fdb
 80198d0:	bfc90fdb 	.word	0xbfc90fdb
 80198d4:	0802fbfc 	.word	0x0802fbfc
 80198d8:	0802fc08 	.word	0x0802fc08
 80198dc:	33bbbd2e 	.word	0x33bbbd2e
 80198e0:	40490fdb 	.word	0x40490fdb
 80198e4:	00000000 	.word	0x00000000
 80198e8:	3f490fdb 	.word	0x3f490fdb

080198ec <atanf>:
 80198ec:	b538      	push	{r3, r4, r5, lr}
 80198ee:	ee10 5a10 	vmov	r5, s0
 80198f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80198f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80198fa:	eef0 7a40 	vmov.f32	s15, s0
 80198fe:	db10      	blt.n	8019922 <atanf+0x36>
 8019900:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019904:	dd04      	ble.n	8019910 <atanf+0x24>
 8019906:	ee70 7a00 	vadd.f32	s15, s0, s0
 801990a:	eeb0 0a67 	vmov.f32	s0, s15
 801990e:	bd38      	pop	{r3, r4, r5, pc}
 8019910:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8019a48 <atanf+0x15c>
 8019914:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8019a4c <atanf+0x160>
 8019918:	2d00      	cmp	r5, #0
 801991a:	bfd8      	it	le
 801991c:	eef0 7a47 	vmovle.f32	s15, s14
 8019920:	e7f3      	b.n	801990a <atanf+0x1e>
 8019922:	4b4b      	ldr	r3, [pc, #300]	; (8019a50 <atanf+0x164>)
 8019924:	429c      	cmp	r4, r3
 8019926:	dc10      	bgt.n	801994a <atanf+0x5e>
 8019928:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801992c:	da0a      	bge.n	8019944 <atanf+0x58>
 801992e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8019a54 <atanf+0x168>
 8019932:	ee30 7a07 	vadd.f32	s14, s0, s14
 8019936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801993a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019942:	dce2      	bgt.n	801990a <atanf+0x1e>
 8019944:	f04f 33ff 	mov.w	r3, #4294967295
 8019948:	e013      	b.n	8019972 <atanf+0x86>
 801994a:	f000 f8a3 	bl	8019a94 <fabsf>
 801994e:	4b42      	ldr	r3, [pc, #264]	; (8019a58 <atanf+0x16c>)
 8019950:	429c      	cmp	r4, r3
 8019952:	dc4f      	bgt.n	80199f4 <atanf+0x108>
 8019954:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8019958:	429c      	cmp	r4, r3
 801995a:	dc41      	bgt.n	80199e0 <atanf+0xf4>
 801995c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019960:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019964:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019968:	2300      	movs	r3, #0
 801996a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801996e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019972:	1c5a      	adds	r2, r3, #1
 8019974:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019978:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019a5c <atanf+0x170>
 801997c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8019a60 <atanf+0x174>
 8019980:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8019a64 <atanf+0x178>
 8019984:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019988:	eee6 5a87 	vfma.f32	s11, s13, s14
 801998c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8019a68 <atanf+0x17c>
 8019990:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019994:	eddf 5a35 	vldr	s11, [pc, #212]	; 8019a6c <atanf+0x180>
 8019998:	eee7 5a26 	vfma.f32	s11, s14, s13
 801999c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019a70 <atanf+0x184>
 80199a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80199a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8019a74 <atanf+0x188>
 80199a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80199ac:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8019a78 <atanf+0x18c>
 80199b0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80199b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8019a7c <atanf+0x190>
 80199b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80199bc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8019a80 <atanf+0x194>
 80199c0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80199c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8019a84 <atanf+0x198>
 80199c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80199cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80199d0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80199d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80199d8:	d121      	bne.n	8019a1e <atanf+0x132>
 80199da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80199de:	e794      	b.n	801990a <atanf+0x1e>
 80199e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80199e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80199e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80199ec:	2301      	movs	r3, #1
 80199ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80199f2:	e7be      	b.n	8019972 <atanf+0x86>
 80199f4:	4b24      	ldr	r3, [pc, #144]	; (8019a88 <atanf+0x19c>)
 80199f6:	429c      	cmp	r4, r3
 80199f8:	dc0b      	bgt.n	8019a12 <atanf+0x126>
 80199fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80199fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a02:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019a06:	2302      	movs	r3, #2
 8019a08:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019a10:	e7af      	b.n	8019972 <atanf+0x86>
 8019a12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019a16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019a1a:	2303      	movs	r3, #3
 8019a1c:	e7a9      	b.n	8019972 <atanf+0x86>
 8019a1e:	4a1b      	ldr	r2, [pc, #108]	; (8019a8c <atanf+0x1a0>)
 8019a20:	491b      	ldr	r1, [pc, #108]	; (8019a90 <atanf+0x1a4>)
 8019a22:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019a26:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019a2a:	edd3 6a00 	vldr	s13, [r3]
 8019a2e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019a32:	2d00      	cmp	r5, #0
 8019a34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019a38:	edd2 7a00 	vldr	s15, [r2]
 8019a3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a40:	bfb8      	it	lt
 8019a42:	eef1 7a67 	vneglt.f32	s15, s15
 8019a46:	e760      	b.n	801990a <atanf+0x1e>
 8019a48:	3fc90fdb 	.word	0x3fc90fdb
 8019a4c:	bfc90fdb 	.word	0xbfc90fdb
 8019a50:	3edfffff 	.word	0x3edfffff
 8019a54:	7149f2ca 	.word	0x7149f2ca
 8019a58:	3f97ffff 	.word	0x3f97ffff
 8019a5c:	3c8569d7 	.word	0x3c8569d7
 8019a60:	3d4bda59 	.word	0x3d4bda59
 8019a64:	bd6ef16b 	.word	0xbd6ef16b
 8019a68:	3d886b35 	.word	0x3d886b35
 8019a6c:	3dba2e6e 	.word	0x3dba2e6e
 8019a70:	3e124925 	.word	0x3e124925
 8019a74:	3eaaaaab 	.word	0x3eaaaaab
 8019a78:	bd15a221 	.word	0xbd15a221
 8019a7c:	bd9d8795 	.word	0xbd9d8795
 8019a80:	bde38e38 	.word	0xbde38e38
 8019a84:	be4ccccd 	.word	0xbe4ccccd
 8019a88:	401bffff 	.word	0x401bffff
 8019a8c:	0802fc14 	.word	0x0802fc14
 8019a90:	0802fc24 	.word	0x0802fc24

08019a94 <fabsf>:
 8019a94:	ee10 3a10 	vmov	r3, s0
 8019a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019a9c:	ee00 3a10 	vmov	s0, r3
 8019aa0:	4770      	bx	lr
	...

08019aa4 <_init>:
 8019aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aa6:	bf00      	nop
 8019aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019aaa:	bc08      	pop	{r3}
 8019aac:	469e      	mov	lr, r3
 8019aae:	4770      	bx	lr

08019ab0 <_fini>:
 8019ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ab2:	bf00      	nop
 8019ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ab6:	bc08      	pop	{r3}
 8019ab8:	469e      	mov	lr, r3
 8019aba:	4770      	bx	lr
