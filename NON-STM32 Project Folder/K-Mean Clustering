//Another way of code to detect blobs from the data.
//It is based on K-Mean clustering algorithm.
//However, it doesn't work well with the actual data, and it takes to much time to operate.
//You can put this code into "Tracking_Algorithm.c" file and test it.

int check(const int matrix[N][N], int i, int j, int val, int loc, int visited[N][N], int *blob_size)
{
    int x = j;
    int y = i;

    switch (loc)
    {
    case 1:
        // up
        y -= 1;
        break;
    case 2:
        // down
        y += 1;
        break;
    case 3:
        // left
        x -= 1;
        break;
    case 4:
        // right
        x += 1;
        break;
    case 5:
        // up right
        x += 1;
        y -= 1;
        break;
    case 6:
        // up left
        x -= 1;
        y -= 1;
        break;
    case 7:
        // down right
        x += 1;
        y += 1;
        break;
    case 8:
        // down left
        x -= 1;
        y += 1;
        break;
    default:
        x = -1;
        y = -1;
    }

    int result = 0;
    if (x >= 0 && y >= 0 && x < N && y < N) // Check if x and y are within valid range
    {
        float comp = matrix[y][x];
        if(comp > THRESHOLD)
        {
            ++(*blob_size);
        }
        result = (val > matrix[y][x]);
        if (result == 1)
        {
            visited[y][x] = 1;
        }
    }
    return result;
}

int find_centroids(int matrix[N][N], Point *center_of_mass)
{
    int blob_count = 0;
    //int visited[8][8] = {{0}}; // Changed the dimensions to match N
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            visited[i][j] = 0;
        }
    }

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            if (visited[i][j] == 1)
            {
                continue;
            }
            else
            {
                int size_blobs = 1;
                int result = 0;
                for (int k = 0; k < 8; k++)
                {
                    result = check(matrix, i, j, matrix[i][j], k + 1, visited, &size_blobs);
                    // consider the pixel of head is surrounded by the pixels that have lower values
                    if (result == 0)
                    {
                        break;
                    }
                }
                if (result)
                {
                    if(size_blobs >= MIN_BLOB_SIZE)
                    {
                        center_of_mass[blob_count].x = j;
                        center_of_mass[blob_count].y = i;
                        ++blob_count;
                    }
                }
                visited[i][j] = 1;
            }
        }
    }
    return blob_count;
}
