
Occ_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800970c  0800970c  0001970c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800980c  0800980c  0001980c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009810  08009810  00019810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000100  20000008  08009814  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a50  20000108  08009914  00020108  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001b58  08009914  00021b58  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 10 .debug_info   000169d9  00000000  00000000  0002017b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a8a  00000000  00000000  00036b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001838  00000000  00000000  0003a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001235  00000000  00000000  0003be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004c1d  00000000  00000000  0003d04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001859e  00000000  00000000  00041c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d73a6  00000000  00000000  0005a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000063ac  00000000  00000000  001315b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  0013795c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000108 	.word	0x20000108
 8000158:	00000000 	.word	0x00000000
 800015c:	080096f4 	.word	0x080096f4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000010c 	.word	0x2000010c
 8000178:	080096f4 	.word	0x080096f4

0800017c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800018c:	f023 0218 	bic.w	r2, r3, #24
 8000190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	4313      	orrs	r3, r2
 8000198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001a6:	4770      	bx	lr

080001a8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4313      	orrs	r3, r2
 80001be:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4013      	ands	r3, r2
 80001ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001cc:	68fb      	ldr	r3, [r7, #12]
}
 80001ce:	bf00      	nop
 80001d0:	3714      	adds	r7, #20
 80001d2:	46bd      	mov	sp, r7
 80001d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d8:	4770      	bx	lr

080001da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 fa97 	bl	8000710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e2:	f000 f809 	bl	80001f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001e6:	f000 f87b 	bl	80002e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f8d7 	bl	800039c <MX_GPIO_Init>
  MX_USB_Device_Init();
 80001ee:	f008 fcc1 	bl	8008b74 <MX_USB_Device_Init>
  MX_I2C1_Init();
 80001f2:	f000 f893 	bl	800031c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f6:	e7fe      	b.n	80001f6 <main+0x1c>

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b09a      	sub	sp, #104	; 0x68
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0320 	add.w	r3, r7, #32
 8000202:	2248      	movs	r2, #72	; 0x48
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f009 fa48 	bl	800969c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]
 800021a:	615a      	str	r2, [r3, #20]
 800021c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800021e:	f002 fc1f 	bl	8002a60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000222:	2010      	movs	r0, #16
 8000224:	f7ff ffaa 	bl	800017c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000228:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <SystemClock_Config+0xe4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000230:	4a2a      	ldr	r2, [pc, #168]	; (80002dc <SystemClock_Config+0xe4>)
 8000232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000236:	6013      	str	r3, [r2, #0]
 8000238:	4b28      	ldr	r3, [pc, #160]	; (80002dc <SystemClock_Config+0xe4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000240:	603b      	str	r3, [r7, #0]
 8000242:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000244:	2327      	movs	r3, #39	; 0x27
 8000246:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000256:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025c:	2340      	movs	r3, #64	; 0x40
 800025e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000260:	2300      	movs	r3, #0
 8000262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000264:	2360      	movs	r3, #96	; 0x60
 8000266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800026c:	2301      	movs	r3, #1
 800026e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000274:	2320      	movs	r3, #32
 8000276:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800027c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800027e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000282:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000288:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0320 	add.w	r3, r7, #32
 800028e:	4618      	mov	r0, r3
 8000290:	f002 ff72 	bl	8003178 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800029a:	f000 f8e5 	bl	8000468 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800029e:	236f      	movs	r3, #111	; 0x6f
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2303      	movs	r3, #3
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2103      	movs	r1, #3
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 face 	bl	8003860 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80002ca:	f000 f8cd 	bl	8000468 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002ce:	f004 f85f 	bl	8004390 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002d2:	bf00      	nop
 80002d4:	3768      	adds	r7, #104	; 0x68
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	58000400 	.word	0x58000400

080002e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b094      	sub	sp, #80	; 0x50
 80002e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002e6:	463b      	mov	r3, r7
 80002e8:	2250      	movs	r2, #80	; 0x50
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f009 f9d5 	bl	800969c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002f6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002f8:	2300      	movs	r3, #0
 80002fa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80002fc:	2310      	movs	r3, #16
 80002fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000300:	463b      	mov	r3, r7
 8000302:	4618      	mov	r0, r3
 8000304:	f003 fece 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800030e:	f000 f8ab 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000312:	bf00      	nop
 8000314:	3750      	adds	r7, #80	; 0x50
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000320:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <MX_I2C1_Init+0x74>)
 8000322:	4a1c      	ldr	r2, [pc, #112]	; (8000394 <MX_I2C1_Init+0x78>)
 8000324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000326:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <MX_I2C1_Init+0x74>)
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <MX_I2C1_Init+0x7c>)
 800032a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800032c:	4b18      	ldr	r3, [pc, #96]	; (8000390 <MX_I2C1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_I2C1_Init+0x74>)
 8000334:	2201      	movs	r2, #1
 8000336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_I2C1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034a:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_I2C1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000356:	480e      	ldr	r0, [pc, #56]	; (8000390 <MX_I2C1_Init+0x74>)
 8000358:	f000 fd1b 	bl	8000d92 <HAL_I2C_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000362:	f000 f881 	bl	8000468 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000366:	2100      	movs	r1, #0
 8000368:	4809      	ldr	r0, [pc, #36]	; (8000390 <MX_I2C1_Init+0x74>)
 800036a:	f000 fdad 	bl	8000ec8 <HAL_I2CEx_ConfigAnalogFilter>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000374:	f000 f878 	bl	8000468 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000378:	2100      	movs	r1, #0
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_I2C1_Init+0x74>)
 800037c:	f000 fdef 	bl	8000f5e <HAL_I2CEx_ConfigDigitalFilter>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000386:	f000 f86f 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000124 	.word	0x20000124
 8000394:	40005400 	.word	0x40005400
 8000398:	10707dbc 	.word	0x10707dbc

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	2004      	movs	r0, #4
 80003b2:	f7ff fef9 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	2001      	movs	r0, #1
 80003b8:	f7ff fef6 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003bc:	2002      	movs	r0, #2
 80003be:	f7ff fef3 	bl	80001a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LDO_ENABLE_Pin|LPn_Pin|SYNC_TOF_Pin, GPIO_PIN_SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	21a8      	movs	r1, #168	; 0xa8
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f000 fca7 	bl	8000d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_RST_TOF_GPIO_Port, I2C_RST_TOF_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d8:	f000 fca0 	bl	8000d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2120      	movs	r1, #32
 80003e0:	4820      	ldr	r0, [pc, #128]	; (8000464 <MX_GPIO_Init+0xc8>)
 80003e2:	f000 fc9b 	bl	8000d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LDO_ENABLE_Pin LPn_Pin SYNC_TOF_Pin I2C_RST_TOF_Pin */
  GPIO_InitStruct.Pin = LDO_ENABLE_Pin|LPn_Pin|SYNC_TOF_Pin|I2C_RST_TOF_Pin;
 80003e6:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80003ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000400:	f000 fb1c 	bl	8000a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_TOF_Pin INT_CLR_Pin */
  GPIO_InitStruct.Pin = INT_TOF_Pin|INT_CLR_Pin;
 8000404:	f248 0340 	movw	r3, #32832	; 0x8040
 8000408:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800040a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800040e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4619      	mov	r1, r3
 8000418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041c:	f000 fb0e 	bl	8000a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000420:	2320      	movs	r3, #32
 8000422:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	2301      	movs	r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	4619      	mov	r1, r3
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <MX_GPIO_Init+0xc8>)
 8000436:	f000 fb01 	bl	8000a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2100      	movs	r1, #0
 800043e:	2017      	movs	r0, #23
 8000440:	f000 fac7 	bl	80009d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000444:	2017      	movs	r0, #23
 8000446:	f000 fade 	bl	8000a06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2028      	movs	r0, #40	; 0x28
 8000450:	f000 fabf 	bl	80009d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000454:	2028      	movs	r0, #40	; 0x28
 8000456:	f000 fad6 	bl	8000a06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	bf00      	nop
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	48000400 	.word	0x48000400

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>

08000472 <LL_AHB2_GRP1_EnableClock>:
{
 8000472:	b480      	push	{r7}
 8000474:	b085      	sub	sp, #20
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800047a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800047e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4313      	orrs	r3, r2
 8000488:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800048a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b09c      	sub	sp, #112	; 0x70
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2250      	movs	r2, #80	; 0x50
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f009 f8c9 	bl	800969c <memset>
  if(hi2c->Instance==I2C1)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a16      	ldr	r2, [pc, #88]	; (8000568 <HAL_I2C_MspInit+0x84>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d125      	bne.n	8000560 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000514:	2304      	movs	r3, #4
 8000516:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000518:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800051c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fdbe 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800052e:	f7ff ff9b 	bl	8000468 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2002      	movs	r0, #2
 8000534:	f7ff ff9d 	bl	8000472 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000538:	23c0      	movs	r3, #192	; 0xc0
 800053a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800053c:	2312      	movs	r3, #18
 800053e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000548:	2304      	movs	r3, #4
 800054a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000550:	4619      	mov	r1, r3
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <HAL_I2C_MspInit+0x88>)
 8000554:	f000 fa72 	bl	8000a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000558:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800055c:	f7ff ffa2 	bl	80004a4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000560:	bf00      	nop
 8000562:	3770      	adds	r7, #112	; 0x70
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40005400 	.word	0x40005400
 800056c:	48000400 	.word	0x48000400

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f902 	bl	80007c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <USB_LP_IRQHandler+0x10>)
 80005ca:	f000 fe04 	bl	80011d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000165c 	.word	0x2000165c

080005d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_TOF_Pin);
 80005dc:	2040      	movs	r0, #64	; 0x40
 80005de:	f000 fbb5 	bl	8000d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_CLR_Pin);
 80005ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005ee:	f000 fbad 	bl	8000d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <SystemInit+0x98>)
 80005fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000602:	4a23      	ldr	r2, [pc, #140]	; (8000690 <SystemInit+0x98>)
 8000604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800060c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800061c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000620:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000624:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <SystemInit+0x9c>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800063a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800063e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000642:	f023 0305 	bic.w	r3, r3, #5
 8000646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000656:	f023 0301 	bic.w	r3, r3, #1
 800065a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800065e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <SystemInit+0xa0>)
 8000664:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <SystemInit+0xa0>)
 800066c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800066e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800067c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800067e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00
 8000694:	faf6fefb 	.word	0xfaf6fefb
 8000698:	22041000 	.word	0x22041000

0800069c <CopyDataInit>:
 800069c:	58d4      	ldr	r4, [r2, r3]
 800069e:	50c4      	str	r4, [r0, r3]
 80006a0:	3304      	adds	r3, #4

080006a2 <LoopCopyDataInit>:
 80006a2:	18c4      	adds	r4, r0, r3
 80006a4:	428c      	cmp	r4, r1
 80006a6:	d3f9      	bcc.n	800069c <CopyDataInit>
 80006a8:	4770      	bx	lr

080006aa <FillZerobss>:
 80006aa:	6003      	str	r3, [r0, #0]
 80006ac:	3004      	adds	r0, #4

080006ae <LoopFillZerobss>:
 80006ae:	4288      	cmp	r0, r1
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>
 80006b2:	4770      	bx	lr

080006b4 <Reset_Handler>:
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x2>)
 80006b6:	4685      	mov	sp, r0
 80006b8:	f7ff ff9e 	bl	80005f8 <SystemInit>
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <LoopForever+0x6>)
 80006be:	490c      	ldr	r1, [pc, #48]	; (80006f0 <LoopForever+0xa>)
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <LoopForever+0xe>)
 80006c2:	2300      	movs	r3, #0
 80006c4:	f7ff ffed 	bl	80006a2 <LoopCopyDataInit>
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <LoopForever+0x12>)
 80006ca:	490c      	ldr	r1, [pc, #48]	; (80006fc <LoopForever+0x16>)
 80006cc:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <LoopForever+0x1a>)
 80006ce:	2300      	movs	r3, #0
 80006d0:	f7ff ffe7 	bl	80006a2 <LoopCopyDataInit>
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <LoopForever+0x1e>)
 80006d6:	490c      	ldr	r1, [pc, #48]	; (8000708 <LoopForever+0x22>)
 80006d8:	2300      	movs	r3, #0
 80006da:	f7ff ffe8 	bl	80006ae <LoopFillZerobss>
 80006de:	f008 ffe5 	bl	80096ac <__libc_init_array>
 80006e2:	f7ff fd7a 	bl	80001da <main>

080006e6 <LoopForever>:
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
 80006e8:	20030000 	.word	0x20030000
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000108 	.word	0x20000108
 80006f4:	08009814 	.word	0x08009814
 80006f8:	20030000 	.word	0x20030000
 80006fc:	20030000 	.word	0x20030000
 8000700:	08009914 	.word	0x08009914
 8000704:	20000108 	.word	0x20000108
 8000708:	20001b58 	.word	0x20001b58

0800070c <ADC1_IRQHandler>:
 800070c:	e7fe      	b.n	800070c <ADC1_IRQHandler>
	...

08000710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_Init+0x3c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <HAL_Init+0x3c>)
 8000720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000724:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000726:	2003      	movs	r0, #3
 8000728:	f000 f948 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800072c:	200f      	movs	r0, #15
 800072e:	f000 f80f 	bl	8000750 <HAL_InitTick>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	e001      	b.n	8000742 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800073e:	f7ff feca 	bl	80004d6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000742:	79fb      	ldrb	r3, [r7, #7]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	58004000 	.word	0x58004000

08000750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000758:	2300      	movs	r3, #0
 800075a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <HAL_InitTick+0x6c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d024      	beq.n	80007ae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000764:	f003 fa2a 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8000768:	4602      	mov	r2, r0
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <HAL_InitTick+0x6c>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4619      	mov	r1, r3
 8000770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000774:	fbb3 f3f1 	udiv	r3, r3, r1
 8000778:	fbb2 f3f3 	udiv	r3, r2, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f950 	bl	8000a22 <HAL_SYSTICK_Config>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10f      	bne.n	80007a8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b0f      	cmp	r3, #15
 800078c:	d809      	bhi.n	80007a2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078e:	2200      	movs	r2, #0
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	f04f 30ff 	mov.w	r0, #4294967295
 8000796:	f000 f91c 	bl	80009d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800079a:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <HAL_InitTick+0x70>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	e007      	b.n	80007b2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e004      	b.n	80007b2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e001      	b.n	80007b2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000010 	.word	0x20000010
 80007c0:	2000000c 	.word	0x2000000c

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_IncTick+0x20>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_IncTick+0x24>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_IncTick+0x24>)
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000010 	.word	0x20000010
 80007e8:	20000178 	.word	0x20000178

080007ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return uwTick;
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <HAL_GetTick+0x14>)
 80007f2:	681b      	ldr	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000178 	.word	0x20000178

08000804 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_GetTickPrio+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	2000000c 	.word	0x2000000c

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <__NVIC_EnableIRQ+0x38>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	; 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000988:	d301      	bcc.n	800098e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098a:	2301      	movs	r3, #1
 800098c:	e00f      	b.n	80009ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <SysTick_Config+0x40>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000996:	210f      	movs	r1, #15
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f7ff ff8e 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <SysTick_Config+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SysTick_Config+0x40>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff29 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009e0:	f7ff ff40 	bl	8000864 <__NVIC_GetPriorityGrouping>
 80009e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	6978      	ldr	r0, [r7, #20]
 80009ec:	f7ff ff90 	bl	8000910 <NVIC_EncodePriority>
 80009f0:	4602      	mov	r2, r0
 80009f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff5f 	bl	80008bc <__NVIC_SetPriority>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff33 	bl	8000880 <__NVIC_EnableIRQ>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffa4 	bl	8000978 <SysTick_Config>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4a:	e14c      	b.n	8000ce6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	2101      	movs	r1, #1
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	fa01 f303 	lsl.w	r3, r1, r3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 813e 	beq.w	8000ce0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 0303 	and.w	r3, r3, #3
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d005      	beq.n	8000a7c <HAL_GPIO_Init+0x40>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d130      	bne.n	8000ade <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2203      	movs	r2, #3
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	f003 0201 	and.w	r2, r3, #1
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d017      	beq.n	8000b1a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d123      	bne.n	8000b6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	08da      	lsrs	r2, r3, #3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3208      	adds	r2, #8
 8000b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	691a      	ldr	r2, [r3, #16]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	08da      	lsrs	r2, r3, #3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3208      	adds	r2, #8
 8000b68:	6939      	ldr	r1, [r7, #16]
 8000b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0203 	and.w	r2, r3, #3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8098 	beq.w	8000ce0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb0:	4a54      	ldr	r2, [pc, #336]	; (8000d04 <HAL_GPIO_Init+0x2c8>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bda:	d019      	beq.n	8000c10 <HAL_GPIO_Init+0x1d4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4a      	ldr	r2, [pc, #296]	; (8000d08 <HAL_GPIO_Init+0x2cc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d013      	beq.n	8000c0c <HAL_GPIO_Init+0x1d0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a49      	ldr	r2, [pc, #292]	; (8000d0c <HAL_GPIO_Init+0x2d0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d00d      	beq.n	8000c08 <HAL_GPIO_Init+0x1cc>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <HAL_GPIO_Init+0x2d4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d007      	beq.n	8000c04 <HAL_GPIO_Init+0x1c8>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a47      	ldr	r2, [pc, #284]	; (8000d14 <HAL_GPIO_Init+0x2d8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d101      	bne.n	8000c00 <HAL_GPIO_Init+0x1c4>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	e008      	b.n	8000c12 <HAL_GPIO_Init+0x1d6>
 8000c00:	2307      	movs	r3, #7
 8000c02:	e006      	b.n	8000c12 <HAL_GPIO_Init+0x1d6>
 8000c04:	2303      	movs	r3, #3
 8000c06:	e004      	b.n	8000c12 <HAL_GPIO_Init+0x1d6>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e002      	b.n	8000c12 <HAL_GPIO_Init+0x1d6>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <HAL_GPIO_Init+0x1d6>
 8000c10:	2300      	movs	r3, #0
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	f002 0203 	and.w	r2, r2, #3
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	4093      	lsls	r3, r2
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c22:	4938      	ldr	r1, [pc, #224]	; (8000d04 <HAL_GPIO_Init+0x2c8>)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	3302      	adds	r3, #2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c30:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c54:	4a30      	ldr	r2, [pc, #192]	; (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c7e:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000caa:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_GPIO_Init+0x2dc>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f47f aeab 	bne.w	8000a4c <HAL_GPIO_Init+0x10>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	40010000 	.word	0x40010000
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	48000800 	.word	0x48000800
 8000d10:	48000c00 	.word	0x48000c00
 8000d14:	48001000 	.word	0x48001000
 8000d18:	58000800 	.word	0x58000800

08000d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d2c:	787b      	ldrb	r3, [r7, #1]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d38:	e002      	b.n	8000d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f806 	bl	8000d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	58000800 	.word	0x58000800

08000d7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e08d      	b.n	8000ec0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d106      	bne.n	8000dbe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fb93 	bl	80004e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2224      	movs	r2, #36	; 0x24
 8000dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0201 	bic.w	r2, r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000de2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000df2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d107      	bne.n	8000e0c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	e006      	b.n	8000e1a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d108      	bne.n	8000e34 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	e007      	b.n	8000e44 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e42:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e56:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e66:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69d9      	ldr	r1, [r3, #28]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a1a      	ldr	r2, [r3, #32]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 0201 	orr.w	r2, r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2220      	movs	r2, #32
 8000eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	d138      	bne.n	8000f50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d101      	bne.n	8000eec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e032      	b.n	8000f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2224      	movs	r2, #36	; 0x24
 8000ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6819      	ldr	r1, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0201 	orr.w	r2, r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e000      	b.n	8000f52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f50:	2302      	movs	r3, #2
  }
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b20      	cmp	r3, #32
 8000f72:	d139      	bne.n	8000fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d101      	bne.n	8000f82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e033      	b.n	8000fea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2224      	movs	r2, #36	; 0x24
 8000f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e000      	b.n	8000fea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000fe8:	2302      	movs	r3, #2
  }
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0c0      	b.n	800118a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f008 f815 	bl	800904c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2203      	movs	r2, #3
 8001026:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fadc 	bl	80045ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e03e      	b.n	80010b8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3311      	adds	r3, #17
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	3310      	adds	r3, #16
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3313      	adds	r3, #19
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	3320      	adds	r3, #32
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3324      	adds	r3, #36	; 0x24
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	3301      	adds	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	791b      	ldrb	r3, [r3, #4]
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3bb      	bcc.n	800103a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e044      	b.n	8001152 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	f203 1351 	addw	r3, r3, #337	; 0x151
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	3301      	adds	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	791b      	ldrb	r3, [r3, #4]
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	429a      	cmp	r2, r3
 800115a:	d3b5      	bcc.n	80010c8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001168:	f003 fa5b 	bl	8004622 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7a9b      	ldrb	r3, [r3, #10]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d102      	bne.n	8001188 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f001 fc41 	bl	8002a0a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <HAL_PCD_Start+0x16>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e012      	b.n	80011ce <HAL_PCD_Start+0x3c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fa02 	bl	80045be <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 fcc3 	bl	8006b4a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 fcc8 	bl	8006b78 <USB_ReadInterrupts>
 80011e8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fb04 	bl	8001802 <PCD_EP_ISR_Handler>

    return;
 80011fa:	e110      	b.n	800141e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001202:	2b00      	cmp	r3, #0
 8001204:	d013      	beq.n	800122e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800120e:	b29a      	uxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001218:	b292      	uxth	r2, r2
 800121a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f007 ffc7 	bl	80091b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001224:	2100      	movs	r1, #0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f8fc 	bl	8001424 <HAL_PCD_SetAddress>

    return;
 800122c:	e0f7      	b.n	800141e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00c      	beq.n	8001252 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800124a:	b292      	uxth	r2, r2
 800124c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001250:	e0e5      	b.n	800141e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001264:	b29a      	uxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800126e:	b292      	uxth	r2, r2
 8001270:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001274:	e0d3      	b.n	800141e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d034      	beq.n	80012ea <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	b292      	uxth	r2, r2
 8001294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0208 	bic.w	r2, r2, #8
 80012aa:	b292      	uxth	r2, r2
 80012ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d107      	bne.n	80012ca <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80012c2:	2100      	movs	r1, #0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f008 f969 	bl	800959c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f007 ffaa 	bl	8009224 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012e2:	b292      	uxth	r2, r2
 80012e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012e8:	e099      	b.n	800141e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d027      	beq.n	8001344 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0208 	orr.w	r2, r2, #8
 8001306:	b292      	uxth	r2, r2
 8001308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001314:	b29a      	uxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800131e:	b292      	uxth	r2, r2
 8001320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800132c:	b29a      	uxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0204 	orr.w	r2, r2, #4
 8001336:	b292      	uxth	r2, r2
 8001338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f007 ff57 	bl	80091f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001342:	e06c      	b.n	800141e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	2b00      	cmp	r3, #0
 800134c:	d040      	beq.n	80013d0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001356:	b29a      	uxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001360:	b292      	uxth	r2, r2
 8001362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800136c:	2b00      	cmp	r3, #0
 800136e:	d12b      	bne.n	80013c8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0204 	orr.w	r2, r2, #4
 8001382:	b292      	uxth	r2, r2
 8001384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001390:	b29a      	uxth	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0208 	orr.w	r2, r2, #8
 800139a:	b292      	uxth	r2, r2
 800139c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013be:	2101      	movs	r1, #1
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f008 f8eb 	bl	800959c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80013c6:	e02a      	b.n	800141e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f007 ff11 	bl	80091f0 <HAL_PCD_SuspendCallback>
    return;
 80013ce:	e026      	b.n	800141e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00f      	beq.n	80013fa <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f007 fecf 	bl	8009196 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013f8:	e011      	b.n	800141e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00c      	beq.n	800141e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800140c:	b29a      	uxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001416:	b292      	uxth	r2, r2
 8001418:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800141c:	bf00      	nop
  }
}
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_PCD_SetAddress+0x1a>
 800143a:	2302      	movs	r3, #2
 800143c:	e012      	b.n	8001464 <HAL_PCD_SetAddress+0x40>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	78fa      	ldrb	r2, [r7, #3]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fb64 	bl	8006b22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4603      	mov	r3, r0
 800147c:	70fb      	strb	r3, [r7, #3]
 800147e:	460b      	mov	r3, r1
 8001480:	803b      	strh	r3, [r7, #0]
 8001482:	4613      	mov	r3, r2
 8001484:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800148a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da0e      	bge.n	80014b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	f003 0207 	and.w	r2, r3, #7
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	3310      	adds	r3, #16
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2201      	movs	r2, #1
 80014ac:	705a      	strb	r2, [r3, #1]
 80014ae:	e00e      	b.n	80014ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	f003 0207 	and.w	r2, r3, #7
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014da:	883a      	ldrh	r2, [r7, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	78ba      	ldrb	r2, [r7, #2]
 80014e4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014e6:	78bb      	ldrb	r3, [r7, #2]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d102      	bne.n	80014f2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_PCD_EP_Open+0x94>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e00e      	b.n	800151e <HAL_PCD_EP_Open+0xb2>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	4618      	mov	r0, r3
 8001510:	f003 f8a6 	bl	8004660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800151c:	7afb      	ldrb	r3, [r7, #11]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001532:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	da0e      	bge.n	8001558 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	f003 0207 	and.w	r2, r3, #7
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	3310      	adds	r3, #16
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2201      	movs	r2, #1
 8001554:	705a      	strb	r2, [r3, #1]
 8001556:	e00e      	b.n	8001576 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 0207 	and.w	r2, r3, #7
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	b2da      	uxtb	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_PCD_EP_Close+0x6a>
 800158c:	2302      	movs	r3, #2
 800158e:	e00e      	b.n	80015ae <HAL_PCD_EP_Close+0x88>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68f9      	ldr	r1, [r7, #12]
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fc22 	bl	8004de8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	460b      	mov	r3, r1
 80015c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	f003 0207 	and.w	r2, r3, #7
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2200      	movs	r2, #0
 80015f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015f6:	7afb      	ldrb	r3, [r7, #11]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6979      	ldr	r1, [r7, #20]
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fdda 	bl	80051c2 <USB_EPStartXfer>

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	f003 0207 	and.w	r2, r3, #7
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	460b      	mov	r3, r1
 8001656:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	f003 0207 	and.w	r2, r3, #7
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	3310      	adds	r3, #16
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2201      	movs	r2, #1
 8001692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001694:	7afb      	ldrb	r3, [r7, #11]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	b2da      	uxtb	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6979      	ldr	r1, [r7, #20]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fd8b 	bl	80051c2 <USB_EPStartXfer>

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	7912      	ldrb	r2, [r2, #4]
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e03e      	b.n	8001752 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	da0e      	bge.n	80016fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 0207 	and.w	r2, r3, #7
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	3310      	adds	r3, #16
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	705a      	strb	r2, [r3, #1]
 80016f8:	e00c      	b.n	8001714 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	b2da      	uxtb	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_PCD_EP_SetStall+0x7e>
 8001730:	2302      	movs	r3, #2
 8001732:	e00e      	b.n	8001752 <HAL_PCD_EP_SetStall+0x9c>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	4618      	mov	r0, r3
 8001744:	f005 f8ee 	bl	8006924 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	7912      	ldrb	r2, [r2, #4]
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e040      	b.n	80017fa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800177c:	2b00      	cmp	r3, #0
 800177e:	da0e      	bge.n	800179e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	f003 0207 	and.w	r2, r3, #7
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	3310      	adds	r3, #16
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	705a      	strb	r2, [r3, #1]
 800179c:	e00e      	b.n	80017bc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	f003 0207 	and.w	r2, r3, #7
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_PCD_EP_ClrStall+0x82>
 80017d8:	2302      	movs	r3, #2
 80017da:	e00e      	b.n	80017fa <HAL_PCD_EP_ClrStall+0xa0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68f9      	ldr	r1, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 f8eb 	bl	80069c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b096      	sub	sp, #88	; 0x58
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800180a:	e3ae      	b.n	8001f6a <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001814:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001818:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001826:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 8170 	bne.w	8001b10 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001830:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d14d      	bne.n	80018d8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184c:	81fb      	strh	r3, [r7, #14]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800185c:	b29b      	uxth	r3, r3
 800185e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3310      	adds	r3, #16
 8001864:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800186e:	b29b      	uxth	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4413      	add	r3, r2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4413      	add	r3, r2
 8001880:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800188a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800188e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	441a      	add	r2, r3
 8001898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800189c:	2100      	movs	r1, #0
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f007 fc5f 	bl	8009162 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7b1b      	ldrb	r3, [r3, #12]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 835d 	beq.w	8001f6a <PCD_EP_ISR_Handler+0x768>
 80018b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 8358 	bne.w	8001f6a <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7b1b      	ldrb	r3, [r3, #12]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b292      	uxth	r2, r2
 80018cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	731a      	strb	r2, [r3, #12]
 80018d6:	e348      	b.n	8001f6a <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80018de:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d032      	beq.n	800195c <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fe:	b29b      	uxth	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4413      	add	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	4413      	add	r3, r2
 8001910:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800192c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001930:	b29b      	uxth	r3, r3
 8001932:	f005 f973 	bl	8006c1c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001942:	4013      	ands	r3, r2
 8001944:	823b      	strh	r3, [r7, #16]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	8a3a      	ldrh	r2, [r7, #16]
 800194c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001950:	b292      	uxth	r2, r2
 8001952:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f007 fbd7 	bl	8009108 <HAL_PCD_SetupStageCallback>
 800195a:	e306      	b.n	8001f6a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800195c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001960:	2b00      	cmp	r3, #0
 8001962:	f280 8302 	bge.w	8001f6a <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29a      	uxth	r2, r3
 800196e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001972:	4013      	ands	r3, r2
 8001974:	83fb      	strh	r3, [r7, #30]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	8bfa      	ldrh	r2, [r7, #30]
 800197c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001980:	b292      	uxth	r2, r2
 8001982:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800198c:	b29b      	uxth	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	4413      	add	r3, r2
 800199e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d019      	beq.n	80019e8 <PCD_EP_ISR_Handler+0x1e6>
 80019b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d015      	beq.n	80019e8 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	6959      	ldr	r1, [r3, #20]
 80019c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f005 f925 	bl	8006c1c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	441a      	add	r2, r3
 80019dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019e0:	2100      	movs	r1, #0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f007 fba2 	bl	800912c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80019f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 82b5 	bne.w	8001f6a <PCD_EP_ISR_Handler+0x768>
 8001a00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a04:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a0c:	f000 82ad 	beq.w	8001f6a <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4413      	add	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	801a      	strh	r2, [r3, #0]
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b3e      	cmp	r3, #62	; 0x3e
 8001a46:	d91d      	bls.n	8001a84 <PCD_EP_ISR_Handler+0x282>
 8001a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <PCD_EP_ISR_Handler+0x260>
 8001a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	029b      	lsls	r3, r3, #10
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	e026      	b.n	8001ad2 <PCD_EP_ISR_Handler+0x2d0>
 8001a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <PCD_EP_ISR_Handler+0x2a0>
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	e017      	b.n	8001ad2 <PCD_EP_ISR_Handler+0x2d0>
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <PCD_EP_ISR_Handler+0x2ba>
 8001ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab8:	3301      	adds	r3, #1
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	029b      	lsls	r3, r3, #10
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae2:	827b      	strh	r3, [r7, #18]
 8001ae4:	8a7b      	ldrh	r3, [r7, #18]
 8001ae6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001aea:	827b      	strh	r3, [r7, #18]
 8001aec:	8a7b      	ldrh	r3, [r7, #18]
 8001aee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001af2:	827b      	strh	r3, [r7, #18]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	8a7b      	ldrh	r3, [r7, #18]
 8001afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	8013      	strh	r3, [r2, #0]
 8001b0e:	e22c      	b.n	8001f6a <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b24:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f280 80f6 	bge.w	8001d1a <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b44:	4013      	ands	r3, r2
 8001b46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b60:	b292      	uxth	r2, r2
 8001b62:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b64:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7c:	7b1b      	ldrb	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d123      	bne.n	8001bca <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001baa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 808e 	beq.w	8001cd0 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bba:	6959      	ldr	r1, [r3, #20]
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbe:	88da      	ldrh	r2, [r3, #6]
 8001bc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bc4:	f005 f82a 	bl	8006c1c <USB_ReadPMA>
 8001bc8:	e082      	b.n	8001cd0 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bcc:	78db      	ldrb	r3, [r3, #3]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d10a      	bne.n	8001be8 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f9d3 	bl	8001f86 <HAL_PCD_EP_DB_Receive>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001be6:	e073      	b.n	8001cd0 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c02:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	441a      	add	r2, r3
 8001c14:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d022      	beq.n	8001c8c <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d02c      	beq.n	8001cd0 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7c:	6959      	ldr	r1, [r3, #20]
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c80:	891a      	ldrh	r2, [r3, #8]
 8001c82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c86:	f004 ffc9 	bl	8006c1c <USB_ReadPMA>
 8001c8a:	e021      	b.n	8001cd0 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001cb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d009      	beq.n	8001cd0 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc2:	6959      	ldr	r1, [r3, #20]
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	895a      	ldrh	r2, [r3, #10]
 8001cc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ccc:	f004 ffa6 	bl	8006c1c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cd8:	441a      	add	r2, r3
 8001cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cdc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ce6:	441a      	add	r2, r3
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <PCD_EP_ISR_Handler+0x4fe>
 8001cf4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d206      	bcs.n	8001d0e <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f007 fa10 	bl	800912c <HAL_PCD_DataOutStageCallback>
 8001d0c:	e005      	b.n	8001d1a <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fa54 	bl	80051c2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8121 	beq.w	8001f6a <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d28:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	3310      	adds	r3, #16
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	441a      	add	r2, r3
 8001d68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7a:	78db      	ldrb	r3, [r3, #3]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	f040 80a2 	bne.w	8001ec6 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8093 	beq.w	8001eb8 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d046      	beq.n	8001e2c <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da0:	785b      	ldrb	r3, [r3, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d126      	bne.n	8001df4 <PCD_EP_ISR_Handler+0x5f2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	4413      	add	r3, r2
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	00da      	lsls	r2, r3, #3
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	801a      	strh	r2, [r3, #0]
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	e061      	b.n	8001eb8 <PCD_EP_ISR_Handler+0x6b6>
 8001df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d15d      	bne.n	8001eb8 <PCD_EP_ISR_Handler+0x6b6>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	4413      	add	r3, r2
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	00da      	lsls	r2, r3, #3
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	2200      	movs	r2, #0
 8001e28:	801a      	strh	r2, [r3, #0]
 8001e2a:	e045      	b.n	8001eb8 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d126      	bne.n	8001e88 <PCD_EP_ISR_Handler+0x686>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4e:	4413      	add	r3, r2
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	00da      	lsls	r2, r3, #3
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
 8001e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e70:	801a      	strh	r2, [r3, #0]
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	801a      	strh	r2, [r3, #0]
 8001e86:	e017      	b.n	8001eb8 <PCD_EP_ISR_Handler+0x6b6>
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d113      	bne.n	8001eb8 <PCD_EP_ISR_Handler+0x6b6>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9e:	4413      	add	r3, r2
 8001ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	00da      	lsls	r2, r3, #3
 8001ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eaa:	4413      	add	r3, r2
 8001eac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f007 f94f 	bl	8009162 <HAL_PCD_DataInStageCallback>
 8001ec4:	e051      	b.n	8001f6a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001ec6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d144      	bne.n	8001f5c <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d907      	bls.n	8001f16 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f12:	619a      	str	r2, [r3, #24]
 8001f14:	e002      	b.n	8001f1c <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f007 f919 	bl	8009162 <HAL_PCD_DataInStageCallback>
 8001f30:	e01b      	b.n	8001f6a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f3a:	441a      	add	r2, r3
 8001f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f48:	441a      	add	r2, r3
 8001f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 f934 	bl	80051c2 <USB_EPStartXfer>
 8001f5a:	e006      	b.n	8001f6a <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f60:	461a      	mov	r2, r3
 8001f62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f917 	bl	8002198 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f6ff ac48 	blt.w	800180c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3758      	adds	r7, #88	; 0x58
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b088      	sub	sp, #32
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d07c      	beq.n	8002098 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	8b7b      	ldrh	r3, [r7, #26]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d306      	bcc.n	8001fdc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	8b7b      	ldrh	r3, [r7, #26]
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	e002      	b.n	8001fe2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d123      	bne.n	8002032 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002004:	833b      	strh	r3, [r7, #24]
 8002006:	8b3b      	ldrh	r3, [r7, #24]
 8002008:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800200c:	833b      	strh	r3, [r7, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	441a      	add	r2, r3
 800201c:	8b3b      	ldrh	r3, [r7, #24]
 800201e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202e:	b29b      	uxth	r3, r3
 8002030:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01f      	beq.n	800207c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	82fb      	strh	r3, [r7, #22]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	441a      	add	r2, r3
 8002066:	8afb      	ldrh	r3, [r7, #22]
 8002068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800206c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002074:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002078:	b29b      	uxth	r3, r3
 800207a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800207c:	8b7b      	ldrh	r3, [r7, #26]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8085 	beq.w	800218e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6959      	ldr	r1, [r3, #20]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	891a      	ldrh	r2, [r3, #8]
 8002090:	8b7b      	ldrh	r3, [r7, #26]
 8002092:	f004 fdc3 	bl	8006c1c <USB_ReadPMA>
 8002096:	e07a      	b.n	800218e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	8b7b      	ldrh	r3, [r7, #26]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d306      	bcc.n	80020d6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	8b7b      	ldrh	r3, [r7, #26]
 80020ce:	1ad2      	subs	r2, r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	619a      	str	r2, [r3, #24]
 80020d4:	e002      	b.n	80020dc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d123      	bne.n	800212c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	83fb      	strh	r3, [r7, #30]
 8002100:	8bfb      	ldrh	r3, [r7, #30]
 8002102:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002106:	83fb      	strh	r3, [r7, #30]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	441a      	add	r2, r3
 8002116:	8bfb      	ldrh	r3, [r7, #30]
 8002118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800211c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	b29b      	uxth	r3, r3
 800212a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11f      	bne.n	8002176 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800214c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002150:	83bb      	strh	r3, [r7, #28]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	441a      	add	r2, r3
 8002160:	8bbb      	ldrh	r3, [r7, #28]
 8002162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800216a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002172:	b29b      	uxth	r3, r3
 8002174:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002176:	8b7b      	ldrh	r3, [r7, #26]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	6959      	ldr	r1, [r3, #20]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	895a      	ldrh	r2, [r3, #10]
 8002188:	8b7b      	ldrh	r3, [r7, #26]
 800218a:	f004 fd47 	bl	8006c1c <USB_ReadPMA>
    }
  }

  return count;
 800218e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0a4      	sub	sp, #144	; 0x90
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	4613      	mov	r3, r2
 80021a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 81db 	beq.w	8002568 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d907      	bls.n	80021f6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021ee:	1ad2      	subs	r2, r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	619a      	str	r2, [r3, #24]
 80021f4:	e002      	b.n	80021fc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 80b9 	bne.w	8002378 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d126      	bne.n	800225c <HAL_PCD_EP_DB_Transmit+0xc4>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	4413      	add	r3, r2
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	00da      	lsls	r2, r3, #3
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222e:	4413      	add	r3, r2
 8002230:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002240:	b29a      	uxth	r2, r3
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	801a      	strh	r2, [r3, #0]
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002254:	b29a      	uxth	r2, r3
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	e01a      	b.n	8002292 <HAL_PCD_EP_DB_Transmit+0xfa>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d116      	bne.n	8002292 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	4413      	add	r3, r2
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	00da      	lsls	r2, r3, #3
 8002282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002284:	4413      	add	r3, r2
 8002286:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	2200      	movs	r2, #0
 8002290:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	785b      	ldrb	r3, [r3, #1]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d126      	bne.n	80022ee <HAL_PCD_EP_DB_Transmit+0x156>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	00da      	lsls	r2, r3, #3
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	801a      	strh	r2, [r3, #0]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	e017      	b.n	800231e <HAL_PCD_EP_DB_Transmit+0x186>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d113      	bne.n	800231e <HAL_PCD_EP_DB_Transmit+0x186>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fe:	b29b      	uxth	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	4413      	add	r3, r2
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	00da      	lsls	r2, r3, #3
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	4413      	add	r3, r2
 8002312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	2200      	movs	r2, #0
 800231c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f006 ff1c 	bl	8009162 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 82fa 	beq.w	800292a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002350:	82fb      	strh	r3, [r7, #22]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	441a      	add	r2, r3
 8002360:	8afb      	ldrh	r3, [r7, #22]
 8002362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800236a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800236e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002372:	b29b      	uxth	r3, r3
 8002374:	8013      	strh	r3, [r2, #0]
 8002376:	e2d8      	b.n	800292a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d021      	beq.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	441a      	add	r2, r3
 80023ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80023b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 82ac 	bne.w	800292a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023da:	441a      	add	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023e8:	441a      	add	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d30b      	bcc.n	8002412 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800240a:	1ad2      	subs	r2, r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	621a      	str	r2, [r3, #32]
 8002410:	e017      	b.n	8002442 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800241a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800241e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800242a:	e00a      	b.n	8002442 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d165      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0x37e>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245e:	4413      	add	r3, r2
 8002460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	00da      	lsls	r2, r3, #3
 8002468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246a:	4413      	add	r3, r2
 800246c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247c:	b29a      	uxth	r2, r3
 800247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002486:	2b3e      	cmp	r3, #62	; 0x3e
 8002488:	d91d      	bls.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800248a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	64bb      	str	r3, [r7, #72]	; 0x48
 8002492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x30c>
 800249e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a0:	3b01      	subs	r3, #1
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	029b      	lsls	r3, r3, #10
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4313      	orrs	r3, r2
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024be:	b29a      	uxth	r2, r3
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	801a      	strh	r2, [r3, #0]
 80024c4:	e044      	b.n	8002550 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80024c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <HAL_PCD_EP_DB_Transmit+0x34c>
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	e035      	b.n	8002550 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80024e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80024ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_PCD_EP_DB_Transmit+0x366>
 80024f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fa:	3301      	adds	r3, #1
 80024fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80024fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29a      	uxth	r2, r3
 8002504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002506:	b29b      	uxth	r3, r3
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	b29b      	uxth	r3, r3
 800250c:	4313      	orrs	r3, r2
 800250e:	b29a      	uxth	r2, r3
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	e01c      	b.n	8002550 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d118      	bne.n	8002550 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	647b      	str	r3, [r7, #68]	; 0x44
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002532:	4413      	add	r3, r2
 8002534:	647b      	str	r3, [r7, #68]	; 0x44
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00da      	lsls	r2, r3, #3
 800253c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253e:	4413      	add	r3, r2
 8002540:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002544:	643b      	str	r3, [r7, #64]	; 0x40
 8002546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254a:	b29a      	uxth	r2, r3
 800254c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	6959      	ldr	r1, [r3, #20]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	891a      	ldrh	r2, [r3, #8]
 800255c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002560:	b29b      	uxth	r3, r3
 8002562:	f004 fb19 	bl	8006b98 <USB_WritePMA>
 8002566:	e1e0      	b.n	800292a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002570:	b29b      	uxth	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	4413      	add	r3, r2
 8002582:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	699a      	ldr	r2, [r3, #24]
 8002594:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002598:	429a      	cmp	r2, r3
 800259a:	d307      	bcc.n	80025ac <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025a4:	1ad2      	subs	r2, r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	619a      	str	r2, [r3, #24]
 80025aa:	e002      	b.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 80c0 	bne.w	800273c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d126      	bne.n	8002612 <HAL_PCD_EP_DB_Transmit+0x47a>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d8:	4413      	add	r3, r2
 80025da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	00da      	lsls	r2, r3, #3
 80025e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025e4:	4413      	add	r3, r2
 80025e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800260a:	b29a      	uxth	r2, r3
 800260c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800260e:	801a      	strh	r2, [r3, #0]
 8002610:	e01a      	b.n	8002648 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d116      	bne.n	8002648 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	667b      	str	r3, [r7, #100]	; 0x64
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800262e:	4413      	add	r3, r2
 8002630:	667b      	str	r3, [r7, #100]	; 0x64
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	00da      	lsls	r2, r3, #3
 8002638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800263a:	4413      	add	r3, r2
 800263c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002640:	663b      	str	r3, [r7, #96]	; 0x60
 8002642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002644:	2200      	movs	r2, #0
 8002646:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	677b      	str	r3, [r7, #116]	; 0x74
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	785b      	ldrb	r3, [r3, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d12b      	bne.n	80026ae <HAL_PCD_EP_DB_Transmit+0x516>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266a:	4413      	add	r3, r2
 800266c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	00da      	lsls	r2, r3, #3
 8002674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002676:	4413      	add	r3, r2
 8002678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800267c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002680:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268c:	b29a      	uxth	r2, r3
 800268e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	e017      	b.n	80026de <HAL_PCD_EP_DB_Transmit+0x546>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	785b      	ldrb	r3, [r3, #1]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d113      	bne.n	80026de <HAL_PCD_EP_DB_Transmit+0x546>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c4:	4413      	add	r3, r2
 80026c6:	677b      	str	r3, [r7, #116]	; 0x74
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	00da      	lsls	r2, r3, #3
 80026ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d0:	4413      	add	r3, r2
 80026d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026d6:	673b      	str	r3, [r7, #112]	; 0x70
 80026d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026da:	2200      	movs	r2, #0
 80026dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f006 fd3c 	bl	8009162 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f040 811a 	bne.w	800292a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800270c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002710:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	441a      	add	r2, r3
 8002722:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800272e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002736:	b29b      	uxth	r3, r3
 8002738:	8013      	strh	r3, [r2, #0]
 800273a:	e0f6      	b.n	800292a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d121      	bne.n	800278a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002786:	b29b      	uxth	r3, r3
 8002788:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002790:	2b01      	cmp	r3, #1
 8002792:	f040 80ca 	bne.w	800292a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800279e:	441a      	add	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027ac:	441a      	add	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d30b      	bcc.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	6a1a      	ldr	r2, [r3, #32]
 80027ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	621a      	str	r2, [r3, #32]
 80027d4:	e017      	b.n	8002806 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d108      	bne.n	80027f0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80027de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027ee:	e00a      	b.n	8002806 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	657b      	str	r3, [r7, #84]	; 0x54
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d165      	bne.n	80028e0 <HAL_PCD_EP_DB_Transmit+0x748>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002822:	b29b      	uxth	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002828:	4413      	add	r3, r2
 800282a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00da      	lsls	r2, r3, #3
 8002832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002834:	4413      	add	r3, r2
 8002836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800283a:	65bb      	str	r3, [r7, #88]	; 0x58
 800283c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002846:	b29a      	uxth	r2, r3
 8002848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002850:	2b3e      	cmp	r3, #62	; 0x3e
 8002852:	d91d      	bls.n	8002890 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	66bb      	str	r3, [r7, #104]	; 0x68
 800285c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286a:	3b01      	subs	r3, #1
 800286c:	66bb      	str	r3, [r7, #104]	; 0x68
 800286e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29a      	uxth	r2, r3
 8002874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002876:	b29b      	uxth	r3, r3
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	b29b      	uxth	r3, r3
 800287c:	4313      	orrs	r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002888:	b29a      	uxth	r2, r3
 800288a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288c:	801a      	strh	r2, [r3, #0]
 800288e:	e041      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_PCD_EP_DB_Transmit+0x716>
 8002898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028aa:	801a      	strh	r2, [r3, #0]
 80028ac:	e032      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x77c>
 80028ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80028b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x730>
 80028c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c4:	3301      	adds	r3, #1
 80028c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80028c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	029b      	lsls	r3, r3, #10
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4313      	orrs	r3, r2
 80028d8:	b29a      	uxth	r2, r3
 80028da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	e019      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x77c>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	785b      	ldrb	r3, [r3, #1]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d115      	bne.n	8002914 <HAL_PCD_EP_DB_Transmit+0x77c>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	4413      	add	r3, r2
 80028f8:	657b      	str	r3, [r7, #84]	; 0x54
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	00da      	lsls	r2, r3, #3
 8002900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002902:	4413      	add	r3, r2
 8002904:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002908:	653b      	str	r3, [r7, #80]	; 0x50
 800290a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290e:	b29a      	uxth	r2, r3
 8002910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002912:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6959      	ldr	r1, [r3, #20]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	895a      	ldrh	r2, [r3, #10]
 8002920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002924:	b29b      	uxth	r3, r3
 8002926:	f004 f937 	bl	8006b98 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002944:	82bb      	strh	r3, [r7, #20]
 8002946:	8abb      	ldrh	r3, [r7, #20]
 8002948:	f083 0310 	eor.w	r3, r3, #16
 800294c:	82bb      	strh	r3, [r7, #20]
 800294e:	8abb      	ldrh	r3, [r7, #20]
 8002950:	f083 0320 	eor.w	r3, r3, #32
 8002954:	82bb      	strh	r3, [r7, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	441a      	add	r2, r3
 8002964:	8abb      	ldrh	r3, [r7, #20]
 8002966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800296a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002976:	b29b      	uxth	r3, r3
 8002978:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3790      	adds	r7, #144	; 0x90
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	817b      	strh	r3, [r7, #10]
 8002992:	4613      	mov	r3, r2
 8002994:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002996:	897b      	ldrh	r3, [r7, #10]
 8002998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a2:	897b      	ldrh	r3, [r7, #10]
 80029a4:	f003 0207 	and.w	r2, r3, #7
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	3310      	adds	r3, #16
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4413      	add	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e009      	b.n	80029ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ba:	897a      	ldrh	r2, [r7, #10]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029ce:	893b      	ldrh	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d107      	bne.n	80029e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2200      	movs	r2, #0
 80029d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	80da      	strh	r2, [r3, #6]
 80029e2:	e00b      	b.n	80029fc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2201      	movs	r2, #1
 80029e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	58000400 	.word	0x58000400

08002a80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	58000400 	.word	0x58000400

08002a9c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aaa:	6053      	str	r3, [r2, #4]
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	58000400 	.word	0x58000400

08002abc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ace:	d101      	bne.n	8002ad4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_HSE_Enable>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_HSE_Disable>:
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_RCC_HSE_IsReady>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b2e:	d101      	bne.n	8002b34 <LL_RCC_HSE_IsReady+0x18>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <LL_RCC_HSE_IsReady+0x1a>
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_HSI_Enable>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_HSI_Disable>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_HSI_IsReady>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8e:	d101      	bne.n	8002b94 <LL_RCC_HSI_IsReady+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_RCC_HSI_IsReady+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_HSI48_Enable>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_RCC_HSI48_Disable>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_HSI48_IsReady>:
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d101      	bne.n	8002c26 <LL_RCC_HSI48_IsReady+0x18>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <LL_RCC_HSI48_IsReady+0x1a>
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_LSE_Enable>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_LSE_Disable>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_LSE_EnableBypass>:
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_LSE_DisableBypass>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d101      	bne.n	8002cd2 <LL_RCC_LSE_IsReady+0x18>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_RCC_LSE_IsReady+0x1a>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d101      	bne.n	8002d3a <LL_RCC_LSI1_IsReady+0x18>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_RCC_LSI1_IsReady+0x1a>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d101      	bne.n	8002da2 <LL_RCC_LSI2_IsReady+0x18>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <LL_RCC_LSI2_IsReady+0x1a>
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6013      	str	r3, [r2, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d101      	bne.n	8002e2e <LL_RCC_MSI_IsReady+0x16>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <LL_RCC_MSI_IsReady+0x18>
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e72:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2bb0      	cmp	r3, #176	; 0xb0
 8002e78:	d901      	bls.n	8002e7e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002e7a:	23b0      	movs	r3, #176	; 0xb0
 8002e7c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002e7e:	687b      	ldr	r3, [r7, #4]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 0203 	bic.w	r2, r3, #3
 8002ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	608b      	str	r3, [r1, #8]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302c:	6013      	str	r3, [r2, #0]
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800304a:	d101      	bne.n	8003050 <LL_RCC_PLL_IsReady+0x18>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <LL_RCC_PLL_IsReady+0x1a>
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0303 	and.w	r3, r3, #3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d101      	bne.n	80030d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f6:	d101      	bne.n	80030fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d101      	bne.n	8003122 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003140:	d101      	bne.n	8003146 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003164:	d101      	bne.n	800316a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b08d      	sub	sp, #52	; 0x34
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e363      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 808d 	beq.w	80032b2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003198:	f7ff fea1 	bl	8002ede <LL_RCC_GetSysClkSource>
 800319c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800319e:	f7ff ff82 	bl	80030a6 <LL_RCC_PLL_GetMainSource>
 80031a2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x3e>
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d147      	bne.n	8003240 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d144      	bne.n	8003240 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e347      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80031c6:	f7ff fe4c 	bl	8002e62 <LL_RCC_MSI_GetRange>
 80031ca:	4603      	mov	r3, r0
 80031cc:	429c      	cmp	r4, r3
 80031ce:	d914      	bls.n	80031fa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fd05 	bl	8003be4 <RCC_SetFlashLatencyFromMSIRange>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e336      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fe26 	bl	8002e3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fe4a 	bl	8002e8c <LL_RCC_MSI_SetCalibTrimming>
 80031f8:	e013      	b.n	8003222 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fe1b 	bl	8002e3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fe3f 	bl	8002e8c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fce6 	bl	8003be4 <RCC_SetFlashLatencyFromMSIRange>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e317      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003222:	f000 fccb 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003226:	4603      	mov	r3, r0
 8003228:	4aa4      	ldr	r2, [pc, #656]	; (80034bc <HAL_RCC_OscConfig+0x344>)
 800322a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800322c:	4ba4      	ldr	r3, [pc, #656]	; (80034c0 <HAL_RCC_OscConfig+0x348>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fa8d 	bl	8000750 <HAL_InitTick>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d039      	beq.n	80032b0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e308      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01e      	beq.n	8003286 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003248:	f7ff fdc8 	bl	8002ddc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800324c:	f7fd face 	bl	80007ec <HAL_GetTick>
 8003250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003254:	f7fd faca 	bl	80007ec <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e2f5      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003266:	f7ff fdd7 	bl	8002e18 <LL_RCC_MSI_IsReady>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f1      	beq.n	8003254 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fde0 	bl	8002e3a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fe04 	bl	8002e8c <LL_RCC_MSI_SetCalibTrimming>
 8003284:	e015      	b.n	80032b2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003286:	f7ff fdb8 	bl	8002dfa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800328a:	f7fd faaf 	bl	80007ec <HAL_GetTick>
 800328e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003292:	f7fd faab 	bl	80007ec <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e2d6      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80032a4:	f7ff fdb8 	bl	8002e18 <LL_RCC_MSI_IsReady>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f1      	bne.n	8003292 <HAL_RCC_OscConfig+0x11a>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80032b0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d047      	beq.n	800334e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032be:	f7ff fe0e 	bl	8002ede <LL_RCC_GetSysClkSource>
 80032c2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c4:	f7ff feef 	bl	80030a6 <LL_RCC_PLL_GetMainSource>
 80032c8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_OscConfig+0x164>
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	d108      	bne.n	80032e8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d134      	bne.n	800334e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e2b4      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d102      	bne.n	80032f8 <HAL_RCC_OscConfig+0x180>
 80032f2:	f7ff fbf5 	bl	8002ae0 <LL_RCC_HSE_Enable>
 80032f6:	e001      	b.n	80032fc <HAL_RCC_OscConfig+0x184>
 80032f8:	f7ff fc01 	bl	8002afe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fd fa72 	bl	80007ec <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800330c:	f7fd fa6e 	bl	80007ec <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e299      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800331e:	f7ff fbfd 	bl	8002b1c <LL_RCC_HSE_IsReady>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f1      	beq.n	800330c <HAL_RCC_OscConfig+0x194>
 8003328:	e011      	b.n	800334e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fd fa5f 	bl	80007ec <HAL_GetTick>
 800332e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003332:	f7fd fa5b 	bl	80007ec <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b64      	cmp	r3, #100	; 0x64
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e286      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003344:	f7ff fbea 	bl	8002b1c <LL_RCC_HSE_IsReady>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f1      	bne.n	8003332 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d04c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335a:	f7ff fdc0 	bl	8002ede <LL_RCC_GetSysClkSource>
 800335e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003360:	f7ff fea1 	bl	80030a6 <LL_RCC_PLL_GetMainSource>
 8003364:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b04      	cmp	r3, #4
 800336a:	d005      	beq.n	8003378 <HAL_RCC_OscConfig+0x200>
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d10e      	bne.n	8003390 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d10b      	bne.n	8003390 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e266      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fc09 	bl	8002ba0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800338e:	e031      	b.n	80033f4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d019      	beq.n	80033cc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003398:	f7ff fbd2 	bl	8002b40 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fd fa26 	bl	80007ec <HAL_GetTick>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7fd fa22 	bl	80007ec <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e24d      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80033b6:	f7ff fbe1 	bl	8002b7c <LL_RCC_HSI_IsReady>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f1      	beq.n	80033a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fbeb 	bl	8002ba0 <LL_RCC_HSI_SetCalibTrimming>
 80033ca:	e013      	b.n	80033f4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033cc:	f7ff fbc7 	bl	8002b5e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd fa0c 	bl	80007ec <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7fd fa08 	bl	80007ec <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e233      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80033ea:	f7ff fbc7 	bl	8002b7c <LL_RCC_HSI_IsReady>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f1      	bne.n	80033d8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a3 	beq.w	8003554 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d076      	beq.n	8003504 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d046      	beq.n	80034b0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003422:	f7ff fc7e 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d113      	bne.n	8003454 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800342c:	f7ff fc57 	bl	8002cde <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003430:	f7fd f9dc 	bl	80007ec <HAL_GetTick>
 8003434:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003438:	f7fd f9d8 	bl	80007ec <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e203      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800344a:	f7ff fc6a 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f1      	beq.n	8003438 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003454:	f7ff fc77 	bl	8002d46 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd f9c8 	bl	80007ec <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003460:	f7fd f9c4 	bl	80007ec <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b03      	cmp	r3, #3
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1ef      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003472:	f7ff fc8a 	bl	8002d8a <LL_RCC_LSI2_IsReady>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f1      	beq.n	8003460 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fc94 	bl	8002dae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003486:	f7ff fc3b 	bl	8002d00 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fd f9af 	bl	80007ec <HAL_GetTick>
 800348e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003492:	f7fd f9ab 	bl	80007ec <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e1d6      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80034a4:	f7ff fc3d 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f1      	bne.n	8003492 <HAL_RCC_OscConfig+0x31a>
 80034ae:	e051      	b.n	8003554 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80034b0:	f7ff fc15 	bl	8002cde <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fd f99a 	bl	80007ec <HAL_GetTick>
 80034b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034ba:	e00c      	b.n	80034d6 <HAL_RCC_OscConfig+0x35e>
 80034bc:	20000008 	.word	0x20000008
 80034c0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034c4:	f7fd f992 	bl	80007ec <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1bd      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80034d6:	f7ff fc24 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f1      	beq.n	80034c4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80034e0:	f7ff fc42 	bl	8002d68 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034e6:	f7fd f981 	bl	80007ec <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1ac      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80034f8:	f7ff fc47 	bl	8002d8a <LL_RCC_LSI2_IsReady>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f1      	bne.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 8003502:	e027      	b.n	8003554 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003504:	f7ff fc30 	bl	8002d68 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fd f970 	bl	80007ec <HAL_GetTick>
 800350c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003510:	f7fd f96c 	bl	80007ec <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b03      	cmp	r3, #3
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e197      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003522:	f7ff fc32 	bl	8002d8a <LL_RCC_LSI2_IsReady>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f1      	bne.n	8003510 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800352c:	f7ff fbe8 	bl	8002d00 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fd f95c 	bl	80007ec <HAL_GetTick>
 8003534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003538:	f7fd f958 	bl	80007ec <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e183      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800354a:	f7ff fbea 	bl	8002d22 <LL_RCC_LSI1_IsReady>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f1      	bne.n	8003538 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05b      	beq.n	8003618 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003560:	4ba7      	ldr	r3, [pc, #668]	; (8003800 <HAL_RCC_OscConfig+0x688>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d114      	bne.n	8003596 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800356c:	f7ff fa78 	bl	8002a60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003570:	f7fd f93c 	bl	80007ec <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003578:	f7fd f938 	bl	80007ec <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e163      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358a:	4b9d      	ldr	r3, [pc, #628]	; (8003800 <HAL_RCC_OscConfig+0x688>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <HAL_RCC_OscConfig+0x42c>
 800359e:	f7ff fb48 	bl	8002c32 <LL_RCC_LSE_Enable>
 80035a2:	e00c      	b.n	80035be <HAL_RCC_OscConfig+0x446>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d104      	bne.n	80035b6 <HAL_RCC_OscConfig+0x43e>
 80035ac:	f7ff fb63 	bl	8002c76 <LL_RCC_LSE_EnableBypass>
 80035b0:	f7ff fb3f 	bl	8002c32 <LL_RCC_LSE_Enable>
 80035b4:	e003      	b.n	80035be <HAL_RCC_OscConfig+0x446>
 80035b6:	f7ff fb4d 	bl	8002c54 <LL_RCC_LSE_Disable>
 80035ba:	f7ff fb6d 	bl	8002c98 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fd f911 	bl	80007ec <HAL_GetTick>
 80035ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd f90d 	bl	80007ec <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e136      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80035e4:	f7ff fb69 	bl	8002cba <LL_RCC_LSE_IsReady>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ef      	beq.n	80035ce <HAL_RCC_OscConfig+0x456>
 80035ee:	e013      	b.n	8003618 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fd f8fc 	bl	80007ec <HAL_GetTick>
 80035f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fd f8f8 	bl	80007ec <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e121      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800360e:	f7ff fb54 	bl	8002cba <LL_RCC_LSE_IsReady>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ef      	bne.n	80035f8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d02c      	beq.n	800367e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d014      	beq.n	8003656 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800362c:	f7ff facd 	bl	8002bca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003630:	f7fd f8dc 	bl	80007ec <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003638:	f7fd f8d8 	bl	80007ec <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e103      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800364a:	f7ff fae0 	bl	8002c0e <LL_RCC_HSI48_IsReady>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f1      	beq.n	8003638 <HAL_RCC_OscConfig+0x4c0>
 8003654:	e013      	b.n	800367e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003656:	f7ff fac9 	bl	8002bec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365a:	f7fd f8c7 	bl	80007ec <HAL_GetTick>
 800365e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003662:	f7fd f8c3 	bl	80007ec <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e0ee      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003674:	f7ff facb 	bl	8002c0e <LL_RCC_HSI48_IsReady>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f1      	bne.n	8003662 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80e4 	beq.w	8003850 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003688:	f7ff fc29 	bl	8002ede <LL_RCC_GetSysClkSource>
 800368c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	2b02      	cmp	r3, #2
 800369c:	f040 80b4 	bne.w	8003808 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0203 	and.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d123      	bne.n	80036f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d11c      	bne.n	80036f6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d114      	bne.n	80036f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d10d      	bne.n	80036f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d05d      	beq.n	80037b2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d058      	beq.n	80037ae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0a1      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800370e:	f7ff fc84 	bl	800301a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003712:	f7fd f86b 	bl	80007ec <HAL_GetTick>
 8003716:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7fd f867 	bl	80007ec <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e092      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ef      	bne.n	800371a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	4b30      	ldr	r3, [pc, #192]	; (8003804 <HAL_RCC_OscConfig+0x68c>)
 8003742:	4013      	ands	r3, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003752:	0212      	lsls	r2, r2, #8
 8003754:	4311      	orrs	r1, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003766:	430a      	orrs	r2, r1
 8003768:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800376c:	4313      	orrs	r3, r2
 800376e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003770:	f7ff fc44 	bl	8002ffc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003784:	f7fd f832 	bl	80007ec <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fd f82e 	bl	80007ec <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e059      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ac:	e050      	b.n	8003850 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d147      	bne.n	8003850 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037c0:	f7ff fc1c 	bl	8002ffc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037d4:	f7fd f80a 	bl	80007ec <HAL_GetTick>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fd f806 	bl	80007ec <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e031      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ef      	beq.n	80037dc <HAL_RCC_OscConfig+0x664>
 80037fc:	e028      	b.n	8003850 <HAL_RCC_OscConfig+0x6d8>
 80037fe:	bf00      	nop
 8003800:	58000400 	.word	0x58000400
 8003804:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d01e      	beq.n	800384c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380e:	f7ff fc04 	bl	800301a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fc ffeb 	bl	80007ec <HAL_GetTick>
 8003816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fc ffe7 	bl	80007ec <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e012      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ef      	bne.n	800381a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800383a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_OscConfig+0x6e4>)
 8003846:	4013      	ands	r3, r2
 8003848:	60cb      	str	r3, [r1, #12]
 800384a:	e001      	b.n	8003850 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3734      	adds	r7, #52	; 0x34
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}
 800385a:	bf00      	nop
 800385c:	eefefffc 	.word	0xeefefffc

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e12d      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b98      	ldr	r3, [pc, #608]	; (8003ad8 <HAL_RCC_ClockConfig+0x278>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d91b      	bls.n	80038ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b95      	ldr	r3, [pc, #596]	; (8003ad8 <HAL_RCC_ClockConfig+0x278>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0207 	bic.w	r2, r3, #7
 800388a:	4993      	ldr	r1, [pc, #588]	; (8003ad8 <HAL_RCC_ClockConfig+0x278>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003892:	f7fc ffab 	bl	80007ec <HAL_GetTick>
 8003896:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003898:	e008      	b.n	80038ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800389a:	f7fc ffa7 	bl	80007ec <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e111      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ac:	4b8a      	ldr	r3, [pc, #552]	; (8003ad8 <HAL_RCC_ClockConfig+0x278>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d1ef      	bne.n	800389a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fb13 	bl	8002ef6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038d0:	f7fc ff8c 	bl	80007ec <HAL_GetTick>
 80038d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038d8:	f7fc ff88 	bl	80007ec <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0f2      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038ea:	f7ff fbe8 	bl	80030be <LL_RCC_IsActiveFlag_HPRE>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f1      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d016      	beq.n	800392e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fb0a 	bl	8002f1e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800390a:	f7fc ff6f 	bl	80007ec <HAL_GetTick>
 800390e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003912:	f7fc ff6b 	bl	80007ec <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0d5      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003924:	f7ff fbdd 	bl	80030e2 <LL_RCC_IsActiveFlag_C2HPRE>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f1      	beq.n	8003912 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fb03 	bl	8002f4a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003944:	f7fc ff52 	bl	80007ec <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800394c:	f7fc ff4e 	bl	80007ec <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0b8      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800395e:	f7ff fbd3 	bl	8003108 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f1      	beq.n	800394c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d016      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fafd 	bl	8002f78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800397e:	f7fc ff35 	bl	80007ec <HAL_GetTick>
 8003982:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003986:	f7fc ff31 	bl	80007ec <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e09b      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003998:	f7ff fbc9 	bl	800312e <LL_RCC_IsActiveFlag_PPRE1>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f1      	beq.n	8003986 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d017      	beq.n	80039de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff faf3 	bl	8002fa0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039ba:	f7fc ff17 	bl	80007ec <HAL_GetTick>
 80039be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039c2:	f7fc ff13 	bl	80007ec <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e07d      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039d4:	f7ff fbbd 	bl	8003152 <LL_RCC_IsActiveFlag_PPRE2>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f1      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d043      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d106      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80039f2:	f7ff f893 	bl	8002b1c <LL_RCC_HSE_IsReady>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11e      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e067      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003a08:	f7ff fb16 	bl	8003038 <LL_RCC_PLL_IsReady>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d113      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e05c      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a1e:	f7ff f9fb 	bl	8002e18 <LL_RCC_MSI_IsReady>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d108      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e051      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a2c:	f7ff f8a6 	bl	8002b7c <LL_RCC_HSI_IsReady>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e04a      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fa39 	bl	8002eb6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a44:	f7fc fed2 	bl	80007ec <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	e00a      	b.n	8003a62 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4c:	f7fc fece 	bl	80007ec <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e036      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	f7ff fa3c 	bl	8002ede <LL_RCC_GetSysClkSource>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d1ec      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a72:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCC_ClockConfig+0x278>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d21b      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a80:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <HAL_RCC_ClockConfig+0x278>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 0207 	bic.w	r2, r3, #7
 8003a88:	4913      	ldr	r1, [pc, #76]	; (8003ad8 <HAL_RCC_ClockConfig+0x278>)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fc feac 	bl	80007ec <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a98:	f7fc fea8 	bl	80007ec <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e012      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_ClockConfig+0x278>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1ef      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ab8:	f000 f880 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_RCC_ClockConfig+0x27c>)
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003ac2:	f7fc fe9f 	bl	8000804 <HAL_GetTickPrio>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fc fe41 	bl	8000750 <HAL_InitTick>
 8003ace:	4603      	mov	r3, r0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	58004000 	.word	0x58004000
 8003adc:	20000008 	.word	0x20000008

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ae6:	f7ff f9fa 	bl	8002ede <LL_RCC_GetSysClkSource>
 8003aea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003af2:	f7ff f9b6 	bl	8002e62 <LL_RCC_MSI_GetRange>
 8003af6:	4603      	mov	r3, r0
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	4a2b      	ldr	r2, [pc, #172]	; (8003bac <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e04b      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d102      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b0e:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e045      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d10a      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b1a:	f7fe ffcf 	bl	8002abc <LL_RCC_HSE_IsEnabledDiv2>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d102      	bne.n	8003b2a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003b24:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e03a      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e037      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003b30:	f7ff fab9 	bl	80030a6 <LL_RCC_PLL_GetMainSource>
 8003b34:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d003      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x64>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d003      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0x6a>
 8003b42:	e00d      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b46:	60bb      	str	r3, [r7, #8]
        break;
 8003b48:	e015      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b4a:	f7fe ffb7 	bl	8002abc <LL_RCC_HSE_IsEnabledDiv2>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d102      	bne.n	8003b5a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b56:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003b58:	e00d      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003b5a:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003b5c:	60bb      	str	r3, [r7, #8]
        break;
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b60:	f7ff f97f 	bl	8002e62 <LL_RCC_MSI_GetRange>
 8003b64:	4603      	mov	r3, r0
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	4a0f      	ldr	r2, [pc, #60]	; (8003bac <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b72:	60bb      	str	r3, [r7, #8]
        break;
 8003b74:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003b76:	f7ff fa71 	bl	800305c <LL_RCC_PLL_GetN>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	fb03 f402 	mul.w	r4, r3, r2
 8003b82:	f7ff fa84 	bl	800308e <LL_RCC_PLL_GetDivider>
 8003b86:	4603      	mov	r3, r0
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003b90:	f7ff fa71 	bl	8003076 <LL_RCC_PLL_GetR>
 8003b94:	4603      	mov	r3, r0
 8003b96:	0f5b      	lsrs	r3, r3, #29
 8003b98:	3301      	adds	r3, #1
 8003b9a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b9e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd90      	pop	{r4, r7, pc}
 8003baa:	bf00      	nop
 8003bac:	080097cc 	.word	0x080097cc
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	003d0900 	.word	0x003d0900
 8003bb8:	007a1200 	.word	0x007a1200

08003bbc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b598      	push	{r3, r4, r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003bc0:	f7ff ff8e 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	f7ff f9ff 	bl	8002fc8 <LL_RCC_GetAHBPrescaler>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <HAL_RCC_GetHCLKFreq+0x24>)
 8003bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd98      	pop	{r3, r4, r7, pc}
 8003be0:	0800978c 	.word	0x0800978c

08003be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2bb0      	cmp	r3, #176	; 0xb0
 8003bf0:	d903      	bls.n	8003bfa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e007      	b.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003c0a:	f7ff f9e9 	bl	8002fe0 <LL_RCC_GetAHB4Prescaler>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	0c9c      	lsrs	r4, r3, #18
 8003c2e:	f7fe ff27 	bl	8002a80 <HAL_PWREx_GetVoltageRange>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4619      	mov	r1, r3
 8003c36:	4620      	mov	r0, r4
 8003c38:	f000 f80c 	bl	8003c54 <RCC_SetFlashLatency>
 8003c3c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}
 8003c46:	bf00      	nop
 8003c48:	080097cc 	.word	0x080097cc
 8003c4c:	0800978c 	.word	0x0800978c
 8003c50:	431bde83 	.word	0x431bde83

08003c54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b093      	sub	sp, #76	; 0x4c
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003c5e:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <RCC_SetFlashLatency+0xe8>)
 8003c60:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003c6a:	4a35      	ldr	r2, [pc, #212]	; (8003d40 <RCC_SetFlashLatency+0xec>)
 8003c6c:	f107 031c 	add.w	r3, r7, #28
 8003c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003c76:	4b33      	ldr	r3, [pc, #204]	; (8003d44 <RCC_SetFlashLatency+0xf0>)
 8003c78:	f107 040c 	add.w	r4, r7, #12
 8003c7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c82:	2300      	movs	r3, #0
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8c:	d11a      	bne.n	8003cc4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	643b      	str	r3, [r7, #64]	; 0x40
 8003c92:	e013      	b.n	8003cbc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	3348      	adds	r3, #72	; 0x48
 8003c9a:	443b      	add	r3, r7
 8003c9c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d807      	bhi.n	8003cb6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	3348      	adds	r3, #72	; 0x48
 8003cac:	443b      	add	r3, r7
 8003cae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003cb2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003cb4:	e020      	b.n	8003cf8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb8:	3301      	adds	r3, #1
 8003cba:	643b      	str	r3, [r7, #64]	; 0x40
 8003cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d9e8      	bls.n	8003c94 <RCC_SetFlashLatency+0x40>
 8003cc2:	e019      	b.n	8003cf8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc8:	e013      	b.n	8003cf2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	3348      	adds	r3, #72	; 0x48
 8003cd0:	443b      	add	r3, r7
 8003cd2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d807      	bhi.n	8003cec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	3348      	adds	r3, #72	; 0x48
 8003ce2:	443b      	add	r3, r7
 8003ce4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003cea:	e005      	b.n	8003cf8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cee:	3301      	adds	r3, #1
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d9e8      	bls.n	8003cca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003cf8:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <RCC_SetFlashLatency+0xf4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 0207 	bic.w	r2, r3, #7
 8003d00:	4911      	ldr	r1, [pc, #68]	; (8003d48 <RCC_SetFlashLatency+0xf4>)
 8003d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d08:	f7fc fd70 	bl	80007ec <HAL_GetTick>
 8003d0c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d0e:	e008      	b.n	8003d22 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d10:	f7fc fd6c 	bl	80007ec <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e007      	b.n	8003d32 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <RCC_SetFlashLatency+0xf4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1ef      	bne.n	8003d10 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	374c      	adds	r7, #76	; 0x4c
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd90      	pop	{r4, r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	0800970c 	.word	0x0800970c
 8003d40:	0800971c 	.word	0x0800971c
 8003d44:	08009728 	.word	0x08009728
 8003d48:	58004000 	.word	0x58004000

08003d4c <LL_RCC_LSE_IsEnabled>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <LL_RCC_LSE_IsEnabled+0x18>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <LL_RCC_LSE_IsEnabled+0x1a>
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_RCC_LSE_IsReady>:
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d101      	bne.n	8003d88 <LL_RCC_LSE_IsReady+0x18>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <LL_RCC_LSE_IsReady+0x1a>
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_RCC_MSI_EnablePLLMode>:
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	6013      	str	r3, [r2, #0]
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_RCC_SetRFWKPClockSource>:
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <LL_RCC_SetSMPSClockSource>:
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	f023 0203 	bic.w	r2, r3, #3
 8003df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_RCC_SetSMPSPrescaler>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_RCC_SetUSARTClockSource>:
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f023 0203 	bic.w	r2, r3, #3
 8003e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_SetLPUARTClockSource>:
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_RCC_SetI2CClockSource>:
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	401a      	ands	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_RCC_SetLPTIMClockSource>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	041b      	lsls	r3, r3, #16
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	401a      	ands	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_RCC_SetSAIClockSource>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_RCC_SetRNGClockSource>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_RCC_SetCLK48ClockSource>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_SetUSBClockSource>:
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ffe3 	bl	8003f4c <LL_RCC_SetCLK48ClockSource>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <LL_RCC_SetADCClockSource>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <LL_RCC_SetRTCClockSource>:
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <LL_RCC_GetRTCClockSource>:
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_RCC_ForceBackupDomainReset>:
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_RCC_PLLSAI1_Enable>:
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004056:	6013      	str	r3, [r2, #0]
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <LL_RCC_PLLSAI1_Disable>:
{
 8004062:	b480      	push	{r7}
 8004064:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004070:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004074:	6013      	str	r3, [r2, #0]
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <LL_RCC_PLLSAI1_IsReady>:
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800408e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004092:	d101      	bne.n	8004098 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040b0:	2300      	movs	r3, #0
 80040b2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d034      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040c8:	d021      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80040ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040ce:	d81b      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040d4:	d01d      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80040d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040da:	d815      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80040e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e4:	d110      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80040e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80040f6:	e00d      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f94d 	bl	800439c <RCCEx_PLLSAI1_ConfigNP>
 8004102:	4603      	mov	r3, r0
 8004104:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004106:	e005      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	77fb      	strb	r3, [r7, #31]
        break;
 800410c:	e002      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004114:	7ffb      	ldrb	r3, [r7, #31]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fee8 	bl	8003ef4 <LL_RCC_SetSAIClockSource>
 8004124:	e001      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004126:	7ffb      	ldrb	r3, [r7, #31]
 8004128:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004132:	2b00      	cmp	r3, #0
 8004134:	d046      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004136:	f7ff ff56 	bl	8003fe6 <LL_RCC_GetRTCClockSource>
 800413a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	429a      	cmp	r2, r3
 8004144:	d03c      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004146:	f7fe fc8b 	bl	8002a60 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d105      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff30 	bl	8003fba <LL_RCC_SetRTCClockSource>
 800415a:	e02e      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004166:	f7ff ff4b 	bl	8004000 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800416a:	f7ff ff5a 	bl	8004022 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800417c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004186:	f7ff fde1 	bl	8003d4c <LL_RCC_LSE_IsEnabled>
 800418a:	4603      	mov	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	d114      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004190:	f7fc fb2c 	bl	80007ec <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004196:	e00b      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fc fb28 	bl	80007ec <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d902      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	77fb      	strb	r3, [r7, #31]
              break;
 80041ae:	e004      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80041b0:	f7ff fdde 	bl	8003d70 <LL_RCC_LSE_IsReady>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d1ee      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80041ba:	7ffb      	ldrb	r3, [r7, #31]
 80041bc:	77bb      	strb	r3, [r7, #30]
 80041be:	e001      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	7ffb      	ldrb	r3, [r7, #31]
 80041c2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fe2a 	bl	8003e2e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d004      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fe35 	bl	8003e5a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fe5d 	bl	8003ec0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fe52 	bl	8003ec0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fe2a 	bl	8003e86 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fe1f 	bl	8003e86 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d022      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fe8d 	bl	8003f78 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004266:	d107      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004276:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004280:	d10b      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3304      	adds	r3, #4
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f8e3 	bl	8004452 <RCCEx_PLLSAI1_ConfigNQ>
 800428c:	4603      	mov	r3, r0
 800428e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004290:	7ffb      	ldrb	r3, [r7, #31]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004296:	7ffb      	ldrb	r3, [r7, #31]
 8004298:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d02b      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ae:	d008      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b8:	d003      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fe2a 	bl	8003f20 <LL_RCC_SetRNGClockSource>
 80042cc:	e00a      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	2000      	movs	r0, #0
 80042da:	f7ff fe21 	bl	8003f20 <LL_RCC_SetRNGClockSource>
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff fe34 	bl	8003f4c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80042ec:	d107      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004306:	2b00      	cmp	r3, #0
 8004308:	d022      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fe3d 	bl	8003f8e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800431c:	d107      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004336:	d10b      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f8e3 	bl	8004508 <RCCEx_PLLSAI1_ConfigNR>
 8004342:	4603      	mov	r3, r0
 8004344:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004346:	7ffb      	ldrb	r3, [r7, #31]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800434c:	7ffb      	ldrb	r3, [r7, #31]
 800434e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fd26 	bl	8003db2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fd45 	bl	8003e06 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fd2c 	bl	8003dde <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004386:	7fbb      	ldrb	r3, [r7, #30]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004394:	f7ff fcfe 	bl	8003d94 <LL_RCC_MSI_EnablePLLMode>
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}

0800439c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80043a8:	f7ff fe5b 	bl	8004062 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043ac:	f7fc fa1e 	bl	80007ec <HAL_GetTick>
 80043b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043b2:	e009      	b.n	80043c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b4:	f7fc fa1a 	bl	80007ec <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d902      	bls.n	80043c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	73fb      	strb	r3, [r7, #15]
      break;
 80043c6:	e004      	b.n	80043d2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043c8:	f7ff fe5a 	bl	8004080 <LL_RCC_PLLSAI1_IsReady>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d137      	bne.n	8004448 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ec:	4313      	orrs	r3, r2
 80043ee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004402:	4313      	orrs	r3, r2
 8004404:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004406:	f7ff fe1d 	bl	8004044 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440a:	f7fc f9ef 	bl	80007ec <HAL_GetTick>
 800440e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004410:	e009      	b.n	8004426 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004412:	f7fc f9eb 	bl	80007ec <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d902      	bls.n	8004426 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	73fb      	strb	r3, [r7, #15]
        break;
 8004424:	e004      	b.n	8004430 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004426:	f7ff fe2b 	bl	8004080 <LL_RCC_PLLSAI1_IsReady>
 800442a:	4603      	mov	r3, r0
 800442c:	2b01      	cmp	r3, #1
 800442e:	d1f0      	bne.n	8004412 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d108      	bne.n	8004448 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004444:	4313      	orrs	r3, r2
 8004446:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800445e:	f7ff fe00 	bl	8004062 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004462:	f7fc f9c3 	bl	80007ec <HAL_GetTick>
 8004466:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004468:	e009      	b.n	800447e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800446a:	f7fc f9bf 	bl	80007ec <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d902      	bls.n	800447e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	73fb      	strb	r3, [r7, #15]
      break;
 800447c:	e004      	b.n	8004488 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800447e:	f7ff fdff 	bl	8004080 <LL_RCC_PLLSAI1_IsReady>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d137      	bne.n	80044fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044a2:	4313      	orrs	r3, r2
 80044a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80044a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b8:	4313      	orrs	r3, r2
 80044ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80044bc:	f7ff fdc2 	bl	8004044 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c0:	f7fc f994 	bl	80007ec <HAL_GetTick>
 80044c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044c6:	e009      	b.n	80044dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c8:	f7fc f990 	bl	80007ec <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d902      	bls.n	80044dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	73fb      	strb	r3, [r7, #15]
        break;
 80044da:	e004      	b.n	80044e6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044dc:	f7ff fdd0 	bl	8004080 <LL_RCC_PLLSAI1_IsReady>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d1f0      	bne.n	80044c8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d108      	bne.n	80044fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004514:	f7ff fda5 	bl	8004062 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004518:	f7fc f968 	bl	80007ec <HAL_GetTick>
 800451c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800451e:	e009      	b.n	8004534 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004520:	f7fc f964 	bl	80007ec <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d902      	bls.n	8004534 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	73fb      	strb	r3, [r7, #15]
      break;
 8004532:	e004      	b.n	800453e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004534:	f7ff fda4 	bl	8004080 <LL_RCC_PLLSAI1_IsReady>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d137      	bne.n	80045b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004558:	4313      	orrs	r3, r2
 800455a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800455c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800456e:	4313      	orrs	r3, r2
 8004570:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004572:	f7ff fd67 	bl	8004044 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004576:	f7fc f939 	bl	80007ec <HAL_GetTick>
 800457a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800457c:	e009      	b.n	8004592 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800457e:	f7fc f935 	bl	80007ec <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d902      	bls.n	8004592 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	73fb      	strb	r3, [r7, #15]
        break;
 8004590:	e004      	b.n	800459c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004592:	f7ff fd75 	bl	8004080 <LL_RCC_PLLSAI1_IsReady>
 8004596:	4603      	mov	r3, r0
 8004598:	2b01      	cmp	r3, #1
 800459a:	d1f0      	bne.n	800457e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d108      	bne.n	80045b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045b0:	4313      	orrs	r3, r2
 80045b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80045d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80045f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	b29b      	uxth	r3, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	b29b      	uxth	r3, r3
 800460a:	4013      	ands	r3, r2
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004660:	b480      	push	{r7}
 8004662:	b09d      	sub	sp, #116	; 0x74
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	78db      	ldrb	r3, [r3, #3]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d81f      	bhi.n	80046d2 <USB_ActivateEndpoint+0x72>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <USB_ActivateEndpoint+0x38>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046a9 	.word	0x080046a9
 800469c:	080046c5 	.word	0x080046c5
 80046a0:	080046db 	.word	0x080046db
 80046a4:	080046b7 	.word	0x080046b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046b4:	e012      	b.n	80046dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046c2:	e00b      	b.n	80046dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046d0:	e004      	b.n	80046dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80046d8:	e000      	b.n	80046dc <USB_ActivateEndpoint+0x7c>
      break;
 80046da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	b21b      	sxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	b21a      	sxth	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b21b      	sxth	r3, r3
 800471e:	4313      	orrs	r3, r2
 8004720:	b21b      	sxth	r3, r3
 8004722:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004744:	b29b      	uxth	r3, r3
 8004746:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	7b1b      	ldrb	r3, [r3, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8178 	bne.w	8004a42 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8084 	beq.w	8004864 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	4413      	add	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	00da      	lsls	r2, r3, #3
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	88db      	ldrh	r3, [r3, #6]
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	b29b      	uxth	r3, r3
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	827b      	strh	r3, [r7, #18]
 800479e:	8a7b      	ldrh	r3, [r7, #18]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01b      	beq.n	80047e0 <USB_ActivateEndpoint+0x180>
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	823b      	strh	r3, [r7, #16]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	8a3b      	ldrh	r3, [r7, #16]
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	78db      	ldrb	r3, [r3, #3]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d020      	beq.n	800482a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fe:	81bb      	strh	r3, [r7, #12]
 8004800:	89bb      	ldrh	r3, [r7, #12]
 8004802:	f083 0320 	eor.w	r3, r3, #32
 8004806:	81bb      	strh	r3, [r7, #12]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	89bb      	ldrh	r3, [r7, #12]
 8004814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004824:	b29b      	uxth	r3, r3
 8004826:	8013      	strh	r3, [r2, #0]
 8004828:	e2d5      	b.n	8004dd6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004840:	81fb      	strh	r3, [r7, #14]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	89fb      	ldrh	r3, [r7, #14]
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]
 8004862:	e2b8      	b.n	8004dd6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	633b      	str	r3, [r7, #48]	; 0x30
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	4413      	add	r3, r2
 8004876:	633b      	str	r3, [r7, #48]	; 0x30
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	00da      	lsls	r2, r3, #3
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	4413      	add	r3, r2
 8004882:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	88db      	ldrh	r3, [r3, #6]
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	4413      	add	r3, r2
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	00da      	lsls	r2, r3, #3
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	4413      	add	r3, r2
 80048b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	801a      	strh	r2, [r3, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b3e      	cmp	r3, #62	; 0x3e
 80048d2:	d91d      	bls.n	8004910 <USB_ActivateEndpoint+0x2b0>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	66bb      	str	r3, [r7, #104]	; 0x68
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <USB_ActivateEndpoint+0x28e>
 80048e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ea:	3b01      	subs	r3, #1
 80048ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	029b      	lsls	r3, r3, #10
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	4313      	orrs	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004908:	b29a      	uxth	r2, r3
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	e026      	b.n	800495e <USB_ActivateEndpoint+0x2fe>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <USB_ActivateEndpoint+0x2ce>
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004926:	b29a      	uxth	r2, r3
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	e017      	b.n	800495e <USB_ActivateEndpoint+0x2fe>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	085b      	lsrs	r3, r3, #1
 8004934:	66bb      	str	r3, [r7, #104]	; 0x68
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <USB_ActivateEndpoint+0x2e8>
 8004942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004944:	3301      	adds	r3, #1
 8004946:	66bb      	str	r3, [r7, #104]	; 0x68
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29a      	uxth	r2, r3
 800494e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004950:	b29b      	uxth	r3, r3
 8004952:	029b      	lsls	r3, r3, #10
 8004954:	b29b      	uxth	r3, r3
 8004956:	4313      	orrs	r3, r2
 8004958:	b29a      	uxth	r2, r3
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	847b      	strh	r3, [r7, #34]	; 0x22
 800496c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800496e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01b      	beq.n	80049ae <USB_ActivateEndpoint+0x34e>
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	843b      	strh	r3, [r7, #32]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	8c3b      	ldrh	r3, [r7, #32]
 800499a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d124      	bne.n	8004a00 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049cc:	83bb      	strh	r3, [r7, #28]
 80049ce:	8bbb      	ldrh	r3, [r7, #28]
 80049d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049d4:	83bb      	strh	r3, [r7, #28]
 80049d6:	8bbb      	ldrh	r3, [r7, #28]
 80049d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049dc:	83bb      	strh	r3, [r7, #28]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	8bbb      	ldrh	r3, [r7, #28]
 80049ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8013      	strh	r3, [r2, #0]
 80049fe:	e1ea      	b.n	8004dd6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	83fb      	strh	r3, [r7, #30]
 8004a18:	8bfb      	ldrh	r3, [r7, #30]
 8004a1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a1e:	83fb      	strh	r3, [r7, #30]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	441a      	add	r2, r3
 8004a2a:	8bfb      	ldrh	r3, [r7, #30]
 8004a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	8013      	strh	r3, [r2, #0]
 8004a40:	e1c9      	b.n	8004dd6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	78db      	ldrb	r3, [r3, #3]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d11e      	bne.n	8004a88 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a60:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	441a      	add	r2, r3
 8004a6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	8013      	strh	r3, [r2, #0]
 8004a86:	e01d      	b.n	8004ac4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad4:	4413      	add	r3, r2
 8004ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	00da      	lsls	r2, r3, #3
 8004ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ae6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	891b      	ldrh	r3, [r3, #8]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004af6:	801a      	strh	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	657b      	str	r3, [r7, #84]	; 0x54
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b08:	4413      	add	r3, r2
 8004b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	00da      	lsls	r2, r3, #3
 8004b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b14:	4413      	add	r3, r2
 8004b16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b1a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	895b      	ldrh	r3, [r3, #10]
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b2a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f040 8093 	bne.w	8004c5c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01b      	beq.n	8004b8a <USB_ActivateEndpoint+0x52a>
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b68:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01b      	beq.n	8004bda <USB_ActivateEndpoint+0x57a>
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004bf2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8004bfa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c00:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	441a      	add	r2, r3
 8004c0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	441a      	add	r2, r3
 8004c44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	8013      	strh	r3, [r2, #0]
 8004c5a:	e0bc      	b.n	8004dd6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004c6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01d      	beq.n	8004cb4 <USB_ActivateEndpoint+0x654>
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004cc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01d      	beq.n	8004d0c <USB_ActivateEndpoint+0x6ac>
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	78db      	ldrb	r3, [r3, #3]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d024      	beq.n	8004d5e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d32:	f083 0320 	eor.w	r3, r3, #32
 8004d36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	441a      	add	r2, r3
 8004d44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8013      	strh	r3, [r2, #0]
 8004d5c:	e01d      	b.n	8004d9a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	441a      	add	r2, r3
 8004d82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	441a      	add	r2, r3
 8004dbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004dd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3774      	adds	r7, #116	; 0x74
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop

08004de8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b08d      	sub	sp, #52	; 0x34
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	7b1b      	ldrb	r3, [r3, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f040 808e 	bne.w	8004f18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d044      	beq.n	8004e8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	81bb      	strh	r3, [r7, #12]
 8004e12:	89bb      	ldrh	r3, [r7, #12]
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01b      	beq.n	8004e54 <USB_DeactivateEndpoint+0x6c>
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	817b      	strh	r3, [r7, #10]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	897b      	ldrh	r3, [r7, #10]
 8004e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6a:	813b      	strh	r3, [r7, #8]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	893b      	ldrh	r3, [r7, #8]
 8004e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8013      	strh	r3, [r2, #0]
 8004e8c:	e192      	b.n	80051b4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	827b      	strh	r3, [r7, #18]
 8004e9c:	8a7b      	ldrh	r3, [r7, #18]
 8004e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01b      	beq.n	8004ede <USB_DeactivateEndpoint+0xf6>
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebc:	823b      	strh	r3, [r7, #16]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	441a      	add	r2, r3
 8004ec8:	8a3b      	ldrh	r3, [r7, #16]
 8004eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef4:	81fb      	strh	r3, [r7, #14]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	441a      	add	r2, r3
 8004f00:	89fb      	ldrh	r3, [r7, #14]
 8004f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	8013      	strh	r3, [r2, #0]
 8004f16:	e14d      	b.n	80051b4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 80a5 	bne.w	800506c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	843b      	strh	r3, [r7, #32]
 8004f30:	8c3b      	ldrh	r3, [r7, #32]
 8004f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01b      	beq.n	8004f72 <USB_DeactivateEndpoint+0x18a>
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	83fb      	strh	r3, [r7, #30]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	441a      	add	r2, r3
 8004f5c:	8bfb      	ldrh	r3, [r7, #30]
 8004f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	83bb      	strh	r3, [r7, #28]
 8004f80:	8bbb      	ldrh	r3, [r7, #28]
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01b      	beq.n	8004fc2 <USB_DeactivateEndpoint+0x1da>
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	837b      	strh	r3, [r7, #26]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	8b7b      	ldrh	r3, [r7, #26]
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd8:	833b      	strh	r3, [r7, #24]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	8b3b      	ldrh	r3, [r7, #24]
 8004fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	82fb      	strh	r3, [r7, #22]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	8afb      	ldrh	r3, [r7, #22]
 800501e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502e:	b29b      	uxth	r3, r3
 8005030:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005048:	82bb      	strh	r3, [r7, #20]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	8abb      	ldrh	r3, [r7, #20]
 8005056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005066:	b29b      	uxth	r3, r3
 8005068:	8013      	strh	r3, [r2, #0]
 800506a:	e0a3      	b.n	80051b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800507a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800507c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <USB_DeactivateEndpoint+0x2d4>
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01b      	beq.n	800510c <USB_DeactivateEndpoint+0x324>
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	853b      	strh	r3, [r7, #40]	; 0x28
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005104:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005108:	b29b      	uxth	r3, r3
 800510a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	441a      	add	r2, r3
 800512e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800513c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005140:	b29b      	uxth	r3, r3
 8005142:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	b29b      	uxth	r3, r3
 800517a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	847b      	strh	r3, [r7, #34]	; 0x22
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3734      	adds	r7, #52	; 0x34
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b0c2      	sub	sp, #264	; 0x108
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d0:	6018      	str	r0, [r3, #0]
 80051d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051da:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	f040 86b7 	bne.w	8005f5c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	429a      	cmp	r2, r3
 8005208:	d908      	bls.n	800521c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800520a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800521a:	e007      	b.n	800522c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800521c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800522c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	7b1b      	ldrb	r3, [r3, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d13a      	bne.n	80052b2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800523c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6959      	ldr	r1, [r3, #20]
 8005248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	88da      	ldrh	r2, [r3, #6]
 8005254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005258:	b29b      	uxth	r3, r3
 800525a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800525e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005262:	6800      	ldr	r0, [r0, #0]
 8005264:	f001 fc98 	bl	8006b98 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4413      	add	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	00da      	lsls	r2, r3, #3
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	f000 be1f 	b.w	8005ef0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	78db      	ldrb	r3, [r3, #3]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	f040 8462 	bne.w	8005b88 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80052c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	f240 83df 	bls.w	8005aa0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005308:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800530c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	441a      	add	r2, r3
 8005326:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800532a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005332:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533a:	b29b      	uxth	r3, r3
 800533c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800533e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6a1a      	ldr	r2, [r3, #32]
 800534a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800535c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 81c7 	beq.w	8005712 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
 8005390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d177      	bne.n	8005490 <USB_EPStartXfer+0x2ce>
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	4413      	add	r3, r2
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	00da      	lsls	r2, r3, #3
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	4413      	add	r3, r2
 80053d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f0:	2b3e      	cmp	r3, #62	; 0x3e
 80053f2:	d921      	bls.n	8005438 <USB_EPStartXfer+0x276>
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <USB_EPStartXfer+0x252>
 800540a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800540e:	3b01      	subs	r3, #1
 8005410:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800541e:	b29b      	uxth	r3, r3
 8005420:	029b      	lsls	r3, r3, #10
 8005422:	b29b      	uxth	r3, r3
 8005424:	4313      	orrs	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005430:	b29a      	uxth	r2, r3
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	e050      	b.n	80054da <USB_EPStartXfer+0x318>
 8005438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <USB_EPStartXfer+0x294>
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544e:	b29a      	uxth	r2, r3
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	e041      	b.n	80054da <USB_EPStartXfer+0x318>
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <USB_EPStartXfer+0x2b4>
 800546c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005470:	3301      	adds	r3, #1
 8005472:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29a      	uxth	r2, r3
 800547c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005480:	b29b      	uxth	r3, r3
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	b29b      	uxth	r3, r3
 8005486:	4313      	orrs	r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	e024      	b.n	80054da <USB_EPStartXfer+0x318>
 8005490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d11c      	bne.n	80054da <USB_EPStartXfer+0x318>
 80054a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	4413      	add	r3, r2
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
 80054b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	00da      	lsls	r2, r3, #3
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	4413      	add	r3, r2
 80054ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	895b      	ldrh	r3, [r3, #10]
 80054e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6959      	ldr	r1, [r3, #20]
 80054f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005500:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005504:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005508:	6800      	ldr	r0, [r0, #0]
 800550a:	f001 fb45 	bl	8006b98 <USB_WritePMA>
            ep->xfer_buff += len;
 800550e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551e:	441a      	add	r2, r3
 8005520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800552c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a1a      	ldr	r2, [r3, #32]
 8005538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d90f      	bls.n	8005568 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005558:	1ad2      	subs	r2, r2, r3
 800555a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	621a      	str	r2, [r3, #32]
 8005566:	e00e      	b.n	8005586 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d177      	bne.n	8005686 <USB_EPStartXfer+0x4c4>
 8005596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	4413      	add	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	00da      	lsls	r2, r3, #3
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	4413      	add	r3, r2
 80055cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055dc:	b29a      	uxth	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e6:	2b3e      	cmp	r3, #62	; 0x3e
 80055e8:	d921      	bls.n	800562e <USB_EPStartXfer+0x46c>
 80055ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d104      	bne.n	800560a <USB_EPStartXfer+0x448>
 8005600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005604:	3b01      	subs	r3, #1
 8005606:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29a      	uxth	r2, r3
 8005610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005614:	b29b      	uxth	r3, r3
 8005616:	029b      	lsls	r3, r3, #10
 8005618:	b29b      	uxth	r3, r3
 800561a:	4313      	orrs	r3, r2
 800561c:	b29b      	uxth	r3, r3
 800561e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005626:	b29a      	uxth	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	801a      	strh	r2, [r3, #0]
 800562c:	e056      	b.n	80056dc <USB_EPStartXfer+0x51a>
 800562e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <USB_EPStartXfer+0x48a>
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005644:	b29a      	uxth	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	e047      	b.n	80056dc <USB_EPStartXfer+0x51a>
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <USB_EPStartXfer+0x4aa>
 8005662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005666:	3301      	adds	r3, #1
 8005668:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29a      	uxth	r2, r3
 8005672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005676:	b29b      	uxth	r3, r3
 8005678:	029b      	lsls	r3, r3, #10
 800567a:	b29b      	uxth	r3, r3
 800567c:	4313      	orrs	r3, r2
 800567e:	b29a      	uxth	r2, r3
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	e02a      	b.n	80056dc <USB_EPStartXfer+0x51a>
 8005686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d122      	bne.n	80056dc <USB_EPStartXfer+0x51a>
 8005696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	623b      	str	r3, [r7, #32]
 80056a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	4413      	add	r3, r2
 80056b8:	623b      	str	r3, [r7, #32]
 80056ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	00da      	lsls	r2, r3, #3
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	4413      	add	r3, r2
 80056cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	891b      	ldrh	r3, [r3, #8]
 80056e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6959      	ldr	r1, [r3, #20]
 80056f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005702:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005706:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800570a:	6800      	ldr	r0, [r0, #0]
 800570c:	f001 fa44 	bl	8006b98 <USB_WritePMA>
 8005710:	e3ee      	b.n	8005ef0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d177      	bne.n	8005812 <USB_EPStartXfer+0x650>
 8005722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	64bb      	str	r3, [r7, #72]	; 0x48
 800572e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573c:	b29b      	uxth	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005742:	4413      	add	r3, r2
 8005744:	64bb      	str	r3, [r7, #72]	; 0x48
 8005746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	00da      	lsls	r2, r3, #3
 8005754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005756:	4413      	add	r3, r2
 8005758:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800575c:	647b      	str	r3, [r7, #68]	; 0x44
 800575e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005768:	b29a      	uxth	r2, r3
 800576a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576c:	801a      	strh	r2, [r3, #0]
 800576e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005772:	2b3e      	cmp	r3, #62	; 0x3e
 8005774:	d921      	bls.n	80057ba <USB_EPStartXfer+0x5f8>
 8005776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <USB_EPStartXfer+0x5d4>
 800578c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005790:	3b01      	subs	r3, #1
 8005792:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29a      	uxth	r2, r3
 800579c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	029b      	lsls	r3, r3, #10
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	4313      	orrs	r3, r2
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b6:	801a      	strh	r2, [r3, #0]
 80057b8:	e056      	b.n	8005868 <USB_EPStartXfer+0x6a6>
 80057ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <USB_EPStartXfer+0x616>
 80057c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d4:	801a      	strh	r2, [r3, #0]
 80057d6:	e047      	b.n	8005868 <USB_EPStartXfer+0x6a6>
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <USB_EPStartXfer+0x636>
 80057ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057f2:	3301      	adds	r3, #1
 80057f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005802:	b29b      	uxth	r3, r3
 8005804:	029b      	lsls	r3, r3, #10
 8005806:	b29b      	uxth	r3, r3
 8005808:	4313      	orrs	r3, r2
 800580a:	b29a      	uxth	r2, r3
 800580c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e02a      	b.n	8005868 <USB_EPStartXfer+0x6a6>
 8005812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d122      	bne.n	8005868 <USB_EPStartXfer+0x6a6>
 8005822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	653b      	str	r3, [r7, #80]	; 0x50
 800582e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583c:	b29b      	uxth	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005842:	4413      	add	r3, r2
 8005844:	653b      	str	r3, [r7, #80]	; 0x50
 8005846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	00da      	lsls	r2, r3, #3
 8005854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005856:	4413      	add	r3, r2
 8005858:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800585c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800585e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005862:	b29a      	uxth	r2, r3
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005866:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	891b      	ldrh	r3, [r3, #8]
 8005874:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6959      	ldr	r1, [r3, #20]
 8005884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005888:	b29b      	uxth	r3, r3
 800588a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800588e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005892:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005896:	6800      	ldr	r0, [r0, #0]
 8005898:	f001 f97e 	bl	8006b98 <USB_WritePMA>
            ep->xfer_buff += len;
 800589c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ac:	441a      	add	r2, r3
 80058ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d90f      	bls.n	80058f6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80058d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	621a      	str	r2, [r3, #32]
 80058f4:	e00e      	b.n	8005914 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80058f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2200      	movs	r2, #0
 8005912:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	643b      	str	r3, [r7, #64]	; 0x40
 8005920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d177      	bne.n	8005a20 <USB_EPStartXfer+0x85e>
 8005930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	63bb      	str	r3, [r7, #56]	; 0x38
 800593c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	4413      	add	r3, r2
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38
 8005954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	00da      	lsls	r2, r3, #3
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	4413      	add	r3, r2
 8005966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800596a:	637b      	str	r3, [r7, #52]	; 0x34
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005976:	b29a      	uxth	r2, r3
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005980:	2b3e      	cmp	r3, #62	; 0x3e
 8005982:	d921      	bls.n	80059c8 <USB_EPStartXfer+0x806>
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800598e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <USB_EPStartXfer+0x7e2>
 800599a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599e:	3b01      	subs	r3, #1
 80059a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	801a      	strh	r2, [r3, #0]
 80059c6:	e050      	b.n	8005a6a <USB_EPStartXfer+0x8a8>
 80059c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <USB_EPStartXfer+0x824>
 80059d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	e041      	b.n	8005a6a <USB_EPStartXfer+0x8a8>
 80059e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <USB_EPStartXfer+0x844>
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a00:	3301      	adds	r3, #1
 8005a02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	029b      	lsls	r3, r3, #10
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e024      	b.n	8005a6a <USB_EPStartXfer+0x8a8>
 8005a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d11c      	bne.n	8005a6a <USB_EPStartXfer+0x8a8>
 8005a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a44:	4413      	add	r3, r2
 8005a46:	643b      	str	r3, [r7, #64]	; 0x40
 8005a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	895b      	ldrh	r3, [r3, #10]
 8005a76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6959      	ldr	r1, [r3, #20]
 8005a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a90:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a94:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	f001 f87d 	bl	8006b98 <USB_WritePMA>
 8005a9e:	e227      	b.n	8005ef0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	441a      	add	r2, r3
 8005af4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2c:	4413      	add	r3, r2
 8005b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	00da      	lsls	r2, r3, #3
 8005b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b46:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	891b      	ldrh	r3, [r3, #8]
 8005b5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6959      	ldr	r1, [r3, #20]
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b80:	6800      	ldr	r0, [r0, #0]
 8005b82:	f001 f809 	bl	8006b98 <USB_WritePMA>
 8005b86:	e1b3      	b.n	8005ef0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b98:	1ad2      	subs	r2, r2, r3
 8005b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005baa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80c6 	beq.w	8005d5a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	673b      	str	r3, [r7, #112]	; 0x70
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d177      	bne.n	8005cda <USB_EPStartXfer+0xb18>
 8005bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c0a:	4413      	add	r3, r2
 8005c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	00da      	lsls	r2, r3, #3
 8005c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c1e:	4413      	add	r3, r2
 8005c20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c24:	667b      	str	r3, [r7, #100]	; 0x64
 8005c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c3c:	d921      	bls.n	8005c82 <USB_EPStartXfer+0xac0>
 8005c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <USB_EPStartXfer+0xa9c>
 8005c54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	029b      	lsls	r3, r3, #10
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	e050      	b.n	8005d24 <USB_EPStartXfer+0xb62>
 8005c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <USB_EPStartXfer+0xade>
 8005c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	e041      	b.n	8005d24 <USB_EPStartXfer+0xb62>
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <USB_EPStartXfer+0xafe>
 8005cb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cba:	3301      	adds	r3, #1
 8005cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	029b      	lsls	r3, r3, #10
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e024      	b.n	8005d24 <USB_EPStartXfer+0xb62>
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d11c      	bne.n	8005d24 <USB_EPStartXfer+0xb62>
 8005cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cfe:	4413      	add	r3, r2
 8005d00:	673b      	str	r3, [r7, #112]	; 0x70
 8005d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	00da      	lsls	r2, r3, #3
 8005d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d12:	4413      	add	r3, r2
 8005d14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	895b      	ldrh	r3, [r3, #10]
 8005d30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6959      	ldr	r1, [r3, #20]
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d52:	6800      	ldr	r0, [r0, #0]
 8005d54:	f000 ff20 	bl	8006b98 <USB_WritePMA>
 8005d58:	e0ca      	b.n	8005ef0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	785b      	ldrb	r3, [r3, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d177      	bne.n	8005e5a <USB_EPStartXfer+0xc98>
 8005d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d8a:	4413      	add	r3, r2
 8005d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	00da      	lsls	r2, r3, #3
 8005d9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d9e:	4413      	add	r3, r2
 8005da0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005da4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dba:	2b3e      	cmp	r3, #62	; 0x3e
 8005dbc:	d921      	bls.n	8005e02 <USB_EPStartXfer+0xc40>
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <USB_EPStartXfer+0xc1c>
 8005dd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	029b      	lsls	r3, r3, #10
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	4313      	orrs	r3, r2
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	e05c      	b.n	8005ebc <USB_EPStartXfer+0xcfa>
 8005e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <USB_EPStartXfer+0xc5e>
 8005e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e04d      	b.n	8005ebc <USB_EPStartXfer+0xcfa>
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <USB_EPStartXfer+0xc7e>
 8005e36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	029b      	lsls	r3, r3, #10
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	4313      	orrs	r3, r2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e030      	b.n	8005ebc <USB_EPStartXfer+0xcfa>
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d128      	bne.n	8005ebc <USB_EPStartXfer+0xcfa>
 8005e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e8e:	4413      	add	r3, r2
 8005e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	00da      	lsls	r2, r3, #3
 8005ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005eba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	891b      	ldrh	r3, [r3, #8]
 8005ec8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6959      	ldr	r1, [r3, #20]
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ee2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ee6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	f000 fe54 	bl	8006b98 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f16:	817b      	strh	r3, [r7, #10]
 8005f18:	897b      	ldrh	r3, [r7, #10]
 8005f1a:	f083 0310 	eor.w	r3, r3, #16
 8005f1e:	817b      	strh	r3, [r7, #10]
 8005f20:	897b      	ldrh	r3, [r7, #10]
 8005f22:	f083 0320 	eor.w	r3, r3, #32
 8005f26:	817b      	strh	r3, [r7, #10]
 8005f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	441a      	add	r2, r3
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	8013      	strh	r3, [r2, #0]
 8005f58:	f000 bcde 	b.w	8006918 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	7b1b      	ldrb	r3, [r3, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f040 80bb 	bne.w	80060e4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d917      	bls.n	8005fba <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005faa:	1ad2      	subs	r2, r2, r3
 8005fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	619a      	str	r2, [r3, #24]
 8005fb8:	e00e      	b.n	8005fd8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	00da      	lsls	r2, r3, #3
 8006010:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006014:	4413      	add	r3, r2
 8006016:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800601a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800601e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800602a:	b29a      	uxth	r2, r3
 800602c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006036:	2b3e      	cmp	r3, #62	; 0x3e
 8006038:	d924      	bls.n	8006084 <USB_EPStartXfer+0xec2>
 800603a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <USB_EPStartXfer+0xe98>
 8006050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006054:	3b01      	subs	r3, #1
 8006056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800605a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29a      	uxth	r2, r3
 8006062:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006066:	b29b      	uxth	r3, r3
 8006068:	029b      	lsls	r3, r3, #10
 800606a:	b29b      	uxth	r3, r3
 800606c:	4313      	orrs	r3, r2
 800606e:	b29b      	uxth	r3, r3
 8006070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006078:	b29a      	uxth	r2, r3
 800607a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	f000 bc10 	b.w	80068a4 <USB_EPStartXfer+0x16e2>
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10c      	bne.n	80060a6 <USB_EPStartXfer+0xee4>
 800608c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609c:	b29a      	uxth	r2, r3
 800609e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a2:	801a      	strh	r2, [r3, #0]
 80060a4:	e3fe      	b.n	80068a4 <USB_EPStartXfer+0x16e2>
 80060a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060aa:	085b      	lsrs	r3, r3, #1
 80060ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d004      	beq.n	80060c6 <USB_EPStartXfer+0xf04>
 80060bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060c0:	3301      	adds	r3, #1
 80060c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	029b      	lsls	r3, r3, #10
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	4313      	orrs	r3, r2
 80060da:	b29a      	uxth	r2, r3
 80060dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	e3df      	b.n	80068a4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	78db      	ldrb	r3, [r3, #3]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	f040 8218 	bne.w	8006526 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f040 809d 	bne.w	8006242 <USB_EPStartXfer+0x1080>
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006124:	b29b      	uxth	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800612c:	4413      	add	r3, r2
 800612e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	00da      	lsls	r2, r3, #3
 8006140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006144:	4413      	add	r3, r2
 8006146:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800614a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800614e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b3e      	cmp	r3, #62	; 0x3e
 8006170:	d92b      	bls.n	80061ca <USB_EPStartXfer+0x1008>
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <USB_EPStartXfer+0xfe0>
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619c:	3b01      	subs	r3, #1
 800619e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	029b      	lsls	r3, r3, #10
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	e070      	b.n	80062ac <USB_EPStartXfer+0x10ea>
 80061ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10c      	bne.n	80061f4 <USB_EPStartXfer+0x1032>
 80061da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e05b      	b.n	80062ac <USB_EPStartXfer+0x10ea>
 80061f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <USB_EPStartXfer+0x1062>
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	3301      	adds	r3, #1
 8006220:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006230:	b29b      	uxth	r3, r3
 8006232:	029b      	lsls	r3, r3, #10
 8006234:	b29b      	uxth	r3, r3
 8006236:	4313      	orrs	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	e034      	b.n	80062ac <USB_EPStartXfer+0x10ea>
 8006242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d12c      	bne.n	80062ac <USB_EPStartXfer+0x10ea>
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626e:	b29b      	uxth	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006276:	4413      	add	r3, r2
 8006278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800627c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	00da      	lsls	r2, r3, #3
 800628a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800628e:	4413      	add	r3, r2
 8006290:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 809d 	bne.w	8006406 <USB_EPStartXfer+0x1244>
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f0:	4413      	add	r3, r2
 80062f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	00da      	lsls	r2, r3, #3
 8006304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006308:	4413      	add	r3, r2
 800630a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800630e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006312:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800631e:	b29a      	uxth	r2, r3
 8006320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b3e      	cmp	r3, #62	; 0x3e
 8006334:	d92b      	bls.n	800638e <USB_EPStartXfer+0x11cc>
 8006336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <USB_EPStartXfer+0x11a4>
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006360:	3b01      	subs	r3, #1
 8006362:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29a      	uxth	r2, r3
 800636e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006372:	b29b      	uxth	r3, r3
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	b29b      	uxth	r3, r3
 8006378:	4313      	orrs	r3, r2
 800637a:	b29b      	uxth	r3, r3
 800637c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006384:	b29a      	uxth	r2, r3
 8006386:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	e069      	b.n	8006462 <USB_EPStartXfer+0x12a0>
 800638e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10c      	bne.n	80063b8 <USB_EPStartXfer+0x11f6>
 800639e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	e054      	b.n	8006462 <USB_EPStartXfer+0x12a0>
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <USB_EPStartXfer+0x1226>
 80063de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e2:	3301      	adds	r3, #1
 80063e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	029b      	lsls	r3, r3, #10
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	4313      	orrs	r3, r2
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e02d      	b.n	8006462 <USB_EPStartXfer+0x12a0>
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d125      	bne.n	8006462 <USB_EPStartXfer+0x12a0>
 8006416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006424:	b29b      	uxth	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800642c:	4413      	add	r3, r2
 800642e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	00da      	lsls	r2, r3, #3
 8006440:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006444:	4413      	add	r3, r2
 8006446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800644a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	b29a      	uxth	r2, r3
 800645c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006460:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 8218 	beq.w	80068a4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006494:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <USB_EPStartXfer+0x12ea>
 80064a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10d      	bne.n	80064c8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f040 81f5 	bne.w	80068a4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f040 81ee 	bne.w	80068a4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80064c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ee:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80064f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]
 8006524:	e1be      	b.n	80068a4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	78db      	ldrb	r3, [r3, #3]
 8006532:	2b01      	cmp	r3, #1
 8006534:	f040 81b4 	bne.w	80068a0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	429a      	cmp	r2, r3
 8006552:	d917      	bls.n	8006584 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006574:	1ad2      	subs	r2, r2, r3
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	619a      	str	r2, [r3, #24]
 8006582:	e00e      	b.n	80065a2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 8085 	bne.w	80066be <USB_EPStartXfer+0x14fc>
 80065b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065d8:	4413      	add	r3, r2
 80065da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	00da      	lsls	r2, r3, #3
 80065ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065f0:	4413      	add	r3, r2
 80065f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006606:	b29a      	uxth	r2, r3
 8006608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006612:	2b3e      	cmp	r3, #62	; 0x3e
 8006614:	d923      	bls.n	800665e <USB_EPStartXfer+0x149c>
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2b00      	cmp	r3, #0
 800662a:	d104      	bne.n	8006636 <USB_EPStartXfer+0x1474>
 800662c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006630:	3b01      	subs	r3, #1
 8006632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29a      	uxth	r2, r3
 800663e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006642:	b29b      	uxth	r3, r3
 8006644:	029b      	lsls	r3, r3, #10
 8006646:	b29b      	uxth	r3, r3
 8006648:	4313      	orrs	r3, r2
 800664a:	b29b      	uxth	r3, r3
 800664c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006654:	b29a      	uxth	r2, r3
 8006656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	e060      	b.n	8006720 <USB_EPStartXfer+0x155e>
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10c      	bne.n	8006680 <USB_EPStartXfer+0x14be>
 8006666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006676:	b29a      	uxth	r2, r3
 8006678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	e04f      	b.n	8006720 <USB_EPStartXfer+0x155e>
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <USB_EPStartXfer+0x14de>
 8006696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800669a:	3301      	adds	r3, #1
 800669c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	029b      	lsls	r3, r3, #10
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	4313      	orrs	r3, r2
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	e030      	b.n	8006720 <USB_EPStartXfer+0x155e>
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d128      	bne.n	8006720 <USB_EPStartXfer+0x155e>
 80066ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f2:	4413      	add	r3, r2
 80066f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	00da      	lsls	r2, r3, #3
 8006706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800670a:	4413      	add	r3, r2
 800670c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006718:	b29a      	uxth	r2, r3
 800671a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800671e:	801a      	strh	r2, [r3, #0]
 8006720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800672e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 8085 	bne.w	800684a <USB_EPStartXfer+0x1688>
 8006740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006744:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800674e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675c:	b29b      	uxth	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006764:	4413      	add	r3, r2
 8006766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800676a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	00da      	lsls	r2, r3, #3
 8006778:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800677c:	4413      	add	r3, r2
 800677e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006782:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006792:	b29a      	uxth	r2, r3
 8006794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679e:	2b3e      	cmp	r3, #62	; 0x3e
 80067a0:	d923      	bls.n	80067ea <USB_EPStartXfer+0x1628>
 80067a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <USB_EPStartXfer+0x1600>
 80067b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067bc:	3b01      	subs	r3, #1
 80067be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	029b      	lsls	r3, r3, #10
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	4313      	orrs	r3, r2
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e6:	801a      	strh	r2, [r3, #0]
 80067e8:	e05c      	b.n	80068a4 <USB_EPStartXfer+0x16e2>
 80067ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10c      	bne.n	800680c <USB_EPStartXfer+0x164a>
 80067f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006802:	b29a      	uxth	r2, r3
 8006804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006808:	801a      	strh	r2, [r3, #0]
 800680a:	e04b      	b.n	80068a4 <USB_EPStartXfer+0x16e2>
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <USB_EPStartXfer+0x166a>
 8006822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006826:	3301      	adds	r3, #1
 8006828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800682c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006838:	b29b      	uxth	r3, r3
 800683a:	029b      	lsls	r3, r3, #10
 800683c:	b29b      	uxth	r3, r3
 800683e:	4313      	orrs	r3, r2
 8006840:	b29a      	uxth	r2, r3
 8006842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	e02c      	b.n	80068a4 <USB_EPStartXfer+0x16e2>
 800684a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d124      	bne.n	80068a4 <USB_EPStartXfer+0x16e2>
 800685a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006868:	b29b      	uxth	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006870:	4413      	add	r3, r2
 8006872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	00da      	lsls	r2, r3, #3
 8006884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006888:	4413      	add	r3, r2
 800688a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800688e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	b29a      	uxth	r2, r3
 8006898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	e001      	b.n	80068a4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e03a      	b.n	800691a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068d6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006914:	b29b      	uxth	r3, r3
 8006916:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	785b      	ldrb	r3, [r3, #1]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d020      	beq.n	8006978 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800694c:	81bb      	strh	r3, [r7, #12]
 800694e:	89bb      	ldrh	r3, [r7, #12]
 8006950:	f083 0310 	eor.w	r3, r3, #16
 8006954:	81bb      	strh	r3, [r7, #12]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	89bb      	ldrh	r3, [r7, #12]
 8006962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006972:	b29b      	uxth	r3, r3
 8006974:	8013      	strh	r3, [r2, #0]
 8006976:	e01f      	b.n	80069b8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	b29b      	uxth	r3, r3
 8006986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800698a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698e:	81fb      	strh	r3, [r7, #14]
 8006990:	89fb      	ldrh	r3, [r7, #14]
 8006992:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006996:	81fb      	strh	r3, [r7, #14]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	89fb      	ldrh	r3, [r7, #14]
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b087      	sub	sp, #28
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	7b1b      	ldrb	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 809d 	bne.w	8006b14 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d04c      	beq.n	8006a7c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	823b      	strh	r3, [r7, #16]
 80069f0:	8a3b      	ldrh	r3, [r7, #16]
 80069f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d01b      	beq.n	8006a32 <USB_EPClearStall+0x6c>
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a10:	81fb      	strh	r3, [r7, #14]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	441a      	add	r2, r3
 8006a1c:	89fb      	ldrh	r3, [r7, #14]
 8006a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	78db      	ldrb	r3, [r3, #3]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d06c      	beq.n	8006b14 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a50:	81bb      	strh	r3, [r7, #12]
 8006a52:	89bb      	ldrh	r3, [r7, #12]
 8006a54:	f083 0320 	eor.w	r3, r3, #32
 8006a58:	81bb      	strh	r3, [r7, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	89bb      	ldrh	r3, [r7, #12]
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
 8006a7a:	e04b      	b.n	8006b14 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	82fb      	strh	r3, [r7, #22]
 8006a8a:	8afb      	ldrh	r3, [r7, #22]
 8006a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01b      	beq.n	8006acc <USB_EPClearStall+0x106>
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aaa:	82bb      	strh	r3, [r7, #20]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	441a      	add	r2, r3
 8006ab6:	8abb      	ldrh	r3, [r7, #20]
 8006ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	827b      	strh	r3, [r7, #18]
 8006ae4:	8a7b      	ldrh	r3, [r7, #18]
 8006ae6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006aea:	827b      	strh	r3, [r7, #18]
 8006aec:	8a7b      	ldrh	r3, [r7, #18]
 8006aee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006af2:	827b      	strh	r3, [r7, #18]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	441a      	add	r2, r3
 8006afe:	8a7b      	ldrh	r3, [r7, #18]
 8006b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2280      	movs	r2, #128	; 0x80
 8006b38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b08b      	sub	sp, #44	; 0x2c
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	80fb      	strh	r3, [r7, #6]
 8006baa:	4613      	mov	r3, r2
 8006bac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bae:	88bb      	ldrh	r3, [r7, #4]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bbe:	88fa      	ldrh	r2, [r7, #6]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	e01b      	b.n	8006c08 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	b21a      	sxth	r2, r3
 8006be0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	b21b      	sxth	r3, r3
 8006be8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	8a7a      	ldrh	r2, [r7, #18]
 8006bee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	3b01      	subs	r3, #1
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e0      	bne.n	8006bd0 <USB_WritePMA+0x38>
  }
}
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
 8006c12:	372c      	adds	r7, #44	; 0x2c
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b08b      	sub	sp, #44	; 0x2c
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4611      	mov	r1, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	80fb      	strh	r3, [r7, #6]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c32:	88bb      	ldrh	r3, [r7, #4]
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c42:	88fa      	ldrh	r2, [r7, #6]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
 8006c52:	e018      	b.n	8006c86 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	3302      	adds	r3, #2
 8006c60:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	0a1b      	lsrs	r3, r3, #8
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	3b01      	subs	r3, #1
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e3      	bne.n	8006c54 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006c8c:	88bb      	ldrh	r3, [r7, #4]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	701a      	strb	r2, [r3, #0]
  }
}
 8006ca8:	bf00      	nop
 8006caa:	372c      	adds	r7, #44	; 0x2c
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cc4:	f002 fca0 	bl	8009608 <USBD_static_malloc>
 8006cc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d109      	bne.n	8006ce4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	32b0      	adds	r2, #176	; 0xb0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e0d4      	b.n	8006e8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006ce4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006ce8:	2100      	movs	r1, #0
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f002 fcd6 	bl	800969c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32b0      	adds	r2, #176	; 0xb0
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32b0      	adds	r2, #176	; 0xb0
 8006d0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	7c1b      	ldrb	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d138      	bne.n	8006d8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d1c:	4b5e      	ldr	r3, [pc, #376]	; (8006e98 <USBD_CDC_Init+0x1e4>)
 8006d1e:	7819      	ldrb	r1, [r3, #0]
 8006d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d24:	2202      	movs	r2, #2
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f002 fb15 	bl	8009356 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d2c:	4b5a      	ldr	r3, [pc, #360]	; (8006e98 <USBD_CDC_Init+0x1e4>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 020f 	and.w	r2, r3, #15
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	3324      	adds	r3, #36	; 0x24
 8006d42:	2201      	movs	r2, #1
 8006d44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d46:	4b55      	ldr	r3, [pc, #340]	; (8006e9c <USBD_CDC_Init+0x1e8>)
 8006d48:	7819      	ldrb	r1, [r3, #0]
 8006d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d4e:	2202      	movs	r2, #2
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f002 fb00 	bl	8009356 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d56:	4b51      	ldr	r3, [pc, #324]	; (8006e9c <USBD_CDC_Init+0x1e8>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f003 020f 	and.w	r2, r3, #15
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d6e:	2201      	movs	r2, #1
 8006d70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d72:	4b4b      	ldr	r3, [pc, #300]	; (8006ea0 <USBD_CDC_Init+0x1ec>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	f003 020f 	and.w	r2, r3, #15
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	3326      	adds	r3, #38	; 0x26
 8006d88:	2210      	movs	r2, #16
 8006d8a:	801a      	strh	r2, [r3, #0]
 8006d8c:	e035      	b.n	8006dfa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d8e:	4b42      	ldr	r3, [pc, #264]	; (8006e98 <USBD_CDC_Init+0x1e4>)
 8006d90:	7819      	ldrb	r1, [r3, #0]
 8006d92:	2340      	movs	r3, #64	; 0x40
 8006d94:	2202      	movs	r2, #2
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f002 fadd 	bl	8009356 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d9c:	4b3e      	ldr	r3, [pc, #248]	; (8006e98 <USBD_CDC_Init+0x1e4>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f003 020f 	and.w	r2, r3, #15
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	3324      	adds	r3, #36	; 0x24
 8006db2:	2201      	movs	r2, #1
 8006db4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006db6:	4b39      	ldr	r3, [pc, #228]	; (8006e9c <USBD_CDC_Init+0x1e8>)
 8006db8:	7819      	ldrb	r1, [r3, #0]
 8006dba:	2340      	movs	r3, #64	; 0x40
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f002 fac9 	bl	8009356 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dc4:	4b35      	ldr	r3, [pc, #212]	; (8006e9c <USBD_CDC_Init+0x1e8>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f003 020f 	and.w	r2, r3, #15
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ddc:	2201      	movs	r2, #1
 8006dde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006de0:	4b2f      	ldr	r3, [pc, #188]	; (8006ea0 <USBD_CDC_Init+0x1ec>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	f003 020f 	and.w	r2, r3, #15
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	3326      	adds	r3, #38	; 0x26
 8006df6:	2210      	movs	r2, #16
 8006df8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006dfa:	4b29      	ldr	r3, [pc, #164]	; (8006ea0 <USBD_CDC_Init+0x1ec>)
 8006dfc:	7819      	ldrb	r1, [r3, #0]
 8006dfe:	2308      	movs	r3, #8
 8006e00:	2203      	movs	r2, #3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f002 faa7 	bl	8009356 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e08:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <USBD_CDC_Init+0x1ec>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f003 020f 	and.w	r2, r3, #15
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	4613      	mov	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	3324      	adds	r3, #36	; 0x24
 8006e1e:	2201      	movs	r2, #1
 8006e20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	33b0      	adds	r3, #176	; 0xb0
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e018      	b.n	8006e8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	7c1b      	ldrb	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e64:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <USBD_CDC_Init+0x1e8>)
 8006e66:	7819      	ldrb	r1, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f002 fb5e 	bl	8009534 <USBD_LL_PrepareReceive>
 8006e78:	e008      	b.n	8006e8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e7a:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <USBD_CDC_Init+0x1e8>)
 8006e7c:	7819      	ldrb	r1, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e84:	2340      	movs	r3, #64	; 0x40
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f002 fb54 	bl	8009534 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	2000009b 	.word	0x2000009b
 8006e9c:	2000009c 	.word	0x2000009c
 8006ea0:	2000009d 	.word	0x2000009d

08006ea4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006eb0:	4b3a      	ldr	r3, [pc, #232]	; (8006f9c <USBD_CDC_DeInit+0xf8>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f002 fa73 	bl	80093a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ebc:	4b37      	ldr	r3, [pc, #220]	; (8006f9c <USBD_CDC_DeInit+0xf8>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	f003 020f 	and.w	r2, r3, #15
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	440b      	add	r3, r1
 8006ed0:	3324      	adds	r3, #36	; 0x24
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ed6:	4b32      	ldr	r3, [pc, #200]	; (8006fa0 <USBD_CDC_DeInit+0xfc>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f002 fa60 	bl	80093a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ee2:	4b2f      	ldr	r3, [pc, #188]	; (8006fa0 <USBD_CDC_DeInit+0xfc>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f003 020f 	and.w	r2, r3, #15
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006efa:	2200      	movs	r2, #0
 8006efc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006efe:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <USBD_CDC_DeInit+0x100>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f002 fa4c 	bl	80093a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f0a:	4b26      	ldr	r3, [pc, #152]	; (8006fa4 <USBD_CDC_DeInit+0x100>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	f003 020f 	and.w	r2, r3, #15
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	3324      	adds	r3, #36	; 0x24
 8006f20:	2200      	movs	r2, #0
 8006f22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f24:	4b1f      	ldr	r3, [pc, #124]	; (8006fa4 <USBD_CDC_DeInit+0x100>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	f003 020f 	and.w	r2, r3, #15
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	3326      	adds	r3, #38	; 0x26
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	32b0      	adds	r2, #176	; 0xb0
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01f      	beq.n	8006f90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	33b0      	adds	r3, #176	; 0xb0
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	32b0      	adds	r2, #176	; 0xb0
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f002 fb56 	bl	8009624 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32b0      	adds	r2, #176	; 0xb0
 8006f82:	2100      	movs	r1, #0
 8006f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	2000009b 	.word	0x2000009b
 8006fa0:	2000009c 	.word	0x2000009c
 8006fa4:	2000009d 	.word	0x2000009d

08006fa8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	32b0      	adds	r2, #176	; 0xb0
 8006fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e0bf      	b.n	8007158 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d050      	beq.n	8007086 <USBD_CDC_Setup+0xde>
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	f040 80af 	bne.w	8007148 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	88db      	ldrh	r3, [r3, #6]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d03a      	beq.n	8007068 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	b25b      	sxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	da1b      	bge.n	8007034 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	33b0      	adds	r3, #176	; 0xb0
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007012:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	88d2      	ldrh	r2, [r2, #6]
 8007018:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	88db      	ldrh	r3, [r3, #6]
 800701e:	2b07      	cmp	r3, #7
 8007020:	bf28      	it	cs
 8007022:	2307      	movcs	r3, #7
 8007024:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	89fa      	ldrh	r2, [r7, #14]
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fd21 	bl	8008a74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007032:	e090      	b.n	8007156 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	785a      	ldrb	r2, [r3, #1]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	88db      	ldrh	r3, [r3, #6]
 8007042:	2b3f      	cmp	r3, #63	; 0x3f
 8007044:	d803      	bhi.n	800704e <USBD_CDC_Setup+0xa6>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	88db      	ldrh	r3, [r3, #6]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	e000      	b.n	8007050 <USBD_CDC_Setup+0xa8>
 800704e:	2240      	movs	r2, #64	; 0x40
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007056:	6939      	ldr	r1, [r7, #16]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800705e:	461a      	mov	r2, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fd33 	bl	8008acc <USBD_CtlPrepareRx>
      break;
 8007066:	e076      	b.n	8007156 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	33b0      	adds	r3, #176	; 0xb0
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	7850      	ldrb	r0, [r2, #1]
 800707e:	2200      	movs	r2, #0
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	4798      	blx	r3
      break;
 8007084:	e067      	b.n	8007156 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b0b      	cmp	r3, #11
 800708c:	d851      	bhi.n	8007132 <USBD_CDC_Setup+0x18a>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <USBD_CDC_Setup+0xec>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070c5 	.word	0x080070c5
 8007098:	08007141 	.word	0x08007141
 800709c:	08007133 	.word	0x08007133
 80070a0:	08007133 	.word	0x08007133
 80070a4:	08007133 	.word	0x08007133
 80070a8:	08007133 	.word	0x08007133
 80070ac:	08007133 	.word	0x08007133
 80070b0:	08007133 	.word	0x08007133
 80070b4:	08007133 	.word	0x08007133
 80070b8:	08007133 	.word	0x08007133
 80070bc:	080070ef 	.word	0x080070ef
 80070c0:	08007119 	.word	0x08007119
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d107      	bne.n	80070e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070d0:	f107 030a 	add.w	r3, r7, #10
 80070d4:	2202      	movs	r2, #2
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 fccb 	bl	8008a74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070de:	e032      	b.n	8007146 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fc55 	bl	8008992 <USBD_CtlError>
            ret = USBD_FAIL;
 80070e8:	2303      	movs	r3, #3
 80070ea:	75fb      	strb	r3, [r7, #23]
          break;
 80070ec:	e02b      	b.n	8007146 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d107      	bne.n	800710a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80070fa:	f107 030d 	add.w	r3, r7, #13
 80070fe:	2201      	movs	r2, #1
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 fcb6 	bl	8008a74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007108:	e01d      	b.n	8007146 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 fc40 	bl	8008992 <USBD_CtlError>
            ret = USBD_FAIL;
 8007112:	2303      	movs	r3, #3
 8007114:	75fb      	strb	r3, [r7, #23]
          break;
 8007116:	e016      	b.n	8007146 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b03      	cmp	r3, #3
 8007122:	d00f      	beq.n	8007144 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fc33 	bl	8008992 <USBD_CtlError>
            ret = USBD_FAIL;
 800712c:	2303      	movs	r3, #3
 800712e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007130:	e008      	b.n	8007144 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fc2c 	bl	8008992 <USBD_CtlError>
          ret = USBD_FAIL;
 800713a:	2303      	movs	r3, #3
 800713c:	75fb      	strb	r3, [r7, #23]
          break;
 800713e:	e002      	b.n	8007146 <USBD_CDC_Setup+0x19e>
          break;
 8007140:	bf00      	nop
 8007142:	e008      	b.n	8007156 <USBD_CDC_Setup+0x1ae>
          break;
 8007144:	bf00      	nop
      }
      break;
 8007146:	e006      	b.n	8007156 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 fc21 	bl	8008992 <USBD_CtlError>
      ret = USBD_FAIL;
 8007150:	2303      	movs	r3, #3
 8007152:	75fb      	strb	r3, [r7, #23]
      break;
 8007154:	bf00      	nop
  }

  return (uint8_t)ret;
 8007156:	7dfb      	ldrb	r3, [r7, #23]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007172:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	32b0      	adds	r2, #176	; 0xb0
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007186:	2303      	movs	r3, #3
 8007188:	e065      	b.n	8007256 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	32b0      	adds	r2, #176	; 0xb0
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	f003 020f 	and.w	r2, r3, #15
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	440b      	add	r3, r1
 80071ac:	3318      	adds	r3, #24
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d02f      	beq.n	8007214 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	f003 020f 	and.w	r2, r3, #15
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	3318      	adds	r3, #24
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	f003 010f 	and.w	r1, r3, #15
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	460b      	mov	r3, r1
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4403      	add	r3, r0
 80071dc:	3320      	adds	r3, #32
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80071e4:	fb01 f303 	mul.w	r3, r1, r3
 80071e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d112      	bne.n	8007214 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	4613      	mov	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	440b      	add	r3, r1
 8007200:	3318      	adds	r3, #24
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007206:	78f9      	ldrb	r1, [r7, #3]
 8007208:	2300      	movs	r3, #0
 800720a:	2200      	movs	r2, #0
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f002 f970 	bl	80094f2 <USBD_LL_Transmit>
 8007212:	e01f      	b.n	8007254 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	33b0      	adds	r3, #176	; 0xb0
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d010      	beq.n	8007254 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	33b0      	adds	r3, #176	; 0xb0
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007250:	78fa      	ldrb	r2, [r7, #3]
 8007252:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	460b      	mov	r3, r1
 8007268:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	32b0      	adds	r2, #176	; 0xb0
 8007274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007278:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	32b0      	adds	r2, #176	; 0xb0
 8007284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800728c:	2303      	movs	r3, #3
 800728e:	e01a      	b.n	80072c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f002 f96e 	bl	8009576 <USBD_LL_GetRxDataSize>
 800729a:	4602      	mov	r2, r0
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	33b0      	adds	r3, #176	; 0xb0
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80072c0:	4611      	mov	r1, r2
 80072c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	32b0      	adds	r2, #176	; 0xb0
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e025      	b.n	800733c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	33b0      	adds	r3, #176	; 0xb0
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01a      	beq.n	800733a <USBD_CDC_EP0_RxReady+0x6c>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800730a:	2bff      	cmp	r3, #255	; 0xff
 800730c:	d015      	beq.n	800733a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	33b0      	adds	r3, #176	; 0xb0
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007326:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800732e:	b292      	uxth	r2, r2
 8007330:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	22ff      	movs	r2, #255	; 0xff
 8007336:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800734c:	2182      	movs	r1, #130	; 0x82
 800734e:	4818      	ldr	r0, [pc, #96]	; (80073b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007350:	f000 fcbd 	bl	8007cce <USBD_GetEpDesc>
 8007354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007356:	2101      	movs	r1, #1
 8007358:	4815      	ldr	r0, [pc, #84]	; (80073b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800735a:	f000 fcb8 	bl	8007cce <USBD_GetEpDesc>
 800735e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007360:	2181      	movs	r1, #129	; 0x81
 8007362:	4813      	ldr	r0, [pc, #76]	; (80073b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007364:	f000 fcb3 	bl	8007cce <USBD_GetEpDesc>
 8007368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2210      	movs	r2, #16
 8007374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2200      	movs	r2, #0
 8007380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007384:	711a      	strb	r2, [r3, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007398:	711a      	strb	r2, [r3, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2243      	movs	r2, #67	; 0x43
 80073a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073a4:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000058 	.word	0x20000058

080073b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073bc:	2182      	movs	r1, #130	; 0x82
 80073be:	4818      	ldr	r0, [pc, #96]	; (8007420 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073c0:	f000 fc85 	bl	8007cce <USBD_GetEpDesc>
 80073c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073c6:	2101      	movs	r1, #1
 80073c8:	4815      	ldr	r0, [pc, #84]	; (8007420 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073ca:	f000 fc80 	bl	8007cce <USBD_GetEpDesc>
 80073ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073d0:	2181      	movs	r1, #129	; 0x81
 80073d2:	4813      	ldr	r0, [pc, #76]	; (8007420 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073d4:	f000 fc7b 	bl	8007cce <USBD_GetEpDesc>
 80073d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2210      	movs	r2, #16
 80073e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2200      	movs	r2, #0
 80073f0:	711a      	strb	r2, [r3, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f042 0202 	orr.w	r2, r2, #2
 80073f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d006      	beq.n	800740e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	711a      	strb	r2, [r3, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f042 0202 	orr.w	r2, r2, #2
 800740c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2243      	movs	r2, #67	; 0x43
 8007412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007414:	4b02      	ldr	r3, [pc, #8]	; (8007420 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000058 	.word	0x20000058

08007424 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800742c:	2182      	movs	r1, #130	; 0x82
 800742e:	4818      	ldr	r0, [pc, #96]	; (8007490 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007430:	f000 fc4d 	bl	8007cce <USBD_GetEpDesc>
 8007434:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007436:	2101      	movs	r1, #1
 8007438:	4815      	ldr	r0, [pc, #84]	; (8007490 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800743a:	f000 fc48 	bl	8007cce <USBD_GetEpDesc>
 800743e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007440:	2181      	movs	r1, #129	; 0x81
 8007442:	4813      	ldr	r0, [pc, #76]	; (8007490 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007444:	f000 fc43 	bl	8007cce <USBD_GetEpDesc>
 8007448:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2210      	movs	r2, #16
 8007454:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d006      	beq.n	800746a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2200      	movs	r2, #0
 8007460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007464:	711a      	strb	r2, [r3, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d006      	beq.n	800747e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007478:	711a      	strb	r2, [r3, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2243      	movs	r2, #67	; 0x43
 8007482:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007484:	4b02      	ldr	r3, [pc, #8]	; (8007490 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000058 	.word	0x20000058

08007494 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	220a      	movs	r2, #10
 80074a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074a2:	4b03      	ldr	r3, [pc, #12]	; (80074b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20000014 	.word	0x20000014

080074b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e009      	b.n	80074dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	33b0      	adds	r3, #176	; 0xb0
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	32b0      	adds	r2, #176	; 0xb0
 80074fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007502:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800750a:	2303      	movs	r3, #3
 800750c:	e008      	b.n	8007520 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	32b0      	adds	r2, #176	; 0xb0
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800754c:	2303      	movs	r3, #3
 800754e:	e004      	b.n	800755a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	32b0      	adds	r2, #176	; 0xb0
 800757a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007580:	2301      	movs	r3, #1
 8007582:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800758a:	2303      	movs	r3, #3
 800758c:	e025      	b.n	80075da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007594:	2b00      	cmp	r3, #0
 8007596:	d11f      	bne.n	80075d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2201      	movs	r2, #1
 800759c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80075a0:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <USBD_CDC_TransmitPacket+0x7c>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f003 020f 	and.w	r2, r3, #15
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4403      	add	r3, r0
 80075ba:	3318      	adds	r3, #24
 80075bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80075be:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <USBD_CDC_TransmitPacket+0x7c>)
 80075c0:	7819      	ldrb	r1, [r3, #0]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 ff8f 	bl	80094f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	2000009b 	.word	0x2000009b

080075e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32b0      	adds	r2, #176	; 0xb0
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	32b0      	adds	r2, #176	; 0xb0
 800760a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007612:	2303      	movs	r3, #3
 8007614:	e018      	b.n	8007648 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7c1b      	ldrb	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10a      	bne.n	8007634 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <USBD_CDC_ReceivePacket+0x68>)
 8007620:	7819      	ldrb	r1, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 ff81 	bl	8009534 <USBD_LL_PrepareReceive>
 8007632:	e008      	b.n	8007646 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007634:	4b06      	ldr	r3, [pc, #24]	; (8007650 <USBD_CDC_ReceivePacket+0x68>)
 8007636:	7819      	ldrb	r1, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800763e:	2340      	movs	r3, #64	; 0x40
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 ff77 	bl	8009534 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	2000009c 	.word	0x2000009c

08007654 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007668:	2303      	movs	r3, #3
 800766a:	e01f      	b.n	80076ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	79fa      	ldrb	r2, [r7, #7]
 800769e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f001 fddb 	bl	800925c <USBD_LL_Init>
 80076a6:	4603      	mov	r3, r0
 80076a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e025      	b.n	8007718 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	32ae      	adds	r2, #174	; 0xae
 80076de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00f      	beq.n	8007708 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	32ae      	adds	r2, #174	; 0xae
 80076f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	f107 020e 	add.w	r2, r7, #14
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	4602      	mov	r2, r0
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fdf9 	bl	8009320 <USBD_LL_Start>
 800772e:	4603      	mov	r3, r0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007740:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007764:	2b00      	cmp	r3, #0
 8007766:	d009      	beq.n	800777c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	78fa      	ldrb	r2, [r7, #3]
 8007772:	4611      	mov	r1, r2
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
 8007778:	4603      	mov	r3, r0
 800777a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	4611      	mov	r1, r2
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80077ac:	2303      	movs	r3, #3
 80077ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 f8a6 	bl	800891e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d01a      	beq.n	800782c <USBD_LL_SetupStage+0x72>
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d822      	bhi.n	8007840 <USBD_LL_SetupStage+0x86>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <USBD_LL_SetupStage+0x4a>
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d00a      	beq.n	8007818 <USBD_LL_SetupStage+0x5e>
 8007802:	e01d      	b.n	8007840 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fad3 	bl	8007db8 <USBD_StdDevReq>
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]
      break;
 8007816:	e020      	b.n	800785a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fb3b 	bl	8007e9c <USBD_StdItfReq>
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]
      break;
 800782a:	e016      	b.n	800785a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb9d 	bl	8007f74 <USBD_StdEPReq>
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]
      break;
 800783e:	e00c      	b.n	800785a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007846:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800784a:	b2db      	uxtb	r3, r3
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fdc6 	bl	80093e0 <USBD_LL_StallEP>
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
      break;
 8007858:	bf00      	nop
  }

  return ret;
 800785a:	7bfb      	ldrb	r3, [r7, #15]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	460b      	mov	r3, r1
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d16e      	bne.n	800795a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007882:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800788a:	2b03      	cmp	r3, #3
 800788c:	f040 8098 	bne.w	80079c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	429a      	cmp	r2, r3
 800789a:	d913      	bls.n	80078c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	1ad2      	subs	r2, r2, r3
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	4293      	cmp	r3, r2
 80078b4:	bf28      	it	cs
 80078b6:	4613      	movcs	r3, r2
 80078b8:	461a      	mov	r2, r3
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f001 f922 	bl	8008b06 <USBD_CtlContinueRx>
 80078c2:	e07d      	b.n	80079c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078ca:	f003 031f 	and.w	r3, r3, #31
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d014      	beq.n	80078fc <USBD_LL_DataOutStage+0x98>
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d81d      	bhi.n	8007912 <USBD_LL_DataOutStage+0xae>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <USBD_LL_DataOutStage+0x7c>
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d003      	beq.n	80078e6 <USBD_LL_DataOutStage+0x82>
 80078de:	e018      	b.n	8007912 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	75bb      	strb	r3, [r7, #22]
            break;
 80078e4:	e018      	b.n	8007918 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	4619      	mov	r1, r3
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f9d2 	bl	8007c9a <USBD_CoreFindIF>
 80078f6:	4603      	mov	r3, r0
 80078f8:	75bb      	strb	r3, [r7, #22]
            break;
 80078fa:	e00d      	b.n	8007918 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007902:	b2db      	uxtb	r3, r3
 8007904:	4619      	mov	r1, r3
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f9d4 	bl	8007cb4 <USBD_CoreFindEP>
 800790c:	4603      	mov	r3, r0
 800790e:	75bb      	strb	r3, [r7, #22]
            break;
 8007910:	e002      	b.n	8007918 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	75bb      	strb	r3, [r7, #22]
            break;
 8007916:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007918:	7dbb      	ldrb	r3, [r7, #22]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d119      	bne.n	8007952 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d113      	bne.n	8007952 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800792a:	7dba      	ldrb	r2, [r7, #22]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	32ae      	adds	r2, #174	; 0xae
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800793a:	7dba      	ldrb	r2, [r7, #22]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007942:	7dba      	ldrb	r2, [r7, #22]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	32ae      	adds	r2, #174	; 0xae
 8007948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f001 f8e8 	bl	8008b28 <USBD_CtlSendStatus>
 8007958:	e032      	b.n	80079c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007960:	b2db      	uxtb	r3, r3
 8007962:	4619      	mov	r1, r3
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f9a5 	bl	8007cb4 <USBD_CoreFindEP>
 800796a:	4603      	mov	r3, r0
 800796c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800796e:	7dbb      	ldrb	r3, [r7, #22]
 8007970:	2bff      	cmp	r3, #255	; 0xff
 8007972:	d025      	beq.n	80079c0 <USBD_LL_DataOutStage+0x15c>
 8007974:	7dbb      	ldrb	r3, [r7, #22]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d122      	bne.n	80079c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b03      	cmp	r3, #3
 8007984:	d117      	bne.n	80079b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007986:	7dba      	ldrb	r2, [r7, #22]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	32ae      	adds	r2, #174	; 0xae
 800798c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00f      	beq.n	80079b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007996:	7dba      	ldrb	r2, [r7, #22]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800799e:	7dba      	ldrb	r2, [r7, #22]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	32ae      	adds	r2, #174	; 0xae
 80079a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	7afa      	ldrb	r2, [r7, #11]
 80079ac:	4611      	mov	r1, r2
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	4798      	blx	r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	e000      	b.n	80079c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b086      	sub	sp, #24
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	460b      	mov	r3, r1
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d16f      	bne.n	8007abe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3314      	adds	r3, #20
 80079e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d15a      	bne.n	8007aa4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d914      	bls.n	8007a24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6879      	ldr	r1, [r7, #4]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f001 f84a 	bl	8008aaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a16:	2300      	movs	r3, #0
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f001 fd89 	bl	8009534 <USBD_LL_PrepareReceive>
 8007a22:	e03f      	b.n	8007aa4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d11c      	bne.n	8007a6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d316      	bcc.n	8007a6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d20f      	bcs.n	8007a6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f001 f82b 	bl	8008aaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2100      	movs	r1, #0
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f001 fd66 	bl	8009534 <USBD_LL_PrepareReceive>
 8007a68:	e01c      	b.n	8007aa4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d10f      	bne.n	8007a96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a96:	2180      	movs	r1, #128	; 0x80
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f001 fca1 	bl	80093e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f001 f855 	bl	8008b4e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d03a      	beq.n	8007b24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f7ff fe42 	bl	8007738 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007abc:	e032      	b.n	8007b24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007abe:	7afb      	ldrb	r3, [r7, #11]
 8007ac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f8f3 	bl	8007cb4 <USBD_CoreFindEP>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	2bff      	cmp	r3, #255	; 0xff
 8007ad6:	d025      	beq.n	8007b24 <USBD_LL_DataInStage+0x15a>
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d122      	bne.n	8007b24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d11c      	bne.n	8007b24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007aea:	7dfa      	ldrb	r2, [r7, #23]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	32ae      	adds	r2, #174	; 0xae
 8007af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d014      	beq.n	8007b24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007afa:	7dfa      	ldrb	r2, [r7, #23]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b02:	7dfa      	ldrb	r2, [r7, #23]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	32ae      	adds	r2, #174	; 0xae
 8007b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	7afa      	ldrb	r2, [r7, #11]
 8007b10:	4611      	mov	r1, r2
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	4798      	blx	r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b1a:	7dbb      	ldrb	r3, [r7, #22]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b20:	7dbb      	ldrb	r3, [r7, #22]
 8007b22:	e000      	b.n	8007b26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d014      	beq.n	8007b94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00e      	beq.n	8007b94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6852      	ldr	r2, [r2, #4]
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	4611      	mov	r1, r2
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	4798      	blx	r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b94:	2340      	movs	r3, #64	; 0x40
 8007b96:	2200      	movs	r2, #0
 8007b98:	2100      	movs	r1, #0
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 fbdb 	bl	8009356 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2240      	movs	r2, #64	; 0x40
 8007bac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bb0:	2340      	movs	r3, #64	; 0x40
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2180      	movs	r1, #128	; 0x80
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fbcd 	bl	8009356 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2240      	movs	r2, #64	; 0x40
 8007bc6:	621a      	str	r2, [r3, #32]

  return ret;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d006      	beq.n	8007c14 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2204      	movs	r2, #4
 8007c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d106      	bne.n	8007c4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d110      	bne.n	8007c90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ca6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	885b      	ldrh	r3, [r3, #2]
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d920      	bls.n	8007d38 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007cfe:	e013      	b.n	8007d28 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d00:	f107 030a 	add.w	r3, r7, #10
 8007d04:	4619      	mov	r1, r3
 8007d06:	6978      	ldr	r0, [r7, #20]
 8007d08:	f000 f81b 	bl	8007d42 <USBD_GetNextDesc>
 8007d0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d108      	bne.n	8007d28 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	789b      	ldrb	r3, [r3, #2]
 8007d1e:	78fa      	ldrb	r2, [r7, #3]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d008      	beq.n	8007d36 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d24:	2300      	movs	r3, #0
 8007d26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	885b      	ldrh	r3, [r3, #2]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	897b      	ldrh	r3, [r7, #10]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d8e5      	bhi.n	8007d00 <USBD_GetEpDesc+0x32>
 8007d34:	e000      	b.n	8007d38 <USBD_GetEpDesc+0x6a>
          break;
 8007d36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d38:	693b      	ldr	r3, [r7, #16]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b085      	sub	sp, #20
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	881a      	ldrh	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	4413      	add	r3, r2
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	3301      	adds	r3, #1
 8007d92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d9a:	8a3b      	ldrh	r3, [r7, #16]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	b21a      	sxth	r2, r3
 8007da0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b21b      	sxth	r3, r3
 8007da8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007daa:	89fb      	ldrh	r3, [r7, #14]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d005      	beq.n	8007dde <USBD_StdDevReq+0x26>
 8007dd2:	2b40      	cmp	r3, #64	; 0x40
 8007dd4:	d857      	bhi.n	8007e86 <USBD_StdDevReq+0xce>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00f      	beq.n	8007dfa <USBD_StdDevReq+0x42>
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	d153      	bne.n	8007e86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	32ae      	adds	r2, #174	; 0xae
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	4798      	blx	r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	73fb      	strb	r3, [r7, #15]
      break;
 8007df8:	e04a      	b.n	8007e90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	785b      	ldrb	r3, [r3, #1]
 8007dfe:	2b09      	cmp	r3, #9
 8007e00:	d83b      	bhi.n	8007e7a <USBD_StdDevReq+0xc2>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <USBD_StdDevReq+0x50>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007e71 	.word	0x08007e71
 8007e10:	08007e7b 	.word	0x08007e7b
 8007e14:	08007e67 	.word	0x08007e67
 8007e18:	08007e7b 	.word	0x08007e7b
 8007e1c:	08007e3b 	.word	0x08007e3b
 8007e20:	08007e31 	.word	0x08007e31
 8007e24:	08007e7b 	.word	0x08007e7b
 8007e28:	08007e53 	.word	0x08007e53
 8007e2c:	08007e45 	.word	0x08007e45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa3c 	bl	80082b0 <USBD_GetDescriptor>
          break;
 8007e38:	e024      	b.n	8007e84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fbcb 	bl	80085d8 <USBD_SetAddress>
          break;
 8007e42:	e01f      	b.n	8007e84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fc0a 	bl	8008660 <USBD_SetConfig>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73fb      	strb	r3, [r7, #15]
          break;
 8007e50:	e018      	b.n	8007e84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fcad 	bl	80087b4 <USBD_GetConfig>
          break;
 8007e5a:	e013      	b.n	8007e84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fcde 	bl	8008820 <USBD_GetStatus>
          break;
 8007e64:	e00e      	b.n	8007e84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fd0d 	bl	8008888 <USBD_SetFeature>
          break;
 8007e6e:	e009      	b.n	8007e84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fd31 	bl	80088da <USBD_ClrFeature>
          break;
 8007e78:	e004      	b.n	8007e84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fd88 	bl	8008992 <USBD_CtlError>
          break;
 8007e82:	bf00      	nop
      }
      break;
 8007e84:	e004      	b.n	8007e90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fd82 	bl	8008992 <USBD_CtlError>
      break;
 8007e8e:	bf00      	nop
  }

  return ret;
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop

08007e9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eb2:	2b40      	cmp	r3, #64	; 0x40
 8007eb4:	d005      	beq.n	8007ec2 <USBD_StdItfReq+0x26>
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	d852      	bhi.n	8007f60 <USBD_StdItfReq+0xc4>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <USBD_StdItfReq+0x26>
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	d14e      	bne.n	8007f60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d840      	bhi.n	8007f52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	889b      	ldrh	r3, [r3, #4]
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d836      	bhi.n	8007f48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	889b      	ldrh	r3, [r3, #4]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff fed9 	bl	8007c9a <USBD_CoreFindIF>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	2bff      	cmp	r3, #255	; 0xff
 8007ef0:	d01d      	beq.n	8007f2e <USBD_StdItfReq+0x92>
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d11a      	bne.n	8007f2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007ef8:	7bba      	ldrb	r2, [r7, #14]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	32ae      	adds	r2, #174	; 0xae
 8007efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00f      	beq.n	8007f28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f08:	7bba      	ldrb	r2, [r7, #14]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f10:	7bba      	ldrb	r2, [r7, #14]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	32ae      	adds	r2, #174	; 0xae
 8007f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f26:	e004      	b.n	8007f32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f2c:	e001      	b.n	8007f32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	88db      	ldrh	r3, [r3, #6]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d110      	bne.n	8007f5c <USBD_StdItfReq+0xc0>
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10d      	bne.n	8007f5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fdf1 	bl	8008b28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f46:	e009      	b.n	8007f5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fd21 	bl	8008992 <USBD_CtlError>
          break;
 8007f50:	e004      	b.n	8007f5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fd1c 	bl	8008992 <USBD_CtlError>
          break;
 8007f5a:	e000      	b.n	8007f5e <USBD_StdItfReq+0xc2>
          break;
 8007f5c:	bf00      	nop
      }
      break;
 8007f5e:	e004      	b.n	8007f6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fd15 	bl	8008992 <USBD_CtlError>
      break;
 8007f68:	bf00      	nop
  }

  return ret;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	889b      	ldrh	r3, [r3, #4]
 8007f86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f90:	2b40      	cmp	r3, #64	; 0x40
 8007f92:	d007      	beq.n	8007fa4 <USBD_StdEPReq+0x30>
 8007f94:	2b40      	cmp	r3, #64	; 0x40
 8007f96:	f200 817f 	bhi.w	8008298 <USBD_StdEPReq+0x324>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d02a      	beq.n	8007ff4 <USBD_StdEPReq+0x80>
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	f040 817a 	bne.w	8008298 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff fe83 	bl	8007cb4 <USBD_CoreFindEP>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fb2:	7b7b      	ldrb	r3, [r7, #13]
 8007fb4:	2bff      	cmp	r3, #255	; 0xff
 8007fb6:	f000 8174 	beq.w	80082a2 <USBD_StdEPReq+0x32e>
 8007fba:	7b7b      	ldrb	r3, [r7, #13]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f040 8170 	bne.w	80082a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007fc2:	7b7a      	ldrb	r2, [r7, #13]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007fca:	7b7a      	ldrb	r2, [r7, #13]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	32ae      	adds	r2, #174	; 0xae
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8163 	beq.w	80082a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007fdc:	7b7a      	ldrb	r2, [r7, #13]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	32ae      	adds	r2, #174	; 0xae
 8007fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ff2:	e156      	b.n	80082a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	785b      	ldrb	r3, [r3, #1]
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d008      	beq.n	800800e <USBD_StdEPReq+0x9a>
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	f300 8145 	bgt.w	800828c <USBD_StdEPReq+0x318>
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 809b 	beq.w	800813e <USBD_StdEPReq+0x1ca>
 8008008:	2b01      	cmp	r3, #1
 800800a:	d03c      	beq.n	8008086 <USBD_StdEPReq+0x112>
 800800c:	e13e      	b.n	800828c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b02      	cmp	r3, #2
 8008018:	d002      	beq.n	8008020 <USBD_StdEPReq+0xac>
 800801a:	2b03      	cmp	r3, #3
 800801c:	d016      	beq.n	800804c <USBD_StdEPReq+0xd8>
 800801e:	e02c      	b.n	800807a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00d      	beq.n	8008042 <USBD_StdEPReq+0xce>
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	2b80      	cmp	r3, #128	; 0x80
 800802a:	d00a      	beq.n	8008042 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 f9d5 	bl	80093e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008036:	2180      	movs	r1, #128	; 0x80
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 f9d1 	bl	80093e0 <USBD_LL_StallEP>
 800803e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008040:	e020      	b.n	8008084 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fca4 	bl	8008992 <USBD_CtlError>
              break;
 800804a:	e01b      	b.n	8008084 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	885b      	ldrh	r3, [r3, #2]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10e      	bne.n	8008072 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008054:	7bbb      	ldrb	r3, [r7, #14]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00b      	beq.n	8008072 <USBD_StdEPReq+0xfe>
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b80      	cmp	r3, #128	; 0x80
 800805e:	d008      	beq.n	8008072 <USBD_StdEPReq+0xfe>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	88db      	ldrh	r3, [r3, #6]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 f9b7 	bl	80093e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fd58 	bl	8008b28 <USBD_CtlSendStatus>

              break;
 8008078:	e004      	b.n	8008084 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc88 	bl	8008992 <USBD_CtlError>
              break;
 8008082:	bf00      	nop
          }
          break;
 8008084:	e107      	b.n	8008296 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d002      	beq.n	8008098 <USBD_StdEPReq+0x124>
 8008092:	2b03      	cmp	r3, #3
 8008094:	d016      	beq.n	80080c4 <USBD_StdEPReq+0x150>
 8008096:	e04b      	b.n	8008130 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00d      	beq.n	80080ba <USBD_StdEPReq+0x146>
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b80      	cmp	r3, #128	; 0x80
 80080a2:	d00a      	beq.n	80080ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 f999 	bl	80093e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f995 	bl	80093e0 <USBD_LL_StallEP>
 80080b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080b8:	e040      	b.n	800813c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fc68 	bl	8008992 <USBD_CtlError>
              break;
 80080c2:	e03b      	b.n	800813c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	885b      	ldrh	r3, [r3, #2]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d136      	bne.n	800813a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 f99f 	bl	800941e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fd21 	bl	8008b28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fde2 	bl	8007cb4 <USBD_CoreFindEP>
 80080f0:	4603      	mov	r3, r0
 80080f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080f4:	7b7b      	ldrb	r3, [r7, #13]
 80080f6:	2bff      	cmp	r3, #255	; 0xff
 80080f8:	d01f      	beq.n	800813a <USBD_StdEPReq+0x1c6>
 80080fa:	7b7b      	ldrb	r3, [r7, #13]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11c      	bne.n	800813a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008100:	7b7a      	ldrb	r2, [r7, #13]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008108:	7b7a      	ldrb	r2, [r7, #13]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	32ae      	adds	r2, #174	; 0xae
 800810e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d010      	beq.n	800813a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008118:	7b7a      	ldrb	r2, [r7, #13]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	32ae      	adds	r2, #174	; 0xae
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800812e:	e004      	b.n	800813a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fc2d 	bl	8008992 <USBD_CtlError>
              break;
 8008138:	e000      	b.n	800813c <USBD_StdEPReq+0x1c8>
              break;
 800813a:	bf00      	nop
          }
          break;
 800813c:	e0ab      	b.n	8008296 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d002      	beq.n	8008150 <USBD_StdEPReq+0x1dc>
 800814a:	2b03      	cmp	r3, #3
 800814c:	d032      	beq.n	80081b4 <USBD_StdEPReq+0x240>
 800814e:	e097      	b.n	8008280 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d007      	beq.n	8008166 <USBD_StdEPReq+0x1f2>
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b80      	cmp	r3, #128	; 0x80
 800815a:	d004      	beq.n	8008166 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fc17 	bl	8008992 <USBD_CtlError>
                break;
 8008164:	e091      	b.n	800828a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800816a:	2b00      	cmp	r3, #0
 800816c:	da0b      	bge.n	8008186 <USBD_StdEPReq+0x212>
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008174:	4613      	mov	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	3310      	adds	r3, #16
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	4413      	add	r3, r2
 8008182:	3304      	adds	r3, #4
 8008184:	e00b      	b.n	800819e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	4413      	add	r3, r2
 800819c:	3304      	adds	r3, #4
 800819e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2202      	movs	r2, #2
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc61 	bl	8008a74 <USBD_CtlSendData>
              break;
 80081b2:	e06a      	b.n	800828a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da11      	bge.n	80081e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	f003 020f 	and.w	r2, r3, #15
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	440b      	add	r3, r1
 80081ce:	3324      	adds	r3, #36	; 0x24
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d117      	bne.n	8008206 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fbda 	bl	8008992 <USBD_CtlError>
                  break;
 80081de:	e054      	b.n	800828a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	f003 020f 	and.w	r2, r3, #15
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fbc7 	bl	8008992 <USBD_CtlError>
                  break;
 8008204:	e041      	b.n	800828a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008206:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800820a:	2b00      	cmp	r3, #0
 800820c:	da0b      	bge.n	8008226 <USBD_StdEPReq+0x2b2>
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	3310      	adds	r3, #16
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4413      	add	r3, r2
 8008222:	3304      	adds	r3, #4
 8008224:	e00b      	b.n	800823e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800822c:	4613      	mov	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	4413      	add	r3, r2
 800823c:	3304      	adds	r3, #4
 800823e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <USBD_StdEPReq+0x2d8>
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	2b80      	cmp	r3, #128	; 0x80
 800824a:	d103      	bne.n	8008254 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	e00e      	b.n	8008272 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 f8ff 	bl	800945c <USBD_LL_IsStallEP>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2201      	movs	r2, #1
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	e002      	b.n	8008272 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2202      	movs	r2, #2
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fbfb 	bl	8008a74 <USBD_CtlSendData>
              break;
 800827e:	e004      	b.n	800828a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fb85 	bl	8008992 <USBD_CtlError>
              break;
 8008288:	bf00      	nop
          }
          break;
 800828a:	e004      	b.n	8008296 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fb7f 	bl	8008992 <USBD_CtlError>
          break;
 8008294:	bf00      	nop
      }
      break;
 8008296:	e005      	b.n	80082a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fb79 	bl	8008992 <USBD_CtlError>
      break;
 80082a0:	e000      	b.n	80082a4 <USBD_StdEPReq+0x330>
      break;
 80082a2:	bf00      	nop
  }

  return ret;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	885b      	ldrh	r3, [r3, #2]
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	3b01      	subs	r3, #1
 80082d0:	2b0e      	cmp	r3, #14
 80082d2:	f200 8152 	bhi.w	800857a <USBD_GetDescriptor+0x2ca>
 80082d6:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <USBD_GetDescriptor+0x2c>)
 80082d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082dc:	0800834d 	.word	0x0800834d
 80082e0:	08008365 	.word	0x08008365
 80082e4:	080083a5 	.word	0x080083a5
 80082e8:	0800857b 	.word	0x0800857b
 80082ec:	0800857b 	.word	0x0800857b
 80082f0:	0800851b 	.word	0x0800851b
 80082f4:	08008547 	.word	0x08008547
 80082f8:	0800857b 	.word	0x0800857b
 80082fc:	0800857b 	.word	0x0800857b
 8008300:	0800857b 	.word	0x0800857b
 8008304:	0800857b 	.word	0x0800857b
 8008308:	0800857b 	.word	0x0800857b
 800830c:	0800857b 	.word	0x0800857b
 8008310:	0800857b 	.word	0x0800857b
 8008314:	08008319 	.word	0x08008319
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	7c12      	ldrb	r2, [r2, #16]
 8008330:	f107 0108 	add.w	r1, r7, #8
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800833a:	e126      	b.n	800858a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fb27 	bl	8008992 <USBD_CtlError>
        err++;
 8008344:	7afb      	ldrb	r3, [r7, #11]
 8008346:	3301      	adds	r3, #1
 8008348:	72fb      	strb	r3, [r7, #11]
      break;
 800834a:	e11e      	b.n	800858a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
      break;
 8008362:	e112      	b.n	800858a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	7c1b      	ldrb	r3, [r3, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10d      	bne.n	8008388 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008374:	f107 0208 	add.w	r2, r7, #8
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	2202      	movs	r2, #2
 8008384:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008386:	e100      	b.n	800858a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	f107 0208 	add.w	r2, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	2202      	movs	r2, #2
 80083a0:	701a      	strb	r2, [r3, #0]
      break;
 80083a2:	e0f2      	b.n	800858a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	885b      	ldrh	r3, [r3, #2]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	f200 80ac 	bhi.w	8008508 <USBD_GetDescriptor+0x258>
 80083b0:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <USBD_GetDescriptor+0x108>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	080083d1 	.word	0x080083d1
 80083bc:	08008405 	.word	0x08008405
 80083c0:	08008439 	.word	0x08008439
 80083c4:	0800846d 	.word	0x0800846d
 80083c8:	080084a1 	.word	0x080084a1
 80083cc:	080084d5 	.word	0x080084d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7c12      	ldrb	r2, [r2, #16]
 80083e8:	f107 0108 	add.w	r1, r7, #8
 80083ec:	4610      	mov	r0, r2
 80083ee:	4798      	blx	r3
 80083f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f2:	e091      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 facb 	bl	8008992 <USBD_CtlError>
            err++;
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	3301      	adds	r3, #1
 8008400:	72fb      	strb	r3, [r7, #11]
          break;
 8008402:	e089      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	7c12      	ldrb	r2, [r2, #16]
 800841c:	f107 0108 	add.w	r1, r7, #8
 8008420:	4610      	mov	r0, r2
 8008422:	4798      	blx	r3
 8008424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008426:	e077      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fab1 	bl	8008992 <USBD_CtlError>
            err++;
 8008430:	7afb      	ldrb	r3, [r7, #11]
 8008432:	3301      	adds	r3, #1
 8008434:	72fb      	strb	r3, [r7, #11]
          break;
 8008436:	e06f      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7c12      	ldrb	r2, [r2, #16]
 8008450:	f107 0108 	add.w	r1, r7, #8
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800845a:	e05d      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fa97 	bl	8008992 <USBD_CtlError>
            err++;
 8008464:	7afb      	ldrb	r3, [r7, #11]
 8008466:	3301      	adds	r3, #1
 8008468:	72fb      	strb	r3, [r7, #11]
          break;
 800846a:	e055      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00b      	beq.n	8008490 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	7c12      	ldrb	r2, [r2, #16]
 8008484:	f107 0108 	add.w	r1, r7, #8
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848e:	e043      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fa7d 	bl	8008992 <USBD_CtlError>
            err++;
 8008498:	7afb      	ldrb	r3, [r7, #11]
 800849a:	3301      	adds	r3, #1
 800849c:	72fb      	strb	r3, [r7, #11]
          break;
 800849e:	e03b      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	7c12      	ldrb	r2, [r2, #16]
 80084b8:	f107 0108 	add.w	r1, r7, #8
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
 80084c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084c2:	e029      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fa63 	bl	8008992 <USBD_CtlError>
            err++;
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	3301      	adds	r3, #1
 80084d0:	72fb      	strb	r3, [r7, #11]
          break;
 80084d2:	e021      	b.n	8008518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	7c12      	ldrb	r2, [r2, #16]
 80084ec:	f107 0108 	add.w	r1, r7, #8
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
 80084f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084f6:	e00f      	b.n	8008518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa49 	bl	8008992 <USBD_CtlError>
            err++;
 8008500:	7afb      	ldrb	r3, [r7, #11]
 8008502:	3301      	adds	r3, #1
 8008504:	72fb      	strb	r3, [r7, #11]
          break;
 8008506:	e007      	b.n	8008518 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa41 	bl	8008992 <USBD_CtlError>
          err++;
 8008510:	7afb      	ldrb	r3, [r7, #11]
 8008512:	3301      	adds	r3, #1
 8008514:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008516:	bf00      	nop
      }
      break;
 8008518:	e037      	b.n	800858a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7c1b      	ldrb	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852a:	f107 0208 	add.w	r2, r7, #8
 800852e:	4610      	mov	r0, r2
 8008530:	4798      	blx	r3
 8008532:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008534:	e029      	b.n	800858a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fa2a 	bl	8008992 <USBD_CtlError>
        err++;
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	3301      	adds	r3, #1
 8008542:	72fb      	strb	r3, [r7, #11]
      break;
 8008544:	e021      	b.n	800858a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	7c1b      	ldrb	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10d      	bne.n	800856a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	f107 0208 	add.w	r2, r7, #8
 800855a:	4610      	mov	r0, r2
 800855c:	4798      	blx	r3
 800855e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	2207      	movs	r2, #7
 8008566:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008568:	e00f      	b.n	800858a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fa10 	bl	8008992 <USBD_CtlError>
        err++;
 8008572:	7afb      	ldrb	r3, [r7, #11]
 8008574:	3301      	adds	r3, #1
 8008576:	72fb      	strb	r3, [r7, #11]
      break;
 8008578:	e007      	b.n	800858a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fa08 	bl	8008992 <USBD_CtlError>
      err++;
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	3301      	adds	r3, #1
 8008586:	72fb      	strb	r3, [r7, #11]
      break;
 8008588:	bf00      	nop
  }

  if (err != 0U)
 800858a:	7afb      	ldrb	r3, [r7, #11]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d11e      	bne.n	80085ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	88db      	ldrh	r3, [r3, #6]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d016      	beq.n	80085c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008598:	893b      	ldrh	r3, [r7, #8]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	88da      	ldrh	r2, [r3, #6]
 80085a2:	893b      	ldrh	r3, [r7, #8]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	bf28      	it	cs
 80085a8:	4613      	movcs	r3, r2
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085ae:	893b      	ldrh	r3, [r7, #8]
 80085b0:	461a      	mov	r2, r3
 80085b2:	68f9      	ldr	r1, [r7, #12]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa5d 	bl	8008a74 <USBD_CtlSendData>
 80085ba:	e009      	b.n	80085d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9e7 	bl	8008992 <USBD_CtlError>
 80085c4:	e004      	b.n	80085d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 faae 	bl	8008b28 <USBD_CtlSendStatus>
 80085cc:	e000      	b.n	80085d0 <USBD_GetDescriptor+0x320>
    return;
 80085ce:	bf00      	nop
  }
}
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop

080085d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	889b      	ldrh	r3, [r3, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d131      	bne.n	800864e <USBD_SetAddress+0x76>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	88db      	ldrh	r3, [r3, #6]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d12d      	bne.n	800864e <USBD_SetAddress+0x76>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	885b      	ldrh	r3, [r3, #2]
 80085f6:	2b7f      	cmp	r3, #127	; 0x7f
 80085f8:	d829      	bhi.n	800864e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	885b      	ldrh	r3, [r3, #2]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008604:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b03      	cmp	r3, #3
 8008610:	d104      	bne.n	800861c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f9bc 	bl	8008992 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861a:	e01d      	b.n	8008658 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7bfa      	ldrb	r2, [r7, #15]
 8008620:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 ff43 	bl	80094b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa7a 	bl	8008b28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2202      	movs	r2, #2
 800863e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008642:	e009      	b.n	8008658 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800864c:	e004      	b.n	8008658 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f99e 	bl	8008992 <USBD_CtlError>
  }
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	885b      	ldrh	r3, [r3, #2]
 8008672:	b2da      	uxtb	r2, r3
 8008674:	4b4e      	ldr	r3, [pc, #312]	; (80087b0 <USBD_SetConfig+0x150>)
 8008676:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008678:	4b4d      	ldr	r3, [pc, #308]	; (80087b0 <USBD_SetConfig+0x150>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d905      	bls.n	800868c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f985 	bl	8008992 <USBD_CtlError>
    return USBD_FAIL;
 8008688:	2303      	movs	r3, #3
 800868a:	e08c      	b.n	80087a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b02      	cmp	r3, #2
 8008696:	d002      	beq.n	800869e <USBD_SetConfig+0x3e>
 8008698:	2b03      	cmp	r3, #3
 800869a:	d029      	beq.n	80086f0 <USBD_SetConfig+0x90>
 800869c:	e075      	b.n	800878a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800869e:	4b44      	ldr	r3, [pc, #272]	; (80087b0 <USBD_SetConfig+0x150>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d020      	beq.n	80086e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80086a6:	4b42      	ldr	r3, [pc, #264]	; (80087b0 <USBD_SetConfig+0x150>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086b0:	4b3f      	ldr	r3, [pc, #252]	; (80087b0 <USBD_SetConfig+0x150>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff f849 	bl	800774e <USBD_SetClassConfig>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d008      	beq.n	80086d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f962 	bl	8008992 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2202      	movs	r2, #2
 80086d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086d6:	e065      	b.n	80087a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fa25 	bl	8008b28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2203      	movs	r2, #3
 80086e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086e6:	e05d      	b.n	80087a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa1d 	bl	8008b28 <USBD_CtlSendStatus>
      break;
 80086ee:	e059      	b.n	80087a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086f0:	4b2f      	ldr	r3, [pc, #188]	; (80087b0 <USBD_SetConfig+0x150>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d112      	bne.n	800871e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008700:	4b2b      	ldr	r3, [pc, #172]	; (80087b0 <USBD_SetConfig+0x150>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800870a:	4b29      	ldr	r3, [pc, #164]	; (80087b0 <USBD_SetConfig+0x150>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff f838 	bl	8007786 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa06 	bl	8008b28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800871c:	e042      	b.n	80087a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800871e:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <USBD_SetConfig+0x150>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	d02a      	beq.n	8008782 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff f826 	bl	8007786 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800873a:	4b1d      	ldr	r3, [pc, #116]	; (80087b0 <USBD_SetConfig+0x150>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <USBD_SetConfig+0x150>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fe ffff 	bl	800774e <USBD_SetClassConfig>
 8008750:	4603      	mov	r3, r0
 8008752:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00f      	beq.n	800877a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f918 	bl	8008992 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff f80b 	bl	8007786 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008778:	e014      	b.n	80087a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f9d4 	bl	8008b28 <USBD_CtlSendStatus>
      break;
 8008780:	e010      	b.n	80087a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f9d0 	bl	8008b28 <USBD_CtlSendStatus>
      break;
 8008788:	e00c      	b.n	80087a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f900 	bl	8008992 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008792:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <USBD_SetConfig+0x150>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7fe fff4 	bl	8007786 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800879e:	2303      	movs	r3, #3
 80087a0:	73fb      	strb	r3, [r7, #15]
      break;
 80087a2:	bf00      	nop
  }

  return ret;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	2000017c 	.word	0x2000017c

080087b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	88db      	ldrh	r3, [r3, #6]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d004      	beq.n	80087d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f8e2 	bl	8008992 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087ce:	e023      	b.n	8008818 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	dc02      	bgt.n	80087e2 <USBD_GetConfig+0x2e>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dc03      	bgt.n	80087e8 <USBD_GetConfig+0x34>
 80087e0:	e015      	b.n	800880e <USBD_GetConfig+0x5a>
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d00b      	beq.n	80087fe <USBD_GetConfig+0x4a>
 80087e6:	e012      	b.n	800880e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3308      	adds	r3, #8
 80087f2:	2201      	movs	r2, #1
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f93c 	bl	8008a74 <USBD_CtlSendData>
        break;
 80087fc:	e00c      	b.n	8008818 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3304      	adds	r3, #4
 8008802:	2201      	movs	r2, #1
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f934 	bl	8008a74 <USBD_CtlSendData>
        break;
 800880c:	e004      	b.n	8008818 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f8be 	bl	8008992 <USBD_CtlError>
        break;
 8008816:	bf00      	nop
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	3b01      	subs	r3, #1
 8008834:	2b02      	cmp	r3, #2
 8008836:	d81e      	bhi.n	8008876 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	88db      	ldrh	r3, [r3, #6]
 800883c:	2b02      	cmp	r3, #2
 800883e:	d004      	beq.n	800884a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f8a5 	bl	8008992 <USBD_CtlError>
        break;
 8008848:	e01a      	b.n	8008880 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f043 0202 	orr.w	r2, r3, #2
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	330c      	adds	r3, #12
 800886a:	2202      	movs	r2, #2
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f900 	bl	8008a74 <USBD_CtlSendData>
      break;
 8008874:	e004      	b.n	8008880 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f88a 	bl	8008992 <USBD_CtlError>
      break;
 800887e:	bf00      	nop
  }
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	885b      	ldrh	r3, [r3, #2]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d107      	bne.n	80088aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f940 	bl	8008b28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80088a8:	e013      	b.n	80088d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	885b      	ldrh	r3, [r3, #2]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d10b      	bne.n	80088ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	889b      	ldrh	r3, [r3, #4]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f930 	bl	8008b28 <USBD_CtlSendStatus>
}
 80088c8:	e003      	b.n	80088d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f860 	bl	8008992 <USBD_CtlError>
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	3b01      	subs	r3, #1
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d80b      	bhi.n	800890a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	885b      	ldrh	r3, [r3, #2]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d10c      	bne.n	8008914 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f910 	bl	8008b28 <USBD_CtlSendStatus>
      }
      break;
 8008908:	e004      	b.n	8008914 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f840 	bl	8008992 <USBD_CtlError>
      break;
 8008912:	e000      	b.n	8008916 <USBD_ClrFeature+0x3c>
      break;
 8008914:	bf00      	nop
  }
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3301      	adds	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	781a      	ldrb	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3301      	adds	r3, #1
 8008946:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff fa17 	bl	8007d7c <SWAPBYTE>
 800894e:	4603      	mov	r3, r0
 8008950:	461a      	mov	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3301      	adds	r3, #1
 800895a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3301      	adds	r3, #1
 8008960:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f7ff fa0a 	bl	8007d7c <SWAPBYTE>
 8008968:	4603      	mov	r3, r0
 800896a:	461a      	mov	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3301      	adds	r3, #1
 8008974:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3301      	adds	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f7ff f9fd 	bl	8007d7c <SWAPBYTE>
 8008982:	4603      	mov	r3, r0
 8008984:	461a      	mov	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	80da      	strh	r2, [r3, #6]
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800899c:	2180      	movs	r1, #128	; 0x80
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fd1e 	bl	80093e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089a4:	2100      	movs	r1, #0
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fd1a 	bl	80093e0 <USBD_LL_StallEP>
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d036      	beq.n	8008a38 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089ce:	6938      	ldr	r0, [r7, #16]
 80089d0:	f000 f836 	bl	8008a40 <USBD_GetLen>
 80089d4:	4603      	mov	r3, r0
 80089d6:	3301      	adds	r3, #1
 80089d8:	b29b      	uxth	r3, r3
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	b29a      	uxth	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	4413      	add	r3, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	7812      	ldrb	r2, [r2, #0]
 80089ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	3301      	adds	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	4413      	add	r3, r2
 80089fa:	2203      	movs	r2, #3
 80089fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	3301      	adds	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a04:	e013      	b.n	8008a2e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	7812      	ldrb	r2, [r2, #0]
 8008a10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	3301      	adds	r3, #1
 8008a16:	613b      	str	r3, [r7, #16]
    idx++;
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	4413      	add	r3, r2
 8008a24:	2200      	movs	r2, #0
 8008a26:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e7      	bne.n	8008a06 <USBD_GetString+0x52>
 8008a36:	e000      	b.n	8008a3a <USBD_GetString+0x86>
    return;
 8008a38:	bf00      	nop
  }
}
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a50:	e005      	b.n	8008a5e <USBD_GetLen+0x1e>
  {
    len++;
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	3301      	adds	r3, #1
 8008a56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1f5      	bne.n	8008a52 <USBD_GetLen+0x12>
  }

  return len;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	2100      	movs	r1, #0
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 fd29 	bl	80094f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	2100      	movs	r1, #0
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 fd18 	bl	80094f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2203      	movs	r2, #3
 8008adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	2100      	movs	r1, #0
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fd1c 	bl	8009534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	2100      	movs	r1, #0
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 fd0b 	bl	8009534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2204      	movs	r2, #4
 8008b34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b38:	2300      	movs	r3, #0
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fcd7 	bl	80094f2 <USBD_LL_Transmit>

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b082      	sub	sp, #8
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2205      	movs	r2, #5
 8008b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b5e:	2300      	movs	r3, #0
 8008b60:	2200      	movs	r2, #0
 8008b62:	2100      	movs	r1, #0
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fce5 	bl	8009534 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4912      	ldr	r1, [pc, #72]	; (8008bc4 <MX_USB_Device_Init+0x50>)
 8008b7c:	4812      	ldr	r0, [pc, #72]	; (8008bc8 <MX_USB_Device_Init+0x54>)
 8008b7e:	f7fe fd69 	bl	8007654 <USBD_Init>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008b88:	f7f7 fc6e 	bl	8000468 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008b8c:	490f      	ldr	r1, [pc, #60]	; (8008bcc <MX_USB_Device_Init+0x58>)
 8008b8e:	480e      	ldr	r0, [pc, #56]	; (8008bc8 <MX_USB_Device_Init+0x54>)
 8008b90:	f7fe fd90 	bl	80076b4 <USBD_RegisterClass>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008b9a:	f7f7 fc65 	bl	8000468 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008b9e:	490c      	ldr	r1, [pc, #48]	; (8008bd0 <MX_USB_Device_Init+0x5c>)
 8008ba0:	4809      	ldr	r0, [pc, #36]	; (8008bc8 <MX_USB_Device_Init+0x54>)
 8008ba2:	f7fe fc87 	bl	80074b4 <USBD_CDC_RegisterInterface>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008bac:	f7f7 fc5c 	bl	8000468 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008bb0:	4805      	ldr	r0, [pc, #20]	; (8008bc8 <MX_USB_Device_Init+0x54>)
 8008bb2:	f7fe fdb5 	bl	8007720 <USBD_Start>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008bbc:	f7f7 fc54 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008bc0:	bf00      	nop
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	200000b4 	.word	0x200000b4
 8008bc8:	20000180 	.word	0x20000180
 8008bcc:	20000020 	.word	0x20000020
 8008bd0:	200000a0 	.word	0x200000a0

08008bd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4905      	ldr	r1, [pc, #20]	; (8008bf0 <CDC_Init_FS+0x1c>)
 8008bdc:	4805      	ldr	r0, [pc, #20]	; (8008bf4 <CDC_Init_FS+0x20>)
 8008bde:	f7fe fc83 	bl	80074e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008be2:	4905      	ldr	r1, [pc, #20]	; (8008bf8 <CDC_Init_FS+0x24>)
 8008be4:	4803      	ldr	r0, [pc, #12]	; (8008bf4 <CDC_Init_FS+0x20>)
 8008be6:	f7fe fca1 	bl	800752c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008bea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000c5c 	.word	0x20000c5c
 8008bf4:	20000180 	.word	0x20000180
 8008bf8:	2000045c 	.word	0x2000045c

08008bfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	6039      	str	r1, [r7, #0]
 8008c16:	71fb      	strb	r3, [r7, #7]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	2b23      	cmp	r3, #35	; 0x23
 8008c20:	d84a      	bhi.n	8008cb8 <CDC_Control_FS+0xac>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <CDC_Control_FS+0x1c>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008cb9 	.word	0x08008cb9
 8008c2c:	08008cb9 	.word	0x08008cb9
 8008c30:	08008cb9 	.word	0x08008cb9
 8008c34:	08008cb9 	.word	0x08008cb9
 8008c38:	08008cb9 	.word	0x08008cb9
 8008c3c:	08008cb9 	.word	0x08008cb9
 8008c40:	08008cb9 	.word	0x08008cb9
 8008c44:	08008cb9 	.word	0x08008cb9
 8008c48:	08008cb9 	.word	0x08008cb9
 8008c4c:	08008cb9 	.word	0x08008cb9
 8008c50:	08008cb9 	.word	0x08008cb9
 8008c54:	08008cb9 	.word	0x08008cb9
 8008c58:	08008cb9 	.word	0x08008cb9
 8008c5c:	08008cb9 	.word	0x08008cb9
 8008c60:	08008cb9 	.word	0x08008cb9
 8008c64:	08008cb9 	.word	0x08008cb9
 8008c68:	08008cb9 	.word	0x08008cb9
 8008c6c:	08008cb9 	.word	0x08008cb9
 8008c70:	08008cb9 	.word	0x08008cb9
 8008c74:	08008cb9 	.word	0x08008cb9
 8008c78:	08008cb9 	.word	0x08008cb9
 8008c7c:	08008cb9 	.word	0x08008cb9
 8008c80:	08008cb9 	.word	0x08008cb9
 8008c84:	08008cb9 	.word	0x08008cb9
 8008c88:	08008cb9 	.word	0x08008cb9
 8008c8c:	08008cb9 	.word	0x08008cb9
 8008c90:	08008cb9 	.word	0x08008cb9
 8008c94:	08008cb9 	.word	0x08008cb9
 8008c98:	08008cb9 	.word	0x08008cb9
 8008c9c:	08008cb9 	.word	0x08008cb9
 8008ca0:	08008cb9 	.word	0x08008cb9
 8008ca4:	08008cb9 	.word	0x08008cb9
 8008ca8:	08008cb9 	.word	0x08008cb9
 8008cac:	08008cb9 	.word	0x08008cb9
 8008cb0:	08008cb9 	.word	0x08008cb9
 8008cb4:	08008cb9 	.word	0x08008cb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008cb8:	bf00      	nop
  }

  return (USBD_OK);
 8008cba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08a      	sub	sp, #40	; 0x28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	  if(Buf[0] == '1')
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b31      	cmp	r3, #49	; 0x31
 8008cd8:	d114      	bne.n	8008d04 <CDC_Receive_FS+0x3c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8008cda:	2201      	movs	r2, #1
 8008cdc:	2120      	movs	r1, #32
 8008cde:	481b      	ldr	r0, [pc, #108]	; (8008d4c <CDC_Receive_FS+0x84>)
 8008ce0:	f7f8 f81c 	bl	8000d1c <HAL_GPIO_WritePin>
		  char buf[] = "Received";
 8008ce4:	4a1a      	ldr	r2, [pc, #104]	; (8008d50 <CDC_Receive_FS+0x88>)
 8008ce6:	f107 0318 	add.w	r3, r7, #24
 8008cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8008cec:	c303      	stmia	r3!, {r0, r1}
 8008cee:	701a      	strb	r2, [r3, #0]
		  uint16_t len = sizeof(buf) - 1;
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	84bb      	strh	r3, [r7, #36]	; 0x24

		  CDC_Transmit_FS((uint8_t*)buf, len);
 8008cf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008cf6:	f107 0318 	add.w	r3, r7, #24
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f82b 	bl	8008d58 <CDC_Transmit_FS>
 8008d02:	e017      	b.n	8008d34 <CDC_Receive_FS+0x6c>

	  }else if(Buf[0] == '0')
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b30      	cmp	r3, #48	; 0x30
 8008d0a:	d113      	bne.n	8008d34 <CDC_Receive_FS+0x6c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2120      	movs	r1, #32
 8008d10:	480e      	ldr	r0, [pc, #56]	; (8008d4c <CDC_Receive_FS+0x84>)
 8008d12:	f7f8 f803 	bl	8000d1c <HAL_GPIO_WritePin>
		  char buf[] = "Received";
 8008d16:	4a0e      	ldr	r2, [pc, #56]	; (8008d50 <CDC_Receive_FS+0x88>)
 8008d18:	f107 030c 	add.w	r3, r7, #12
 8008d1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d1e:	c303      	stmia	r3!, {r0, r1}
 8008d20:	701a      	strb	r2, [r3, #0]
		  uint16_t len = sizeof(buf) - 1;
 8008d22:	2308      	movs	r3, #8
 8008d24:	84fb      	strh	r3, [r7, #38]	; 0x26

		  CDC_Transmit_FS((uint8_t*)buf, len);
 8008d26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d28:	f107 030c 	add.w	r3, r7, #12
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f812 	bl	8008d58 <CDC_Transmit_FS>

	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4807      	ldr	r0, [pc, #28]	; (8008d54 <CDC_Receive_FS+0x8c>)
 8008d38:	f7fe fbf8 	bl	800752c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d3c:	4805      	ldr	r0, [pc, #20]	; (8008d54 <CDC_Receive_FS+0x8c>)
 8008d3e:	f7fe fc53 	bl	80075e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d42:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3728      	adds	r7, #40	; 0x28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	48000400 	.word	0x48000400
 8008d50:	08009738 	.word	0x08009738
 8008d54:	20000180 	.word	0x20000180

08008d58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d68:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <CDC_Transmit_FS+0x48>)
 8008d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d6e:	60bb      	str	r3, [r7, #8]


  if (hcdc->TxState != 0){
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e00b      	b.n	8008d96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d7e:	887b      	ldrh	r3, [r7, #2]
 8008d80:	461a      	mov	r2, r3
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	4806      	ldr	r0, [pc, #24]	; (8008da0 <CDC_Transmit_FS+0x48>)
 8008d86:	f7fe fbaf 	bl	80074e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d8a:	4805      	ldr	r0, [pc, #20]	; (8008da0 <CDC_Transmit_FS+0x48>)
 8008d8c:	f7fe fbec 	bl	8007568 <USBD_CDC_TransmitPacket>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000180 	.word	0x20000180

08008da4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	4613      	mov	r3, r2
 8008db0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
	...

08008dc8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	6039      	str	r1, [r7, #0]
 8008dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2212      	movs	r2, #18
 8008dd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008dda:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	200000d4 	.word	0x200000d4

08008dec <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	6039      	str	r1, [r7, #0]
 8008df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dfe:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	200000e8 	.word	0x200000e8

08008e10 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	6039      	str	r1, [r7, #0]
 8008e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e1c:	79fb      	ldrb	r3, [r7, #7]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d105      	bne.n	8008e2e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4907      	ldr	r1, [pc, #28]	; (8008e44 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008e26:	4808      	ldr	r0, [pc, #32]	; (8008e48 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008e28:	f7ff fdc4 	bl	80089b4 <USBD_GetString>
 8008e2c:	e004      	b.n	8008e38 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	4904      	ldr	r1, [pc, #16]	; (8008e44 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008e32:	4805      	ldr	r0, [pc, #20]	; (8008e48 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008e34:	f7ff fdbe 	bl	80089b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	2000145c 	.word	0x2000145c
 8008e48:	08009744 	.word	0x08009744

08008e4c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	6039      	str	r1, [r7, #0]
 8008e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	4904      	ldr	r1, [pc, #16]	; (8008e6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008e5c:	4804      	ldr	r0, [pc, #16]	; (8008e70 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008e5e:	f7ff fda9 	bl	80089b4 <USBD_GetString>
  return USBD_StrDesc;
 8008e62:	4b02      	ldr	r3, [pc, #8]	; (8008e6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	2000145c 	.word	0x2000145c
 8008e70:	0800975c 	.word	0x0800975c

08008e74 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	221a      	movs	r2, #26
 8008e84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e86:	f000 f843 	bl	8008f10 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008e8a:	4b02      	ldr	r3, [pc, #8]	; (8008e94 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	200000ec 	.word	0x200000ec

08008e98 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	4907      	ldr	r1, [pc, #28]	; (8008ecc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008eae:	4808      	ldr	r0, [pc, #32]	; (8008ed0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008eb0:	f7ff fd80 	bl	80089b4 <USBD_GetString>
 8008eb4:	e004      	b.n	8008ec0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	4904      	ldr	r1, [pc, #16]	; (8008ecc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008eba:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008ebc:	f7ff fd7a 	bl	80089b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	2000145c 	.word	0x2000145c
 8008ed0:	08009770 	.word	0x08009770

08008ed4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	6039      	str	r1, [r7, #0]
 8008ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d105      	bne.n	8008ef2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	4907      	ldr	r1, [pc, #28]	; (8008f08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008eea:	4808      	ldr	r0, [pc, #32]	; (8008f0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008eec:	f7ff fd62 	bl	80089b4 <USBD_GetString>
 8008ef0:	e004      	b.n	8008efc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	4904      	ldr	r1, [pc, #16]	; (8008f08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008ef6:	4805      	ldr	r0, [pc, #20]	; (8008f0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008ef8:	f7ff fd5c 	bl	80089b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	2000145c 	.word	0x2000145c
 8008f0c:	0800977c 	.word	0x0800977c

08008f10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <Get_SerialNum+0x44>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f1c:	4b0e      	ldr	r3, [pc, #56]	; (8008f58 <Get_SerialNum+0x48>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f22:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <Get_SerialNum+0x4c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d009      	beq.n	8008f4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f36:	2208      	movs	r2, #8
 8008f38:	4909      	ldr	r1, [pc, #36]	; (8008f60 <Get_SerialNum+0x50>)
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 f814 	bl	8008f68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f40:	2204      	movs	r2, #4
 8008f42:	4908      	ldr	r1, [pc, #32]	; (8008f64 <Get_SerialNum+0x54>)
 8008f44:	68b8      	ldr	r0, [r7, #8]
 8008f46:	f000 f80f 	bl	8008f68 <IntToUnicode>
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	1fff7590 	.word	0x1fff7590
 8008f58:	1fff7594 	.word	0x1fff7594
 8008f5c:	1fff7598 	.word	0x1fff7598
 8008f60:	200000ee 	.word	0x200000ee
 8008f64:	200000fe 	.word	0x200000fe

08008f68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75fb      	strb	r3, [r7, #23]
 8008f7e:	e027      	b.n	8008fd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	0f1b      	lsrs	r3, r3, #28
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d80b      	bhi.n	8008fa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	0f1b      	lsrs	r3, r3, #28
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	4619      	mov	r1, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	440b      	add	r3, r1
 8008f98:	3230      	adds	r2, #48	; 0x30
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	e00a      	b.n	8008fb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	0f1b      	lsrs	r3, r3, #28
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	4619      	mov	r1, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	440b      	add	r3, r1
 8008fb0:	3237      	adds	r2, #55	; 0x37
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	75fb      	strb	r3, [r7, #23]
 8008fd0:	7dfa      	ldrb	r2, [r7, #23]
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d3d3      	bcc.n	8008f80 <IntToUnicode+0x18>
  }
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <LL_AHB2_GRP1_EnableClock>:
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b085      	sub	sp, #20
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ff4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4013      	ands	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800900a:	68fb      	ldr	r3, [r7, #12]
}
 800900c:	bf00      	nop
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <LL_APB1_GRP1_EnableClock>:
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4313      	orrs	r3, r2
 800902e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4013      	ands	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800903c:	68fb      	ldr	r3, [r7, #12]
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
	...

0800904c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b09c      	sub	sp, #112	; 0x70
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009054:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	605a      	str	r2, [r3, #4]
 800905e:	609a      	str	r2, [r3, #8]
 8009060:	60da      	str	r2, [r3, #12]
 8009062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009064:	f107 030c 	add.w	r3, r7, #12
 8009068:	2250      	movs	r2, #80	; 0x50
 800906a:	2100      	movs	r1, #0
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fb15 	bl	800969c <memset>
  if(pcdHandle->Instance==USB)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a23      	ldr	r2, [pc, #140]	; (8009104 <HAL_PCD_MspInit+0xb8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d13e      	bne.n	80090fa <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800907c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009080:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8009082:	2318      	movs	r3, #24
 8009084:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8009086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800908a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800908c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009090:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8009092:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009096:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8009098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800909c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800909e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80090a2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80090a4:	f107 030c 	add.w	r3, r7, #12
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fa fffb 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80090b4:	f7f7 f9d8 	bl	8000468 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090b8:	2001      	movs	r0, #1
 80090ba:	f7ff ff94 	bl	8008fe6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80090be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80090c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090c4:	2302      	movs	r3, #2
 80090c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090c8:	2300      	movs	r3, #0
 80090ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090cc:	2300      	movs	r3, #0
 80090ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80090d0:	230a      	movs	r3, #10
 80090d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80090d8:	4619      	mov	r1, r3
 80090da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80090de:	f7f7 fcad 	bl	8000a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090e2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80090e6:	f7ff ff97 	bl	8009018 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80090ea:	2200      	movs	r2, #0
 80090ec:	2100      	movs	r1, #0
 80090ee:	2014      	movs	r0, #20
 80090f0:	f7f7 fc6f 	bl	80009d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80090f4:	2014      	movs	r0, #20
 80090f6:	f7f7 fc86 	bl	8000a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80090fa:	bf00      	nop
 80090fc:	3770      	adds	r7, #112	; 0x70
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	40006800 	.word	0x40006800

08009108 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800911c:	4619      	mov	r1, r3
 800911e:	4610      	mov	r0, r2
 8009120:	f7fe fb4b 	bl	80077ba <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800913e:	78fa      	ldrb	r2, [r7, #3]
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	4613      	mov	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	00db      	lsls	r3, r3, #3
 800914a:	440b      	add	r3, r1
 800914c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	78fb      	ldrb	r3, [r7, #3]
 8009154:	4619      	mov	r1, r3
 8009156:	f7fe fb85 	bl	8007864 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b082      	sub	sp, #8
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8009174:	78fa      	ldrb	r2, [r7, #3]
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	440b      	add	r3, r1
 8009182:	3324      	adds	r3, #36	; 0x24
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	78fb      	ldrb	r3, [r7, #3]
 8009188:	4619      	mov	r1, r3
 800918a:	f7fe fc1e 	bl	80079ca <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fd58 	bl	8007c5a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091ba:	2301      	movs	r3, #1
 80091bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	795b      	ldrb	r3, [r3, #5]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d001      	beq.n	80091ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091c6:	f7f7 f94f 	bl	8000468 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80091d0:	7bfa      	ldrb	r2, [r7, #15]
 80091d2:	4611      	mov	r1, r2
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fcfc 	bl	8007bd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe fca4 	bl	8007b2e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fcf7 	bl	8007bf2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7a5b      	ldrb	r3, [r3, #9]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d005      	beq.n	8009218 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800920c:	4b04      	ldr	r3, [pc, #16]	; (8009220 <HAL_PCD_SuspendCallback+0x30>)
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	4a03      	ldr	r2, [pc, #12]	; (8009220 <HAL_PCD_SuspendCallback+0x30>)
 8009212:	f043 0306 	orr.w	r3, r3, #6
 8009216:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	e000ed00 	.word	0xe000ed00

08009224 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	7a5b      	ldrb	r3, [r3, #9]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d007      	beq.n	8009244 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009234:	4b08      	ldr	r3, [pc, #32]	; (8009258 <HAL_PCD_ResumeCallback+0x34>)
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	4a07      	ldr	r2, [pc, #28]	; (8009258 <HAL_PCD_ResumeCallback+0x34>)
 800923a:	f023 0306 	bic.w	r3, r3, #6
 800923e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009240:	f000 f9fa 	bl	8009638 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fced 	bl	8007c2a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	e000ed00 	.word	0xe000ed00

0800925c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009264:	4a2c      	ldr	r2, [pc, #176]	; (8009318 <USBD_LL_Init+0xbc>)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a2a      	ldr	r2, [pc, #168]	; (8009318 <USBD_LL_Init+0xbc>)
 8009270:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009274:	f7f9 fc12 	bl	8002a9c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009278:	4b27      	ldr	r3, [pc, #156]	; (8009318 <USBD_LL_Init+0xbc>)
 800927a:	4a28      	ldr	r2, [pc, #160]	; (800931c <USBD_LL_Init+0xc0>)
 800927c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800927e:	4b26      	ldr	r3, [pc, #152]	; (8009318 <USBD_LL_Init+0xbc>)
 8009280:	2208      	movs	r2, #8
 8009282:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009284:	4b24      	ldr	r3, [pc, #144]	; (8009318 <USBD_LL_Init+0xbc>)
 8009286:	2202      	movs	r2, #2
 8009288:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800928a:	4b23      	ldr	r3, [pc, #140]	; (8009318 <USBD_LL_Init+0xbc>)
 800928c:	2202      	movs	r2, #2
 800928e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009290:	4b21      	ldr	r3, [pc, #132]	; (8009318 <USBD_LL_Init+0xbc>)
 8009292:	2200      	movs	r2, #0
 8009294:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009296:	4b20      	ldr	r3, [pc, #128]	; (8009318 <USBD_LL_Init+0xbc>)
 8009298:	2200      	movs	r2, #0
 800929a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800929c:	4b1e      	ldr	r3, [pc, #120]	; (8009318 <USBD_LL_Init+0xbc>)
 800929e:	2200      	movs	r2, #0
 80092a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092a2:	4b1d      	ldr	r3, [pc, #116]	; (8009318 <USBD_LL_Init+0xbc>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092a8:	481b      	ldr	r0, [pc, #108]	; (8009318 <USBD_LL_Init+0xbc>)
 80092aa:	f7f7 fea4 	bl	8000ff6 <HAL_PCD_Init>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80092b4:	f7f7 f8d8 	bl	8000468 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092be:	2318      	movs	r3, #24
 80092c0:	2200      	movs	r2, #0
 80092c2:	2100      	movs	r1, #0
 80092c4:	f7f9 fb5e 	bl	8002984 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092ce:	2358      	movs	r3, #88	; 0x58
 80092d0:	2200      	movs	r2, #0
 80092d2:	2180      	movs	r1, #128	; 0x80
 80092d4:	f7f9 fb56 	bl	8002984 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092de:	23c0      	movs	r3, #192	; 0xc0
 80092e0:	2200      	movs	r2, #0
 80092e2:	2181      	movs	r1, #129	; 0x81
 80092e4:	f7f9 fb4e 	bl	8002984 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80092f2:	2200      	movs	r2, #0
 80092f4:	2101      	movs	r1, #1
 80092f6:	f7f9 fb45 	bl	8002984 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009304:	2200      	movs	r2, #0
 8009306:	2182      	movs	r1, #130	; 0x82
 8009308:	f7f9 fb3c 	bl	8002984 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	2000165c 	.word	0x2000165c
 800931c:	40006800 	.word	0x40006800

08009320 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009336:	4618      	mov	r0, r3
 8009338:	f7f7 ff2b 	bl	8001192 <HAL_PCD_Start>
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 f97e 	bl	8009644 <USBD_Get_USB_Status>
 8009348:	4603      	mov	r3, r0
 800934a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800934c:	7bbb      	ldrb	r3, [r7, #14]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	4608      	mov	r0, r1
 8009360:	4611      	mov	r1, r2
 8009362:	461a      	mov	r2, r3
 8009364:	4603      	mov	r3, r0
 8009366:	70fb      	strb	r3, [r7, #3]
 8009368:	460b      	mov	r3, r1
 800936a:	70bb      	strb	r3, [r7, #2]
 800936c:	4613      	mov	r3, r2
 800936e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800937e:	78bb      	ldrb	r3, [r7, #2]
 8009380:	883a      	ldrh	r2, [r7, #0]
 8009382:	78f9      	ldrb	r1, [r7, #3]
 8009384:	f7f8 f872 	bl	800146c <HAL_PCD_EP_Open>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 f958 	bl	8009644 <USBD_Get_USB_Status>
 8009394:	4603      	mov	r3, r0
 8009396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009398:	7bbb      	ldrb	r3, [r7, #14]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093bc:	78fa      	ldrb	r2, [r7, #3]
 80093be:	4611      	mov	r1, r2
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7f8 f8b0 	bl	8001526 <HAL_PCD_EP_Close>
 80093c6:	4603      	mov	r3, r0
 80093c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f939 	bl	8009644 <USBD_Get_USB_Status>
 80093d2:	4603      	mov	r3, r0
 80093d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	4611      	mov	r1, r2
 80093fe:	4618      	mov	r0, r3
 8009400:	f7f8 f959 	bl	80016b6 <HAL_PCD_EP_SetStall>
 8009404:	4603      	mov	r3, r0
 8009406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	4618      	mov	r0, r3
 800940c:	f000 f91a 	bl	8009644 <USBD_Get_USB_Status>
 8009410:	4603      	mov	r3, r0
 8009412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009414:	7bbb      	ldrb	r3, [r7, #14]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	460b      	mov	r3, r1
 8009428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009438:	78fa      	ldrb	r2, [r7, #3]
 800943a:	4611      	mov	r1, r2
 800943c:	4618      	mov	r0, r3
 800943e:	f7f8 f98c 	bl	800175a <HAL_PCD_EP_ClrStall>
 8009442:	4603      	mov	r3, r0
 8009444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 f8fb 	bl	8009644 <USBD_Get_USB_Status>
 800944e:	4603      	mov	r3, r0
 8009450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009452:	7bbb      	ldrb	r3, [r7, #14]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800946e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009474:	2b00      	cmp	r3, #0
 8009476:	da0b      	bge.n	8009490 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	440b      	add	r3, r1
 800948a:	3312      	adds	r3, #18
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	e00b      	b.n	80094a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009496:	68f9      	ldr	r1, [r7, #12]
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	440b      	add	r3, r1
 80094a2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80094a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094ce:	78fa      	ldrb	r2, [r7, #3]
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7f7 ffa6 	bl	8001424 <HAL_PCD_SetAddress>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 f8b0 	bl	8009644 <USBD_Get_USB_Status>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b086      	sub	sp, #24
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	603b      	str	r3, [r7, #0]
 80094fe:	460b      	mov	r3, r1
 8009500:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009510:	7af9      	ldrb	r1, [r7, #11]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	f7f8 f897 	bl	8001648 <HAL_PCD_EP_Transmit>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800951e:	7dfb      	ldrb	r3, [r7, #23]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 f88f 	bl	8009644 <USBD_Get_USB_Status>
 8009526:	4603      	mov	r3, r0
 8009528:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800952a:	7dbb      	ldrb	r3, [r7, #22]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	607a      	str	r2, [r7, #4]
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	460b      	mov	r3, r1
 8009542:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009552:	7af9      	ldrb	r1, [r7, #11]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	f7f8 f82d 	bl	80015b6 <HAL_PCD_EP_Receive>
 800955c:	4603      	mov	r3, r0
 800955e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	4618      	mov	r0, r3
 8009564:	f000 f86e 	bl	8009644 <USBD_Get_USB_Status>
 8009568:	4603      	mov	r3, r0
 800956a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800956c:	7dbb      	ldrb	r3, [r7, #22]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	460b      	mov	r3, r1
 8009580:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f7f8 f843 	bl	8001618 <HAL_PCD_EP_GetRxCount>
 8009592:	4603      	mov	r3, r0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <HAL_PCDEx_LPM_Callback+0x18>
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d013      	beq.n	80095da <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80095b2:	e023      	b.n	80095fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	7a5b      	ldrb	r3, [r3, #9]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80095bc:	f000 f83c 	bl	8009638 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095c0:	4b10      	ldr	r3, [pc, #64]	; (8009604 <HAL_PCDEx_LPM_Callback+0x68>)
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	4a0f      	ldr	r2, [pc, #60]	; (8009604 <HAL_PCDEx_LPM_Callback+0x68>)
 80095c6:	f023 0306 	bic.w	r3, r3, #6
 80095ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe fb29 	bl	8007c2a <USBD_LL_Resume>
    break;
 80095d8:	e010      	b.n	80095fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fb06 	bl	8007bf2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	7a5b      	ldrb	r3, [r3, #9]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d005      	beq.n	80095fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095ee:	4b05      	ldr	r3, [pc, #20]	; (8009604 <HAL_PCDEx_LPM_Callback+0x68>)
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	4a04      	ldr	r2, [pc, #16]	; (8009604 <HAL_PCDEx_LPM_Callback+0x68>)
 80095f4:	f043 0306 	orr.w	r3, r3, #6
 80095f8:	6113      	str	r3, [r2, #16]
    break;
 80095fa:	bf00      	nop
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	e000ed00 	.word	0xe000ed00

08009608 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009610:	4b03      	ldr	r3, [pc, #12]	; (8009620 <USBD_static_malloc+0x18>)
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20001938 	.word	0x20001938

08009624 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800963c:	f7f6 fddc 	bl	80001f8 <SystemClock_Config>
}
 8009640:	bf00      	nop
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	2b03      	cmp	r3, #3
 8009656:	d817      	bhi.n	8009688 <USBD_Get_USB_Status+0x44>
 8009658:	a201      	add	r2, pc, #4	; (adr r2, 8009660 <USBD_Get_USB_Status+0x1c>)
 800965a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965e:	bf00      	nop
 8009660:	08009671 	.word	0x08009671
 8009664:	08009677 	.word	0x08009677
 8009668:	0800967d 	.word	0x0800967d
 800966c:	08009683 	.word	0x08009683
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
    break;
 8009674:	e00b      	b.n	800968e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009676:	2303      	movs	r3, #3
 8009678:	73fb      	strb	r3, [r7, #15]
    break;
 800967a:	e008      	b.n	800968e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800967c:	2301      	movs	r3, #1
 800967e:	73fb      	strb	r3, [r7, #15]
    break;
 8009680:	e005      	b.n	800968e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009682:	2303      	movs	r3, #3
 8009684:	73fb      	strb	r3, [r7, #15]
    break;
 8009686:	e002      	b.n	800968e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009688:	2303      	movs	r3, #3
 800968a:	73fb      	strb	r3, [r7, #15]
    break;
 800968c:	bf00      	nop
  }
  return usb_status;
 800968e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <memset>:
 800969c:	4402      	add	r2, r0
 800969e:	4603      	mov	r3, r0
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d100      	bne.n	80096a6 <memset+0xa>
 80096a4:	4770      	bx	lr
 80096a6:	f803 1b01 	strb.w	r1, [r3], #1
 80096aa:	e7f9      	b.n	80096a0 <memset+0x4>

080096ac <__libc_init_array>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	4d0d      	ldr	r5, [pc, #52]	; (80096e4 <__libc_init_array+0x38>)
 80096b0:	4c0d      	ldr	r4, [pc, #52]	; (80096e8 <__libc_init_array+0x3c>)
 80096b2:	1b64      	subs	r4, r4, r5
 80096b4:	10a4      	asrs	r4, r4, #2
 80096b6:	2600      	movs	r6, #0
 80096b8:	42a6      	cmp	r6, r4
 80096ba:	d109      	bne.n	80096d0 <__libc_init_array+0x24>
 80096bc:	4d0b      	ldr	r5, [pc, #44]	; (80096ec <__libc_init_array+0x40>)
 80096be:	4c0c      	ldr	r4, [pc, #48]	; (80096f0 <__libc_init_array+0x44>)
 80096c0:	f000 f818 	bl	80096f4 <_init>
 80096c4:	1b64      	subs	r4, r4, r5
 80096c6:	10a4      	asrs	r4, r4, #2
 80096c8:	2600      	movs	r6, #0
 80096ca:	42a6      	cmp	r6, r4
 80096cc:	d105      	bne.n	80096da <__libc_init_array+0x2e>
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
 80096d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d4:	4798      	blx	r3
 80096d6:	3601      	adds	r6, #1
 80096d8:	e7ee      	b.n	80096b8 <__libc_init_array+0xc>
 80096da:	f855 3b04 	ldr.w	r3, [r5], #4
 80096de:	4798      	blx	r3
 80096e0:	3601      	adds	r6, #1
 80096e2:	e7f2      	b.n	80096ca <__libc_init_array+0x1e>
 80096e4:	0800980c 	.word	0x0800980c
 80096e8:	0800980c 	.word	0x0800980c
 80096ec:	0800980c 	.word	0x0800980c
 80096f0:	08009810 	.word	0x08009810

080096f4 <_init>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr

08009700 <_fini>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr
