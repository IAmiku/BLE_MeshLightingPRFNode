
Occ_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080095d8  080095d8  000195d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000100  20000008  080095e0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001a50  20000108  080096e0  00020108  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001b58  080096e0  00021b58  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 10 .debug_info   000165f0  00000000  00000000  0002017b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a38  00000000  00000000  0003676b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001820  00000000  00000000  0003a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001221  00000000  00000000  0003b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023d75  00000000  00000000  0003cbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018520  00000000  00000000  0006095e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d71f6  00000000  00000000  00078e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000634c  00000000  00000000  00150074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  001563c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000108 	.word	0x20000108
 8000158:	00000000 	.word	0x00000000
 800015c:	080094cc 	.word	0x080094cc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000010c 	.word	0x2000010c
 8000178:	080094cc 	.word	0x080094cc

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b2:	f000 fa57 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b6:	f000 f809 	bl	80001cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001ba:	f000 f875 	bl	80002a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001be:	f000 f8d1 	bl	8000364 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80001c2:	f008 fc1d 	bl	8008a00 <MX_USB_Device_Init>
  MX_I2C1_Init();
 80001c6:	f000 f88d 	bl	80002e4 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ca:	e7fe      	b.n	80001ca <main+0x1c>

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b09a      	sub	sp, #104	; 0x68
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0320 	add.w	r3, r7, #32
 80001d6:	2248      	movs	r2, #72	; 0x48
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f009 f94a 	bl	8009474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]
 80001ee:	615a      	str	r2, [r3, #20]
 80001f0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001f2:	4b2c      	ldr	r3, [pc, #176]	; (80002a4 <SystemClock_Config+0xd8>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001fa:	4a2a      	ldr	r2, [pc, #168]	; (80002a4 <SystemClock_Config+0xd8>)
 80001fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000200:	6013      	str	r3, [r2, #0]
 8000202:	4b28      	ldr	r3, [pc, #160]	; (80002a4 <SystemClock_Config+0xd8>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800020a:	603b      	str	r3, [r7, #0]
 800020c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800020e:	2327      	movs	r3, #39	; 0x27
 8000210:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000216:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000218:	2300      	movs	r3, #0
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000226:	2340      	movs	r3, #64	; 0x40
 8000228:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800022a:	2300      	movs	r3, #0
 800022c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800022e:	2360      	movs	r3, #96	; 0x60
 8000230:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000236:	2301      	movs	r3, #1
 8000238:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 800023e:	2320      	movs	r3, #32
 8000240:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000246:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000248:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800024c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800024e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000252:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0320 	add.w	r3, r7, #32
 8000258:	4618      	mov	r0, r3
 800025a:	f002 ff13 	bl	8003084 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000264:	f000 f8ba 	bl	80003dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000268:	236f      	movs	r3, #111	; 0x6f
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2303      	movs	r3, #3
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2103      	movs	r1, #3
 8000288:	4618      	mov	r0, r3
 800028a:	f003 fa6f 	bl	800376c <HAL_RCC_ClockConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000294:	f000 f8a2 	bl	80003dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000298:	f004 f800 	bl	800429c <HAL_RCCEx_EnableMSIPLLMode>
}
 800029c:	bf00      	nop
 800029e:	3768      	adds	r7, #104	; 0x68
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	58000400 	.word	0x58000400

080002a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b094      	sub	sp, #80	; 0x50
 80002ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2250      	movs	r2, #80	; 0x50
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f009 f8dd 	bl	8009474 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002c0:	2300      	movs	r3, #0
 80002c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80002c4:	2310      	movs	r3, #16
 80002c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002c8:	463b      	mov	r3, r7
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 fe70 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80002d6:	f000 f881 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80002da:	bf00      	nop
 80002dc:	3750      	adds	r7, #80	; 0x50
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_I2C1_Init+0x74>)
 80002ea:	4a1c      	ldr	r2, [pc, #112]	; (800035c <MX_I2C1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_I2C1_Init+0x74>)
 80002f0:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <MX_I2C1_Init+0x7c>)
 80002f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_I2C1_Init+0x74>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031e:	480e      	ldr	r0, [pc, #56]	; (8000358 <MX_I2C1_Init+0x74>)
 8000320:	f000 fcbe 	bl	8000ca0 <HAL_I2C_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800032a:	f000 f857 	bl	80003dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800032e:	2100      	movs	r1, #0
 8000330:	4809      	ldr	r0, [pc, #36]	; (8000358 <MX_I2C1_Init+0x74>)
 8000332:	f000 fd50 	bl	8000dd6 <HAL_I2CEx_ConfigAnalogFilter>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800033c:	f000 f84e 	bl	80003dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000340:	2100      	movs	r1, #0
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_I2C1_Init+0x74>)
 8000344:	f000 fd92 	bl	8000e6c <HAL_I2CEx_ConfigDigitalFilter>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800034e:	f000 f845 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000124 	.word	0x20000124
 800035c:	40005400 	.word	0x40005400
 8000360:	10707dbc 	.word	0x10707dbc

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	2001      	movs	r0, #1
 800037a:	f7ff feff 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037e:	2002      	movs	r0, #2
 8000380:	f7ff fefc 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_ENABLE_GPIO_Port, LDO_ENABLE_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	2108      	movs	r1, #8
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f000 fc70 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2120      	movs	r1, #32
 8000394:	4810      	ldr	r0, [pc, #64]	; (80003d8 <MX_GPIO_Init+0x74>)
 8000396:	f000 fc6b 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LDO_ENABLE_Pin */
  GPIO_InitStruct.Pin = LDO_ENABLE_Pin;
 800039a:	2308      	movs	r3, #8
 800039c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LDO_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b2:	f000 faed 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003b6:	2320      	movs	r3, #32
 80003b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	4803      	ldr	r0, [pc, #12]	; (80003d8 <MX_GPIO_Init+0x74>)
 80003cc:	f000 fae0 	bl	8000990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	48000400 	.word	0x48000400

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <Error_Handler+0x8>

080003e6 <LL_AHB2_GRP1_EnableClock>:
{
 80003e6:	b480      	push	{r7}
 80003e8:	b085      	sub	sp, #20
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4013      	ands	r3, r2
 8000408:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800040a:	68fb      	ldr	r3, [r7, #12]
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4313      	orrs	r3, r2
 800042e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4013      	ands	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800043c:	68fb      	ldr	r3, [r7, #12]
}
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b09c      	sub	sp, #112	; 0x70
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
 800046e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000470:	f107 030c 	add.w	r3, r7, #12
 8000474:	2250      	movs	r2, #80	; 0x50
 8000476:	2100      	movs	r1, #0
 8000478:	4618      	mov	r0, r3
 800047a:	f008 fffb 	bl	8009474 <memset>
  if(hi2c->Instance==I2C1)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a16      	ldr	r2, [pc, #88]	; (80004dc <HAL_I2C_MspInit+0x84>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d125      	bne.n	80004d4 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000488:	2304      	movs	r3, #4
 800048a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800048c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000492:	f107 030c 	add.w	r3, r7, #12
 8000496:	4618      	mov	r0, r3
 8000498:	f003 fd8a 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80004a2:	f7ff ff9b 	bl	80003dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	2002      	movs	r0, #2
 80004a8:	f7ff ff9d 	bl	80003e6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004ac:	23c0      	movs	r3, #192	; 0xc0
 80004ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b0:	2312      	movs	r3, #18
 80004b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2300      	movs	r3, #0
 80004ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004bc:	2304      	movs	r3, #4
 80004be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004c4:	4619      	mov	r1, r3
 80004c6:	4806      	ldr	r0, [pc, #24]	; (80004e0 <HAL_I2C_MspInit+0x88>)
 80004c8:	f000 fa62 	bl	8000990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004d0:	f7ff ffa2 	bl	8000418 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004d4:	bf00      	nop
 80004d6:	3770      	adds	r7, #112	; 0x70
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40005400 	.word	0x40005400
 80004e0:	48000400 	.word	0x48000400

080004e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e8:	e7fe      	b.n	80004e8 <NMI_Handler+0x4>

080004ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <HardFault_Handler+0x4>

080004f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <MemManage_Handler+0x4>

080004f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <BusFault_Handler+0x4>

080004fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <UsageFault_Handler+0x4>

08000502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000530:	f000 f8f2 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <USB_LP_IRQHandler+0x10>)
 800053e:	f000 fdd1 	bl	80010e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000165c 	.word	0x2000165c

0800054c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <SystemInit+0x98>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000556:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <SystemInit+0x98>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000574:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000578:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800057a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <SystemInit+0x9c>)
 8000586:	4013      	ands	r3, r2
 8000588:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800058a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800058e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000596:	f023 0305 	bic.w	r3, r3, #5
 800059a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005aa:	f023 0301 	bic.w	r3, r3, #1
 80005ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b6:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <SystemInit+0xa0>)
 80005b8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80005ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005be:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <SystemInit+0xa0>)
 80005c0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00
 80005e8:	faf6fefb 	.word	0xfaf6fefb
 80005ec:	22041000 	.word	0x22041000

080005f0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80005f0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f4:	3304      	adds	r3, #4

080005f6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80005fa:	d3f9      	bcc.n	80005f0 <CopyDataInit>
  bx lr
 80005fc:	4770      	bx	lr

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80005fe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000600:	3004      	adds	r0, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000602:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>
  bx lr
 8000606:	4770      	bx	lr

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f7ff ff9e 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <LoopForever+0x6>)
 8000612:	490c      	ldr	r1, [pc, #48]	; (8000644 <LoopForever+0xa>)
 8000614:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <LoopForever+0xe>)
 8000616:	2300      	movs	r3, #0
 8000618:	f7ff ffed 	bl	80005f6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <LoopForever+0x12>)
 800061e:	490c      	ldr	r1, [pc, #48]	; (8000650 <LoopForever+0x16>)
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <LoopForever+0x1a>)
 8000622:	2300      	movs	r3, #0
 8000624:	f7ff ffe7 	bl	80005f6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <LoopForever+0x1e>)
 800062a:	490c      	ldr	r1, [pc, #48]	; (800065c <LoopForever+0x22>)
 800062c:	2300      	movs	r3, #0
 800062e:	f7ff ffe8 	bl	8000602 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000632:	f008 ff27 	bl	8009484 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000636:	f7ff fdba 	bl	80001ae <main>

0800063a <LoopForever>:

LoopForever:
  b LoopForever
 800063a:	e7fe      	b.n	800063a <LoopForever>
  ldr   r0, =_estack
 800063c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000640:	20000008 	.word	0x20000008
 8000644:	20000108 	.word	0x20000108
 8000648:	080095e0 	.word	0x080095e0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800064c:	20030000 	.word	0x20030000
 8000650:	20030000 	.word	0x20030000
 8000654:	080096e0 	.word	0x080096e0
  INIT_BSS _sbss, _ebss
 8000658:	20000108 	.word	0x20000108
 800065c:	20001b58 	.word	0x20001b58

08000660 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_Init+0x3c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <HAL_Init+0x3c>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067a:	2003      	movs	r0, #3
 800067c:	f000 f948 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000680:	200f      	movs	r0, #15
 8000682:	f000 f80f 	bl	80006a4 <HAL_InitTick>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800068c:	2301      	movs	r3, #1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	e001      	b.n	8000696 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000692:	f7ff feda 	bl	800044a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000696:	79fb      	ldrb	r3, [r7, #7]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	58004000 	.word	0x58004000

080006a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <HAL_InitTick+0x6c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d024      	beq.n	8000702 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006b8:	f003 fa06 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <HAL_InitTick+0x6c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4619      	mov	r1, r3
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80006cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f950 	bl	8000976 <HAL_SYSTICK_Config>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10f      	bne.n	80006fc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d809      	bhi.n	80006f6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e2:	2200      	movs	r2, #0
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ea:	f000 f91c 	bl	8000926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ee:	4a09      	ldr	r2, [pc, #36]	; (8000714 <HAL_InitTick+0x70>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	e007      	b.n	8000706 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	e004      	b.n	8000706 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e001      	b.n	8000706 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000010 	.word	0x20000010
 8000714:	2000000c 	.word	0x2000000c

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_IncTick+0x20>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_IncTick+0x24>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_IncTick+0x24>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000010 	.word	0x20000010
 800073c:	20000178 	.word	0x20000178

08000740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <HAL_GetTick+0x14>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000178 	.word	0x20000178

08000758 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_GetTickPrio+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	2000000c 	.word	0x2000000c

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <__NVIC_EnableIRQ+0x38>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008dc:	d301      	bcc.n	80008e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2301      	movs	r3, #1
 80008e0:	e00f      	b.n	8000902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SysTick_Config+0x40>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ea:	210f      	movs	r1, #15
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f7ff ff8e 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SysTick_Config+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <SysTick_Config+0x40>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff29 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff40 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff90 	bl	8000864 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5f 	bl	8000810 <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff33 	bl	80007d4 <__NVIC_EnableIRQ>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffa4 	bl	80008cc <SysTick_Config>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e14c      	b.n	8000c3a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 813e 	beq.w	8000c34 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 0303 	and.w	r3, r3, #3
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d005      	beq.n	80009d0 <HAL_GPIO_Init+0x40>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d130      	bne.n	8000a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	2203      	movs	r2, #3
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68da      	ldr	r2, [r3, #12]
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a06:	2201      	movs	r2, #1
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	091b      	lsrs	r3, r3, #4
 8000a1c:	f003 0201 	and.w	r2, r3, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d017      	beq.n	8000a6e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	2203      	movs	r2, #3
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d123      	bne.n	8000ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	08da      	lsrs	r2, r3, #3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3208      	adds	r2, #8
 8000a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	220f      	movs	r2, #15
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	691a      	ldr	r2, [r3, #16]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	08da      	lsrs	r2, r3, #3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3208      	adds	r2, #8
 8000abc:	6939      	ldr	r1, [r7, #16]
 8000abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0203 	and.w	r2, r3, #3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 8098 	beq.w	8000c34 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b04:	4a54      	ldr	r2, [pc, #336]	; (8000c58 <HAL_GPIO_Init+0x2c8>)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b2e:	d019      	beq.n	8000b64 <HAL_GPIO_Init+0x1d4>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a4a      	ldr	r2, [pc, #296]	; (8000c5c <HAL_GPIO_Init+0x2cc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d013      	beq.n	8000b60 <HAL_GPIO_Init+0x1d0>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a49      	ldr	r2, [pc, #292]	; (8000c60 <HAL_GPIO_Init+0x2d0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d00d      	beq.n	8000b5c <HAL_GPIO_Init+0x1cc>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a48      	ldr	r2, [pc, #288]	; (8000c64 <HAL_GPIO_Init+0x2d4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d007      	beq.n	8000b58 <HAL_GPIO_Init+0x1c8>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a47      	ldr	r2, [pc, #284]	; (8000c68 <HAL_GPIO_Init+0x2d8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d101      	bne.n	8000b54 <HAL_GPIO_Init+0x1c4>
 8000b50:	2304      	movs	r3, #4
 8000b52:	e008      	b.n	8000b66 <HAL_GPIO_Init+0x1d6>
 8000b54:	2307      	movs	r3, #7
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x1d6>
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e004      	b.n	8000b66 <HAL_GPIO_Init+0x1d6>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x1d6>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <HAL_GPIO_Init+0x1d6>
 8000b64:	2300      	movs	r3, #0
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	f002 0203 	and.w	r2, r2, #3
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b76:	4938      	ldr	r1, [pc, #224]	; (8000c58 <HAL_GPIO_Init+0x2c8>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b84:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba8:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bd2:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bfe:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c2c:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_GPIO_Init+0x2dc>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3301      	adds	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	fa22 f303 	lsr.w	r3, r2, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f47f aeab 	bne.w	80009a0 <HAL_GPIO_Init+0x10>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	371c      	adds	r7, #28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	48000800 	.word	0x48000800
 8000c64:	48000c00 	.word	0x48000c00
 8000c68:	48001000 	.word	0x48001000
 8000c6c:	58000800 	.word	0x58000800

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e08d      	b.n	8000dce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d106      	bne.n	8000ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fbc6 	bl	8000458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2224      	movs	r2, #36	; 0x24
 8000cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0201 	bic.w	r2, r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cf0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d107      	bne.n	8000d1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	e006      	b.n	8000d28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d108      	bne.n	8000d42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	e007      	b.n	8000d52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6812      	ldr	r2, [r2, #0]
 8000d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691a      	ldr	r2, [r3, #16]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69d9      	ldr	r1, [r3, #28]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a1a      	ldr	r2, [r3, #32]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0201 	orr.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2220      	movs	r2, #32
 8000dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b20      	cmp	r3, #32
 8000dea:	d138      	bne.n	8000e5e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d101      	bne.n	8000dfa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e032      	b.n	8000e60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2224      	movs	r2, #36	; 0x24
 8000e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 0201 	bic.w	r2, r2, #1
 8000e18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e28:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0201 	orr.w	r2, r2, #1
 8000e48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000e5e:	2302      	movs	r3, #2
  }
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b20      	cmp	r3, #32
 8000e80:	d139      	bne.n	8000ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d101      	bne.n	8000e90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e033      	b.n	8000ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2224      	movs	r2, #36	; 0x24
 8000e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ebe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f042 0201 	orr.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000ef6:	2302      	movs	r3, #2
  }
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e0c0      	b.n	8001098 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f007 ff7a 	bl	8008e24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2203      	movs	r2, #3
 8000f34:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fadb 	bl	80044f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e03e      	b.n	8000fc6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3311      	adds	r3, #17
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	3310      	adds	r3, #16
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3313      	adds	r3, #19
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3320      	adds	r3, #32
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3324      	adds	r3, #36	; 0x24
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d3bb      	bcc.n	8000f48 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e044      	b.n	8001060 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f203 1351 	addw	r3, r3, #337	; 0x151
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	3301      	adds	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	429a      	cmp	r2, r3
 8001068:	d3b5      	bcc.n	8000fd6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3304      	adds	r3, #4
 8001072:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001076:	f003 fa5a 	bl	800452e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7a9b      	ldrb	r3, [r3, #10]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f001 fc41 	bl	8002918 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <HAL_PCD_Start+0x16>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e012      	b.n	80010dc <HAL_PCD_Start+0x3c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 fa01 	bl	80044ca <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f005 fcc2 	bl	8006a56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 fcc7 	bl	8006a84 <USB_ReadInterrupts>
 80010f6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fb04 	bl	8001710 <PCD_EP_ISR_Handler>

    return;
 8001108:	e110      	b.n	800132c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001126:	b292      	uxth	r2, r2
 8001128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f007 ff2c 	bl	8008f8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001132:	2100      	movs	r1, #0
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f8fc 	bl	8001332 <HAL_PCD_SetAddress>

    return;
 800113a:	e0f7      	b.n	800132c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00c      	beq.n	8001160 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001158:	b292      	uxth	r2, r2
 800115a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800115e:	e0e5      	b.n	800132c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00c      	beq.n	8001184 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800117c:	b292      	uxth	r2, r2
 800117e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001182:	e0d3      	b.n	800132c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d034      	beq.n	80011f8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001196:	b29a      	uxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0204 	bic.w	r2, r2, #4
 80011a0:	b292      	uxth	r2, r2
 80011a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0208 	bic.w	r2, r2, #8
 80011b8:	b292      	uxth	r2, r2
 80011ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d107      	bne.n	80011d8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80011d0:	2100      	movs	r1, #0
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f008 f8ce 	bl	8009374 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f007 ff0f 	bl	8008ffc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011f0:	b292      	uxth	r2, r2
 80011f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011f6:	e099      	b.n	800132c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d027      	beq.n	8001252 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800120a:	b29a      	uxth	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0208 	orr.w	r2, r2, #8
 8001214:	b292      	uxth	r2, r2
 8001216:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001222:	b29a      	uxth	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800122c:	b292      	uxth	r2, r2
 800122e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0204 	orr.w	r2, r2, #4
 8001244:	b292      	uxth	r2, r2
 8001246:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f007 febc 	bl	8008fc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001250:	e06c      	b.n	800132c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001258:	2b00      	cmp	r3, #0
 800125a:	d040      	beq.n	80012de <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001264:	b29a      	uxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800126e:	b292      	uxth	r2, r2
 8001270:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d12b      	bne.n	80012d6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0204 	orr.w	r2, r2, #4
 8001290:	b292      	uxth	r2, r2
 8001292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0208 	orr.w	r2, r2, #8
 80012a8:	b292      	uxth	r2, r2
 80012aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80012be:	b29b      	uxth	r3, r3
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80012cc:	2101      	movs	r1, #1
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f008 f850 	bl	8009374 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80012d4:	e02a      	b.n	800132c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f007 fe76 	bl	8008fc8 <HAL_PCD_SuspendCallback>
    return;
 80012dc:	e026      	b.n	800132c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00f      	beq.n	8001308 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012fa:	b292      	uxth	r2, r2
 80012fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f007 fe34 	bl	8008f6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001306:	e011      	b.n	800132c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00c      	beq.n	800132c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800131a:	b29a      	uxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001324:	b292      	uxth	r2, r2
 8001326:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800132a:	bf00      	nop
  }
}
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_PCD_SetAddress+0x1a>
 8001348:	2302      	movs	r3, #2
 800134a:	e012      	b.n	8001372 <HAL_PCD_SetAddress+0x40>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	78fa      	ldrb	r2, [r7, #3]
 8001358:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fb63 	bl	8006a2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	4608      	mov	r0, r1
 8001384:	4611      	mov	r1, r2
 8001386:	461a      	mov	r2, r3
 8001388:	4603      	mov	r3, r0
 800138a:	70fb      	strb	r3, [r7, #3]
 800138c:	460b      	mov	r3, r1
 800138e:	803b      	strh	r3, [r7, #0]
 8001390:	4613      	mov	r3, r2
 8001392:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800139c:	2b00      	cmp	r3, #0
 800139e:	da0e      	bge.n	80013be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	f003 0207 	and.w	r2, r3, #7
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	3310      	adds	r3, #16
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2201      	movs	r2, #1
 80013ba:	705a      	strb	r2, [r3, #1]
 80013bc:	e00e      	b.n	80013dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f003 0207 	and.w	r2, r3, #7
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013e8:	883a      	ldrh	r2, [r7, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	78ba      	ldrb	r2, [r7, #2]
 80013f2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013f4:	78bb      	ldrb	r3, [r7, #2]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d102      	bne.n	8001400 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_PCD_EP_Open+0x94>
 800140a:	2302      	movs	r3, #2
 800140c:	e00e      	b.n	800142c <HAL_PCD_EP_Open+0xb2>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68f9      	ldr	r1, [r7, #12]
 800141c:	4618      	mov	r0, r3
 800141e:	f003 f8a5 	bl	800456c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800142a:	7afb      	ldrb	r3, [r7, #11]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001444:	2b00      	cmp	r3, #0
 8001446:	da0e      	bge.n	8001466 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	f003 0207 	and.w	r2, r3, #7
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	3310      	adds	r3, #16
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2201      	movs	r2, #1
 8001462:	705a      	strb	r2, [r3, #1]
 8001464:	e00e      	b.n	8001484 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	f003 0207 	and.w	r2, r3, #7
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	b2da      	uxtb	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_PCD_EP_Close+0x6a>
 800149a:	2302      	movs	r3, #2
 800149c:	e00e      	b.n	80014bc <HAL_PCD_EP_Close+0x88>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68f9      	ldr	r1, [r7, #12]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 fc21 	bl	8004cf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	460b      	mov	r3, r1
 80014d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014d4:	7afb      	ldrb	r3, [r7, #11]
 80014d6:	f003 0207 	and.w	r2, r3, #7
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2200      	movs	r2, #0
 8001502:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001504:	7afb      	ldrb	r3, [r7, #11]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2da      	uxtb	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6979      	ldr	r1, [r7, #20]
 8001516:	4618      	mov	r0, r3
 8001518:	f003 fdd9 	bl	80050ce <USB_EPStartXfer>

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	f003 0207 	and.w	r2, r3, #7
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001548:	681b      	ldr	r3, [r3, #0]
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	460b      	mov	r3, r1
 8001564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001566:	7afb      	ldrb	r3, [r7, #11]
 8001568:	f003 0207 	and.w	r2, r3, #7
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	3310      	adds	r3, #16
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2201      	movs	r2, #1
 80015a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6979      	ldr	r1, [r7, #20]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 fd8a 	bl	80050ce <USB_EPStartXfer>

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	7912      	ldrb	r2, [r2, #4]
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e03e      	b.n	8001660 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da0e      	bge.n	8001608 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	f003 0207 	and.w	r2, r3, #7
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	3310      	adds	r3, #16
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	705a      	strb	r2, [r3, #1]
 8001606:	e00c      	b.n	8001622 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2201      	movs	r2, #1
 8001626:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	b2da      	uxtb	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_PCD_EP_SetStall+0x7e>
 800163e:	2302      	movs	r3, #2
 8001640:	e00e      	b.n	8001660 <HAL_PCD_EP_SetStall+0x9c>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68f9      	ldr	r1, [r7, #12]
 8001650:	4618      	mov	r0, r3
 8001652:	f005 f8ed 	bl	8006830 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	7912      	ldrb	r2, [r2, #4]
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e040      	b.n	8001708 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800168a:	2b00      	cmp	r3, #0
 800168c:	da0e      	bge.n	80016ac <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	f003 0207 	and.w	r2, r3, #7
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	3310      	adds	r3, #16
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	705a      	strb	r2, [r3, #1]
 80016aa:	e00e      	b.n	80016ca <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	f003 0207 	and.w	r2, r3, #7
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_PCD_EP_ClrStall+0x82>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e00e      	b.n	8001708 <HAL_PCD_EP_ClrStall+0xa0>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68f9      	ldr	r1, [r7, #12]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f005 f8ea 	bl	80068d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b096      	sub	sp, #88	; 0x58
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001718:	e3ae      	b.n	8001e78 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001722:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001726:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001734:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001738:	2b00      	cmp	r3, #0
 800173a:	f040 8170 	bne.w	8001a1e <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800173e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	d14d      	bne.n	80017e6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800175a:	81fb      	strh	r3, [r7, #14]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	89fb      	ldrh	r3, [r7, #14]
 8001762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800176a:	b29b      	uxth	r3, r3
 800176c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3310      	adds	r3, #16
 8001772:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800177c:	b29b      	uxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	4413      	add	r3, r2
 800178e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800179a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800179c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	441a      	add	r2, r3
 80017a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017aa:	2100      	movs	r1, #0
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f007 fbc4 	bl	8008f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7b1b      	ldrb	r3, [r3, #12]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 835d 	beq.w	8001e78 <PCD_EP_ISR_Handler+0x768>
 80017be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 8358 	bne.w	8001e78 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7b1b      	ldrb	r3, [r3, #12]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b292      	uxth	r2, r2
 80017da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	731a      	strb	r2, [r3, #12]
 80017e4:	e348      	b.n	8001e78 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80017ec:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80017f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001800:	2b00      	cmp	r3, #0
 8001802:	d032      	beq.n	800186a <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800180c:	b29b      	uxth	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	4413      	add	r3, r2
 800181e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001838:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800183a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800183e:	b29b      	uxth	r3, r3
 8001840:	f005 f972 	bl	8006b28 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	b29a      	uxth	r2, r3
 800184c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001850:	4013      	ands	r3, r2
 8001852:	823b      	strh	r3, [r7, #16]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	8a3a      	ldrh	r2, [r7, #16]
 800185a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800185e:	b292      	uxth	r2, r2
 8001860:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f007 fb3c 	bl	8008ee0 <HAL_PCD_SetupStageCallback>
 8001868:	e306      	b.n	8001e78 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800186a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800186e:	2b00      	cmp	r3, #0
 8001870:	f280 8302 	bge.w	8001e78 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29a      	uxth	r2, r3
 800187c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001880:	4013      	ands	r3, r2
 8001882:	83fb      	strh	r3, [r7, #30]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	8bfa      	ldrh	r2, [r7, #30]
 800188a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800188e:	b292      	uxth	r2, r2
 8001890:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800189a:	b29b      	uxth	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4413      	add	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d019      	beq.n	80018f6 <PCD_EP_ISR_Handler+0x1e6>
 80018c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d015      	beq.n	80018f6 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d0:	6959      	ldr	r1, [r3, #20]
 80018d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018da:	b29b      	uxth	r3, r3
 80018dc:	f005 f924 	bl	8006b28 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80018e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	441a      	add	r2, r3
 80018ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80018ee:	2100      	movs	r1, #0
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f007 fb07 	bl	8008f04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001900:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 82b5 	bne.w	8001e78 <PCD_EP_ISR_Handler+0x768>
 800190e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001912:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001916:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800191a:	f000 82ad 	beq.w	8001e78 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800192c:	b29b      	uxth	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	4413      	add	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001948:	b29a      	uxth	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	801a      	strh	r2, [r3, #0]
 800194e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	2b3e      	cmp	r3, #62	; 0x3e
 8001954:	d91d      	bls.n	8001992 <PCD_EP_ISR_Handler+0x282>
 8001956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
 800195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <PCD_EP_ISR_Handler+0x260>
 800196a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196c:	3b01      	subs	r3, #1
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29a      	uxth	r2, r3
 8001976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001978:	b29b      	uxth	r3, r3
 800197a:	029b      	lsls	r3, r3, #10
 800197c:	b29b      	uxth	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	b29b      	uxth	r3, r3
 8001982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800198a:	b29a      	uxth	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	801a      	strh	r2, [r3, #0]
 8001990:	e026      	b.n	80019e0 <PCD_EP_ISR_Handler+0x2d0>
 8001992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10a      	bne.n	80019b0 <PCD_EP_ISR_Handler+0x2a0>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	e017      	b.n	80019e0 <PCD_EP_ISR_Handler+0x2d0>
 80019b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	085b      	lsrs	r3, r3, #1
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
 80019b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <PCD_EP_ISR_Handler+0x2ba>
 80019c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c6:	3301      	adds	r3, #1
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	029b      	lsls	r3, r3, #10
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	b29a      	uxth	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f0:	827b      	strh	r3, [r7, #18]
 80019f2:	8a7b      	ldrh	r3, [r7, #18]
 80019f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019f8:	827b      	strh	r3, [r7, #18]
 80019fa:	8a7b      	ldrh	r3, [r7, #18]
 80019fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a00:	827b      	strh	r3, [r7, #18]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	8a7b      	ldrh	r3, [r7, #18]
 8001a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	8013      	strh	r3, [r2, #0]
 8001a1c:	e22c      	b.n	8001e78 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a32:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f280 80f6 	bge.w	8001c28 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a52:	4013      	ands	r3, r2
 8001a54:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a6e:	b292      	uxth	r2, r2
 8001a70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a72:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8a:	7b1b      	ldrb	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d123      	bne.n	8001ad8 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001ab8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 808e 	beq.w	8001bde <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac8:	6959      	ldr	r1, [r3, #20]
 8001aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001acc:	88da      	ldrh	r2, [r3, #6]
 8001ace:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ad2:	f005 f829 	bl	8006b28 <USB_ReadPMA>
 8001ad6:	e082      	b.n	8001bde <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ada:	78db      	ldrb	r3, [r3, #3]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d10a      	bne.n	8001af6 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ae0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f9d3 	bl	8001e94 <HAL_PCD_EP_DB_Receive>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001af4:	e073      	b.n	8001bde <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b10:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	441a      	add	r2, r3
 8001b22:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d022      	beq.n	8001b9a <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b78:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d02c      	beq.n	8001bde <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8a:	6959      	ldr	r1, [r3, #20]
 8001b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8e:	891a      	ldrh	r2, [r3, #8]
 8001b90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b94:	f004 ffc8 	bl	8006b28 <USB_ReadPMA>
 8001b98:	e021      	b.n	8001bde <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bbe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001bc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	6959      	ldr	r1, [r3, #20]
 8001bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd4:	895a      	ldrh	r2, [r3, #10]
 8001bd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bda:	f004 ffa5 	bl	8006b28 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001be6:	441a      	add	r2, r3
 8001be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bf4:	441a      	add	r2, r3
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <PCD_EP_ISR_Handler+0x4fe>
 8001c02:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d206      	bcs.n	8001c1c <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f007 f975 	bl	8008f04 <HAL_PCD_DataOutStageCallback>
 8001c1a:	e005      	b.n	8001c28 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fa53 	bl	80050ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8121 	beq.w	8001e78 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c36:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	3310      	adds	r3, #16
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	441a      	add	r2, r3
 8001c76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c88:	78db      	ldrb	r3, [r3, #3]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f040 80a2 	bne.w	8001dd4 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c98:	7b1b      	ldrb	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8093 	beq.w	8001dc6 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ca0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d046      	beq.n	8001d3a <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cae:	785b      	ldrb	r3, [r3, #1]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d126      	bne.n	8001d02 <PCD_EP_ISR_Handler+0x5f2>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	4413      	add	r3, r2
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	00da      	lsls	r2, r3, #3
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	801a      	strh	r2, [r3, #0]
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	801a      	strh	r2, [r3, #0]
 8001d00:	e061      	b.n	8001dc6 <PCD_EP_ISR_Handler+0x6b6>
 8001d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d04:	785b      	ldrb	r3, [r3, #1]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d15d      	bne.n	8001dc6 <PCD_EP_ISR_Handler+0x6b6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1e:	4413      	add	r3, r2
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	00da      	lsls	r2, r3, #3
 8001d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d34:	2200      	movs	r2, #0
 8001d36:	801a      	strh	r2, [r3, #0]
 8001d38:	e045      	b.n	8001dc6 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d42:	785b      	ldrb	r3, [r3, #1]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d126      	bne.n	8001d96 <PCD_EP_ISR_Handler+0x686>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5c:	4413      	add	r3, r2
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	00da      	lsls	r2, r3, #3
 8001d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d68:	4413      	add	r3, r2
 8001d6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	801a      	strh	r2, [r3, #0]
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	801a      	strh	r2, [r3, #0]
 8001d94:	e017      	b.n	8001dc6 <PCD_EP_ISR_Handler+0x6b6>
 8001d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d98:	785b      	ldrb	r3, [r3, #1]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d113      	bne.n	8001dc6 <PCD_EP_ISR_Handler+0x6b6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dac:	4413      	add	r3, r2
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	00da      	lsls	r2, r3, #3
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db8:	4413      	add	r3, r2
 8001dba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f007 f8b4 	bl	8008f3a <HAL_PCD_DataInStageCallback>
 8001dd2:	e051      	b.n	8001e78 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001dd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d144      	bne.n	8001e6a <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d907      	bls.n	8001e24 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e1c:	1ad2      	subs	r2, r2, r3
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	619a      	str	r2, [r3, #24]
 8001e22:	e002      	b.n	8001e2a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f007 f87e 	bl	8008f3a <HAL_PCD_DataInStageCallback>
 8001e3e:	e01b      	b.n	8001e78 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e48:	441a      	add	r2, r3
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e56:	441a      	add	r2, r3
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 f933 	bl	80050ce <USB_EPStartXfer>
 8001e68:	e006      	b.n	8001e78 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f917 	bl	80020a6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f6ff ac48 	blt.w	800171a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3758      	adds	r7, #88	; 0x58
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d07c      	beq.n	8001fa6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	8b7b      	ldrh	r3, [r7, #26]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d306      	bcc.n	8001eea <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	8b7b      	ldrh	r3, [r7, #26]
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	619a      	str	r2, [r3, #24]
 8001ee8:	e002      	b.n	8001ef0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d123      	bne.n	8001f40 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	833b      	strh	r3, [r7, #24]
 8001f14:	8b3b      	ldrh	r3, [r7, #24]
 8001f16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f1a:	833b      	strh	r3, [r7, #24]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	441a      	add	r2, r3
 8001f2a:	8b3b      	ldrh	r3, [r7, #24]
 8001f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01f      	beq.n	8001f8a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f64:	82fb      	strh	r3, [r7, #22]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	441a      	add	r2, r3
 8001f74:	8afb      	ldrh	r3, [r7, #22]
 8001f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f8a:	8b7b      	ldrh	r3, [r7, #26]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8085 	beq.w	800209c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	6959      	ldr	r1, [r3, #20]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	891a      	ldrh	r2, [r3, #8]
 8001f9e:	8b7b      	ldrh	r3, [r7, #26]
 8001fa0:	f004 fdc2 	bl	8006b28 <USB_ReadPMA>
 8001fa4:	e07a      	b.n	800209c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	8b7b      	ldrh	r3, [r7, #26]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d306      	bcc.n	8001fe4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	8b7b      	ldrh	r3, [r7, #26]
 8001fdc:	1ad2      	subs	r2, r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	619a      	str	r2, [r3, #24]
 8001fe2:	e002      	b.n	8001fea <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d123      	bne.n	800203a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200c:	83fb      	strh	r3, [r7, #30]
 800200e:	8bfb      	ldrh	r3, [r7, #30]
 8002010:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002014:	83fb      	strh	r3, [r7, #30]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	441a      	add	r2, r3
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800202a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800202e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002036:	b29b      	uxth	r3, r3
 8002038:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d11f      	bne.n	8002084 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205e:	83bb      	strh	r3, [r7, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	441a      	add	r2, r3
 800206e:	8bbb      	ldrh	r3, [r7, #28]
 8002070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002080:	b29b      	uxth	r3, r3
 8002082:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002084:	8b7b      	ldrh	r3, [r7, #26]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6959      	ldr	r1, [r3, #20]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	895a      	ldrh	r2, [r3, #10]
 8002096:	8b7b      	ldrh	r3, [r7, #26]
 8002098:	f004 fd46 	bl	8006b28 <USB_ReadPMA>
    }
  }

  return count;
 800209c:	8b7b      	ldrh	r3, [r7, #26]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b0a4      	sub	sp, #144	; 0x90
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	4613      	mov	r3, r2
 80020b2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 81db 	beq.w	8002476 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d907      	bls.n	8002104 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020fc:	1ad2      	subs	r2, r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	619a      	str	r2, [r3, #24]
 8002102:	e002      	b.n	800210a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 80b9 	bne.w	8002286 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d126      	bne.n	800216a <HAL_PCD_EP_DB_Transmit+0xc4>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212a:	b29b      	uxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	4413      	add	r3, r2
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	00da      	lsls	r2, r3, #3
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	4413      	add	r3, r2
 800213e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800214e:	b29a      	uxth	r2, r3
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	801a      	strh	r2, [r3, #0]
 8002154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002162:	b29a      	uxth	r2, r3
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	e01a      	b.n	80021a0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	785b      	ldrb	r3, [r3, #1]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d116      	bne.n	80021a0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002180:	b29b      	uxth	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002186:	4413      	add	r3, r2
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	00da      	lsls	r2, r3, #3
 8002190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002192:	4413      	add	r3, r2
 8002194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219c:	2200      	movs	r2, #0
 800219e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d126      	bne.n	80021fc <HAL_PCD_EP_DB_Transmit+0x156>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	00da      	lsls	r2, r3, #3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	e017      	b.n	800222c <HAL_PCD_EP_DB_Transmit+0x186>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d113      	bne.n	800222c <HAL_PCD_EP_DB_Transmit+0x186>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	4413      	add	r3, r2
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	00da      	lsls	r2, r3, #3
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	4413      	add	r3, r2
 8002220:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2200      	movs	r2, #0
 800222a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f006 fe81 	bl	8008f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 82fa 	beq.w	8002838 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225e:	82fb      	strh	r3, [r7, #22]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	8afb      	ldrh	r3, [r7, #22]
 8002270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800227c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002280:	b29b      	uxth	r3, r3
 8002282:	8013      	strh	r3, [r2, #0]
 8002284:	e2d8      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d021      	beq.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	441a      	add	r2, r3
 80022bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80022c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f040 82ac 	bne.w	8002838 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022e8:	441a      	add	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022f6:	441a      	add	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	429a      	cmp	r2, r3
 8002306:	d30b      	bcc.n	8002320 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002318:	1ad2      	subs	r2, r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	621a      	str	r2, [r3, #32]
 800231e:	e017      	b.n	8002350 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d108      	bne.n	800233a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002328:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800232c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002338:	e00a      	b.n	8002350 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d165      	bne.n	8002424 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236c:	4413      	add	r3, r2
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	00da      	lsls	r2, r3, #3
 8002376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002378:	4413      	add	r3, r2
 800237a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238a:	b29a      	uxth	r2, r3
 800238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238e:	801a      	strh	r2, [r3, #0]
 8002390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002394:	2b3e      	cmp	r3, #62	; 0x3e
 8002396:	d91d      	bls.n	80023d4 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	64bb      	str	r3, [r7, #72]	; 0x48
 80023a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x30c>
 80023ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ae:	3b01      	subs	r3, #1
 80023b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	801a      	strh	r2, [r3, #0]
 80023d2:	e044      	b.n	800245e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x34c>
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ee:	801a      	strh	r2, [r3, #0]
 80023f0:	e035      	b.n	800245e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80023fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_PCD_EP_DB_Transmit+0x366>
 8002406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002408:	3301      	adds	r3, #1
 800240a:	64bb      	str	r3, [r7, #72]	; 0x48
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29a      	uxth	r2, r3
 8002412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002414:	b29b      	uxth	r3, r3
 8002416:	029b      	lsls	r3, r3, #10
 8002418:	b29b      	uxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002420:	801a      	strh	r2, [r3, #0]
 8002422:	e01c      	b.n	800245e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d118      	bne.n	800245e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	647b      	str	r3, [r7, #68]	; 0x44
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002440:	4413      	add	r3, r2
 8002442:	647b      	str	r3, [r7, #68]	; 0x44
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	00da      	lsls	r2, r3, #3
 800244a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244c:	4413      	add	r3, r2
 800244e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002452:	643b      	str	r3, [r7, #64]	; 0x40
 8002454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002458:	b29a      	uxth	r2, r3
 800245a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800245c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	6959      	ldr	r1, [r3, #20]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	891a      	ldrh	r2, [r3, #8]
 800246a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800246e:	b29b      	uxth	r3, r3
 8002470:	f004 fb18 	bl	8006aa4 <USB_WritePMA>
 8002474:	e1e0      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4413      	add	r3, r2
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	4413      	add	r3, r2
 8002490:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d307      	bcc.n	80024ba <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024b2:	1ad2      	subs	r2, r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	619a      	str	r2, [r3, #24]
 80024b8:	e002      	b.n	80024c0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f040 80c0 	bne.w	800264a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d126      	bne.n	8002520 <HAL_PCD_EP_DB_Transmit+0x47a>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e6:	4413      	add	r3, r2
 80024e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	00da      	lsls	r2, r3, #3
 80024f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024f2:	4413      	add	r3, r2
 80024f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80024fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002504:	b29a      	uxth	r2, r3
 8002506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002518:	b29a      	uxth	r2, r3
 800251a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800251c:	801a      	strh	r2, [r3, #0]
 800251e:	e01a      	b.n	8002556 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d116      	bne.n	8002556 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	667b      	str	r3, [r7, #100]	; 0x64
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253c:	4413      	add	r3, r2
 800253e:	667b      	str	r3, [r7, #100]	; 0x64
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	00da      	lsls	r2, r3, #3
 8002546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002548:	4413      	add	r3, r2
 800254a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800254e:	663b      	str	r3, [r7, #96]	; 0x60
 8002550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002552:	2200      	movs	r2, #0
 8002554:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	677b      	str	r3, [r7, #116]	; 0x74
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d12b      	bne.n	80025bc <HAL_PCD_EP_DB_Transmit+0x516>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	4413      	add	r3, r2
 800257a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	00da      	lsls	r2, r3, #3
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002584:	4413      	add	r3, r2
 8002586:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800258a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800258e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259a:	b29a      	uxth	r2, r3
 800259c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b8:	801a      	strh	r2, [r3, #0]
 80025ba:	e017      	b.n	80025ec <HAL_PCD_EP_DB_Transmit+0x546>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d113      	bne.n	80025ec <HAL_PCD_EP_DB_Transmit+0x546>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d2:	4413      	add	r3, r2
 80025d4:	677b      	str	r3, [r7, #116]	; 0x74
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	00da      	lsls	r2, r3, #3
 80025dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025de:	4413      	add	r3, r2
 80025e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025e4:	673b      	str	r3, [r7, #112]	; 0x70
 80025e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e8:	2200      	movs	r2, #0
 80025ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f006 fca1 	bl	8008f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 811a 	bne.w	8002838 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800261a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	441a      	add	r2, r3
 8002630:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800263c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002644:	b29b      	uxth	r3, r3
 8002646:	8013      	strh	r3, [r2, #0]
 8002648:	e0f6      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d121      	bne.n	8002698 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	441a      	add	r2, r3
 8002680:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800268c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002694:	b29b      	uxth	r3, r3
 8002696:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269e:	2b01      	cmp	r3, #1
 80026a0:	f040 80ca 	bne.w	8002838 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026ac:	441a      	add	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026ba:	441a      	add	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	6a1a      	ldr	r2, [r3, #32]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d30b      	bcc.n	80026e4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026dc:	1ad2      	subs	r2, r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	621a      	str	r2, [r3, #32]
 80026e2:	e017      	b.n	8002714 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d108      	bne.n	80026fe <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80026ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026fc:	e00a      	b.n	8002714 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2200      	movs	r2, #0
 800270a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	657b      	str	r3, [r7, #84]	; 0x54
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d165      	bne.n	80027ee <HAL_PCD_EP_DB_Transmit+0x748>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002736:	4413      	add	r3, r2
 8002738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	00da      	lsls	r2, r3, #3
 8002740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002742:	4413      	add	r3, r2
 8002744:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002748:	65bb      	str	r3, [r7, #88]	; 0x58
 800274a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002754:	b29a      	uxth	r2, r3
 8002756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275e:	2b3e      	cmp	r3, #62	; 0x3e
 8002760:	d91d      	bls.n	800279e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	66bb      	str	r3, [r7, #104]	; 0x68
 800276a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002778:	3b01      	subs	r3, #1
 800277a:	66bb      	str	r3, [r7, #104]	; 0x68
 800277c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29a      	uxth	r2, r3
 8002782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002784:	b29b      	uxth	r3, r3
 8002786:	029b      	lsls	r3, r3, #10
 8002788:	b29b      	uxth	r3, r3
 800278a:	4313      	orrs	r3, r2
 800278c:	b29b      	uxth	r3, r3
 800278e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002796:	b29a      	uxth	r2, r3
 8002798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800279a:	801a      	strh	r2, [r3, #0]
 800279c:	e041      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x77c>
 800279e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <HAL_PCD_EP_DB_Transmit+0x716>
 80027a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	e032      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x77c>
 80027bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80027c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x730>
 80027d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d2:	3301      	adds	r3, #1
 80027d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027de:	b29b      	uxth	r3, r3
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4313      	orrs	r3, r2
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	e019      	b.n	8002822 <HAL_PCD_EP_DB_Transmit+0x77c>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d115      	bne.n	8002822 <HAL_PCD_EP_DB_Transmit+0x77c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002804:	4413      	add	r3, r2
 8002806:	657b      	str	r3, [r7, #84]	; 0x54
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	00da      	lsls	r2, r3, #3
 800280e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002810:	4413      	add	r3, r2
 8002812:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002816:	653b      	str	r3, [r7, #80]	; 0x50
 8002818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800281c:	b29a      	uxth	r2, r3
 800281e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002820:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6959      	ldr	r1, [r3, #20]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	895a      	ldrh	r2, [r3, #10]
 800282e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002832:	b29b      	uxth	r3, r3
 8002834:	f004 f936 	bl	8006aa4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002852:	82bb      	strh	r3, [r7, #20]
 8002854:	8abb      	ldrh	r3, [r7, #20]
 8002856:	f083 0310 	eor.w	r3, r3, #16
 800285a:	82bb      	strh	r3, [r7, #20]
 800285c:	8abb      	ldrh	r3, [r7, #20]
 800285e:	f083 0320 	eor.w	r3, r3, #32
 8002862:	82bb      	strh	r3, [r7, #20]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	8abb      	ldrh	r3, [r7, #20]
 8002874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800287c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002884:	b29b      	uxth	r3, r3
 8002886:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3790      	adds	r7, #144	; 0x90
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002892:	b480      	push	{r7}
 8002894:	b087      	sub	sp, #28
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	817b      	strh	r3, [r7, #10]
 80028a0:	4613      	mov	r3, r2
 80028a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80028a4:	897b      	ldrh	r3, [r7, #10]
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	f003 0207 	and.w	r2, r3, #7
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	3310      	adds	r3, #16
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e009      	b.n	80028dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028c8:	897a      	ldrh	r2, [r7, #10]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4413      	add	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80028dc:	893b      	ldrh	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	80da      	strh	r2, [r3, #6]
 80028f0:	e00b      	b.n	800290a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2201      	movs	r2, #1
 80028f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	b29a      	uxth	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800293c:	b29b      	uxth	r3, r3
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002950:	b29b      	uxth	r3, r3
 8002952:	f043 0302 	orr.w	r3, r3, #2
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	58000400 	.word	0x58000400

0800298c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	58000400 	.word	0x58000400

080029a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b6:	6053      	str	r3, [r2, #4]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	58000400 	.word	0x58000400

080029c8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029da:	d101      	bne.n	80029e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a3a:	d101      	bne.n	8002a40 <LL_RCC_HSE_IsReady+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_RCC_HSE_IsReady+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d101      	bne.n	8002aa0 <LL_RCC_HSI_IsReady+0x18>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <LL_RCC_HSI_IsReady+0x1a>
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d101      	bne.n	8002b32 <LL_RCC_HSI48_IsReady+0x18>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_RCC_HSI48_IsReady+0x1a>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d101      	bne.n	8002bde <LL_RCC_LSE_IsReady+0x18>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <LL_RCC_LSE_IsReady+0x1a>
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d101      	bne.n	8002c46 <LL_RCC_LSI1_IsReady+0x18>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_RCC_LSI1_IsReady+0x1a>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d101      	bne.n	8002cae <LL_RCC_LSI2_IsReady+0x18>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_RCC_LSI2_IsReady+0x1a>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	6013      	str	r3, [r2, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d101      	bne.n	8002d3a <LL_RCC_MSI_IsReady+0x16>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_RCC_MSI_IsReady+0x18>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2bb0      	cmp	r3, #176	; 0xb0
 8002d84:	d901      	bls.n	8002d8a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002d86:	23b0      	movs	r3, #176	; 0xb0
 8002d88:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002d8a:	687b      	ldr	r3, [r7, #4]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f023 0203 	bic.w	r2, r3, #3
 8002dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	6013      	str	r3, [r2, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f38:	6013      	str	r3, [r2, #0]
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f56:	d101      	bne.n	8002f5c <LL_RCC_PLL_IsReady+0x18>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <LL_RCC_PLL_IsReady+0x1a>
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d101      	bne.n	8002fe2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003002:	d101      	bne.n	8003008 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003028:	d101      	bne.n	800302e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800304c:	d101      	bne.n	8003052 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003070:	d101      	bne.n	8003076 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b08d      	sub	sp, #52	; 0x34
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e363      	b.n	800375e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 808d 	beq.w	80031be <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a4:	f7ff fea1 	bl	8002dea <LL_RCC_GetSysClkSource>
 80030a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030aa:	f7ff ff82 	bl	8002fb2 <LL_RCC_PLL_GetMainSource>
 80030ae:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_RCC_OscConfig+0x3e>
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d147      	bne.n	800314c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d144      	bne.n	800314c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e347      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80030d2:	f7ff fe4c 	bl	8002d6e <LL_RCC_MSI_GetRange>
 80030d6:	4603      	mov	r3, r0
 80030d8:	429c      	cmp	r4, r3
 80030da:	d914      	bls.n	8003106 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fd05 	bl	8003af0 <RCC_SetFlashLatencyFromMSIRange>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e336      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe26 	bl	8002d46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fe4a 	bl	8002d98 <LL_RCC_MSI_SetCalibTrimming>
 8003104:	e013      	b.n	800312e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe1b 	bl	8002d46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fe3f 	bl	8002d98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fce6 	bl	8003af0 <RCC_SetFlashLatencyFromMSIRange>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e317      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800312e:	f000 fccb 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003132:	4603      	mov	r3, r0
 8003134:	4aa4      	ldr	r2, [pc, #656]	; (80033c8 <HAL_RCC_OscConfig+0x344>)
 8003136:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003138:	4ba4      	ldr	r3, [pc, #656]	; (80033cc <HAL_RCC_OscConfig+0x348>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd fab1 	bl	80006a4 <HAL_InitTick>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d039      	beq.n	80031bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e308      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01e      	beq.n	8003192 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003154:	f7ff fdc8 	bl	8002ce8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003158:	f7fd faf2 	bl	8000740 <HAL_GetTick>
 800315c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003160:	f7fd faee 	bl	8000740 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e2f5      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003172:	f7ff fdd7 	bl	8002d24 <LL_RCC_MSI_IsReady>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f1      	beq.n	8003160 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fde0 	bl	8002d46 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fe04 	bl	8002d98 <LL_RCC_MSI_SetCalibTrimming>
 8003190:	e015      	b.n	80031be <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003192:	f7ff fdb8 	bl	8002d06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003196:	f7fd fad3 	bl	8000740 <HAL_GetTick>
 800319a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800319e:	f7fd facf 	bl	8000740 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e2d6      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031b0:	f7ff fdb8 	bl	8002d24 <LL_RCC_MSI_IsReady>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f1      	bne.n	800319e <HAL_RCC_OscConfig+0x11a>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d047      	beq.n	800325a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ca:	f7ff fe0e 	bl	8002dea <LL_RCC_GetSysClkSource>
 80031ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031d0:	f7ff feef 	bl	8002fb2 <LL_RCC_PLL_GetMainSource>
 80031d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_OscConfig+0x164>
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d108      	bne.n	80031f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d134      	bne.n	800325a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e2b4      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d102      	bne.n	8003204 <HAL_RCC_OscConfig+0x180>
 80031fe:	f7ff fbf5 	bl	80029ec <LL_RCC_HSE_Enable>
 8003202:	e001      	b.n	8003208 <HAL_RCC_OscConfig+0x184>
 8003204:	f7ff fc01 	bl	8002a0a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fd fa96 	bl	8000740 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fd fa92 	bl	8000740 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e299      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800322a:	f7ff fbfd 	bl	8002a28 <LL_RCC_HSE_IsReady>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f1      	beq.n	8003218 <HAL_RCC_OscConfig+0x194>
 8003234:	e011      	b.n	800325a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fd fa83 	bl	8000740 <HAL_GetTick>
 800323a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800323e:	f7fd fa7f 	bl	8000740 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b64      	cmp	r3, #100	; 0x64
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e286      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003250:	f7ff fbea 	bl	8002a28 <LL_RCC_HSE_IsReady>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f1      	bne.n	800323e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04c      	beq.n	8003300 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003266:	f7ff fdc0 	bl	8002dea <LL_RCC_GetSysClkSource>
 800326a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326c:	f7ff fea1 	bl	8002fb2 <LL_RCC_PLL_GetMainSource>
 8003270:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d005      	beq.n	8003284 <HAL_RCC_OscConfig+0x200>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d10e      	bne.n	800329c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d10b      	bne.n	800329c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e266      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fc09 	bl	8002aac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800329a:	e031      	b.n	8003300 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d019      	beq.n	80032d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	f7ff fbd2 	bl	8002a4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fd fa4a 	bl	8000740 <HAL_GetTick>
 80032ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b0:	f7fd fa46 	bl	8000740 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e24d      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032c2:	f7ff fbe1 	bl	8002a88 <LL_RCC_HSI_IsReady>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f1      	beq.n	80032b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fbeb 	bl	8002aac <LL_RCC_HSI_SetCalibTrimming>
 80032d6:	e013      	b.n	8003300 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d8:	f7ff fbc7 	bl	8002a6a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fd fa30 	bl	8000740 <HAL_GetTick>
 80032e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e4:	f7fd fa2c 	bl	8000740 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e233      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032f6:	f7ff fbc7 	bl	8002a88 <LL_RCC_HSI_IsReady>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f1      	bne.n	80032e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80a3 	beq.w	8003460 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d076      	beq.n	8003410 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	d046      	beq.n	80033bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800332e:	f7ff fc7e 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d113      	bne.n	8003360 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003338:	f7ff fc57 	bl	8002bea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800333c:	f7fd fa00 	bl	8000740 <HAL_GetTick>
 8003340:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003344:	f7fd f9fc 	bl	8000740 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e203      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003356:	f7ff fc6a 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f1      	beq.n	8003344 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003360:	f7ff fc77 	bl	8002c52 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd f9ec 	bl	8000740 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800336c:	f7fd f9e8 	bl	8000740 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1ef      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800337e:	f7ff fc8a 	bl	8002c96 <LL_RCC_LSI2_IsReady>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f1      	beq.n	800336c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fc94 	bl	8002cba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003392:	f7ff fc3b 	bl	8002c0c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003396:	f7fd f9d3 	bl	8000740 <HAL_GetTick>
 800339a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800339e:	f7fd f9cf 	bl	8000740 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1d6      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033b0:	f7ff fc3d 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f1      	bne.n	800339e <HAL_RCC_OscConfig+0x31a>
 80033ba:	e051      	b.n	8003460 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80033bc:	f7ff fc15 	bl	8002bea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd f9be 	bl	8000740 <HAL_GetTick>
 80033c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033c6:	e00c      	b.n	80033e2 <HAL_RCC_OscConfig+0x35e>
 80033c8:	20000008 	.word	0x20000008
 80033cc:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033d0:	f7fd f9b6 	bl	8000740 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1bd      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033e2:	f7ff fc24 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f1      	beq.n	80033d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80033ec:	f7ff fc42 	bl	8002c74 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033f2:	f7fd f9a5 	bl	8000740 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1ac      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003404:	f7ff fc47 	bl	8002c96 <LL_RCC_LSI2_IsReady>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f1      	bne.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 800340e:	e027      	b.n	8003460 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003410:	f7ff fc30 	bl	8002c74 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fd f994 	bl	8000740 <HAL_GetTick>
 8003418:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800341c:	f7fd f990 	bl	8000740 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b03      	cmp	r3, #3
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e197      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800342e:	f7ff fc32 	bl	8002c96 <LL_RCC_LSI2_IsReady>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f1      	bne.n	800341c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003438:	f7ff fbe8 	bl	8002c0c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fd f980 	bl	8000740 <HAL_GetTick>
 8003440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003444:	f7fd f97c 	bl	8000740 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e183      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003456:	f7ff fbea 	bl	8002c2e <LL_RCC_LSI1_IsReady>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f1      	bne.n	8003444 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d05b      	beq.n	8003524 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346c:	4ba7      	ldr	r3, [pc, #668]	; (800370c <HAL_RCC_OscConfig+0x688>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d114      	bne.n	80034a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003478:	f7ff fa78 	bl	800296c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347c:	f7fd f960 	bl	8000740 <HAL_GetTick>
 8003480:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fd f95c 	bl	8000740 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e163      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003496:	4b9d      	ldr	r3, [pc, #628]	; (800370c <HAL_RCC_OscConfig+0x688>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_RCC_OscConfig+0x42c>
 80034aa:	f7ff fb48 	bl	8002b3e <LL_RCC_LSE_Enable>
 80034ae:	e00c      	b.n	80034ca <HAL_RCC_OscConfig+0x446>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d104      	bne.n	80034c2 <HAL_RCC_OscConfig+0x43e>
 80034b8:	f7ff fb63 	bl	8002b82 <LL_RCC_LSE_EnableBypass>
 80034bc:	f7ff fb3f 	bl	8002b3e <LL_RCC_LSE_Enable>
 80034c0:	e003      	b.n	80034ca <HAL_RCC_OscConfig+0x446>
 80034c2:	f7ff fb4d 	bl	8002b60 <LL_RCC_LSE_Disable>
 80034c6:	f7ff fb6d 	bl	8002ba4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d2:	f7fd f935 	bl	8000740 <HAL_GetTick>
 80034d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fd f931 	bl	8000740 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e136      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034f0:	f7ff fb69 	bl	8002bc6 <LL_RCC_LSE_IsReady>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ef      	beq.n	80034da <HAL_RCC_OscConfig+0x456>
 80034fa:	e013      	b.n	8003524 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fd f920 	bl	8000740 <HAL_GetTick>
 8003500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fd f91c 	bl	8000740 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e121      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800351a:	f7ff fb54 	bl	8002bc6 <LL_RCC_LSE_IsReady>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ef      	bne.n	8003504 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02c      	beq.n	800358a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d014      	beq.n	8003562 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003538:	f7ff facd 	bl	8002ad6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fd f900 	bl	8000740 <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003544:	f7fd f8fc 	bl	8000740 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e103      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003556:	f7ff fae0 	bl	8002b1a <LL_RCC_HSI48_IsReady>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f1      	beq.n	8003544 <HAL_RCC_OscConfig+0x4c0>
 8003560:	e013      	b.n	800358a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003562:	f7ff fac9 	bl	8002af8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd f8eb 	bl	8000740 <HAL_GetTick>
 800356a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356e:	f7fd f8e7 	bl	8000740 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0ee      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003580:	f7ff facb 	bl	8002b1a <LL_RCC_HSI48_IsReady>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f1      	bne.n	800356e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80e4 	beq.w	800375c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003594:	f7ff fc29 	bl	8002dea <LL_RCC_GetSysClkSource>
 8003598:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800359a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	f040 80b4 	bne.w	8003714 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0203 	and.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d123      	bne.n	8003602 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d11c      	bne.n	8003602 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d114      	bne.n	8003602 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d10d      	bne.n	8003602 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d05d      	beq.n	80036be <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d058      	beq.n	80036ba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0a1      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800361a:	f7ff fc84 	bl	8002f26 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800361e:	f7fd f88f 	bl	8000740 <HAL_GetTick>
 8003622:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7fd f88b 	bl	8000740 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e092      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ef      	bne.n	8003626 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	4b30      	ldr	r3, [pc, #192]	; (8003710 <HAL_RCC_OscConfig+0x68c>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003658:	4311      	orrs	r1, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800365e:	0212      	lsls	r2, r2, #8
 8003660:	4311      	orrs	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003666:	4311      	orrs	r1, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800366c:	4311      	orrs	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003672:	430a      	orrs	r2, r1
 8003674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003678:	4313      	orrs	r3, r2
 800367a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800367c:	f7ff fc44 	bl	8002f08 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800368a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003690:	f7fd f856 	bl	8000740 <HAL_GetTick>
 8003694:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd f852 	bl	8000740 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e059      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ef      	beq.n	8003698 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	e050      	b.n	800375c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e04f      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d147      	bne.n	800375c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036cc:	f7ff fc1c 	bl	8002f08 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036e0:	f7fd f82e 	bl	8000740 <HAL_GetTick>
 80036e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fd f82a 	bl	8000740 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e031      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ef      	beq.n	80036e8 <HAL_RCC_OscConfig+0x664>
 8003708:	e028      	b.n	800375c <HAL_RCC_OscConfig+0x6d8>
 800370a:	bf00      	nop
 800370c:	58000400 	.word	0x58000400
 8003710:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b0c      	cmp	r3, #12
 8003718:	d01e      	beq.n	8003758 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	f7ff fc04 	bl	8002f26 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fd f80f 	bl	8000740 <HAL_GetTick>
 8003722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd f80b 	bl	8000740 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e012      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ef      	bne.n	8003726 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_OscConfig+0x6e4>)
 8003752:	4013      	ands	r3, r2
 8003754:	60cb      	str	r3, [r1, #12]
 8003756:	e001      	b.n	800375c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3734      	adds	r7, #52	; 0x34
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}
 8003766:	bf00      	nop
 8003768:	eefefffc 	.word	0xeefefffc

0800376c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e12d      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b98      	ldr	r3, [pc, #608]	; (80039e4 <HAL_RCC_ClockConfig+0x278>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d91b      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b95      	ldr	r3, [pc, #596]	; (80039e4 <HAL_RCC_ClockConfig+0x278>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 0207 	bic.w	r2, r3, #7
 8003796:	4993      	ldr	r1, [pc, #588]	; (80039e4 <HAL_RCC_ClockConfig+0x278>)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379e:	f7fc ffcf 	bl	8000740 <HAL_GetTick>
 80037a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037a6:	f7fc ffcb 	bl	8000740 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e111      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b8:	4b8a      	ldr	r3, [pc, #552]	; (80039e4 <HAL_RCC_ClockConfig+0x278>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d1ef      	bne.n	80037a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fb13 	bl	8002e02 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037dc:	f7fc ffb0 	bl	8000740 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037e4:	f7fc ffac 	bl	8000740 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0f2      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037f6:	f7ff fbe8 	bl	8002fca <LL_RCC_IsActiveFlag_HPRE>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f1      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fb0a 	bl	8002e2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003816:	f7fc ff93 	bl	8000740 <HAL_GetTick>
 800381a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800381e:	f7fc ff8f 	bl	8000740 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e0d5      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003830:	f7ff fbdd 	bl	8002fee <LL_RCC_IsActiveFlag_C2HPRE>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f1      	beq.n	800381e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fb03 	bl	8002e56 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003850:	f7fc ff76 	bl	8000740 <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003858:	f7fc ff72 	bl	8000740 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0b8      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800386a:	f7ff fbd3 	bl	8003014 <LL_RCC_IsActiveFlag_SHDHPRE>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f1      	beq.n	8003858 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d016      	beq.n	80038ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fafd 	bl	8002e84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800388a:	f7fc ff59 	bl	8000740 <HAL_GetTick>
 800388e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003892:	f7fc ff55 	bl	8000740 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e09b      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038a4:	f7ff fbc9 	bl	800303a <LL_RCC_IsActiveFlag_PPRE1>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f1      	beq.n	8003892 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d017      	beq.n	80038ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff faf3 	bl	8002eac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038c6:	f7fc ff3b 	bl	8000740 <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038ce:	f7fc ff37 	bl	8000740 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e07d      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038e0:	f7ff fbbd 	bl	800305e <LL_RCC_IsActiveFlag_PPRE2>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f1      	beq.n	80038ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d043      	beq.n	800397e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d106      	bne.n	800390c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80038fe:	f7ff f893 	bl	8002a28 <LL_RCC_HSE_IsReady>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d11e      	bne.n	8003946 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e067      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d106      	bne.n	8003922 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003914:	f7ff fb16 	bl	8002f44 <LL_RCC_PLL_IsReady>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d113      	bne.n	8003946 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e05c      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800392a:	f7ff f9fb 	bl	8002d24 <LL_RCC_MSI_IsReady>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d108      	bne.n	8003946 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e051      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003938:	f7ff f8a6 	bl	8002a88 <LL_RCC_HSI_IsReady>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e04a      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fa39 	bl	8002dc2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fc fef6 	bl	8000740 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fc fef2 	bl	8000740 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e036      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	f7ff fa3c 	bl	8002dea <LL_RCC_GetSysClkSource>
 8003972:	4602      	mov	r2, r0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	429a      	cmp	r2, r3
 800397c:	d1ec      	bne.n	8003958 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800397e:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_ClockConfig+0x278>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d21b      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398c:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <HAL_RCC_ClockConfig+0x278>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 0207 	bic.w	r2, r3, #7
 8003994:	4913      	ldr	r1, [pc, #76]	; (80039e4 <HAL_RCC_ClockConfig+0x278>)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399c:	f7fc fed0 	bl	8000740 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039a4:	f7fc fecc 	bl	8000740 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e012      	b.n	80039dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x278>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1ef      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039c4:	f000 f880 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <HAL_RCC_ClockConfig+0x27c>)
 80039cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039ce:	f7fc fec3 	bl	8000758 <HAL_GetTickPrio>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fc fe65 	bl	80006a4 <HAL_InitTick>
 80039da:	4603      	mov	r3, r0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	58004000 	.word	0x58004000
 80039e8:	20000008 	.word	0x20000008

080039ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	f7ff f9fa 	bl	8002dea <LL_RCC_GetSysClkSource>
 80039f6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80039fe:	f7ff f9b6 	bl	8002d6e <LL_RCC_MSI_GetRange>
 8003a02:	4603      	mov	r3, r0
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	4a2b      	ldr	r2, [pc, #172]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e04b      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d102      	bne.n	8003a20 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a1a:	4b28      	ldr	r3, [pc, #160]	; (8003abc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e045      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d10a      	bne.n	8003a3c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a26:	f7fe ffcf 	bl	80029c8 <LL_RCC_HSE_IsEnabledDiv2>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d102      	bne.n	8003a36 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a30:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e03a      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e037      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a3c:	f7ff fab9 	bl	8002fb2 <LL_RCC_PLL_GetMainSource>
 8003a40:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d003      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x64>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_GetSysClockFreq+0x6a>
 8003a4e:	e00d      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a52:	60bb      	str	r3, [r7, #8]
        break;
 8003a54:	e015      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a56:	f7fe ffb7 	bl	80029c8 <LL_RCC_HSE_IsEnabledDiv2>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a62:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a64:	e00d      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003a68:	60bb      	str	r3, [r7, #8]
        break;
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a6c:	f7ff f97f 	bl	8002d6e <LL_RCC_MSI_GetRange>
 8003a70:	4603      	mov	r3, r0
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7e:	60bb      	str	r3, [r7, #8]
        break;
 8003a80:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003a82:	f7ff fa71 	bl	8002f68 <LL_RCC_PLL_GetN>
 8003a86:	4602      	mov	r2, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	fb03 f402 	mul.w	r4, r3, r2
 8003a8e:	f7ff fa84 	bl	8002f9a <LL_RCC_PLL_GetDivider>
 8003a92:	4603      	mov	r3, r0
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	3301      	adds	r3, #1
 8003a98:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a9c:	f7ff fa71 	bl	8002f82 <LL_RCC_PLL_GetR>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	0f5b      	lsrs	r3, r3, #29
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003aaa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003aac:	68fb      	ldr	r3, [r7, #12]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd90      	pop	{r4, r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08009598 	.word	0x08009598
 8003abc:	00f42400 	.word	0x00f42400
 8003ac0:	003d0900 	.word	0x003d0900
 8003ac4:	007a1200 	.word	0x007a1200

08003ac8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b598      	push	{r3, r4, r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003acc:	f7ff ff8e 	bl	80039ec <HAL_RCC_GetSysClockFreq>
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	f7ff f9ff 	bl	8002ed4 <LL_RCC_GetAHBPrescaler>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	4a03      	ldr	r2, [pc, #12]	; (8003aec <HAL_RCC_GetHCLKFreq+0x24>)
 8003ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd98      	pop	{r3, r4, r7, pc}
 8003aec:	08009558 	.word	0x08009558

08003af0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2bb0      	cmp	r3, #176	; 0xb0
 8003afc:	d903      	bls.n	8003b06 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	e007      	b.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b16:	f7ff f9e9 	bl	8002eec <LL_RCC_GetAHB4Prescaler>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	4a0d      	ldr	r2, [pc, #52]	; (8003b58 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	0c9c      	lsrs	r4, r3, #18
 8003b3a:	f7fe ff27 	bl	800298c <HAL_PWREx_GetVoltageRange>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4619      	mov	r1, r3
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 f80c 	bl	8003b60 <RCC_SetFlashLatency>
 8003b48:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd90      	pop	{r4, r7, pc}
 8003b52:	bf00      	nop
 8003b54:	08009598 	.word	0x08009598
 8003b58:	08009558 	.word	0x08009558
 8003b5c:	431bde83 	.word	0x431bde83

08003b60 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b093      	sub	sp, #76	; 0x4c
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b6a:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <RCC_SetFlashLatency+0xe8>)
 8003b6c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003b76:	4a35      	ldr	r2, [pc, #212]	; (8003c4c <RCC_SetFlashLatency+0xec>)
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b82:	4b33      	ldr	r3, [pc, #204]	; (8003c50 <RCC_SetFlashLatency+0xf0>)
 8003b84:	f107 040c 	add.w	r4, r7, #12
 8003b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b8e:	2300      	movs	r3, #0
 8003b90:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b98:	d11a      	bne.n	8003bd0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b9e:	e013      	b.n	8003bc8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	3348      	adds	r3, #72	; 0x48
 8003ba6:	443b      	add	r3, r7
 8003ba8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d807      	bhi.n	8003bc2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	3348      	adds	r3, #72	; 0x48
 8003bb8:	443b      	add	r3, r7
 8003bba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bbe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003bc0:	e020      	b.n	8003c04 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d9e8      	bls.n	8003ba0 <RCC_SetFlashLatency+0x40>
 8003bce:	e019      	b.n	8003c04 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd4:	e013      	b.n	8003bfe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	3348      	adds	r3, #72	; 0x48
 8003bdc:	443b      	add	r3, r7
 8003bde:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d807      	bhi.n	8003bf8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	3348      	adds	r3, #72	; 0x48
 8003bee:	443b      	add	r3, r7
 8003bf0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003bf6:	e005      	b.n	8003c04 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d9e8      	bls.n	8003bd6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <RCC_SetFlashLatency+0xf4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 0207 	bic.w	r2, r3, #7
 8003c0c:	4911      	ldr	r1, [pc, #68]	; (8003c54 <RCC_SetFlashLatency+0xf4>)
 8003c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c14:	f7fc fd94 	bl	8000740 <HAL_GetTick>
 8003c18:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c1a:	e008      	b.n	8003c2e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c1c:	f7fc fd90 	bl	8000740 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e007      	b.n	8003c3e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <RCC_SetFlashLatency+0xf4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1ef      	bne.n	8003c1c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	374c      	adds	r7, #76	; 0x4c
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}
 8003c46:	bf00      	nop
 8003c48:	080094e4 	.word	0x080094e4
 8003c4c:	080094f4 	.word	0x080094f4
 8003c50:	08009500 	.word	0x08009500
 8003c54:	58004000 	.word	0x58004000

08003c58 <LL_RCC_LSE_IsEnabled>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <LL_RCC_LSE_IsEnabled+0x18>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <LL_RCC_LSE_IsEnabled+0x1a>
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_RCC_LSE_IsReady>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d101      	bne.n	8003c94 <LL_RCC_LSE_IsReady+0x18>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <LL_RCC_LSE_IsReady+0x1a>
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_RCC_MSI_EnablePLLMode>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cae:	f043 0304 	orr.w	r3, r3, #4
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_SetRFWKPClockSource>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_SetSMPSClockSource>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f023 0203 	bic.w	r2, r3, #3
 8003cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_RCC_SetSMPSPrescaler>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_RCC_SetUSARTClockSource>:
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_RCC_SetLPUARTClockSource>:
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LL_RCC_SetI2CClockSource>:
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003daa:	43db      	mvns	r3, r3
 8003dac:	401a      	ands	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <LL_RCC_SetLPTIMClockSource>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	43db      	mvns	r3, r3
 8003de4:	401a      	ands	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_RCC_SetSAIClockSource>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_RCC_SetRNGClockSource>:
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <LL_RCC_SetCLK48ClockSource>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_RCC_SetUSBClockSource>:
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ffe3 	bl	8003e58 <LL_RCC_SetCLK48ClockSource>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <LL_RCC_SetADCClockSource>:
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_RCC_SetRTCClockSource>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_RCC_GetRTCClockSource>:
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_ForceBackupDomainReset>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_RCC_PLLSAI1_Enable>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f62:	6013      	str	r3, [r2, #0]
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <LL_RCC_PLLSAI1_Disable>:
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f80:	6013      	str	r3, [r2, #0]
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_RCC_PLLSAI1_IsReady>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f9e:	d101      	bne.n	8003fa4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d034      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fd4:	d021      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003fd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fda:	d81b      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fe0:	d01d      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003fe2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fe6:	d815      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00b      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff0:	d110      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004002:	e00d      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f94d 	bl	80042a8 <RCCEx_PLLSAI1_ConfigNP>
 800400e:	4603      	mov	r3, r0
 8004010:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004012:	e005      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	77fb      	strb	r3, [r7, #31]
        break;
 8004018:	e002      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800401a:	bf00      	nop
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800401e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004020:	7ffb      	ldrb	r3, [r7, #31]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d105      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fee8 	bl	8003e00 <LL_RCC_SetSAIClockSource>
 8004030:	e001      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	7ffb      	ldrb	r3, [r7, #31]
 8004034:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403e:	2b00      	cmp	r3, #0
 8004040:	d046      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004042:	f7ff ff56 	bl	8003ef2 <LL_RCC_GetRTCClockSource>
 8004046:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	429a      	cmp	r2, r3
 8004050:	d03c      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004052:	f7fe fc8b 	bl	800296c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff30 	bl	8003ec6 <LL_RCC_SetRTCClockSource>
 8004066:	e02e      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004072:	f7ff ff4b 	bl	8003f0c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004076:	f7ff ff5a 	bl	8003f2e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004092:	f7ff fde1 	bl	8003c58 <LL_RCC_LSE_IsEnabled>
 8004096:	4603      	mov	r3, r0
 8004098:	2b01      	cmp	r3, #1
 800409a:	d114      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800409c:	f7fc fb50 	bl	8000740 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80040a2:	e00b      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fc fb4c 	bl	8000740 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d902      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	77fb      	strb	r3, [r7, #31]
              break;
 80040ba:	e004      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80040bc:	f7ff fdde 	bl	8003c7c <LL_RCC_LSE_IsReady>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d1ee      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80040c6:	7ffb      	ldrb	r3, [r7, #31]
 80040c8:	77bb      	strb	r3, [r7, #30]
 80040ca:	e001      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	7ffb      	ldrb	r3, [r7, #31]
 80040ce:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d004      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fe2a 	bl	8003d3a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d004      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fe35 	bl	8003d66 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b00      	cmp	r3, #0
 8004106:	d004      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fe5d 	bl	8003dcc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fe52 	bl	8003dcc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d004      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fe2a 	bl	8003d92 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d004      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fe1f 	bl	8003d92 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d022      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fe8d 	bl	8003e84 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004172:	d107      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800417e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004182:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418c:	d10b      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3304      	adds	r3, #4
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f8e3 	bl	800435e <RCCEx_PLLSAI1_ConfigNQ>
 8004198:	4603      	mov	r3, r0
 800419a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800419c:	7ffb      	ldrb	r3, [r7, #31]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80041a2:	7ffb      	ldrb	r3, [r7, #31]
 80041a4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d02b      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ba:	d008      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c4:	d003      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fe2a 	bl	8003e2c <LL_RCC_SetRNGClockSource>
 80041d8:	e00a      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	2000      	movs	r0, #0
 80041e6:	f7ff fe21 	bl	8003e2c <LL_RCC_SetRNGClockSource>
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff fe34 	bl	8003e58 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80041f8:	d107      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004208:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004212:	2b00      	cmp	r3, #0
 8004214:	d022      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fe3d 	bl	8003e9a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004228:	d107      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004238:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004242:	d10b      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f8e3 	bl	8004414 <RCCEx_PLLSAI1_ConfigNR>
 800424e:	4603      	mov	r3, r0
 8004250:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004252:	7ffb      	ldrb	r3, [r7, #31]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004258:	7ffb      	ldrb	r3, [r7, #31]
 800425a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fd26 	bl	8003cbe <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fd45 	bl	8003d12 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fd2c 	bl	8003cea <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004292:	7fbb      	ldrb	r3, [r7, #30]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80042a0:	f7ff fcfe 	bl	8003ca0 <LL_RCC_MSI_EnablePLLMode>
}
 80042a4:	bf00      	nop
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042b4:	f7ff fe5b 	bl	8003f6e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042b8:	f7fc fa42 	bl	8000740 <HAL_GetTick>
 80042bc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042be:	e009      	b.n	80042d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c0:	f7fc fa3e 	bl	8000740 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d902      	bls.n	80042d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	73fb      	strb	r3, [r7, #15]
      break;
 80042d2:	e004      	b.n	80042de <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042d4:	f7ff fe5a 	bl	8003f8c <LL_RCC_PLLSAI1_IsReady>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d137      	bne.n	8004354 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430e:	4313      	orrs	r3, r2
 8004310:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004312:	f7ff fe1d 	bl	8003f50 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004316:	f7fc fa13 	bl	8000740 <HAL_GetTick>
 800431a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800431c:	e009      	b.n	8004332 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800431e:	f7fc fa0f 	bl	8000740 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d902      	bls.n	8004332 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	73fb      	strb	r3, [r7, #15]
        break;
 8004330:	e004      	b.n	800433c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004332:	f7ff fe2b 	bl	8003f8c <LL_RCC_PLLSAI1_IsReady>
 8004336:	4603      	mov	r3, r0
 8004338:	2b01      	cmp	r3, #1
 800433a:	d1f0      	bne.n	800431e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004350:	4313      	orrs	r3, r2
 8004352:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800436a:	f7ff fe00 	bl	8003f6e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800436e:	f7fc f9e7 	bl	8000740 <HAL_GetTick>
 8004372:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004374:	e009      	b.n	800438a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004376:	f7fc f9e3 	bl	8000740 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d902      	bls.n	800438a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	73fb      	strb	r3, [r7, #15]
      break;
 8004388:	e004      	b.n	8004394 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800438a:	f7ff fdff 	bl	8003f8c <LL_RCC_PLLSAI1_IsReady>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f0      	bne.n	8004376 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d137      	bne.n	800440a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ae:	4313      	orrs	r3, r2
 80043b0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c4:	4313      	orrs	r3, r2
 80043c6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043c8:	f7ff fdc2 	bl	8003f50 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043cc:	f7fc f9b8 	bl	8000740 <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043d2:	e009      	b.n	80043e8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d4:	f7fc f9b4 	bl	8000740 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d902      	bls.n	80043e8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	73fb      	strb	r3, [r7, #15]
        break;
 80043e6:	e004      	b.n	80043f2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043e8:	f7ff fdd0 	bl	8003f8c <LL_RCC_PLLSAI1_IsReady>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d1f0      	bne.n	80043d4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d108      	bne.n	800440a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004406:	4313      	orrs	r3, r2
 8004408:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004420:	f7ff fda5 	bl	8003f6e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004424:	f7fc f98c 	bl	8000740 <HAL_GetTick>
 8004428:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800442a:	e009      	b.n	8004440 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800442c:	f7fc f988 	bl	8000740 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d902      	bls.n	8004440 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	73fb      	strb	r3, [r7, #15]
      break;
 800443e:	e004      	b.n	800444a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004440:	f7ff fda4 	bl	8003f8c <LL_RCC_PLLSAI1_IsReady>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d137      	bne.n	80044c0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004464:	4313      	orrs	r3, r2
 8004466:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800447e:	f7ff fd67 	bl	8003f50 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004482:	f7fc f95d 	bl	8000740 <HAL_GetTick>
 8004486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004488:	e009      	b.n	800449e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800448a:	f7fc f959 	bl	8000740 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d902      	bls.n	800449e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	73fb      	strb	r3, [r7, #15]
        break;
 800449c:	e004      	b.n	80044a8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800449e:	f7ff fd75 	bl	8003f8c <LL_RCC_PLLSAI1_IsReady>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d1f0      	bne.n	800448a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d108      	bne.n	80044c0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044bc:	4313      	orrs	r3, r2
 80044be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044da:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80044de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004500:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004504:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	b29b      	uxth	r3, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	b29b      	uxth	r3, r3
 8004516:	4013      	ands	r3, r2
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800456c:	b480      	push	{r7}
 800456e:	b09d      	sub	sp, #116	; 0x74
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800458e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004592:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	78db      	ldrb	r3, [r3, #3]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d81f      	bhi.n	80045de <USB_ActivateEndpoint+0x72>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <USB_ActivateEndpoint+0x38>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	080045e7 	.word	0x080045e7
 80045b0:	080045c3 	.word	0x080045c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045c0:	e012      	b.n	80045e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045c6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045ce:	e00b      	b.n	80045e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80045dc:	e004      	b.n	80045e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80045e4:	e000      	b.n	80045e8 <USB_ActivateEndpoint+0x7c>
      break;
 80045e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	b21b      	sxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	b21a      	sxth	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b21b      	sxth	r3, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	b21b      	sxth	r3, r3
 800462e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004650:	b29b      	uxth	r3, r3
 8004652:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	7b1b      	ldrb	r3, [r3, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f040 8178 	bne.w	800494e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8084 	beq.w	8004770 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4413      	add	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	00da      	lsls	r2, r3, #3
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	88db      	ldrh	r3, [r3, #6]
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	b29b      	uxth	r3, r3
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	827b      	strh	r3, [r7, #18]
 80046aa:	8a7b      	ldrh	r3, [r7, #18]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01b      	beq.n	80046ec <USB_ActivateEndpoint+0x180>
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	823b      	strh	r3, [r7, #16]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	8a3b      	ldrh	r3, [r7, #16]
 80046d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	78db      	ldrb	r3, [r3, #3]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d020      	beq.n	8004736 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470a:	81bb      	strh	r3, [r7, #12]
 800470c:	89bb      	ldrh	r3, [r7, #12]
 800470e:	f083 0320 	eor.w	r3, r3, #32
 8004712:	81bb      	strh	r3, [r7, #12]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	89bb      	ldrh	r3, [r7, #12]
 8004720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	b29b      	uxth	r3, r3
 8004732:	8013      	strh	r3, [r2, #0]
 8004734:	e2d5      	b.n	8004ce2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474c:	81fb      	strh	r3, [r7, #14]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	89fb      	ldrh	r3, [r7, #14]
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]
 800476e:	e2b8      	b.n	8004ce2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	633b      	str	r3, [r7, #48]	; 0x30
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	4413      	add	r3, r2
 8004782:	633b      	str	r3, [r7, #48]	; 0x30
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	00da      	lsls	r2, r3, #3
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	4413      	add	r3, r2
 800478e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	88db      	ldrh	r3, [r3, #6]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	4413      	add	r3, r2
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	00da      	lsls	r2, r3, #3
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	4413      	add	r3, r2
 80047c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	801a      	strh	r2, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b3e      	cmp	r3, #62	; 0x3e
 80047de:	d91d      	bls.n	800481c <USB_ActivateEndpoint+0x2b0>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <USB_ActivateEndpoint+0x28e>
 80047f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047f6:	3b01      	subs	r3, #1
 80047f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004802:	b29b      	uxth	r3, r3
 8004804:	029b      	lsls	r3, r3, #10
 8004806:	b29b      	uxth	r3, r3
 8004808:	4313      	orrs	r3, r2
 800480a:	b29b      	uxth	r3, r3
 800480c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004814:	b29a      	uxth	r2, r3
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	e026      	b.n	800486a <USB_ActivateEndpoint+0x2fe>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10a      	bne.n	800483a <USB_ActivateEndpoint+0x2ce>
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800482e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004832:	b29a      	uxth	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	801a      	strh	r2, [r3, #0]
 8004838:	e017      	b.n	800486a <USB_ActivateEndpoint+0x2fe>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	66bb      	str	r3, [r7, #104]	; 0x68
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <USB_ActivateEndpoint+0x2e8>
 800484e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004850:	3301      	adds	r3, #1
 8004852:	66bb      	str	r3, [r7, #104]	; 0x68
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29a      	uxth	r2, r3
 800485a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800485c:	b29b      	uxth	r3, r3
 800485e:	029b      	lsls	r3, r3, #10
 8004860:	b29b      	uxth	r3, r3
 8004862:	4313      	orrs	r3, r2
 8004864:	b29a      	uxth	r2, r3
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	847b      	strh	r3, [r7, #34]	; 0x22
 8004878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800487a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01b      	beq.n	80048ba <USB_ActivateEndpoint+0x34e>
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004898:	843b      	strh	r3, [r7, #32]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	441a      	add	r2, r3
 80048a4:	8c3b      	ldrh	r3, [r7, #32]
 80048a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d124      	bne.n	800490c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d8:	83bb      	strh	r3, [r7, #28]
 80048da:	8bbb      	ldrh	r3, [r7, #28]
 80048dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048e0:	83bb      	strh	r3, [r7, #28]
 80048e2:	8bbb      	ldrh	r3, [r7, #28]
 80048e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048e8:	83bb      	strh	r3, [r7, #28]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	8bbb      	ldrh	r3, [r7, #28]
 80048f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]
 800490a:	e1ea      	b.n	8004ce2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	83fb      	strh	r3, [r7, #30]
 8004924:	8bfb      	ldrh	r3, [r7, #30]
 8004926:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800492a:	83fb      	strh	r3, [r7, #30]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	441a      	add	r2, r3
 8004936:	8bfb      	ldrh	r3, [r7, #30]
 8004938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800493c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004948:	b29b      	uxth	r3, r3
 800494a:	8013      	strh	r3, [r2, #0]
 800494c:	e1c9      	b.n	8004ce2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	78db      	ldrb	r3, [r3, #3]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d11e      	bne.n	8004994 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800497e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004986:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]
 8004992:	e01d      	b.n	80049d0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	441a      	add	r2, r3
 80049b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049da:	b29b      	uxth	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e0:	4413      	add	r3, r2
 80049e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	00da      	lsls	r2, r3, #3
 80049ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	891b      	ldrh	r3, [r3, #8]
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	657b      	str	r3, [r7, #84]	; 0x54
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a14:	4413      	add	r3, r2
 8004a16:	657b      	str	r3, [r7, #84]	; 0x54
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	00da      	lsls	r2, r3, #3
 8004a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a20:	4413      	add	r3, r2
 8004a22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a26:	653b      	str	r3, [r7, #80]	; 0x50
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	895b      	ldrh	r3, [r3, #10]
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	785b      	ldrb	r3, [r3, #1]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f040 8093 	bne.w	8004b68 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01b      	beq.n	8004a96 <USB_ActivateEndpoint+0x52a>
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a74:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004aa4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01b      	beq.n	8004ae6 <USB_ActivateEndpoint+0x57a>
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	441a      	add	r2, r3
 8004ad0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ade:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afc:	873b      	strh	r3, [r7, #56]	; 0x38
 8004afe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b04:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b0c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b44:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	441a      	add	r2, r3
 8004b50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	8013      	strh	r3, [r2, #0]
 8004b66:	e0bc      	b.n	8004ce2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004b78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01d      	beq.n	8004bc0 <USB_ActivateEndpoint+0x654>
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01d      	beq.n	8004c18 <USB_ActivateEndpoint+0x6ac>
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	441a      	add	r2, r3
 8004c00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	78db      	ldrb	r3, [r3, #3]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d024      	beq.n	8004c6a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c3e:	f083 0320 	eor.w	r3, r3, #32
 8004c42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]
 8004c68:	e01d      	b.n	8004ca6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c80:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ce2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3774      	adds	r7, #116	; 0x74
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop

08004cf4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b08d      	sub	sp, #52	; 0x34
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	7b1b      	ldrb	r3, [r3, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f040 808e 	bne.w	8004e24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d044      	beq.n	8004d9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	81bb      	strh	r3, [r7, #12]
 8004d1e:	89bb      	ldrh	r3, [r7, #12]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <USB_DeactivateEndpoint+0x6c>
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	817b      	strh	r3, [r7, #10]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	897b      	ldrh	r3, [r7, #10]
 8004d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d76:	813b      	strh	r3, [r7, #8]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	441a      	add	r2, r3
 8004d82:	893b      	ldrh	r3, [r7, #8]
 8004d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	8013      	strh	r3, [r2, #0]
 8004d98:	e192      	b.n	80050c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	827b      	strh	r3, [r7, #18]
 8004da8:	8a7b      	ldrh	r3, [r7, #18]
 8004daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01b      	beq.n	8004dea <USB_DeactivateEndpoint+0xf6>
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc8:	823b      	strh	r3, [r7, #16]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8a3b      	ldrh	r3, [r7, #16]
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e00:	81fb      	strh	r3, [r7, #14]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	441a      	add	r2, r3
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	8013      	strh	r3, [r2, #0]
 8004e22:	e14d      	b.n	80050c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f040 80a5 	bne.w	8004f78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	843b      	strh	r3, [r7, #32]
 8004e3c:	8c3b      	ldrh	r3, [r7, #32]
 8004e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01b      	beq.n	8004e7e <USB_DeactivateEndpoint+0x18a>
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5c:	83fb      	strh	r3, [r7, #30]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	8bfb      	ldrh	r3, [r7, #30]
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	83bb      	strh	r3, [r7, #28]
 8004e8c:	8bbb      	ldrh	r3, [r7, #28]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01b      	beq.n	8004ece <USB_DeactivateEndpoint+0x1da>
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	837b      	strh	r3, [r7, #26]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	8b7b      	ldrh	r3, [r7, #26]
 8004eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee4:	833b      	strh	r3, [r7, #24]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	8b3b      	ldrh	r3, [r7, #24]
 8004ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1c:	82fb      	strh	r3, [r7, #22]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	441a      	add	r2, r3
 8004f28:	8afb      	ldrh	r3, [r7, #22]
 8004f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	82bb      	strh	r3, [r7, #20]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	8abb      	ldrh	r3, [r7, #20]
 8004f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	8013      	strh	r3, [r2, #0]
 8004f76:	e0a3      	b.n	80050c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01b      	beq.n	8004fc8 <USB_DeactivateEndpoint+0x2d4>
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004fd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01b      	beq.n	8005018 <USB_DeactivateEndpoint+0x324>
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005014:	b29b      	uxth	r3, r3
 8005016:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	441a      	add	r2, r3
 800503a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800503c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005044:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504c:	b29b      	uxth	r3, r3
 800504e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005066:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	441a      	add	r2, r3
 8005072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005084:	b29b      	uxth	r3, r3
 8005086:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	847b      	strh	r3, [r7, #34]	; 0x22
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050bc:	b29b      	uxth	r3, r3
 80050be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3734      	adds	r7, #52	; 0x34
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b0c2      	sub	sp, #264	; 0x108
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050dc:	6018      	str	r0, [r3, #0]
 80050de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	f040 86b7 	bne.w	8005e68 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d908      	bls.n	8005128 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005126:	e007      	b.n	8005138 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800512c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	7b1b      	ldrb	r3, [r3, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d13a      	bne.n	80051be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6959      	ldr	r1, [r3, #20]
 8005154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	88da      	ldrh	r2, [r3, #6]
 8005160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005164:	b29b      	uxth	r3, r3
 8005166:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800516a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800516e:	6800      	ldr	r0, [r0, #0]
 8005170:	f001 fc98 	bl	8006aa4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518e:	b29b      	uxth	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4413      	add	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	00da      	lsls	r2, r3, #3
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4413      	add	r3, r2
 80051aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	f000 be1f 	b.w	8005dfc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	78db      	ldrb	r3, [r3, #3]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	f040 8462 	bne.w	8005a94 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6a1a      	ldr	r2, [r3, #32]
 80051dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	f240 83df 	bls.w	80059ac <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005214:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005246:	b29b      	uxth	r3, r3
 8005248:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800524a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6a1a      	ldr	r2, [r3, #32]
 8005256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525a:	1ad2      	subs	r2, r2, r3
 800525c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 81c7 	beq.w	800561e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	633b      	str	r3, [r7, #48]	; 0x30
 800529c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d177      	bne.n	800539c <USB_EPStartXfer+0x2ce>
 80052ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	4413      	add	r3, r2
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	00da      	lsls	r2, r3, #3
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	4413      	add	r3, r2
 80052e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fc:	2b3e      	cmp	r3, #62	; 0x3e
 80052fe:	d921      	bls.n	8005344 <USB_EPStartXfer+0x276>
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <USB_EPStartXfer+0x252>
 8005316:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800531a:	3b01      	subs	r3, #1
 800531c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29a      	uxth	r2, r3
 8005326:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800532a:	b29b      	uxth	r3, r3
 800532c:	029b      	lsls	r3, r3, #10
 800532e:	b29b      	uxth	r3, r3
 8005330:	4313      	orrs	r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533c:	b29a      	uxth	r2, r3
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	e050      	b.n	80053e6 <USB_EPStartXfer+0x318>
 8005344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <USB_EPStartXfer+0x294>
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535a:	b29a      	uxth	r2, r3
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	e041      	b.n	80053e6 <USB_EPStartXfer+0x318>
 8005362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800536c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d004      	beq.n	8005382 <USB_EPStartXfer+0x2b4>
 8005378:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800537c:	3301      	adds	r3, #1
 800537e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29a      	uxth	r2, r3
 8005388:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800538c:	b29b      	uxth	r3, r3
 800538e:	029b      	lsls	r3, r3, #10
 8005390:	b29b      	uxth	r3, r3
 8005392:	4313      	orrs	r3, r2
 8005394:	b29a      	uxth	r2, r3
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	e024      	b.n	80053e6 <USB_EPStartXfer+0x318>
 800539c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d11c      	bne.n	80053e6 <USB_EPStartXfer+0x318>
 80053ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	4413      	add	r3, r2
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
 80053c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	00da      	lsls	r2, r3, #3
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	4413      	add	r3, r2
 80053d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	895b      	ldrh	r3, [r3, #10]
 80053f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6959      	ldr	r1, [r3, #20]
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005406:	b29b      	uxth	r3, r3
 8005408:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800540c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005410:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005414:	6800      	ldr	r0, [r0, #0]
 8005416:	f001 fb45 	bl	8006aa4 <USB_WritePMA>
            ep->xfer_buff += len;
 800541a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800542a:	441a      	add	r2, r3
 800542c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	429a      	cmp	r2, r3
 8005452:	d90f      	bls.n	8005474 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005464:	1ad2      	subs	r2, r2, r3
 8005466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	621a      	str	r2, [r3, #32]
 8005472:	e00e      	b.n	8005492 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d177      	bne.n	8005592 <USB_EPStartXfer+0x4c4>
 80054a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	4413      	add	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	00da      	lsls	r2, r3, #3
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	4413      	add	r3, r2
 80054d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f2:	2b3e      	cmp	r3, #62	; 0x3e
 80054f4:	d921      	bls.n	800553a <USB_EPStartXfer+0x46c>
 80054f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	2b00      	cmp	r3, #0
 800550a:	d104      	bne.n	8005516 <USB_EPStartXfer+0x448>
 800550c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005510:	3b01      	subs	r3, #1
 8005512:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29a      	uxth	r2, r3
 800551c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005520:	b29b      	uxth	r3, r3
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	b29b      	uxth	r3, r3
 8005526:	4313      	orrs	r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e056      	b.n	80055e8 <USB_EPStartXfer+0x51a>
 800553a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <USB_EPStartXfer+0x48a>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005550:	b29a      	uxth	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	e047      	b.n	80055e8 <USB_EPStartXfer+0x51a>
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d004      	beq.n	8005578 <USB_EPStartXfer+0x4aa>
 800556e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005572:	3301      	adds	r3, #1
 8005574:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29a      	uxth	r2, r3
 800557e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005582:	b29b      	uxth	r3, r3
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	b29b      	uxth	r3, r3
 8005588:	4313      	orrs	r3, r2
 800558a:	b29a      	uxth	r2, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	e02a      	b.n	80055e8 <USB_EPStartXfer+0x51a>
 8005592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d122      	bne.n	80055e8 <USB_EPStartXfer+0x51a>
 80055a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	623b      	str	r3, [r7, #32]
 80055ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055bc:	b29b      	uxth	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	4413      	add	r3, r2
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	00da      	lsls	r2, r3, #3
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	4413      	add	r3, r2
 80055d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	891b      	ldrh	r3, [r3, #8]
 80055f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6959      	ldr	r1, [r3, #20]
 8005604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005608:	b29b      	uxth	r3, r3
 800560a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800560e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005612:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005616:	6800      	ldr	r0, [r0, #0]
 8005618:	f001 fa44 	bl	8006aa4 <USB_WritePMA>
 800561c:	e3ee      	b.n	8005dfc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800561e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d177      	bne.n	800571e <USB_EPStartXfer+0x650>
 800562e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	64bb      	str	r3, [r7, #72]	; 0x48
 800563a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005648:	b29b      	uxth	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800564e:	4413      	add	r3, r2
 8005650:	64bb      	str	r3, [r7, #72]	; 0x48
 8005652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	00da      	lsls	r2, r3, #3
 8005660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005662:	4413      	add	r3, r2
 8005664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005668:	647b      	str	r3, [r7, #68]	; 0x44
 800566a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005674:	b29a      	uxth	r2, r3
 8005676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567e:	2b3e      	cmp	r3, #62	; 0x3e
 8005680:	d921      	bls.n	80056c6 <USB_EPStartXfer+0x5f8>
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <USB_EPStartXfer+0x5d4>
 8005698:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800569c:	3b01      	subs	r3, #1
 800569e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	029b      	lsls	r3, r3, #10
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056be:	b29a      	uxth	r2, r3
 80056c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c2:	801a      	strh	r2, [r3, #0]
 80056c4:	e056      	b.n	8005774 <USB_EPStartXfer+0x6a6>
 80056c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <USB_EPStartXfer+0x616>
 80056ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e047      	b.n	8005774 <USB_EPStartXfer+0x6a6>
 80056e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e8:	085b      	lsrs	r3, r3, #1
 80056ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <USB_EPStartXfer+0x636>
 80056fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056fe:	3301      	adds	r3, #1
 8005700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29a      	uxth	r2, r3
 800570a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800570e:	b29b      	uxth	r3, r3
 8005710:	029b      	lsls	r3, r3, #10
 8005712:	b29b      	uxth	r3, r3
 8005714:	4313      	orrs	r3, r2
 8005716:	b29a      	uxth	r2, r3
 8005718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	e02a      	b.n	8005774 <USB_EPStartXfer+0x6a6>
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d122      	bne.n	8005774 <USB_EPStartXfer+0x6a6>
 800572e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	653b      	str	r3, [r7, #80]	; 0x50
 800573a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005748:	b29b      	uxth	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574e:	4413      	add	r3, r2
 8005750:	653b      	str	r3, [r7, #80]	; 0x50
 8005752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	00da      	lsls	r2, r3, #3
 8005760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005762:	4413      	add	r3, r2
 8005764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800576a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576e:	b29a      	uxth	r2, r3
 8005770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005772:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	891b      	ldrh	r3, [r3, #8]
 8005780:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6959      	ldr	r1, [r3, #20]
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005794:	b29b      	uxth	r3, r3
 8005796:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800579a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800579e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057a2:	6800      	ldr	r0, [r0, #0]
 80057a4:	f001 f97e 	bl	8006aa4 <USB_WritePMA>
            ep->xfer_buff += len;
 80057a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b8:	441a      	add	r2, r3
 80057ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6a1a      	ldr	r2, [r3, #32]
 80057d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d90f      	bls.n	8005802 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80057e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a1a      	ldr	r2, [r3, #32]
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	621a      	str	r2, [r3, #32]
 8005800:	e00e      	b.n	8005820 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2200      	movs	r2, #0
 800581e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	643b      	str	r3, [r7, #64]	; 0x40
 800582c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d177      	bne.n	800592c <USB_EPStartXfer+0x85e>
 800583c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	63bb      	str	r3, [r7, #56]	; 0x38
 8005848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005856:	b29b      	uxth	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	4413      	add	r3, r2
 800585e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	00da      	lsls	r2, r3, #3
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	4413      	add	r3, r2
 8005872:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005876:	637b      	str	r3, [r7, #52]	; 0x34
 8005878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005882:	b29a      	uxth	r2, r3
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588c:	2b3e      	cmp	r3, #62	; 0x3e
 800588e:	d921      	bls.n	80058d4 <USB_EPStartXfer+0x806>
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <USB_EPStartXfer+0x7e2>
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	3b01      	subs	r3, #1
 80058ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	029b      	lsls	r3, r3, #10
 80058be:	b29b      	uxth	r3, r3
 80058c0:	4313      	orrs	r3, r2
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	e050      	b.n	8005976 <USB_EPStartXfer+0x8a8>
 80058d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <USB_EPStartXfer+0x824>
 80058dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ee:	801a      	strh	r2, [r3, #0]
 80058f0:	e041      	b.n	8005976 <USB_EPStartXfer+0x8a8>
 80058f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <USB_EPStartXfer+0x844>
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590c:	3301      	adds	r3, #1
 800590e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29a      	uxth	r2, r3
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	b29b      	uxth	r3, r3
 800591e:	029b      	lsls	r3, r3, #10
 8005920:	b29b      	uxth	r3, r3
 8005922:	4313      	orrs	r3, r2
 8005924:	b29a      	uxth	r2, r3
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	e024      	b.n	8005976 <USB_EPStartXfer+0x8a8>
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d11c      	bne.n	8005976 <USB_EPStartXfer+0x8a8>
 800593c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005950:	4413      	add	r3, r2
 8005952:	643b      	str	r3, [r7, #64]	; 0x40
 8005954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	00da      	lsls	r2, r3, #3
 8005962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005964:	4413      	add	r3, r2
 8005966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005970:	b29a      	uxth	r2, r3
 8005972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005974:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	895b      	ldrh	r3, [r3, #10]
 8005982:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6959      	ldr	r1, [r3, #20]
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005996:	b29b      	uxth	r3, r3
 8005998:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800599c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059a4:	6800      	ldr	r0, [r0, #0]
 80059a6:	f001 f87d 	bl	8006aa4 <USB_WritePMA>
 80059aa:	e227      	b.n	8005dfc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80059bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	441a      	add	r2, r3
 8005a00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a38:	4413      	add	r3, r2
 8005a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	00da      	lsls	r2, r3, #3
 8005a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a52:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	891b      	ldrh	r3, [r3, #8]
 8005a6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6959      	ldr	r1, [r3, #20]
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a8c:	6800      	ldr	r0, [r0, #0]
 8005a8e:	f001 f809 	bl	8006aa4 <USB_WritePMA>
 8005a92:	e1b3      	b.n	8005dfc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6a1a      	ldr	r2, [r3, #32]
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa4:	1ad2      	subs	r2, r2, r3
 8005aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80c6 	beq.w	8005c66 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	673b      	str	r3, [r7, #112]	; 0x70
 8005ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d177      	bne.n	8005be6 <USB_EPStartXfer+0xb18>
 8005af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b16:	4413      	add	r3, r2
 8005b18:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	00da      	lsls	r2, r3, #3
 8005b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b30:	667b      	str	r3, [r7, #100]	; 0x64
 8005b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b46:	2b3e      	cmp	r3, #62	; 0x3e
 8005b48:	d921      	bls.n	8005b8e <USB_EPStartXfer+0xac0>
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <USB_EPStartXfer+0xa9c>
 8005b60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b64:	3b01      	subs	r3, #1
 8005b66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	029b      	lsls	r3, r3, #10
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	e050      	b.n	8005c30 <USB_EPStartXfer+0xb62>
 8005b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <USB_EPStartXfer+0xade>
 8005b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	e041      	b.n	8005c30 <USB_EPStartXfer+0xb62>
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <USB_EPStartXfer+0xafe>
 8005bc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	029b      	lsls	r3, r3, #10
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e024      	b.n	8005c30 <USB_EPStartXfer+0xb62>
 8005be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d11c      	bne.n	8005c30 <USB_EPStartXfer+0xb62>
 8005bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c0a:	4413      	add	r3, r2
 8005c0c:	673b      	str	r3, [r7, #112]	; 0x70
 8005c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	00da      	lsls	r2, r3, #3
 8005c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c1e:	4413      	add	r3, r2
 8005c20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	895b      	ldrh	r3, [r3, #10]
 8005c3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6959      	ldr	r1, [r3, #20]
 8005c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c5e:	6800      	ldr	r0, [r0, #0]
 8005c60:	f000 ff20 	bl	8006aa4 <USB_WritePMA>
 8005c64:	e0ca      	b.n	8005dfc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	785b      	ldrb	r3, [r3, #1]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d177      	bne.n	8005d66 <USB_EPStartXfer+0xc98>
 8005c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c96:	4413      	add	r3, r2
 8005c98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	00da      	lsls	r2, r3, #3
 8005ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005caa:	4413      	add	r3, r2
 8005cac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc8:	d921      	bls.n	8005d0e <USB_EPStartXfer+0xc40>
 8005cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d104      	bne.n	8005cea <USB_EPStartXfer+0xc1c>
 8005ce0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	029b      	lsls	r3, r3, #10
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	e05c      	b.n	8005dc8 <USB_EPStartXfer+0xcfa>
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <USB_EPStartXfer+0xc5e>
 8005d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	e04d      	b.n	8005dc8 <USB_EPStartXfer+0xcfa>
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <USB_EPStartXfer+0xc7e>
 8005d42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d46:	3301      	adds	r3, #1
 8005d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e030      	b.n	8005dc8 <USB_EPStartXfer+0xcfa>
 8005d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d128      	bne.n	8005dc8 <USB_EPStartXfer+0xcfa>
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	00da      	lsls	r2, r3, #3
 8005dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005db2:	4413      	add	r3, r2
 8005db4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	891b      	ldrh	r3, [r3, #8]
 8005dd4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6959      	ldr	r1, [r3, #20]
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005dee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005df2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005df6:	6800      	ldr	r0, [r0, #0]
 8005df8:	f000 fe54 	bl	8006aa4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e22:	817b      	strh	r3, [r7, #10]
 8005e24:	897b      	ldrh	r3, [r7, #10]
 8005e26:	f083 0310 	eor.w	r3, r3, #16
 8005e2a:	817b      	strh	r3, [r7, #10]
 8005e2c:	897b      	ldrh	r3, [r7, #10]
 8005e2e:	f083 0320 	eor.w	r3, r3, #32
 8005e32:	817b      	strh	r3, [r7, #10]
 8005e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	897b      	ldrh	r3, [r7, #10]
 8005e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	8013      	strh	r3, [r2, #0]
 8005e64:	f000 bcde 	b.w	8006824 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	7b1b      	ldrb	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 80bb 	bne.w	8005ff0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d917      	bls.n	8005ec6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	619a      	str	r2, [r3, #24]
 8005ec4:	e00e      	b.n	8005ee4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f08:	4413      	add	r3, r2
 8005f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	00da      	lsls	r2, r3, #3
 8005f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f20:	4413      	add	r3, r2
 8005f22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f42:	2b3e      	cmp	r3, #62	; 0x3e
 8005f44:	d924      	bls.n	8005f90 <USB_EPStartXfer+0xec2>
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <USB_EPStartXfer+0xe98>
 8005f5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f60:	3b01      	subs	r3, #1
 8005f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	029b      	lsls	r3, r3, #10
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	f000 bc10 	b.w	80067b0 <USB_EPStartXfer+0x16e2>
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10c      	bne.n	8005fb2 <USB_EPStartXfer+0xee4>
 8005f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	e3fe      	b.n	80067b0 <USB_EPStartXfer+0x16e2>
 8005fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb6:	085b      	lsrs	r3, r3, #1
 8005fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <USB_EPStartXfer+0xf04>
 8005fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fcc:	3301      	adds	r3, #1
 8005fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	029b      	lsls	r3, r3, #10
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	e3df      	b.n	80067b0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	78db      	ldrb	r3, [r3, #3]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	f040 8218 	bne.w	8006432 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 809d 	bne.w	800614e <USB_EPStartXfer+0x1080>
 8006014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006030:	b29b      	uxth	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006038:	4413      	add	r3, r2
 800603a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800603e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	00da      	lsls	r2, r3, #3
 800604c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006050:	4413      	add	r3, r2
 8006052:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800605a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006066:	b29a      	uxth	r2, r3
 8006068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b3e      	cmp	r3, #62	; 0x3e
 800607c:	d92b      	bls.n	80060d6 <USB_EPStartXfer+0x1008>
 800607e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <USB_EPStartXfer+0xfe0>
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a8:	3b01      	subs	r3, #1
 80060aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	029b      	lsls	r3, r3, #10
 80060be:	b29b      	uxth	r3, r3
 80060c0:	4313      	orrs	r3, r2
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	e070      	b.n	80061b8 <USB_EPStartXfer+0x10ea>
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10c      	bne.n	8006100 <USB_EPStartXfer+0x1032>
 80060e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	e05b      	b.n	80061b8 <USB_EPStartXfer+0x10ea>
 8006100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <USB_EPStartXfer+0x1062>
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	3301      	adds	r3, #1
 800612c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29a      	uxth	r2, r3
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613c:	b29b      	uxth	r3, r3
 800613e:	029b      	lsls	r3, r3, #10
 8006140:	b29b      	uxth	r3, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	b29a      	uxth	r2, r3
 8006146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	e034      	b.n	80061b8 <USB_EPStartXfer+0x10ea>
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d12c      	bne.n	80061b8 <USB_EPStartXfer+0x10ea>
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800616c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006182:	4413      	add	r3, r2
 8006184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	00da      	lsls	r2, r3, #3
 8006196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800619a:	4413      	add	r3, r2
 800619c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f040 809d 	bne.w	8006312 <USB_EPStartXfer+0x1244>
 80061d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061fc:	4413      	add	r3, r2
 80061fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	00da      	lsls	r2, r3, #3
 8006210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006214:	4413      	add	r3, r2
 8006216:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800621a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800621e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b3e      	cmp	r3, #62	; 0x3e
 8006240:	d92b      	bls.n	800629a <USB_EPStartXfer+0x11cc>
 8006242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <USB_EPStartXfer+0x11a4>
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626c:	3b01      	subs	r3, #1
 800626e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006272:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627e:	b29b      	uxth	r3, r3
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	b29b      	uxth	r3, r3
 8006284:	4313      	orrs	r3, r2
 8006286:	b29b      	uxth	r3, r3
 8006288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006290:	b29a      	uxth	r2, r3
 8006292:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e069      	b.n	800636e <USB_EPStartXfer+0x12a0>
 800629a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10c      	bne.n	80062c4 <USB_EPStartXfer+0x11f6>
 80062aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	e054      	b.n	800636e <USB_EPStartXfer+0x12a0>
 80062c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	085b      	lsrs	r3, r3, #1
 80062d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <USB_EPStartXfer+0x1226>
 80062ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ee:	3301      	adds	r3, #1
 80062f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006300:	b29b      	uxth	r3, r3
 8006302:	029b      	lsls	r3, r3, #10
 8006304:	b29b      	uxth	r3, r3
 8006306:	4313      	orrs	r3, r2
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e02d      	b.n	800636e <USB_EPStartXfer+0x12a0>
 8006312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d125      	bne.n	800636e <USB_EPStartXfer+0x12a0>
 8006322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006330:	b29b      	uxth	r3, r3
 8006332:	461a      	mov	r2, r3
 8006334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006338:	4413      	add	r3, r2
 800633a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800633e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	00da      	lsls	r2, r3, #3
 800634c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006350:	4413      	add	r3, r2
 8006352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800635a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	b29a      	uxth	r2, r3
 8006368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800636c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8218 	beq.w	80067b0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <USB_EPStartXfer+0x12ea>
 80063ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 81f5 	bne.w	80067b0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 81ee 	bne.w	80067b0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80063d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	441a      	add	r2, r3
 8006418:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800641c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006428:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800642c:	b29b      	uxth	r3, r3
 800642e:	8013      	strh	r3, [r2, #0]
 8006430:	e1be      	b.n	80067b0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	78db      	ldrb	r3, [r3, #3]
 800643e:	2b01      	cmp	r3, #1
 8006440:	f040 81b4 	bne.w	80067ac <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	429a      	cmp	r2, r3
 800645e:	d917      	bls.n	8006490 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699a      	ldr	r2, [r3, #24]
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006480:	1ad2      	subs	r2, r2, r3
 8006482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	619a      	str	r2, [r3, #24]
 800648e:	e00e      	b.n	80064ae <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 8085 	bne.w	80065ca <USB_EPStartXfer+0x14fc>
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064dc:	b29b      	uxth	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064e4:	4413      	add	r3, r2
 80064e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	00da      	lsls	r2, r3, #3
 80064f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064fc:	4413      	add	r3, r2
 80064fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006502:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006512:	b29a      	uxth	r2, r3
 8006514:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651e:	2b3e      	cmp	r3, #62	; 0x3e
 8006520:	d923      	bls.n	800656a <USB_EPStartXfer+0x149c>
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <USB_EPStartXfer+0x1474>
 8006538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800653c:	3b01      	subs	r3, #1
 800653e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29a      	uxth	r2, r3
 800654a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800654e:	b29b      	uxth	r3, r3
 8006550:	029b      	lsls	r3, r3, #10
 8006552:	b29b      	uxth	r3, r3
 8006554:	4313      	orrs	r3, r2
 8006556:	b29b      	uxth	r3, r3
 8006558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006560:	b29a      	uxth	r2, r3
 8006562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	e060      	b.n	800662c <USB_EPStartXfer+0x155e>
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10c      	bne.n	800658c <USB_EPStartXfer+0x14be>
 8006572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006582:	b29a      	uxth	r2, r3
 8006584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006588:	801a      	strh	r2, [r3, #0]
 800658a:	e04f      	b.n	800662c <USB_EPStartXfer+0x155e>
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <USB_EPStartXfer+0x14de>
 80065a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a6:	3301      	adds	r3, #1
 80065a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	029b      	lsls	r3, r3, #10
 80065bc:	b29b      	uxth	r3, r3
 80065be:	4313      	orrs	r3, r2
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	e030      	b.n	800662c <USB_EPStartXfer+0x155e>
 80065ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d128      	bne.n	800662c <USB_EPStartXfer+0x155e>
 80065da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065fe:	4413      	add	r3, r2
 8006600:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	00da      	lsls	r2, r3, #3
 8006612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006616:	4413      	add	r3, r2
 8006618:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800661c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006624:	b29a      	uxth	r2, r3
 8006626:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800663a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b00      	cmp	r3, #0
 8006648:	f040 8085 	bne.w	8006756 <USB_EPStartXfer+0x1688>
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800665a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006670:	4413      	add	r3, r2
 8006672:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	00da      	lsls	r2, r3, #3
 8006684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006688:	4413      	add	r3, r2
 800668a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800668e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066aa:	2b3e      	cmp	r3, #62	; 0x3e
 80066ac:	d923      	bls.n	80066f6 <USB_EPStartXfer+0x1628>
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <USB_EPStartXfer+0x1600>
 80066c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c8:	3b01      	subs	r3, #1
 80066ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066da:	b29b      	uxth	r3, r3
 80066dc:	029b      	lsls	r3, r3, #10
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4313      	orrs	r3, r2
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f2:	801a      	strh	r2, [r3, #0]
 80066f4:	e05c      	b.n	80067b0 <USB_EPStartXfer+0x16e2>
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10c      	bne.n	8006718 <USB_EPStartXfer+0x164a>
 80066fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29a      	uxth	r2, r3
 8006710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e04b      	b.n	80067b0 <USB_EPStartXfer+0x16e2>
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USB_EPStartXfer+0x166a>
 800672e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006732:	3301      	adds	r3, #1
 8006734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	b29a      	uxth	r2, r3
 8006740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006744:	b29b      	uxth	r3, r3
 8006746:	029b      	lsls	r3, r3, #10
 8006748:	b29b      	uxth	r3, r3
 800674a:	4313      	orrs	r3, r2
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e02c      	b.n	80067b0 <USB_EPStartXfer+0x16e2>
 8006756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	785b      	ldrb	r3, [r3, #1]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d124      	bne.n	80067b0 <USB_EPStartXfer+0x16e2>
 8006766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006774:	b29b      	uxth	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800677c:	4413      	add	r3, r2
 800677e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	00da      	lsls	r2, r3, #3
 8006790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006794:	4413      	add	r3, r2
 8006796:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800679a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	e001      	b.n	80067b0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e03a      	b.n	8006826 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067ee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80067f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	441a      	add	r2, r3
 800680c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006820:	b29b      	uxth	r3, r3
 8006822:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d020      	beq.n	8006884 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	81bb      	strh	r3, [r7, #12]
 800685a:	89bb      	ldrh	r3, [r7, #12]
 800685c:	f083 0310 	eor.w	r3, r3, #16
 8006860:	81bb      	strh	r3, [r7, #12]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	89bb      	ldrh	r3, [r7, #12]
 800686e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687e:	b29b      	uxth	r3, r3
 8006880:	8013      	strh	r3, [r2, #0]
 8006882:	e01f      	b.n	80068c4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689a:	81fb      	strh	r3, [r7, #14]
 800689c:	89fb      	ldrh	r3, [r7, #14]
 800689e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068a2:	81fb      	strh	r3, [r7, #14]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	89fb      	ldrh	r3, [r7, #14]
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b087      	sub	sp, #28
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	7b1b      	ldrb	r3, [r3, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 809d 	bne.w	8006a20 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d04c      	beq.n	8006988 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	823b      	strh	r3, [r7, #16]
 80068fc:	8a3b      	ldrh	r3, [r7, #16]
 80068fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01b      	beq.n	800693e <USB_EPClearStall+0x6c>
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691c:	81fb      	strh	r3, [r7, #14]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006936:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	78db      	ldrb	r3, [r3, #3]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d06c      	beq.n	8006a20 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800695c:	81bb      	strh	r3, [r7, #12]
 800695e:	89bb      	ldrh	r3, [r7, #12]
 8006960:	f083 0320 	eor.w	r3, r3, #32
 8006964:	81bb      	strh	r3, [r7, #12]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	89bb      	ldrh	r3, [r7, #12]
 8006972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]
 8006986:	e04b      	b.n	8006a20 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	82fb      	strh	r3, [r7, #22]
 8006996:	8afb      	ldrh	r3, [r7, #22]
 8006998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01b      	beq.n	80069d8 <USB_EPClearStall+0x106>
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b6:	82bb      	strh	r3, [r7, #20]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	8abb      	ldrh	r3, [r7, #20]
 80069c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	827b      	strh	r3, [r7, #18]
 80069f0:	8a7b      	ldrh	r3, [r7, #18]
 80069f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069f6:	827b      	strh	r3, [r7, #18]
 80069f8:	8a7b      	ldrh	r3, [r7, #18]
 80069fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069fe:	827b      	strh	r3, [r7, #18]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	441a      	add	r2, r3
 8006a0a:	8a7b      	ldrh	r3, [r7, #18]
 8006a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2280      	movs	r2, #128	; 0x80
 8006a44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b08b      	sub	sp, #44	; 0x2c
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	80fb      	strh	r3, [r7, #6]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006aba:	88bb      	ldrh	r3, [r7, #4]
 8006abc:	3301      	adds	r3, #1
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8006ada:	e01b      	b.n	8006b14 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	b21a      	sxth	r2, r3
 8006aec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b21b      	sxth	r3, r3
 8006af4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	8a7a      	ldrh	r2, [r7, #18]
 8006afa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	3302      	adds	r3, #2
 8006b00:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	3301      	adds	r3, #1
 8006b06:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	3b01      	subs	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e0      	bne.n	8006adc <USB_WritePMA+0x38>
  }
}
 8006b1a:	bf00      	nop
 8006b1c:	bf00      	nop
 8006b1e:	372c      	adds	r7, #44	; 0x2c
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b08b      	sub	sp, #44	; 0x2c
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4611      	mov	r1, r2
 8006b34:	461a      	mov	r2, r3
 8006b36:	460b      	mov	r3, r1
 8006b38:	80fb      	strh	r3, [r7, #6]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b3e:	88bb      	ldrh	r3, [r7, #4]
 8006b40:	085b      	lsrs	r3, r3, #1
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5e:	e018      	b.n	8006b92 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	0a1b      	lsrs	r3, r3, #8
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e3      	bne.n	8006b60 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006b98:	88bb      	ldrh	r3, [r7, #4]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d007      	beq.n	8006bb4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	701a      	strb	r2, [r3, #0]
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	372c      	adds	r7, #44	; 0x2c
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bd0:	f002 fc06 	bl	80093e0 <USBD_static_malloc>
 8006bd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	32b0      	adds	r2, #176	; 0xb0
 8006be6:	2100      	movs	r1, #0
 8006be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006bec:	2302      	movs	r3, #2
 8006bee:	e0d4      	b.n	8006d9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006bf0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f002 fc3c 	bl	8009474 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	32b0      	adds	r2, #176	; 0xb0
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	32b0      	adds	r2, #176	; 0xb0
 8006c16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7c1b      	ldrb	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d138      	bne.n	8006c9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c28:	4b5e      	ldr	r3, [pc, #376]	; (8006da4 <USBD_CDC_Init+0x1e4>)
 8006c2a:	7819      	ldrb	r1, [r3, #0]
 8006c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c30:	2202      	movs	r2, #2
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f002 fa7b 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c38:	4b5a      	ldr	r3, [pc, #360]	; (8006da4 <USBD_CDC_Init+0x1e4>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f003 020f 	and.w	r2, r3, #15
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3324      	adds	r3, #36	; 0x24
 8006c4e:	2201      	movs	r2, #1
 8006c50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c52:	4b55      	ldr	r3, [pc, #340]	; (8006da8 <USBD_CDC_Init+0x1e8>)
 8006c54:	7819      	ldrb	r1, [r3, #0]
 8006c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f002 fa66 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c62:	4b51      	ldr	r3, [pc, #324]	; (8006da8 <USBD_CDC_Init+0x1e8>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	f003 020f 	and.w	r2, r3, #15
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c7e:	4b4b      	ldr	r3, [pc, #300]	; (8006dac <USBD_CDC_Init+0x1ec>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f003 020f 	and.w	r2, r3, #15
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	440b      	add	r3, r1
 8006c92:	3326      	adds	r3, #38	; 0x26
 8006c94:	2210      	movs	r2, #16
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	e035      	b.n	8006d06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c9a:	4b42      	ldr	r3, [pc, #264]	; (8006da4 <USBD_CDC_Init+0x1e4>)
 8006c9c:	7819      	ldrb	r1, [r3, #0]
 8006c9e:	2340      	movs	r3, #64	; 0x40
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f002 fa43 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ca8:	4b3e      	ldr	r3, [pc, #248]	; (8006da4 <USBD_CDC_Init+0x1e4>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 020f 	and.w	r2, r3, #15
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	3324      	adds	r3, #36	; 0x24
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006cc2:	4b39      	ldr	r3, [pc, #228]	; (8006da8 <USBD_CDC_Init+0x1e8>)
 8006cc4:	7819      	ldrb	r1, [r3, #0]
 8006cc6:	2340      	movs	r3, #64	; 0x40
 8006cc8:	2202      	movs	r2, #2
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f002 fa2f 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006cd0:	4b35      	ldr	r3, [pc, #212]	; (8006da8 <USBD_CDC_Init+0x1e8>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	f003 020f 	and.w	r2, r3, #15
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	440b      	add	r3, r1
 8006ce4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ce8:	2201      	movs	r2, #1
 8006cea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cec:	4b2f      	ldr	r3, [pc, #188]	; (8006dac <USBD_CDC_Init+0x1ec>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f003 020f 	and.w	r2, r3, #15
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	3326      	adds	r3, #38	; 0x26
 8006d02:	2210      	movs	r2, #16
 8006d04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d06:	4b29      	ldr	r3, [pc, #164]	; (8006dac <USBD_CDC_Init+0x1ec>)
 8006d08:	7819      	ldrb	r1, [r3, #0]
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f002 fa0d 	bl	800912e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006d14:	4b25      	ldr	r3, [pc, #148]	; (8006dac <USBD_CDC_Init+0x1ec>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f003 020f 	and.w	r2, r3, #15
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	440b      	add	r3, r1
 8006d28:	3324      	adds	r3, #36	; 0x24
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	33b0      	adds	r3, #176	; 0xb0
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d64:	2302      	movs	r3, #2
 8006d66:	e018      	b.n	8006d9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	7c1b      	ldrb	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d70:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <USBD_CDC_Init+0x1e8>)
 8006d72:	7819      	ldrb	r1, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f002 fac4 	bl	800930c <USBD_LL_PrepareReceive>
 8006d84:	e008      	b.n	8006d98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d86:	4b08      	ldr	r3, [pc, #32]	; (8006da8 <USBD_CDC_Init+0x1e8>)
 8006d88:	7819      	ldrb	r1, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d90:	2340      	movs	r3, #64	; 0x40
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f002 faba 	bl	800930c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2000009b 	.word	0x2000009b
 8006da8:	2000009c 	.word	0x2000009c
 8006dac:	2000009d 	.word	0x2000009d

08006db0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006dbc:	4b3a      	ldr	r3, [pc, #232]	; (8006ea8 <USBD_CDC_DeInit+0xf8>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f002 f9d9 	bl	800917a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006dc8:	4b37      	ldr	r3, [pc, #220]	; (8006ea8 <USBD_CDC_DeInit+0xf8>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	f003 020f 	and.w	r2, r3, #15
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	440b      	add	r3, r1
 8006ddc:	3324      	adds	r3, #36	; 0x24
 8006dde:	2200      	movs	r2, #0
 8006de0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006de2:	4b32      	ldr	r3, [pc, #200]	; (8006eac <USBD_CDC_DeInit+0xfc>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f002 f9c6 	bl	800917a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006dee:	4b2f      	ldr	r3, [pc, #188]	; (8006eac <USBD_CDC_DeInit+0xfc>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	f003 020f 	and.w	r2, r3, #15
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	440b      	add	r3, r1
 8006e02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e06:	2200      	movs	r2, #0
 8006e08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006e0a:	4b29      	ldr	r3, [pc, #164]	; (8006eb0 <USBD_CDC_DeInit+0x100>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f002 f9b2 	bl	800917a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006e16:	4b26      	ldr	r3, [pc, #152]	; (8006eb0 <USBD_CDC_DeInit+0x100>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f003 020f 	and.w	r2, r3, #15
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	3324      	adds	r3, #36	; 0x24
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e30:	4b1f      	ldr	r3, [pc, #124]	; (8006eb0 <USBD_CDC_DeInit+0x100>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	f003 020f 	and.w	r2, r3, #15
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	440b      	add	r3, r1
 8006e44:	3326      	adds	r3, #38	; 0x26
 8006e46:	2200      	movs	r2, #0
 8006e48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32b0      	adds	r2, #176	; 0xb0
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01f      	beq.n	8006e9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	33b0      	adds	r3, #176	; 0xb0
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	32b0      	adds	r2, #176	; 0xb0
 8006e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f002 fabc 	bl	80093fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	32b0      	adds	r2, #176	; 0xb0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000009b 	.word	0x2000009b
 8006eac:	2000009c 	.word	0x2000009c
 8006eb0:	2000009d 	.word	0x2000009d

08006eb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	32b0      	adds	r2, #176	; 0xb0
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e0bf      	b.n	8007064 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d050      	beq.n	8006f92 <USBD_CDC_Setup+0xde>
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	f040 80af 	bne.w	8007054 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	88db      	ldrh	r3, [r3, #6]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d03a      	beq.n	8006f74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b25b      	sxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da1b      	bge.n	8006f40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	33b0      	adds	r3, #176	; 0xb0
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	88d2      	ldrh	r2, [r2, #6]
 8006f24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	88db      	ldrh	r3, [r3, #6]
 8006f2a:	2b07      	cmp	r3, #7
 8006f2c:	bf28      	it	cs
 8006f2e:	2307      	movcs	r3, #7
 8006f30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	89fa      	ldrh	r2, [r7, #14]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fce1 	bl	8008900 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f3e:	e090      	b.n	8007062 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	785a      	ldrb	r2, [r3, #1]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	88db      	ldrh	r3, [r3, #6]
 8006f4e:	2b3f      	cmp	r3, #63	; 0x3f
 8006f50:	d803      	bhi.n	8006f5a <USBD_CDC_Setup+0xa6>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	88db      	ldrh	r3, [r3, #6]
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	e000      	b.n	8006f5c <USBD_CDC_Setup+0xa8>
 8006f5a:	2240      	movs	r2, #64	; 0x40
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f62:	6939      	ldr	r1, [r7, #16]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 fcf3 	bl	8008958 <USBD_CtlPrepareRx>
      break;
 8006f72:	e076      	b.n	8007062 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	33b0      	adds	r3, #176	; 0xb0
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	7850      	ldrb	r0, [r2, #1]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	4798      	blx	r3
      break;
 8006f90:	e067      	b.n	8007062 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	785b      	ldrb	r3, [r3, #1]
 8006f96:	2b0b      	cmp	r3, #11
 8006f98:	d851      	bhi.n	800703e <USBD_CDC_Setup+0x18a>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBD_CDC_Setup+0xec>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fd1 	.word	0x08006fd1
 8006fa4:	0800704d 	.word	0x0800704d
 8006fa8:	0800703f 	.word	0x0800703f
 8006fac:	0800703f 	.word	0x0800703f
 8006fb0:	0800703f 	.word	0x0800703f
 8006fb4:	0800703f 	.word	0x0800703f
 8006fb8:	0800703f 	.word	0x0800703f
 8006fbc:	0800703f 	.word	0x0800703f
 8006fc0:	0800703f 	.word	0x0800703f
 8006fc4:	0800703f 	.word	0x0800703f
 8006fc8:	08006ffb 	.word	0x08006ffb
 8006fcc:	08007025 	.word	0x08007025
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d107      	bne.n	8006fec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fdc:	f107 030a 	add.w	r3, r7, #10
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fc8b 	bl	8008900 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fea:	e032      	b.n	8007052 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 fc15 	bl	800881e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ff8:	e02b      	b.n	8007052 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b03      	cmp	r3, #3
 8007004:	d107      	bne.n	8007016 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007006:	f107 030d 	add.w	r3, r7, #13
 800700a:	2201      	movs	r2, #1
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fc76 	bl	8008900 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007014:	e01d      	b.n	8007052 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fc00 	bl	800881e <USBD_CtlError>
            ret = USBD_FAIL;
 800701e:	2303      	movs	r3, #3
 8007020:	75fb      	strb	r3, [r7, #23]
          break;
 8007022:	e016      	b.n	8007052 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b03      	cmp	r3, #3
 800702e:	d00f      	beq.n	8007050 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 fbf3 	bl	800881e <USBD_CtlError>
            ret = USBD_FAIL;
 8007038:	2303      	movs	r3, #3
 800703a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800703c:	e008      	b.n	8007050 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 fbec 	bl	800881e <USBD_CtlError>
          ret = USBD_FAIL;
 8007046:	2303      	movs	r3, #3
 8007048:	75fb      	strb	r3, [r7, #23]
          break;
 800704a:	e002      	b.n	8007052 <USBD_CDC_Setup+0x19e>
          break;
 800704c:	bf00      	nop
 800704e:	e008      	b.n	8007062 <USBD_CDC_Setup+0x1ae>
          break;
 8007050:	bf00      	nop
      }
      break;
 8007052:	e006      	b.n	8007062 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 fbe1 	bl	800881e <USBD_CtlError>
      ret = USBD_FAIL;
 800705c:	2303      	movs	r3, #3
 800705e:	75fb      	strb	r3, [r7, #23]
      break;
 8007060:	bf00      	nop
  }

  return (uint8_t)ret;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800707e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	32b0      	adds	r2, #176	; 0xb0
 800708a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007092:	2303      	movs	r3, #3
 8007094:	e065      	b.n	8007162 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	32b0      	adds	r2, #176	; 0xb0
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	3318      	adds	r3, #24
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d02f      	beq.n	8007120 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	f003 020f 	and.w	r2, r3, #15
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	3318      	adds	r3, #24
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	f003 010f 	and.w	r1, r3, #15
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	460b      	mov	r3, r1
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	4403      	add	r3, r0
 80070e8:	3320      	adds	r3, #32
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d112      	bne.n	8007120 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	3318      	adds	r3, #24
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007112:	78f9      	ldrb	r1, [r7, #3]
 8007114:	2300      	movs	r3, #0
 8007116:	2200      	movs	r2, #0
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f002 f8d6 	bl	80092ca <USBD_LL_Transmit>
 800711e:	e01f      	b.n	8007160 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	33b0      	adds	r3, #176	; 0xb0
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d010      	beq.n	8007160 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	33b0      	adds	r3, #176	; 0xb0
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800715c:	78fa      	ldrb	r2, [r7, #3]
 800715e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	32b0      	adds	r2, #176	; 0xb0
 8007180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007184:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	32b0      	adds	r2, #176	; 0xb0
 8007190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	e01a      	b.n	80071d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f002 f8d4 	bl	800934e <USBD_LL_GetRxDataSize>
 80071a6:	4602      	mov	r2, r0
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	33b0      	adds	r3, #176	; 0xb0
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071cc:	4611      	mov	r1, r2
 80071ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	32b0      	adds	r2, #176	; 0xb0
 80071ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e025      	b.n	8007248 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	33b0      	adds	r3, #176	; 0xb0
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01a      	beq.n	8007246 <USBD_CDC_EP0_RxReady+0x6c>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007216:	2bff      	cmp	r3, #255	; 0xff
 8007218:	d015      	beq.n	8007246 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	33b0      	adds	r3, #176	; 0xb0
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007232:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800723a:	b292      	uxth	r2, r2
 800723c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	22ff      	movs	r2, #255	; 0xff
 8007242:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007258:	2182      	movs	r1, #130	; 0x82
 800725a:	4818      	ldr	r0, [pc, #96]	; (80072bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800725c:	f000 fc7d 	bl	8007b5a <USBD_GetEpDesc>
 8007260:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007262:	2101      	movs	r1, #1
 8007264:	4815      	ldr	r0, [pc, #84]	; (80072bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007266:	f000 fc78 	bl	8007b5a <USBD_GetEpDesc>
 800726a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800726c:	2181      	movs	r1, #129	; 0x81
 800726e:	4813      	ldr	r0, [pc, #76]	; (80072bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007270:	f000 fc73 	bl	8007b5a <USBD_GetEpDesc>
 8007274:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2210      	movs	r2, #16
 8007280:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d006      	beq.n	8007296 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2200      	movs	r2, #0
 800728c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007290:	711a      	strb	r2, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d006      	beq.n	80072aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a4:	711a      	strb	r2, [r3, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2243      	movs	r2, #67	; 0x43
 80072ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072b0:	4b02      	ldr	r3, [pc, #8]	; (80072bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000058 	.word	0x20000058

080072c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072c8:	2182      	movs	r1, #130	; 0x82
 80072ca:	4818      	ldr	r0, [pc, #96]	; (800732c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072cc:	f000 fc45 	bl	8007b5a <USBD_GetEpDesc>
 80072d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072d2:	2101      	movs	r1, #1
 80072d4:	4815      	ldr	r0, [pc, #84]	; (800732c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072d6:	f000 fc40 	bl	8007b5a <USBD_GetEpDesc>
 80072da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072dc:	2181      	movs	r1, #129	; 0x81
 80072de:	4813      	ldr	r0, [pc, #76]	; (800732c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072e0:	f000 fc3b 	bl	8007b5a <USBD_GetEpDesc>
 80072e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2210      	movs	r2, #16
 80072f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2200      	movs	r2, #0
 80072fc:	711a      	strb	r2, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f042 0202 	orr.w	r2, r2, #2
 8007304:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	711a      	strb	r2, [r3, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f042 0202 	orr.w	r2, r2, #2
 8007318:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2243      	movs	r2, #67	; 0x43
 800731e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007320:	4b02      	ldr	r3, [pc, #8]	; (800732c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000058 	.word	0x20000058

08007330 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007338:	2182      	movs	r1, #130	; 0x82
 800733a:	4818      	ldr	r0, [pc, #96]	; (800739c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800733c:	f000 fc0d 	bl	8007b5a <USBD_GetEpDesc>
 8007340:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007342:	2101      	movs	r1, #1
 8007344:	4815      	ldr	r0, [pc, #84]	; (800739c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007346:	f000 fc08 	bl	8007b5a <USBD_GetEpDesc>
 800734a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800734c:	2181      	movs	r1, #129	; 0x81
 800734e:	4813      	ldr	r0, [pc, #76]	; (800739c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007350:	f000 fc03 	bl	8007b5a <USBD_GetEpDesc>
 8007354:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2210      	movs	r2, #16
 8007360:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d006      	beq.n	8007376 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2200      	movs	r2, #0
 800736c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007370:	711a      	strb	r2, [r3, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007384:	711a      	strb	r2, [r3, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2243      	movs	r2, #67	; 0x43
 800738e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000058 	.word	0x20000058

080073a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	220a      	movs	r2, #10
 80073ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80073ae:	4b03      	ldr	r3, [pc, #12]	; (80073bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20000014 	.word	0x20000014

080073c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e009      	b.n	80073e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	33b0      	adds	r3, #176	; 0xb0
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	32b0      	adds	r2, #176	; 0xb0
 800740a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007416:	2303      	movs	r3, #3
 8007418:	e008      	b.n	800742c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	32b0      	adds	r2, #176	; 0xb0
 800744c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007450:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007458:	2303      	movs	r3, #3
 800745a:	e004      	b.n	8007466 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	32b0      	adds	r2, #176	; 0xb0
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32b0      	adds	r2, #176	; 0xb0
 8007496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800749e:	2303      	movs	r3, #3
 80074a0:	e018      	b.n	80074d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	7c1b      	ldrb	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074aa:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <USBD_CDC_ReceivePacket+0x68>)
 80074ac:	7819      	ldrb	r1, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 ff27 	bl	800930c <USBD_LL_PrepareReceive>
 80074be:	e008      	b.n	80074d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <USBD_CDC_ReceivePacket+0x68>)
 80074c2:	7819      	ldrb	r1, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074ca:	2340      	movs	r3, #64	; 0x40
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 ff1d 	bl	800930c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	2000009c 	.word	0x2000009c

080074e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e01f      	b.n	8007538 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	79fa      	ldrb	r2, [r7, #7]
 800752a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f001 fd81 	bl	8009034 <USBD_LL_Init>
 8007532:	4603      	mov	r3, r0
 8007534:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007554:	2303      	movs	r3, #3
 8007556:	e025      	b.n	80075a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32ae      	adds	r2, #174	; 0xae
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00f      	beq.n	8007594 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	32ae      	adds	r2, #174	; 0xae
 800757e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	f107 020e 	add.w	r2, r7, #14
 8007588:	4610      	mov	r0, r2
 800758a:	4798      	blx	r3
 800758c:	4602      	mov	r2, r0
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 fd9f 	bl	80090f8 <USBD_LL_Start>
 80075ba:	4603      	mov	r3, r0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d009      	beq.n	8007608 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	78fa      	ldrb	r2, [r7, #3]
 80075fe:	4611      	mov	r1, r2
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	78fa      	ldrb	r2, [r7, #3]
 800762c:	4611      	mov	r1, r2
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f001 f8a6 	bl	80087aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800766c:	461a      	mov	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800767a:	f003 031f 	and.w	r3, r3, #31
 800767e:	2b02      	cmp	r3, #2
 8007680:	d01a      	beq.n	80076b8 <USBD_LL_SetupStage+0x72>
 8007682:	2b02      	cmp	r3, #2
 8007684:	d822      	bhi.n	80076cc <USBD_LL_SetupStage+0x86>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <USBD_LL_SetupStage+0x4a>
 800768a:	2b01      	cmp	r3, #1
 800768c:	d00a      	beq.n	80076a4 <USBD_LL_SetupStage+0x5e>
 800768e:	e01d      	b.n	80076cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fad3 	bl	8007c44 <USBD_StdDevReq>
 800769e:	4603      	mov	r3, r0
 80076a0:	73fb      	strb	r3, [r7, #15]
      break;
 80076a2:	e020      	b.n	80076e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fb3b 	bl	8007d28 <USBD_StdItfReq>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
      break;
 80076b6:	e016      	b.n	80076e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb9d 	bl	8007e00 <USBD_StdEPReq>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73fb      	strb	r3, [r7, #15]
      break;
 80076ca:	e00c      	b.n	80076e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fd6c 	bl	80091b8 <USBD_LL_StallEP>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]
      break;
 80076e4:	bf00      	nop
  }

  return ret;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	460b      	mov	r3, r1
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007702:	7afb      	ldrb	r3, [r7, #11]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d16e      	bne.n	80077e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800770e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007716:	2b03      	cmp	r3, #3
 8007718:	f040 8098 	bne.w	800784c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	429a      	cmp	r2, r3
 8007726:	d913      	bls.n	8007750 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	1ad2      	subs	r2, r2, r3
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	4293      	cmp	r3, r2
 8007740:	bf28      	it	cs
 8007742:	4613      	movcs	r3, r2
 8007744:	461a      	mov	r2, r3
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f001 f922 	bl	8008992 <USBD_CtlContinueRx>
 800774e:	e07d      	b.n	800784c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007756:	f003 031f 	and.w	r3, r3, #31
 800775a:	2b02      	cmp	r3, #2
 800775c:	d014      	beq.n	8007788 <USBD_LL_DataOutStage+0x98>
 800775e:	2b02      	cmp	r3, #2
 8007760:	d81d      	bhi.n	800779e <USBD_LL_DataOutStage+0xae>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <USBD_LL_DataOutStage+0x7c>
 8007766:	2b01      	cmp	r3, #1
 8007768:	d003      	beq.n	8007772 <USBD_LL_DataOutStage+0x82>
 800776a:	e018      	b.n	800779e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	75bb      	strb	r3, [r7, #22]
            break;
 8007770:	e018      	b.n	80077a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4619      	mov	r1, r3
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f9d2 	bl	8007b26 <USBD_CoreFindIF>
 8007782:	4603      	mov	r3, r0
 8007784:	75bb      	strb	r3, [r7, #22]
            break;
 8007786:	e00d      	b.n	80077a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800778e:	b2db      	uxtb	r3, r3
 8007790:	4619      	mov	r1, r3
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 f9d4 	bl	8007b40 <USBD_CoreFindEP>
 8007798:	4603      	mov	r3, r0
 800779a:	75bb      	strb	r3, [r7, #22]
            break;
 800779c:	e002      	b.n	80077a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	75bb      	strb	r3, [r7, #22]
            break;
 80077a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80077a4:	7dbb      	ldrb	r3, [r7, #22]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d119      	bne.n	80077de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d113      	bne.n	80077de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80077b6:	7dba      	ldrb	r2, [r7, #22]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	32ae      	adds	r2, #174	; 0xae
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80077c6:	7dba      	ldrb	r2, [r7, #22]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80077ce:	7dba      	ldrb	r2, [r7, #22]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	32ae      	adds	r2, #174	; 0xae
 80077d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f001 f8e8 	bl	80089b4 <USBD_CtlSendStatus>
 80077e4:	e032      	b.n	800784c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80077e6:	7afb      	ldrb	r3, [r7, #11]
 80077e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	4619      	mov	r1, r3
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f9a5 	bl	8007b40 <USBD_CoreFindEP>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
 80077fc:	2bff      	cmp	r3, #255	; 0xff
 80077fe:	d025      	beq.n	800784c <USBD_LL_DataOutStage+0x15c>
 8007800:	7dbb      	ldrb	r3, [r7, #22]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d122      	bne.n	800784c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b03      	cmp	r3, #3
 8007810:	d117      	bne.n	8007842 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007812:	7dba      	ldrb	r2, [r7, #22]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	32ae      	adds	r2, #174	; 0xae
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00f      	beq.n	8007842 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007822:	7dba      	ldrb	r2, [r7, #22]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800782a:	7dba      	ldrb	r2, [r7, #22]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	32ae      	adds	r2, #174	; 0xae
 8007830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	7afa      	ldrb	r2, [r7, #11]
 8007838:	4611      	mov	r1, r2
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	4798      	blx	r3
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	e000      	b.n	800784e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b086      	sub	sp, #24
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	460b      	mov	r3, r1
 8007860:	607a      	str	r2, [r7, #4]
 8007862:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007864:	7afb      	ldrb	r3, [r7, #11]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d16f      	bne.n	800794a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3314      	adds	r3, #20
 800786e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007876:	2b02      	cmp	r3, #2
 8007878:	d15a      	bne.n	8007930 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	689a      	ldr	r2, [r3, #8]
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	429a      	cmp	r2, r3
 8007884:	d914      	bls.n	80078b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	461a      	mov	r2, r3
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f001 f84a 	bl	8008936 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a2:	2300      	movs	r3, #0
 80078a4:	2200      	movs	r2, #0
 80078a6:	2100      	movs	r1, #0
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f001 fd2f 	bl	800930c <USBD_LL_PrepareReceive>
 80078ae:	e03f      	b.n	8007930 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d11c      	bne.n	80078f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d316      	bcc.n	80078f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d20f      	bcs.n	80078f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078d6:	2200      	movs	r2, #0
 80078d8:	2100      	movs	r1, #0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f001 f82b 	bl	8008936 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e8:	2300      	movs	r3, #0
 80078ea:	2200      	movs	r2, #0
 80078ec:	2100      	movs	r1, #0
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f001 fd0c 	bl	800930c <USBD_LL_PrepareReceive>
 80078f4:	e01c      	b.n	8007930 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d10f      	bne.n	8007922 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f001 fc47 	bl	80091b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f001 f855 	bl	80089da <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d03a      	beq.n	80079b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f7ff fe42 	bl	80075c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007948:	e032      	b.n	80079b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007950:	b2db      	uxtb	r3, r3
 8007952:	4619      	mov	r1, r3
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f8f3 	bl	8007b40 <USBD_CoreFindEP>
 800795a:	4603      	mov	r3, r0
 800795c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800795e:	7dfb      	ldrb	r3, [r7, #23]
 8007960:	2bff      	cmp	r3, #255	; 0xff
 8007962:	d025      	beq.n	80079b0 <USBD_LL_DataInStage+0x15a>
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d122      	bne.n	80079b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b03      	cmp	r3, #3
 8007974:	d11c      	bne.n	80079b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007976:	7dfa      	ldrb	r2, [r7, #23]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	32ae      	adds	r2, #174	; 0xae
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d014      	beq.n	80079b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007986:	7dfa      	ldrb	r2, [r7, #23]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800798e:	7dfa      	ldrb	r2, [r7, #23]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	32ae      	adds	r2, #174	; 0xae
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	7afa      	ldrb	r2, [r7, #11]
 800799c:	4611      	mov	r1, r2
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	4798      	blx	r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80079a6:	7dbb      	ldrb	r3, [r7, #22]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80079ac:	7dbb      	ldrb	r3, [r7, #22]
 80079ae:	e000      	b.n	80079b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d014      	beq.n	8007a20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6852      	ldr	r2, [r2, #4]
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	4611      	mov	r1, r2
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	2200      	movs	r2, #0
 8007a24:	2100      	movs	r1, #0
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fb81 	bl	800912e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2240      	movs	r2, #64	; 0x40
 8007a38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2180      	movs	r1, #128	; 0x80
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 fb73 	bl	800912e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2240      	movs	r2, #64	; 0x40
 8007a52:	621a      	str	r2, [r3, #32]

  return ret;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	460b      	mov	r3, r1
 8007a68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d006      	beq.n	8007aa0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d106      	bne.n	8007ad8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d110      	bne.n	8007b1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	885b      	ldrh	r3, [r3, #2]
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d920      	bls.n	8007bc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b8a:	e013      	b.n	8007bb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b8c:	f107 030a 	add.w	r3, r7, #10
 8007b90:	4619      	mov	r1, r3
 8007b92:	6978      	ldr	r0, [r7, #20]
 8007b94:	f000 f81b 	bl	8007bce <USBD_GetNextDesc>
 8007b98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	2b05      	cmp	r3, #5
 8007ba0:	d108      	bne.n	8007bb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	789b      	ldrb	r3, [r3, #2]
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d008      	beq.n	8007bc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	885b      	ldrh	r3, [r3, #2]
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	897b      	ldrh	r3, [r7, #10]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d8e5      	bhi.n	8007b8c <USBD_GetEpDesc+0x32>
 8007bc0:	e000      	b.n	8007bc4 <USBD_GetEpDesc+0x6a>
          break;
 8007bc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007bc4:	693b      	ldr	r3, [r7, #16]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b085      	sub	sp, #20
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	881a      	ldrh	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	4413      	add	r3, r2
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c26:	8a3b      	ldrh	r3, [r7, #16]
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	b21a      	sxth	r2, r3
 8007c2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	b21b      	sxth	r3, r3
 8007c34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c36:	89fb      	ldrh	r3, [r7, #14]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d005      	beq.n	8007c6a <USBD_StdDevReq+0x26>
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d857      	bhi.n	8007d12 <USBD_StdDevReq+0xce>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00f      	beq.n	8007c86 <USBD_StdDevReq+0x42>
 8007c66:	2b20      	cmp	r3, #32
 8007c68:	d153      	bne.n	8007d12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	32ae      	adds	r2, #174	; 0xae
 8007c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	4798      	blx	r3
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
      break;
 8007c84:	e04a      	b.n	8007d1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d83b      	bhi.n	8007d06 <USBD_StdDevReq+0xc2>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <USBD_StdDevReq+0x50>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007ce9 	.word	0x08007ce9
 8007c98:	08007cfd 	.word	0x08007cfd
 8007c9c:	08007d07 	.word	0x08007d07
 8007ca0:	08007cf3 	.word	0x08007cf3
 8007ca4:	08007d07 	.word	0x08007d07
 8007ca8:	08007cc7 	.word	0x08007cc7
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007d07 	.word	0x08007d07
 8007cb4:	08007cdf 	.word	0x08007cdf
 8007cb8:	08007cd1 	.word	0x08007cd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa3c 	bl	800813c <USBD_GetDescriptor>
          break;
 8007cc4:	e024      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fbcb 	bl	8008464 <USBD_SetAddress>
          break;
 8007cce:	e01f      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fc0a 	bl	80084ec <USBD_SetConfig>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
          break;
 8007cdc:	e018      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fcad 	bl	8008640 <USBD_GetConfig>
          break;
 8007ce6:	e013      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fcde 	bl	80086ac <USBD_GetStatus>
          break;
 8007cf0:	e00e      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fd0d 	bl	8008714 <USBD_SetFeature>
          break;
 8007cfa:	e009      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fd31 	bl	8008766 <USBD_ClrFeature>
          break;
 8007d04:	e004      	b.n	8007d10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fd88 	bl	800881e <USBD_CtlError>
          break;
 8007d0e:	bf00      	nop
      }
      break;
 8007d10:	e004      	b.n	8007d1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fd82 	bl	800881e <USBD_CtlError>
      break;
 8007d1a:	bf00      	nop
  }

  return ret;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop

08007d28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d3e:	2b40      	cmp	r3, #64	; 0x40
 8007d40:	d005      	beq.n	8007d4e <USBD_StdItfReq+0x26>
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d852      	bhi.n	8007dec <USBD_StdItfReq+0xc4>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <USBD_StdItfReq+0x26>
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d14e      	bne.n	8007dec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d840      	bhi.n	8007dde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	889b      	ldrh	r3, [r3, #4]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d836      	bhi.n	8007dd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	889b      	ldrh	r3, [r3, #4]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff fed9 	bl	8007b26 <USBD_CoreFindIF>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2bff      	cmp	r3, #255	; 0xff
 8007d7c:	d01d      	beq.n	8007dba <USBD_StdItfReq+0x92>
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11a      	bne.n	8007dba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d84:	7bba      	ldrb	r2, [r7, #14]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	32ae      	adds	r2, #174	; 0xae
 8007d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00f      	beq.n	8007db4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d94:	7bba      	ldrb	r2, [r7, #14]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d9c:	7bba      	ldrb	r2, [r7, #14]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	32ae      	adds	r2, #174	; 0xae
 8007da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007db2:	e004      	b.n	8007dbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007db8:	e001      	b.n	8007dbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d110      	bne.n	8007de8 <USBD_StdItfReq+0xc0>
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10d      	bne.n	8007de8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fdf1 	bl	80089b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dd2:	e009      	b.n	8007de8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fd21 	bl	800881e <USBD_CtlError>
          break;
 8007ddc:	e004      	b.n	8007de8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fd1c 	bl	800881e <USBD_CtlError>
          break;
 8007de6:	e000      	b.n	8007dea <USBD_StdItfReq+0xc2>
          break;
 8007de8:	bf00      	nop
      }
      break;
 8007dea:	e004      	b.n	8007df6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fd15 	bl	800881e <USBD_CtlError>
      break;
 8007df4:	bf00      	nop
  }

  return ret;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	889b      	ldrh	r3, [r3, #4]
 8007e12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	d007      	beq.n	8007e30 <USBD_StdEPReq+0x30>
 8007e20:	2b40      	cmp	r3, #64	; 0x40
 8007e22:	f200 817f 	bhi.w	8008124 <USBD_StdEPReq+0x324>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d02a      	beq.n	8007e80 <USBD_StdEPReq+0x80>
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	f040 817a 	bne.w	8008124 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff fe83 	bl	8007b40 <USBD_CoreFindEP>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e3e:	7b7b      	ldrb	r3, [r7, #13]
 8007e40:	2bff      	cmp	r3, #255	; 0xff
 8007e42:	f000 8174 	beq.w	800812e <USBD_StdEPReq+0x32e>
 8007e46:	7b7b      	ldrb	r3, [r7, #13]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f040 8170 	bne.w	800812e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e4e:	7b7a      	ldrb	r2, [r7, #13]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e56:	7b7a      	ldrb	r2, [r7, #13]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	32ae      	adds	r2, #174	; 0xae
 8007e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 8163 	beq.w	800812e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e68:	7b7a      	ldrb	r2, [r7, #13]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32ae      	adds	r2, #174	; 0xae
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e7e:	e156      	b.n	800812e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d008      	beq.n	8007e9a <USBD_StdEPReq+0x9a>
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	f300 8145 	bgt.w	8008118 <USBD_StdEPReq+0x318>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 809b 	beq.w	8007fca <USBD_StdEPReq+0x1ca>
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d03c      	beq.n	8007f12 <USBD_StdEPReq+0x112>
 8007e98:	e13e      	b.n	8008118 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d002      	beq.n	8007eac <USBD_StdEPReq+0xac>
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d016      	beq.n	8007ed8 <USBD_StdEPReq+0xd8>
 8007eaa:	e02c      	b.n	8007f06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00d      	beq.n	8007ece <USBD_StdEPReq+0xce>
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b80      	cmp	r3, #128	; 0x80
 8007eb6:	d00a      	beq.n	8007ece <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f97b 	bl	80091b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ec2:	2180      	movs	r1, #128	; 0x80
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 f977 	bl	80091b8 <USBD_LL_StallEP>
 8007eca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ecc:	e020      	b.n	8007f10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fca4 	bl	800881e <USBD_CtlError>
              break;
 8007ed6:	e01b      	b.n	8007f10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	885b      	ldrh	r3, [r3, #2]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10e      	bne.n	8007efe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <USBD_StdEPReq+0xfe>
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b80      	cmp	r3, #128	; 0x80
 8007eea:	d008      	beq.n	8007efe <USBD_StdEPReq+0xfe>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	88db      	ldrh	r3, [r3, #6]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f95d 	bl	80091b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fd58 	bl	80089b4 <USBD_CtlSendStatus>

              break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fc88 	bl	800881e <USBD_CtlError>
              break;
 8007f0e:	bf00      	nop
          }
          break;
 8007f10:	e107      	b.n	8008122 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d002      	beq.n	8007f24 <USBD_StdEPReq+0x124>
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d016      	beq.n	8007f50 <USBD_StdEPReq+0x150>
 8007f22:	e04b      	b.n	8007fbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00d      	beq.n	8007f46 <USBD_StdEPReq+0x146>
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b80      	cmp	r3, #128	; 0x80
 8007f2e:	d00a      	beq.n	8007f46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 f93f 	bl	80091b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f3a:	2180      	movs	r1, #128	; 0x80
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 f93b 	bl	80091b8 <USBD_LL_StallEP>
 8007f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f44:	e040      	b.n	8007fc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fc68 	bl	800881e <USBD_CtlError>
              break;
 8007f4e:	e03b      	b.n	8007fc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	885b      	ldrh	r3, [r3, #2]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d136      	bne.n	8007fc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d004      	beq.n	8007f6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 f945 	bl	80091f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fd21 	bl	80089b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fde2 	bl	8007b40 <USBD_CoreFindEP>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f80:	7b7b      	ldrb	r3, [r7, #13]
 8007f82:	2bff      	cmp	r3, #255	; 0xff
 8007f84:	d01f      	beq.n	8007fc6 <USBD_StdEPReq+0x1c6>
 8007f86:	7b7b      	ldrb	r3, [r7, #13]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11c      	bne.n	8007fc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f8c:	7b7a      	ldrb	r2, [r7, #13]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f94:	7b7a      	ldrb	r2, [r7, #13]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	32ae      	adds	r2, #174	; 0xae
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d010      	beq.n	8007fc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fa4:	7b7a      	ldrb	r2, [r7, #13]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	32ae      	adds	r2, #174	; 0xae
 8007faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007fba:	e004      	b.n	8007fc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc2d 	bl	800881e <USBD_CtlError>
              break;
 8007fc4:	e000      	b.n	8007fc8 <USBD_StdEPReq+0x1c8>
              break;
 8007fc6:	bf00      	nop
          }
          break;
 8007fc8:	e0ab      	b.n	8008122 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d002      	beq.n	8007fdc <USBD_StdEPReq+0x1dc>
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d032      	beq.n	8008040 <USBD_StdEPReq+0x240>
 8007fda:	e097      	b.n	800810c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <USBD_StdEPReq+0x1f2>
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b80      	cmp	r3, #128	; 0x80
 8007fe6:	d004      	beq.n	8007ff2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc17 	bl	800881e <USBD_CtlError>
                break;
 8007ff0:	e091      	b.n	8008116 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da0b      	bge.n	8008012 <USBD_StdEPReq+0x212>
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	3310      	adds	r3, #16
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4413      	add	r3, r2
 800800e:	3304      	adds	r3, #4
 8008010:	e00b      	b.n	800802a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008012:	7bbb      	ldrb	r3, [r7, #14]
 8008014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	4413      	add	r3, r2
 8008028:	3304      	adds	r3, #4
 800802a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2202      	movs	r2, #2
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fc61 	bl	8008900 <USBD_CtlSendData>
              break;
 800803e:	e06a      	b.n	8008116 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008044:	2b00      	cmp	r3, #0
 8008046:	da11      	bge.n	800806c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	f003 020f 	and.w	r2, r3, #15
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	3324      	adds	r3, #36	; 0x24
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d117      	bne.n	8008092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fbda 	bl	800881e <USBD_CtlError>
                  break;
 800806a:	e054      	b.n	8008116 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d104      	bne.n	8008092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fbc7 	bl	800881e <USBD_CtlError>
                  break;
 8008090:	e041      	b.n	8008116 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008096:	2b00      	cmp	r3, #0
 8008098:	da0b      	bge.n	80080b2 <USBD_StdEPReq+0x2b2>
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	3310      	adds	r3, #16
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	3304      	adds	r3, #4
 80080b0:	e00b      	b.n	80080ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	4413      	add	r3, r2
 80080c8:	3304      	adds	r3, #4
 80080ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <USBD_StdEPReq+0x2d8>
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b80      	cmp	r3, #128	; 0x80
 80080d6:	d103      	bne.n	80080e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	e00e      	b.n	80080fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 f8a5 	bl	8009234 <USBD_LL_IsStallEP>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	e002      	b.n	80080fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2202      	movs	r2, #2
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fbfb 	bl	8008900 <USBD_CtlSendData>
              break;
 800810a:	e004      	b.n	8008116 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fb85 	bl	800881e <USBD_CtlError>
              break;
 8008114:	bf00      	nop
          }
          break;
 8008116:	e004      	b.n	8008122 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fb7f 	bl	800881e <USBD_CtlError>
          break;
 8008120:	bf00      	nop
      }
      break;
 8008122:	e005      	b.n	8008130 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fb79 	bl	800881e <USBD_CtlError>
      break;
 800812c:	e000      	b.n	8008130 <USBD_StdEPReq+0x330>
      break;
 800812e:	bf00      	nop
  }

  return ret;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	885b      	ldrh	r3, [r3, #2]
 8008156:	0a1b      	lsrs	r3, r3, #8
 8008158:	b29b      	uxth	r3, r3
 800815a:	3b01      	subs	r3, #1
 800815c:	2b0e      	cmp	r3, #14
 800815e:	f200 8152 	bhi.w	8008406 <USBD_GetDescriptor+0x2ca>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <USBD_GetDescriptor+0x2c>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	080081d9 	.word	0x080081d9
 800816c:	080081f1 	.word	0x080081f1
 8008170:	08008231 	.word	0x08008231
 8008174:	08008407 	.word	0x08008407
 8008178:	08008407 	.word	0x08008407
 800817c:	080083a7 	.word	0x080083a7
 8008180:	080083d3 	.word	0x080083d3
 8008184:	08008407 	.word	0x08008407
 8008188:	08008407 	.word	0x08008407
 800818c:	08008407 	.word	0x08008407
 8008190:	08008407 	.word	0x08008407
 8008194:	08008407 	.word	0x08008407
 8008198:	08008407 	.word	0x08008407
 800819c:	08008407 	.word	0x08008407
 80081a0:	080081a5 	.word	0x080081a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	7c12      	ldrb	r2, [r2, #16]
 80081bc:	f107 0108 	add.w	r1, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081c6:	e126      	b.n	8008416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fb27 	bl	800881e <USBD_CtlError>
        err++;
 80081d0:	7afb      	ldrb	r3, [r7, #11]
 80081d2:	3301      	adds	r3, #1
 80081d4:	72fb      	strb	r3, [r7, #11]
      break;
 80081d6:	e11e      	b.n	8008416 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7c12      	ldrb	r2, [r2, #16]
 80081e4:	f107 0108 	add.w	r1, r7, #8
 80081e8:	4610      	mov	r0, r2
 80081ea:	4798      	blx	r3
 80081ec:	60f8      	str	r0, [r7, #12]
      break;
 80081ee:	e112      	b.n	8008416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7c1b      	ldrb	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10d      	bne.n	8008214 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	f107 0208 	add.w	r2, r7, #8
 8008204:	4610      	mov	r0, r2
 8008206:	4798      	blx	r3
 8008208:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3301      	adds	r3, #1
 800820e:	2202      	movs	r2, #2
 8008210:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008212:	e100      	b.n	8008416 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	f107 0208 	add.w	r2, r7, #8
 8008220:	4610      	mov	r0, r2
 8008222:	4798      	blx	r3
 8008224:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3301      	adds	r3, #1
 800822a:	2202      	movs	r2, #2
 800822c:	701a      	strb	r2, [r3, #0]
      break;
 800822e:	e0f2      	b.n	8008416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	885b      	ldrh	r3, [r3, #2]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b05      	cmp	r3, #5
 8008238:	f200 80ac 	bhi.w	8008394 <USBD_GetDescriptor+0x258>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <USBD_GetDescriptor+0x108>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	0800825d 	.word	0x0800825d
 8008248:	08008291 	.word	0x08008291
 800824c:	080082c5 	.word	0x080082c5
 8008250:	080082f9 	.word	0x080082f9
 8008254:	0800832d 	.word	0x0800832d
 8008258:	08008361 	.word	0x08008361
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	7c12      	ldrb	r2, [r2, #16]
 8008274:	f107 0108 	add.w	r1, r7, #8
 8008278:	4610      	mov	r0, r2
 800827a:	4798      	blx	r3
 800827c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827e:	e091      	b.n	80083a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 facb 	bl	800881e <USBD_CtlError>
            err++;
 8008288:	7afb      	ldrb	r3, [r7, #11]
 800828a:	3301      	adds	r3, #1
 800828c:	72fb      	strb	r3, [r7, #11]
          break;
 800828e:	e089      	b.n	80083a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00b      	beq.n	80082b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	7c12      	ldrb	r2, [r2, #16]
 80082a8:	f107 0108 	add.w	r1, r7, #8
 80082ac:	4610      	mov	r0, r2
 80082ae:	4798      	blx	r3
 80082b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082b2:	e077      	b.n	80083a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fab1 	bl	800881e <USBD_CtlError>
            err++;
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	3301      	adds	r3, #1
 80082c0:	72fb      	strb	r3, [r7, #11]
          break;
 80082c2:	e06f      	b.n	80083a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	7c12      	ldrb	r2, [r2, #16]
 80082dc:	f107 0108 	add.w	r1, r7, #8
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
 80082e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e6:	e05d      	b.n	80083a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa97 	bl	800881e <USBD_CtlError>
            err++;
 80082f0:	7afb      	ldrb	r3, [r7, #11]
 80082f2:	3301      	adds	r3, #1
 80082f4:	72fb      	strb	r3, [r7, #11]
          break;
 80082f6:	e055      	b.n	80083a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7c12      	ldrb	r2, [r2, #16]
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	4610      	mov	r0, r2
 8008316:	4798      	blx	r3
 8008318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800831a:	e043      	b.n	80083a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa7d 	bl	800881e <USBD_CtlError>
            err++;
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	3301      	adds	r3, #1
 8008328:	72fb      	strb	r3, [r7, #11]
          break;
 800832a:	e03b      	b.n	80083a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834e:	e029      	b.n	80083a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa63 	bl	800881e <USBD_CtlError>
            err++;
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	3301      	adds	r3, #1
 800835c:	72fb      	strb	r3, [r7, #11]
          break;
 800835e:	e021      	b.n	80083a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	7c12      	ldrb	r2, [r2, #16]
 8008378:	f107 0108 	add.w	r1, r7, #8
 800837c:	4610      	mov	r0, r2
 800837e:	4798      	blx	r3
 8008380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008382:	e00f      	b.n	80083a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fa49 	bl	800881e <USBD_CtlError>
            err++;
 800838c:	7afb      	ldrb	r3, [r7, #11]
 800838e:	3301      	adds	r3, #1
 8008390:	72fb      	strb	r3, [r7, #11]
          break;
 8008392:	e007      	b.n	80083a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa41 	bl	800881e <USBD_CtlError>
          err++;
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	3301      	adds	r3, #1
 80083a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083a2:	bf00      	nop
      }
      break;
 80083a4:	e037      	b.n	8008416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7c1b      	ldrb	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d109      	bne.n	80083c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b6:	f107 0208 	add.w	r2, r7, #8
 80083ba:	4610      	mov	r0, r2
 80083bc:	4798      	blx	r3
 80083be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083c0:	e029      	b.n	8008416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fa2a 	bl	800881e <USBD_CtlError>
        err++;
 80083ca:	7afb      	ldrb	r3, [r7, #11]
 80083cc:	3301      	adds	r3, #1
 80083ce:	72fb      	strb	r3, [r7, #11]
      break;
 80083d0:	e021      	b.n	8008416 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	7c1b      	ldrb	r3, [r3, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10d      	bne.n	80083f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e2:	f107 0208 	add.w	r2, r7, #8
 80083e6:	4610      	mov	r0, r2
 80083e8:	4798      	blx	r3
 80083ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	2207      	movs	r2, #7
 80083f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083f4:	e00f      	b.n	8008416 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fa10 	bl	800881e <USBD_CtlError>
        err++;
 80083fe:	7afb      	ldrb	r3, [r7, #11]
 8008400:	3301      	adds	r3, #1
 8008402:	72fb      	strb	r3, [r7, #11]
      break;
 8008404:	e007      	b.n	8008416 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fa08 	bl	800881e <USBD_CtlError>
      err++;
 800840e:	7afb      	ldrb	r3, [r7, #11]
 8008410:	3301      	adds	r3, #1
 8008412:	72fb      	strb	r3, [r7, #11]
      break;
 8008414:	bf00      	nop
  }

  if (err != 0U)
 8008416:	7afb      	ldrb	r3, [r7, #11]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d11e      	bne.n	800845a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	88db      	ldrh	r3, [r3, #6]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d016      	beq.n	8008452 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008424:	893b      	ldrh	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00e      	beq.n	8008448 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	88da      	ldrh	r2, [r3, #6]
 800842e:	893b      	ldrh	r3, [r7, #8]
 8008430:	4293      	cmp	r3, r2
 8008432:	bf28      	it	cs
 8008434:	4613      	movcs	r3, r2
 8008436:	b29b      	uxth	r3, r3
 8008438:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800843a:	893b      	ldrh	r3, [r7, #8]
 800843c:	461a      	mov	r2, r3
 800843e:	68f9      	ldr	r1, [r7, #12]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fa5d 	bl	8008900 <USBD_CtlSendData>
 8008446:	e009      	b.n	800845c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9e7 	bl	800881e <USBD_CtlError>
 8008450:	e004      	b.n	800845c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 faae 	bl	80089b4 <USBD_CtlSendStatus>
 8008458:	e000      	b.n	800845c <USBD_GetDescriptor+0x320>
    return;
 800845a:	bf00      	nop
  }
}
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop

08008464 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	889b      	ldrh	r3, [r3, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d131      	bne.n	80084da <USBD_SetAddress+0x76>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	88db      	ldrh	r3, [r3, #6]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d12d      	bne.n	80084da <USBD_SetAddress+0x76>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	885b      	ldrh	r3, [r3, #2]
 8008482:	2b7f      	cmp	r3, #127	; 0x7f
 8008484:	d829      	bhi.n	80084da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	885b      	ldrh	r3, [r3, #2]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008490:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b03      	cmp	r3, #3
 800849c:	d104      	bne.n	80084a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f9bc 	bl	800881e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a6:	e01d      	b.n	80084e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	7bfa      	ldrb	r2, [r7, #15]
 80084ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fee9 	bl	800928c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa7a 	bl	80089b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ce:	e009      	b.n	80084e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d8:	e004      	b.n	80084e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f99e 	bl	800881e <USBD_CtlError>
  }
}
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	885b      	ldrh	r3, [r3, #2]
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	4b4e      	ldr	r3, [pc, #312]	; (800863c <USBD_SetConfig+0x150>)
 8008502:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008504:	4b4d      	ldr	r3, [pc, #308]	; (800863c <USBD_SetConfig+0x150>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d905      	bls.n	8008518 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f985 	bl	800881e <USBD_CtlError>
    return USBD_FAIL;
 8008514:	2303      	movs	r3, #3
 8008516:	e08c      	b.n	8008632 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d002      	beq.n	800852a <USBD_SetConfig+0x3e>
 8008524:	2b03      	cmp	r3, #3
 8008526:	d029      	beq.n	800857c <USBD_SetConfig+0x90>
 8008528:	e075      	b.n	8008616 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800852a:	4b44      	ldr	r3, [pc, #272]	; (800863c <USBD_SetConfig+0x150>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d020      	beq.n	8008574 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008532:	4b42      	ldr	r3, [pc, #264]	; (800863c <USBD_SetConfig+0x150>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800853c:	4b3f      	ldr	r3, [pc, #252]	; (800863c <USBD_SetConfig+0x150>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7ff f849 	bl	80075da <USBD_SetClassConfig>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f962 	bl	800881e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2202      	movs	r2, #2
 800855e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008562:	e065      	b.n	8008630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fa25 	bl	80089b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2203      	movs	r2, #3
 800856e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008572:	e05d      	b.n	8008630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fa1d 	bl	80089b4 <USBD_CtlSendStatus>
      break;
 800857a:	e059      	b.n	8008630 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800857c:	4b2f      	ldr	r3, [pc, #188]	; (800863c <USBD_SetConfig+0x150>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d112      	bne.n	80085aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800858c:	4b2b      	ldr	r3, [pc, #172]	; (800863c <USBD_SetConfig+0x150>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008596:	4b29      	ldr	r3, [pc, #164]	; (800863c <USBD_SetConfig+0x150>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff f838 	bl	8007612 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa06 	bl	80089b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085a8:	e042      	b.n	8008630 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085aa:	4b24      	ldr	r3, [pc, #144]	; (800863c <USBD_SetConfig+0x150>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d02a      	beq.n	800860e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff f826 	bl	8007612 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085c6:	4b1d      	ldr	r3, [pc, #116]	; (800863c <USBD_SetConfig+0x150>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085d0:	4b1a      	ldr	r3, [pc, #104]	; (800863c <USBD_SetConfig+0x150>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fe ffff 	bl	80075da <USBD_SetClassConfig>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00f      	beq.n	8008606 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f918 	bl	800881e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff f80b 	bl	8007612 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008604:	e014      	b.n	8008630 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f9d4 	bl	80089b4 <USBD_CtlSendStatus>
      break;
 800860c:	e010      	b.n	8008630 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f9d0 	bl	80089b4 <USBD_CtlSendStatus>
      break;
 8008614:	e00c      	b.n	8008630 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f900 	bl	800881e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800861e:	4b07      	ldr	r3, [pc, #28]	; (800863c <USBD_SetConfig+0x150>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7fe fff4 	bl	8007612 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800862a:	2303      	movs	r3, #3
 800862c:	73fb      	strb	r3, [r7, #15]
      break;
 800862e:	bf00      	nop
  }

  return ret;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	2000017c 	.word	0x2000017c

08008640 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d004      	beq.n	800865c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f8e2 	bl	800881e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800865a:	e023      	b.n	80086a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b02      	cmp	r3, #2
 8008666:	dc02      	bgt.n	800866e <USBD_GetConfig+0x2e>
 8008668:	2b00      	cmp	r3, #0
 800866a:	dc03      	bgt.n	8008674 <USBD_GetConfig+0x34>
 800866c:	e015      	b.n	800869a <USBD_GetConfig+0x5a>
 800866e:	2b03      	cmp	r3, #3
 8008670:	d00b      	beq.n	800868a <USBD_GetConfig+0x4a>
 8008672:	e012      	b.n	800869a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3308      	adds	r3, #8
 800867e:	2201      	movs	r2, #1
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f93c 	bl	8008900 <USBD_CtlSendData>
        break;
 8008688:	e00c      	b.n	80086a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3304      	adds	r3, #4
 800868e:	2201      	movs	r2, #1
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f934 	bl	8008900 <USBD_CtlSendData>
        break;
 8008698:	e004      	b.n	80086a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f8be 	bl	800881e <USBD_CtlError>
        break;
 80086a2:	bf00      	nop
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	3b01      	subs	r3, #1
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d81e      	bhi.n	8008702 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	88db      	ldrh	r3, [r3, #6]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d004      	beq.n	80086d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f8a5 	bl	800881e <USBD_CtlError>
        break;
 80086d4:	e01a      	b.n	800870c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f043 0202 	orr.w	r2, r3, #2
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	330c      	adds	r3, #12
 80086f6:	2202      	movs	r2, #2
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f900 	bl	8008900 <USBD_CtlSendData>
      break;
 8008700:	e004      	b.n	800870c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f88a 	bl	800881e <USBD_CtlError>
      break;
 800870a:	bf00      	nop
  }
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	885b      	ldrh	r3, [r3, #2]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d107      	bne.n	8008736 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f940 	bl	80089b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008734:	e013      	b.n	800875e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d10b      	bne.n	8008756 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	889b      	ldrh	r3, [r3, #4]
 8008742:	0a1b      	lsrs	r3, r3, #8
 8008744:	b29b      	uxth	r3, r3
 8008746:	b2da      	uxtb	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f930 	bl	80089b4 <USBD_CtlSendStatus>
}
 8008754:	e003      	b.n	800875e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f860 	bl	800881e <USBD_CtlError>
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008776:	b2db      	uxtb	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	2b02      	cmp	r3, #2
 800877c:	d80b      	bhi.n	8008796 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	885b      	ldrh	r3, [r3, #2]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d10c      	bne.n	80087a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f910 	bl	80089b4 <USBD_CtlSendStatus>
      }
      break;
 8008794:	e004      	b.n	80087a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f840 	bl	800881e <USBD_CtlError>
      break;
 800879e:	e000      	b.n	80087a2 <USBD_ClrFeature+0x3c>
      break;
 80087a0:	bf00      	nop
  }
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	781a      	ldrb	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3301      	adds	r3, #1
 80087d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff fa17 	bl	8007c08 <SWAPBYTE>
 80087da:	4603      	mov	r3, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3301      	adds	r3, #1
 80087e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3301      	adds	r3, #1
 80087ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff fa0a 	bl	8007c08 <SWAPBYTE>
 80087f4:	4603      	mov	r3, r0
 80087f6:	461a      	mov	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3301      	adds	r3, #1
 8008800:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3301      	adds	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f7ff f9fd 	bl	8007c08 <SWAPBYTE>
 800880e:	4603      	mov	r3, r0
 8008810:	461a      	mov	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	80da      	strh	r2, [r3, #6]
}
 8008816:	bf00      	nop
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008828:	2180      	movs	r1, #128	; 0x80
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fcc4 	bl	80091b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008830:	2100      	movs	r1, #0
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fcc0 	bl	80091b8 <USBD_LL_StallEP>
}
 8008838:	bf00      	nop
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800884c:	2300      	movs	r3, #0
 800884e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d036      	beq.n	80088c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800885a:	6938      	ldr	r0, [r7, #16]
 800885c:	f000 f836 	bl	80088cc <USBD_GetLen>
 8008860:	4603      	mov	r3, r0
 8008862:	3301      	adds	r3, #1
 8008864:	b29b      	uxth	r3, r3
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	b29a      	uxth	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	4413      	add	r3, r2
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	7812      	ldrb	r2, [r2, #0]
 8008878:	701a      	strb	r2, [r3, #0]
  idx++;
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	3301      	adds	r3, #1
 800887e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	4413      	add	r3, r2
 8008886:	2203      	movs	r2, #3
 8008888:	701a      	strb	r2, [r3, #0]
  idx++;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
 800888c:	3301      	adds	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008890:	e013      	b.n	80088ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008892:	7dfb      	ldrb	r3, [r7, #23]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	4413      	add	r3, r2
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	7812      	ldrb	r2, [r2, #0]
 800889c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	3301      	adds	r3, #1
 80088a2:	613b      	str	r3, [r7, #16]
    idx++;
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	3301      	adds	r3, #1
 80088a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	4413      	add	r3, r2
 80088b0:	2200      	movs	r2, #0
 80088b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	3301      	adds	r3, #1
 80088b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e7      	bne.n	8008892 <USBD_GetString+0x52>
 80088c2:	e000      	b.n	80088c6 <USBD_GetString+0x86>
    return;
 80088c4:	bf00      	nop
  }
}
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088dc:	e005      	b.n	80088ea <USBD_GetLen+0x1e>
  {
    len++;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	3301      	adds	r3, #1
 80088e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1f5      	bne.n	80088de <USBD_GetLen+0x12>
  }

  return len;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2202      	movs	r2, #2
 8008910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	2100      	movs	r1, #0
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fccf 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	2100      	movs	r1, #0
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fcbe 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2203      	movs	r2, #3
 8008968:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	2100      	movs	r1, #0
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 fcc2 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	2100      	movs	r1, #0
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fcb1 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2204      	movs	r2, #4
 80089c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089c4:	2300      	movs	r3, #0
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fc7d 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b082      	sub	sp, #8
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2205      	movs	r2, #5
 80089e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089ea:	2300      	movs	r3, #0
 80089ec:	2200      	movs	r2, #0
 80089ee:	2100      	movs	r1, #0
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fc8b 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008a04:	2200      	movs	r2, #0
 8008a06:	4912      	ldr	r1, [pc, #72]	; (8008a50 <MX_USB_Device_Init+0x50>)
 8008a08:	4812      	ldr	r0, [pc, #72]	; (8008a54 <MX_USB_Device_Init+0x54>)
 8008a0a:	f7fe fd69 	bl	80074e0 <USBD_Init>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008a14:	f7f7 fce2 	bl	80003dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008a18:	490f      	ldr	r1, [pc, #60]	; (8008a58 <MX_USB_Device_Init+0x58>)
 8008a1a:	480e      	ldr	r0, [pc, #56]	; (8008a54 <MX_USB_Device_Init+0x54>)
 8008a1c:	f7fe fd90 	bl	8007540 <USBD_RegisterClass>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008a26:	f7f7 fcd9 	bl	80003dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008a2a:	490c      	ldr	r1, [pc, #48]	; (8008a5c <MX_USB_Device_Init+0x5c>)
 8008a2c:	4809      	ldr	r0, [pc, #36]	; (8008a54 <MX_USB_Device_Init+0x54>)
 8008a2e:	f7fe fcc7 	bl	80073c0 <USBD_CDC_RegisterInterface>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008a38:	f7f7 fcd0 	bl	80003dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008a3c:	4805      	ldr	r0, [pc, #20]	; (8008a54 <MX_USB_Device_Init+0x54>)
 8008a3e:	f7fe fdb5 	bl	80075ac <USBD_Start>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008a48:	f7f7 fcc8 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008a4c:	bf00      	nop
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	200000b4 	.word	0x200000b4
 8008a54:	20000180 	.word	0x20000180
 8008a58:	20000020 	.word	0x20000020
 8008a5c:	200000a0 	.word	0x200000a0

08008a60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a64:	2200      	movs	r2, #0
 8008a66:	4905      	ldr	r1, [pc, #20]	; (8008a7c <CDC_Init_FS+0x1c>)
 8008a68:	4805      	ldr	r0, [pc, #20]	; (8008a80 <CDC_Init_FS+0x20>)
 8008a6a:	f7fe fcc3 	bl	80073f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a6e:	4905      	ldr	r1, [pc, #20]	; (8008a84 <CDC_Init_FS+0x24>)
 8008a70:	4803      	ldr	r0, [pc, #12]	; (8008a80 <CDC_Init_FS+0x20>)
 8008a72:	f7fe fce1 	bl	8007438 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	20000c5c 	.word	0x20000c5c
 8008a80:	20000180 	.word	0x20000180
 8008a84:	2000045c 	.word	0x2000045c

08008a88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	6039      	str	r1, [r7, #0]
 8008aa2:	71fb      	strb	r3, [r7, #7]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	2b23      	cmp	r3, #35	; 0x23
 8008aac:	d84a      	bhi.n	8008b44 <CDC_Control_FS+0xac>
 8008aae:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <CDC_Control_FS+0x1c>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008b45 	.word	0x08008b45
 8008ab8:	08008b45 	.word	0x08008b45
 8008abc:	08008b45 	.word	0x08008b45
 8008ac0:	08008b45 	.word	0x08008b45
 8008ac4:	08008b45 	.word	0x08008b45
 8008ac8:	08008b45 	.word	0x08008b45
 8008acc:	08008b45 	.word	0x08008b45
 8008ad0:	08008b45 	.word	0x08008b45
 8008ad4:	08008b45 	.word	0x08008b45
 8008ad8:	08008b45 	.word	0x08008b45
 8008adc:	08008b45 	.word	0x08008b45
 8008ae0:	08008b45 	.word	0x08008b45
 8008ae4:	08008b45 	.word	0x08008b45
 8008ae8:	08008b45 	.word	0x08008b45
 8008aec:	08008b45 	.word	0x08008b45
 8008af0:	08008b45 	.word	0x08008b45
 8008af4:	08008b45 	.word	0x08008b45
 8008af8:	08008b45 	.word	0x08008b45
 8008afc:	08008b45 	.word	0x08008b45
 8008b00:	08008b45 	.word	0x08008b45
 8008b04:	08008b45 	.word	0x08008b45
 8008b08:	08008b45 	.word	0x08008b45
 8008b0c:	08008b45 	.word	0x08008b45
 8008b10:	08008b45 	.word	0x08008b45
 8008b14:	08008b45 	.word	0x08008b45
 8008b18:	08008b45 	.word	0x08008b45
 8008b1c:	08008b45 	.word	0x08008b45
 8008b20:	08008b45 	.word	0x08008b45
 8008b24:	08008b45 	.word	0x08008b45
 8008b28:	08008b45 	.word	0x08008b45
 8008b2c:	08008b45 	.word	0x08008b45
 8008b30:	08008b45 	.word	0x08008b45
 8008b34:	08008b45 	.word	0x08008b45
 8008b38:	08008b45 	.word	0x08008b45
 8008b3c:	08008b45 	.word	0x08008b45
 8008b40:	08008b45 	.word	0x08008b45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b44:	bf00      	nop
  }

  return (USBD_OK);
 8008b46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
//
//		  CDC_Transmit_FS((uint8_t*)buf, len);
//
//	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4805      	ldr	r0, [pc, #20]	; (8008b78 <CDC_Receive_FS+0x24>)
 8008b62:	f7fe fc69 	bl	8007438 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b66:	4804      	ldr	r0, [pc, #16]	; (8008b78 <CDC_Receive_FS+0x24>)
 8008b68:	f7fe fc84 	bl	8007474 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000180 	.word	0x20000180

08008b7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
	...

08008ba0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	6039      	str	r1, [r7, #0]
 8008baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2212      	movs	r2, #18
 8008bb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008bb2:	4b03      	ldr	r3, [pc, #12]	; (8008bc0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	200000d4 	.word	0x200000d4

08008bc4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	6039      	str	r1, [r7, #0]
 8008bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bd6:	4b03      	ldr	r3, [pc, #12]	; (8008be4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	200000e8 	.word	0x200000e8

08008be8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	6039      	str	r1, [r7, #0]
 8008bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d105      	bne.n	8008c06 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4907      	ldr	r1, [pc, #28]	; (8008c1c <USBD_CDC_ProductStrDescriptor+0x34>)
 8008bfe:	4808      	ldr	r0, [pc, #32]	; (8008c20 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008c00:	f7ff fe1e 	bl	8008840 <USBD_GetString>
 8008c04:	e004      	b.n	8008c10 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	4904      	ldr	r1, [pc, #16]	; (8008c1c <USBD_CDC_ProductStrDescriptor+0x34>)
 8008c0a:	4805      	ldr	r0, [pc, #20]	; (8008c20 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008c0c:	f7ff fe18 	bl	8008840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c10:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	2000145c 	.word	0x2000145c
 8008c20:	08009510 	.word	0x08009510

08008c24 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	6039      	str	r1, [r7, #0]
 8008c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	4904      	ldr	r1, [pc, #16]	; (8008c44 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008c34:	4804      	ldr	r0, [pc, #16]	; (8008c48 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008c36:	f7ff fe03 	bl	8008840 <USBD_GetString>
  return USBD_StrDesc;
 8008c3a:	4b02      	ldr	r3, [pc, #8]	; (8008c44 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	2000145c 	.word	0x2000145c
 8008c48:	08009528 	.word	0x08009528

08008c4c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	4603      	mov	r3, r0
 8008c54:	6039      	str	r1, [r7, #0]
 8008c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	221a      	movs	r2, #26
 8008c5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c5e:	f000 f843 	bl	8008ce8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008c62:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	200000ec 	.word	0x200000ec

08008c70 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	6039      	str	r1, [r7, #0]
 8008c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d105      	bne.n	8008c8e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	4907      	ldr	r1, [pc, #28]	; (8008ca4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008c86:	4808      	ldr	r0, [pc, #32]	; (8008ca8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008c88:	f7ff fdda 	bl	8008840 <USBD_GetString>
 8008c8c:	e004      	b.n	8008c98 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	4904      	ldr	r1, [pc, #16]	; (8008ca4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008c92:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008c94:	f7ff fdd4 	bl	8008840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c98:	4b02      	ldr	r3, [pc, #8]	; (8008ca4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	2000145c 	.word	0x2000145c
 8008ca8:	0800953c 	.word	0x0800953c

08008cac <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6039      	str	r1, [r7, #0]
 8008cb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d105      	bne.n	8008cca <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	4907      	ldr	r1, [pc, #28]	; (8008ce0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008cc2:	4808      	ldr	r0, [pc, #32]	; (8008ce4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008cc4:	f7ff fdbc 	bl	8008840 <USBD_GetString>
 8008cc8:	e004      	b.n	8008cd4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	4904      	ldr	r1, [pc, #16]	; (8008ce0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008cce:	4805      	ldr	r0, [pc, #20]	; (8008ce4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008cd0:	f7ff fdb6 	bl	8008840 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	2000145c 	.word	0x2000145c
 8008ce4:	08009548 	.word	0x08009548

08008ce8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cee:	4b0f      	ldr	r3, [pc, #60]	; (8008d2c <Get_SerialNum+0x44>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cf4:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <Get_SerialNum+0x48>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cfa:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <Get_SerialNum+0x4c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d009      	beq.n	8008d22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d0e:	2208      	movs	r2, #8
 8008d10:	4909      	ldr	r1, [pc, #36]	; (8008d38 <Get_SerialNum+0x50>)
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 f814 	bl	8008d40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d18:	2204      	movs	r2, #4
 8008d1a:	4908      	ldr	r1, [pc, #32]	; (8008d3c <Get_SerialNum+0x54>)
 8008d1c:	68b8      	ldr	r0, [r7, #8]
 8008d1e:	f000 f80f 	bl	8008d40 <IntToUnicode>
  }
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	1fff7590 	.word	0x1fff7590
 8008d30:	1fff7594 	.word	0x1fff7594
 8008d34:	1fff7598 	.word	0x1fff7598
 8008d38:	200000ee 	.word	0x200000ee
 8008d3c:	200000fe 	.word	0x200000fe

08008d40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d52:	2300      	movs	r3, #0
 8008d54:	75fb      	strb	r3, [r7, #23]
 8008d56:	e027      	b.n	8008da8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	0f1b      	lsrs	r3, r3, #28
 8008d5c:	2b09      	cmp	r3, #9
 8008d5e:	d80b      	bhi.n	8008d78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	0f1b      	lsrs	r3, r3, #28
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	440b      	add	r3, r1
 8008d70:	3230      	adds	r2, #48	; 0x30
 8008d72:	b2d2      	uxtb	r2, r2
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	e00a      	b.n	8008d8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	0f1b      	lsrs	r3, r3, #28
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	4619      	mov	r1, r3
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	440b      	add	r3, r1
 8008d88:	3237      	adds	r2, #55	; 0x37
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	3301      	adds	r3, #1
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
 8008da4:	3301      	adds	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]
 8008da8:	7dfa      	ldrb	r2, [r7, #23]
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d3d3      	bcc.n	8008d58 <IntToUnicode+0x18>
  }
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <LL_AHB2_GRP1_EnableClock>:
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4013      	ands	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008de2:	68fb      	ldr	r3, [r7, #12]
}
 8008de4:	bf00      	nop
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <LL_APB1_GRP1_EnableClock>:
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4013      	ands	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008e14:	68fb      	ldr	r3, [r7, #12]
}
 8008e16:	bf00      	nop
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b09c      	sub	sp, #112	; 0x70
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	605a      	str	r2, [r3, #4]
 8008e36:	609a      	str	r2, [r3, #8]
 8008e38:	60da      	str	r2, [r3, #12]
 8008e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008e3c:	f107 030c 	add.w	r3, r7, #12
 8008e40:	2250      	movs	r2, #80	; 0x50
 8008e42:	2100      	movs	r1, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fb15 	bl	8009474 <memset>
  if(pcdHandle->Instance==USB)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a23      	ldr	r2, [pc, #140]	; (8008edc <HAL_PCD_MspInit+0xb8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d13e      	bne.n	8008ed2 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8008e5a:	2318      	movs	r3, #24
 8008e5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8008e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8008e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8008e6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008e6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8008e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e74:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008e76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e7a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e7c:	f107 030c 	add.w	r3, r7, #12
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fb f895 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8008e8c:	f7f7 faa6 	bl	80003dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e90:	2001      	movs	r0, #1
 8008e92:	f7ff ff94 	bl	8008dbe <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8008ea8:	230a      	movs	r3, #10
 8008eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008eb6:	f7f7 fd6b 	bl	8000990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008eba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008ebe:	f7ff ff97 	bl	8008df0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	2014      	movs	r0, #20
 8008ec8:	f7f7 fd2d 	bl	8000926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008ecc:	2014      	movs	r0, #20
 8008ece:	f7f7 fd44 	bl	800095a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ed2:	bf00      	nop
 8008ed4:	3770      	adds	r7, #112	; 0x70
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	40006800 	.word	0x40006800

08008ee0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fe fba5 	bl	8007646 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	00db      	lsls	r3, r3, #3
 8008f22:	440b      	add	r3, r1
 8008f24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	f7fe fbdf 	bl	80076f0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008f32:	bf00      	nop
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8008f4c:	78fa      	ldrb	r2, [r7, #3]
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	4613      	mov	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	440b      	add	r3, r1
 8008f5a:	3324      	adds	r3, #36	; 0x24
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	4619      	mov	r1, r3
 8008f62:	f7fe fc78 	bl	8007856 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe fdb2 	bl	8007ae6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f92:	2301      	movs	r3, #1
 8008f94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	795b      	ldrb	r3, [r3, #5]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d001      	beq.n	8008fa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f9e:	f7f7 fa1d 	bl	80003dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008fa8:	7bfa      	ldrb	r2, [r7, #15]
 8008faa:	4611      	mov	r1, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe fd56 	bl	8007a5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe fcfe 	bl	80079ba <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fd51 	bl	8007a7e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7a5b      	ldrb	r3, [r3, #9]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fe4:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <HAL_PCD_SuspendCallback+0x30>)
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	4a03      	ldr	r2, [pc, #12]	; (8008ff8 <HAL_PCD_SuspendCallback+0x30>)
 8008fea:	f043 0306 	orr.w	r3, r3, #6
 8008fee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	e000ed00 	.word	0xe000ed00

08008ffc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	7a5b      	ldrb	r3, [r3, #9]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800900c:	4b08      	ldr	r3, [pc, #32]	; (8009030 <HAL_PCD_ResumeCallback+0x34>)
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	4a07      	ldr	r2, [pc, #28]	; (8009030 <HAL_PCD_ResumeCallback+0x34>)
 8009012:	f023 0306 	bic.w	r3, r3, #6
 8009016:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009018:	f000 f9fa 	bl	8009410 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fd47 	bl	8007ab6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	e000ed00 	.word	0xe000ed00

08009034 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800903c:	4a2c      	ldr	r2, [pc, #176]	; (80090f0 <USBD_LL_Init+0xbc>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a2a      	ldr	r2, [pc, #168]	; (80090f0 <USBD_LL_Init+0xbc>)
 8009048:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800904c:	f7f9 fcac 	bl	80029a8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8009050:	4b27      	ldr	r3, [pc, #156]	; (80090f0 <USBD_LL_Init+0xbc>)
 8009052:	4a28      	ldr	r2, [pc, #160]	; (80090f4 <USBD_LL_Init+0xc0>)
 8009054:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009056:	4b26      	ldr	r3, [pc, #152]	; (80090f0 <USBD_LL_Init+0xbc>)
 8009058:	2208      	movs	r2, #8
 800905a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800905c:	4b24      	ldr	r3, [pc, #144]	; (80090f0 <USBD_LL_Init+0xbc>)
 800905e:	2202      	movs	r2, #2
 8009060:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009062:	4b23      	ldr	r3, [pc, #140]	; (80090f0 <USBD_LL_Init+0xbc>)
 8009064:	2202      	movs	r2, #2
 8009066:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009068:	4b21      	ldr	r3, [pc, #132]	; (80090f0 <USBD_LL_Init+0xbc>)
 800906a:	2200      	movs	r2, #0
 800906c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800906e:	4b20      	ldr	r3, [pc, #128]	; (80090f0 <USBD_LL_Init+0xbc>)
 8009070:	2200      	movs	r2, #0
 8009072:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009074:	4b1e      	ldr	r3, [pc, #120]	; (80090f0 <USBD_LL_Init+0xbc>)
 8009076:	2200      	movs	r2, #0
 8009078:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800907a:	4b1d      	ldr	r3, [pc, #116]	; (80090f0 <USBD_LL_Init+0xbc>)
 800907c:	2200      	movs	r2, #0
 800907e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009080:	481b      	ldr	r0, [pc, #108]	; (80090f0 <USBD_LL_Init+0xbc>)
 8009082:	f7f7 ff3f 	bl	8000f04 <HAL_PCD_Init>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800908c:	f7f7 f9a6 	bl	80003dc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009096:	2318      	movs	r3, #24
 8009098:	2200      	movs	r2, #0
 800909a:	2100      	movs	r1, #0
 800909c:	f7f9 fbf9 	bl	8002892 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090a6:	2358      	movs	r3, #88	; 0x58
 80090a8:	2200      	movs	r2, #0
 80090aa:	2180      	movs	r1, #128	; 0x80
 80090ac:	f7f9 fbf1 	bl	8002892 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090b6:	23c0      	movs	r3, #192	; 0xc0
 80090b8:	2200      	movs	r2, #0
 80090ba:	2181      	movs	r1, #129	; 0x81
 80090bc:	f7f9 fbe9 	bl	8002892 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090ca:	2200      	movs	r2, #0
 80090cc:	2101      	movs	r1, #1
 80090ce:	f7f9 fbe0 	bl	8002892 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090dc:	2200      	movs	r2, #0
 80090de:	2182      	movs	r1, #130	; 0x82
 80090e0:	f7f9 fbd7 	bl	8002892 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	2000165c 	.word	0x2000165c
 80090f4:	40006800 	.word	0x40006800

080090f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800910e:	4618      	mov	r0, r3
 8009110:	f7f7 ffc6 	bl	80010a0 <HAL_PCD_Start>
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f97e 	bl	800941c <USBD_Get_USB_Status>
 8009120:	4603      	mov	r3, r0
 8009122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009124:	7bbb      	ldrb	r3, [r7, #14]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	4608      	mov	r0, r1
 8009138:	4611      	mov	r1, r2
 800913a:	461a      	mov	r2, r3
 800913c:	4603      	mov	r3, r0
 800913e:	70fb      	strb	r3, [r7, #3]
 8009140:	460b      	mov	r3, r1
 8009142:	70bb      	strb	r3, [r7, #2]
 8009144:	4613      	mov	r3, r2
 8009146:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009156:	78bb      	ldrb	r3, [r7, #2]
 8009158:	883a      	ldrh	r2, [r7, #0]
 800915a:	78f9      	ldrb	r1, [r7, #3]
 800915c:	f7f8 f90d 	bl	800137a <HAL_PCD_EP_Open>
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f958 	bl	800941c <USBD_Get_USB_Status>
 800916c:	4603      	mov	r3, r0
 800916e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009170:	7bbb      	ldrb	r3, [r7, #14]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009194:	78fa      	ldrb	r2, [r7, #3]
 8009196:	4611      	mov	r1, r2
 8009198:	4618      	mov	r0, r3
 800919a:	f7f8 f94b 	bl	8001434 <HAL_PCD_EP_Close>
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f939 	bl	800941c <USBD_Get_USB_Status>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f8 f9f4 	bl	80015c4 <HAL_PCD_EP_SetStall>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f91a 	bl	800941c <USBD_Get_USB_Status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	460b      	mov	r3, r1
 8009200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009210:	78fa      	ldrb	r2, [r7, #3]
 8009212:	4611      	mov	r1, r2
 8009214:	4618      	mov	r0, r3
 8009216:	f7f8 fa27 	bl	8001668 <HAL_PCD_EP_ClrStall>
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	4618      	mov	r0, r3
 8009222:	f000 f8fb 	bl	800941c <USBD_Get_USB_Status>
 8009226:	4603      	mov	r3, r0
 8009228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922a:	7bbb      	ldrb	r3, [r7, #14]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009246:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800924c:	2b00      	cmp	r3, #0
 800924e:	da0b      	bge.n	8009268 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	440b      	add	r3, r1
 8009262:	3312      	adds	r3, #18
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	e00b      	b.n	8009280 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	00db      	lsls	r3, r3, #3
 8009278:	440b      	add	r3, r1
 800927a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800927e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092a6:	78fa      	ldrb	r2, [r7, #3]
 80092a8:	4611      	mov	r1, r2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7f8 f841 	bl	8001332 <HAL_PCD_SetAddress>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f8b0 	bl	800941c <USBD_Get_USB_Status>
 80092bc:	4603      	mov	r3, r0
 80092be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	460b      	mov	r3, r1
 80092d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092e8:	7af9      	ldrb	r1, [r7, #11]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f7f8 f932 	bl	8001556 <HAL_PCD_EP_Transmit>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 f88f 	bl	800941c <USBD_Get_USB_Status>
 80092fe:	4603      	mov	r3, r0
 8009300:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009302:	7dbb      	ldrb	r3, [r7, #22]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	460b      	mov	r3, r1
 800931a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800932a:	7af9      	ldrb	r1, [r7, #11]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	f7f8 f8c8 	bl	80014c4 <HAL_PCD_EP_Receive>
 8009334:	4603      	mov	r3, r0
 8009336:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f86e 	bl	800941c <USBD_Get_USB_Status>
 8009340:	4603      	mov	r3, r0
 8009342:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009344:	7dbb      	ldrb	r3, [r7, #22]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7f8 f8de 	bl	8001526 <HAL_PCD_EP_GetRxCount>
 800936a:	4603      	mov	r3, r0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <HAL_PCDEx_LPM_Callback+0x18>
 8009386:	2b01      	cmp	r3, #1
 8009388:	d013      	beq.n	80093b2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800938a:	e023      	b.n	80093d4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	7a5b      	ldrb	r3, [r3, #9]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009394:	f000 f83c 	bl	8009410 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009398:	4b10      	ldr	r3, [pc, #64]	; (80093dc <HAL_PCDEx_LPM_Callback+0x68>)
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	4a0f      	ldr	r2, [pc, #60]	; (80093dc <HAL_PCDEx_LPM_Callback+0x68>)
 800939e:	f023 0306 	bic.w	r3, r3, #6
 80093a2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fb83 	bl	8007ab6 <USBD_LL_Resume>
    break;
 80093b0:	e010      	b.n	80093d4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe fb60 	bl	8007a7e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7a5b      	ldrb	r3, [r3, #9]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d005      	beq.n	80093d2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093c6:	4b05      	ldr	r3, [pc, #20]	; (80093dc <HAL_PCDEx_LPM_Callback+0x68>)
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	4a04      	ldr	r2, [pc, #16]	; (80093dc <HAL_PCDEx_LPM_Callback+0x68>)
 80093cc:	f043 0306 	orr.w	r3, r3, #6
 80093d0:	6113      	str	r3, [r2, #16]
    break;
 80093d2:	bf00      	nop
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	e000ed00 	.word	0xe000ed00

080093e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093e8:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <USBD_static_malloc+0x18>)
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	20001938 	.word	0x20001938

080093fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009414:	f7f6 feda 	bl	80001cc <SystemClock_Config>
}
 8009418:	bf00      	nop
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	2b03      	cmp	r3, #3
 800942e:	d817      	bhi.n	8009460 <USBD_Get_USB_Status+0x44>
 8009430:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <USBD_Get_USB_Status+0x1c>)
 8009432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009436:	bf00      	nop
 8009438:	08009449 	.word	0x08009449
 800943c:	0800944f 	.word	0x0800944f
 8009440:	08009455 	.word	0x08009455
 8009444:	0800945b 	.word	0x0800945b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
    break;
 800944c:	e00b      	b.n	8009466 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800944e:	2303      	movs	r3, #3
 8009450:	73fb      	strb	r3, [r7, #15]
    break;
 8009452:	e008      	b.n	8009466 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009454:	2301      	movs	r3, #1
 8009456:	73fb      	strb	r3, [r7, #15]
    break;
 8009458:	e005      	b.n	8009466 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800945a:	2303      	movs	r3, #3
 800945c:	73fb      	strb	r3, [r7, #15]
    break;
 800945e:	e002      	b.n	8009466 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009460:	2303      	movs	r3, #3
 8009462:	73fb      	strb	r3, [r7, #15]
    break;
 8009464:	bf00      	nop
  }
  return usb_status;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <memset>:
 8009474:	4402      	add	r2, r0
 8009476:	4603      	mov	r3, r0
 8009478:	4293      	cmp	r3, r2
 800947a:	d100      	bne.n	800947e <memset+0xa>
 800947c:	4770      	bx	lr
 800947e:	f803 1b01 	strb.w	r1, [r3], #1
 8009482:	e7f9      	b.n	8009478 <memset+0x4>

08009484 <__libc_init_array>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4d0d      	ldr	r5, [pc, #52]	; (80094bc <__libc_init_array+0x38>)
 8009488:	4c0d      	ldr	r4, [pc, #52]	; (80094c0 <__libc_init_array+0x3c>)
 800948a:	1b64      	subs	r4, r4, r5
 800948c:	10a4      	asrs	r4, r4, #2
 800948e:	2600      	movs	r6, #0
 8009490:	42a6      	cmp	r6, r4
 8009492:	d109      	bne.n	80094a8 <__libc_init_array+0x24>
 8009494:	4d0b      	ldr	r5, [pc, #44]	; (80094c4 <__libc_init_array+0x40>)
 8009496:	4c0c      	ldr	r4, [pc, #48]	; (80094c8 <__libc_init_array+0x44>)
 8009498:	f000 f818 	bl	80094cc <_init>
 800949c:	1b64      	subs	r4, r4, r5
 800949e:	10a4      	asrs	r4, r4, #2
 80094a0:	2600      	movs	r6, #0
 80094a2:	42a6      	cmp	r6, r4
 80094a4:	d105      	bne.n	80094b2 <__libc_init_array+0x2e>
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ac:	4798      	blx	r3
 80094ae:	3601      	adds	r6, #1
 80094b0:	e7ee      	b.n	8009490 <__libc_init_array+0xc>
 80094b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b6:	4798      	blx	r3
 80094b8:	3601      	adds	r6, #1
 80094ba:	e7f2      	b.n	80094a2 <__libc_init_array+0x1e>
 80094bc:	080095d8 	.word	0x080095d8
 80094c0:	080095d8 	.word	0x080095d8
 80094c4:	080095d8 	.word	0x080095d8
 80094c8:	080095dc 	.word	0x080095dc

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
