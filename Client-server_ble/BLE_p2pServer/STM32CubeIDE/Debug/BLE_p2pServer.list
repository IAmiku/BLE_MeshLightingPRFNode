
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d5c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000175cc  08016ea0  08016ea0  00026ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802e46c  0802e46c  0003e46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802e474  0802e474  0003e474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802e478  0802e478  0003e478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000248  20000008  0802e47c  00040008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  20000250  0802e6c4  00040250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000278  0802e6e9  00040278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034cc  2000028c  0802e6fa  0004028c  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20003758  0802e6fa  00043758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040289  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00050000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00050000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00050000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  000402b9  2**0
                  CONTENTS, READONLY
 16 .debug_info   00039efa  00000000  00000000  000402fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000086b1  00000000  00000000  0007a1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000033e8  00000000  00000000  000828a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000027bd  00000000  00000000  00085c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00032976  00000000  00000000  0008844d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00042302  00000000  00000000  000badc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0010eead  00000000  00000000  000fd0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000e964  00000000  00000000  0020bf74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000bd  00000000  00000000  0021a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000028c 	.word	0x2000028c
 800015c:	00000000 	.word	0x00000000
 8000160:	08016e84 	.word	0x08016e84

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000290 	.word	0x20000290
 800017c:	08016e84 	.word	0x08016e84

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <DFS>:
int blob_sum_x, blob_sum_y;

int visited[N][N];  // Track visited cells

// DFS function
void DFS(int matrix[N][N], int x, int y, Point *sum, int *count) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	603b      	str	r3, [r7, #0]
	// Check for out-of-bounds
	if (x < 0 || x >= N || y < 0 || y >= N) {
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f2c0 80bb 	blt.w	80010a0 <DFS+0x18c>
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b07      	cmp	r3, #7
 8000f2e:	f300 80b7 	bgt.w	80010a0 <DFS+0x18c>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f2c0 80b3 	blt.w	80010a0 <DFS+0x18c>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	f300 80af 	bgt.w	80010a0 <DFS+0x18c>
		return;
	}

	// Check if the cell has been visited or is below the threshold
	if (visited[x][y] || matrix[x][y] <= THRESHOLD) {
 8000f42:	495a      	ldr	r1, [pc, #360]	; (80010ac <DFS+0x198>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	00da      	lsls	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f040 80a7 	bne.w	80010a4 <DFS+0x190>
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f68:	f340 809c 	ble.w	80010a4 <DFS+0x190>
		return;
	}

	visited[x][y] = 1;
 8000f6c:	494f      	ldr	r1, [pc, #316]	; (80010ac <DFS+0x198>)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	00da      	lsls	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	2201      	movs	r2, #1
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	*count += 1;
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	601a      	str	r2, [r3, #0]
	sum->x += x;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	ed93 7a00 	vldr	s14, [r3]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
	sum->y += y;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	edc3 7a01 	vstr	s15, [r3, #4]

	// Visit the neighboring cells
	if ((matrix[x][y] + VARIATION) > matrix[x - 1][y]) {
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	015b      	lsls	r3, r3, #5
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	015b      	lsls	r3, r3, #5
 8000fd6:	68f9      	ldr	r1, [r7, #12]
 8000fd8:	440b      	add	r3, r1
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	db08      	blt.n	8000ff6 <DFS+0xe2>
		DFS(matrix, x - 1, y, sum, count);   // Left
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1e59      	subs	r1, r3, #1
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f7ff ff8f 	bl	8000f14 <DFS>
	}
	if ((matrix[x][y] + VARIATION) > matrix[x + 1][y]) {
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	015b      	lsls	r3, r3, #5
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3301      	adds	r3, #1
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	68f9      	ldr	r1, [r7, #12]
 8001010:	440b      	add	r3, r1
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001018:	429a      	cmp	r2, r3
 800101a:	db08      	blt.n	800102e <DFS+0x11a>
		DFS(matrix, x + 1, y, sum, count);   // Right
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c59      	adds	r1, r3, #1
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f7ff ff73 	bl	8000f14 <DFS>
	}
	if ((matrix[x][y] + VARIATION) > matrix[x][y - 1]) {
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	015b      	lsls	r3, r3, #5
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103c:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	015b      	lsls	r3, r3, #5
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	440b      	add	r3, r1
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	3901      	subs	r1, #1
 800104c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001050:	429a      	cmp	r2, r3
 8001052:	db08      	blt.n	8001066 <DFS+0x152>
		DFS(matrix, x, y - 1, sum, count);   // Up
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68b9      	ldr	r1, [r7, #8]
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff ff57 	bl	8000f14 <DFS>
	}
	if ((matrix[x][y] + VARIATION) > matrix[x][y + 1]) {
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	015b      	lsls	r3, r3, #5
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4413      	add	r3, r2
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	015b      	lsls	r3, r3, #5
 800107c:	68f9      	ldr	r1, [r7, #12]
 800107e:	440b      	add	r3, r1
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	3101      	adds	r1, #1
 8001084:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001088:	429a      	cmp	r2, r3
 800108a:	db0c      	blt.n	80010a6 <DFS+0x192>
		DFS(matrix, x, y + 1, sum, count);   // Down
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f7ff ff3b 	bl	8000f14 <DFS>
 800109e:	e002      	b.n	80010a6 <DFS+0x192>
		return;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <DFS+0x192>
		return;
 80010a4:	bf00      	nop
	}
}
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200002a8 	.word	0x200002a8

080010b0 <find_centers_of_mass>:

int find_centers_of_mass(int matrix[N][N], Point *center_of_mass) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	; 0x40
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	// Initialize visited matrix
	for (int i = 0; i < N; i++) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
 80010be:	e013      	b.n	80010e8 <find_centers_of_mass+0x38>
		for (int j = 0; j < N; j++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
 80010c4:	e00a      	b.n	80010dc <find_centers_of_mass+0x2c>
			visited[i][j] = 0;
 80010c6:	4954      	ldr	r1, [pc, #336]	; (8001218 <find_centers_of_mass+0x168>)
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ca:	00da      	lsls	r2, r3, #3
 80010cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ce:	4413      	add	r3, r2
 80010d0:	2200      	movs	r2, #0
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < N; j++) {
 80010d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d8:	3301      	adds	r3, #1
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
 80010dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010de:	2b07      	cmp	r3, #7
 80010e0:	ddf1      	ble.n	80010c6 <find_centers_of_mass+0x16>
	for (int i = 0; i < N; i++) {
 80010e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e4:	3301      	adds	r3, #1
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
 80010e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	dde8      	ble.n	80010c0 <find_centers_of_mass+0x10>
		}
	}

	int blob_count = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Traverse the matrix
	bool not_finish_visiting = 1;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (not_finish_visiting){
 80010f8:	e083      	b.n	8001202 <find_centers_of_mass+0x152>
	    int newhigh , highx , highy;
	    newhigh=-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    	for (int i = 0; i < N; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	e043      	b.n	800118e <find_centers_of_mass+0xde>
    		for (int j = 0; j < N; j++) {
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e03a      	b.n	8001182 <find_centers_of_mass+0xd2>
    		    //printf("%d--%d---%d--%d\n",i,j,matrix[i][j] > newhigh && matrix[i][j] > THRESHOLD && !visited[i][j],(i==j)&&i==(N-1));
    			if (matrix[i][j] > newhigh && matrix[i][j] > THRESHOLD && !visited[i][j]) {
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	015b      	lsls	r3, r3, #5
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111c:	429a      	cmp	r2, r3
 800111e:	da1f      	bge.n	8001160 <find_centers_of_mass+0xb0>
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	015b      	lsls	r3, r3, #5
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001132:	dd15      	ble.n	8001160 <find_centers_of_mass+0xb0>
 8001134:	4938      	ldr	r1, [pc, #224]	; (8001218 <find_centers_of_mass+0x168>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	00da      	lsls	r2, r3, #3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	4413      	add	r3, r2
 800113e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <find_centers_of_mass+0xb0>
                    newhigh=matrix[i][j];
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	015b      	lsls	r3, r3, #5
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
                    highx=i;highy=j;
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e00d      	b.n	800117c <find_centers_of_mass+0xcc>
    			}else if((i==j)&&i==(N-1)&&newhigh==-1){not_finish_visiting=false;}
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	d109      	bne.n	800117c <find_centers_of_mass+0xcc>
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b07      	cmp	r3, #7
 800116c:	d106      	bne.n	800117c <find_centers_of_mass+0xcc>
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d102      	bne.n	800117c <find_centers_of_mass+0xcc>
 8001176:	2300      	movs	r3, #0
 8001178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    		for (int j = 0; j < N; j++) {
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b07      	cmp	r3, #7
 8001186:	ddc1      	ble.n	800110c <find_centers_of_mass+0x5c>
    	for (int i = 0; i < N; i++) {
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	3301      	adds	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2b07      	cmp	r3, #7
 8001192:	ddb8      	ble.n	8001106 <find_centers_of_mass+0x56>
    		}
    	}
		Point sum = { 0, 0 };
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
		int count = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
		DFS(matrix, highx, highy, &sum, &count);
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4613      	mov	r3, r2
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	6a39      	ldr	r1, [r7, #32]
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff fead 	bl	8000f14 <DFS>
		if (count >= MIN_BLOB_SIZE) {
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	dd20      	ble.n	8001202 <find_centers_of_mass+0x152>
			center_of_mass[blob_count].x = sum.x / count;
 80011c0:	edd7 6a03 	vldr	s13, [r7, #12]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011da:	edc3 7a00 	vstr	s15, [r3]
			center_of_mass[blob_count].y = sum.y / count;
 80011de:	edd7 6a04 	vldr	s13, [r7, #16]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f8:	edc3 7a01 	vstr	s15, [r3, #4]
			blob_count++;
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	3301      	adds	r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (not_finish_visiting){
 8001202:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001206:	2b00      	cmp	r3, #0
 8001208:	f47f af77 	bne.w	80010fa <find_centers_of_mass+0x4a>
		}
		//printf("Blob dectected %d\n",blob_count);

	}

	return blob_count;
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800120e:	4618      	mov	r0, r3
 8001210:	3738      	adds	r7, #56	; 0x38
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200002a8 	.word	0x200002a8

0800121c <find_proportional_average>:

// Function to find the proportional average value of a blob around its center of mass
float find_proportional_average(int matrix[N][N], Point center_of_mass) {
 800121c:	b480      	push	{r7}
 800121e:	b08d      	sub	sp, #52	; 0x34
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	eeb0 7a40 	vmov.f32	s14, s0
 8001228:	eef0 7a60 	vmov.f32	s15, s1
 800122c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001230:	edc7 7a02 	vstr	s15, [r7, #8]
	int x = (int) (center_of_mass.x);
 8001234:	edd7 7a01 	vldr	s15, [r7, #4]
 8001238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123c:	ee17 3a90 	vmov	r3, s15
 8001240:	61fb      	str	r3, [r7, #28]
	int y = (int) (center_of_mass.y);
 8001242:	edd7 7a02 	vldr	s15, [r7, #8]
 8001246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124a:	ee17 3a90 	vmov	r3, s15
 800124e:	61bb      	str	r3, [r7, #24]
	float sum = 0.0f;
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
	float weight_sum = 0.0f;
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28

	// Iterate through a 2x2 grid around the center of mass
	for (int dx = 0; dx <= 1; dx++) {
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e076      	b.n	8001350 <find_proportional_average+0x134>
		for (int dy = 0; dy <= 1; dy++) {
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
 8001266:	e06d      	b.n	8001344 <find_proportional_average+0x128>
			// Check if the cell is within the matrix bounds and belongs to the blob (above threshold)
			if (x + dx
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	4413      	add	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	db65      	blt.n	800133e <find_proportional_average+0x122>
					>= 0&& x + dx < N && y + dy >= 0 && y + dy < N && matrix[x + dx][y + dy] >= THRESHOLD) {
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	4413      	add	r3, r2
 8001278:	2b07      	cmp	r3, #7
 800127a:	dc60      	bgt.n	800133e <find_proportional_average+0x122>
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	4413      	add	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	db5b      	blt.n	800133e <find_proportional_average+0x122>
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	4413      	add	r3, r2
 800128c:	2b07      	cmp	r3, #7
 800128e:	dc56      	bgt.n	800133e <find_proportional_average+0x122>
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	4413      	add	r3, r2
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	69b9      	ldr	r1, [r7, #24]
 800129e:	6a3a      	ldr	r2, [r7, #32]
 80012a0:	440a      	add	r2, r1
 80012a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012aa:	db48      	blt.n	800133e <find_proportional_average+0x122>
				// Calculate the weight based on the distance from the center of mass
				float weight = (
						dx == 0 ?
								1.0f - fabsf(y + dy - center_of_mass.y) :
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d111      	bne.n	80012d6 <find_proportional_average+0xba>
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	4413      	add	r3, r2
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c8:	eef0 7ae7 	vabs.f32	s15, s15
 80012cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d4:	e010      	b.n	80012f8 <find_proportional_average+0xdc>
								1.0f - fabsf(x + dx - center_of_mass.x));
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	4413      	add	r3, r2
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ec:	eef0 7ae7 	vabs.f32	s15, s15
								1.0f - fabsf(y + dy - center_of_mass.y) :
 80012f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012f4:	ee77 7a67 	vsub.f32	s15, s14, s15
				float weight = (
 80012f8:	edc7 7a05 	vstr	s15, [r7, #20]
				sum += (float) matrix[x + dx][y + dy] * weight; // Sum the weighted values
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	4413      	add	r3, r2
 8001302:	015b      	lsls	r3, r3, #5
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	69b9      	ldr	r1, [r7, #24]
 800130a:	6a3a      	ldr	r2, [r7, #32]
 800130c:	440a      	add	r2, r1
 800130e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	edd7 7a05 	vldr	s15, [r7, #20]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				weight_sum += weight; // Sum the weights for normalization
 800132e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001332:	edd7 7a05 	vldr	s15, [r7, #20]
 8001336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		for (int dy = 0; dy <= 1; dy++) {
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	3301      	adds	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	2b01      	cmp	r3, #1
 8001348:	dd8e      	ble.n	8001268 <find_proportional_average+0x4c>
	for (int dx = 0; dx <= 1; dx++) {
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	3301      	adds	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	2b01      	cmp	r3, #1
 8001354:	dd85      	ble.n	8001262 <find_proportional_average+0x46>
                #endif
			}
		}
	}

	return sum / weight_sum; // Return the proportional average value
 8001356:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800135a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800135e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001362:	eef0 7a66 	vmov.f32	s15, s13
}
 8001366:	eeb0 0a67 	vmov.f32	s0, s15
 800136a:	3734      	adds	r7, #52	; 0x34
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <parse_frame>:
// Function to parse a frame and extract blob information
FrameInfo parse_frame(int matrix[N][N], float deltaX, float deltaY) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 800137a:	af00      	add	r7, sp, #0
 800137c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001380:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001384:	6018      	str	r0, [r3, #0]
 8001386:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800138a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800138e:	6019      	str	r1, [r3, #0]
 8001390:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001394:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001398:	ed83 0a00 	vstr	s0, [r3]
 800139c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80013a0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80013a4:	edc3 0a00 	vstr	s1, [r3]
	FrameInfo frame_info;
	Point centers_of_mass[MAX_BLOBS];

	frame_info.num_blobs = find_centers_of_mass(matrix, centers_of_mass);
 80013a8:	f107 0210 	add.w	r2, r7, #16
 80013ac:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80013b0:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80013b4:	4611      	mov	r1, r2
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	f7ff fe7a 	bl	80010b0 <find_centers_of_mass>
 80013bc:	4602      	mov	r2, r0
 80013be:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80013c2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80013c6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

	frame_info.delta_X = deltaX;
 80013ca:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80013ce:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80013d2:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 80013d6:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	frame_info.delta_Y = deltaY;
 80013e0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80013e4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80013e8:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 80013ec:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	for (int i = 0; i < frame_info.num_blobs; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80013fc:	e064      	b.n	80014c8 <parse_frame+0x154>
		frame_info.Blobs[i].center_of_mass = centers_of_mass[i];
 80013fe:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001402:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 8001406:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4419      	add	r1, r3
 8001414:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001418:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800141c:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8001420:	460c      	mov	r4, r1
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4413      	add	r3, r2
 8001426:	e893 0003 	ldmia.w	r3, {r0, r1}
 800142a:	e884 0003 	stmia.w	r4, {r0, r1}
		frame_info.Blobs[i].proportional_average = find_proportional_average(
 800142e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001432:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8001436:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 800143a:	00d1      	lsls	r1, r2, #3
 800143c:	4419      	add	r1, r3
 800143e:	ed91 7a00 	vldr	s14, [r1]
 8001442:	00d2      	lsls	r2, r2, #3
 8001444:	4413      	add	r3, r2
 8001446:	3304      	adds	r3, #4
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001450:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001454:	eeb0 0a47 	vmov.f32	s0, s14
 8001458:	eef0 0a67 	vmov.f32	s1, s15
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	f7ff fedd 	bl	800121c <find_proportional_average>
 8001462:	eef0 7a40 	vmov.f32	s15, s0
 8001466:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800146a:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 800146e:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	3308      	adds	r3, #8
 800147e:	edc3 7a00 	vstr	s15, [r3]
				matrix, centers_of_mass[i]);
		frame_info.Blobs[i].direction = 0.0f; // Set default direction as 0
 8001482:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001486:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 800148a:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	3310      	adds	r3, #16
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
		frame_info.Blobs[i].velocity = 0.0f;  // Set default velocity as 0
 80014a0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80014a4:	f5a3 7102 	sub.w	r1, r3, #520	; 0x208
 80014a8:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	3314      	adds	r3, #20
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < frame_info.num_blobs; i++) {
 80014be:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80014c2:	3301      	adds	r3, #1
 80014c4:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80014c8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80014cc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80014d0:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80014d4:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80014d8:	429a      	cmp	r2, r3
 80014da:	db90      	blt.n	80013fe <parse_frame+0x8a>
        printf("Blob %d center of mass: (%.5f %.5f)\n", i + 1, frame_info.Blobs[i].center_of_mass.x, frame_info.Blobs[i].center_of_mass.y);
        printf("Proportional average for blob %d: %.5f\n", i + 1, frame_info.Blobs[i].proportional_average);
#endif
	}

	return frame_info;
 80014dc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80014e0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80014ea:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 7301 	mov.w	r3, #516	; 0x204
 80014f6:	461a      	mov	r2, r3
 80014f8:	f013 fcb1 	bl	8014e5e <memcpy>
}
 80014fc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001500:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	f507 7731 	add.w	r7, r7, #708	; 0x2c4
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}

0800150e <next_permutation>:

bool next_permutation(int *first, int *last) {
 800150e:	b480      	push	{r7}
 8001510:	b087      	sub	sp, #28
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
	if (first == last)
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d101      	bne.n	8001524 <next_permutation+0x16>
		return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e04a      	b.n	80015ba <next_permutation+0xac>
	int *i = last - 1;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3b04      	subs	r3, #4
 8001528:	617b      	str	r3, [r7, #20]
	while (i > first && *(i - 1) >= *i)
 800152a:	e002      	b.n	8001532 <next_permutation+0x24>
		--i;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3b04      	subs	r3, #4
 8001530:	617b      	str	r3, [r7, #20]
	while (i > first && *(i - 1) >= *i)
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d906      	bls.n	8001548 <next_permutation+0x3a>
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3b04      	subs	r3, #4
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	daf1      	bge.n	800152c <next_permutation+0x1e>
	if (i == first)
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	d101      	bne.n	8001554 <next_permutation+0x46>
		return false;
 8001550:	2300      	movs	r3, #0
 8001552:	e032      	b.n	80015ba <next_permutation+0xac>
	int *j = last - 1;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	3b04      	subs	r3, #4
 8001558:	613b      	str	r3, [r7, #16]
	while (*j <= *(i - 1))
 800155a:	e002      	b.n	8001562 <next_permutation+0x54>
		--j;
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	3b04      	subs	r3, #4
 8001560:	613b      	str	r3, [r7, #16]
	while (*j <= *(i - 1))
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3b04      	subs	r3, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	ddf5      	ble.n	800155c <next_permutation+0x4e>
	int temp = *(i - 1);
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8001576:	60fb      	str	r3, [r7, #12]
	*(i - 1) = *j;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3b04      	subs	r3, #4
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	601a      	str	r2, [r3, #0]
	*j = temp;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	601a      	str	r2, [r3, #0]
	for (j = last - 1; i < j; ++i, --j) {
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3b04      	subs	r3, #4
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e00f      	b.n	80015b0 <next_permutation+0xa2>
		temp = *i;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
		*i = *j;
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	601a      	str	r2, [r3, #0]
		*j = temp;
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	601a      	str	r2, [r3, #0]
	for (j = last - 1; i < j; ++i, --j) {
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3304      	adds	r3, #4
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	3b04      	subs	r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d3eb      	bcc.n	8001590 <next_permutation+0x82>
	}
	return true;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <link_latest_frame_to_previous>:

void link_latest_frame_to_previous(FIFObuffer *fifobuffer) {
 80015c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015cc:	b097      	sub	sp, #92	; 0x5c
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
	if (fifobuffer->count == 0) {
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80015d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8183 	beq.w	80018e8 <link_latest_frame_to_previous+0x320>
		return;
	}

	FrameInfo *latest_frame = &(fifobuffer->buffer[fifobuffer->rear]);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80015e8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80015ec:	4613      	mov	r3, r2
 80015ee:	01db      	lsls	r3, r3, #7
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int second_latest_frame_index = (fifobuffer->rear + FIFO_SIZE - 1)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001600:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001604:	f103 0227 	add.w	r2, r3, #39	; 0x27
 8001608:	4bba      	ldr	r3, [pc, #744]	; (80018f4 <link_latest_frame_to_previous+0x32c>)
 800160a:	fb83 1302 	smull	r1, r3, r3, r2
 800160e:	1119      	asrs	r1, r3, #4
 8001610:	17d3      	asrs	r3, r2, #31
 8001612:	1ac9      	subs	r1, r1, r3
 8001614:	460b      	mov	r3, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
			% FIFO_SIZE;
	FrameInfo *second_latest_frame =
 8001620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001622:	4613      	mov	r3, r2
 8001624:	01db      	lsls	r3, r3, #7
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4413      	add	r3, r2
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
			&(fifobuffer->buffer[second_latest_frame_index]);

	if (fifobuffer->count == 1) {
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800163a:	2b01      	cmp	r3, #1
 800163c:	d125      	bne.n	800168a <link_latest_frame_to_previous+0xc2>
		for (int i = 0; i < latest_frame->num_blobs; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	657b      	str	r3, [r7, #84]	; 0x54
 8001642:	e01b      	b.n	800167c <link_latest_frame_to_previous+0xb4>
			fifobuffer->current_ID++;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800164a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800164e:	3301      	adds	r3, #1
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8001656:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
			latest_frame->Blobs[i].ID = fifobuffer->current_ID;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001660:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8001664:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	4403      	add	r3, r0
 8001672:	330c      	adds	r3, #12
 8001674:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < latest_frame->num_blobs; i++) {
 8001676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001678:	3301      	adds	r3, #1
 800167a:	657b      	str	r3, [r7, #84]	; 0x54
 800167c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800167e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001682:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001684:	429a      	cmp	r2, r3
 8001686:	dbdd      	blt.n	8001644 <link_latest_frame_to_previous+0x7c>
 8001688:	e12f      	b.n	80018ea <link_latest_frame_to_previous+0x322>
		}
	} else {
 800168a:	466b      	mov	r3, sp
 800168c:	60bb      	str	r3, [r7, #8]
		int num_blobs = latest_frame->num_blobs;
 800168e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001690:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
		int num_blobs_prev = second_latest_frame->num_blobs;
 8001696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001698:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
		float min_distance = INFINITY;
 800169e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80016a2:	653b      	str	r3, [r7, #80]	; 0x50
		int min_permutation[num_blobs];
 80016a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016a6:	1e4b      	subs	r3, r1, #1
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80016aa:	460a      	mov	r2, r1
 80016ac:	2300      	movs	r3, #0
 80016ae:	603a      	str	r2, [r7, #0]
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	0143      	lsls	r3, r0, #5
 80016be:	6838      	ldr	r0, [r7, #0]
 80016c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	0142      	lsls	r2, r0, #5
 80016c8:	460a      	mov	r2, r1
 80016ca:	2300      	movs	r3, #0
 80016cc:	4692      	mov	sl, r2
 80016ce:	469b      	mov	fp, r3
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80016dc:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80016e0:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80016e4:	460b      	mov	r3, r1
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	3307      	adds	r3, #7
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	ebad 0d03 	sub.w	sp, sp, r3
 80016f2:	466b      	mov	r3, sp
 80016f4:	3303      	adds	r3, #3
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
		int permutation[num_blobs];
 80016fc:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80016fe:	1e73      	subs	r3, r6, #1
 8001700:	623b      	str	r3, [r7, #32]
 8001702:	4632      	mov	r2, r6
 8001704:	2300      	movs	r3, #0
 8001706:	4690      	mov	r8, r2
 8001708:	4699      	mov	r9, r3
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001716:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800171a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800171e:	4632      	mov	r2, r6
 8001720:	2300      	movs	r3, #0
 8001722:	4614      	mov	r4, r2
 8001724:	461d      	mov	r5, r3
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	016b      	lsls	r3, r5, #5
 8001730:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001734:	0162      	lsls	r2, r4, #5
 8001736:	4633      	mov	r3, r6
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	3307      	adds	r3, #7
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	ebad 0d03 	sub.w	sp, sp, r3
 8001744:	466b      	mov	r3, sp
 8001746:	3303      	adds	r3, #3
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < num_blobs; i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001752:	e007      	b.n	8001764 <link_latest_frame_to_previous+0x19c>
			permutation[i] = i;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001758:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 0; i < num_blobs; i++) {
 800175e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001760:	3301      	adds	r3, #1
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001768:	429a      	cmp	r2, r3
 800176a:	dbf3      	blt.n	8001754 <link_latest_frame_to_previous+0x18c>
		}

		do {
			float distance_sum = 0.0f;
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	64bb      	str	r3, [r7, #72]	; 0x48
			for (int i = 0; i < num_blobs; i++) {
 8001772:	2300      	movs	r3, #0
 8001774:	647b      	str	r3, [r7, #68]	; 0x44
 8001776:	e053      	b.n	8001820 <link_latest_frame_to_previous+0x258>
				if (permutation[i] < num_blobs_prev) {
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800177c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001782:	429a      	cmp	r2, r3
 8001784:	dd49      	ble.n	800181a <link_latest_frame_to_previous+0x252>
					float dx =
							latest_frame->Blobs[i].center_of_mass.x
 8001786:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	ed93 7a00 	vldr	s14, [r3]
									- second_latest_frame->Blobs[permutation[i]].center_of_mass.x;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800179c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	edd3 7a00 	vldr	s15, [r3]
					float dx =
 80017b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b4:	edc7 7a06 	vstr	s15, [r7, #24]
					float dy =
							latest_frame->Blobs[i].center_of_mass.y
 80017b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	3304      	adds	r3, #4
 80017c8:	ed93 7a00 	vldr	s14, [r3]
									- second_latest_frame->Blobs[permutation[i]].center_of_mass.y;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	3304      	adds	r3, #4
 80017e2:	edd3 7a00 	vldr	s15, [r3]
					float dy =
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	edc7 7a05 	vstr	s15, [r7, #20]
					distance_sum += sqrtf(dx * dx + dy * dy);
 80017ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80017f2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	f015 f99f 	bl	8016b48 <sqrtf>
 800180a:	eeb0 7a40 	vmov.f32	s14, s0
 800180e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001812:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001816:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			for (int i = 0; i < num_blobs; i++) {
 800181a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800181c:	3301      	adds	r3, #1
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
 8001820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001824:	429a      	cmp	r2, r3
 8001826:	dba7      	blt.n	8001778 <link_latest_frame_to_previous+0x1b0>
				}
			}

			if (distance_sum < min_distance) {
 8001828:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800182c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d508      	bpl.n	800184c <link_latest_frame_to_previous+0x284>
				min_distance = distance_sum;
 800183a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800183c:	653b      	str	r3, [r7, #80]	; 0x50
				memcpy(min_permutation, permutation, sizeof(permutation));
 800183e:	4633      	mov	r3, r6
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	461a      	mov	r2, r3
 8001844:	69f9      	ldr	r1, [r7, #28]
 8001846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001848:	f013 fb09 	bl	8014e5e <memcpy>
			}
		} while (next_permutation(permutation, permutation + num_blobs));
 800184c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	4619      	mov	r1, r3
 8001856:	69f8      	ldr	r0, [r7, #28]
 8001858:	f7ff fe59 	bl	800150e <next_permutation>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d184      	bne.n	800176c <link_latest_frame_to_previous+0x1a4>

		for (int i = 0; i < num_blobs; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	643b      	str	r3, [r7, #64]	; 0x40
 8001866:	e038      	b.n	80018da <link_latest_frame_to_previous+0x312>
			if (min_permutation[i] < num_blobs_prev) {
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001872:	429a      	cmp	r2, r3
 8001874:	dd15      	ble.n	80018a2 <link_latest_frame_to_previous+0x2da>
				latest_frame->Blobs[i].ID =
						second_latest_frame->Blobs[min_permutation[i]].ID;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800187a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800187e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	330c      	adds	r3, #12
 800188c:	6819      	ldr	r1, [r3, #0]
				latest_frame->Blobs[i].ID =
 800188e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4403      	add	r3, r0
 800189c:	330c      	adds	r3, #12
 800189e:	6019      	str	r1, [r3, #0]
 80018a0:	e018      	b.n	80018d4 <link_latest_frame_to_previous+0x30c>
			} else {
				fifobuffer->current_ID++;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80018a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80018ac:	3301      	adds	r3, #1
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 80018b4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
				latest_frame->Blobs[i].ID = fifobuffer->current_ID;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80018be:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80018c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4403      	add	r3, r0
 80018d0:	330c      	adds	r3, #12
 80018d2:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < num_blobs; i++) {
 80018d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d6:	3301      	adds	r3, #1
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
 80018da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbc2      	blt.n	8001868 <link_latest_frame_to_previous+0x2a0>
 80018e2:	f8d7 d008 	ldr.w	sp, [r7, #8]
 80018e6:	e000      	b.n	80018ea <link_latest_frame_to_previous+0x322>
		return;
 80018e8:	bf00      	nop
			}
		}
	}
}
 80018ea:	375c      	adds	r7, #92	; 0x5c
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f2:	bf00      	nop
 80018f4:	66666667 	.word	0x66666667

080018f8 <calculate_blob_velocity_and_direction>:


void calculate_blob_velocity_and_direction(FIFObuffer *fifobuffer) {
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b090      	sub	sp, #64	; 0x40
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	if (fifobuffer->count < 2) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800190a:	2b01      	cmp	r3, #1
 800190c:	f340 8167 	ble.w	8001bde <calculate_blob_velocity_and_direction+0x2e6>
		return;
	}

	FrameInfo *latest_frame = &(fifobuffer->buffer[fifobuffer->rear]);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001916:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800191a:	4613      	mov	r3, r2
 800191c:	01db      	lsls	r3, r3, #7
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
	int second_latest_frame_index = (fifobuffer->rear + FIFO_SIZE - 1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 800192e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001932:	f103 0227 	add.w	r2, r3, #39	; 0x27
 8001936:	4bb0      	ldr	r3, [pc, #704]	; (8001bf8 <calculate_blob_velocity_and_direction+0x300>)
 8001938:	fb83 1302 	smull	r1, r3, r3, r2
 800193c:	1119      	asrs	r1, r3, #4
 800193e:	17d3      	asrs	r3, r2, #31
 8001940:	1ac9      	subs	r1, r1, r3
 8001942:	460b      	mov	r3, r1
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	623b      	str	r3, [r7, #32]
			% FIFO_SIZE;
	FrameInfo *second_latest_frame =
 800194e:	6a3a      	ldr	r2, [r7, #32]
 8001950:	4613      	mov	r3, r2
 8001952:	01db      	lsls	r3, r3, #7
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	61fb      	str	r3, [r7, #28]
			&(fifobuffer->buffer[second_latest_frame_index]);

	for (int i = 0; i < latest_frame->num_blobs; i++) {
 800195e:	2300      	movs	r3, #0
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001962:	e134      	b.n	8001bce <calculate_blob_velocity_and_direction+0x2d6>
		int blob_id = latest_frame->Blobs[i].ID;
 8001964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	330c      	adds	r3, #12
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	61bb      	str	r3, [r7, #24]
		float sum_velocity = 0.0f;
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
		float sum_direction = 0.0f;
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
		float weight_sum = 1.0f;
 8001984:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001988:	633b      	str	r3, [r7, #48]	; 0x30

		// Calculate the current velocity and direction using the latest two frames
		for (int j = 0; j < second_latest_frame->num_blobs; j++) {
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800198e:	e083      	b.n	8001a98 <calculate_blob_velocity_and_direction+0x1a0>
			if (second_latest_frame->Blobs[j].ID == blob_id) {
 8001990:	69f9      	ldr	r1, [r7, #28]
 8001992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	330c      	adds	r3, #12
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d174      	bne.n	8001a92 <calculate_blob_velocity_and_direction+0x19a>
				float dx = latest_frame->Blobs[i].center_of_mass.x
 80019a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	ed93 7a00 	vldr	s14, [r3]
						- second_latest_frame->Blobs[j].center_of_mass.x;
 80019ba:	69f9      	ldr	r1, [r7, #28]
 80019bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	edd3 7a00 	vldr	s15, [r3]
				float dx = latest_frame->Blobs[i].center_of_mass.x
 80019cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d0:	edc7 7a05 	vstr	s15, [r7, #20]
				float dy = latest_frame->Blobs[i].center_of_mass.y
 80019d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	3304      	adds	r3, #4
 80019e4:	ed93 7a00 	vldr	s14, [r3]
						- second_latest_frame->Blobs[j].center_of_mass.y;
 80019e8:	69f9      	ldr	r1, [r7, #28]
 80019ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3304      	adds	r3, #4
 80019f8:	edd3 7a00 	vldr	s15, [r3]
				float dy = latest_frame->Blobs[i].center_of_mass.y
 80019fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a00:	edc7 7a04 	vstr	s15, [r7, #16]
				float distance = sqrtf(dx * dx + dy * dy);
 8001a04:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a08:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	f015 f894 	bl	8016b48 <sqrtf>
 8001a20:	ed87 0a03 	vstr	s0, [r7, #12]
				float direction = atan2f(dy, dx);
 8001a24:	edd7 0a05 	vldr	s1, [r7, #20]
 8001a28:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a2c:	f015 f88a 	bl	8016b44 <atan2f>
 8001a30:	ed87 0a02 	vstr	s0, [r7, #8]
				sum_velocity += distance;
 8001a34:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001a38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a40:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				sum_direction += direction * 360.0f / 2 / M_PI;
 8001a44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a46:	f7fe fd67 	bl	8000518 <__aeabi_f2d>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a52:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001bfc <calculate_blob_velocity_and_direction+0x304>
 8001a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a62:	ee16 0a90 	vmov	r0, s13
 8001a66:	f7fe fd57 	bl	8000518 <__aeabi_f2d>
 8001a6a:	a35f      	add	r3, pc, #380	; (adr r3, 8001be8 <calculate_blob_velocity_and_direction+0x2f0>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fed4 	bl	800081c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7fe fbee 	bl	800025c <__adddf3>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f876 	bl	8000b78 <__aeabi_d2f>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 8001a90:	e009      	b.n	8001aa6 <calculate_blob_velocity_and_direction+0x1ae>
		for (int j = 0; j < second_latest_frame->num_blobs; j++) {
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	3301      	adds	r3, #1
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f6ff af75 	blt.w	8001990 <calculate_blob_velocity_and_direction+0x98>
			}
		}

		// Replace the latest velocity and direction by tracing back into the previous frame
		for (int j = 0; j < second_latest_frame->num_blobs; j++) {
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aaa:	e067      	b.n	8001b7c <calculate_blob_velocity_and_direction+0x284>
			if (second_latest_frame->Blobs[j].ID == blob_id) {
 8001aac:	69f9      	ldr	r1, [r7, #28]
 8001aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	330c      	adds	r3, #12
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d158      	bne.n	8001b76 <calculate_blob_velocity_and_direction+0x27e>
				sum_velocity += second_latest_frame->Blobs[j].velocity * 0.4;
 8001ac4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ac6:	f7fe fd27 	bl	8000518 <__aeabi_f2d>
 8001aca:	4604      	mov	r4, r0
 8001acc:	460d      	mov	r5, r1
 8001ace:	69f9      	ldr	r1, [r7, #28]
 8001ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	3314      	adds	r3, #20
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd19 	bl	8000518 <__aeabi_f2d>
 8001ae6:	a342      	add	r3, pc, #264	; (adr r3, 8001bf0 <calculate_blob_velocity_and_direction+0x2f8>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe fd6c 	bl	80005c8 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4620      	mov	r0, r4
 8001af6:	4629      	mov	r1, r5
 8001af8:	f7fe fbb0 	bl	800025c <__adddf3>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff f838 	bl	8000b78 <__aeabi_d2f>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
				sum_direction += second_latest_frame->Blobs[j].direction * 0.4;
 8001b0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b0e:	f7fe fd03 	bl	8000518 <__aeabi_f2d>
 8001b12:	4604      	mov	r4, r0
 8001b14:	460d      	mov	r5, r1
 8001b16:	69f9      	ldr	r1, [r7, #28]
 8001b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	3310      	adds	r3, #16
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcf5 	bl	8000518 <__aeabi_f2d>
 8001b2e:	a330      	add	r3, pc, #192	; (adr r3, 8001bf0 <calculate_blob_velocity_and_direction+0x2f8>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fd48 	bl	80005c8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fb8c 	bl	800025c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f814 	bl	8000b78 <__aeabi_d2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
				weight_sum += 0.4;
 8001b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b56:	f7fe fcdf 	bl	8000518 <__aeabi_f2d>
 8001b5a:	a325      	add	r3, pc, #148	; (adr r3, 8001bf0 <calculate_blob_velocity_and_direction+0x2f8>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fb7c 	bl	800025c <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7ff f804 	bl	8000b78 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
				break;
 8001b74:	e008      	b.n	8001b88 <calculate_blob_velocity_and_direction+0x290>
		for (int j = 0; j < second_latest_frame->num_blobs; j++) {
 8001b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b78:	3301      	adds	r3, #1
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b84:	429a      	cmp	r2, r3
 8001b86:	db91      	blt.n	8001aac <calculate_blob_velocity_and_direction+0x1b4>
			}
		}

		latest_frame->Blobs[i].velocity = sum_velocity / weight_sum;
 8001b88:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001b8c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3314      	adds	r3, #20
 8001ba4:	edc3 7a00 	vstr	s15, [r3]
		latest_frame->Blobs[i].direction = sum_direction / weight_sum;
 8001ba8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001bac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3310      	adds	r3, #16
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < latest_frame->num_blobs; i++) {
 8001bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bca:	3301      	adds	r3, #1
 8001bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001bd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	f6ff aec4 	blt.w	8001964 <calculate_blob_velocity_and_direction+0x6c>
 8001bdc:	e000      	b.n	8001be0 <calculate_blob_velocity_and_direction+0x2e8>
		return;
 8001bde:	bf00      	nop
	}
}
 8001be0:	3740      	adds	r7, #64	; 0x40
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bdb0      	pop	{r4, r5, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	54442d18 	.word	0x54442d18
 8001bec:	400921fb 	.word	0x400921fb
 8001bf0:	9999999a 	.word	0x9999999a
 8001bf4:	3fd99999 	.word	0x3fd99999
 8001bf8:	66666667 	.word	0x66666667
 8001bfc:	43b40000 	.word	0x43b40000

08001c00 <init_fifo>:

// Function to initialize the FIFObuffer
void init_fifo(FIFObuffer *fifo) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	fifo->front = 0;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fifo->rear = -1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	fifo->count = 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	fifo->current_ID = 0; // Initialize current_ID to zero
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <is_full>:

// Function to check if the FIFObuffer is full
bool is_full(FIFObuffer *fifo) {
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
	return (fifo->count == FIFO_SIZE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001c5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c60:	2b28      	cmp	r3, #40	; 0x28
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <is_empty>:

// Function to check if the FIFObuffer is empty
bool is_empty(FIFObuffer *fifo) {
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	return (fifo->count == 0);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001c84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <dequeue>:

// Function to remove the oldest FrameInfo from the FIFObuffer
void dequeue(FIFObuffer *fifo) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	if (!is_empty(fifo)) {
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffe4 	bl	8001c76 <is_empty>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d020      	beq.n	8001cfc <dequeue+0x5c>
		fifo->front = (fifo->front + 1) % FIFO_SIZE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001cc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001cc4:	1c59      	adds	r1, r3, #1
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <dequeue+0x64>)
 8001cc8:	fb83 2301 	smull	r2, r3, r3, r1
 8001ccc:	111a      	asrs	r2, r3, #4
 8001cce:	17cb      	asrs	r3, r1, #31
 8001cd0:	1ad2      	subs	r2, r2, r3
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1aca      	subs	r2, r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001ce2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		fifo->count--;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001cec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8001cf8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	66666667 	.word	0x66666667

08001d08 <enqueue>:

// Function to add a new FrameInfo to the FIFObuffer
void enqueue(FIFObuffer *fifo, FrameInfo frame_info) {
 8001d08:	b084      	sub	sp, #16
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	f107 0014 	add.w	r0, r7, #20
 8001d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (is_full(fifo)) {
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff97 	bl	8001c4e <is_full>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <enqueue+0x24>
		dequeue(fifo);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffba 	bl	8001ca0 <dequeue>
	}
	fifo->rear = (fifo->rear + 1) % FIFO_SIZE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d36:	1c59      	adds	r1, r3, #1
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <enqueue+0xa8>)
 8001d3a:	fb83 2301 	smull	r2, r3, r3, r1
 8001d3e:	111a      	asrs	r2, r3, #4
 8001d40:	17cb      	asrs	r3, r1, #31
 8001d42:	1ad2      	subs	r2, r2, r3
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	1aca      	subs	r2, r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001d54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fifo->buffer[fifo->rear] = frame_info;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001d5e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	01db      	lsls	r3, r3, #7
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f013 f870 	bl	8014e5e <memcpy>
	fifo->count++;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 8001d84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001d88:	3301      	adds	r3, #1
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
 8001d90:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

	link_latest_frame_to_previous(fifo);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fc17 	bl	80015c8 <link_latest_frame_to_previous>
	calculate_blob_velocity_and_direction(fifo);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fdac 	bl	80018f8 <calculate_blob_velocity_and_direction>

#if (!PYTHON_VIEWER&&DEBUG)
    printf("Enqueued FrameInfo at address: %p\n",
            (void*) &(fifo->buffer[fifo->rear]));
#endif
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001daa:	b004      	add	sp, #16
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	66666667 	.word	0x66666667

08001db4 <print_matrix>:
		index = (index + 1) % FIFO_SIZE;
	}
}

// Function to print the matrix on the console
void print_matrix(int matrix[N][N]) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
#if (1)
	printf("##Matrix##|");
 8001dbc:	4813      	ldr	r0, [pc, #76]	; (8001e0c <print_matrix+0x58>)
 8001dbe:	f012 fe81 	bl	8014ac4 <iprintf>
    for (int i = 0; i < N; i++) {
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	e016      	b.n	8001df6 <print_matrix+0x42>
        for (int j = 0; j < N; j++) {
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	e00d      	b.n	8001dea <print_matrix+0x36>
            printf("%d|", matrix[i][j]);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	015b      	lsls	r3, r3, #5
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <print_matrix+0x5c>)
 8001de0:	f012 fe70 	bl	8014ac4 <iprintf>
        for (int j = 0; j < N; j++) {
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b07      	cmp	r3, #7
 8001dee:	ddee      	ble.n	8001dce <print_matrix+0x1a>
    for (int i = 0; i < N; i++) {
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b07      	cmp	r3, #7
 8001dfa:	dde5      	ble.n	8001dc8 <print_matrix+0x14>
        }
    }
    printf("\n");
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f012 fe73 	bl	8014ae8 <putchar>
        printf("\n");
    }

#endif
#endif
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	08016ec4 	.word	0x08016ec4
 8001e10:	08016ed0 	.word	0x08016ed0

08001e14 <print_frame_info_simple>:
		printf("             - Velocity: %.5f, Direction: %.5f\n", velocity,
				direction);
	}
}

void print_frame_info_simple(FrameInfo frame_info) {
 8001e14:	b084      	sub	sp, #16
 8001e16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e1a:	b093      	sub	sp, #76	; 0x4c
 8001e1c:	af08      	add	r7, sp, #32
 8001e1e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001e22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printf("##FRAME##|%d|%.5f|%.5f|\n", frame_info.num_blobs,
 8001e26:	f8d7 6248 	ldr.w	r6, [r7, #584]	; 0x248
			frame_info.delta_X, frame_info.delta_Y);
 8001e2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
	printf("##FRAME##|%d|%.5f|%.5f|\n", frame_info.num_blobs,
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb72 	bl	8000518 <__aeabi_f2d>
 8001e34:	4604      	mov	r4, r0
 8001e36:	460d      	mov	r5, r1
			frame_info.delta_X, frame_info.delta_Y);
 8001e38:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
	printf("##FRAME##|%d|%.5f|%.5f|\n", frame_info.num_blobs,
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb6b 	bl	8000518 <__aeabi_f2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	e9cd 2300 	strd	r2, r3, [sp]
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	462b      	mov	r3, r5
 8001e4e:	4631      	mov	r1, r6
 8001e50:	483e      	ldr	r0, [pc, #248]	; (8001f4c <print_frame_info_simple+0x138>)
 8001e52:	f012 fe37 	bl	8014ac4 <iprintf>

	for (int i = 0; i < frame_info.num_blobs; i++) {
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e06a      	b.n	8001f32 <print_frame_info_simple+0x11e>
		Point center_of_mass = frame_info.Blobs[i].center_of_mass;
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	3348      	adds	r3, #72	; 0x48
 8001e68:	f107 0208 	add.w	r2, r7, #8
 8001e6c:	189a      	adds	r2, r3, r2
 8001e6e:	f107 030c 	add.w	r3, r7, #12
 8001e72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e76:	e883 0003 	stmia.w	r3, {r0, r1}
		float proportional_average = frame_info.Blobs[i].proportional_average;
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	3348      	adds	r3, #72	; 0x48
 8001e86:	f107 0208 	add.w	r2, r7, #8
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	623b      	str	r3, [r7, #32]
		int blob_id = frame_info.Blobs[i].ID; // Add this line to get the Blob's ID
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	3348      	adds	r3, #72	; 0x48
 8001e9e:	f107 0208 	add.w	r2, r7, #8
 8001ea2:	4413      	add	r3, r2
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61fb      	str	r3, [r7, #28]
		float velocity = frame_info.Blobs[i].velocity;
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	3348      	adds	r3, #72	; 0x48
 8001eb6:	f107 0208 	add.w	r2, r7, #8
 8001eba:	4413      	add	r3, r2
 8001ebc:	3314      	adds	r3, #20
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
		float direction = frame_info.Blobs[i].direction;
 8001ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	3348      	adds	r3, #72	; 0x48
 8001ece:	f107 0208 	add.w	r2, r7, #8
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3310      	adds	r3, #16
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	617b      	str	r3, [r7, #20]
		printf("##BLOBS##|%d|%.5f|%.5f|%.5f|%.5f|%.5f|\n", blob_id,
				center_of_mass.x, center_of_mass.y, proportional_average,
 8001eda:	68fb      	ldr	r3, [r7, #12]
		printf("##BLOBS##|%d|%.5f|%.5f|%.5f|%.5f|%.5f|\n", blob_id,
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb1b 	bl	8000518 <__aeabi_f2d>
 8001ee2:	e9c7 0100 	strd	r0, r1, [r7]
				center_of_mass.x, center_of_mass.y, proportional_average,
 8001ee6:	693b      	ldr	r3, [r7, #16]
		printf("##BLOBS##|%d|%.5f|%.5f|%.5f|%.5f|%.5f|\n", blob_id,
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb15 	bl	8000518 <__aeabi_f2d>
 8001eee:	4604      	mov	r4, r0
 8001ef0:	460d      	mov	r5, r1
 8001ef2:	6a38      	ldr	r0, [r7, #32]
 8001ef4:	f7fe fb10 	bl	8000518 <__aeabi_f2d>
 8001ef8:	4680      	mov	r8, r0
 8001efa:	4689      	mov	r9, r1
 8001efc:	69b8      	ldr	r0, [r7, #24]
 8001efe:	f7fe fb0b 	bl	8000518 <__aeabi_f2d>
 8001f02:	4682      	mov	sl, r0
 8001f04:	468b      	mov	fp, r1
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7fe fb06 	bl	8000518 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001f14:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001f18:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001f1c:	e9cd 4500 	strd	r4, r5, [sp]
 8001f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f24:	69f9      	ldr	r1, [r7, #28]
 8001f26:	480a      	ldr	r0, [pc, #40]	; (8001f50 <print_frame_info_simple+0x13c>)
 8001f28:	f012 fdcc 	bl	8014ac4 <iprintf>
	for (int i = 0; i < frame_info.num_blobs; i++) {
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	3301      	adds	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
 8001f32:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	db8f      	blt.n	8001e5c <print_frame_info_simple+0x48>
				velocity, direction);
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	372c      	adds	r7, #44	; 0x2c
 8001f42:	46bd      	mov	sp, r7
 8001f44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f48:	b004      	add	sp, #16
 8001f4a:	4770      	bx	lr
 8001f4c:	08016fa4 	.word	0x08016fa4
 8001f50:	08016fc0 	.word	0x08016fc0

08001f54 <subtract_matrices>:

// Function that does the following
// result = matrix1 - matrix2
void subtract_matrices(int result[N][N], const int matrix1[N][N],
		const int matrix2[N][N]) {
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < N; i++) {
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e021      	b.n	8001faa <subtract_matrices+0x56>
		for (int j = 0; j < N; j++) {
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e018      	b.n	8001f9e <subtract_matrices+0x4a>
			result[i][j] = matrix1[i][j] - matrix2[i][j];
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	4413      	add	r3, r2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	015b      	lsls	r3, r3, #5
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	015b      	lsls	r3, r3, #5
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	4403      	add	r3, r0
 8001f90:	1a89      	subs	r1, r1, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = 0; j < N; j++) {
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b07      	cmp	r3, #7
 8001fa2:	dde3      	ble.n	8001f6c <subtract_matrices+0x18>
	for (int i = 0; i < N; i++) {
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b07      	cmp	r3, #7
 8001fae:	ddda      	ble.n	8001f66 <subtract_matrices+0x12>
		}
	}
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8001fca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001fce:	4905      	ldr	r1, [pc, #20]	; (8001fe4 <LL_EXTI_EnableIT_32_63+0x24>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	58000800 	.word	0x58000800

08001fe8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800200c:	68fb      	ldr	r3, [r7, #12]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800202a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8002036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002044:	68fb      	ldr	r3, [r7, #12]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8002052:	b580      	push	{r7, lr}
 8002054:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002056:	f008 fcf7 	bl	800aa48 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800205a:	f008 fcfb 	bl	800aa54 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800205e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002062:	f7ff ffad 	bl	8001fc0 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8002066:	f00f ffa5 	bl	8011fb4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 800206a:	f000 f821 	bl	80020b0 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800206e:	f000 f8c1 	bl	80021f4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8002072:	bf00      	nop
}
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <APPD_EnableCPU2+0x34>)
 8002080:	1d3c      	adds	r4, r7, #4
 8002082:	461d      	mov	r5, r3
 8002084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002088:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800208c:	c403      	stmia	r4!, {r0, r1}
 800208e:	8022      	strh	r2, [r4, #0]
 8002090:	3402      	adds	r4, #2
 8002092:	0c13      	lsrs	r3, r2, #16
 8002094:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8002096:	f011 fce1 	bl	8013a5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4618      	mov	r0, r3
 800209e:	f010 fb32 	bl	8012706 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80020a2:	bf00      	nop
}
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdb0      	pop	{r4, r5, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	08016fe8 	.word	0x08016fe8

080020b0 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	77fb      	strb	r3, [r7, #31]
 80020d4:	e036      	b.n	8002144 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
 80020d8:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <APPD_SetCPU2GpioConfig+0x138>)
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	799b      	ldrb	r3, [r3, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02c      	beq.n	800213e <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80020e4:	7ffb      	ldrb	r3, [r7, #31]
 80020e6:	4a40      	ldr	r2, [pc, #256]	; (80021e8 <APPD_SetCPU2GpioConfig+0x138>)
 80020e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020ec:	4a3f      	ldr	r2, [pc, #252]	; (80021ec <APPD_SetCPU2GpioConfig+0x13c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01b      	beq.n	800212a <APPD_SetCPU2GpioConfig+0x7a>
 80020f2:	4a3e      	ldr	r2, [pc, #248]	; (80021ec <APPD_SetCPU2GpioConfig+0x13c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d821      	bhi.n	800213c <APPD_SetCPU2GpioConfig+0x8c>
 80020f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020fc:	d003      	beq.n	8002106 <APPD_SetCPU2GpioConfig+0x56>
 80020fe:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <APPD_SetCPU2GpioConfig+0x140>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d009      	beq.n	8002118 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8002104:	e01a      	b.n	800213c <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8002106:	7ffb      	ldrb	r3, [r7, #31]
 8002108:	4a37      	ldr	r2, [pc, #220]	; (80021e8 <APPD_SetCPU2GpioConfig+0x138>)
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	889a      	ldrh	r2, [r3, #4]
 8002110:	8bbb      	ldrh	r3, [r7, #28]
 8002112:	4313      	orrs	r3, r2
 8002114:	83bb      	strh	r3, [r7, #28]
          break;
 8002116:	e012      	b.n	800213e <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8002118:	7ffb      	ldrb	r3, [r7, #31]
 800211a:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <APPD_SetCPU2GpioConfig+0x138>)
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	889a      	ldrh	r2, [r3, #4]
 8002122:	8b7b      	ldrh	r3, [r7, #26]
 8002124:	4313      	orrs	r3, r2
 8002126:	837b      	strh	r3, [r7, #26]
          break;
 8002128:	e009      	b.n	800213e <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800212a:	7ffb      	ldrb	r3, [r7, #31]
 800212c:	4a2e      	ldr	r2, [pc, #184]	; (80021e8 <APPD_SetCPU2GpioConfig+0x138>)
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	889a      	ldrh	r2, [r3, #4]
 8002134:	8b3b      	ldrh	r3, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	833b      	strh	r3, [r7, #24]
          break;
 800213a:	e000      	b.n	800213e <APPD_SetCPU2GpioConfig+0x8e>
          break;
 800213c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	3301      	adds	r3, #1
 8002142:	77fb      	strb	r3, [r7, #31]
 8002144:	7ffb      	ldrb	r3, [r7, #31]
 8002146:	2b25      	cmp	r3, #37	; 0x25
 8002148:	d9c5      	bls.n	80020d6 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	2301      	movs	r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8002156:	8bbb      	ldrh	r3, [r7, #28]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d014      	beq.n	8002186 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 800215c:	8bbb      	ldrh	r3, [r7, #28]
 800215e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	2001      	movs	r0, #1
 8002162:	f7ff ff41 	bl	8001fe8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8002166:	2001      	movs	r0, #1
 8002168:	f7ff ff57 	bl	800201a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	4619      	mov	r1, r3
 8002170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002174:	f009 f9a2 	bl	800b4bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8002178:	8bbb      	ldrh	r3, [r7, #28]
 800217a:	2200      	movs	r2, #0
 800217c:	4619      	mov	r1, r3
 800217e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002182:	f009 fc01 	bl	800b988 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8002186:	8b7b      	ldrh	r3, [r7, #26]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 800218c:	8b7b      	ldrh	r3, [r7, #26]
 800218e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	2002      	movs	r0, #2
 8002192:	f7ff ff29 	bl	8001fe8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8002196:	2002      	movs	r0, #2
 8002198:	f7ff ff3f 	bl	800201a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <APPD_SetCPU2GpioConfig+0x140>)
 80021a2:	f009 f98b 	bl	800b4bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80021a6:	8b7b      	ldrh	r3, [r7, #26]
 80021a8:	2200      	movs	r2, #0
 80021aa:	4619      	mov	r1, r3
 80021ac:	4810      	ldr	r0, [pc, #64]	; (80021f0 <APPD_SetCPU2GpioConfig+0x140>)
 80021ae:	f009 fbeb 	bl	800b988 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80021b2:	8b3b      	ldrh	r3, [r7, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 80021b8:	8b3b      	ldrh	r3, [r7, #24]
 80021ba:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021bc:	2004      	movs	r0, #4
 80021be:	f7ff ff13 	bl	8001fe8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80021c2:	2004      	movs	r0, #4
 80021c4:	f7ff ff29 	bl	800201a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4807      	ldr	r0, [pc, #28]	; (80021ec <APPD_SetCPU2GpioConfig+0x13c>)
 80021ce:	f009 f975 	bl	800b4bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80021d2:	8b3b      	ldrh	r3, [r7, #24]
 80021d4:	2200      	movs	r2, #0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <APPD_SetCPU2GpioConfig+0x13c>)
 80021da:	f009 fbd5 	bl	800b988 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
}
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	08018780 	.word	0x08018780
 80021ec:	48000800 	.word	0x48000800
 80021f0:	48000400 	.word	0x48000400

080021f4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80021f8:	bf00      	nop
}
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8002206:	f002 f87f 	bl	8004308 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 800220a:	bf00      	nop
}
 800220c:	bd80      	pop	{r7, pc}

0800220e <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	460b      	mov	r3, r1
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800221c:	897a      	ldrh	r2, [r7, #10]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	2000      	movs	r0, #0
 8002224:	f001 fec0 	bl	8003fa8 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8002228:	bf00      	nop
}
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <LL_C2_PWR_SetPowerMode+0x28>)
 800223a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4905      	ldr	r1, [pc, #20]	; (8002258 <LL_C2_PWR_SetPowerMode+0x28>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	58000400 	.word	0x58000400

0800225c <LL_EXTI_EnableIT_32_63>:
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <LL_EXTI_EnableIT_32_63+0x24>)
 8002266:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800226a:	4905      	ldr	r1, [pc, #20]	; (8002280 <LL_EXTI_EnableIT_32_63+0x24>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	58000800 	.word	0x58000800

08002284 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002292:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800229e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	cafecafe 	.word	0xcafecafe

080022c0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80022c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80022d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800231a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002338:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800233c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002340:	d101      	bne.n	8002346 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002366:	d101      	bne.n	800236c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_AHB3_GRP1_EnableClock>:
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4313      	orrs	r3, r2
 800238e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800239c:	68fb      	ldr	r3, [r7, #12]
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <LL_DBGMCU_GetDeviceID+0x18>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e0042000 	.word	0xe0042000

080023c8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <LL_DBGMCU_GetRevisionID+0x18>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	b29b      	uxth	r3, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e0042000 	.word	0xe0042000

080023e4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	605a      	str	r2, [r3, #4]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	605a      	str	r2, [r3, #4]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	615a      	str	r2, [r3, #20]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	615a      	str	r2, [r3, #20]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	619a      	str	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <LL_LPM_EnableSleep+0x1c>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <LL_LPM_EnableSleep+0x1c>)
 80024b2:	f023 0304 	bic.w	r3, r3, #4
 80024b6:	6113      	str	r3, [r2, #16]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	22ca      	movs	r2, #202	; 0xca
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2253      	movs	r2, #83	; 0x53
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 0207 	bic.w	r2, r3, #7
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	609a      	str	r2, [r3, #8]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <MX_APPE_Config+0x18>)
 800252e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002532:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002534:	f000 f82e 	bl	8002594 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8002538:	f000 f86e 	bl	8002618 <Config_HSE>

  return;
 800253c:	bf00      	nop
}
 800253e:	bd80      	pop	{r7, pc}
 8002540:	58004000 	.word	0x58004000

08002544 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8002548:	f000 f87a 	bl	8002640 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800254c:	f000 f892 	bl	8002674 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002550:	4908      	ldr	r1, [pc, #32]	; (8002574 <MX_APPE_Init+0x30>)
 8002552:	2000      	movs	r0, #0
 8002554:	f001 fa82 	bl	8003a5c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8002558:	f7ff fd7b 	bl	8002052 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800255c:	2101      	movs	r1, #1
 800255e:	2001      	movs	r0, #1
 8002560:	f011 fb1a 	bl	8013b98 <UTIL_LPM_SetOffMode>

  Led_Init();
 8002564:	f000 f9e8 	bl	8002938 <Led_Init>

//  Button_Init();
  
  RxUART_Init();
 8002568:	f000 fa9e 	bl	8002aa8 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800256c:	f000 f890 	bl	8002690 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8002570:	bf00      	nop
}
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200011b8 	.word	0x200011b8

08002578 <Init_Smps>:

void Init_Smps(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800257c:	bf00      	nop
}
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <Init_Exti>:

void Init_Exti(void)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800258a:	2050      	movs	r0, #80	; 0x50
 800258c:	f7ff fe66 	bl	800225c <LL_EXTI_EnableIT_32_63>

  return;
 8002590:	bf00      	nop
}
 8002592:	bd80      	pop	{r7, pc}

08002594 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8002598:	f000 f804 	bl	80025a4 <Reset_BackupDomain>

  Reset_IPCC();
 800259c:	f000 f81a 	bl	80025d4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80025a0:	bf00      	nop
}
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80025a8:	f7ff fec0 	bl	800232c <LL_RCC_IsActiveFlag_PINRST>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <Reset_BackupDomain+0x2a>
 80025b2:	f7ff fece 	bl	8002352 <LL_RCC_IsActiveFlag_SFTRST>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d108      	bne.n	80025ce <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80025bc:	f00a f942 	bl	800c844 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80025c0:	f00a f940 	bl	800c844 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80025c4:	f7ff fe90 	bl	80022e8 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80025c8:	f7ff fe9f 	bl	800230a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
}
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80025d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80025dc:	f7ff fecc 	bl	8002378 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80025e0:	213f      	movs	r1, #63	; 0x3f
 80025e2:	480c      	ldr	r0, [pc, #48]	; (8002614 <Reset_IPCC+0x40>)
 80025e4:	f7ff ff44 	bl	8002470 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80025e8:	213f      	movs	r1, #63	; 0x3f
 80025ea:	480a      	ldr	r0, [pc, #40]	; (8002614 <Reset_IPCC+0x40>)
 80025ec:	f7ff ff4e 	bl	800248c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80025f0:	213f      	movs	r1, #63	; 0x3f
 80025f2:	4808      	ldr	r0, [pc, #32]	; (8002614 <Reset_IPCC+0x40>)
 80025f4:	f7ff fef6 	bl	80023e4 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80025f8:	213f      	movs	r1, #63	; 0x3f
 80025fa:	4806      	ldr	r0, [pc, #24]	; (8002614 <Reset_IPCC+0x40>)
 80025fc:	f7ff ff15 	bl	800242a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002600:	213f      	movs	r1, #63	; 0x3f
 8002602:	4804      	ldr	r0, [pc, #16]	; (8002614 <Reset_IPCC+0x40>)
 8002604:	f7ff ff00 	bl	8002408 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8002608:	213f      	movs	r1, #63	; 0x3f
 800260a:	4802      	ldr	r0, [pc, #8]	; (8002614 <Reset_IPCC+0x40>)
 800260c:	f7ff ff1f 	bl	800244e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8002610:	bf00      	nop
}
 8002612:	bd80      	pop	{r7, pc}
 8002614:	58000c00 	.word	0x58000c00

08002618 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800261e:	2000      	movs	r0, #0
 8002620:	f00f ff02 	bl	8012428 <OTP_Read>
 8002624:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	799b      	ldrb	r3, [r3, #6]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fe27 	bl	8002284 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8002636:	bf00      	nop
 8002638:	bf00      	nop
}
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <System_Init>:

static void System_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  Init_Smps();
 8002644:	f7ff ff98 	bl	8002578 <Init_Smps>

  Init_Exti();
 8002648:	f7ff ff9d 	bl	8002586 <Init_Exti>

  Init_Rtc();
 800264c:	f000 f802 	bl	8002654 <Init_Rtc>

  return;
 8002650:	bf00      	nop
}
 8002652:	bd80      	pop	{r7, pc}

08002654 <Init_Rtc>:

static void Init_Rtc(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002658:	4805      	ldr	r0, [pc, #20]	; (8002670 <Init_Rtc+0x1c>)
 800265a:	f7ff ff42 	bl	80024e2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800265e:	2100      	movs	r1, #0
 8002660:	4803      	ldr	r0, [pc, #12]	; (8002670 <Init_Rtc+0x1c>)
 8002662:	f7ff ff4e 	bl	8002502 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002666:	4802      	ldr	r0, [pc, #8]	; (8002670 <Init_Rtc+0x1c>)
 8002668:	f7ff ff2e 	bl	80024c8 <LL_RTC_EnableWriteProtection>

  return;
 800266c:	bf00      	nop
}
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40002800 	.word	0x40002800

08002674 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002678:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800267c:	f7ff fe20 	bl	80022c0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002680:	f011 fa78 	bl	8013b74 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002684:	2004      	movs	r0, #4
 8002686:	f7ff fdd3 	bl	8002230 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800268a:	bf00      	nop
}
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002696:	f011 f82b 	bl	80136f0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800269a:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <appe_Tl_Init+0x50>)
 800269c:	2100      	movs	r1, #0
 800269e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80026a2:	f011 fba5 	bl	8013df0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <appe_Tl_Init+0x54>)
 80026a8:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <appe_Tl_Init+0x58>)
 80026ac:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80026ae:	463b      	mov	r3, r7
 80026b0:	4619      	mov	r1, r3
 80026b2:	480e      	ldr	r0, [pc, #56]	; (80026ec <appe_Tl_Init+0x5c>)
 80026b4:	f010 f902 	bl	80128bc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <appe_Tl_Init+0x60>)
 80026ba:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <appe_Tl_Init+0x64>)
 80026be:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <appe_Tl_Init+0x68>)
 80026c2:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80026c4:	f240 533c 	movw	r3, #1340	; 0x53c
 80026c8:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80026ca:	f107 0308 	add.w	r3, r7, #8
 80026ce:	4618      	mov	r0, r3
 80026d0:	f011 f950 	bl	8013974 <TL_MM_Init>

  TL_Enable();
 80026d4:	f011 f806 	bl	80136e4 <TL_Enable>

  return;
 80026d8:	bf00      	nop
}
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	080128f5 	.word	0x080128f5
 80026e4:	20030734 	.word	0x20030734
 80026e8:	080026fd 	.word	0x080026fd
 80026ec:	08002715 	.word	0x08002715
 80026f0:	2003094c 	.word	0x2003094c
 80026f4:	20030840 	.word	0x20030840
 80026f8:	200301f8 	.word	0x200301f8

080026fc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002706:	bf00      	nop
}
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	330b      	adds	r3, #11
 8002722:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800272e:	2b07      	cmp	r3, #7
 8002730:	d860      	bhi.n	80027f4 <APPE_SysUserEvtRx+0xe0>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <APPE_SysUserEvtRx+0x24>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	08002759 	.word	0x08002759
 800273c:	0800279b 	.word	0x0800279b
 8002740:	080027a9 	.word	0x080027a9
 8002744:	080027f5 	.word	0x080027f5
 8002748:	080027c5 	.word	0x080027c5
 800274c:	080027d5 	.word	0x080027d5
 8002750:	080027dd 	.word	0x080027dd
 8002754:	080027ed 	.word	0x080027ed
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	4618      	mov	r0, r3
 800275e:	f00f ffff 	bl	8012760 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8002762:	7b3b      	ldrb	r3, [r7, #12]
 8002764:	4619      	mov	r1, r3
 8002766:	7b7b      	ldrb	r3, [r7, #13]
 8002768:	461a      	mov	r2, r3
 800276a:	7bbb      	ldrb	r3, [r7, #14]
 800276c:	4824      	ldr	r0, [pc, #144]	; (8002800 <APPE_SysUserEvtRx+0xec>)
 800276e:	f012 f9a9 	bl	8014ac4 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8002772:	7c3b      	ldrb	r3, [r7, #16]
 8002774:	4619      	mov	r1, r3
 8002776:	4823      	ldr	r0, [pc, #140]	; (8002804 <APPE_SysUserEvtRx+0xf0>)
 8002778:	f012 f9a4 	bl	8014ac4 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800277c:	7dbb      	ldrb	r3, [r7, #22]
 800277e:	4619      	mov	r1, r3
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	461a      	mov	r2, r3
 8002784:	7e3b      	ldrb	r3, [r7, #24]
 8002786:	4820      	ldr	r0, [pc, #128]	; (8002808 <APPE_SysUserEvtRx+0xf4>)
 8002788:	f012 f99c 	bl	8014ac4 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800278c:	481f      	ldr	r0, [pc, #124]	; (800280c <APPE_SysUserEvtRx+0xf8>)
 800278e:	f012 f999 	bl	8014ac4 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f870 	bl	8002878 <APPE_SysEvtReadyProcessing>
    break;
 8002798:	e02d      	b.n	80027f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800279a:	481d      	ldr	r0, [pc, #116]	; (8002810 <APPE_SysUserEvtRx+0xfc>)
 800279c:	f012 f992 	bl	8014ac4 <iprintf>
    APPE_SysEvtError(pPayload);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f843 	bl	800282c <APPE_SysEvtError>
    break;
 80027a6:	e026      	b.n	80027f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80027a8:	481a      	ldr	r0, [pc, #104]	; (8002814 <APPE_SysUserEvtRx+0x100>)
 80027aa:	f012 f9f9 	bl	8014ba0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80027b2:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4816      	ldr	r0, [pc, #88]	; (8002818 <APPE_SysUserEvtRx+0x104>)
 80027be:	f012 f981 	bl	8014ac4 <iprintf>
    break;
 80027c2:	e018      	b.n	80027f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4813      	ldr	r0, [pc, #76]	; (800281c <APPE_SysUserEvtRx+0x108>)
 80027ce:	f012 f979 	bl	8014ac4 <iprintf>
    break;
 80027d2:	e010      	b.n	80027f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80027d4:	4812      	ldr	r0, [pc, #72]	; (8002820 <APPE_SysUserEvtRx+0x10c>)
 80027d6:	f012 f975 	bl	8014ac4 <iprintf>
    break;
 80027da:	e00c      	b.n	80027f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4619      	mov	r1, r3
 80027e4:	480f      	ldr	r0, [pc, #60]	; (8002824 <APPE_SysUserEvtRx+0x110>)
 80027e6:	f012 f96d 	bl	8014ac4 <iprintf>
    break;
 80027ea:	e004      	b.n	80027f6 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80027ec:	480e      	ldr	r0, [pc, #56]	; (8002828 <APPE_SysUserEvtRx+0x114>)
 80027ee:	f012 f969 	bl	8014ac4 <iprintf>
    break;
 80027f2:	e000      	b.n	80027f6 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80027f4:	bf00      	nop
  }

  return;
 80027f6:	bf00      	nop
}
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	08017004 	.word	0x08017004
 8002804:	08017028 	.word	0x08017028
 8002808:	08017044 	.word	0x08017044
 800280c:	0801705c 	.word	0x0801705c
 8002810:	0801707c 	.word	0x0801707c
 8002814:	080170a0 	.word	0x080170a0
 8002818:	080170f0 	.word	0x080170f0
 800281c:	08017118 	.word	0x08017118
 8002820:	08017154 	.word	0x08017154
 8002824:	08017178 	.word	0x08017178
 8002828:	080171b4 	.word	0x080171b4

0800282c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	330b      	adds	r3, #11
 800283a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3302      	adds	r3, #2
 8002840:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	4808      	ldr	r0, [pc, #32]	; (800286c <APPE_SysEvtError+0x40>)
 800284a:	f012 f93b 	bl	8014ac4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8002856:	4806      	ldr	r0, [pc, #24]	; (8002870 <APPE_SysEvtError+0x44>)
 8002858:	f012 f9a2 	bl	8014ba0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800285c:	e003      	b.n	8002866 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <APPE_SysEvtError+0x48>)
 8002860:	f012 f99e 	bl	8014ba0 <puts>
  return;
 8002864:	bf00      	nop
}
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	080171d8 	.word	0x080171d8
 8002870:	08017208 	.word	0x08017208
 8002874:	08017244 	.word	0x08017244

08002878 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8002892:	2300      	movs	r3, #0
 8002894:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	330b      	adds	r3, #11
 800289c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3302      	adds	r3, #2
 80028a2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d128      	bne.n	80028fe <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80028ac:	481d      	ldr	r0, [pc, #116]	; (8002924 <APPE_SysEvtReadyProcessing+0xac>)
 80028ae:	f012 f977 	bl	8014ba0 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80028b2:	f7ff fbe1 	bl	8002078 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80028b6:	230f      	movs	r3, #15
 80028b8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80028ba:	237f      	movs	r3, #127	; 0x7f
 80028bc:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80028be:	f7ff fd83 	bl	80023c8 <LL_DBGMCU_GetRevisionID>
 80028c2:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80028c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c6:	4818      	ldr	r0, [pc, #96]	; (8002928 <APPE_SysEvtReadyProcessing+0xb0>)
 80028c8:	f012 f8fc 	bl	8014ac4 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80028d2:	f7ff fd6b 	bl	80023ac <LL_DBGMCU_GetDeviceID>
 80028d6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80028d8:	6a39      	ldr	r1, [r7, #32]
 80028da:	4814      	ldr	r0, [pc, #80]	; (800292c <APPE_SysEvtReadyProcessing+0xb4>)
 80028dc:	f012 f8f2 	bl	8014ac4 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00f ff22 	bl	8012734 <SHCI_C2_Config>

    APP_BLE_Init();
 80028f0:	f002 fb78 	bl	8004fe4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80028f4:	2100      	movs	r1, #0
 80028f6:	2001      	movs	r0, #1
 80028f8:	f011 f94e 	bl	8013b98 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80028fc:	e00e      	b.n	800291c <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d106      	bne.n	8002914 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8002906:	480a      	ldr	r0, [pc, #40]	; (8002930 <APPE_SysEvtReadyProcessing+0xb8>)
 8002908:	f012 f8dc 	bl	8014ac4 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
  return;
 8002912:	e003      	b.n	800291c <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8002914:	4807      	ldr	r0, [pc, #28]	; (8002934 <APPE_SysEvtReadyProcessing+0xbc>)
 8002916:	f012 f8d5 	bl	8014ac4 <iprintf>
  return;
 800291a:	bf00      	nop
}
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	0801727c 	.word	0x0801727c
 8002928:	08017298 	.word	0x08017298
 800292c:	080172bc 	.word	0x080172bc
 8002930:	080172dc 	.word	0x080172dc
 8002934:	08017310 	.word	0x08017310

08002938 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800293c:	2000      	movs	r0, #0
 800293e:	f004 f9c1 	bl	8006cc4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8002942:	2001      	movs	r0, #1
 8002944:	f004 f9be 	bl	8006cc4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8002948:	2002      	movs	r0, #2
 800294a:	f004 f9bb 	bl	8006cc4 <BSP_LED_Init>

  BSP_LED_On(LED_BLUE);
 800294e:	2000      	movs	r0, #0
 8002950:	f004 f9f4 	bl	8006d3c <BSP_LED_On>
  BSP_LED_On(LED_GREEN);
 8002954:	2001      	movs	r0, #1
 8002956:	f004 f9f1 	bl	8006d3c <BSP_LED_On>
#endif

  return;
 800295a:	bf00      	nop
}
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002966:	f008 f84b 	bl	800aa00 <HAL_GetTick>
 800296a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002976:	d00a      	beq.n	800298e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002978:	f008 f85a 	bl	800aa30 <HAL_GetTickFreq>
 800297c:	4603      	mov	r3, r0
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002986:	e002      	b.n	800298e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002988:	f7ff fd8e 	bl	80024a8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800298c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800298e:	f008 f837 	bl	800aa00 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	429a      	cmp	r2, r3
 800299c:	d8f4      	bhi.n	8002988 <HAL_Delay+0x2a>
  }
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f011 f922 	bl	8013bf8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80029bc:	bf00      	nop
}
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f011 f910 	bl	8013bf8 <UTIL_SEQ_Run>

  return;
 80029d8:	bf00      	nop
}
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80029e8:	2100      	movs	r1, #0
 80029ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029ee:	f011 fa21 	bl	8013e34 <UTIL_SEQ_SetTask>
  return;
 80029f2:	bf00      	nop
}
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002a02:	2002      	movs	r0, #2
 8002a04:	f011 fa82 	bl	8013f0c <UTIL_SEQ_SetEvt>
  return;
 8002a08:	bf00      	nop
}
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002a18:	2002      	movs	r0, #2
 8002a1a:	f011 fa97 	bl	8013f4c <UTIL_SEQ_WaitEvt>
  return;
 8002a1e:	bf00      	nop
}
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	d830      	bhi.n	8002a9c <HAL_GPIO_EXTI_Callback+0x74>
 8002a3a:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <HAL_GPIO_EXTI_Callback+0x18>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002a87 	.word	0x08002a87
 8002a44:	08002a8d 	.word	0x08002a8d
 8002a48:	08002a9d 	.word	0x08002a9d
 8002a4c:	08002a93 	.word	0x08002a93
 8002a50:	08002a9d 	.word	0x08002a9d
 8002a54:	08002a9d 	.word	0x08002a9d
 8002a58:	08002a9d 	.word	0x08002a9d
 8002a5c:	08002a9d 	.word	0x08002a9d
 8002a60:	08002a9d 	.word	0x08002a9d
 8002a64:	08002a9d 	.word	0x08002a9d
 8002a68:	08002a9d 	.word	0x08002a9d
 8002a6c:	08002a9d 	.word	0x08002a9d
 8002a70:	08002a9d 	.word	0x08002a9d
 8002a74:	08002a9d 	.word	0x08002a9d
 8002a78:	08002a9d 	.word	0x08002a9d
 8002a7c:	08002a81 	.word	0x08002a81
  {
    case BUTTON_SW1_PIN:
      APP_BLE_Key_Button1_Action();
 8002a80:	f002 fdb8 	bl	80055f4 <APP_BLE_Key_Button1_Action>
      break; 
 8002a84:	e00b      	b.n	8002a9e <HAL_GPIO_EXTI_Callback+0x76>

    case BUTTON_SW2_PIN:
      APP_BLE_Key_Button2_Action();
 8002a86:	f002 fdbd 	bl	8005604 <APP_BLE_Key_Button2_Action>
      break; 
 8002a8a:	e008      	b.n	8002a9e <HAL_GPIO_EXTI_Callback+0x76>

    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
 8002a8c:	f002 fdc2 	bl	8005614 <APP_BLE_Key_Button3_Action>
      break;
 8002a90:	e005      	b.n	8002a9e <HAL_GPIO_EXTI_Callback+0x76>

    case COLOR_INT_PIN: //PC2
	  UTIL_SEQ_SetTask( 1<<CFG_TASK_COLOR_REQ_ID, CFG_SCH_PRIO_0);
 8002a92:	2100      	movs	r1, #0
 8002a94:	2040      	movs	r0, #64	; 0x40
 8002a96:	f011 f9cd 	bl	8013e34 <UTIL_SEQ_SetTask>
	  break;
 8002a9a:	e000      	b.n	8002a9e <HAL_GPIO_EXTI_Callback+0x76>

    default:
      break;
 8002a9c:	bf00      	nop

  }
  return;
 8002a9e:	bf00      	nop
}
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop

08002aa8 <RxUART_Init>:

static void RxUART_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <RxUART_Init+0x14>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <RxUART_Init+0x18>)
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f001 fa3e 	bl	8003f34 <HW_UART_Receive_IT>
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	08002ac5 	.word	0x08002ac5
 8002ac0:	200003b0 	.word	0x200003b0

08002ac4 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8002ac8:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <RxCpltCallback+0x5c>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	2bff      	cmp	r3, #255	; 0xff
 8002ace:	d81e      	bhi.n	8002b0e <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <RxCpltCallback+0x60>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b0d      	cmp	r3, #13
 8002ad6:	d10f      	bne.n	8002af8 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8002ad8:	4913      	ldr	r1, [pc, #76]	; (8002b28 <RxCpltCallback+0x64>)
 8002ada:	4814      	ldr	r0, [pc, #80]	; (8002b2c <RxCpltCallback+0x68>)
 8002adc:	f011 fff2 	bl	8014ac4 <iprintf>

      UartCmdExecute();
 8002ae0:	f000 f828 	bl	8002b34 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <RxCpltCallback+0x5c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8002aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aee:	2100      	movs	r1, #0
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <RxCpltCallback+0x64>)
 8002af2:	f012 f935 	bl	8014d60 <memset>
 8002af6:	e00a      	b.n	8002b0e <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <RxCpltCallback+0x5c>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	b291      	uxth	r1, r2
 8002b00:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <RxCpltCallback+0x5c>)
 8002b02:	8011      	strh	r1, [r2, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <RxCpltCallback+0x60>)
 8002b08:	7819      	ldrb	r1, [r3, #0]
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <RxCpltCallback+0x64>)
 8002b0c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <RxCpltCallback+0x6c>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	4904      	ldr	r1, [pc, #16]	; (8002b24 <RxCpltCallback+0x60>)
 8002b14:	2000      	movs	r0, #0
 8002b16:	f001 fa0d 	bl	8003f34 <HW_UART_Receive_IT>
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200004b8 	.word	0x200004b8
 8002b24:	200003b0 	.word	0x200003b0
 8002b28:	200003b8 	.word	0x200003b8
 8002b2c:	08017344 	.word	0x08017344
 8002b30:	08002ac5 	.word	0x08002ac5

08002b34 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8002b38:	491c      	ldr	r1, [pc, #112]	; (8002bac <UartCmdExecute+0x78>)
 8002b3a:	481d      	ldr	r0, [pc, #116]	; (8002bb0 <UartCmdExecute+0x7c>)
 8002b3c:	f7fd fb20 	bl	8000180 <strcmp>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 8002b46:	481b      	ldr	r0, [pc, #108]	; (8002bb4 <UartCmdExecute+0x80>)
 8002b48:	f012 f82a 	bl	8014ba0 <puts>
    exti_handle.Line = EXTI_LINE_4;
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <UartCmdExecute+0x84>)
 8002b4e:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <UartCmdExecute+0x88>)
 8002b50:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8002b52:	4819      	ldr	r0, [pc, #100]	; (8002bb8 <UartCmdExecute+0x84>)
 8002b54:	f008 fc90 	bl	800b478 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8002b58:	e026      	b.n	8002ba8 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8002b5a:	4919      	ldr	r1, [pc, #100]	; (8002bc0 <UartCmdExecute+0x8c>)
 8002b5c:	4814      	ldr	r0, [pc, #80]	; (8002bb0 <UartCmdExecute+0x7c>)
 8002b5e:	f7fd fb0f 	bl	8000180 <strcmp>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 8002b68:	4816      	ldr	r0, [pc, #88]	; (8002bc4 <UartCmdExecute+0x90>)
 8002b6a:	f012 f819 	bl	8014ba0 <puts>
    exti_handle.Line = EXTI_LINE_0;
 8002b6e:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <UartCmdExecute+0x84>)
 8002b70:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8002b74:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8002b76:	4810      	ldr	r0, [pc, #64]	; (8002bb8 <UartCmdExecute+0x84>)
 8002b78:	f008 fc7e 	bl	800b478 <HAL_EXTI_GenerateSWI>
}
 8002b7c:	e014      	b.n	8002ba8 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8002b7e:	4912      	ldr	r1, [pc, #72]	; (8002bc8 <UartCmdExecute+0x94>)
 8002b80:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <UartCmdExecute+0x7c>)
 8002b82:	f7fd fafd 	bl	8000180 <strcmp>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8002b8c:	480f      	ldr	r0, [pc, #60]	; (8002bcc <UartCmdExecute+0x98>)
 8002b8e:	f012 f807 	bl	8014ba0 <puts>
    exti_handle.Line = EXTI_LINE_1;
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <UartCmdExecute+0x84>)
 8002b94:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <UartCmdExecute+0x9c>)
 8002b96:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8002b98:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <UartCmdExecute+0x84>)
 8002b9a:	f008 fc6d 	bl	800b478 <HAL_EXTI_GenerateSWI>
}
 8002b9e:	e003      	b.n	8002ba8 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <UartCmdExecute+0x7c>)
 8002ba2:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <UartCmdExecute+0xa0>)
 8002ba4:	f011 ff8e 	bl	8014ac4 <iprintf>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	08017354 	.word	0x08017354
 8002bb0:	200003b8 	.word	0x200003b8
 8002bb4:	08017358 	.word	0x08017358
 8002bb8:	200003a8 	.word	0x200003a8
 8002bbc:	16000004 	.word	0x16000004
 8002bc0:	08017360 	.word	0x08017360
 8002bc4:	08017364 	.word	0x08017364
 8002bc8:	0801736c 	.word	0x0801736c
 8002bcc:	08017370 	.word	0x08017370
 8002bd0:	16000001 	.word	0x16000001
 8002bd4:	08017378 	.word	0x08017378

08002bd8 <MX_TOF_Init>:
static void MX_VL53L8CX_SimpleRanging_Process(void);
static void toggle_resolution(void);
static void toggle_signal_and_ambient(void);

void MX_TOF_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */
  APP_DBG_MSG("CUSTOM_RANGING_SENSOR_Init");
  MX_VL53L8CX_SimpleRanging_Init();
 8002bde:	f000 f835 	bl	8002c4c <MX_VL53L8CX_SimpleRanging_Init>

  uint32_t Id;
  CUSTOM_RANGING_SENSOR_ReadID(CUSTOM_VL53L8CX, &Id);
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	2000      	movs	r0, #0
 8002be8:	f000 f992 	bl	8002f10 <CUSTOM_RANGING_SENSOR_ReadID>
  CUSTOM_RANGING_SENSOR_GetCapabilities(CUSTOM_VL53L8CX, &Cap);
 8002bec:	490d      	ldr	r1, [pc, #52]	; (8002c24 <MX_TOF_Init+0x4c>)
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f000 f9b8 	bl	8002f64 <CUSTOM_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <MX_TOF_Init+0x50>)
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 5 ms < TimingBudget < 100 ms */
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <MX_TOF_Init+0x50>)
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <MX_TOF_Init+0x50>)
 8002c02:	221e      	movs	r2, #30
 8002c04:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <MX_TOF_Init+0x50>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <MX_TOF_Init+0x50>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L8CX, &Profile);
 8002c12:	4905      	ldr	r1, [pc, #20]	; (8002c28 <MX_TOF_Init+0x50>)
 8002c14:	2000      	movs	r0, #0
 8002c16:	f000 f9cf 	bl	8002fb8 <CUSTOM_RANGING_SENSOR_ConfigProfile>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200004bc 	.word	0x200004bc
 8002c28:	200004cc 	.word	0x200004cc

08002c2c <MX_TOF_Begin>:

void MX_TOF_Begin(void){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L8CX, RS_MODE_BLOCKING_CONTINUOUS);
 8002c30:	2101      	movs	r1, #1
 8002c32:	2000      	movs	r0, #0
 8002c34:	f000 fa14 	bl	8003060 <CUSTOM_RANGING_SENSOR_Start>
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <MX_TOF_Stop>:
void MX_TOF_Stop(void){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L8CX);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f000 fa39 	bl	80030b8 <CUSTOM_RANGING_SENSOR_Stop>
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <MX_VL53L8CX_SimpleRanging_Init>:
//
//  /* USER CODE END TOF_Process_PostTreatment */
//}

static void MX_VL53L8CX_SimpleRanging_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */

  status = CUSTOM_RANGING_SENSOR_Init(CUSTOM_VL53L8CX);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f000 f937 	bl	8002ec4 <CUSTOM_RANGING_SENSOR_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <MX_VL53L8CX_SimpleRanging_Init+0x20>)
 8002c5a:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <MX_VL53L8CX_SimpleRanging_Init+0x20>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d000      	beq.n	8002c66 <MX_VL53L8CX_SimpleRanging_Init+0x1a>
  {
	  APP_DBG_MSG("CUSTOM_RANGING_SENSOR_Init_Failed!, halting...");
    while(1);
 8002c64:	e7fe      	b.n	8002c64 <MX_VL53L8CX_SimpleRanging_Init+0x18>
  }
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200004e0 	.word	0x200004e0

08002c70 <parse_TOF_result>:
{
	toggle_resolution();
}

// Function to parse RANGING_SENSOR_Result_t to [8][8] matrix
void parse_TOF_result(RANGING_SENSOR_Result_t* result, int  matrix[8][8]) {
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
    //assign values from result
    uint8_t j, k;
    for (j = 0; j < 8; j ++) {//row
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e01e      	b.n	8002cbe <parse_TOF_result+0x4e>
        for (k = 0; k < 8; k++) {//column
 8002c80:	2300      	movs	r3, #0
 8002c82:	73bb      	strb	r3, [r7, #14]
 8002c84:	e015      	b.n	8002cb2 <parse_TOF_result+0x42>
            matrix[j][k] = (int)*result->ZoneResult[j*8+k].Distance; //matrix[1][0]=result[8=1*8+0], matrix[1][7]=result[15=1*8+7]
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	00da      	lsls	r2, r3, #3
 8002c8a:	7bbb      	ldrb	r3, [r7, #14]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	015b      	lsls	r3, r3, #5
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	7bba      	ldrb	r2, [r7, #14]
 8002ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (k = 0; k < 8; k++) {//column
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	73bb      	strb	r3, [r7, #14]
 8002cb2:	7bbb      	ldrb	r3, [r7, #14]
 8002cb4:	2b07      	cmp	r3, #7
 8002cb6:	d9e6      	bls.n	8002c86 <parse_TOF_result+0x16>
    for (j = 0; j < 8; j ++) {//row
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b07      	cmp	r3, #7
 8002cc2:	d9dd      	bls.n	8002c80 <parse_TOF_result+0x10>
        }
    }
    return;
 8002cc4:	bf00      	nop
}
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <print_result>:

uint16_t TofData[64];

uint16_t * print_result(RANGING_SENSOR_Result_t *Result)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
#if(1)
	//display_commands_banner();
  int8_t i, j, k, l;
  uint8_t zones_per_line;

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8002cd8:	4b71      	ldr	r3, [pc, #452]	; (8002ea0 <print_result+0x1d0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d003      	beq.n	8002ce8 <print_result+0x18>
         (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 8002ce0:	4b6f      	ldr	r3, [pc, #444]	; (8002ea0 <print_result+0x1d0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d101      	bne.n	8002cec <print_result+0x1c>
 8002ce8:	2308      	movs	r3, #8
 8002cea:	e000      	b.n	8002cee <print_result+0x1e>
 8002cec:	2304      	movs	r3, #4
 8002cee:	72fb      	strb	r3, [r7, #11]
  printf("\n\r");
 8002cf0:	486c      	ldr	r0, [pc, #432]	; (8002ea4 <print_result+0x1d4>)
 8002cf2:	f011 fee7 	bl	8014ac4 <iprintf>
	for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73bb      	strb	r3, [r7, #14]
 8002cfa:	e0b0      	b.n	8002e5e <print_result+0x18e>
	{
		for (i = 0; i < zones_per_line; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e008      	b.n	8002d14 <print_result+0x44>
		{
			printf(" ---------");
 8002d02:	4869      	ldr	r0, [pc, #420]	; (8002ea8 <print_result+0x1d8>)
 8002d04:	f011 fede 	bl	8014ac4 <iprintf>
		for (i = 0; i < zones_per_line; i++)
 8002d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	73fb      	strb	r3, [r7, #15]
 8002d14:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002d18:	7afb      	ldrb	r3, [r7, #11]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	dbf1      	blt.n	8002d02 <print_result+0x32>
		}
		printf("\n\r");
 8002d1e:	4861      	ldr	r0, [pc, #388]	; (8002ea4 <print_result+0x1d4>)
 8002d20:	f011 fed0 	bl	8014ac4 <iprintf>
		for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	733b      	strb	r3, [r7, #12]
 8002d28:	e08f      	b.n	8002e4a <print_result+0x17a>
		{
			for (k = (zones_per_line - 1); k >= 0; k--)
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	737b      	strb	r3, [r7, #13]
 8002d32:	e07c      	b.n	8002e2e <print_result+0x15e>
			{
				if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 8002d34:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002d38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002d3c:	441a      	add	r2, r3
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d045      	beq.n	8002dde <print_result+0x10e>
				{
					if ((long)Result->ZoneResult[j+k].Distance[l] < 500)
 8002d52:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002d56:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002d5a:	441a      	add	r2, r3
 8002d5c:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	4403      	add	r3, r0
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d74:	da19      	bge.n	8002daa <print_result+0xda>
					{
						printf("|\033[38;5;9m%4ld\033[0m:%3ld ",
						(long)Result->ZoneResult[j+k].Distance[l],
 8002d76:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002d7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002d7e:	441a      	add	r2, r3
 8002d80:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4403      	add	r3, r0
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	689b      	ldr	r3, [r3, #8]
						printf("|\033[38;5;9m%4ld\033[0m:%3ld ",
 8002d94:	4619      	mov	r1, r3
						(long)j+k);
 8002d96:	f997 200e 	ldrsb.w	r2, [r7, #14]
						printf("|\033[38;5;9m%4ld\033[0m:%3ld ",
 8002d9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002d9e:	4413      	add	r3, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4842      	ldr	r0, [pc, #264]	; (8002eac <print_result+0x1dc>)
 8002da4:	f011 fe8e 	bl	8014ac4 <iprintf>
 8002da8:	e023      	b.n	8002df2 <print_result+0x122>
					} else
					{
						printf("|\033[38;5;10m%4ld\033[0m:%3ld ",
						(long)Result->ZoneResult[j+k].Distance[l],
 8002daa:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002dae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002db2:	441a      	add	r2, r3
 8002db4:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4403      	add	r3, r0
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	689b      	ldr	r3, [r3, #8]
						printf("|\033[38;5;10m%4ld\033[0m:%3ld ",
 8002dc8:	4619      	mov	r1, r3
						(long)j+k);
 8002dca:	f997 200e 	ldrsb.w	r2, [r7, #14]
						printf("|\033[38;5;10m%4ld\033[0m:%3ld ",
 8002dce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4836      	ldr	r0, [pc, #216]	; (8002eb0 <print_result+0x1e0>)
 8002dd8:	f011 fe74 	bl	8014ac4 <iprintf>
 8002ddc:	e009      	b.n	8002df2 <print_result+0x122>
					}
				}
				else
				{
					printf("|%5s:%d", "X",j+k);
 8002dde:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002de2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002de6:	4413      	add	r3, r2
 8002de8:	461a      	mov	r2, r3
 8002dea:	4932      	ldr	r1, [pc, #200]	; (8002eb4 <print_result+0x1e4>)
 8002dec:	4832      	ldr	r0, [pc, #200]	; (8002eb8 <print_result+0x1e8>)
 8002dee:	f011 fe69 	bl	8014ac4 <iprintf>
				}

				TofData[j+k] = Result->ZoneResult[j+k].Distance[l];
 8002df2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002df6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002dfa:	441a      	add	r2, r3
 8002dfc:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	4403      	add	r3, r0
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002e14:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002e18:	4413      	add	r3, r2
 8002e1a:	b289      	uxth	r1, r1
 8002e1c:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <print_result+0x1ec>)
 8002e1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (k = (zones_per_line - 1); k >= 0; k--)
 8002e22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	737b      	strb	r3, [r7, #13]
 8002e2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f6bf af7e 	bge.w	8002d34 <print_result+0x64>
			}
			printf("|\n\r");
 8002e38:	4821      	ldr	r0, [pc, #132]	; (8002ec0 <print_result+0x1f0>)
 8002e3a:	f011 fe43 	bl	8014ac4 <iprintf>
		for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8002e3e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	733b      	strb	r3, [r7, #12]
 8002e4a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f43f af6b 	beq.w	8002d2a <print_result+0x5a>
	for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8002e54:	7bba      	ldrb	r2, [r7, #14]
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	4413      	add	r3, r2
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	73bb      	strb	r3, [r7, #14]
 8002e5e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	f4ff af48 	bcc.w	8002cfc <print_result+0x2c>
		}
	}

	for (i = 0; i < zones_per_line; i++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	e008      	b.n	8002e84 <print_result+0x1b4>
	{
		printf(" ---------");
 8002e72:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <print_result+0x1d8>)
 8002e74:	f011 fe26 	bl	8014ac4 <iprintf>
	for (i = 0; i < zones_per_line; i++)
 8002e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002e88:	7afb      	ldrb	r3, [r7, #11]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	dbf1      	blt.n	8002e72 <print_result+0x1a2>
	}
	printf("\n\r");
 8002e8e:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <print_result+0x1d4>)
 8002e90:	f011 fe18 	bl	8014ac4 <iprintf>

  for (i = 0; i < zones_per_line; i++)
	  printf(" ---------");
  printf("\n\r");  */

  return TofData;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <print_result+0x1ec>)
    }
  }


#endif
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200004cc 	.word	0x200004cc
 8002ea4:	08017398 	.word	0x08017398
 8002ea8:	0801739c 	.word	0x0801739c
 8002eac:	080173a8 	.word	0x080173a8
 8002eb0:	080173c4 	.word	0x080173c4
 8002eb4:	080173e0 	.word	0x080173e0
 8002eb8:	080173e4 	.word	0x080173e4
 8002ebc:	200004e4 	.word	0x200004e4
 8002ec0:	080173ec 	.word	0x080173ec

08002ec4 <CUSTOM_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Init(uint32_t Instance)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <CUSTOM_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ed2:	f06f 0301 	mvn.w	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e015      	b.n	8002f06 <CUSTOM_RANGING_SENSOR_Init+0x42>
  }
  else
  {
    reset_device();
 8002eda:	f000 f995 	bl	8003208 <reset_device>

    switch (Instance)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10c      	bne.n	8002efe <CUSTOM_RANGING_SENSOR_Init+0x3a>
    {
#if (USE_CUSTOM_RANGING_VL53L8CX == 1U)
      case CUSTOM_VL53L8CX:
          if (VL53L8CX_Probe(Instance) != BSP_ERROR_NONE)
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f90f 	bl	8003108 <VL53L8CX_Probe>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <CUSTOM_RANGING_SENSOR_Init+0x34>
          {
            ret = BSP_ERROR_NO_INIT;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	60fb      	str	r3, [r7, #12]
          }
          else
          {
            ret = BSP_ERROR_NONE;
          }
          break;
 8002ef6:	e006      	b.n	8002f06 <CUSTOM_RANGING_SENSOR_Init+0x42>
            ret = BSP_ERROR_NONE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
          break;
 8002efc:	e003      	b.n	8002f06 <CUSTOM_RANGING_SENSOR_Init+0x42>
#endif
      default:
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002efe:	f06f 0306 	mvn.w	r3, #6
 8002f02:	60fb      	str	r3, [r7, #12]
          break;
 8002f04:	bf00      	nop
    }
  }

  return ret;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <CUSTOM_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <CUSTOM_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f20:	f06f 0301 	mvn.w	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e014      	b.n	8002f52 <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ReadID(CUSTOM_RANGING_CompObj[Instance], pId) < 0)
 8002f28:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <CUSTOM_RANGING_SENSOR_ReadID+0x4c>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	490b      	ldr	r1, [pc, #44]	; (8002f60 <CUSTOM_RANGING_SENSOR_ReadID+0x50>)
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4798      	blx	r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da03      	bge.n	8002f4e <CUSTOM_RANGING_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f46:	f06f 0304 	mvn.w	r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e001      	b.n	8002f52 <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002f52:	68fb      	ldr	r3, [r7, #12]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000568 	.word	0x20000568
 8002f60:	20000564 	.word	0x20000564

08002f64 <CUSTOM_RANGING_SENSOR_GetCapabilities>:
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @note This function should be called after the init.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
    int32_t ret;

    if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <CUSTOM_RANGING_SENSOR_GetCapabilities+0x18>
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8002f74:	f06f 0301 	mvn.w	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e014      	b.n	8002fa6 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance], pCapabilities) < 0)
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x4c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	490b      	ldr	r1, [pc, #44]	; (8002fb4 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x50>)
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	4610      	mov	r0, r2
 8002f92:	4798      	blx	r3
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	da03      	bge.n	8002fa2 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f9a:	f06f 0304 	mvn.w	r3, #4
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e001      	b.n	8002fa6 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000568 	.word	0x20000568
 8002fb4:	20000564 	.word	0x20000564

08002fb8 <CUSTOM_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002fc8:	f06f 0301 	mvn.w	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e014      	b.n	8002ffa <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ConfigProfile(CUSTOM_RANGING_CompObj[Instance], pConfig) < 0)
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x4c>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	490b      	ldr	r1, [pc, #44]	; (8003008 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x50>)
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002fe2:	6839      	ldr	r1, [r7, #0]
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4798      	blx	r3
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da03      	bge.n	8002ff6 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002fee:	f06f 0304 	mvn.w	r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e001      	b.n	8002ffa <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000568 	.word	0x20000568
 8003008:	20000564 	.word	0x20000564

0800300c <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800301c:	f06f 0301 	mvn.w	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e014      	b.n	800304e <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 8003024:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <CUSTOM_RANGING_SENSOR_GetDistance+0x4c>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	490b      	ldr	r1, [pc, #44]	; (800305c <CUSTOM_RANGING_SENSOR_GetDistance+0x50>)
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003036:	6839      	ldr	r1, [r7, #0]
 8003038:	4610      	mov	r0, r2
 800303a:	4798      	blx	r3
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	da03      	bge.n	800304a <CUSTOM_RANGING_SENSOR_GetDistance+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003042:	f06f 0304 	mvn.w	r3, #4
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e001      	b.n	800304e <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000568 	.word	0x20000568
 800305c:	20000564 	.word	0x20000564

08003060 <CUSTOM_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <CUSTOM_RANGING_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003072:	f06f 0301 	mvn.w	r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	e014      	b.n	80030a4 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Start(CUSTOM_RANGING_CompObj[Instance], Mode) < 0)
 800307a:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <CUSTOM_RANGING_SENSOR_Start+0x50>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	490b      	ldr	r1, [pc, #44]	; (80030b4 <CUSTOM_RANGING_SENSOR_Start+0x54>)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800308c:	78f9      	ldrb	r1, [r7, #3]
 800308e:	4610      	mov	r0, r2
 8003090:	4798      	blx	r3
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	da03      	bge.n	80030a0 <CUSTOM_RANGING_SENSOR_Start+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003098:	f06f 0304 	mvn.w	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	e001      	b.n	80030a4 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80030a4:	68fb      	ldr	r3, [r7, #12]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000568 	.word	0x20000568
 80030b4:	20000564 	.word	0x20000564

080030b8 <CUSTOM_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Stop(uint32_t Instance)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <CUSTOM_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80030c6:	f06f 0301 	mvn.w	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e013      	b.n	80030f6 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Stop(CUSTOM_RANGING_CompObj[Instance]) < 0)
 80030ce:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <CUSTOM_RANGING_SENSOR_Stop+0x48>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	490a      	ldr	r1, [pc, #40]	; (8003104 <CUSTOM_RANGING_SENSOR_Stop+0x4c>)
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80030e0:	4610      	mov	r0, r2
 80030e2:	4798      	blx	r3
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da03      	bge.n	80030f2 <CUSTOM_RANGING_SENSOR_Stop+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80030ea:	f06f 0304 	mvn.w	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e001      	b.n	80030f6 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000568 	.word	0x20000568
 8003104:	20000564 	.word	0x20000564

08003108 <VL53L8CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L8CX_Probe(uint32_t Instance)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  VL53L8CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L8CX_Object_t   VL53L8CXObj;

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L8CX_ADDRESS;
 8003110:	2352      	movs	r3, #82	; 0x52
 8003112:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = CUSTOM_VL53L8CX_I2C_Init;
 8003114:	4b32      	ldr	r3, [pc, #200]	; (80031e0 <VL53L8CX_Probe+0xd8>)
 8003116:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = CUSTOM_VL53L8CX_I2C_DeInit;
 8003118:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <VL53L8CX_Probe+0xdc>)
 800311a:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = CUSTOM_VL53L8CX_I2C_WriteReg;
 800311c:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <VL53L8CX_Probe+0xe0>)
 800311e:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = CUSTOM_VL53L8CX_I2C_ReadReg;
 8003120:	4b32      	ldr	r3, [pc, #200]	; (80031ec <VL53L8CX_Probe+0xe4>)
 8003122:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8003124:	4b32      	ldr	r3, [pc, #200]	; (80031f0 <VL53L8CX_Probe+0xe8>)
 8003126:	623b      	str	r3, [r7, #32]

  if (VL53L8CX_RegisterBusIO(&VL53L8CXObj, &IOCtx) != VL53L8CX_OK)
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	4619      	mov	r1, r3
 800312e:	4831      	ldr	r0, [pc, #196]	; (80031f4 <VL53L8CX_Probe+0xec>)
 8003130:	f006 fe55 	bl	8009dde <VL53L8CX_RegisterBusIO>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <VL53L8CX_Probe+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800313a:	f06f 0304 	mvn.w	r3, #4
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
 8003140:	e049      	b.n	80031d6 <VL53L8CX_Probe+0xce>
  }
  else
  {
    CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L8CX_RANGING_SENSOR_Driver;
 8003142:	4a2d      	ldr	r2, [pc, #180]	; (80031f8 <VL53L8CX_Probe+0xf0>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	492d      	ldr	r1, [pc, #180]	; (80031fc <VL53L8CX_Probe+0xf4>)
 8003148:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    CUSTOM_RANGING_CompObj[Instance] = &VL53L8CXObj;
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <VL53L8CX_Probe+0xf8>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4928      	ldr	r1, [pc, #160]	; (80031f4 <VL53L8CX_Probe+0xec>)
 8003152:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if (VL53L8CX_ReadID(&VL53L8CXObj, &id) != VL53L8CX_OK)
 8003156:	f107 0308 	add.w	r3, r7, #8
 800315a:	4619      	mov	r1, r3
 800315c:	4825      	ldr	r0, [pc, #148]	; (80031f4 <VL53L8CX_Probe+0xec>)
 800315e:	f006 feee 	bl	8009f3e <VL53L8CX_ReadID>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <VL53L8CX_Probe+0x68>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003168:	f06f 0304 	mvn.w	r3, #4
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	e032      	b.n	80031d6 <VL53L8CX_Probe+0xce>
    }
    else if (id != VL53L8CX_ID)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f24f 020c 	movw	r2, #61452	; 0xf00c
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <VL53L8CX_Probe+0x7a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800317a:	f06f 0306 	mvn.w	r3, #6
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	e029      	b.n	80031d6 <VL53L8CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L8CX_OK)
 8003182:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <VL53L8CX_Probe+0xf0>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	491c      	ldr	r1, [pc, #112]	; (8003200 <VL53L8CX_Probe+0xf8>)
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <VL53L8CX_Probe+0x9e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800319e:	f06f 0304 	mvn.w	r3, #4
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
 80031a4:	e017      	b.n	80031d6 <VL53L8CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 80031a6:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <VL53L8CX_Probe+0xf0>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4913      	ldr	r1, [pc, #76]	; (8003200 <VL53L8CX_Probe+0xf8>)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
              &RANGING_SENSOR_Cap[Instance]) != VL53L8CX_OK)
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	4911      	ldr	r1, [pc, #68]	; (8003204 <VL53L8CX_Probe+0xfc>)
 80031be:	440a      	add	r2, r1
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 80031c0:	4611      	mov	r1, r2
 80031c2:	4798      	blx	r3
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <VL53L8CX_Probe+0xca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80031ca:	f06f 0304 	mvn.w	r3, #4
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
 80031d0:	e001      	b.n	80031d6 <VL53L8CX_Probe+0xce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3728      	adds	r7, #40	; 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	08004a95 	.word	0x08004a95
 80031e4:	08004b11 	.word	0x08004b11
 80031e8:	08004c29 	.word	0x08004c29
 80031ec:	08004c8d 	.word	0x08004c8d
 80031f0:	08004cf1 	.word	0x08004cf1
 80031f4:	2000057c 	.word	0x2000057c
 80031f8:	20000568 	.word	0x20000568
 80031fc:	2000003c 	.word	0x2000003c
 8003200:	20000564 	.word	0x20000564
 8003204:	2000056c 	.word	0x2000056c

08003208 <reset_device>:
#endif

static void reset_device(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
	/*
	HAL_GPIO_WritePin(CUSTOM_VL53L8CX_PWR_EN_PORT, CUSTOM_VL53L8CX_PWR_EN_PIN, GPIO_PIN_RESET);
	HAL_Delay(2);
	HAL_GPIO_WritePin(CUSTOM_VL53L8CX_PWR_EN_PORT, CUSTOM_VL53L8CX_PWR_EN_PIN, GPIO_PIN_SET);
	HAL_Delay(2);*/
	HAL_GPIO_WritePin(CUSTOM_VL53L8CX_LPn_PORT, CUSTOM_VL53L8CX_LPn_PIN, GPIO_PIN_RESET);
 800320c:	2200      	movs	r2, #0
 800320e:	2120      	movs	r1, #32
 8003210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003214:	f008 fbb8 	bl	800b988 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8003218:	2002      	movs	r0, #2
 800321a:	f7ff fba0 	bl	800295e <HAL_Delay>
	HAL_GPIO_WritePin(CUSTOM_VL53L8CX_LPn_PORT, CUSTOM_VL53L8CX_LPn_PIN, GPIO_PIN_SET);
 800321e:	2201      	movs	r2, #1
 8003220:	2120      	movs	r1, #32
 8003222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003226:	f008 fbaf 	bl	800b988 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800322a:	2002      	movs	r0, #2
 800322c:	f7ff fb97 	bl	800295e <HAL_Delay>
#endif
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}

08003234 <LL_EXTI_EnableIT_0_31>:
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <LL_EXTI_EnableIT_0_31+0x24>)
 800323e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003242:	4905      	ldr	r1, [pc, #20]	; (8003258 <LL_EXTI_EnableIT_0_31+0x24>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	58000800 	.word	0x58000800

0800325c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4904      	ldr	r1, [pc, #16]	; (800327c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]

}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	58000800 	.word	0x58000800

08003280 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <ReadRtcSsrValue+0x3c>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	b29b      	uxth	r3, r3
 800328c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <ReadRtcSsrValue+0x3c>)
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	b29b      	uxth	r3, r3
 8003294:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8003296:	e005      	b.n	80032a4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <ReadRtcSsrValue+0x3c>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1f5      	bne.n	8003298 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80032ac:	683b      	ldr	r3, [r7, #0]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40002800 	.word	0x40002800

080032c0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	460a      	mov	r2, r1
 80032ca:	71fb      	strb	r3, [r7, #7]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80032d0:	79ba      	ldrb	r2, [r7, #6]
 80032d2:	491d      	ldr	r1, [pc, #116]	; (8003348 <LinkTimerAfter+0x88>)
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	3315      	adds	r3, #21
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d009      	beq.n	80032fe <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	4916      	ldr	r1, [pc, #88]	; (8003348 <LinkTimerAfter+0x88>)
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	3314      	adds	r3, #20
 80032fa:	79fa      	ldrb	r2, [r7, #7]
 80032fc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80032fe:	79fa      	ldrb	r2, [r7, #7]
 8003300:	4911      	ldr	r1, [pc, #68]	; (8003348 <LinkTimerAfter+0x88>)
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3315      	adds	r3, #21
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8003312:	79fa      	ldrb	r2, [r7, #7]
 8003314:	490c      	ldr	r1, [pc, #48]	; (8003348 <LinkTimerAfter+0x88>)
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	3314      	adds	r3, #20
 8003322:	79ba      	ldrb	r2, [r7, #6]
 8003324:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8003326:	79ba      	ldrb	r2, [r7, #6]
 8003328:	4907      	ldr	r1, [pc, #28]	; (8003348 <LinkTimerAfter+0x88>)
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	3315      	adds	r3, #21
 8003336:	79fa      	ldrb	r2, [r7, #7]
 8003338:	701a      	strb	r2, [r3, #0]

  return;
 800333a:	bf00      	nop
}
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000ed0 	.word	0x20000ed0

0800334c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	460a      	mov	r2, r1
 8003356:	71fb      	strb	r3, [r7, #7]
 8003358:	4613      	mov	r3, r2
 800335a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800335c:	4b29      	ldr	r3, [pc, #164]	; (8003404 <LinkTimerBefore+0xb8>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	79ba      	ldrb	r2, [r7, #6]
 8003364:	429a      	cmp	r2, r3
 8003366:	d032      	beq.n	80033ce <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8003368:	79ba      	ldrb	r2, [r7, #6]
 800336a:	4927      	ldr	r1, [pc, #156]	; (8003408 <LinkTimerBefore+0xbc>)
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	440b      	add	r3, r1
 8003376:	3314      	adds	r3, #20
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	4922      	ldr	r1, [pc, #136]	; (8003408 <LinkTimerBefore+0xbc>)
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	3315      	adds	r3, #21
 800338c:	79fa      	ldrb	r2, [r7, #7]
 800338e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8003390:	79fa      	ldrb	r2, [r7, #7]
 8003392:	491d      	ldr	r1, [pc, #116]	; (8003408 <LinkTimerBefore+0xbc>)
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	3315      	adds	r3, #21
 80033a0:	79ba      	ldrb	r2, [r7, #6]
 80033a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80033a4:	79fa      	ldrb	r2, [r7, #7]
 80033a6:	4918      	ldr	r1, [pc, #96]	; (8003408 <LinkTimerBefore+0xbc>)
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	3314      	adds	r3, #20
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80033b8:	79ba      	ldrb	r2, [r7, #6]
 80033ba:	4913      	ldr	r1, [pc, #76]	; (8003408 <LinkTimerBefore+0xbc>)
 80033bc:	4613      	mov	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4413      	add	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	440b      	add	r3, r1
 80033c6:	3314      	adds	r3, #20
 80033c8:	79fa      	ldrb	r2, [r7, #7]
 80033ca:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80033cc:	e014      	b.n	80033f8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80033ce:	79fa      	ldrb	r2, [r7, #7]
 80033d0:	490d      	ldr	r1, [pc, #52]	; (8003408 <LinkTimerBefore+0xbc>)
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	440b      	add	r3, r1
 80033dc:	3315      	adds	r3, #21
 80033de:	79ba      	ldrb	r2, [r7, #6]
 80033e0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80033e2:	79ba      	ldrb	r2, [r7, #6]
 80033e4:	4908      	ldr	r1, [pc, #32]	; (8003408 <LinkTimerBefore+0xbc>)
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	440b      	add	r3, r1
 80033f0:	3314      	adds	r3, #20
 80033f2:	79fa      	ldrb	r2, [r7, #7]
 80033f4:	701a      	strb	r2, [r3, #0]
  return;
 80033f6:	bf00      	nop
}
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000f60 	.word	0x20000f60
 8003408:	20000ed0 	.word	0x20000ed0

0800340c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003416:	4b4e      	ldr	r3, [pc, #312]	; (8003550 <linkTimer+0x144>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b06      	cmp	r3, #6
 800341e:	d118      	bne.n	8003452 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8003420:	4b4b      	ldr	r3, [pc, #300]	; (8003550 <linkTimer+0x144>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4b4b      	ldr	r3, [pc, #300]	; (8003554 <linkTimer+0x148>)
 8003428:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800342a:	4a49      	ldr	r2, [pc, #292]	; (8003550 <linkTimer+0x144>)
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8003430:	79fa      	ldrb	r2, [r7, #7]
 8003432:	4949      	ldr	r1, [pc, #292]	; (8003558 <linkTimer+0x14c>)
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	3315      	adds	r3, #21
 8003440:	2206      	movs	r2, #6
 8003442:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003444:	4b45      	ldr	r3, [pc, #276]	; (800355c <linkTimer+0x150>)
 8003446:	f04f 32ff 	mov.w	r2, #4294967295
 800344a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	81fb      	strh	r3, [r7, #14]
 8003450:	e078      	b.n	8003544 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8003452:	f000 f909 	bl	8003668 <ReturnTimeElapsed>
 8003456:	4603      	mov	r3, r0
 8003458:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800345a:	79fa      	ldrb	r2, [r7, #7]
 800345c:	493e      	ldr	r1, [pc, #248]	; (8003558 <linkTimer+0x14c>)
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	3308      	adds	r3, #8
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	89fb      	ldrh	r3, [r7, #14]
 800346e:	79fa      	ldrb	r2, [r7, #7]
 8003470:	4419      	add	r1, r3
 8003472:	4839      	ldr	r0, [pc, #228]	; (8003558 <linkTimer+0x14c>)
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4403      	add	r3, r0
 800347e:	3308      	adds	r3, #8
 8003480:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8003482:	79fa      	ldrb	r2, [r7, #7]
 8003484:	4934      	ldr	r1, [pc, #208]	; (8003558 <linkTimer+0x14c>)
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	3308      	adds	r3, #8
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8003496:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <linkTimer+0x144>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	4a2e      	ldr	r2, [pc, #184]	; (8003558 <linkTimer+0x14c>)
 80034a0:	460b      	mov	r3, r1
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	440b      	add	r3, r1
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	3308      	adds	r3, #8
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d337      	bcc.n	8003524 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <linkTimer+0x144>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80034ba:	7b7a      	ldrb	r2, [r7, #13]
 80034bc:	4926      	ldr	r1, [pc, #152]	; (8003558 <linkTimer+0x14c>)
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	3315      	adds	r3, #21
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80034ce:	e013      	b.n	80034f8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80034d0:	7b7a      	ldrb	r2, [r7, #13]
 80034d2:	4921      	ldr	r1, [pc, #132]	; (8003558 <linkTimer+0x14c>)
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	440b      	add	r3, r1
 80034de:	3315      	adds	r3, #21
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80034e4:	7b7a      	ldrb	r2, [r7, #13]
 80034e6:	491c      	ldr	r1, [pc, #112]	; (8003558 <linkTimer+0x14c>)
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	3315      	adds	r3, #21
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80034f8:	7b3b      	ldrb	r3, [r7, #12]
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d00b      	beq.n	8003516 <linkTimer+0x10a>
 80034fe:	7b3a      	ldrb	r2, [r7, #12]
 8003500:	4915      	ldr	r1, [pc, #84]	; (8003558 <linkTimer+0x14c>)
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	440b      	add	r3, r1
 800350c:	3308      	adds	r3, #8
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	d2dc      	bcs.n	80034d0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8003516:	7b7a      	ldrb	r2, [r7, #13]
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fecf 	bl	80032c0 <LinkTimerAfter>
 8003522:	e00f      	b.n	8003544 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <linkTimer+0x144>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff0c 	bl	800334c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <linkTimer+0x144>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <linkTimer+0x148>)
 800353c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800353e:	4a04      	ldr	r2, [pc, #16]	; (8003550 <linkTimer+0x144>)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8003544:	89fb      	ldrh	r3, [r7, #14]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000f60 	.word	0x20000f60
 8003554:	20000f61 	.word	0x20000f61
 8003558:	20000ed0 	.word	0x20000ed0
 800355c:	20000f64 	.word	0x20000f64

08003560 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	460a      	mov	r2, r1
 800356a:	71fb      	strb	r3, [r7, #7]
 800356c:	4613      	mov	r3, r2
 800356e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8003570:	4b39      	ldr	r3, [pc, #228]	; (8003658 <UnlinkTimer+0xf8>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	79fa      	ldrb	r2, [r7, #7]
 8003578:	429a      	cmp	r2, r3
 800357a:	d111      	bne.n	80035a0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800357c:	4b36      	ldr	r3, [pc, #216]	; (8003658 <UnlinkTimer+0xf8>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <UnlinkTimer+0xfc>)
 8003584:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8003586:	79fa      	ldrb	r2, [r7, #7]
 8003588:	4935      	ldr	r1, [pc, #212]	; (8003660 <UnlinkTimer+0x100>)
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	3315      	adds	r3, #21
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <UnlinkTimer+0xf8>)
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e03e      	b.n	800361e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80035a0:	79fa      	ldrb	r2, [r7, #7]
 80035a2:	492f      	ldr	r1, [pc, #188]	; (8003660 <UnlinkTimer+0x100>)
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	3314      	adds	r3, #20
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80035b4:	79fa      	ldrb	r2, [r7, #7]
 80035b6:	492a      	ldr	r1, [pc, #168]	; (8003660 <UnlinkTimer+0x100>)
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	440b      	add	r3, r1
 80035c2:	3315      	adds	r3, #21
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80035c8:	79f9      	ldrb	r1, [r7, #7]
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	4824      	ldr	r0, [pc, #144]	; (8003660 <UnlinkTimer+0x100>)
 80035ce:	460b      	mov	r3, r1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	440b      	add	r3, r1
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4403      	add	r3, r0
 80035d8:	3315      	adds	r3, #21
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b2d8      	uxtb	r0, r3
 80035de:	4920      	ldr	r1, [pc, #128]	; (8003660 <UnlinkTimer+0x100>)
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	440b      	add	r3, r1
 80035ea:	3315      	adds	r3, #21
 80035ec:	4602      	mov	r2, r0
 80035ee:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80035f0:	7bbb      	ldrb	r3, [r7, #14]
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d013      	beq.n	800361e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80035f6:	79f9      	ldrb	r1, [r7, #7]
 80035f8:	7bba      	ldrb	r2, [r7, #14]
 80035fa:	4819      	ldr	r0, [pc, #100]	; (8003660 <UnlinkTimer+0x100>)
 80035fc:	460b      	mov	r3, r1
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	440b      	add	r3, r1
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4403      	add	r3, r0
 8003606:	3314      	adds	r3, #20
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2d8      	uxtb	r0, r3
 800360c:	4914      	ldr	r1, [pc, #80]	; (8003660 <UnlinkTimer+0x100>)
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	3314      	adds	r3, #20
 800361a:	4602      	mov	r2, r0
 800361c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800361e:	79fa      	ldrb	r2, [r7, #7]
 8003620:	490f      	ldr	r1, [pc, #60]	; (8003660 <UnlinkTimer+0x100>)
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	330c      	adds	r3, #12
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <UnlinkTimer+0xf8>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b06      	cmp	r3, #6
 800363a:	d107      	bne.n	800364c <UnlinkTimer+0xec>
 800363c:	79bb      	ldrb	r3, [r7, #6]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d104      	bne.n	800364c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <UnlinkTimer+0x104>)
 8003644:	f04f 32ff 	mov.w	r2, #4294967295
 8003648:	601a      	str	r2, [r3, #0]
  }

  return;
 800364a:	bf00      	nop
 800364c:	bf00      	nop
}
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	20000f60 	.word	0x20000f60
 800365c:	20000f61 	.word	0x20000f61
 8003660:	20000ed0 	.word	0x20000ed0
 8003664:	20000f64 	.word	0x20000f64

08003668 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <ReturnTimeElapsed+0x70>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d026      	beq.n	80036c6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003678:	f7ff fe02 	bl	8003280 <ReadRtcSsrValue>
 800367c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <ReturnTimeElapsed+0x70>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d805      	bhi.n	8003694 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003688:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <ReturnTimeElapsed+0x70>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	e00a      	b.n	80036aa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <ReturnTimeElapsed+0x74>)
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <ReturnTimeElapsed+0x70>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80036aa:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <ReturnTimeElapsed+0x78>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <ReturnTimeElapsed+0x7c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	40d3      	lsrs	r3, r2
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	e001      	b.n	80036ca <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	b29b      	uxth	r3, r3
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000f64 	.word	0x20000f64
 80036dc:	20000f6c 	.word	0x20000f6c
 80036e0:	20000f6a 	.word	0x20000f6a
 80036e4:	20000f69 	.word	0x20000f69

080036e8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d108      	bne.n	800370a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80036f8:	f7ff fdc2 	bl	8003280 <ReadRtcSsrValue>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4a21      	ldr	r2, [pc, #132]	; (8003784 <RestartWakeupCounter+0x9c>)
 8003700:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003702:	2003      	movs	r0, #3
 8003704:	f007 fb29 	bl	800ad5a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003708:	e039      	b.n	800377e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d803      	bhi.n	8003718 <RestartWakeupCounter+0x30>
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <RestartWakeupCounter+0xa0>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d002      	beq.n	800371e <RestartWakeupCounter+0x36>
      Value -= 1;
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	3b01      	subs	r3, #1
 800371c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800371e:	bf00      	nop
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <RestartWakeupCounter+0xa4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f8      	beq.n	8003720 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <RestartWakeupCounter+0xa4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <RestartWakeupCounter+0xa4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800373e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <RestartWakeupCounter+0xa8>)
 8003742:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003746:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003748:	2003      	movs	r0, #3
 800374a:	f007 fb14 	bl	800ad76 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <RestartWakeupCounter+0xac>)
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	490e      	ldr	r1, [pc, #56]	; (8003794 <RestartWakeupCounter+0xac>)
 800375a:	4313      	orrs	r3, r2
 800375c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800375e:	f7ff fd8f 	bl	8003280 <ReadRtcSsrValue>
 8003762:	4603      	mov	r3, r0
 8003764:	4a07      	ldr	r2, [pc, #28]	; (8003784 <RestartWakeupCounter+0x9c>)
 8003766:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003768:	4b08      	ldr	r3, [pc, #32]	; (800378c <RestartWakeupCounter+0xa4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <RestartWakeupCounter+0xa4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003776:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003778:	f3af 8000 	nop.w
  return ;
 800377c:	bf00      	nop
}
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000f64 	.word	0x20000f64
 8003788:	20000f69 	.word	0x20000f69
 800378c:	200011b8 	.word	0x200011b8
 8003790:	58000800 	.word	0x58000800
 8003794:	40002800 	.word	0x40002800

08003798 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800379e:	4b45      	ldr	r3, [pc, #276]	; (80038b4 <RescheduleTimerList+0x11c>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d107      	bne.n	80037bc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80037ac:	bf00      	nop
 80037ae:	4b42      	ldr	r3, [pc, #264]	; (80038b8 <RescheduleTimerList+0x120>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f8      	bne.n	80037ae <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80037bc:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <RescheduleTimerList+0x120>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <RescheduleTimerList+0x120>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ca:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <RescheduleTimerList+0x124>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	493a      	ldr	r1, [pc, #232]	; (80038c0 <RescheduleTimerList+0x128>)
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	3308      	adds	r3, #8
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80037e6:	f7ff ff3f 	bl	8003668 <ReturnTimeElapsed>
 80037ea:	4603      	mov	r3, r0
 80037ec:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d205      	bcs.n	8003802 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80037fa:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <RescheduleTimerList+0x12c>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e04d      	b.n	800389e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	4a30      	ldr	r2, [pc, #192]	; (80038c8 <RescheduleTimerList+0x130>)
 8003806:	8812      	ldrh	r2, [r2, #0]
 8003808:	b292      	uxth	r2, r2
 800380a:	4413      	add	r3, r2
 800380c:	461a      	mov	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4293      	cmp	r3, r2
 8003812:	d906      	bls.n	8003822 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003814:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <RescheduleTimerList+0x130>)
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800381a:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <RescheduleTimerList+0x12c>)
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e03d      	b.n	800389e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	b29a      	uxth	r2, r3
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <RescheduleTimerList+0x12c>)
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003832:	e034      	b.n	800389e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	4922      	ldr	r1, [pc, #136]	; (80038c0 <RescheduleTimerList+0x128>)
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	440b      	add	r3, r1
 8003842:	3308      	adds	r3, #8
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	429a      	cmp	r2, r3
 800384a:	d20a      	bcs.n	8003862 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	491c      	ldr	r1, [pc, #112]	; (80038c0 <RescheduleTimerList+0x128>)
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	3308      	adds	r3, #8
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e013      	b.n	800388a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <RescheduleTimerList+0x128>)
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	440b      	add	r3, r1
 8003870:	3308      	adds	r3, #8
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	1ac9      	subs	r1, r1, r3
 800387a:	4811      	ldr	r0, [pc, #68]	; (80038c0 <RescheduleTimerList+0x128>)
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4403      	add	r3, r0
 8003886:	3308      	adds	r3, #8
 8003888:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <RescheduleTimerList+0x128>)
 800388e:	4613      	mov	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	440b      	add	r3, r1
 8003898:	3315      	adds	r3, #21
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d1c7      	bne.n	8003834 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80038a4:	89bb      	ldrh	r3, [r7, #12]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ff1e 	bl	80036e8 <RestartWakeupCounter>

  return ;
 80038ac:	bf00      	nop
}
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40002800 	.word	0x40002800
 80038b8:	200011b8 	.word	0x200011b8
 80038bc:	20000f60 	.word	0x20000f60
 80038c0:	20000ed0 	.word	0x20000ed0
 80038c4:	20000f68 	.word	0x20000f68
 80038c8:	20000f6e 	.word	0x20000f6e

080038cc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	617b      	str	r3, [r7, #20]
  return(result);
 80038d8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80038dc:	b672      	cpsid	i
}
 80038de:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80038e0:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	22ca      	movs	r2, #202	; 0xca
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
 80038e8:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2253      	movs	r2, #83	; 0x53
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80038f0:	4b55      	ldr	r3, [pc, #340]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fe:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003900:	4b52      	ldr	r3, [pc, #328]	; (8003a4c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003908:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800390c:	4950      	ldr	r1, [pc, #320]	; (8003a50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	330c      	adds	r3, #12
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d16e      	bne.n	8003a00 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8003922:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003926:	494a      	ldr	r1, [pc, #296]	; (8003a50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	440b      	add	r3, r1
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8003936:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800393a:	4945      	ldr	r1, [pc, #276]	; (8003a50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	3310      	adds	r3, #16
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800394c:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d04c      	beq.n	80039f0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003956:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800395a:	493d      	ldr	r1, [pc, #244]	; (8003a50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	330d      	adds	r3, #13
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d124      	bne.n	80039ba <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003970:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fdf2 	bl	8003560 <UnlinkTimer>
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f383 8810 	msr	PRIMASK, r3
}
 8003986:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003988:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800398c:	4930      	ldr	r1, [pc, #192]	; (8003a50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	440b      	add	r3, r1
 8003998:	3304      	adds	r3, #4
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fa32 	bl	8003e0c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	22ca      	movs	r2, #202	; 0xca
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2253      	movs	r2, #83	; 0x53
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24
 80039b8:	e012      	b.n	80039e0 <HW_TS_RTC_Wakeup_Handler+0x114>
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f383 8810 	msr	PRIMASK, r3
}
 80039c4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80039c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f99a 	bl	8003d04 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	22ca      	movs	r2, #202	; 0xca
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2253      	movs	r2, #83	; 0x53
 80039de:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80039e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	4619      	mov	r1, r3
 80039e8:	69b8      	ldr	r0, [r7, #24]
 80039ea:	f000 fa95 	bl	8003f18 <HW_TS_RTC_Int_AppNot>
 80039ee:	e022      	b.n	8003a36 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80039f0:	f7ff fed2 	bl	8003798 <RescheduleTimerList>
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	e01a      	b.n	8003a36 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003a00:	bf00      	nop
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f8      	beq.n	8003a02 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003a10:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003a20:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003a24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f383 8810 	msr	PRIMASK, r3
}
 8003a34:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8003a3e:	bf00      	nop
}
 8003a40:	3728      	adds	r7, #40	; 0x28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200011b8 	.word	0x200011b8
 8003a4c:	20000f60 	.word	0x20000f60
 8003a50:	20000ed0 	.word	0x20000ed0
 8003a54:	20000f68 	.word	0x20000f68
 8003a58:	58000800 	.word	0x58000800

08003a5c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	6039      	str	r1, [r7, #0]
 8003a66:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003a68:	4b5e      	ldr	r3, [pc, #376]	; (8003be4 <HW_TS_Init+0x188>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	22ca      	movs	r2, #202	; 0xca
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24
 8003a70:	4b5c      	ldr	r3, [pc, #368]	; (8003be4 <HW_TS_Init+0x188>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2253      	movs	r2, #83	; 0x53
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a78:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <HW_TS_Init+0x18c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a5a      	ldr	r2, [pc, #360]	; (8003be8 <HW_TS_Init+0x18c>)
 8003a7e:	f043 0320 	orr.w	r3, r3, #32
 8003a82:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003a84:	4b58      	ldr	r3, [pc, #352]	; (8003be8 <HW_TS_Init+0x18c>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f1c3 0304 	rsb	r3, r3, #4
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	4b55      	ldr	r3, [pc, #340]	; (8003bec <HW_TS_Init+0x190>)
 8003a98:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8003a9a:	4b53      	ldr	r3, [pc, #332]	; (8003be8 <HW_TS_Init+0x18c>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003aa2:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8003aa6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	fa92 f2a2 	rbit	r2, r2
 8003aae:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	2a00      	cmp	r2, #0
 8003ab8:	d101      	bne.n	8003abe <HW_TS_Init+0x62>
  {
    return 32U;
 8003aba:	2220      	movs	r2, #32
 8003abc:	e003      	b.n	8003ac6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	fab2 f282 	clz	r2, r2
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	40d3      	lsrs	r3, r2
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <HW_TS_Init+0x194>)
 8003ad0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003ad2:	4b45      	ldr	r3, [pc, #276]	; (8003be8 <HW_TS_Init+0x18c>)
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <HW_TS_Init+0x198>)
 8003ae4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003ae6:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HW_TS_Init+0x198>)
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	4a40      	ldr	r2, [pc, #256]	; (8003bf0 <HW_TS_Init+0x194>)
 8003aee:	7812      	ldrb	r2, [r2, #0]
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003af8:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <HW_TS_Init+0x190>)
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	40d3      	lsrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d904      	bls.n	8003b14 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HW_TS_Init+0x19c>)
 8003b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b10:	801a      	strh	r2, [r3, #0]
 8003b12:	e003      	b.n	8003b1c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <HW_TS_Init+0x19c>)
 8003b1a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003b1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b20:	f7ff fb9c 	bl	800325c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003b24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b28:	f7ff fb84 	bl	8003234 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d13d      	bne.n	8003bae <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003b32:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <HW_TS_Init+0x1a0>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HW_TS_Init+0x1a4>)
 8003b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e00c      	b.n	8003b60 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003b46:	7ffa      	ldrb	r2, [r7, #31]
 8003b48:	492e      	ldr	r1, [pc, #184]	; (8003c04 <HW_TS_Init+0x1a8>)
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	330c      	adds	r3, #12
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003b5a:	7ffb      	ldrb	r3, [r7, #31]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	7ffb      	ldrb	r3, [r7, #31]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d9ef      	bls.n	8003b46 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003b66:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <HW_TS_Init+0x1ac>)
 8003b68:	2206      	movs	r2, #6
 8003b6a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <HW_TS_Init+0x188>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HW_TS_Init+0x188>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HW_TS_Init+0x188>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HW_TS_Init+0x188>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003b8c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <HW_TS_Init+0x1b0>)
 8003b90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b94:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003b96:	2003      	movs	r0, #3
 8003b98:	f007 f8ed 	bl	800ad76 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HW_TS_Init+0x188>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HW_TS_Init+0x188>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	e009      	b.n	8003bc2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <HW_TS_Init+0x188>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	f007 f8cc 	bl	800ad5a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HW_TS_Init+0x188>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	22ff      	movs	r2, #255	; 0xff
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2103      	movs	r1, #3
 8003bce:	2003      	movs	r0, #3
 8003bd0:	f007 f881 	bl	800acd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003bd4:	2003      	movs	r0, #3
 8003bd6:	f007 f898 	bl	800ad0a <HAL_NVIC_EnableIRQ>

  return;
 8003bda:	bf00      	nop
}
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200011b8 	.word	0x200011b8
 8003be8:	40002800 	.word	0x40002800
 8003bec:	20000f69 	.word	0x20000f69
 8003bf0:	20000f6a 	.word	0x20000f6a
 8003bf4:	20000f6c 	.word	0x20000f6c
 8003bf8:	20000f6e 	.word	0x20000f6e
 8003bfc:	20000f68 	.word	0x20000f68
 8003c00:	20000f64 	.word	0x20000f64
 8003c04:	20000ed0 	.word	0x20000ed0
 8003c08:	20000f60 	.word	0x20000f60
 8003c0c:	58000800 	.word	0x58000800

08003c10 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b08b      	sub	sp, #44	; 0x2c
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c26:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003c2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c30:	b672      	cpsid	i
}
 8003c32:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003c34:	e004      	b.n	8003c40 <HW_TS_Create+0x30>
  {
    loop++;
 8003c36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003c40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d80c      	bhi.n	8003c62 <HW_TS_Create+0x52>
 8003c48:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003c4c:	492c      	ldr	r1, [pc, #176]	; (8003d00 <HW_TS_Create+0xf0>)
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	440b      	add	r3, r1
 8003c58:	330c      	adds	r3, #12
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e9      	bne.n	8003c36 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003c62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d038      	beq.n	8003cdc <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003c6a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003c6e:	4924      	ldr	r1, [pc, #144]	; (8003d00 <HW_TS_Create+0xf0>)
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	440b      	add	r3, r1
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003c8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003c90:	491b      	ldr	r1, [pc, #108]	; (8003d00 <HW_TS_Create+0xf0>)
 8003c92:	4613      	mov	r3, r2
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8003ca2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003ca6:	4916      	ldr	r1, [pc, #88]	; (8003d00 <HW_TS_Create+0xf0>)
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	440b      	add	r3, r1
 8003cb2:	330d      	adds	r3, #13
 8003cb4:	79fa      	ldrb	r2, [r7, #7]
 8003cb6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003cb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003cbc:	4910      	ldr	r1, [pc, #64]	; (8003d00 <HW_TS_Create+0xf0>)
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	440b      	add	r3, r1
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003cd2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cda:	e008      	b.n	8003cee <HW_TS_Create+0xde>
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f383 8810 	msr	PRIMASK, r3
}
 8003ce6:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	372c      	adds	r7, #44	; 0x2c
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000ed0 	.word	0x20000ed0

08003d04 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d12:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d14:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003d16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d18:	b672      	cpsid	i
}
 8003d1a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003d1c:	2003      	movs	r0, #3
 8003d1e:	f007 f802 	bl	800ad26 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003d22:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <HW_TS_Stop+0xf0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	22ca      	movs	r2, #202	; 0xca
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24
 8003d2a:	4b32      	ldr	r3, [pc, #200]	; (8003df4 <HW_TS_Stop+0xf0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2253      	movs	r2, #83	; 0x53
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003d32:	79fa      	ldrb	r2, [r7, #7]
 8003d34:	4930      	ldr	r1, [pc, #192]	; (8003df8 <HW_TS_Stop+0xf4>)
 8003d36:	4613      	mov	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	440b      	add	r3, r1
 8003d40:	330c      	adds	r3, #12
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d142      	bne.n	8003dd0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fc06 	bl	8003560 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003d54:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HW_TS_Stop+0xf8>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d12f      	bne.n	8003dc0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003d60:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <HW_TS_Stop+0xfc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	d107      	bne.n	8003d7e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003d6e:	bf00      	nop
 8003d70:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HW_TS_Stop+0xf0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f8      	bne.n	8003d70 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HW_TS_Stop+0xf0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HW_TS_Stop+0xf0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003d8e:	bf00      	nop
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HW_TS_Stop+0xf0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f8      	beq.n	8003d90 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <HW_TS_Stop+0xf0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HW_TS_Stop+0xf0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003dae:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <HW_TS_Stop+0x100>)
 8003db2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003db6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003db8:	2003      	movs	r0, #3
 8003dba:	f006 ffdc 	bl	800ad76 <HAL_NVIC_ClearPendingIRQ>
 8003dbe:	e007      	b.n	8003dd0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HW_TS_Stop+0x104>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	7cfa      	ldrb	r2, [r7, #19]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003dcc:	f7ff fce4 	bl	8003798 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HW_TS_Stop+0xf0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	22ff      	movs	r2, #255	; 0xff
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003dd8:	2003      	movs	r0, #3
 8003dda:	f006 ff96 	bl	800ad0a <HAL_NVIC_EnableIRQ>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f383 8810 	msr	PRIMASK, r3
}
 8003de8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003dea:	bf00      	nop
}
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200011b8 	.word	0x200011b8
 8003df8:	20000ed0 	.word	0x20000ed0
 8003dfc:	20000f60 	.word	0x20000f60
 8003e00:	40002800 	.word	0x40002800
 8003e04:	58000800 	.word	0x58000800
 8003e08:	20000f61 	.word	0x20000f61

08003e0c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003e18:	79fa      	ldrb	r2, [r7, #7]
 8003e1a:	493b      	ldr	r1, [pc, #236]	; (8003f08 <HW_TS_Start+0xfc>)
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4413      	add	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	440b      	add	r3, r1
 8003e26:	330c      	adds	r3, #12
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d103      	bne.n	8003e38 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ff66 	bl	8003d04 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e38:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003e40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e42:	b672      	cpsid	i
}
 8003e44:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003e46:	2003      	movs	r0, #3
 8003e48:	f006 ff6d 	bl	800ad26 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003e4c:	4b2f      	ldr	r3, [pc, #188]	; (8003f0c <HW_TS_Start+0x100>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	22ca      	movs	r2, #202	; 0xca
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24
 8003e54:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HW_TS_Start+0x100>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2253      	movs	r2, #83	; 0x53
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003e5c:	79fa      	ldrb	r2, [r7, #7]
 8003e5e:	492a      	ldr	r1, [pc, #168]	; (8003f08 <HW_TS_Start+0xfc>)
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	440b      	add	r3, r1
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003e70:	79fa      	ldrb	r2, [r7, #7]
 8003e72:	4925      	ldr	r1, [pc, #148]	; (8003f08 <HW_TS_Start+0xfc>)
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3308      	adds	r3, #8
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003e84:	79fa      	ldrb	r2, [r7, #7]
 8003e86:	4920      	ldr	r1, [pc, #128]	; (8003f08 <HW_TS_Start+0xfc>)
 8003e88:	4613      	mov	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	440b      	add	r3, r1
 8003e92:	3304      	adds	r3, #4
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fab6 	bl	800340c <linkTimer>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HW_TS_Start+0x104>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <HW_TS_Start+0x108>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	7c7a      	ldrb	r2, [r7, #17]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d002      	beq.n	8003ebc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8003eb6:	f7ff fc6f 	bl	8003798 <RescheduleTimerList>
 8003eba:	e013      	b.n	8003ee4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003ebc:	79fa      	ldrb	r2, [r7, #7]
 8003ebe:	4912      	ldr	r1, [pc, #72]	; (8003f08 <HW_TS_Start+0xfc>)
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	3308      	adds	r3, #8
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	8a7b      	ldrh	r3, [r7, #18]
 8003ed0:	79fa      	ldrb	r2, [r7, #7]
 8003ed2:	1ac9      	subs	r1, r1, r3
 8003ed4:	480c      	ldr	r0, [pc, #48]	; (8003f08 <HW_TS_Start+0xfc>)
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4403      	add	r3, r0
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HW_TS_Start+0x100>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	22ff      	movs	r2, #255	; 0xff
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003eec:	2003      	movs	r0, #3
 8003eee:	f006 ff0c 	bl	800ad0a <HAL_NVIC_EnableIRQ>
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f383 8810 	msr	PRIMASK, r3
}
 8003efc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003efe:	bf00      	nop
}
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000ed0 	.word	0x20000ed0
 8003f0c:	200011b8 	.word	0x200011b8
 8003f10:	20000f60 	.word	0x20000f60
 8003f14:	20000f61 	.word	0x20000f61

08003f18 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	460b      	mov	r3, r1
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4798      	blx	r3

  return;
 8003f2a:	bf00      	nop
}
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	4603      	mov	r3, r0
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	4613      	mov	r3, r2
 8003f44:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HW_UART_Receive_IT+0x1e>
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d00d      	beq.n	8003f6c <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003f50:	e019      	b.n	8003f86 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8003f52:	4a0f      	ldr	r2, [pc, #60]	; (8003f90 <HW_UART_Receive_IT+0x5c>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HW_UART_Receive_IT+0x60>)
 8003f5a:	4a0f      	ldr	r2, [pc, #60]	; (8003f98 <HW_UART_Receive_IT+0x64>)
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	89bb      	ldrh	r3, [r7, #12]
 8003f60:	461a      	mov	r2, r3
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	480b      	ldr	r0, [pc, #44]	; (8003f94 <HW_UART_Receive_IT+0x60>)
 8003f66:	f00a fcd1 	bl	800e90c <HAL_UART_Receive_IT>
            break;
 8003f6a:	e00c      	b.n	8003f86 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8003f6c:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <HW_UART_Receive_IT+0x68>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HW_UART_Receive_IT+0x6c>)
 8003f74:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <HW_UART_Receive_IT+0x70>)
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	89bb      	ldrh	r3, [r7, #12]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	4808      	ldr	r0, [pc, #32]	; (8003fa0 <HW_UART_Receive_IT+0x6c>)
 8003f80:	f00a fcc4 	bl	800e90c <HAL_UART_Receive_IT>
            break;
 8003f84:	bf00      	nop
    }

    return;
 8003f86:	bf00      	nop
}
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000f70 	.word	0x20000f70
 8003f94:	20001050 	.word	0x20001050
 8003f98:	40013800 	.word	0x40013800
 8003f9c:	20000f78 	.word	0x20000f78
 8003fa0:	20000fbc 	.word	0x20000fbc
 8003fa4:	40008000 	.word	0x40008000

08003fa8 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HW_UART_Transmit_DMA+0x26>
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d00f      	beq.n	8003fec <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003fcc:	e01d      	b.n	800400a <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8003fce:	4a1f      	ldr	r2, [pc, #124]	; (800404c <HW_UART_Transmit_DMA+0xa4>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8003fd4:	4b1e      	ldr	r3, [pc, #120]	; (8004050 <HW_UART_Transmit_DMA+0xa8>)
 8003fd6:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <HW_UART_Transmit_DMA+0xac>)
 8003fd8:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003fda:	89bb      	ldrh	r3, [r7, #12]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	481b      	ldr	r0, [pc, #108]	; (8004050 <HW_UART_Transmit_DMA+0xa8>)
 8003fe2:	f00a fcdf 	bl	800e9a4 <HAL_UART_Transmit_DMA>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	75fb      	strb	r3, [r7, #23]
            break;
 8003fea:	e00e      	b.n	800400a <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8003fec:	4a1a      	ldr	r2, [pc, #104]	; (8004058 <HW_UART_Transmit_DMA+0xb0>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HW_UART_Transmit_DMA+0xb4>)
 8003ff4:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <HW_UART_Transmit_DMA+0xb8>)
 8003ff6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8003ff8:	89bb      	ldrh	r3, [r7, #12]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	4817      	ldr	r0, [pc, #92]	; (800405c <HW_UART_Transmit_DMA+0xb4>)
 8004000:	f00a fcd0 	bl	800e9a4 <HAL_UART_Transmit_DMA>
 8004004:	4603      	mov	r3, r0
 8004006:	75fb      	strb	r3, [r7, #23]
            break;
 8004008:	bf00      	nop
    }

    switch (hal_status)
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d817      	bhi.n	8004040 <HW_UART_Transmit_DMA+0x98>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <HW_UART_Transmit_DMA+0x70>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004029 	.word	0x08004029
 800401c:	0800402f 	.word	0x0800402f
 8004020:	08004035 	.word	0x08004035
 8004024:	0800403b 	.word	0x0800403b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8004028:	2300      	movs	r3, #0
 800402a:	75bb      	strb	r3, [r7, #22]
            break;
 800402c:	e009      	b.n	8004042 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800402e:	2301      	movs	r3, #1
 8004030:	75bb      	strb	r3, [r7, #22]
            break;
 8004032:	e006      	b.n	8004042 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8004034:	2302      	movs	r3, #2
 8004036:	75bb      	strb	r3, [r7, #22]
            break;
 8004038:	e003      	b.n	8004042 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800403a:	2303      	movs	r3, #3
 800403c:	75bb      	strb	r3, [r7, #22]
            break;
 800403e:	e000      	b.n	8004042 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8004040:	bf00      	nop
    }

    return hw_status;
 8004042:	7dbb      	ldrb	r3, [r7, #22]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000f74 	.word	0x20000f74
 8004050:	20001050 	.word	0x20001050
 8004054:	40013800 	.word	0x40013800
 8004058:	20000f7c 	.word	0x20000f7c
 800405c:	20000fbc 	.word	0x20000fbc
 8004060:	40008000 	.word	0x40008000

08004064 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <HAL_UART_RxCpltCallback+0x4c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00a      	beq.n	800408c <HAL_UART_RxCpltCallback+0x28>
 8004076:	4a0f      	ldr	r2, [pc, #60]	; (80040b4 <HAL_UART_RxCpltCallback+0x50>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d10f      	bne.n	800409c <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_UART_RxCpltCallback+0x54>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <HAL_UART_RxCpltCallback+0x54>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4798      	blx	r3
            }
            break;
 800408a:	e009      	b.n	80040a0 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_UART_RxCpltCallback+0x58>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4798      	blx	r3
            }
            break;
 800409a:	e003      	b.n	80040a4 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 800409c:	bf00      	nop
 800409e:	e002      	b.n	80040a6 <HAL_UART_RxCpltCallback+0x42>
            break;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <HAL_UART_RxCpltCallback+0x42>
            break;
 80040a4:	bf00      	nop
    }

    return;
 80040a6:	bf00      	nop
}
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40008000 	.word	0x40008000
 80040b4:	40013800 	.word	0x40013800
 80040b8:	20000f70 	.word	0x20000f70
 80040bc:	20000f78 	.word	0x20000f78

080040c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a0f      	ldr	r2, [pc, #60]	; (800410c <HAL_UART_TxCpltCallback+0x4c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00a      	beq.n	80040e8 <HAL_UART_TxCpltCallback+0x28>
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <HAL_UART_TxCpltCallback+0x50>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10f      	bne.n	80040f8 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80040d8:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <HAL_UART_TxCpltCallback+0x54>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <HAL_UART_TxCpltCallback+0x54>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4798      	blx	r3
            }
            break;
 80040e6:	e009      	b.n	80040fc <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_UART_TxCpltCallback+0x58>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_UART_TxCpltCallback+0x58>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4798      	blx	r3
            }
            break;
 80040f6:	e003      	b.n	8004100 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 80040f8:	bf00      	nop
 80040fa:	e002      	b.n	8004102 <HAL_UART_TxCpltCallback+0x42>
            break;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <HAL_UART_TxCpltCallback+0x42>
            break;
 8004100:	bf00      	nop
    }

    return;
 8004102:	bf00      	nop
}
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40008000 	.word	0x40008000
 8004110:	40013800 	.word	0x40013800
 8004114:	20000f74 	.word	0x20000f74
 8004118:	20000f7c 	.word	0x20000f7c

0800411c <LL_RCC_LSE_SetDriveCapability>:
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412c:	f023 0218 	bic.w	r2, r3, #24
 8004130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_AHB1_GRP1_EnableClock>:
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4313      	orrs	r3, r2
 800415e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004164:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4013      	ands	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800416c:	68fb      	ldr	r3, [r7, #12]
}
 800416e:	bf00      	nop
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_AHB2_GRP1_EnableClock>:
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4313      	orrs	r3, r2
 8004190:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4013      	ands	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800419e:	68fb      	ldr	r3, [r7, #12]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041b0:	f006 fbb8 	bl	800a924 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80041b4:	f7fe f9b8 	bl	8002528 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041b8:	f000 f814 	bl	80041e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80041bc:	f000 f870 	bl	80042a0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80041c0:	f000 f88e 	bl	80042e0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041c4:	f000 f95d 	bl	8004482 <MX_GPIO_Init>
  MX_DMA_Init();
 80041c8:	f000 f93e 	bl	8004448 <MX_DMA_Init>
  MX_RTC_Init();
 80041cc:	f000 f908 	bl	80043e0 <MX_RTC_Init>
  MX_RNG_Init();
 80041d0:	f000 f8f0 	bl	80043b4 <MX_RNG_Init>
  MX_RF_Init();
 80041d4:	f000 f8e6 	bl	80043a4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80041d8:	f7fe f9b4 	bl	8002544 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80041dc:	f7fe fbe4 	bl	80029a8 <MX_APPE_Process>
 80041e0:	e7fc      	b.n	80041dc <main+0x30>
	...

080041e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b09a      	sub	sp, #104	; 0x68
 80041e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041ea:	f107 0320 	add.w	r3, r7, #32
 80041ee:	2248      	movs	r2, #72	; 0x48
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f010 fdb4 	bl	8014d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041f8:	1d3b      	adds	r3, r7, #4
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	611a      	str	r2, [r3, #16]
 8004206:	615a      	str	r2, [r3, #20]
 8004208:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800420a:	f008 fb1b 	bl	800c844 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800420e:	2000      	movs	r0, #0
 8004210:	f7ff ff84 	bl	800411c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004214:	4b21      	ldr	r3, [pc, #132]	; (800429c <SystemClock_Config+0xb8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <SystemClock_Config+0xb8>)
 800421e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <SystemClock_Config+0xb8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8004230:	2347      	movs	r3, #71	; 0x47
 8004232:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800423a:	2301      	movs	r3, #1
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800423e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004244:	2301      	movs	r3, #1
 8004246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004248:	2340      	movs	r3, #64	; 0x40
 800424a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800424c:	2300      	movs	r3, #0
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004250:	f107 0320 	add.w	r3, r7, #32
 8004254:	4618      	mov	r0, r3
 8004256:	f008 fe89 	bl	800cf6c <HAL_RCC_OscConfig>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004260:	f000 f91c 	bl	800449c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004264:	236f      	movs	r3, #111	; 0x6f
 8004266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8004268:	2302      	movs	r3, #2
 800426a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f009 f9e5 	bl	800d654 <HAL_RCC_ClockConfig>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8004290:	f000 f904 	bl	800449c <Error_Handler>
  }
}
 8004294:	bf00      	nop
 8004296:	3768      	adds	r7, #104	; 0x68
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	58000400 	.word	0x58000400

080042a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b094      	sub	sp, #80	; 0x50
 80042a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042a6:	463b      	mov	r3, r7
 80042a8:	2250      	movs	r2, #80	; 0x50
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f010 fd57 	bl	8014d60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80042b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042b6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80042b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80042be:	2302      	movs	r3, #2
 80042c0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80042c2:	2310      	movs	r3, #16
 80042c4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042c6:	463b      	mov	r3, r7
 80042c8:	4618      	mov	r0, r3
 80042ca:	f009 fe00 	bl	800dece <HAL_RCCEx_PeriphCLKConfig>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80042d4:	f000 f8e2 	bl	800449c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80042d8:	bf00      	nop
 80042da:	3750      	adds	r7, #80	; 0x50
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <MX_IPCC_Init+0x20>)
 80042e6:	4a07      	ldr	r2, [pc, #28]	; (8004304 <MX_IPCC_Init+0x24>)
 80042e8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80042ea:	4805      	ldr	r0, [pc, #20]	; (8004300 <MX_IPCC_Init+0x20>)
 80042ec:	f008 fa24 	bl	800c738 <HAL_IPCC_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80042f6:	f000 f8d1 	bl	800449c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000f80 	.word	0x20000f80
 8004304:	58000c00 	.word	0x58000c00

08004308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800430c:	4b22      	ldr	r3, [pc, #136]	; (8004398 <MX_USART1_UART_Init+0x90>)
 800430e:	4a23      	ldr	r2, [pc, #140]	; (800439c <MX_USART1_UART_Init+0x94>)
 8004310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8004312:	4b21      	ldr	r3, [pc, #132]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <MX_USART1_UART_Init+0x98>)
 8004316:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004318:	4b1f      	ldr	r3, [pc, #124]	; (8004398 <MX_USART1_UART_Init+0x90>)
 800431a:	2200      	movs	r2, #0
 800431c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004320:	2200      	movs	r2, #0
 8004322:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004324:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004326:	2200      	movs	r2, #0
 8004328:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <MX_USART1_UART_Init+0x90>)
 800432c:	220c      	movs	r2, #12
 800432e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004332:	2200      	movs	r2, #0
 8004334:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8004336:	4b18      	ldr	r3, [pc, #96]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004338:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800433c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800433e:	4b16      	ldr	r3, [pc, #88]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004340:	2200      	movs	r2, #0
 8004342:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004346:	2200      	movs	r2, #0
 8004348:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800434a:	4b13      	ldr	r3, [pc, #76]	; (8004398 <MX_USART1_UART_Init+0x90>)
 800434c:	2200      	movs	r2, #0
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004350:	4811      	ldr	r0, [pc, #68]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004352:	f00a fa8b 	bl	800e86c <HAL_UART_Init>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800435c:	f000 f89e 	bl	800449c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004360:	2100      	movs	r1, #0
 8004362:	480d      	ldr	r0, [pc, #52]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004364:	f00c fadd 	bl	8010922 <HAL_UARTEx_SetTxFifoThreshold>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800436e:	f000 f895 	bl	800449c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004372:	2100      	movs	r1, #0
 8004374:	4808      	ldr	r0, [pc, #32]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004376:	f00c fb12 	bl	801099e <HAL_UARTEx_SetRxFifoThreshold>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004380:	f000 f88c 	bl	800449c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004384:	4804      	ldr	r0, [pc, #16]	; (8004398 <MX_USART1_UART_Init+0x90>)
 8004386:	f00c fa93 	bl	80108b0 <HAL_UARTEx_DisableFifoMode>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004390:	f000 f884 	bl	800449c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004394:	bf00      	nop
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20001050 	.word	0x20001050
 800439c:	40013800 	.word	0x40013800
 80043a0:	000f4240 	.word	0x000f4240

080043a4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <MX_RNG_Init+0x24>)
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <MX_RNG_Init+0x28>)
 80043bc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <MX_RNG_Init+0x24>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80043c4:	4804      	ldr	r0, [pc, #16]	; (80043d8 <MX_RNG_Init+0x24>)
 80043c6:	f00a f809 	bl	800e3dc <HAL_RNG_Init>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80043d0:	f000 f864 	bl	800449c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80043d4:	bf00      	nop
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	200011a4 	.word	0x200011a4
 80043dc:	58001000 	.word	0x58001000

080043e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <MX_RTC_Init+0x60>)
 80043e6:	4a17      	ldr	r2, [pc, #92]	; (8004444 <MX_RTC_Init+0x64>)
 80043e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <MX_RTC_Init+0x60>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <MX_RTC_Init+0x60>)
 80043f2:	220f      	movs	r2, #15
 80043f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <MX_RTC_Init+0x60>)
 80043f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80043fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <MX_RTC_Init+0x60>)
 8004400:	2200      	movs	r2, #0
 8004402:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <MX_RTC_Init+0x60>)
 8004406:	2200      	movs	r2, #0
 8004408:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <MX_RTC_Init+0x60>)
 800440c:	2200      	movs	r2, #0
 800440e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <MX_RTC_Init+0x60>)
 8004412:	2200      	movs	r2, #0
 8004414:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004416:	480a      	ldr	r0, [pc, #40]	; (8004440 <MX_RTC_Init+0x60>)
 8004418:	f00a f816 	bl	800e448 <HAL_RTC_Init>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8004422:	f000 f83b 	bl	800449c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004426:	2200      	movs	r2, #0
 8004428:	2100      	movs	r1, #0
 800442a:	4805      	ldr	r0, [pc, #20]	; (8004440 <MX_RTC_Init+0x60>)
 800442c:	f00a f90c 	bl	800e648 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8004436:	f000 f831 	bl	800449c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200011b8 	.word	0x200011b8
 8004444:	40002800 	.word	0x40002800

08004448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800444c:	2004      	movs	r0, #4
 800444e:	f7ff fe7b 	bl	8004148 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004452:	2001      	movs	r0, #1
 8004454:	f7ff fe78 	bl	8004148 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004458:	2002      	movs	r0, #2
 800445a:	f7ff fe75 	bl	8004148 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 800445e:	2200      	movs	r2, #0
 8004460:	210f      	movs	r1, #15
 8004462:	200e      	movs	r0, #14
 8004464:	f006 fc37 	bl	800acd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004468:	200e      	movs	r0, #14
 800446a:	f006 fc4e 	bl	800ad0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 800446e:	2200      	movs	r2, #0
 8004470:	210f      	movs	r1, #15
 8004472:	203a      	movs	r0, #58	; 0x3a
 8004474:	f006 fc2f 	bl	800acd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8004478:	203a      	movs	r0, #58	; 0x3a
 800447a:	f006 fc46 	bl	800ad0a <HAL_NVIC_EnableIRQ>

}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}

08004482 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004486:	2004      	movs	r0, #4
 8004488:	f7ff fe77 	bl	800417a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800448c:	2001      	movs	r0, #1
 800448e:	f7ff fe74 	bl	800417a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004492:	2002      	movs	r0, #2
 8004494:	f7ff fe71 	bl	800417a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004498:	bf00      	nop
 800449a:	bd80      	pop	{r7, pc}

0800449c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_EnableRTC>:
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044c2:	bf00      	nop
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_AHB2_GRP1_EnableClock>:
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4013      	ands	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80044f0:	68fb      	ldr	r3, [r7, #12]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_AHB3_GRP1_EnableClock>:
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800450c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4313      	orrs	r3, r2
 8004514:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4013      	ands	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <LL_APB1_GRP1_EnableClock>:
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800453e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4313      	orrs	r3, r2
 8004546:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4013      	ands	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004554:	68fb      	ldr	r3, [r7, #12]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <LL_APB1_GRP2_EnableClock>:
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800456a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4313      	orrs	r3, r2
 8004578:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004586:	68fb      	ldr	r3, [r7, #12]
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_APB2_GRP1_EnableClock>:
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800459c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4013      	ands	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045b8:	68fb      	ldr	r3, [r7, #12]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80045ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80045ce:	f7ff ff96 	bl	80044fe <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2100      	movs	r1, #0
 80045d6:	202e      	movs	r0, #46	; 0x2e
 80045d8:	f006 fb7d 	bl	800acd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80045dc:	202e      	movs	r0, #46	; 0x2e
 80045de:	f006 fb94 	bl	800ad0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045e2:	bf00      	nop
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0d      	ldr	r2, [pc, #52]	; (800462c <HAL_IPCC_MspInit+0x44>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d113      	bne.n	8004622 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80045fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80045fe:	f7ff ff7e 	bl	80044fe <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8004602:	2200      	movs	r2, #0
 8004604:	2100      	movs	r1, #0
 8004606:	202c      	movs	r0, #44	; 0x2c
 8004608:	f006 fb65 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800460c:	202c      	movs	r0, #44	; 0x2c
 800460e:	f006 fb7c 	bl	800ad0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8004612:	2200      	movs	r2, #0
 8004614:	2100      	movs	r1, #0
 8004616:	202d      	movs	r0, #45	; 0x2d
 8004618:	f006 fb5d 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800461c:	202d      	movs	r0, #45	; 0x2d
 800461e:	f006 fb74 	bl	800ad0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	58000c00 	.word	0x58000c00

08004630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b0a0      	sub	sp, #128	; 0x80
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004648:	f107 030c 	add.w	r3, r7, #12
 800464c:	2250      	movs	r2, #80	; 0x50
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f010 fb85 	bl	8014d60 <memset>
  if(huart->Instance==LPUART1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a69      	ldr	r2, [pc, #420]	; (8004800 <HAL_UART_MspInit+0x1d0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d16e      	bne.n	800473e <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004660:	2302      	movs	r3, #2
 8004662:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004664:	2300      	movs	r3, #0
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004668:	f107 030c 	add.w	r3, r7, #12
 800466c:	4618      	mov	r0, r3
 800466e:	f009 fc2e 	bl	800dece <HAL_RCCEx_PeriphCLKConfig>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004678:	f7ff ff10 	bl	800449c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800467c:	2001      	movs	r0, #1
 800467e:	f7ff ff70 	bl	8004562 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004682:	2001      	movs	r0, #1
 8004684:	f7ff ff22 	bl	80044cc <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004688:	230c      	movs	r3, #12
 800468a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468c:	2302      	movs	r3, #2
 800468e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004694:	2303      	movs	r3, #3
 8004696:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004698:	2308      	movs	r3, #8
 800469a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046a0:	4619      	mov	r1, r3
 80046a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046a6:	f006 ff09 	bl	800b4bc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80046aa:	4b56      	ldr	r3, [pc, #344]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046ac:	4a56      	ldr	r2, [pc, #344]	; (8004808 <HAL_UART_MspInit+0x1d8>)
 80046ae:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80046b0:	4b54      	ldr	r3, [pc, #336]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046b2:	2211      	movs	r2, #17
 80046b4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046b6:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046b8:	2210      	movs	r2, #16
 80046ba:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046bc:	4b51      	ldr	r3, [pc, #324]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046c2:	4b50      	ldr	r3, [pc, #320]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046c8:	4b4e      	ldr	r3, [pc, #312]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046ce:	4b4d      	ldr	r3, [pc, #308]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80046d4:	4b4b      	ldr	r3, [pc, #300]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046da:	4b4a      	ldr	r3, [pc, #296]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046dc:	2200      	movs	r2, #0
 80046de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80046e0:	4848      	ldr	r0, [pc, #288]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 80046e2:	f006 fb57 	bl	800ad94 <HAL_DMA_Init>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80046ec:	f7ff fed6 	bl	800449c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80046f0:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80046f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80046f6:	2300      	movs	r3, #0
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800470a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800470e:	4619      	mov	r1, r3
 8004710:	483c      	ldr	r0, [pc, #240]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 8004712:	f006 fe71 	bl	800b3f8 <HAL_DMAEx_ConfigMuxSync>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800471c:	f7ff febe 	bl	800449c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a38      	ldr	r2, [pc, #224]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 8004724:	67da      	str	r2, [r3, #124]	; 0x7c
 8004726:	4a37      	ldr	r2, [pc, #220]	; (8004804 <HAL_UART_MspInit+0x1d4>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800472c:	2200      	movs	r2, #0
 800472e:	2100      	movs	r1, #0
 8004730:	2025      	movs	r0, #37	; 0x25
 8004732:	f006 fad0 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004736:	2025      	movs	r0, #37	; 0x25
 8004738:	f006 fae7 	bl	800ad0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800473c:	e05b      	b.n	80047f6 <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a32      	ldr	r2, [pc, #200]	; (800480c <HAL_UART_MspInit+0x1dc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d156      	bne.n	80047f6 <HAL_UART_MspInit+0x1c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004748:	2301      	movs	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004750:	f107 030c 	add.w	r3, r7, #12
 8004754:	4618      	mov	r0, r3
 8004756:	f009 fbba 	bl	800dece <HAL_RCCEx_PeriphCLKConfig>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8004760:	f7ff fe9c 	bl	800449c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004764:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004768:	f7ff ff14 	bl	8004594 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800476c:	2002      	movs	r0, #2
 800476e:	f7ff fead 	bl	80044cc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004772:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004776:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004778:	2302      	movs	r3, #2
 800477a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800477c:	2301      	movs	r3, #1
 800477e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004780:	2303      	movs	r3, #3
 8004782:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004784:	2307      	movs	r3, #7
 8004786:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800478c:	4619      	mov	r1, r3
 800478e:	4820      	ldr	r0, [pc, #128]	; (8004810 <HAL_UART_MspInit+0x1e0>)
 8004790:	f006 fe94 	bl	800b4bc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8004794:	4b1f      	ldr	r3, [pc, #124]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 8004796:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_UART_MspInit+0x1e8>)
 8004798:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800479a:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 800479c:	220f      	movs	r2, #15
 800479e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047a0:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047a2:	2210      	movs	r2, #16
 80047a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047a6:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047ae:	2280      	movs	r2, #128	; 0x80
 80047b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047b2:	4b18      	ldr	r3, [pc, #96]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047b8:	4b16      	ldr	r3, [pc, #88]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80047be:	4b15      	ldr	r3, [pc, #84]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80047ca:	4812      	ldr	r0, [pc, #72]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047cc:	f006 fae2 	bl	800ad94 <HAL_DMA_Init>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 80047d6:	f7ff fe61 	bl	800449c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047de:	67da      	str	r2, [r3, #124]	; 0x7c
 80047e0:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <HAL_UART_MspInit+0x1e4>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80047e6:	2200      	movs	r2, #0
 80047e8:	2100      	movs	r1, #0
 80047ea:	2024      	movs	r0, #36	; 0x24
 80047ec:	f006 fa73 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047f0:	2024      	movs	r0, #36	; 0x24
 80047f2:	f006 fa8a 	bl	800ad0a <HAL_NVIC_EnableIRQ>
}
 80047f6:	bf00      	nop
 80047f8:	3780      	adds	r7, #128	; 0x80
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40008000 	.word	0x40008000
 8004804:	200010e4 	.word	0x200010e4
 8004808:	40020044 	.word	0x40020044
 800480c:	40013800 	.word	0x40013800
 8004810:	48000400 	.word	0x48000400
 8004814:	20001144 	.word	0x20001144
 8004818:	40020444 	.word	0x40020444

0800481c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b096      	sub	sp, #88	; 0x58
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004824:	f107 0308 	add.w	r3, r7, #8
 8004828:	2250      	movs	r2, #80	; 0x50
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f010 fa97 	bl	8014d60 <memset>
  if(hrng->Instance==RNG)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a0d      	ldr	r2, [pc, #52]	; (800486c <HAL_RNG_MspInit+0x50>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d113      	bne.n	8004864 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800483c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004840:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004842:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004846:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004848:	f107 0308 	add.w	r3, r7, #8
 800484c:	4618      	mov	r0, r3
 800484e:	f009 fb3e 	bl	800dece <HAL_RCCEx_PeriphCLKConfig>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8004858:	f7ff fe20 	bl	800449c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800485c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004860:	f7ff fe4d 	bl	80044fe <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004864:	bf00      	nop
 8004866:	3758      	adds	r7, #88	; 0x58
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	58001000 	.word	0x58001000

08004870 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b096      	sub	sp, #88	; 0x58
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004878:	f107 0308 	add.w	r3, r7, #8
 800487c:	2250      	movs	r2, #80	; 0x50
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f010 fa6d 	bl	8014d60 <memset>
  if(hrtc->Instance==RTC)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a14      	ldr	r2, [pc, #80]	; (80048dc <HAL_RTC_MspInit+0x6c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d120      	bne.n	80048d2 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004894:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	4618      	mov	r0, r3
 80048a2:	f009 fb14 	bl	800dece <HAL_RCCEx_PeriphCLKConfig>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80048ac:	f7ff fdf6 	bl	800449c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80048b0:	f7ff fdfb 	bl	80044aa <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80048b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80048b8:	f7ff fe3a 	bl	8004530 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80048bc:	2200      	movs	r2, #0
 80048be:	2100      	movs	r1, #0
 80048c0:	2003      	movs	r0, #3
 80048c2:	f006 fa08 	bl	800acd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80048c6:	2003      	movs	r0, #3
 80048c8:	f006 fa1f 	bl	800ad0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f009 ff77 	bl	800e7c0 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80048d2:	bf00      	nop
 80048d4:	3758      	adds	r7, #88	; 0x58
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40002800 	.word	0x40002800

080048e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ee:	b480      	push	{r7}
 80048f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048f2:	e7fe      	b.n	80048f2 <HardFault_Handler+0x4>

080048f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048f8:	e7fe      	b.n	80048f8 <MemManage_Handler+0x4>

080048fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048fa:	b480      	push	{r7}
 80048fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048fe:	e7fe      	b.n	80048fe <BusFault_Handler+0x4>

08004900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004904:	e7fe      	b.n	8004904 <UsageFault_Handler+0x4>

08004906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004906:	b480      	push	{r7}
 8004908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004934:	f006 f850 	bl	800a9d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	bd80      	pop	{r7, pc}

0800493c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004940:	f7fe ffc4 	bl	80038cc <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}

08004948 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800494c:	4802      	ldr	r0, [pc, #8]	; (8004958 <DMA1_Channel4_IRQHandler+0x10>)
 800494e:	f006 fc02 	bl	800b156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200010e4 	.word	0x200010e4

0800495c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004960:	4802      	ldr	r0, [pc, #8]	; (800496c <USART1_IRQHandler+0x10>)
 8004962:	f00a f89f 	bl	800eaa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20001050 	.word	0x20001050

08004970 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004974:	4802      	ldr	r0, [pc, #8]	; (8004980 <LPUART1_IRQHandler+0x10>)
 8004976:	f00a f895 	bl	800eaa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000fbc 	.word	0x20000fbc

08004984 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8004988:	f002 f80e 	bl	80069a8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800498c:	bf00      	nop
 800498e:	bd80      	pop	{r7, pc}

08004990 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004994:	f002 f83e 	bl	8006a14 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8004998:	bf00      	nop
 800499a:	bd80      	pop	{r7, pc}

0800499c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80049a0:	f007 f83c 	bl	800ba1c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <DMA2_Channel4_IRQHandler+0x10>)
 80049ae:	f006 fbd2 	bl	800b156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20001144 	.word	0x20001144

080049bc <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80049c0:	2010      	movs	r0, #16
 80049c2:	f007 f813 	bl	800b9ec <HAL_GPIO_EXTI_IRQHandler>
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}

080049ca <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80049ce:	2001      	movs	r0, #1
 80049d0:	f007 f80c 	bl	800b9ec <HAL_GPIO_EXTI_IRQHandler>
}
 80049d4:	bf00      	nop
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80049dc:	2002      	movs	r0, #2
 80049de:	f007 f805 	bl	800b9ec <HAL_GPIO_EXTI_IRQHandler>
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <LL_AHB2_GRP1_EnableClock>:
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80049ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80049fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4013      	ands	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	bf00      	nop
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_APB1_GRP1_EnableClock>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_APB1_GRP1_DisableClock>:
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8004a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a60:	4013      	ands	r3, r2
 8004a62:	658b      	str	r3, [r1, #88]	; 0x58
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <LL_SYSCFG_EnableFastModePlus>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	4904      	ldr	r1, [pc, #16]	; (8004a90 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40010000 	.word	0x40010000

08004a94 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8004a9e:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <BSP_I2C1_Init+0x70>)
 8004aa0:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <BSP_I2C1_Init+0x74>)
 8004aa2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8004aa4:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <BSP_I2C1_Init+0x78>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	4918      	ldr	r1, [pc, #96]	; (8004b0c <BSP_I2C1_Init+0x78>)
 8004aac:	600a      	str	r2, [r1, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d122      	bne.n	8004af8 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8004ab2:	4814      	ldr	r0, [pc, #80]	; (8004b04 <BSP_I2C1_Init+0x70>)
 8004ab4:	f007 fad6 	bl	800c064 <HAL_I2C_GetState>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11c      	bne.n	8004af8 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8004abe:	4811      	ldr	r0, [pc, #68]	; (8004b04 <BSP_I2C1_Init+0x70>)
 8004ac0:	f000 f962 	bl	8004d88 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d116      	bne.n	8004af8 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8004aca:	480e      	ldr	r0, [pc, #56]	; (8004b04 <BSP_I2C1_Init+0x70>)
 8004acc:	f000 f918 	bl	8004d00 <MX_I2C1_Init>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004ad6:	f06f 0307 	mvn.w	r3, #7
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	e00c      	b.n	8004af8 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4808      	ldr	r0, [pc, #32]	; (8004b04 <BSP_I2C1_Init+0x70>)
 8004ae2:	f007 fd91 	bl	800c608 <HAL_I2CEx_ConfigAnalogFilter>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004aec:	f06f 0307 	mvn.w	r3, #7
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	e001      	b.n	8004af8 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8004af8:	687b      	ldr	r3, [r7, #4]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200011dc 	.word	0x200011dc
 8004b08:	40005400 	.word	0x40005400
 8004b0c:	20001230 	.word	0x20001230

08004b10 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <BSP_I2C1_DeInit+0x48>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d014      	beq.n	8004b4c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <BSP_I2C1_DeInit+0x48>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	4a0b      	ldr	r2, [pc, #44]	; (8004b58 <BSP_I2C1_DeInit+0x48>)
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <BSP_I2C1_DeInit+0x48>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8004b34:	4809      	ldr	r0, [pc, #36]	; (8004b5c <BSP_I2C1_DeInit+0x4c>)
 8004b36:	f000 f971 	bl	8004e1c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8004b3a:	4808      	ldr	r0, [pc, #32]	; (8004b5c <BSP_I2C1_DeInit+0x4c>)
 8004b3c:	f007 f821 	bl	800bb82 <HAL_I2C_DeInit>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004b46:	f06f 0307 	mvn.w	r3, #7
 8004b4a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8004b4c:	687b      	ldr	r3, [r7, #4]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20001230 	.word	0x20001230
 8004b5c:	200011dc 	.word	0x200011dc

08004b60 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af04      	add	r7, sp, #16
 8004b66:	60ba      	str	r2, [r7, #8]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	81fb      	strh	r3, [r7, #14]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	81bb      	strh	r3, [r7, #12]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004b7a:	89ba      	ldrh	r2, [r7, #12]
 8004b7c:	89f9      	ldrh	r1, [r7, #14]
 8004b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	480c      	ldr	r0, [pc, #48]	; (8004bc0 <BSP_I2C1_WriteReg+0x60>)
 8004b90:	f007 f83a 	bl	800bc08 <HAL_I2C_Mem_Write>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8004b9a:	4809      	ldr	r0, [pc, #36]	; (8004bc0 <BSP_I2C1_WriteReg+0x60>)
 8004b9c:	f007 fa70 	bl	800c080 <HAL_I2C_GetError>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d103      	bne.n	8004bae <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004ba6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e002      	b.n	8004bb4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004bae:	f06f 0303 	mvn.w	r3, #3
 8004bb2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004bb4:	697b      	ldr	r3, [r7, #20]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200011dc 	.word	0x200011dc

08004bc4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08a      	sub	sp, #40	; 0x28
 8004bc8:	af04      	add	r7, sp, #16
 8004bca:	60ba      	str	r2, [r7, #8]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	81fb      	strh	r3, [r7, #14]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	81bb      	strh	r3, [r7, #12]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004bde:	89ba      	ldrh	r2, [r7, #12]
 8004be0:	89f9      	ldrh	r1, [r7, #14]
 8004be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004be6:	9302      	str	r3, [sp, #8]
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	480c      	ldr	r0, [pc, #48]	; (8004c24 <BSP_I2C1_ReadReg+0x60>)
 8004bf4:	f007 f91c 	bl	800be30 <HAL_I2C_Mem_Read>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8004bfe:	4809      	ldr	r0, [pc, #36]	; (8004c24 <BSP_I2C1_ReadReg+0x60>)
 8004c00:	f007 fa3e 	bl	800c080 <HAL_I2C_GetError>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d103      	bne.n	8004c12 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004c0a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e002      	b.n	8004c18 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004c12:	f06f 0303 	mvn.w	r3, #3
 8004c16:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004c18:	697b      	ldr	r3, [r7, #20]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200011dc 	.word	0x200011dc

08004c28 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af04      	add	r7, sp, #16
 8004c2e:	60ba      	str	r2, [r7, #8]
 8004c30:	461a      	mov	r2, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	81fb      	strh	r3, [r7, #14]
 8004c36:	460b      	mov	r3, r1
 8004c38:	81bb      	strh	r3, [r7, #12]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004c42:	89ba      	ldrh	r2, [r7, #12]
 8004c44:	89f9      	ldrh	r1, [r7, #14]
 8004c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c4a:	9302      	str	r3, [sp, #8]
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2302      	movs	r3, #2
 8004c56:	480c      	ldr	r0, [pc, #48]	; (8004c88 <BSP_I2C1_WriteReg16+0x60>)
 8004c58:	f006 ffd6 	bl	800bc08 <HAL_I2C_Mem_Write>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8004c62:	4809      	ldr	r0, [pc, #36]	; (8004c88 <BSP_I2C1_WriteReg16+0x60>)
 8004c64:	f007 fa0c 	bl	800c080 <HAL_I2C_GetError>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d103      	bne.n	8004c76 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004c6e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	e002      	b.n	8004c7c <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004c76:	f06f 0303 	mvn.w	r3, #3
 8004c7a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004c7c:	697b      	ldr	r3, [r7, #20]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200011dc 	.word	0x200011dc

08004c8c <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af04      	add	r7, sp, #16
 8004c92:	60ba      	str	r2, [r7, #8]
 8004c94:	461a      	mov	r2, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	81fb      	strh	r3, [r7, #14]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	81bb      	strh	r3, [r7, #12]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004ca6:	89ba      	ldrh	r2, [r7, #12]
 8004ca8:	89f9      	ldrh	r1, [r7, #14]
 8004caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cae:	9302      	str	r3, [sp, #8]
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	2302      	movs	r3, #2
 8004cba:	480c      	ldr	r0, [pc, #48]	; (8004cec <BSP_I2C1_ReadReg16+0x60>)
 8004cbc:	f007 f8b8 	bl	800be30 <HAL_I2C_Mem_Read>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8004cc6:	4809      	ldr	r0, [pc, #36]	; (8004cec <BSP_I2C1_ReadReg16+0x60>)
 8004cc8:	f007 f9da 	bl	800c080 <HAL_I2C_GetError>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d003      	beq.n	8004cda <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004cd2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e002      	b.n	8004ce0 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004cda:	f06f 0303 	mvn.w	r3, #3
 8004cde:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004ce0:	697b      	ldr	r3, [r7, #20]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200011dc 	.word	0x200011dc

08004cf0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004cf4:	f005 fe84 	bl	800aa00 <HAL_GetTick>
 8004cf8:	4603      	mov	r3, r0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <MX_I2C1_Init+0x80>)
 8004d10:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00100413;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a1b      	ldr	r2, [pc, #108]	; (8004d84 <MX_I2C1_Init+0x84>)
 8004d16:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f006 fe8e 	bl	800ba64 <HAL_I2C_Init>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004d52:	2100      	movs	r1, #0
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f007 fc57 	bl	800c608 <HAL_I2CEx_ConfigAnalogFilter>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8004d64:	2100      	movs	r1, #0
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f007 fc99 	bl	800c69e <HAL_I2CEx_ConfigDigitalFilter>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40005400 	.word	0x40005400
 8004d84:	00100413 	.word	0x00100413

08004d88 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b09c      	sub	sp, #112	; 0x70
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d90:	f107 030c 	add.w	r3, r7, #12
 8004d94:	2250      	movs	r2, #80	; 0x50
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f00f ffe1 	bl	8014d60 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004d9e:	2304      	movs	r3, #4
 8004da0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004da2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004da8:	f107 030c 	add.w	r3, r7, #12
 8004dac:	4618      	mov	r0, r3
 8004dae:	f009 f88e 	bl	800dece <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db2:	2002      	movs	r0, #2
 8004db4:	f7ff fe17 	bl	80049e6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8004db8:	2340      	movs	r3, #64	; 0x40
 8004dba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dbc:	2312      	movs	r3, #18
 8004dbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8004dc8:	2304      	movs	r3, #4
 8004dca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004dcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4811      	ldr	r0, [pc, #68]	; (8004e18 <I2C1_MspInit+0x90>)
 8004dd4:	f006 fb72 	bl	800b4bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ddc:	2312      	movs	r3, #18
 8004dde:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de4:	2303      	movs	r3, #3
 8004de6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8004de8:	2304      	movs	r3, #4
 8004dea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004dec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004df0:	4619      	mov	r1, r3
 8004df2:	4809      	ldr	r0, [pc, #36]	; (8004e18 <I2C1_MspInit+0x90>)
 8004df4:	f006 fb62 	bl	800b4bc <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8004df8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004dfc:	f7ff fe38 	bl	8004a70 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8004e00:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004e04:	f7ff fe34 	bl	8004a70 <LL_SYSCFG_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e08:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004e0c:	f7ff fe04 	bl	8004a18 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8004e10:	bf00      	nop
 8004e12:	3770      	adds	r7, #112	; 0x70
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	48000400 	.word	0x48000400

08004e1c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004e24:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004e28:	f7ff fe0f 	bl	8004a4a <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8004e2c:	2140      	movs	r1, #64	; 0x40
 8004e2e:	4805      	ldr	r0, [pc, #20]	; (8004e44 <I2C1_MspDeInit+0x28>)
 8004e30:	f006 fcb4 	bl	800b79c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8004e34:	2180      	movs	r1, #128	; 0x80
 8004e36:	4803      	ldr	r0, [pc, #12]	; (8004e44 <I2C1_MspDeInit+0x28>)
 8004e38:	f006 fcb0 	bl	800b79c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	48000400 	.word	0x48000400

08004e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  return 1;
 8004e4c:	2301      	movs	r3, #1
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <_kill>:

int _kill(int pid, int sig)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e62:	f00f ffcf 	bl	8014e04 <__errno>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2216      	movs	r2, #22
 8004e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8004e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <_exit>:

void _exit (int status)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e80:	f04f 31ff 	mov.w	r1, #4294967295
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ffe7 	bl	8004e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e8a:	e7fe      	b.n	8004e8a <_exit+0x12>

08004e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	e00a      	b.n	8004eb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e9e:	f3af 8000 	nop.w
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	60ba      	str	r2, [r7, #8]
 8004eaa:	b2ca      	uxtb	r2, r1
 8004eac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	dbf0      	blt.n	8004e9e <_read+0x12>
  }

  return len;
 8004ebc:	687b      	ldr	r3, [r7, #4]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eee:	605a      	str	r2, [r3, #4]
  return 0;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <_isatty>:

int _isatty(int file)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f06:	2301      	movs	r3, #1
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f38:	4a14      	ldr	r2, [pc, #80]	; (8004f8c <_sbrk+0x5c>)
 8004f3a:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <_sbrk+0x60>)
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f44:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <_sbrk+0x64>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f4c:	4b11      	ldr	r3, [pc, #68]	; (8004f94 <_sbrk+0x64>)
 8004f4e:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <_sbrk+0x68>)
 8004f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <_sbrk+0x64>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d207      	bcs.n	8004f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f60:	f00f ff50 	bl	8014e04 <__errno>
 8004f64:	4603      	mov	r3, r0
 8004f66:	220c      	movs	r2, #12
 8004f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	e009      	b.n	8004f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f70:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <_sbrk+0x64>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <_sbrk+0x64>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	4a05      	ldr	r2, [pc, #20]	; (8004f94 <_sbrk+0x64>)
 8004f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f82:	68fb      	ldr	r3, [r7, #12]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20030000 	.word	0x20030000
 8004f90:	00001000 	.word	0x00001000
 8004f94:	20001234 	.word	0x20001234
 8004f98:	20003758 	.word	0x20003758

08004f9c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <LL_FLASH_GetUDN+0x14>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	1fff7580 	.word	0x1fff7580

08004fb4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8004fb8:	4b03      	ldr	r3, [pc, #12]	; (8004fc8 <LL_FLASH_GetDeviceID+0x14>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	1fff7584 	.word	0x1fff7584

08004fcc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8004fd0:	4b03      	ldr	r3, [pc, #12]	; (8004fe0 <LL_FLASH_GetSTCompanyID+0x14>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	0a1b      	lsrs	r3, r3, #8
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	1fff7584 	.word	0x1fff7584

08004fe4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8004fe4:	b5b0      	push	{r4, r5, r7, lr}
 8004fe6:	b090      	sub	sp, #64	; 0x40
 8004fe8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8004fea:	2392      	movs	r3, #146	; 0x92
 8004fec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8004ff0:	4b3f      	ldr	r3, [pc, #252]	; (80050f0 <APP_BLE_Init+0x10c>)
 8004ff2:	1d3c      	adds	r4, r7, #4
 8004ff4:	461d      	mov	r5, r3
 8004ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005002:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005006:	c403      	stmia	r4!, {r0, r1}
 8005008:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800500a:	f000 fb0b 	bl	8005624 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800500e:	2101      	movs	r1, #1
 8005010:	2002      	movs	r0, #2
 8005012:	f00e fdc1 	bl	8013b98 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8005016:	4a37      	ldr	r2, [pc, #220]	; (80050f4 <APP_BLE_Init+0x110>)
 8005018:	2100      	movs	r1, #0
 800501a:	2004      	movs	r0, #4
 800501c:	f00e fee8 	bl	8013df0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8005020:	1d3b      	adds	r3, r7, #4
 8005022:	4618      	mov	r0, r3
 8005024:	f00d fb58 	bl	80126d8 <SHCI_C2_BLE_Init>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800502e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8005036:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800503a:	4619      	mov	r1, r3
 800503c:	482e      	ldr	r0, [pc, #184]	; (80050f8 <APP_BLE_Init+0x114>)
 800503e:	f00f fd41 	bl	8014ac4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8005042:	f7ff fa2b 	bl	800449c <Error_Handler>
 8005046:	e002      	b.n	800504e <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8005048:	482c      	ldr	r0, [pc, #176]	; (80050fc <APP_BLE_Init+0x118>)
 800504a:	f00f fd3b 	bl	8014ac4 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800504e:	f000 faff 	bl	8005650 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8005052:	f00e faa1 	bl	8013598 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005056:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <APP_BLE_Init+0x11c>)
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800505e:	4b28      	ldr	r3, [pc, #160]	; (8005100 <APP_BLE_Init+0x11c>)
 8005060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005064:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8005066:	4a27      	ldr	r2, [pc, #156]	; (8005104 <APP_BLE_Init+0x120>)
 8005068:	2100      	movs	r1, #0
 800506a:	2001      	movs	r0, #1
 800506c:	f00e fec0 	bl	8013df0 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8005070:	4a25      	ldr	r2, [pc, #148]	; (8005108 <APP_BLE_Init+0x124>)
 8005072:	2100      	movs	r1, #0
 8005074:	2002      	movs	r0, #2
 8005076:	f00e febb 	bl	8013df0 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800507a:	2006      	movs	r0, #6
 800507c:	f00c fd4f 	bl	8011b1e <aci_hal_set_radio_activity_mask>
 8005080:	4603      	mov	r3, r0
 8005082:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8005086:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800508a:	2b00      	cmp	r3, #0
 800508c:	d006      	beq.n	800509c <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800508e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005092:	4619      	mov	r1, r3
 8005094:	481d      	ldr	r0, [pc, #116]	; (800510c <APP_BLE_Init+0x128>)
 8005096:	f00f fd15 	bl	8014ac4 <iprintf>
 800509a:	e002      	b.n	80050a2 <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800509c:	481c      	ldr	r0, [pc, #112]	; (8005110 <APP_BLE_Init+0x12c>)
 800509e:	f00f fd11 	bl	8014ac4 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 80050a2:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <APP_BLE_Init+0x130>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <APP_BLE_Init+0x134>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 80050ae:	f000 ff23 	bl	8005ef8 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80050b2:	4b1a      	ldr	r3, [pc, #104]	; (800511c <APP_BLE_Init+0x138>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	491a      	ldr	r1, [pc, #104]	; (8005120 <APP_BLE_Init+0x13c>)
 80050b8:	2000      	movs	r0, #0
 80050ba:	f7fe fda9 	bl	8003c10 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80050be:	4b19      	ldr	r3, [pc, #100]	; (8005124 <APP_BLE_Init+0x140>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	4919      	ldr	r1, [pc, #100]	; (8005128 <APP_BLE_Init+0x144>)
 80050c4:	2000      	movs	r0, #0
 80050c6:	f7fe fda3 	bl	8003c10 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80050ca:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <APP_BLE_Init+0x11c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <APP_BLE_Init+0x11c>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <APP_BLE_Init+0x148>)
 80050d8:	2280      	movs	r2, #128	; 0x80
 80050da:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80050dc:	4b14      	ldr	r3, [pc, #80]	; (8005130 <APP_BLE_Init+0x14c>)
 80050de:	22a0      	movs	r2, #160	; 0xa0
 80050e0:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80050e2:	2001      	movs	r0, #1
 80050e4:	f000 fc64 	bl	80059b0 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80050e8:	bf00      	nop
}
 80050ea:	3740      	adds	r7, #64	; 0x40
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bdb0      	pop	{r4, r5, r7, pc}
 80050f0:	080174cc 	.word	0x080174cc
 80050f4:	080120e9 	.word	0x080120e9
 80050f8:	080173f0 	.word	0x080173f0
 80050fc:	08017428 	.word	0x08017428
 8005100:	20001240 	.word	0x20001240
 8005104:	08005b91 	.word	0x08005b91
 8005108:	08005cd1 	.word	0x08005cd1
 800510c:	08017450 	.word	0x08017450
 8005110:	08017494 	.word	0x08017494
 8005114:	200012cc 	.word	0x200012cc
 8005118:	200012cd 	.word	0x200012cd
 800511c:	08005be9 	.word	0x08005be9
 8005120:	200012c1 	.word	0x200012c1
 8005124:	08005bf9 	.word	0x08005bf9
 8005128:	200012c2 	.word	0x200012c2
 800512c:	200012c4 	.word	0x200012c4
 8005130:	200012c6 	.word	0x200012c6

08005134 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8005134:	b5b0      	push	{r4, r5, r7, lr}
 8005136:	b090      	sub	sp, #64	; 0x40
 8005138:	af04      	add	r7, sp, #16
 800513a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800513c:	2392      	movs	r3, #146	; 0x92
 800513e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3301      	adds	r3, #1
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2bff      	cmp	r3, #255	; 0xff
 800514e:	f000 8120 	beq.w	8005392 <SVCCTL_App_Notification+0x25e>
 8005152:	2bff      	cmp	r3, #255	; 0xff
 8005154:	f300 821f 	bgt.w	8005596 <SVCCTL_App_Notification+0x462>
 8005158:	2b05      	cmp	r3, #5
 800515a:	d002      	beq.n	8005162 <SVCCTL_App_Notification+0x2e>
 800515c:	2b3e      	cmp	r3, #62	; 0x3e
 800515e:	d02e      	beq.n	80051be <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8005160:	e219      	b.n	8005596 <SVCCTL_App_Notification+0x462>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	3302      	adds	r3, #2
 8005166:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800516e:	b29a      	uxth	r2, r3
 8005170:	4bb3      	ldr	r3, [pc, #716]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 8005172:	8adb      	ldrh	r3, [r3, #22]
 8005174:	429a      	cmp	r2, r3
 8005176:	d114      	bne.n	80051a2 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8005178:	4bb1      	ldr	r3, [pc, #708]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 800517a:	2200      	movs	r2, #0
 800517c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800517e:	4bb0      	ldr	r3, [pc, #704]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8005186:	48af      	ldr	r0, [pc, #700]	; (8005444 <SVCCTL_App_Notification+0x310>)
 8005188:	f00f fd0a 	bl	8014ba0 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005192:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8005194:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800519a:	461a      	mov	r2, r3
 800519c:	48aa      	ldr	r0, [pc, #680]	; (8005448 <SVCCTL_App_Notification+0x314>)
 800519e:	f00f fc91 	bl	8014ac4 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 80051a2:	2001      	movs	r0, #1
 80051a4:	f000 fc04 	bl	80059b0 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80051a8:	4ba8      	ldr	r3, [pc, #672]	; (800544c <SVCCTL_App_Notification+0x318>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80051ae:	4ba4      	ldr	r3, [pc, #656]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 80051b0:	8ada      	ldrh	r2, [r3, #22]
 80051b2:	4ba6      	ldr	r3, [pc, #664]	; (800544c <SVCCTL_App_Notification+0x318>)
 80051b4:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 80051b6:	48a5      	ldr	r0, [pc, #660]	; (800544c <SVCCTL_App_Notification+0x318>)
 80051b8:	f000 fe8a 	bl	8005ed0 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80051bc:	e1ee      	b.n	800559c <SVCCTL_App_Notification+0x468>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	3302      	adds	r3, #2
 80051c2:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b0c      	cmp	r3, #12
 80051ca:	d033      	beq.n	8005234 <SVCCTL_App_Notification+0x100>
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	f300 80de 	bgt.w	800538e <SVCCTL_App_Notification+0x25a>
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d06c      	beq.n	80052b0 <SVCCTL_App_Notification+0x17c>
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	f040 80d9 	bne.w	800538e <SVCCTL_App_Notification+0x25a>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	3301      	adds	r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80051e2:	489b      	ldr	r0, [pc, #620]	; (8005450 <SVCCTL_App_Notification+0x31c>)
 80051e4:	f00f fcdc 	bl	8014ba0 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80051ee:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fb f97f 	bl	80004f4 <__aeabi_i2d>
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	4b96      	ldr	r3, [pc, #600]	; (8005454 <SVCCTL_App_Notification+0x320>)
 80051fc:	f7fb f9e4 	bl	80005c8 <__aeabi_dmul>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800520e:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8005210:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8005218:	b29b      	uxth	r3, r3
 800521a:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	9400      	str	r4, [sp, #0]
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	488a      	ldr	r0, [pc, #552]	; (8005458 <SVCCTL_App_Notification+0x324>)
 800522e:	f00f fc49 	bl	8014ac4 <iprintf>
          break;
 8005232:	e0ad      	b.n	8005390 <SVCCTL_App_Notification+0x25c>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	3301      	adds	r3, #1
 8005238:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800523a:	4888      	ldr	r0, [pc, #544]	; (800545c <SVCCTL_App_Notification+0x328>)
 800523c:	f00f fc42 	bl	8014ac4 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d103      	bne.n	8005250 <SVCCTL_App_Notification+0x11c>
            APP_DBG_MSG("status ok \n");
 8005248:	4885      	ldr	r0, [pc, #532]	; (8005460 <SVCCTL_App_Notification+0x32c>)
 800524a:	f00f fca9 	bl	8014ba0 <puts>
 800524e:	e002      	b.n	8005256 <SVCCTL_App_Notification+0x122>
            APP_DBG_MSG("status nok \n");
 8005250:	4884      	ldr	r0, [pc, #528]	; (8005464 <SVCCTL_App_Notification+0x330>)
 8005252:	f00f fca5 	bl	8014ba0 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8005256:	4b7a      	ldr	r3, [pc, #488]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 8005258:	8adb      	ldrh	r3, [r3, #22]
 800525a:	f107 020a 	add.w	r2, r7, #10
 800525e:	f107 010b 	add.w	r1, r7, #11
 8005262:	4618      	mov	r0, r3
 8005264:	f00c fcd3 	bl	8011c0e <hci_le_read_phy>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800526e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <SVCCTL_App_Notification+0x14a>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 8005276:	487c      	ldr	r0, [pc, #496]	; (8005468 <SVCCTL_App_Notification+0x334>)
 8005278:	f00f fc24 	bl	8014ac4 <iprintf>
          break;
 800527c:	e088      	b.n	8005390 <SVCCTL_App_Notification+0x25c>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800527e:	487b      	ldr	r0, [pc, #492]	; (800546c <SVCCTL_App_Notification+0x338>)
 8005280:	f00f fc8e 	bl	8014ba0 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d10a      	bne.n	80052a0 <SVCCTL_App_Notification+0x16c>
 800528a:	7abb      	ldrb	r3, [r7, #10]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d107      	bne.n	80052a0 <SVCCTL_App_Notification+0x16c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8005290:	7afb      	ldrb	r3, [r7, #11]
 8005292:	4619      	mov	r1, r3
 8005294:	7abb      	ldrb	r3, [r7, #10]
 8005296:	461a      	mov	r2, r3
 8005298:	4875      	ldr	r0, [pc, #468]	; (8005470 <SVCCTL_App_Notification+0x33c>)
 800529a:	f00f fc13 	bl	8014ac4 <iprintf>
          break;
 800529e:	e077      	b.n	8005390 <SVCCTL_App_Notification+0x25c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 80052a0:	7afb      	ldrb	r3, [r7, #11]
 80052a2:	4619      	mov	r1, r3
 80052a4:	7abb      	ldrb	r3, [r7, #10]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4871      	ldr	r0, [pc, #452]	; (8005470 <SVCCTL_App_Notification+0x33c>)
 80052aa:	f00f fc0b 	bl	8014ac4 <iprintf>
          break;
 80052ae:	e06f      	b.n	8005390 <SVCCTL_App_Notification+0x25c>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3301      	adds	r3, #1
 80052b4:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80052b6:	4b62      	ldr	r3, [pc, #392]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 80052b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fd21 	bl	8003d04 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	4619      	mov	r1, r3
 80052cc:	4869      	ldr	r0, [pc, #420]	; (8005474 <SVCCTL_App_Notification+0x340>)
 80052ce:	f00f fbf9 	bl	8014ac4 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80052d6:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80052dc:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80052e2:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80052e8:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80052ee:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80052f4:	9302      	str	r3, [sp, #8]
 80052f6:	9101      	str	r1, [sp, #4]
 80052f8:	9200      	str	r2, [sp, #0]
 80052fa:	462b      	mov	r3, r5
 80052fc:	4622      	mov	r2, r4
 80052fe:	4601      	mov	r1, r0
 8005300:	485d      	ldr	r0, [pc, #372]	; (8005478 <SVCCTL_App_Notification+0x344>)
 8005302:	f00f fbdf 	bl	8014ac4 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800530c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800530e:	4618      	mov	r0, r3
 8005310:	f7fb f8f0 	bl	80004f4 <__aeabi_i2d>
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	4b4e      	ldr	r3, [pc, #312]	; (8005454 <SVCCTL_App_Notification+0x320>)
 800531a:	f7fb f955 	bl	80005c8 <__aeabi_dmul>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800532c:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800532e:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8005336:	b29b      	uxth	r3, r3
 8005338:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	9400      	str	r4, [sp, #0]
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4843      	ldr	r0, [pc, #268]	; (8005458 <SVCCTL_App_Notification+0x324>)
 800534c:	f00f fbba 	bl	8014ac4 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8005350:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 8005352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005356:	2b04      	cmp	r3, #4
 8005358:	d104      	bne.n	8005364 <SVCCTL_App_Notification+0x230>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800535a:	4b39      	ldr	r3, [pc, #228]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 800535c:	2206      	movs	r2, #6
 800535e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8005362:	e003      	b.n	800536c <SVCCTL_App_Notification+0x238>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8005364:	4b36      	ldr	r3, [pc, #216]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 8005366:	2205      	movs	r2, #5
 8005368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005372:	b29a      	uxth	r2, r3
 8005374:	4b32      	ldr	r3, [pc, #200]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 8005376:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8005378:	4b34      	ldr	r3, [pc, #208]	; (800544c <SVCCTL_App_Notification+0x318>)
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 8005380:	8ada      	ldrh	r2, [r3, #22]
 8005382:	4b32      	ldr	r3, [pc, #200]	; (800544c <SVCCTL_App_Notification+0x318>)
 8005384:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8005386:	4831      	ldr	r0, [pc, #196]	; (800544c <SVCCTL_App_Notification+0x318>)
 8005388:	f000 fda2 	bl	8005ed0 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800538c:	e000      	b.n	8005390 <SVCCTL_App_Notification+0x25c>
          break;
 800538e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8005390:	e104      	b.n	800559c <SVCCTL_App_Notification+0x468>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	3302      	adds	r3, #2
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a2:	f000 80e7 	beq.w	8005574 <SVCCTL_App_Notification+0x440>
 80053a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053aa:	f300 80f6 	bgt.w	800559a <SVCCTL_App_Notification+0x466>
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	f000 80e8 	beq.w	8005584 <SVCCTL_App_Notification+0x450>
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	f2c0 80f0 	blt.w	800559a <SVCCTL_App_Notification+0x466>
 80053ba:	f240 420a 	movw	r2, #1034	; 0x40a
 80053be:	4293      	cmp	r3, r2
 80053c0:	f300 80eb 	bgt.w	800559a <SVCCTL_App_Notification+0x466>
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	f2c0 80e7 	blt.w	800559a <SVCCTL_App_Notification+0x466>
 80053cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80053d0:	2b0a      	cmp	r3, #10
 80053d2:	f200 80e2 	bhi.w	800559a <SVCCTL_App_Notification+0x466>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <SVCCTL_App_Notification+0x2a8>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005409 	.word	0x08005409
 80053e0:	0800553f 	.word	0x0800553f
 80053e4:	08005411 	.word	0x08005411
 80053e8:	08005495 	.word	0x08005495
 80053ec:	0800549d 	.word	0x0800549d
 80053f0:	080054a5 	.word	0x080054a5
 80053f4:	0800559b 	.word	0x0800559b
 80053f8:	0800557d 	.word	0x0800557d
 80053fc:	080054d9 	.word	0x080054d9
 8005400:	080054e9 	.word	0x080054e9
 8005404:	080054e1 	.word	0x080054e1
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 8005408:	481c      	ldr	r0, [pc, #112]	; (800547c <SVCCTL_App_Notification+0x348>)
 800540a:	f00f fbc9 	bl	8014ba0 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800540e:	e0c1      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8005410:	481b      	ldr	r0, [pc, #108]	; (8005480 <SVCCTL_App_Notification+0x34c>)
 8005412:	f00f fbc5 	bl	8014ba0 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 8005416:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <SVCCTL_App_Notification+0x30c>)
 8005418:	8adb      	ldrh	r3, [r3, #22]
 800541a:	491a      	ldr	r1, [pc, #104]	; (8005484 <SVCCTL_App_Notification+0x350>)
 800541c:	4618      	mov	r0, r3
 800541e:	f00b fd81 	bl	8010f24 <aci_gap_pass_key_resp>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8005428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02d      	beq.n	800548c <SVCCTL_App_Notification+0x358>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8005430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005434:	4619      	mov	r1, r3
 8005436:	4814      	ldr	r0, [pc, #80]	; (8005488 <SVCCTL_App_Notification+0x354>)
 8005438:	f00f fb44 	bl	8014ac4 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800543c:	e0aa      	b.n	8005594 <SVCCTL_App_Notification+0x460>
 800543e:	bf00      	nop
 8005440:	20001240 	.word	0x20001240
 8005444:	08017508 	.word	0x08017508
 8005448:	08017534 	.word	0x08017534
 800544c:	200012c8 	.word	0x200012c8
 8005450:	08017570 	.word	0x08017570
 8005454:	3ff40000 	.word	0x3ff40000
 8005458:	080175a4 	.word	0x080175a4
 800545c:	08017610 	.word	0x08017610
 8005460:	08017640 	.word	0x08017640
 8005464:	0801764c 	.word	0x0801764c
 8005468:	08017658 	.word	0x08017658
 800546c:	08017678 	.word	0x08017678
 8005470:	08017698 	.word	0x08017698
 8005474:	080176bc 	.word	0x080176bc
 8005478:	08017704 	.word	0x08017704
 800547c:	08017754 	.word	0x08017754
 8005480:	08017784 	.word	0x08017784
 8005484:	0001e240 	.word	0x0001e240
 8005488:	080177ac 	.word	0x080177ac
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800548c:	4846      	ldr	r0, [pc, #280]	; (80055a8 <SVCCTL_App_Notification+0x474>)
 800548e:	f00f fb87 	bl	8014ba0 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8005492:	e07f      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 8005494:	4845      	ldr	r0, [pc, #276]	; (80055ac <SVCCTL_App_Notification+0x478>)
 8005496:	f00f fb83 	bl	8014ba0 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800549a:	e07b      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 800549c:	4844      	ldr	r0, [pc, #272]	; (80055b0 <SVCCTL_App_Notification+0x47c>)
 800549e:	f00f fb7f 	bl	8014ba0 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 80054a2:	e077      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 80054a4:	4843      	ldr	r0, [pc, #268]	; (80055b4 <SVCCTL_App_Notification+0x480>)
 80054a6:	f00f fb7b 	bl	8014ba0 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80054aa:	4b43      	ldr	r3, [pc, #268]	; (80055b8 <SVCCTL_App_Notification+0x484>)
 80054ac:	8adb      	ldrh	r3, [r3, #22]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f00b fee2 	bl	8011278 <aci_gap_allow_rebond>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 80054ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d006      	beq.n	80054d0 <SVCCTL_App_Notification+0x39c>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 80054c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054c6:	4619      	mov	r1, r3
 80054c8:	483c      	ldr	r0, [pc, #240]	; (80055bc <SVCCTL_App_Notification+0x488>)
 80054ca:	f00f fafb 	bl	8014ac4 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 80054ce:	e061      	b.n	8005594 <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 80054d0:	483b      	ldr	r0, [pc, #236]	; (80055c0 <SVCCTL_App_Notification+0x48c>)
 80054d2:	f00f fb65 	bl	8014ba0 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 80054d6:	e05d      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 80054d8:	483a      	ldr	r0, [pc, #232]	; (80055c4 <SVCCTL_App_Notification+0x490>)
 80054da:	f00f fb61 	bl	8014ba0 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 80054de:	e059      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 80054e0:	4839      	ldr	r0, [pc, #228]	; (80055c8 <SVCCTL_App_Notification+0x494>)
 80054e2:	f00f fb5d 	bl	8014ba0 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 80054e6:	e055      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 80054e8:	4838      	ldr	r0, [pc, #224]	; (80055cc <SVCCTL_App_Notification+0x498>)
 80054ea:	f00f fb59 	bl	8014ba0 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 80054f2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4835      	ldr	r0, [pc, #212]	; (80055d0 <SVCCTL_App_Notification+0x49c>)
 80054fa:	f00f fae3 	bl	8014ac4 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8005502:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8005506:	4619      	mov	r1, r3
 8005508:	4832      	ldr	r0, [pc, #200]	; (80055d4 <SVCCTL_App_Notification+0x4a0>)
 800550a:	f00f fadb 	bl	8014ac4 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800550e:	4b2a      	ldr	r3, [pc, #168]	; (80055b8 <SVCCTL_App_Notification+0x484>)
 8005510:	8adb      	ldrh	r3, [r3, #22]
 8005512:	2101      	movs	r1, #1
 8005514:	4618      	mov	r0, r3
 8005516:	f00b ff03 	bl	8011320 <aci_gap_numeric_comparison_value_confirm_yesno>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8005520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <SVCCTL_App_Notification+0x402>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8005528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800552c:	4619      	mov	r1, r3
 800552e:	482a      	ldr	r0, [pc, #168]	; (80055d8 <SVCCTL_App_Notification+0x4a4>)
 8005530:	f00f fac8 	bl	8014ac4 <iprintf>
          break;
 8005534:	e02e      	b.n	8005594 <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8005536:	4829      	ldr	r0, [pc, #164]	; (80055dc <SVCCTL_App_Notification+0x4a8>)
 8005538:	f00f fb32 	bl	8014ba0 <puts>
          break;
 800553c:	e02a      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	3302      	adds	r3, #2
 8005542:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8005544:	4826      	ldr	r0, [pc, #152]	; (80055e0 <SVCCTL_App_Notification+0x4ac>)
 8005546:	f00f fb2b 	bl	8014ba0 <puts>
          if (pairing_complete->Status == 0)
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	789b      	ldrb	r3, [r3, #2]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <SVCCTL_App_Notification+0x426>
            APP_DBG_MSG("     - Pairing Success\n");
 8005552:	4824      	ldr	r0, [pc, #144]	; (80055e4 <SVCCTL_App_Notification+0x4b0>)
 8005554:	f00f fb24 	bl	8014ba0 <puts>
 8005558:	e008      	b.n	800556c <SVCCTL_App_Notification+0x438>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	789b      	ldrb	r3, [r3, #2]
 800555e:	4619      	mov	r1, r3
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	78db      	ldrb	r3, [r3, #3]
 8005564:	461a      	mov	r2, r3
 8005566:	4820      	ldr	r0, [pc, #128]	; (80055e8 <SVCCTL_App_Notification+0x4b4>)
 8005568:	f00f faac 	bl	8014ac4 <iprintf>
          APP_DBG_MSG("\n");
 800556c:	200a      	movs	r0, #10
 800556e:	f00f fabb 	bl	8014ae8 <putchar>
          break;    
 8005572:	e00f      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          mutex = 1;
 8005574:	4b1d      	ldr	r3, [pc, #116]	; (80055ec <SVCCTL_App_Notification+0x4b8>)
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
          break;
 800557a:	e00b      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800557c:	481c      	ldr	r0, [pc, #112]	; (80055f0 <SVCCTL_App_Notification+0x4bc>)
 800557e:	f00f faa1 	bl	8014ac4 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8005582:	e007      	b.n	8005594 <SVCCTL_App_Notification+0x460>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <SVCCTL_App_Notification+0x484>)
 8005586:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800558a:	210a      	movs	r1, #10
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe fc3d 	bl	8003e0c <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8005592:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8005594:	e001      	b.n	800559a <SVCCTL_App_Notification+0x466>
      break;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <SVCCTL_App_Notification+0x468>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800559a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800559c:	2301      	movs	r3, #1
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3730      	adds	r7, #48	; 0x30
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bdb0      	pop	{r4, r5, r7, pc}
 80055a6:	bf00      	nop
 80055a8:	080177e0 	.word	0x080177e0
 80055ac:	08017808 	.word	0x08017808
 80055b0:	08017834 	.word	0x08017834
 80055b4:	0801786c 	.word	0x0801786c
 80055b8:	20001240 	.word	0x20001240
 80055bc:	08017890 	.word	0x08017890
 80055c0:	080178c0 	.word	0x080178c0
 80055c4:	080178e8 	.word	0x080178e8
 80055c8:	08017914 	.word	0x08017914
 80055cc:	08017944 	.word	0x08017944
 80055d0:	08017978 	.word	0x08017978
 80055d4:	08017994 	.word	0x08017994
 80055d8:	080179ac 	.word	0x080179ac
 80055dc:	080179fc 	.word	0x080179fc
 80055e0:	08017a44 	.word	0x08017a44
 80055e4:	08017a70 	.word	0x08017a70
 80055e8:	08017a88 	.word	0x08017a88
 80055ec:	200012cd 	.word	0x200012cd
 80055f0:	08017ac4 	.word	0x08017ac4

080055f4 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80055f8:	2100      	movs	r1, #0
 80055fa:	2008      	movs	r0, #8
 80055fc:	f00e fc1a 	bl	8013e34 <UTIL_SEQ_SetTask>
}
 8005600:	bf00      	nop
 8005602:	bd80      	pop	{r7, pc}

08005604 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8005608:	2100      	movs	r1, #0
 800560a:	2010      	movs	r0, #16
 800560c:	f00e fc12 	bl	8013e34 <UTIL_SEQ_SetTask>
}
 8005610:	bf00      	nop
 8005612:	bd80      	pop	{r7, pc}

08005614 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <Ble_Tl_Init+0x20>)
 800562c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <Ble_Tl_Init+0x24>)
 8005630:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8005632:	463b      	mov	r3, r7
 8005634:	4619      	mov	r1, r3
 8005636:	4805      	ldr	r0, [pc, #20]	; (800564c <Ble_Tl_Init+0x28>)
 8005638:	f00c fd3a 	bl	80120b0 <hci_init>

  return;
 800563c:	bf00      	nop
}
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20030028 	.word	0x20030028
 8005648:	08005d79 	.word	0x08005d79
 800564c:	08005d41 	.word	0x08005d41

08005650 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8005650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005652:	b08d      	sub	sp, #52	; 0x34
 8005654:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8005656:	2300      	movs	r3, #0
 8005658:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800565a:	2392      	movs	r3, #146	; 0x92
 800565c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800565e:	48a5      	ldr	r0, [pc, #660]	; (80058f4 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8005660:	f00f fa9e 	bl	8014ba0 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8005664:	f00c faaf 	bl	8011bc6 <hci_reset>
 8005668:	4603      	mov	r3, r0
 800566a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	4619      	mov	r1, r3
 8005676:	48a0      	ldr	r0, [pc, #640]	; (80058f8 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8005678:	f00f fa24 	bl	8014ac4 <iprintf>
 800567c:	e002      	b.n	8005684 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800567e:	489f      	ldr	r0, [pc, #636]	; (80058fc <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8005680:	f00f fa8e 	bl	8014ba0 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8005684:	f000 fa40 	bl	8005b08 <BleGetBdAddress>
 8005688:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	2106      	movs	r1, #6
 800568e:	2000      	movs	r0, #0
 8005690:	f00c f959 	bl	8011946 <aci_hal_write_config_data>
 8005694:	4603      	mov	r3, r0
 8005696:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8005698:	7dfb      	ldrb	r3, [r7, #23]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800569e:	7dfb      	ldrb	r3, [r7, #23]
 80056a0:	4619      	mov	r1, r3
 80056a2:	4897      	ldr	r0, [pc, #604]	; (8005900 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80056a4:	f00f fa0e 	bl	8014ac4 <iprintf>
 80056a8:	e021      	b.n	80056ee <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 80056aa:	4896      	ldr	r0, [pc, #600]	; (8005904 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 80056ac:	f00f fa78 	bl	8014ba0 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	3305      	adds	r3, #5
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3304      	adds	r3, #4
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	461c      	mov	r4, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	3303      	adds	r3, #3
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	461d      	mov	r5, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	3302      	adds	r3, #2
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	3301      	adds	r3, #1
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	4619      	mov	r1, r3
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	9302      	str	r3, [sp, #8]
 80056de:	9101      	str	r1, [sp, #4]
 80056e0:	9200      	str	r2, [sp, #0]
 80056e2:	462b      	mov	r3, r5
 80056e4:	4622      	mov	r2, r4
 80056e6:	4601      	mov	r1, r0
 80056e8:	4887      	ldr	r0, [pc, #540]	; (8005908 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80056ea:	f00f f9eb 	bl	8014ac4 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	3305      	adds	r3, #5
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	4b85      	ldr	r3, [pc, #532]	; (800590c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80056f6:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	3304      	adds	r3, #4
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	4b83      	ldr	r3, [pc, #524]	; (800590c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8005700:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3303      	adds	r3, #3
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	4b80      	ldr	r3, [pc, #512]	; (800590c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800570a:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	3302      	adds	r3, #2
 8005710:	781a      	ldrb	r2, [r3, #0]
 8005712:	4b7e      	ldr	r3, [pc, #504]	; (800590c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8005714:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	3301      	adds	r3, #1
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	4b7b      	ldr	r3, [pc, #492]	; (800590c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800571e:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	4b79      	ldr	r3, [pc, #484]	; (800590c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8005726:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8005728:	4a79      	ldr	r2, [pc, #484]	; (8005910 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800572a:	2110      	movs	r1, #16
 800572c:	2018      	movs	r0, #24
 800572e:	f00c f90a 	bl	8011946 <aci_hal_write_config_data>
 8005732:	4603      	mov	r3, r0
 8005734:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	4619      	mov	r1, r3
 8005740:	4874      	ldr	r0, [pc, #464]	; (8005914 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8005742:	f00f f9bf 	bl	8014ac4 <iprintf>
 8005746:	e002      	b.n	800574e <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8005748:	4873      	ldr	r0, [pc, #460]	; (8005918 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800574a:	f00f fa29 	bl	8014ba0 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800574e:	4a73      	ldr	r2, [pc, #460]	; (800591c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8005750:	2110      	movs	r1, #16
 8005752:	2008      	movs	r0, #8
 8005754:	f00c f8f7 	bl	8011946 <aci_hal_write_config_data>
 8005758:	4603      	mov	r3, r0
 800575a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	4619      	mov	r1, r3
 8005766:	486e      	ldr	r0, [pc, #440]	; (8005920 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8005768:	f00f f9ac 	bl	8014ac4 <iprintf>
 800576c:	e002      	b.n	8005774 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800576e:	486d      	ldr	r0, [pc, #436]	; (8005924 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8005770:	f00f fa16 	bl	8014ba0 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8005774:	2118      	movs	r1, #24
 8005776:	2001      	movs	r0, #1
 8005778:	f00c f96a 	bl	8011a50 <aci_hal_set_tx_power_level>
 800577c:	4603      	mov	r3, r0
 800577e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	4619      	mov	r1, r3
 800578a:	4867      	ldr	r0, [pc, #412]	; (8005928 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800578c:	f00f f99a 	bl	8014ac4 <iprintf>
 8005790:	e002      	b.n	8005798 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8005792:	4866      	ldr	r0, [pc, #408]	; (800592c <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8005794:	f00f fa04 	bl	8014ba0 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8005798:	f00b fe29 	bl	80113ee <aci_gatt_init>
 800579c:	4603      	mov	r3, r0
 800579e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	4619      	mov	r1, r3
 80057aa:	4861      	ldr	r0, [pc, #388]	; (8005930 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80057ac:	f00f f98a 	bl	8014ac4 <iprintf>
 80057b0:	e002      	b.n	80057b8 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 80057b2:	4860      	ldr	r0, [pc, #384]	; (8005934 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 80057b4:	f00f f9f4 	bl	8014ba0 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d02b      	beq.n	8005822 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "P2PSRV1";
 80057ca:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 80057cc:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80057ce:	1dba      	adds	r2, r7, #6
 80057d0:	7bf8      	ldrb	r0, [r7, #15]
 80057d2:	1cbb      	adds	r3, r7, #2
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	1d3b      	adds	r3, r7, #4
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	4613      	mov	r3, r2
 80057dc:	2207      	movs	r2, #7
 80057de:	2100      	movs	r1, #0
 80057e0:	f00b fc07 	bl	8010ff2 <aci_gap_init>
 80057e4:	4603      	mov	r3, r0
 80057e6:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
 80057f0:	4619      	mov	r1, r3
 80057f2:	4852      	ldr	r0, [pc, #328]	; (800593c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 80057f4:	f00f f966 	bl	8014ac4 <iprintf>
 80057f8:	e002      	b.n	8005800 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80057fa:	4851      	ldr	r0, [pc, #324]	; (8005940 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 80057fc:	f00f f9d0 	bl	8014ba0 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8005800:	88fc      	ldrh	r4, [r7, #6]
 8005802:	88bd      	ldrh	r5, [r7, #4]
 8005804:	68b8      	ldr	r0, [r7, #8]
 8005806:	f7fa fd1b 	bl	8000240 <strlen>
 800580a:	4603      	mov	r3, r0
 800580c:	b2da      	uxtb	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	2200      	movs	r2, #0
 8005816:	4629      	mov	r1, r5
 8005818:	4620      	mov	r0, r4
 800581a:	f00b ffeb 	bl	80117f4 <aci_gatt_update_char_value>
 800581e:	4603      	mov	r3, r0
 8005820:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8005822:	88f8      	ldrh	r0, [r7, #6]
 8005824:	8879      	ldrh	r1, [r7, #2]
 8005826:	463b      	mov	r3, r7
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2302      	movs	r3, #2
 800582c:	2200      	movs	r2, #0
 800582e:	f00b ffe1 	bl	80117f4 <aci_gatt_update_char_value>
 8005832:	4603      	mov	r3, r0
 8005834:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8005836:	2202      	movs	r2, #2
 8005838:	2102      	movs	r1, #2
 800583a:	2000      	movs	r0, #0
 800583c:	f00c fa65 	bl	8011d0a <hci_le_set_default_phy>
 8005840:	4603      	mov	r3, r0
 8005842:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8005844:	7dfb      	ldrb	r3, [r7, #23]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800584a:	7dfb      	ldrb	r3, [r7, #23]
 800584c:	4619      	mov	r1, r3
 800584e:	483d      	ldr	r0, [pc, #244]	; (8005944 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8005850:	f00f f938 	bl	8014ac4 <iprintf>
 8005854:	e002      	b.n	800585c <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8005856:	483c      	ldr	r0, [pc, #240]	; (8005948 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8005858:	f00f f9a2 	bl	8014ba0 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800585c:	4b3b      	ldr	r3, [pc, #236]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800585e:	2201      	movs	r2, #1
 8005860:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8005862:	4b3a      	ldr	r3, [pc, #232]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f00b fa44 	bl	8010cf4 <aci_gap_set_io_capability>
 800586c:	4603      	mov	r3, r0
 800586e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	4619      	mov	r1, r3
 800587a:	4835      	ldr	r0, [pc, #212]	; (8005950 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800587c:	f00f f922 	bl	8014ac4 <iprintf>
 8005880:	e002      	b.n	8005888 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8005882:	4834      	ldr	r0, [pc, #208]	; (8005954 <Ble_Hci_Gap_Gatt_Init+0x304>)
 8005884:	f00f f98c 	bl	8014ba0 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8005888:	4b30      	ldr	r3, [pc, #192]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800588a:	2201      	movs	r2, #1
 800588c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800588e:	4b2f      	ldr	r3, [pc, #188]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8005890:	2208      	movs	r2, #8
 8005892:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8005894:	4b2d      	ldr	r3, [pc, #180]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8005896:	2210      	movs	r2, #16
 8005898:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800589a:	4b2c      	ldr	r3, [pc, #176]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800589c:	2200      	movs	r2, #0
 800589e:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80058a0:	4b2a      	ldr	r3, [pc, #168]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80058a2:	4a2d      	ldr	r2, [pc, #180]	; (8005958 <Ble_Hci_Gap_Gatt_Init+0x308>)
 80058a4:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80058a6:	4b29      	ldr	r3, [pc, #164]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80058ac:	4b27      	ldr	r3, [pc, #156]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80058ae:	789c      	ldrb	r4, [r3, #2]
 80058b0:	4b26      	ldr	r3, [pc, #152]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80058b2:	785d      	ldrb	r5, [r3, #1]
 80058b4:	4b25      	ldr	r3, [pc, #148]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80058b6:	791b      	ldrb	r3, [r3, #4]
 80058b8:	4a24      	ldr	r2, [pc, #144]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80058ba:	7952      	ldrb	r2, [r2, #5]
 80058bc:	4923      	ldr	r1, [pc, #140]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80058be:	78c9      	ldrb	r1, [r1, #3]
 80058c0:	4822      	ldr	r0, [pc, #136]	; (800594c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 80058c2:	6880      	ldr	r0, [r0, #8]
 80058c4:	2600      	movs	r6, #0
 80058c6:	9604      	str	r6, [sp, #16]
 80058c8:	9003      	str	r0, [sp, #12]
 80058ca:	9102      	str	r1, [sp, #8]
 80058cc:	9201      	str	r2, [sp, #4]
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	2300      	movs	r3, #0
 80058d2:	2201      	movs	r2, #1
 80058d4:	4629      	mov	r1, r5
 80058d6:	4620      	mov	r0, r4
 80058d8:	f00b fa60 	bl	8010d9c <aci_gap_set_authentication_requirement>
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d03c      	beq.n	8005960 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
 80058e8:	4619      	mov	r1, r3
 80058ea:	481c      	ldr	r0, [pc, #112]	; (800595c <Ble_Hci_Gap_Gatt_Init+0x30c>)
 80058ec:	f00f f8ea 	bl	8014ac4 <iprintf>
 80058f0:	e039      	b.n	8005966 <Ble_Hci_Gap_Gatt_Init+0x316>
 80058f2:	bf00      	nop
 80058f4:	08017aec 	.word	0x08017aec
 80058f8:	08017b18 	.word	0x08017b18
 80058fc:	08017b48 	.word	0x08017b48
 8005900:	08017b68 	.word	0x08017b68
 8005904:	08017bc4 	.word	0x08017bc4
 8005908:	08017c10 	.word	0x08017c10
 800590c:	20000010 	.word	0x20000010
 8005910:	080188b8 	.word	0x080188b8
 8005914:	08017c4c 	.word	0x08017c4c
 8005918:	08017ca4 	.word	0x08017ca4
 800591c:	080188c8 	.word	0x080188c8
 8005920:	08017cec 	.word	0x08017cec
 8005924:	08017d44 	.word	0x08017d44
 8005928:	08017d8c 	.word	0x08017d8c
 800592c:	08017dcc 	.word	0x08017dcc
 8005930:	08017dfc 	.word	0x08017dfc
 8005934:	08017e30 	.word	0x08017e30
 8005938:	08017e54 	.word	0x08017e54
 800593c:	08017e5c 	.word	0x08017e5c
 8005940:	08017e8c 	.word	0x08017e8c
 8005944:	08017eac 	.word	0x08017eac
 8005948:	08017ee8 	.word	0x08017ee8
 800594c:	20001240 	.word	0x20001240
 8005950:	08017f14 	.word	0x08017f14
 8005954:	08017f54 	.word	0x08017f54
 8005958:	0001b207 	.word	0x0001b207
 800595c:	08017f84 	.word	0x08017f84
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8005960:	480e      	ldr	r0, [pc, #56]	; (800599c <Ble_Hci_Gap_Gatt_Init+0x34c>)
 8005962:	f00f f91d 	bl	8014ba0 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8005966:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <Ble_Hci_Gap_Gatt_Init+0x350>)
 8005968:	789b      	ldrb	r3, [r3, #2]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00f      	beq.n	800598e <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800596e:	f00b fc5f 	bl	8011230 <aci_gap_configure_filter_accept_list>
 8005972:	4603      	mov	r3, r0
 8005974:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	4619      	mov	r1, r3
 8005980:	4808      	ldr	r0, [pc, #32]	; (80059a4 <Ble_Hci_Gap_Gatt_Init+0x354>)
 8005982:	f00f f89f 	bl	8014ac4 <iprintf>
 8005986:	e002      	b.n	800598e <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8005988:	4807      	ldr	r0, [pc, #28]	; (80059a8 <Ble_Hci_Gap_Gatt_Init+0x358>)
 800598a:	f00f f909 	bl	8014ba0 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800598e:	4807      	ldr	r0, [pc, #28]	; (80059ac <Ble_Hci_Gap_Gatt_Init+0x35c>)
 8005990:	f00f f898 	bl	8014ac4 <iprintf>
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599c:	08017fd0 	.word	0x08017fd0
 80059a0:	20001240 	.word	0x20001240
 80059a4:	0801800c 	.word	0x0801800c
 80059a8:	0801804c 	.word	0x0801804c
 80059ac:	0801807c 	.word	0x0801807c

080059b0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08c      	sub	sp, #48	; 0x30
 80059b4:	af08      	add	r7, sp, #32
 80059b6:	4603      	mov	r3, r0
 80059b8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80059ba:	2392      	movs	r3, #146	; 0x92
 80059bc:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d106      	bne.n	80059d2 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80059c4:	4b41      	ldr	r3, [pc, #260]	; (8005acc <Adv_Request+0x11c>)
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80059ca:	4b41      	ldr	r3, [pc, #260]	; (8005ad0 <Adv_Request+0x120>)
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	81bb      	strh	r3, [r7, #12]
 80059d0:	e005      	b.n	80059de <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80059d2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80059d6:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80059d8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80059dc:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80059de:	4b3d      	ldr	r3, [pc, #244]	; (8005ad4 <Adv_Request+0x124>)
 80059e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fe f98d 	bl	8003d04 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d119      	bne.n	8005a24 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80059f0:	4b38      	ldr	r3, [pc, #224]	; (8005ad4 <Adv_Request+0x124>)
 80059f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d004      	beq.n	8005a04 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80059fa:	4b36      	ldr	r3, [pc, #216]	; (8005ad4 <Adv_Request+0x124>)
 80059fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d10f      	bne.n	8005a24 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8005a04:	f00b f858 	bl	8010ab8 <aci_gap_set_non_discoverable>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 8005a0c:	7afb      	ldrb	r3, [r7, #11]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 8005a12:	7afb      	ldrb	r3, [r7, #11]
 8005a14:	4619      	mov	r1, r3
 8005a16:	4830      	ldr	r0, [pc, #192]	; (8005ad8 <Adv_Request+0x128>)
 8005a18:	f00f f854 	bl	8014ac4 <iprintf>
 8005a1c:	e002      	b.n	8005a24 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 8005a1e:	482f      	ldr	r0, [pc, #188]	; (8005adc <Adv_Request+0x12c>)
 8005a20:	f00f f8be 	bl	8014ba0 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8005a24:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <Adv_Request+0x124>)
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8005a2c:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <Adv_Request+0x124>)
 8005a2e:	7e1b      	ldrb	r3, [r3, #24]
 8005a30:	89ba      	ldrh	r2, [r7, #12]
 8005a32:	89f9      	ldrh	r1, [r7, #14]
 8005a34:	2000      	movs	r0, #0
 8005a36:	9006      	str	r0, [sp, #24]
 8005a38:	2000      	movs	r0, #0
 8005a3a:	9005      	str	r0, [sp, #20]
 8005a3c:	4828      	ldr	r0, [pc, #160]	; (8005ae0 <Adv_Request+0x130>)
 8005a3e:	9004      	str	r0, [sp, #16]
 8005a40:	9303      	str	r3, [sp, #12]
 8005a42:	4b28      	ldr	r3, [pc, #160]	; (8005ae4 <Adv_Request+0x134>)
 8005a44:	9302      	str	r3, [sp, #8]
 8005a46:	2308      	movs	r3, #8
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2000      	movs	r0, #0
 8005a52:	f00b f855 	bl	8010b00 <aci_gap_set_discoverable>
 8005a56:	4603      	mov	r3, r0
 8005a58:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8005a5a:	7afb      	ldrb	r3, [r7, #11]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8005a60:	7afb      	ldrb	r3, [r7, #11]
 8005a62:	4619      	mov	r1, r3
 8005a64:	4820      	ldr	r0, [pc, #128]	; (8005ae8 <Adv_Request+0x138>)
 8005a66:	f00f f82d 	bl	8014ac4 <iprintf>
 8005a6a:	e002      	b.n	8005a72 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8005a6c:	481f      	ldr	r0, [pc, #124]	; (8005aec <Adv_Request+0x13c>)
 8005a6e:	f00f f897 	bl	8014ba0 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 8005a72:	491f      	ldr	r1, [pc, #124]	; (8005af0 <Adv_Request+0x140>)
 8005a74:	200e      	movs	r0, #14
 8005a76:	f00b fb69 	bl	801114c <aci_gap_update_adv_data>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00e      	beq.n	8005aa2 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d105      	bne.n	8005a96 <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8005a8a:	7afb      	ldrb	r3, [r7, #11]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4819      	ldr	r0, [pc, #100]	; (8005af4 <Adv_Request+0x144>)
 8005a90:	f00f f818 	bl	8014ac4 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8005a94:	e017      	b.n	8005ac6 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 8005a96:	7afb      	ldrb	r3, [r7, #11]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4817      	ldr	r0, [pc, #92]	; (8005af8 <Adv_Request+0x148>)
 8005a9c:	f00f f812 	bl	8014ac4 <iprintf>
  return;
 8005aa0:	e011      	b.n	8005ac6 <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10a      	bne.n	8005abe <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8005aa8:	4814      	ldr	r0, [pc, #80]	; (8005afc <Adv_Request+0x14c>)
 8005aaa:	f00f f80b 	bl	8014ac4 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <Adv_Request+0x124>)
 8005ab0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ab4:	4912      	ldr	r1, [pc, #72]	; (8005b00 <Adv_Request+0x150>)
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe f9a8 	bl	8003e0c <HW_TS_Start>
  return;
 8005abc:	e003      	b.n	8005ac6 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 8005abe:	4811      	ldr	r0, [pc, #68]	; (8005b04 <Adv_Request+0x154>)
 8005ac0:	f00f f800 	bl	8014ac4 <iprintf>
  return;
 8005ac4:	bf00      	nop
}
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	200012c4 	.word	0x200012c4
 8005ad0:	200012c6 	.word	0x200012c6
 8005ad4:	20001240 	.word	0x20001240
 8005ad8:	080180a8 	.word	0x080180a8
 8005adc:	080180f4 	.word	0x080180f4
 8005ae0:	20001259 	.word	0x20001259
 8005ae4:	080188d8 	.word	0x080188d8
 8005ae8:	0801813c 	.word	0x0801813c
 8005aec:	08018174 	.word	0x08018174
 8005af0:	20000010 	.word	0x20000010
 8005af4:	0801819c 	.word	0x0801819c
 8005af8:	080181d0 	.word	0x080181d0
 8005afc:	08018208 	.word	0x08018208
 8005b00:	0001e046 	.word	0x0001e046
 8005b04:	08018230 	.word	0x08018230

08005b08 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8005b0e:	f7ff fa45 	bl	8004f9c <LL_FLASH_GetUDN>
 8005b12:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d023      	beq.n	8005b64 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8005b1c:	f7ff fa56 	bl	8004fcc <LL_FLASH_GetSTCompanyID>
 8005b20:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8005b22:	f7ff fa47 	bl	8004fb4 <LL_FLASH_GetDeviceID>
 8005b26:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	4b16      	ldr	r3, [pc, #88]	; (8005b88 <BleGetBdAddress+0x80>)
 8005b2e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	0a1b      	lsrs	r3, r3, #8
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <BleGetBdAddress+0x80>)
 8005b38:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <BleGetBdAddress+0x80>)
 8005b40:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <BleGetBdAddress+0x80>)
 8005b48:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	0a1b      	lsrs	r3, r3, #8
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <BleGetBdAddress+0x80>)
 8005b52:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <BleGetBdAddress+0x80>)
 8005b5c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <BleGetBdAddress+0x80>)
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e00b      	b.n	8005b7c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8005b64:	2000      	movs	r0, #0
 8005b66:	f00c fc5f 	bl	8012428 <OTP_Read>
 8005b6a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	e001      	b.n	8005b7c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8005b78:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <BleGetBdAddress+0x84>)
 8005b7a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8005b7c:	697b      	ldr	r3, [r7, #20]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20001238 	.word	0x20001238
 8005b8c:	080188b0 	.word	0x080188b0

08005b90 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
//  BSP_LED_Off(LED_GREEN);
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8005b96:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <Adv_Cancel+0x48>)
 8005b98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b9c:	2b05      	cmp	r3, #5
 8005b9e:	d017      	beq.n	8005bd0 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8005ba0:	2392      	movs	r3, #146	; 0x92
 8005ba2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8005ba4:	f00a ff88 	bl	8010ab8 <aci_gap_set_non_discoverable>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <Adv_Cancel+0x48>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8005bba:	4808      	ldr	r0, [pc, #32]	; (8005bdc <Adv_Cancel+0x4c>)
 8005bbc:	f00e ff82 	bl	8014ac4 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8005bc0:	e006      	b.n	8005bd0 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 8005bc2:	4807      	ldr	r0, [pc, #28]	; (8005be0 <Adv_Cancel+0x50>)
 8005bc4:	f00e ff7e 	bl	8014ac4 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8005bc8:	4806      	ldr	r0, [pc, #24]	; (8005be4 <Adv_Cancel+0x54>)
 8005bca:	f00e ff7b 	bl	8014ac4 <iprintf>
  return;
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
}
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20001240 	.word	0x20001240
 8005bdc:	08018260 	.word	0x08018260
 8005be0:	08018284 	.word	0x08018284
 8005be4:	0801828c 	.word	0x0801828c

08005be8 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8005bec:	2100      	movs	r1, #0
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f00e f920 	bl	8013e34 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 8005bf4:	bf00      	nop
}
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
//  BSP_LED_Off(LED_GREEN);
  /* USER CODE END Switch_OFF_GPIO */
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
	...

08005c08 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b089      	sub	sp, #36	; 0x24
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	4603      	mov	r3, r0
 8005c10:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 8005c12:	4b29      	ldr	r3, [pc, #164]	; (8005cb8 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d149      	bne.n	8005cae <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 8005c1a:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8005c20:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	bfb8      	it	lt
 8005c2e:	425b      	neglt	r3, r3
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	4b22      	ldr	r3, [pc, #136]	; (8005cbc <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8005c34:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8005c36:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	ed93 7a00 	vldr	s14, [r3]
 8005c44:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8005c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c50:	ee17 3a90 	vmov	r3, s15
 8005c54:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8005c56:	4b19      	ldr	r3, [pc, #100]	; (8005cbc <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	4a19      	ldr	r2, [pc, #100]	; (8005cc0 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	ed93 7a00 	vldr	s14, [r3]
 8005c64:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8005c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c70:	ee17 3a90 	vmov	r3, s15
 8005c74:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8005c76:	2300      	movs	r3, #0
 8005c78:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8005c7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005c7e:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8005c80:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 8005c82:	8ad8      	ldrh	r0, [r3, #22]
 8005c84:	8a7c      	ldrh	r4, [r7, #18]
 8005c86:	8aba      	ldrh	r2, [r7, #20]
 8005c88:	8af9      	ldrh	r1, [r7, #22]
 8005c8a:	8a3b      	ldrh	r3, [r7, #16]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	4623      	mov	r3, r4
 8005c90:	f00c f8b8 	bl	8011e04 <aci_l2cap_connection_parameter_update_req>
 8005c94:	4603      	mov	r3, r0
 8005c96:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8005c9e:	480a      	ldr	r0, [pc, #40]	; (8005cc8 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 8005ca0:	f00e ff10 	bl	8014ac4 <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 8005ca4:	e003      	b.n	8005cae <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8005ca6:	4809      	ldr	r0, [pc, #36]	; (8005ccc <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8005ca8:	f00e ff0c 	bl	8014ac4 <iprintf>
  return;
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
}
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd90      	pop	{r4, r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	200012cd 	.word	0x200012cd
 8005cbc:	200012cc 	.word	0x200012cc
 8005cc0:	20000008 	.word	0x20000008
 8005cc4:	20001240 	.word	0x20001240
 8005cc8:	080182a8 	.word	0x080182a8
 8005ccc:	080182d0 	.word	0x080182d0

08005cd0 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8005cd4:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <Connection_Interval_Update_Req+0x28>)
 8005cd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d00a      	beq.n	8005cf4 <Connection_Interval_Update_Req+0x24>
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <Connection_Interval_Update_Req+0x28>)
 8005ce0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8005ce8:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <Connection_Interval_Update_Req+0x28>)
 8005cea:	8adb      	ldrh	r3, [r3, #22]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff ff8b 	bl	8005c08 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
}
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20001240 	.word	0x20001240

08005cfc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8005d04:	2100      	movs	r1, #0
 8005d06:	2004      	movs	r0, #4
 8005d08:	f00e f894 	bl	8013e34 <UTIL_SEQ_SetTask>

  return;
 8005d0c:	bf00      	nop
}
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f00e f8f5 	bl	8013f0c <UTIL_SEQ_SetEvt>

  return;
 8005d22:	bf00      	nop
}
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8005d32:	2001      	movs	r0, #1
 8005d34:	f00e f90a 	bl	8013f4c <UTIL_SEQ_WaitEvt>

  return;
 8005d38:	bf00      	nop
}
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	3308      	adds	r3, #8
 8005d52:	4618      	mov	r0, r3
 8005d54:	f00d fc72 	bl	801363c <SVCCTL_UserEvtRx>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8005d5c:	7afb      	ldrb	r3, [r7, #11]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8005d68:	e003      	b.n	8005d72 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
  return;
 8005d70:	bf00      	nop
}
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <BLE_StatusNot+0x16>
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d007      	beq.n	8005d9c <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8005d8c:	e00d      	b.n	8005daa <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005d8e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005d92:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f00e f879 	bl	8013e8c <UTIL_SEQ_PauseTask>
      break;
 8005d9a:	e006      	b.n	8005daa <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005d9c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005da0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f00e f892 	bl	8013ecc <UTIL_SEQ_ResumeTask>
      break;
 8005da8:	bf00      	nop
  }

  return;
 8005daa:	bf00      	nop
}
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <P2PS_STM_App_Notification>:
static void LoopApp(void);	//TODO: finish up
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d01a      	beq.n	8005dfa <P2PS_STM_App_Notification+0x46>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	dc6b      	bgt.n	8005ea0 <P2PS_STM_App_Notification+0xec>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <P2PS_STM_App_Notification+0x1e>
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d00a      	beq.n	8005de6 <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8005dd0:	e066      	b.n	8005ea0 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 8005dd2:	4b37      	ldr	r3, [pc, #220]	; (8005eb0 <P2PS_STM_App_Notification+0xfc>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8005dd8:	4836      	ldr	r0, [pc, #216]	; (8005eb4 <P2PS_STM_App_Notification+0x100>)
 8005dda:	f00e fee1 	bl	8014ba0 <puts>
      APP_DBG_MSG(" \n\r");
 8005dde:	4836      	ldr	r0, [pc, #216]	; (8005eb8 <P2PS_STM_App_Notification+0x104>)
 8005de0:	f00e fe70 	bl	8014ac4 <iprintf>
      break;
 8005de4:	e05f      	b.n	8005ea6 <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 8005de6:	4b32      	ldr	r3, [pc, #200]	; (8005eb0 <P2PS_STM_App_Notification+0xfc>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8005dec:	4833      	ldr	r0, [pc, #204]	; (8005ebc <P2PS_STM_App_Notification+0x108>)
 8005dee:	f00e fed7 	bl	8014ba0 <puts>
      APP_DBG_MSG(" \n\r");
 8005df2:	4831      	ldr	r0, [pc, #196]	; (8005eb8 <P2PS_STM_App_Notification+0x104>)
 8005df4:	f00e fe66 	bl	8014ac4 <iprintf>
      break;
 8005df8:	e055      	b.n	8005ea6 <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d123      	bne.n	8005e4c <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d10b      	bne.n	8005e28 <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 8005e10:	2000      	movs	r0, #0
 8005e12:	f000 ff93 	bl	8006d3c <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 8005e16:	482a      	ldr	r0, [pc, #168]	; (8005ec0 <P2PS_STM_App_Notification+0x10c>)
 8005e18:	f00e fec2 	bl	8014ba0 <puts>
          APP_DBG_MSG(" \n\r");
 8005e1c:	4826      	ldr	r0, [pc, #152]	; (8005eb8 <P2PS_STM_App_Notification+0x104>)
 8005e1e:	f00e fe51 	bl	8014ac4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8005e22:	4b23      	ldr	r3, [pc, #140]	; (8005eb0 <P2PS_STM_App_Notification+0xfc>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 8005e34:	2000      	movs	r0, #0
 8005e36:	f000 ff9b 	bl	8006d70 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 8005e3a:	4822      	ldr	r0, [pc, #136]	; (8005ec4 <P2PS_STM_App_Notification+0x110>)
 8005e3c:	f00e feb0 	bl	8014ba0 <puts>
          APP_DBG_MSG(" \n\r");
 8005e40:	481d      	ldr	r0, [pc, #116]	; (8005eb8 <P2PS_STM_App_Notification+0x104>)
 8005e42:	f00e fe3f 	bl	8014ac4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8005e46:	4b1a      	ldr	r3, [pc, #104]	; (8005eb0 <P2PS_STM_App_Notification+0xfc>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d126      	bne.n	8005ea4 <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d10b      	bne.n	8005e7a <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 8005e62:	2000      	movs	r0, #0
 8005e64:	f000 ff6a 	bl	8006d3c <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8005e68:	4817      	ldr	r0, [pc, #92]	; (8005ec8 <P2PS_STM_App_Notification+0x114>)
 8005e6a:	f00e fe99 	bl	8014ba0 <puts>
          APP_DBG_MSG(" \n\r");
 8005e6e:	4812      	ldr	r0, [pc, #72]	; (8005eb8 <P2PS_STM_App_Notification+0x104>)
 8005e70:	f00e fe28 	bl	8014ac4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <P2PS_STM_App_Notification+0xfc>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10e      	bne.n	8005ea4 <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 8005e86:	2000      	movs	r0, #0
 8005e88:	f000 ff72 	bl	8006d70 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8005e8c:	480f      	ldr	r0, [pc, #60]	; (8005ecc <P2PS_STM_App_Notification+0x118>)
 8005e8e:	f00e fe87 	bl	8014ba0 <puts>
          APP_DBG_MSG(" \n\r");
 8005e92:	4809      	ldr	r0, [pc, #36]	; (8005eb8 <P2PS_STM_App_Notification+0x104>)
 8005e94:	f00e fe16 	bl	8014ac4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <P2PS_STM_App_Notification+0xfc>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	709a      	strb	r2, [r3, #2]
      break;
 8005e9e:	e001      	b.n	8005ea4 <P2PS_STM_App_Notification+0xf0>
      break;
 8005ea0:	bf00      	nop
 8005ea2:	e000      	b.n	8005ea6 <P2PS_STM_App_Notification+0xf2>
      break;
 8005ea4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8005ea6:	bf00      	nop
}
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	200012d0 	.word	0x200012d0
 8005eb4:	08018300 	.word	0x08018300
 8005eb8:	08018334 	.word	0x08018334
 8005ebc:	08018338 	.word	0x08018338
 8005ec0:	0801836c 	.word	0x0801836c
 8005ec4:	08018394 	.word	0x08018394
 8005ec8:	080183bc 	.word	0x080183bc
 8005ecc:	080183e4 	.word	0x080183e4

08005ed0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <P2PS_APP_Notification+0x1c>
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d000      	beq.n	8005ee6 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8005ee4:	e003      	b.n	8005eee <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8005ee6:	f000 f855 	bl	8005f94 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8005eea:	e000      	b.n	8005eee <P2PS_APP_Notification+0x1e>
    break;
 8005eec:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8005eee:	bf00      	nop
}
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <P2PS_APP_Init>:

#include "TCS3430.h"


void P2PS_APP_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button1PressTask);
 8005efc:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <P2PS_APP_Init+0x74>)
 8005efe:	2100      	movs	r1, #0
 8005f00:	2008      	movs	r0, #8
 8005f02:	f00d ff75 	bl	8013df0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button2PressTask);
 8005f06:	4a1a      	ldr	r2, [pc, #104]	; (8005f70 <P2PS_APP_Init+0x78>)
 8005f08:	2100      	movs	r1, #0
 8005f0a:	2010      	movs	r0, #16
 8005f0c:	f00d ff70 	bl	8013df0 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask(1 << CFG_TASK_USER_SET_TASK, UTIL_SEQ_RFU, TCS3430Read);
 8005f10:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <P2PS_APP_Init+0x7c>)
 8005f12:	2100      	movs	r1, #0
 8005f14:	2080      	movs	r0, #128	; 0x80
 8005f16:	f00d ff6b 	bl	8013df0 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask(1 << CFG_TASK_COLOR_REQ_ID, UTIL_SEQ_RFU, TrackingTask);
 8005f1a:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <P2PS_APP_Init+0x80>)
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	2040      	movs	r0, #64	; 0x40
 8005f20:	f00d ff66 	bl	8013df0 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask(1 << CFG_TASK_TOFLOOP_TASK, UTIL_SEQ_RFU, LoopApp);
 8005f24:	4a15      	ldr	r2, [pc, #84]	; (8005f7c <P2PS_APP_Init+0x84>)
 8005f26:	2100      	movs	r1, #0
 8005f28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005f2c:	f00d ff60 	bl	8013df0 <UTIL_SEQ_RegTask>

  HW_TS_Create(0, &colorTimer_Id, hw_ts_Repeated, ColorTask);
 8005f30:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <P2PS_APP_Init+0x88>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	4913      	ldr	r1, [pc, #76]	; (8005f84 <P2PS_APP_Init+0x8c>)
 8005f36:	2000      	movs	r0, #0
 8005f38:	f7fd fe6a 	bl	8003c10 <HW_TS_Create>

  HW_TS_Start(colorTimer_Id, 200000/CFG_TS_TICK_VAL);
 8005f3c:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <P2PS_APP_Init+0x8c>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f240 1199 	movw	r1, #409	; 0x199
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fd ff61 	bl	8003e0c <HW_TS_Start>

  HW_TS_Create(0, &ToFTimer_Id, hw_ts_Repeated, ToFTask);
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <P2PS_APP_Init+0x90>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	490f      	ldr	r1, [pc, #60]	; (8005f8c <P2PS_APP_Init+0x94>)
 8005f50:	2000      	movs	r0, #0
 8005f52:	f7fd fe5d 	bl	8003c10 <HW_TS_Create>


  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 8005f56:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <P2PS_APP_Init+0x98>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8005f5c:	f000 f81a 	bl	8005f94 <P2PS_APP_LED_BUTTON_context_Init>

#if TOF_ENABLE == 1

  MX_TOF_Init();
 8005f60:	f7fc fe3a 	bl	8002bd8 <MX_TOF_Init>

#endif

  Color_Init();
 8005f64:	f001 fb46 	bl	80075f4 <Color_Init>

/* USER CODE END P2PS_APP_Init */
  return;
 8005f68:	bf00      	nop
}
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	08006299 	.word	0x08006299
 8005f70:	080062c5 	.word	0x080062c5
 8005f74:	080065b9 	.word	0x080065b9
 8005f78:	0800657d 	.word	0x0800657d
 8005f7c:	080065cd 	.word	0x080065cd
 8005f80:	08006597 	.word	0x08006597
 8005f84:	200012d8 	.word	0x200012d8
 8005f88:	080065a7 	.word	0x080065a7
 8005f8c:	200012d9 	.word	0x200012d9
 8005f90:	200012d0 	.word	0x200012d0

08005f94 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 8005f98:	2000      	movs	r0, #0
 8005f9a:	f000 fee9 	bl	8006d70 <BSP_LED_Off>
  APP_DBG_MSG("LED BLUE OFF\n");
 8005f9e:	4808      	ldr	r0, [pc, #32]	; (8005fc0 <P2PS_APP_LED_BUTTON_context_Init+0x2c>)
 8005fa0:	f00e fdfe 	bl	8014ba0 <puts>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8005fa4:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8005fb0:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8005fbc:	bf00      	nop
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	0801840c 	.word	0x0801840c
 8005fc4:	200012d0 	.word	0x200012d0

08005fc8 <Appli_ShortButtonPress>:


static void Appli_ShortButtonPress(void)
{
 8005fc8:	b5b0      	push	{r4, r5, r7, lr}
 8005fca:	b08c      	sub	sp, #48	; 0x30
 8005fcc:	af00      	add	r7, sp, #0
	APP_DBG_MSG("\n\rServer Short Button Pressed\r\n");
 8005fce:	4821      	ldr	r0, [pc, #132]	; (8006054 <Appli_ShortButtonPress+0x8c>)
 8005fd0:	f00e fde6 	bl	8014ba0 <puts>

	tcs3430 sensor = { {0}, {0} };
 8005fd4:	4b20      	ldr	r3, [pc, #128]	; (8006058 <Appli_ShortButtonPress+0x90>)
 8005fd6:	f107 0410 	add.w	r4, r7, #16
 8005fda:	461d      	mov	r5, r3
 8005fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TCS3430_print_reg(&sensor);
 8005fe8:	f107 0310 	add.w	r3, r7, #16
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 fb99 	bl	8007724 <TCS3430_print_reg>
	color_data = get_raw_XYZ(&sensor);
 8005ff2:	4c1a      	ldr	r4, [pc, #104]	; (800605c <Appli_ShortButtonPress+0x94>)
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	f107 0210 	add.w	r2, r7, #16
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 f9d7 	bl	80073b0 <get_raw_XYZ>
 8006002:	4623      	mov	r3, r4
 8006004:	463c      	mov	r4, r7
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	6861      	ldr	r1, [r4, #4]
 800600a:	68a2      	ldr	r2, [r4, #8]
 800600c:	c307      	stmia	r3!, {r0, r1, r2}
 800600e:	89a2      	ldrh	r2, [r4, #12]
 8006010:	801a      	strh	r2, [r3, #0]
	TCS3430_print_color(&color_data);
 8006012:	4812      	ldr	r0, [pc, #72]	; (800605c <Appli_ShortButtonPress+0x94>)
 8006014:	f001 fa34 	bl	8007480 <TCS3430_print_color>

	memcpy(ble_notify_data, &color_data, 8);
 8006018:	2208      	movs	r2, #8
 800601a:	4910      	ldr	r1, [pc, #64]	; (800605c <Appli_ShortButtonPress+0x94>)
 800601c:	4810      	ldr	r0, [pc, #64]	; (8006060 <Appli_ShortButtonPress+0x98>)
 800601e:	f00e ff1e 	bl	8014e5e <memcpy>

	if(P2P_Server_App_Context.Notification_Status){
 8006022:	4b10      	ldr	r3, [pc, #64]	; (8006064 <Appli_ShortButtonPress+0x9c>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <Appli_ShortButtonPress+0x7c>
		APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 800602a:	480f      	ldr	r0, [pc, #60]	; (8006068 <Appli_ShortButtonPress+0xa0>)
 800602c:	f00e fd4a 	bl	8014ac4 <iprintf>
		APP_DBG_MSG(" \n\r");
 8006030:	480e      	ldr	r0, [pc, #56]	; (800606c <Appli_ShortButtonPress+0xa4>)
 8006032:	f00e fd47 	bl	8014ac4 <iprintf>
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)ble_notify_data, sizeof(ble_notify_data));
 8006036:	2288      	movs	r2, #136	; 0x88
 8006038:	4909      	ldr	r1, [pc, #36]	; (8006060 <Appli_ShortButtonPress+0x98>)
 800603a:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800603e:	f00c fb25 	bl	801268c <P2PS_STM_App_Update_Char>
	} else {
	   APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
	}
}
 8006042:	e002      	b.n	800604a <Appli_ShortButtonPress+0x82>
	   APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 8006044:	480a      	ldr	r0, [pc, #40]	; (8006070 <Appli_ShortButtonPress+0xa8>)
 8006046:	f00e fd3d 	bl	8014ac4 <iprintf>
}
 800604a:	bf00      	nop
 800604c:	3730      	adds	r7, #48	; 0x30
 800604e:	46bd      	mov	sp, r7
 8006050:	bdb0      	pop	{r4, r5, r7, pc}
 8006052:	bf00      	nop
 8006054:	0801841c 	.word	0x0801841c
 8006058:	080184c8 	.word	0x080184c8
 800605c:	200012fc 	.word	0x200012fc
 8006060:	20001d38 	.word	0x20001d38
 8006064:	200012d0 	.word	0x200012d0
 8006068:	0801843c 	.word	0x0801843c
 800606c:	08018334 	.word	0x08018334
 8006070:	0801847c 	.word	0x0801847c

08006074 <Appli_LongButtonPress>:
 * @brief  Function calls when a button is pressed for Long duration
 * @param  void
 * @retval void
 */
static void Appli_LongButtonPress(void)
{
 8006074:	b5b0      	push	{r4, r5, r7, lr}
 8006076:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
 800607a:	af00      	add	r7, sp, #0
#if TOF_ENABLE == 1
	APP_DBG_MSG("\n\rServer Long Button Pressed\r\n");
 800607c:	482f      	ldr	r0, [pc, #188]	; (800613c <Appli_LongButtonPress+0xc8>)
 800607e:	f00e fd8f 	bl	8014ba0 <puts>

	tcs3430 sensor = { {0}, {0} };
 8006082:	4b2f      	ldr	r3, [pc, #188]	; (8006140 <Appli_LongButtonPress+0xcc>)
 8006084:	f507 64a3 	add.w	r4, r7, #1304	; 0x518
 8006088:	461d      	mov	r5, r3
 800608a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800608c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800608e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TCS3430_print_reg(&sensor);
 8006096:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fb42 	bl	8007724 <TCS3430_print_reg>
	color_data = get_raw_XYZ(&sensor);
 80060a0:	4c28      	ldr	r4, [pc, #160]	; (8006144 <Appli_LongButtonPress+0xd0>)
 80060a2:	463b      	mov	r3, r7
 80060a4:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f980 	bl	80073b0 <get_raw_XYZ>
 80060b0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80060b4:	f5a3 62a8 	sub.w	r2, r3, #1344	; 0x540
 80060b8:	4623      	mov	r3, r4
 80060ba:	4614      	mov	r4, r2
 80060bc:	6820      	ldr	r0, [r4, #0]
 80060be:	6861      	ldr	r1, [r4, #4]
 80060c0:	68a2      	ldr	r2, [r4, #8]
 80060c2:	c307      	stmia	r3!, {r0, r1, r2}
 80060c4:	89a2      	ldrh	r2, [r4, #12]
 80060c6:	801a      	strh	r2, [r3, #0]
	TCS3430_print_color(&color_data);
 80060c8:	481e      	ldr	r0, [pc, #120]	; (8006144 <Appli_LongButtonPress+0xd0>)
 80060ca:	f001 f9d9 	bl	8007480 <TCS3430_print_color>

	memcpy(ble_notify_data, &color_data, 8);
 80060ce:	2208      	movs	r2, #8
 80060d0:	491c      	ldr	r1, [pc, #112]	; (8006144 <Appli_LongButtonPress+0xd0>)
 80060d2:	481d      	ldr	r0, [pc, #116]	; (8006148 <Appli_LongButtonPress+0xd4>)
 80060d4:	f00e fec3 	bl	8014e5e <memcpy>

	//length 2, peer 0004, dst 0003, element index 0
	MX_TOF_Begin();
 80060d8:	f7fc fda8 	bl	8002c2c <MX_TOF_Begin>

	RANGING_SENSOR_Result_t Result;

	int32_t status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4619      	mov	r1, r3
 80060e2:	2000      	movs	r0, #0
 80060e4:	f7fc ff92 	bl	800300c <CUSTOM_RANGING_SENSOR_GetDistance>
 80060e8:	f8c7 053c 	str.w	r0, [r7, #1340]	; 0x53c
	while (status != 0)
 80060ec:	e007      	b.n	80060fe <Appli_LongButtonPress+0x8a>
	{
		status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 80060ee:	f107 0314 	add.w	r3, r7, #20
 80060f2:	4619      	mov	r1, r3
 80060f4:	2000      	movs	r0, #0
 80060f6:	f7fc ff89 	bl	800300c <CUSTOM_RANGING_SENSOR_GetDistance>
 80060fa:	f8c7 053c 	str.w	r0, [r7, #1340]	; 0x53c
	while (status != 0)
 80060fe:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f3      	bne.n	80060ee <Appli_LongButtonPress+0x7a>
	}
	uint16_t *tof = print_result(&Result);
 8006106:	f107 0314 	add.w	r3, r7, #20
 800610a:	4618      	mov	r0, r3
 800610c:	f7fc fde0 	bl	8002cd0 <print_result>
 8006110:	f8c7 0538 	str.w	r0, [r7, #1336]	; 0x538

	memcpy(ble_notify_data+4, tof, 128);
 8006114:	4b0d      	ldr	r3, [pc, #52]	; (800614c <Appli_LongButtonPress+0xd8>)
 8006116:	2280      	movs	r2, #128	; 0x80
 8006118:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 800611c:	4618      	mov	r0, r3
 800611e:	f00e fe9e 	bl	8014e5e <memcpy>

	P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)ble_notify_data, sizeof(ble_notify_data));
 8006122:	2288      	movs	r2, #136	; 0x88
 8006124:	4908      	ldr	r1, [pc, #32]	; (8006148 <Appli_LongButtonPress+0xd4>)
 8006126:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800612a:	f00c faaf 	bl	801268c <P2PS_STM_App_Update_Char>

	MX_TOF_Stop();
 800612e:	f7fc fd85 	bl	8002c3c <MX_TOF_Stop>

	memcpy(ble_notify_data, &color_data, 8);

	P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)ble_notify_data, sizeof(ble_notify_data));
#endif
}
 8006132:	bf00      	nop
 8006134:	f507 67a8 	add.w	r7, r7, #1344	; 0x540
 8006138:	46bd      	mov	sp, r7
 800613a:	bdb0      	pop	{r4, r5, r7, pc}
 800613c:	080184e8 	.word	0x080184e8
 8006140:	080184c8 	.word	0x080184c8
 8006144:	200012fc 	.word	0x200012fc
 8006148:	20001d38 	.word	0x20001d38
 800614c:	20001d40 	.word	0x20001d40

08006150 <Appli_ShortButton2Press>:
/**
 * @brief  Function calls when a button2 is pressed for short duration
 * @param  void
 * @retval void
 */
static void Appli_ShortButton2Press(void) {
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0

	if (Sensor_Running) {
 8006154:	4b0d      	ldr	r3, [pc, #52]	; (800618c <Appli_ShortButton2Press+0x3c>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <Appli_ShortButton2Press+0x22>
		HW_TS_Stop(ToFTimer_Id);
 800615c:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <Appli_ShortButton2Press+0x40>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f7fd fdcf 	bl	8003d04 <HW_TS_Stop>
#if TOF_ENABLE == 1
		MX_TOF_Stop();
 8006166:	f7fc fd69 	bl	8002c3c <MX_TOF_Stop>
#endif
		Sensor_Running = 0;
 800616a:	4b08      	ldr	r3, [pc, #32]	; (800618c <Appli_ShortButton2Press+0x3c>)
 800616c:	2200      	movs	r2, #0
 800616e:	701a      	strb	r2, [r3, #0]
#endif
		HW_TS_Start(ToFTimer_Id, 50000/CFG_TS_TICK_VAL);
		Sensor_Running = 1;
	}

}
 8006170:	e00a      	b.n	8006188 <Appli_ShortButton2Press+0x38>
		MX_TOF_Begin();
 8006172:	f7fc fd5b 	bl	8002c2c <MX_TOF_Begin>
		HW_TS_Start(ToFTimer_Id, 50000/CFG_TS_TICK_VAL);
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <Appli_ShortButton2Press+0x40>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2166      	movs	r1, #102	; 0x66
 800617c:	4618      	mov	r0, r3
 800617e:	f7fd fe45 	bl	8003e0c <HW_TS_Start>
		Sensor_Running = 1;
 8006182:	4b02      	ldr	r3, [pc, #8]	; (800618c <Appli_ShortButton2Press+0x3c>)
 8006184:	2201      	movs	r2, #1
 8006186:	701a      	strb	r2, [r3, #0]
}
 8006188:	bf00      	nop
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20001d34 	.word	0x20001d34
 8006190:	200012d9 	.word	0x200012d9

08006194 <Appli_LongButton2Press>:
/**
 * @brief  Function calls when a button2 is pressed for Long duration
 * @param  void
 * @retval void
 */
static void Appli_LongButton2Press(void) {
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
#if TOF_ENABLE == 1

	MX_TOF_Begin();
 800619a:	f7fc fd47 	bl	8002c2c <MX_TOF_Begin>
	//change formate to fit STM_DataPacket.c

	//get sensor values
	CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &rawBaseFrame);
 800619e:	4910      	ldr	r1, [pc, #64]	; (80061e0 <Appli_LongButton2Press+0x4c>)
 80061a0:	2000      	movs	r0, #0
 80061a2:	f7fc ff33 	bl	800300c <CUSTOM_RANGING_SENSOR_GetDistance>
	rawBaseColor = get_raw_XYZ(&sensor);
 80061a6:	4c0f      	ldr	r4, [pc, #60]	; (80061e4 <Appli_LongButton2Press+0x50>)
 80061a8:	463b      	mov	r3, r7
 80061aa:	490f      	ldr	r1, [pc, #60]	; (80061e8 <Appli_LongButton2Press+0x54>)
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 f8ff 	bl	80073b0 <get_raw_XYZ>
 80061b2:	4623      	mov	r3, r4
 80061b4:	463c      	mov	r4, r7
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	6861      	ldr	r1, [r4, #4]
 80061ba:	68a2      	ldr	r2, [r4, #8]
 80061bc:	c307      	stmia	r3!, {r0, r1, r2}
 80061be:	89a2      	ldrh	r2, [r4, #12]
 80061c0:	801a      	strh	r2, [r3, #0]

	printf("base value being set\n");
 80061c2:	480a      	ldr	r0, [pc, #40]	; (80061ec <Appli_LongButton2Press+0x58>)
 80061c4:	f00e fcec 	bl	8014ba0 <puts>

	MX_TOF_Stop();
 80061c8:	f7fc fd38 	bl	8002c3c <MX_TOF_Stop>
	BaseFrameValid = 1;
 80061cc:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <Appli_LongButton2Press+0x5c>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	701a      	strb	r2, [r3, #0]

	Update_ALSThreshold(&sensor);
 80061d2:	4805      	ldr	r0, [pc, #20]	; (80061e8 <Appli_LongButton2Press+0x54>)
 80061d4:	f001 f9be 	bl	8007554 <Update_ALSThreshold>
#endif
}
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd90      	pop	{r4, r7, pc}
 80061e0:	2000132c 	.word	0x2000132c
 80061e4:	200012dc 	.word	0x200012dc
 80061e8:	2000130c 	.word	0x2000130c
 80061ec:	08018508 	.word	0x08018508
 80061f0:	20001d35 	.word	0x20001d35

080061f4 <Appli_UpdateButtonState>:
/**
 * @brief  Updates the button status
 * @param  int isPressed
 * @retval void
 */
static void Appli_UpdateButtonState(int isPressed) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	uint32_t t0 = 0, t1 = 1;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	2301      	movs	r3, #1
 8006202:	60bb      	str	r3, [r7, #8]

	t0 = HAL_GetTick(); /* press timing */
 8006204:	f004 fbfc 	bl	800aa00 <HAL_GetTick>
 8006208:	60f8      	str	r0, [r7, #12]

	while (BSP_PB_GetState(BUTTON_SW1) == GPIO_PIN_RESET);
 800620a:	bf00      	nop
 800620c:	2000      	movs	r0, #0
 800620e:	f000 fde3 	bl	8006dd8 <BSP_PB_GetState>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f9      	beq.n	800620c <Appli_UpdateButtonState+0x18>
	t1 = HAL_GetTick(); /* SW1 release timing */
 8006218:	f004 fbf2 	bl	800aa00 <HAL_GetTick>
 800621c:	60b8      	str	r0, [r7, #8]

	if ((t1 - t0) > LONG_PRESS_THRESHOLD) {
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006228:	d902      	bls.n	8006230 <Appli_UpdateButtonState+0x3c>
		Appli_LongButtonPress();
 800622a:	f7ff ff23 	bl	8006074 <Appli_LongButtonPress>
	} else if ((t1 - t0) > BOUNCE_THRESHOLD) {
		/* Button 1 short press action */
		Appli_ShortButtonPress();
	}
}
 800622e:	e006      	b.n	800623e <Appli_UpdateButtonState+0x4a>
	} else if ((t1 - t0) > BOUNCE_THRESHOLD) {
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b14      	cmp	r3, #20
 8006238:	d901      	bls.n	800623e <Appli_UpdateButtonState+0x4a>
		Appli_ShortButtonPress();
 800623a:	f7ff fec5 	bl	8005fc8 <Appli_ShortButtonPress>
}
 800623e:	bf00      	nop
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <Appli_UpdateButton2State>:
static void Appli_UpdateButton2State(int isPressed) {
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]

	uint32_t t0 = 0, t1 = 1;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	2301      	movs	r3, #1
 8006254:	60bb      	str	r3, [r7, #8]

	t0 = HAL_GetTick(); /* press timing */
 8006256:	f004 fbd3 	bl	800aa00 <HAL_GetTick>
 800625a:	60f8      	str	r0, [r7, #12]
	while (BSP_PB_GetState(BUTTON_SW2) == GPIO_PIN_RESET);	//TODO: fill out this
 800625c:	bf00      	nop
 800625e:	2001      	movs	r0, #1
 8006260:	f000 fdba 	bl	8006dd8 <BSP_PB_GetState>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f9      	beq.n	800625e <Appli_UpdateButton2State+0x18>

	t1 = HAL_GetTick(); /* SW2 release timing */
 800626a:	f004 fbc9 	bl	800aa00 <HAL_GetTick>
 800626e:	60b8      	str	r0, [r7, #8]

	if ((t1 - t0) > LONG_PRESS_THRESHOLD) {
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800627a:	d902      	bls.n	8006282 <Appli_UpdateButton2State+0x3c>
		Appli_LongButton2Press();
 800627c:	f7ff ff8a 	bl	8006194 <Appli_LongButton2Press>
	} else if ((t1 - t0) > BOUNCE_THRESHOLD) {
		Appli_ShortButton2Press();
	}
}
 8006280:	e006      	b.n	8006290 <Appli_UpdateButton2State+0x4a>
	} else if ((t1 - t0) > BOUNCE_THRESHOLD) {
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b14      	cmp	r3, #20
 800628a:	d901      	bls.n	8006290 <Appli_UpdateButton2State+0x4a>
		Appli_ShortButton2Press();
 800628c:	f7ff ff60 	bl	8006150 <Appli_ShortButton2Press>
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <Button1PressTask>:


static void Button1PressTask(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
	APP_DBG_MSG("BUTTON PRESS\r\n");
 800629c:	4808      	ldr	r0, [pc, #32]	; (80062c0 <Button1PressTask+0x28>)
 800629e:	f00e fc7f 	bl	8014ba0 <puts>
	Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == GPIO_PIN_RESET);
 80062a2:	2000      	movs	r0, #0
 80062a4:	f000 fd98 	bl	8006dd8 <BSP_PB_GetState>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff ff9d 	bl	80061f4 <Appli_UpdateButtonState>
	return;
 80062ba:	bf00      	nop
}
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	08018520 	.word	0x08018520

080062c4 <Button2PressTask>:

static void Button2PressTask(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
	Appli_UpdateButton2State(BSP_PB_GetState(BUTTON_SW2) == GPIO_PIN_RESET);
 80062c8:	2001      	movs	r0, #1
 80062ca:	f000 fd85 	bl	8006dd8 <BSP_PB_GetState>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff ffb3 	bl	8006246 <Appli_UpdateButton2State>
	return;
 80062e0:	bf00      	nop
}
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <beginTracking>:
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/

static void beginTracking(void)
{
 80062e4:	b5b0      	push	{r4, r5, r7, lr}
 80062e6:	f5ad 4daf 	sub.w	sp, sp, #22400	; 0x5780
 80062ea:	b094      	sub	sp, #80	; 0x50
 80062ec:	af7e      	add	r7, sp, #504	; 0x1f8
	 * 3 while (20frames) read from the color register and tof, constantly ranging until no more **
	 * 4 sets up the interrupt register again
	 *
	 */
	//task 1
	printf("begin Tracking triggered\n");
 80062ee:	4898      	ldr	r0, [pc, #608]	; (8006550 <beginTracking+0x26c>)
 80062f0:	f00e fc56 	bl	8014ba0 <puts>
	BSP_LED_On(LED_GREEN);
 80062f4:	2001      	movs	r0, #1
 80062f6:	f000 fd21 	bl	8006d3c <BSP_LED_On>

	if (BaseFrameValid==0){
 80062fa:	4b96      	ldr	r3, [pc, #600]	; (8006554 <beginTracking+0x270>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d103      	bne.n	800630a <beginTracking+0x26>
		printf("BaseFrame uninitialized");
 8006302:	4895      	ldr	r0, [pc, #596]	; (8006558 <beginTracking+0x274>)
 8006304:	f00e fbde 	bl	8014ac4 <iprintf>
 8006308:	e11d      	b.n	8006546 <beginTracking+0x262>
		return;
	}
	//task 2
	set_ALSInterrupt(sensor.reginfo, 0, 0);
 800630a:	2200      	movs	r2, #0
 800630c:	2100      	movs	r1, #0
 800630e:	4893      	ldr	r0, [pc, #588]	; (800655c <beginTracking+0x278>)
 8006310:	f000 ff50 	bl	80071b4 <set_ALSInterrupt>
	reset_Status(sensor.reginfo);
 8006314:	4891      	ldr	r0, [pc, #580]	; (800655c <beginTracking+0x278>)
 8006316:	f001 fa51 	bl	80077bc <reset_Status>

	//Creates 2D arrays to hold the normalized data
	int BaseFrame[8][8];
	int Frame[8][8];
	int NormFrame[8][8];
	MX_TOF_Begin();
 800631a:	f7fc fc87 	bl	8002c2c <MX_TOF_Begin>

	parse_TOF_result(&rawBaseFrame, BaseFrame);
 800631e:	f507 43a9 	add.w	r3, r7, #21632	; 0x5480
 8006322:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8006326:	4619      	mov	r1, r3
 8006328:	488d      	ldr	r0, [pc, #564]	; (8006560 <beginTracking+0x27c>)
 800632a:	f7fc fca1 	bl	8002c70 <parse_TOF_result>
	FIFObuffer fifobuffer;
	init_fifo(&fifobuffer); // Initialize the FIFObuffer
 800632e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8006332:	3b38      	subs	r3, #56	; 0x38
 8006334:	4618      	mov	r0, r3
 8006336:	f7fb fc63 	bl	8001c00 <init_fifo>

	//printf("\033[2J\033[H");
	uint8_t loopblob = 40;
 800633a:	2328      	movs	r3, #40	; 0x28
 800633c:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8006340:	f102 0257 	add.w	r2, r2, #87	; 0x57
 8006344:	7013      	strb	r3, [r2, #0]
	while (loopblob!=0) {
 8006346:	e0d2      	b.n	80064ee <beginTracking+0x20a>
		//reads new frame
#if (1)
		//printf("\033[H");
		//printf("\033[2J\033[H");
#endif
		printf("%d loop til sleep\n",--loopblob);
 8006348:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800634c:	f103 0357 	add.w	r3, r3, #87	; 0x57
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	3b01      	subs	r3, #1
 8006354:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8006358:	f102 0257 	add.w	r2, r2, #87	; 0x57
 800635c:	7013      	strb	r3, [r2, #0]
 800635e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8006362:	f103 0357 	add.w	r3, r3, #87	; 0x57
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	4619      	mov	r1, r3
 800636a:	487e      	ldr	r0, [pc, #504]	; (8006564 <beginTracking+0x280>)
 800636c:	f00e fbaa 	bl	8014ac4 <iprintf>
		printf("NEWFRAME\n");
 8006370:	487d      	ldr	r0, [pc, #500]	; (8006568 <beginTracking+0x284>)
 8006372:	f00e fc15 	bl	8014ba0 <puts>
		int32_t status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX,
 8006376:	497d      	ldr	r1, [pc, #500]	; (800656c <beginTracking+0x288>)
 8006378:	2000      	movs	r0, #0
 800637a:	f7fc fe47 	bl	800300c <CUSTOM_RANGING_SENSOR_GetDistance>
 800637e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8006382:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8006386:	6018      	str	r0, [r3, #0]
				&rawFrame);
		while (status != 0) {
 8006388:	e008      	b.n	800639c <beginTracking+0xb8>
			status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX,
 800638a:	4978      	ldr	r1, [pc, #480]	; (800656c <beginTracking+0x288>)
 800638c:	2000      	movs	r0, #0
 800638e:	f7fc fe3d 	bl	800300c <CUSTOM_RANGING_SENSOR_GetDistance>
 8006392:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8006396:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800639a:	6018      	str	r0, [r3, #0]
		while (status != 0) {
 800639c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80063a0:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1ef      	bne.n	800638a <beginTracking+0xa6>
					&rawFrame);
		}
		rawColor = get_raw_XYZ(&sensor);
 80063aa:	4c71      	ldr	r4, [pc, #452]	; (8006570 <beginTracking+0x28c>)
 80063ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063b0:	3b58      	subs	r3, #88	; 0x58
 80063b2:	496a      	ldr	r1, [pc, #424]	; (800655c <beginTracking+0x278>)
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fffb 	bl	80073b0 <get_raw_XYZ>
 80063ba:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80063be:	f5a3 62bb 	sub.w	r2, r3, #1496	; 0x5d8
 80063c2:	4623      	mov	r3, r4
 80063c4:	4614      	mov	r4, r2
 80063c6:	6820      	ldr	r0, [r4, #0]
 80063c8:	6861      	ldr	r1, [r4, #4]
 80063ca:	68a2      	ldr	r2, [r4, #8]
 80063cc:	c307      	stmia	r3!, {r0, r1, r2}
 80063ce:	89a2      	ldrh	r2, [r4, #12]
 80063d0:	801a      	strh	r2, [r3, #0]
		//TCS3430_print_color(&rawColor);
		float dx, dy;
		colordiff(rawBaseColor,rawColor,&dx,&dy);
 80063d2:	4d68      	ldr	r5, [pc, #416]	; (8006574 <beginTracking+0x290>)
 80063d4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80063d8:	3b40      	subs	r3, #64	; 0x40
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80063e0:	3b3c      	subs	r3, #60	; 0x3c
 80063e2:	9304      	str	r3, [sp, #16]
 80063e4:	4b62      	ldr	r3, [pc, #392]	; (8006570 <beginTracking+0x28c>)
 80063e6:	466c      	mov	r4, sp
 80063e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063ea:	c407      	stmia	r4!, {r0, r1, r2}
 80063ec:	8023      	strh	r3, [r4, #0]
 80063ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80063f2:	f001 f9ff 	bl	80077f4 <colordiff>


		//parse new frame
		parse_TOF_result(&rawFrame, Frame);
 80063f6:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80063fa:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80063fe:	4619      	mov	r1, r3
 8006400:	485a      	ldr	r0, [pc, #360]	; (800656c <beginTracking+0x288>)
 8006402:	f7fc fc35 	bl	8002c70 <parse_TOF_result>

		subtract_matrices(NormFrame, BaseFrame, Frame); //norm_data=8 by 8 matrix
 8006406:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800640a:	f102 0250 	add.w	r2, r2, #80	; 0x50
 800640e:	f507 41a9 	add.w	r1, r7, #21632	; 0x5480
 8006412:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8006416:	f507 43a5 	add.w	r3, r7, #21120	; 0x5280
 800641a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800641e:	4618      	mov	r0, r3
 8006420:	f7fb fd98 	bl	8001f54 <subtract_matrices>

//TODO: decide whether print matrix or not
		print_matrix(NormFrame);
 8006424:	f507 43a5 	add.w	r3, r7, #21120	; 0x5280
 8006428:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800642c:	4618      	mov	r0, r3
 800642e:	f7fb fcc1 	bl	8001db4 <print_matrix>


        FrameInfo frame_info = parse_frame(NormFrame,dx,dy);
 8006432:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8006436:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800643a:	edd3 7a00 	vldr	s15, [r3]
 800643e:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8006442:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8006446:	ed93 7a00 	vldr	s14, [r3]
 800644a:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800644e:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8006452:	f507 42a5 	add.w	r2, r7, #21120	; 0x5280
 8006456:	f102 0250 	add.w	r2, r2, #80	; 0x50
 800645a:	eef0 0a47 	vmov.f32	s1, s14
 800645e:	eeb0 0a67 	vmov.f32	s0, s15
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7fa ff85 	bl	8001374 <parse_frame>

        //print_frame_info(frame_info);

        if (frame_info.num_blobs>0){loopblob=40;}
 800646a:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800646e:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 8006472:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8006476:	2b00      	cmp	r3, #0
 8006478:	dd05      	ble.n	8006486 <beginTracking+0x1a2>
 800647a:	2328      	movs	r3, #40	; 0x28
 800647c:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8006480:	f102 0257 	add.w	r2, r2, #87	; 0x57
 8006484:	7013      	strb	r3, [r2, #0]

        enqueue(&fifobuffer, frame_info); // Store the FrameInfo into the FIFObuffer
 8006486:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800648a:	f2a3 55c4 	subw	r5, r3, #1476	; 0x5c4
 800648e:	f507 7416 	add.w	r4, r7, #600	; 0x258
 8006492:	3c38      	subs	r4, #56	; 0x38
 8006494:	4668      	mov	r0, sp
 8006496:	f105 030c 	add.w	r3, r5, #12
 800649a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800649e:	4619      	mov	r1, r3
 80064a0:	f00e fcdd 	bl	8014e5e <memcpy>
 80064a4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7fb fc2d 	bl	8001d08 <enqueue>
        //print_frame_info(fifobuffer.buffer[fifobuffer.rear]);

        print_frame_info_simple(fifobuffer.buffer[fifobuffer.rear]);
 80064ae:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80064b2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80064b6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
 80064ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80064be:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80064c2:	f5a3 716e 	sub.w	r1, r3, #952	; 0x3b8
 80064c6:	4613      	mov	r3, r2
 80064c8:	01db      	lsls	r3, r3, #7
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	18cc      	adds	r4, r1, r3
 80064d0:	4668      	mov	r0, sp
 80064d2:	f104 0310 	add.w	r3, r4, #16
 80064d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80064da:	4619      	mov	r1, r3
 80064dc:	f00e fcbf 	bl	8014e5e <memcpy>
 80064e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80064e4:	f7fb fc96 	bl	8001e14 <print_frame_info_simple>
        printf("NEWFRAMEEND\n");
 80064e8:	4823      	ldr	r0, [pc, #140]	; (8006578 <beginTracking+0x294>)
 80064ea:	f00e fb59 	bl	8014ba0 <puts>
	while (loopblob!=0) {
 80064ee:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80064f2:	f103 0357 	add.w	r3, r3, #87	; 0x57
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f47f af25 	bne.w	8006348 <beginTracking+0x64>

        //printf("\033[H");
	}

	//task 4
	Update_ALSThreshold(&sensor);
 80064fe:	4817      	ldr	r0, [pc, #92]	; (800655c <beginTracking+0x278>)
 8006500:	f001 f828 	bl	8007554 <Update_ALSThreshold>
	reset_Status(sensor.reginfo);
 8006504:	4815      	ldr	r0, [pc, #84]	; (800655c <beginTracking+0x278>)
 8006506:	f001 f959 	bl	80077bc <reset_Status>
	MX_TOF_Stop();
 800650a:	f7fc fb97 	bl	8002c3c <MX_TOF_Stop>
	BSP_LED_Off(LED_GREEN);
 800650e:	2001      	movs	r0, #1
 8006510:	f000 fc2e 	bl	8006d70 <BSP_LED_Off>
	rawBaseColor = get_raw_XYZ(&sensor);
 8006514:	4c17      	ldr	r4, [pc, #92]	; (8006574 <beginTracking+0x290>)
 8006516:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800651a:	3b58      	subs	r3, #88	; 0x58
 800651c:	490f      	ldr	r1, [pc, #60]	; (800655c <beginTracking+0x278>)
 800651e:	4618      	mov	r0, r3
 8006520:	f000 ff46 	bl	80073b0 <get_raw_XYZ>
 8006524:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8006528:	f5a3 62bb 	sub.w	r2, r3, #1496	; 0x5d8
 800652c:	4623      	mov	r3, r4
 800652e:	4614      	mov	r4, r2
 8006530:	6820      	ldr	r0, [r4, #0]
 8006532:	6861      	ldr	r1, [r4, #4]
 8006534:	68a2      	ldr	r2, [r4, #8]
 8006536:	c307      	stmia	r3!, {r0, r1, r2}
 8006538:	89a2      	ldrh	r2, [r4, #12]
 800653a:	801a      	strh	r2, [r3, #0]
	set_ALSInterrupt(sensor.reginfo, 1, 0);
 800653c:	2200      	movs	r2, #0
 800653e:	2101      	movs	r1, #1
 8006540:	4806      	ldr	r0, [pc, #24]	; (800655c <beginTracking+0x278>)
 8006542:	f000 fe37 	bl	80071b4 <set_ALSInterrupt>
#endif
}
 8006546:	f507 47ab 	add.w	r7, r7, #21888	; 0x5580
 800654a:	3758      	adds	r7, #88	; 0x58
 800654c:	46bd      	mov	sp, r7
 800654e:	bdb0      	pop	{r4, r5, r7, pc}
 8006550:	08018530 	.word	0x08018530
 8006554:	20001d35 	.word	0x20001d35
 8006558:	0801854c 	.word	0x0801854c
 800655c:	2000130c 	.word	0x2000130c
 8006560:	2000132c 	.word	0x2000132c
 8006564:	08018564 	.word	0x08018564
 8006568:	08018578 	.word	0x08018578
 800656c:	20001830 	.word	0x20001830
 8006570:	200012ec 	.word	0x200012ec
 8006574:	200012dc 	.word	0x200012dc
 8006578:	08018584 	.word	0x08018584

0800657c <TrackingTask>:

static void TrackingTask(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
	if(BSP_PB_GetState(COLOR_INT) == GPIO_PIN_RESET){
 8006580:	2003      	movs	r0, #3
 8006582:	f000 fc29 	bl	8006dd8 <BSP_PB_GetState>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <TrackingTask+0x16>
		beginTracking();
 800658c:	f7ff feaa 	bl	80062e4 <beginTracking>
	}
	return;
 8006590:	bf00      	nop
 8006592:	bf00      	nop
}
 8006594:	bd80      	pop	{r7, pc}

08006596 <ColorTask>:

static void ColorTask(void)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_USER_SET_TASK, CFG_SCH_PRIO_0);
 800659a:	2100      	movs	r1, #0
 800659c:	2080      	movs	r0, #128	; 0x80
 800659e:	f00d fc49 	bl	8013e34 <UTIL_SEQ_SetTask>

	return;
 80065a2:	bf00      	nop
}
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <ToFTask>:

static void ToFTask(void)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_TOFLOOP_TASK, CFG_SCH_PRIO_0);
 80065aa:	2100      	movs	r1, #0
 80065ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80065b0:	f00d fc40 	bl	8013e34 <UTIL_SEQ_SetTask>
}
 80065b4:	bf00      	nop
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <TCS3430Read>:
#endif
}


static void TCS3430Read(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED_BLUE);
 80065bc:	2000      	movs	r0, #0
 80065be:	f000 fbf1 	bl	8006da4 <BSP_LED_Toggle>

	Appli_LongButtonPress();
 80065c2:	f7ff fd57 	bl	8006074 <Appli_LongButtonPress>
//
//	adjust_exposure();
}
 80065c6:	bf00      	nop
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <LoopApp>:

static void LoopApp(void)	//TODO: finish up
{
 80065cc:	b5b0      	push	{r4, r5, r7, lr}
 80065ce:	f5ad 6db8 	sub.w	sp, sp, #1472	; 0x5c0
 80065d2:	af00      	add	r7, sp, #0
	static uint8_t Counter = 0;
	if (Counter == 20) {
 80065d4:	4b6d      	ldr	r3, [pc, #436]	; (800678c <LoopApp+0x1c0>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b14      	cmp	r3, #20
 80065da:	d102      	bne.n	80065e2 <LoopApp+0x16>
		Counter = 0;
 80065dc:	4b6b      	ldr	r3, [pc, #428]	; (800678c <LoopApp+0x1c0>)
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]

//		BSP_LED_Toggle(LED_RED);
	}
	Counter++;
 80065e2:	4b6a      	ldr	r3, [pc, #424]	; (800678c <LoopApp+0x1c0>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b68      	ldr	r3, [pc, #416]	; (800678c <LoopApp+0x1c0>)
 80065ec:	701a      	strb	r2, [r3, #0]

#if TOF_ENABLE == 1
	uint8_t datas[6+128];
	tcs3430_optics_val color_data;
	tcs3430 sensor = { {0}, {0} };
 80065ee:	4b68      	ldr	r3, [pc, #416]	; (8006790 <LoopApp+0x1c4>)
 80065f0:	f207 5404 	addw	r4, r7, #1284	; 0x504
 80065f4:	461d      	mov	r5, r3
 80065f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80065fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	color_data = get_raw_XYZ(&sensor);
 8006602:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8006606:	f207 5204 	addw	r2, r7, #1284	; 0x504
 800660a:	4611      	mov	r1, r2
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fecf 	bl	80073b0 <get_raw_XYZ>
	datas[0]=(uint8_t)color_data.X;datas[1]=(uint8_t)((color_data.X)>>8);
 8006612:	f8b7 3524 	ldrh.w	r3, [r7, #1316]	; 0x524
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f887 3534 	strb.w	r3, [r7, #1332]	; 0x534
 800661c:	f8b7 3524 	ldrh.w	r3, [r7, #1316]	; 0x524
 8006620:	0a1b      	lsrs	r3, r3, #8
 8006622:	b29b      	uxth	r3, r3
 8006624:	b2db      	uxtb	r3, r3
 8006626:	f887 3535 	strb.w	r3, [r7, #1333]	; 0x535
	datas[2]=(uint8_t)color_data.Y;datas[3]=(uint8_t)((color_data.Y)>>8);
 800662a:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	; 0x526
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f887 3536 	strb.w	r3, [r7, #1334]	; 0x536
 8006634:	f8b7 3526 	ldrh.w	r3, [r7, #1318]	; 0x526
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	b29b      	uxth	r3, r3
 800663c:	b2db      	uxtb	r3, r3
 800663e:	f887 3537 	strb.w	r3, [r7, #1335]	; 0x537
	datas[4]=(uint8_t)color_data.Z;datas[5]=(uint8_t)((color_data.Z)>>8);
 8006642:	f8b7 3528 	ldrh.w	r3, [r7, #1320]	; 0x528
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f887 3538 	strb.w	r3, [r7, #1336]	; 0x538
 800664c:	f8b7 3528 	ldrh.w	r3, [r7, #1320]	; 0x528
 8006650:	0a1b      	lsrs	r3, r3, #8
 8006652:	b29b      	uxth	r3, r3
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f887 3539 	strb.w	r3, [r7, #1337]	; 0x539
	//TCS3430_print_color(&color_data);

	RANGING_SENSOR_Result_t Result;
	CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L8CX, &Result);
 800665a:	463b      	mov	r3, r7
 800665c:	4619      	mov	r1, r3
 800665e:	2000      	movs	r0, #0
 8006660:	f7fc fcd4 	bl	800300c <CUSTOM_RANGING_SENSOR_GetDistance>
	int8_t j, k, l;
	for (j = 0; j < Result.NumberOfZones; j += 8){
 8006664:	2300      	movs	r3, #0
 8006666:	f887 35bf 	strb.w	r3, [r7, #1471]	; 0x5bf
 800666a:	e07f      	b.n	800676c <LoopApp+0x1a0>
		for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++){
 800666c:	2300      	movs	r3, #0
 800666e:	f887 35bd 	strb.w	r3, [r7, #1469]	; 0x5bd
 8006672:	e071      	b.n	8006758 <LoopApp+0x18c>
			for (k = (8 - 1); k >= 0; k--){
 8006674:	2307      	movs	r3, #7
 8006676:	f887 35be 	strb.w	r3, [r7, #1470]	; 0x5be
 800667a:	e062      	b.n	8006742 <LoopApp+0x176>
				if (Result.ZoneResult[j+k].NumberOfTargets > 0){
 800667c:	f997 25bf 	ldrsb.w	r2, [r7, #1471]	; 0x5bf
 8006680:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8006684:	441a      	add	r2, r3
 8006686:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800668a:	f5a3 61b8 	sub.w	r1, r3, #1472	; 0x5c0
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3304      	adds	r3, #4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d049      	beq.n	8006734 <LoopApp+0x168>
					datas[6+k+k+j+j]=(uint8_t)Result.ZoneResult[j+k].Distance[l];
 80066a0:	f997 25bf 	ldrsb.w	r2, [r7, #1471]	; 0x5bf
 80066a4:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 80066a8:	441a      	add	r2, r3
 80066aa:	f997 05bd 	ldrsb.w	r0, [r7, #1469]	; 0x5bd
 80066ae:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80066b2:	f5a3 61b8 	sub.w	r1, r3, #1472	; 0x5c0
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	4403      	add	r3, r0
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	6899      	ldr	r1, [r3, #8]
 80066c4:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 80066c8:	1d9a      	adds	r2, r3, #6
 80066ca:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 80066ce:	441a      	add	r2, r3
 80066d0:	f997 35bf 	ldrsb.w	r3, [r7, #1471]	; 0x5bf
 80066d4:	441a      	add	r2, r3
 80066d6:	f997 35bf 	ldrsb.w	r3, [r7, #1471]	; 0x5bf
 80066da:	4413      	add	r3, r2
 80066dc:	b2ca      	uxtb	r2, r1
 80066de:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80066e2:	443b      	add	r3, r7
 80066e4:	f803 2c8c 	strb.w	r2, [r3, #-140]
					datas[6+k+k+j+j+1]=(uint8_t)((Result.ZoneResult[j+k].Distance[l])>>8);
 80066e8:	f997 25bf 	ldrsb.w	r2, [r7, #1471]	; 0x5bf
 80066ec:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 80066f0:	441a      	add	r2, r3
 80066f2:	f997 05bd 	ldrsb.w	r0, [r7, #1469]	; 0x5bd
 80066f6:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80066fa:	f5a3 61b8 	sub.w	r1, r3, #1472	; 0x5c0
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	4403      	add	r3, r0
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	0a19      	lsrs	r1, r3, #8
 800670e:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8006712:	1d9a      	adds	r2, r3, #6
 8006714:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8006718:	441a      	add	r2, r3
 800671a:	f997 35bf 	ldrsb.w	r3, [r7, #1471]	; 0x5bf
 800671e:	441a      	add	r2, r3
 8006720:	f997 35bf 	ldrsb.w	r3, [r7, #1471]	; 0x5bf
 8006724:	4413      	add	r3, r2
 8006726:	3301      	adds	r3, #1
 8006728:	b2ca      	uxtb	r2, r1
 800672a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 800672e:	443b      	add	r3, r7
 8006730:	f803 2c8c 	strb.w	r2, [r3, #-140]
			for (k = (8 - 1); k >= 0; k--){
 8006734:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8006738:	b2db      	uxtb	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f887 35be 	strb.w	r3, [r7, #1470]	; 0x5be
 8006742:	f997 35be 	ldrsb.w	r3, [r7, #1470]	; 0x5be
 8006746:	2b00      	cmp	r3, #0
 8006748:	da98      	bge.n	800667c <LoopApp+0xb0>
		for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++){
 800674a:	f997 35bd 	ldrsb.w	r3, [r7, #1469]	; 0x5bd
 800674e:	b2db      	uxtb	r3, r3
 8006750:	3301      	adds	r3, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f887 35bd 	strb.w	r3, [r7, #1469]	; 0x5bd
 8006758:	f997 35bd 	ldrsb.w	r3, [r7, #1469]	; 0x5bd
 800675c:	2b00      	cmp	r3, #0
 800675e:	d089      	beq.n	8006674 <LoopApp+0xa8>
	for (j = 0; j < Result.NumberOfZones; j += 8){
 8006760:	f897 35bf 	ldrb.w	r3, [r7, #1471]	; 0x5bf
 8006764:	3308      	adds	r3, #8
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f887 35bf 	strb.w	r3, [r7, #1471]	; 0x5bf
 800676c:	f997 25bf 	ldrsb.w	r2, [r7, #1471]	; 0x5bf
 8006770:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8006774:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	f4ff af76 	bcc.w	800666c <LoopApp+0xa0>
				}
			}
		}
	}
#endif
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	f507 67b8 	add.w	r7, r7, #1472	; 0x5c0
 8006788:	46bd      	mov	sp, r7
 800678a:	bdb0      	pop	{r4, r5, r7, pc}
 800678c:	20001dc0 	.word	0x20001dc0
 8006790:	080184c8 	.word	0x080184c8

08006794 <LL_PWR_EnableBootC2>:
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <LL_PWR_EnableBootC2+0x1c>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	4a04      	ldr	r2, [pc, #16]	; (80067b0 <LL_PWR_EnableBootC2+0x1c>)
 800679e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a2:	60d3      	str	r3, [r2, #12]
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	58000400 	.word	0x58000400

080067b4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80067be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80067c2:	4905      	ldr	r1, [pc, #20]	; (80067d8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	58000800 	.word	0x58000800

080067dc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80067e6:	6a1a      	ldr	r2, [r3, #32]
 80067e8:	4904      	ldr	r1, [pc, #16]	; (80067fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	620b      	str	r3, [r1, #32]
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	58000800 	.word	0x58000800

08006800 <LL_AHB3_GRP1_EnableClock>:
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800680e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4313      	orrs	r3, r2
 8006816:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4013      	ands	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800683a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800683e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006852:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4013      	ands	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800685c:	68fb      	ldr	r3, [r7, #12]
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <LL_C1_IPCC_EnableIT_TXF>:
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <LL_C1_IPCC_EnableIT_RXO>:
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f043 0201 	orr.w	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	601a      	str	r2, [r3, #0]
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <LL_C1_IPCC_EnableTransmitChannel>:
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	43db      	mvns	r3, r3
 80068be:	401a      	ands	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	605a      	str	r2, [r3, #4]
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	041b      	lsls	r3, r3, #16
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	605a      	str	r2, [r3, #4]
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	43db      	mvns	r3, r3
 8006906:	401a      	ands	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	605a      	str	r2, [r3, #4]
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	609a      	str	r2, [r3, #8]
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <LL_C1_IPCC_SetFlag_CHx>:
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	041a      	lsls	r2, r3, #16
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	609a      	str	r2, [r3, #8]
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	4013      	ands	r3, r2
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d101      	bne.n	800696e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69da      	ldr	r2, [r3, #28]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	4013      	ands	r3, r2
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d101      	bne.n	8006998 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80069ac:	2102      	movs	r1, #2
 80069ae:	4818      	ldr	r0, [pc, #96]	; (8006a10 <HW_IPCC_Rx_Handler+0x68>)
 80069b0:	f7ff ffe4 	bl	800697c <LL_C2_IPCC_IsActiveFlag_CHx>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d008      	beq.n	80069cc <HW_IPCC_Rx_Handler+0x24>
 80069ba:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <HW_IPCC_Rx_Handler+0x68>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80069c6:	f000 f8d5 	bl	8006b74 <HW_IPCC_SYS_EvtHandler>
 80069ca:	e01e      	b.n	8006a0a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80069cc:	2101      	movs	r1, #1
 80069ce:	4810      	ldr	r0, [pc, #64]	; (8006a10 <HW_IPCC_Rx_Handler+0x68>)
 80069d0:	f7ff ffd4 	bl	800697c <LL_C2_IPCC_IsActiveFlag_CHx>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d008      	beq.n	80069ec <HW_IPCC_Rx_Handler+0x44>
 80069da:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <HW_IPCC_Rx_Handler+0x68>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80069e6:	f000 f889 	bl	8006afc <HW_IPCC_BLE_EvtHandler>
 80069ea:	e00e      	b.n	8006a0a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80069ec:	2108      	movs	r1, #8
 80069ee:	4808      	ldr	r0, [pc, #32]	; (8006a10 <HW_IPCC_Rx_Handler+0x68>)
 80069f0:	f7ff ffc4 	bl	800697c <LL_C2_IPCC_IsActiveFlag_CHx>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <HW_IPCC_Rx_Handler+0x64>
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <HW_IPCC_Rx_Handler+0x68>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006a06:	f000 f901 	bl	8006c0c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
}
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	58000c00 	.word	0x58000c00

08006a14 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006a18:	2102      	movs	r1, #2
 8006a1a:	4818      	ldr	r0, [pc, #96]	; (8006a7c <HW_IPCC_Tx_Handler+0x68>)
 8006a1c:	f7ff ff99 	bl	8006952 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d108      	bne.n	8006a38 <HW_IPCC_Tx_Handler+0x24>
 8006a26:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <HW_IPCC_Tx_Handler+0x68>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006a32:	f000 f893 	bl	8006b5c <HW_IPCC_SYS_CmdEvtHandler>
 8006a36:	e01e      	b.n	8006a76 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006a38:	2108      	movs	r1, #8
 8006a3a:	4810      	ldr	r0, [pc, #64]	; (8006a7c <HW_IPCC_Tx_Handler+0x68>)
 8006a3c:	f7ff ff89 	bl	8006952 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d108      	bne.n	8006a58 <HW_IPCC_Tx_Handler+0x44>
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <HW_IPCC_Tx_Handler+0x68>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006a52:	f000 f8bd 	bl	8006bd0 <HW_IPCC_MM_FreeBufHandler>
 8006a56:	e00e      	b.n	8006a76 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006a58:	2120      	movs	r1, #32
 8006a5a:	4808      	ldr	r0, [pc, #32]	; (8006a7c <HW_IPCC_Tx_Handler+0x68>)
 8006a5c:	f7ff ff79 	bl	8006952 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d108      	bne.n	8006a78 <HW_IPCC_Tx_Handler+0x64>
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <HW_IPCC_Tx_Handler+0x68>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006a72:	f000 f84f 	bl	8006b14 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
}
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	58000c00 	.word	0x58000c00

08006a80 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006a84:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a88:	f7ff fed3 	bl	8006832 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006a8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a90:	f7ff fea4 	bl	80067dc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006a94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a98:	f7ff fe8c 	bl	80067b4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006a9c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006a9e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006aa0:	f7ff fe78 	bl	8006794 <LL_PWR_EnableBootC2>

  return;
 8006aa4:	bf00      	nop
}
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006aac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ab0:	f7ff fea6 	bl	8006800 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006ab4:	4806      	ldr	r0, [pc, #24]	; (8006ad0 <HW_IPCC_Init+0x28>)
 8006ab6:	f7ff fee8 	bl	800688a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006aba:	4805      	ldr	r0, [pc, #20]	; (8006ad0 <HW_IPCC_Init+0x28>)
 8006abc:	f7ff fed5 	bl	800686a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006ac0:	202c      	movs	r0, #44	; 0x2c
 8006ac2:	f004 f922 	bl	800ad0a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006ac6:	202d      	movs	r0, #45	; 0x2d
 8006ac8:	f004 f91f 	bl	800ad0a <HAL_NVIC_EnableIRQ>

  return;
 8006acc:	bf00      	nop
}
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	58000c00 	.word	0x58000c00

08006ad4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4802      	ldr	r0, [pc, #8]	; (8006ae4 <HW_IPCC_BLE_Init+0x10>)
 8006adc:	f7ff ff0a 	bl	80068f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006ae0:	bf00      	nop
}
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	58000c00 	.word	0x58000c00

08006ae8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8006aec:	2101      	movs	r1, #1
 8006aee:	4802      	ldr	r0, [pc, #8]	; (8006af8 <HW_IPCC_BLE_SendCmd+0x10>)
 8006af0:	f7ff ff20 	bl	8006934 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006af4:	bf00      	nop
}
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	58000c00 	.word	0x58000c00

08006afc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006b00:	f00c fe80 	bl	8013804 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006b04:	2101      	movs	r1, #1
 8006b06:	4802      	ldr	r0, [pc, #8]	; (8006b10 <HW_IPCC_BLE_EvtHandler+0x14>)
 8006b08:	f7ff ff06 	bl	8006918 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006b0c:	bf00      	nop
}
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	58000c00 	.word	0x58000c00

08006b14 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006b18:	2120      	movs	r1, #32
 8006b1a:	4803      	ldr	r0, [pc, #12]	; (8006b28 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006b1c:	f7ff fed8 	bl	80068d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006b20:	f00c fea0 	bl	8013864 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006b24:	bf00      	nop
}
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	58000c00 	.word	0x58000c00

08006b2c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006b30:	2102      	movs	r1, #2
 8006b32:	4802      	ldr	r0, [pc, #8]	; (8006b3c <HW_IPCC_SYS_Init+0x10>)
 8006b34:	f7ff fede 	bl	80068f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006b38:	bf00      	nop
}
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	58000c00 	.word	0x58000c00

08006b40 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006b44:	2102      	movs	r1, #2
 8006b46:	4804      	ldr	r0, [pc, #16]	; (8006b58 <HW_IPCC_SYS_SendCmd+0x18>)
 8006b48:	f7ff fef4 	bl	8006934 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	4802      	ldr	r0, [pc, #8]	; (8006b58 <HW_IPCC_SYS_SendCmd+0x18>)
 8006b50:	f7ff feab 	bl	80068aa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006b54:	bf00      	nop
}
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	58000c00 	.word	0x58000c00

08006b5c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006b60:	2102      	movs	r1, #2
 8006b62:	4803      	ldr	r0, [pc, #12]	; (8006b70 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006b64:	f7ff feb4 	bl	80068d0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006b68:	f00c fecc 	bl	8013904 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006b6c:	bf00      	nop
}
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	58000c00 	.word	0x58000c00

08006b74 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006b78:	f00c feda 	bl	8013930 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006b7c:	2102      	movs	r1, #2
 8006b7e:	4802      	ldr	r0, [pc, #8]	; (8006b88 <HW_IPCC_SYS_EvtHandler+0x14>)
 8006b80:	f7ff feca 	bl	8006918 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006b84:	bf00      	nop
}
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	58000c00 	.word	0x58000c00

08006b8c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006b94:	2108      	movs	r1, #8
 8006b96:	480c      	ldr	r0, [pc, #48]	; (8006bc8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006b98:	f7ff fedb 	bl	8006952 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d007      	beq.n	8006bb2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006ba2:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006ba8:	2108      	movs	r1, #8
 8006baa:	4807      	ldr	r0, [pc, #28]	; (8006bc8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006bac:	f7ff fe7d 	bl	80068aa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006bb0:	e006      	b.n	8006bc0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006bb6:	2108      	movs	r1, #8
 8006bb8:	4803      	ldr	r0, [pc, #12]	; (8006bc8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006bba:	f7ff febb 	bl	8006934 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006bbe:	bf00      	nop
}
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	58000c00 	.word	0x58000c00
 8006bcc:	20001dc4 	.word	0x20001dc4

08006bd0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006bd4:	2108      	movs	r1, #8
 8006bd6:	4806      	ldr	r0, [pc, #24]	; (8006bf0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006bd8:	f7ff fe7a 	bl	80068d0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006be2:	2108      	movs	r1, #8
 8006be4:	4802      	ldr	r0, [pc, #8]	; (8006bf0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006be6:	f7ff fea5 	bl	8006934 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006bea:	bf00      	nop
}
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	58000c00 	.word	0x58000c00
 8006bf4:	20001dc4 	.word	0x20001dc4

08006bf8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006bfc:	2108      	movs	r1, #8
 8006bfe:	4802      	ldr	r0, [pc, #8]	; (8006c08 <HW_IPCC_TRACES_Init+0x10>)
 8006c00:	f7ff fe78 	bl	80068f4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006c04:	bf00      	nop
}
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	58000c00 	.word	0x58000c00

08006c0c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006c10:	f00c ff36 	bl	8013a80 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006c14:	2108      	movs	r1, #8
 8006c16:	4802      	ldr	r0, [pc, #8]	; (8006c20 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006c18:	f7ff fe7e 	bl	8006918 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006c1c:	bf00      	nop
}
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	58000c00 	.word	0x58000c00

08006c24 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006c24:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c26:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c28:	3304      	adds	r3, #4

08006c2a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c2a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c2c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8006c2e:	d3f9      	bcc.n	8006c24 <CopyDataInit>
  bx lr
 8006c30:	4770      	bx	lr

08006c32 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8006c32:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006c34:	3004      	adds	r0, #4

08006c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006c36:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006c38:	d3fb      	bcc.n	8006c32 <FillZerobss>
  bx lr
 8006c3a:	4770      	bx	lr

08006c3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006c3c:	480c      	ldr	r0, [pc, #48]	; (8006c70 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8006c3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006c40:	f003 fdfa 	bl	800a838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006c44:	480b      	ldr	r0, [pc, #44]	; (8006c74 <LoopForever+0x8>)
 8006c46:	490c      	ldr	r1, [pc, #48]	; (8006c78 <LoopForever+0xc>)
 8006c48:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <LoopForever+0x10>)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f7ff ffed 	bl	8006c2a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006c50:	480b      	ldr	r0, [pc, #44]	; (8006c80 <LoopForever+0x14>)
 8006c52:	490c      	ldr	r1, [pc, #48]	; (8006c84 <LoopForever+0x18>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	f7ff ffee 	bl	8006c36 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006c5a:	480b      	ldr	r0, [pc, #44]	; (8006c88 <LoopForever+0x1c>)
 8006c5c:	490b      	ldr	r1, [pc, #44]	; (8006c8c <LoopForever+0x20>)
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f7ff ffe9 	bl	8006c36 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006c64:	f00e f8d4 	bl	8014e10 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006c68:	f7fd faa0 	bl	80041ac <main>

08006c6c <LoopForever>:

LoopForever:
  b LoopForever
 8006c6c:	e7fe      	b.n	8006c6c <LoopForever>
 8006c6e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8006c70:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006c74:	20000008 	.word	0x20000008
 8006c78:	20000250 	.word	0x20000250
 8006c7c:	0802e47c 	.word	0x0802e47c
  INIT_BSS _sbss, _ebss
 8006c80:	2000028c 	.word	0x2000028c
 8006c84:	20003758 	.word	0x20003758
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006c88:	200301e4 	.word	0x200301e4
 8006c8c:	20030a67 	.word	0x20030a67

08006c90 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006c90:	e7fe      	b.n	8006c90 <ADC1_IRQHandler>

08006c92 <LL_AHB2_GRP1_EnableClock>:
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8006cce:	f107 030c 	add.w	r3, r7, #12
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	605a      	str	r2, [r3, #4]
 8006cd8:	609a      	str	r2, [r3, #8]
 8006cda:	60da      	str	r2, [r3, #12]
 8006cdc:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006cde:	2002      	movs	r0, #2
 8006ce0:	f7ff ffd7 	bl	8006c92 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ce4:	2001      	movs	r0, #1
 8006ce6:	f7ff ffd4 	bl	8006c92 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <BSP_LED_Init+0x70>)
 8006cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf2:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	4a0d      	ldr	r2, [pc, #52]	; (8006d38 <BSP_LED_Init+0x74>)
 8006d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d08:	f107 020c 	add.w	r2, r7, #12
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f004 fbd4 	bl	800b4bc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	4a08      	ldr	r2, [pc, #32]	; (8006d38 <BSP_LED_Init+0x74>)
 8006d18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	4a05      	ldr	r2, [pc, #20]	; (8006d34 <BSP_LED_Init+0x70>)
 8006d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d24:	2200      	movs	r2, #0
 8006d26:	4619      	mov	r1, r3
 8006d28:	f004 fe2e 	bl	800b988 <HAL_GPIO_WritePin>
}
 8006d2c:	bf00      	nop
 8006d2e:	3720      	adds	r7, #32
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	080188e0 	.word	0x080188e0
 8006d38:	20000020 	.word	0x20000020

08006d3c <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	4a07      	ldr	r2, [pc, #28]	; (8006d68 <BSP_LED_On+0x2c>)
 8006d4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	4a06      	ldr	r2, [pc, #24]	; (8006d6c <BSP_LED_On+0x30>)
 8006d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d56:	2201      	movs	r2, #1
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f004 fe15 	bl	800b988 <HAL_GPIO_WritePin>
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000020 	.word	0x20000020
 8006d6c:	080188e0 	.word	0x080188e0

08006d70 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	4a07      	ldr	r2, [pc, #28]	; (8006d9c <BSP_LED_Off+0x2c>)
 8006d7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	4a06      	ldr	r2, [pc, #24]	; (8006da0 <BSP_LED_Off+0x30>)
 8006d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f004 fdfb 	bl	800b988 <HAL_GPIO_WritePin>
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000020 	.word	0x20000020
 8006da0:	080188e0 	.word	0x080188e0

08006da4 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	4a07      	ldr	r2, [pc, #28]	; (8006dd0 <BSP_LED_Toggle+0x2c>)
 8006db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006db6:	79fb      	ldrb	r3, [r7, #7]
 8006db8:	4906      	ldr	r1, [pc, #24]	; (8006dd4 <BSP_LED_Toggle+0x30>)
 8006dba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f004 fdf9 	bl	800b9b8 <HAL_GPIO_TogglePin>
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000020 	.word	0x20000020
 8006dd4:	080188e0 	.word	0x080188e0

08006dd8 <BSP_PB_GetState>:
  *     @arg BUTTON_SW2
  *     @arg BUTTON_SW3
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <BSP_PB_GetState+0x2c>)
 8006de6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	4906      	ldr	r1, [pc, #24]	; (8006e08 <BSP_PB_GetState+0x30>)
 8006dee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f004 fdaf 	bl	800b958 <HAL_GPIO_ReadPin>
 8006dfa:	4603      	mov	r3, r0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	2000002c 	.word	0x2000002c
 8006e08:	080188e8 	.word	0x080188e8

08006e0c <get_data>:
tcs3430_optics_val XYZ_data;
int32_t ret;
int16_t interruptrange = 255;

int32_t get_data(uint8_t *reginfo)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b09c      	sub	sp, #112	; 0x70
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
     * ---------
     * INPUT: reginfo[24] - the array used to store all the values from registers, it should have size of 35
     * RETURN: 0 - success
     *         -1 - error
     */
	int addr[] = {0x80, 0x81, 0x83, 0x84, 0x85, 0x86, 0x87, 0x8C,
 8006e14:	4a16      	ldr	r2, [pc, #88]	; (8006e70 <get_data+0x64>)
 8006e16:	f107 0308 	add.w	r3, r7, #8
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	2260      	movs	r2, #96	; 0x60
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f00e f81d 	bl	8014e5e <memcpy>
				0x98, 0x99, 0x9A, 0x9B, 0x9F, 0xAB, 0xD6, 0xDD};

    // TODO ADD ERROR CHECKING
	HAL_StatusTypeDef ret;

	for(int i = 0; i < 25; i++)
 8006e24:	2300      	movs	r3, #0
 8006e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e28:	e017      	b.n	8006e5a <get_data+0x4e>
	{
		ret = BSP_I2C1_ReadReg(TCS3430_ADDR, addr[i], reginfo+i, 1);
 8006e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	3370      	adds	r3, #112	; 0x70
 8006e30:	443b      	add	r3, r7
 8006e32:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8006e36:	b299      	uxth	r1, r3
 8006e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	441a      	add	r2, r3
 8006e3e:	2301      	movs	r3, #1
 8006e40:	2072      	movs	r0, #114	; 0x72
 8006e42:	f7fd febf 	bl	8004bc4 <BSP_I2C1_ReadReg>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if(ret != BSP_ERROR_NONE) break;
 8006e4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <get_data+0x56>
	for(int i = 0; i < 25; i++)
 8006e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e56:	3301      	adds	r3, #1
 8006e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e5c:	2b18      	cmp	r3, #24
 8006e5e:	dde4      	ble.n	8006e2a <get_data+0x1e>
 8006e60:	e000      	b.n	8006e64 <get_data+0x58>
		if(ret != BSP_ERROR_NONE) break;
 8006e62:	bf00      	nop
	}
	return ret;
 8006e64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3770      	adds	r7, #112	; 0x70
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	08018590 	.word	0x08018590

08006e74 <set_atime>:

int32_t set_atime(uint8_t *reginfo, int cycle_No)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	 *        cycle_No - integration cycle numbers, must be between 1-256
	 * RETURN: 0 - success
	 *         -1 - error
	 */

	if ( (cycle_No <= 256) && (cycle_No >= 1) )
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e84:	dc16      	bgt.n	8006eb4 <set_atime+0x40>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dd13      	ble.n	8006eb4 <set_atime+0x40>
	{
		reginfo[1] = cycle_No - 1;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3301      	adds	r3, #1
 8006e94:	3a01      	subs	r2, #1
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
	}
	else{ return -1; }

	// TODO ADD ERROR CHECKING
	//set_reg(TCS3430_ADDR, ATIME_ADDR, reginfo[1]);
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, ATIME_ADDR, reginfo+1, 1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	2181      	movs	r1, #129	; 0x81
 8006ea2:	2072      	movs	r0, #114	; 0x72
 8006ea4:	f7fd fe5c 	bl	8004b60 <BSP_I2C1_WriteReg>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	4a05      	ldr	r2, [pc, #20]	; (8006ec0 <set_atime+0x4c>)
 8006eac:	6013      	str	r3, [r2, #0]
	return ret;
 8006eae:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <set_atime+0x4c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	e001      	b.n	8006eb8 <set_atime+0x44>
	else{ return -1; }
 8006eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20001df8 	.word	0x20001df8

08006ec4 <set_cfg0>:

int32_t set_cfg0(uint8_t *reginfo, uint8_t mode)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
	 * INPUT: reginfo[24] - current values of all registers
	 *        cycle_No - integration cycle numbers, must be between 1-256
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(mode)
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d009      	beq.n	8006eea <set_cfg0+0x26>
	{
		reginfo[8] |= 0x04;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	781a      	ldrb	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3308      	adds	r3, #8
 8006ee0:	f042 0204 	orr.w	r2, r2, #4
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e008      	b.n	8006efc <set_cfg0+0x38>
	}
	else
	{
		reginfo[8] &= 0x80;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3308      	adds	r3, #8
 8006eee:	781a      	ldrb	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]
	}
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG0_ADDR, reginfo+8, 1);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f103 0208 	add.w	r2, r3, #8
 8006f02:	2301      	movs	r3, #1
 8006f04:	218d      	movs	r1, #141	; 0x8d
 8006f06:	2072      	movs	r0, #114	; 0x72
 8006f08:	f7fd fe2a 	bl	8004b60 <BSP_I2C1_WriteReg>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	4a03      	ldr	r2, [pc, #12]	; (8006f1c <set_cfg0+0x58>)
 8006f10:	6013      	str	r3, [r2, #0]
}
 8006f12:	bf00      	nop
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20001df8 	.word	0x20001df8

08006f20 <set_cfg1>:

int32_t set_cfg1(uint8_t *reginfo, uint8_t ALS_Mul, uint8_t again_flag)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	70bb      	strb	r3, [r7, #2]
	 *        ALS_Mul - Sets the CH3 input. Default = 0 (X Channel). Set to 1 to read IR2.
	 *        again_flag - [x1 - gain of 1, x4 - gain of 4, x16 - gain of 16, x64 - gain of 64]
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if (ALS_Mul) { reginfo[9] = reginfo[9] | 0x08; }
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <set_cfg1+0x2a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3309      	adds	r3, #9
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3309      	adds	r3, #9
 8006f40:	f042 0208 	orr.w	r2, r2, #8
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e008      	b.n	8006f5c <set_cfg1+0x3c>
	else { reginfo[9] = reginfo[9] & 0xF7; }
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3309      	adds	r3, #9
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3309      	adds	r3, #9
 8006f54:	f022 0208 	bic.w	r2, r2, #8
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]

	switch (again_flag)
 8006f5c:	78bb      	ldrb	r3, [r7, #2]
 8006f5e:	2b40      	cmp	r3, #64	; 0x40
 8006f60:	d03a      	beq.n	8006fd8 <set_cfg1+0xb8>
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	dc42      	bgt.n	8006fec <set_cfg1+0xcc>
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d023      	beq.n	8006fb2 <set_cfg1+0x92>
 8006f6a:	2b10      	cmp	r3, #16
 8006f6c:	dc3e      	bgt.n	8006fec <set_cfg1+0xcc>
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d002      	beq.n	8006f78 <set_cfg1+0x58>
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d00a      	beq.n	8006f8c <set_cfg1+0x6c>
 8006f76:	e039      	b.n	8006fec <set_cfg1+0xcc>
	{
	case 1:
		reginfo[9] = reginfo[9] & 0xFC;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3309      	adds	r3, #9
 8006f7c:	781a      	ldrb	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3309      	adds	r3, #9
 8006f82:	f022 0203 	bic.w	r2, r2, #3
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]
		break;
 8006f8a:	e041      	b.n	8007010 <set_cfg1+0xf0>
	case 4:
		reginfo[9] = reginfo[9] & 0xFD;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3309      	adds	r3, #9
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3309      	adds	r3, #9
 8006f96:	f022 0202 	bic.w	r2, r2, #2
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
		reginfo[9] = reginfo[9] | 0x01;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3309      	adds	r3, #9
 8006fa2:	781a      	ldrb	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3309      	adds	r3, #9
 8006fa8:	f042 0201 	orr.w	r2, r2, #1
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
		break;
 8006fb0:	e02e      	b.n	8007010 <set_cfg1+0xf0>
	case 16:
		reginfo[9] = reginfo[9] & 0xFE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3309      	adds	r3, #9
 8006fb6:	781a      	ldrb	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3309      	adds	r3, #9
 8006fbc:	f022 0201 	bic.w	r2, r2, #1
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]
		reginfo[9] = reginfo[9] | 0x02;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3309      	adds	r3, #9
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3309      	adds	r3, #9
 8006fce:	f042 0202 	orr.w	r2, r2, #2
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]
		break;
 8006fd6:	e01b      	b.n	8007010 <set_cfg1+0xf0>
	case 64:
		reginfo[9] = reginfo[9] | 0x03;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3309      	adds	r3, #9
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3309      	adds	r3, #9
 8006fe2:	f042 0203 	orr.w	r2, r2, #3
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
		break;
 8006fea:	e011      	b.n	8007010 <set_cfg1+0xf0>
	default:
		reginfo[9] = reginfo[9] & 0xFD;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3309      	adds	r3, #9
 8006ff0:	781a      	ldrb	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3309      	adds	r3, #9
 8006ff6:	f022 0202 	bic.w	r2, r2, #2
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]
		reginfo[9] = reginfo[9] | 0x01;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3309      	adds	r3, #9
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3309      	adds	r3, #9
 8007008:	f042 0201 	orr.w	r2, r2, #1
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
	}

	// TODO ADD ERROR CHECKING
	//set_reg(TCS3430_ADDR, CFG1_ADDR, reginfo[14]);
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG1_ADDR, reginfo+9, 1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f103 0209 	add.w	r2, r3, #9
 8007016:	2301      	movs	r3, #1
 8007018:	2190      	movs	r1, #144	; 0x90
 800701a:	2072      	movs	r0, #114	; 0x72
 800701c:	f7fd fda0 	bl	8004b60 <BSP_I2C1_WriteReg>
 8007020:	4603      	mov	r3, r0
 8007022:	4a04      	ldr	r2, [pc, #16]	; (8007034 <set_cfg1+0x114>)
 8007024:	6013      	str	r3, [r2, #0]

	return ret;
 8007026:	4b03      	ldr	r3, [pc, #12]	; (8007034 <set_cfg1+0x114>)
 8007028:	681b      	ldr	r3, [r3, #0]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20001df8 	.word	0x20001df8

08007038 <set_cfg2>:

int32_t set_cfg2(uint8_t *reginfo, uint8_t mode)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
	 * INPUT: reginfo[24] - current values of all registers
	 *        mode - If this bit is set to 1 and AGAIN in the CFG1 register is set to 11, then the 128x gain mode will be enabled.
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(mode)
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <set_cfg2+0x26>
	{
		reginfo[21] |= 0x10;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3315      	adds	r3, #21
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3315      	adds	r3, #21
 8007054:	f042 0210 	orr.w	r2, r2, #16
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e008      	b.n	8007070 <set_cfg2+0x38>
	}
	else
	{
		reginfo[21] &= 0x04;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3315      	adds	r3, #21
 8007062:	781a      	ldrb	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3315      	adds	r3, #21
 8007068:	f002 0204 	and.w	r2, r2, #4
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]
	}
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG2_ADDR, reginfo+21, 1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f103 0215 	add.w	r2, r3, #21
 8007076:	2301      	movs	r3, #1
 8007078:	219f      	movs	r1, #159	; 0x9f
 800707a:	2072      	movs	r0, #114	; 0x72
 800707c:	f7fd fd70 	bl	8004b60 <BSP_I2C1_WriteReg>
 8007080:	4603      	mov	r3, r0
 8007082:	4a03      	ldr	r2, [pc, #12]	; (8007090 <set_cfg2+0x58>)
 8007084:	6013      	str	r3, [r2, #0]
}
 8007086:	bf00      	nop
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20001df8 	.word	0x20001df8

08007094 <set_cfg3>:

int32_t set_cfg3(uint8_t *reginfo, uint8_t mode, uint8_t sai)//Mode all flag bit
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
 80070a0:	4613      	mov	r3, r2
 80070a2:	70bb      	strb	r3, [r7, #2]
	 *        mode - If this bit is set, all flag bits in the STATUS register will be reset whenever the STATUS register is read over I2C.
	 *        sai - Sleep After Interrupt. Power down the device at the end of the ALS cycle if an interrupt has been generated
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(mode)
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <set_cfg3+0x2a>
	{
		reginfo[22] |= 0x80;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3316      	adds	r3, #22
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3316      	adds	r3, #22
 80070b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	701a      	strb	r2, [r3, #0]
 80070bc:	e008      	b.n	80070d0 <set_cfg3+0x3c>
	}
	else
	{
		reginfo[22] &= 0x7F;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3316      	adds	r3, #22
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3316      	adds	r3, #22
 80070c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]
	}

	if(sai)
 80070d0:	78bb      	ldrb	r3, [r7, #2]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <set_cfg3+0x56>
	{
		reginfo[22] |= 0x10;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3316      	adds	r3, #22
 80070da:	781a      	ldrb	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3316      	adds	r3, #22
 80070e0:	f042 0210 	orr.w	r2, r2, #16
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	e008      	b.n	80070fc <set_cfg3+0x68>
	}
	else
	{
		reginfo[22] &= 0xEF;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3316      	adds	r3, #22
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3316      	adds	r3, #22
 80070f4:	f022 0210 	bic.w	r2, r2, #16
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
	}

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG3_ADDR, reginfo+22, 1);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f103 0216 	add.w	r2, r3, #22
 8007102:	2301      	movs	r3, #1
 8007104:	21ab      	movs	r1, #171	; 0xab
 8007106:	2072      	movs	r0, #114	; 0x72
 8007108:	f7fd fd2a 	bl	8004b60 <BSP_I2C1_WriteReg>
 800710c:	4603      	mov	r3, r0
 800710e:	4a04      	ldr	r2, [pc, #16]	; (8007120 <set_cfg3+0x8c>)
 8007110:	6013      	str	r3, [r2, #0]

	return ret;
 8007112:	4b03      	ldr	r3, [pc, #12]	; (8007120 <set_cfg3+0x8c>)
 8007114:	681b      	ldr	r3, [r3, #0]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20001df8 	.word	0x20001df8

08007124 <set_AutoZeroMode>:

int32_t set_AutoZeroMode(uint8_t *reginfo, uint8_t mode, uint8_t AZ_ITERATION)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
 8007130:	4613      	mov	r3, r2
 8007132:	70bb      	strb	r3, [r7, #2]
		     1: Always start at the previous (offset_c) with the auto-zero mechanism
     *        AZ_ITERATION - Run autozero automatically every nth ALS iteration (0=never, 7Fh=only at first ALS cycle, n=every nth time)
     * RETURN: 0 - success
     *         -1 - error
     */
    if (mode)
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <set_AutoZeroMode+0x2a>
    {
        reginfo[23] |= 0x80;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3317      	adds	r3, #23
 800713e:	781a      	ldrb	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3317      	adds	r3, #23
 8007144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007148:	b2d2      	uxtb	r2, r2
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	e008      	b.n	8007160 <set_AutoZeroMode+0x3c>
    }
    else
    {
        reginfo[23] &= 0x7F;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3317      	adds	r3, #23
 8007152:	781a      	ldrb	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3317      	adds	r3, #23
 8007158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	701a      	strb	r2, [r3, #0]
    }

    if(AZ_ITERATION == 0x7F)
 8007160:	78bb      	ldrb	r3, [r7, #2]
 8007162:	2b7f      	cmp	r3, #127	; 0x7f
 8007164:	d109      	bne.n	800717a <set_AutoZeroMode+0x56>
    {
    	reginfo[23] |= 0x7F;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3317      	adds	r3, #23
 800716a:	781a      	ldrb	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3317      	adds	r3, #23
 8007170:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	e008      	b.n	800718c <set_AutoZeroMode+0x68>
    }
    else
    {
    	reginfo[23] &= 0x80;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3317      	adds	r3, #23
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3317      	adds	r3, #23
 8007184:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
    }

    ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AZ_CONFIG_ADDR, reginfo+23, 1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f103 0217 	add.w	r2, r3, #23
 8007192:	2301      	movs	r3, #1
 8007194:	21d6      	movs	r1, #214	; 0xd6
 8007196:	2072      	movs	r0, #114	; 0x72
 8007198:	f7fd fce2 	bl	8004b60 <BSP_I2C1_WriteReg>
 800719c:	4603      	mov	r3, r0
 800719e:	4a04      	ldr	r2, [pc, #16]	; (80071b0 <set_AutoZeroMode+0x8c>)
 80071a0:	6013      	str	r3, [r2, #0]

    return ret; // Assuming 'ret' is a valid public variable accessible within the scope of this function
 80071a2:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <set_AutoZeroMode+0x8c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20001df8 	.word	0x20001df8

080071b4 <set_ALSInterrupt>:

int32_t set_ALSInterrupt(uint8_t *reginfo, uint8_t AIEN, uint8_t ASIEN)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
 80071c0:	4613      	mov	r3, r2
 80071c2:	70bb      	strb	r3, [r7, #2]
						 1: Always start at the previous (offset_c) with the auto-zero mechanism
	 *        ASIEN - Writing '1' to this bit enables ASAT interrupt.
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(AIEN)
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <set_ALSInterrupt+0x2a>
	{
		reginfo[24] |= 0x10;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3318      	adds	r3, #24
 80071ce:	781a      	ldrb	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3318      	adds	r3, #24
 80071d4:	f042 0210 	orr.w	r2, r2, #16
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	e008      	b.n	80071f0 <set_ALSInterrupt+0x3c>
	}
	else
	{
		reginfo[24] &= 0xEF;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3318      	adds	r3, #24
 80071e2:	781a      	ldrb	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3318      	adds	r3, #24
 80071e8:	f022 0210 	bic.w	r2, r2, #16
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
	}

	if(ASIEN)
 80071f0:	78bb      	ldrb	r3, [r7, #2]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <set_ALSInterrupt+0x56>
	{
		reginfo[24] |= 0x80;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3318      	adds	r3, #24
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3318      	adds	r3, #24
 8007200:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	e008      	b.n	800721c <set_ALSInterrupt+0x68>
	}
	else
	{
		reginfo[24] &= 0x7F;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3318      	adds	r3, #24
 800720e:	781a      	ldrb	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3318      	adds	r3, #24
 8007214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	701a      	strb	r2, [r3, #0]
	}

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, INTENAB_ADDR, reginfo+24, 1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f103 0218 	add.w	r2, r3, #24
 8007222:	2301      	movs	r3, #1
 8007224:	21dd      	movs	r1, #221	; 0xdd
 8007226:	2072      	movs	r0, #114	; 0x72
 8007228:	f7fd fc9a 	bl	8004b60 <BSP_I2C1_WriteReg>
 800722c:	4603      	mov	r3, r0
 800722e:	4a04      	ldr	r2, [pc, #16]	; (8007240 <set_ALSInterrupt+0x8c>)
 8007230:	6013      	str	r3, [r2, #0]

	return ret;
 8007232:	4b03      	ldr	r3, [pc, #12]	; (8007240 <set_ALSInterrupt+0x8c>)
 8007234:	681b      	ldr	r3, [r3, #0]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20001df8 	.word	0x20001df8

08007244 <enable_sensor>:

int32_t enable_sensor(uint8_t *reginfo, uint8_t wait_flag, uint8_t als_flag)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
 8007250:	4613      	mov	r3, r2
 8007252:	70bb      	strb	r3, [r7, #2]
	 *        wait_flag - 1 to enable wait feature, 0 to disable wait feature
	 *        als_flag - 1 to enable als feature, 0 to disable wait feature
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if (wait_flag) {
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <enable_sensor+0x26>
		reginfo[0] = reginfo[0] | 0x08;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	f043 0308 	orr.w	r3, r3, #8
 8007262:	b2da      	uxtb	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	e006      	b.n	8007278 <enable_sensor+0x34>
	} else {
		reginfo[0] = reginfo[0] & 0xF7;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	f023 0308 	bic.w	r3, r3, #8
 8007272:	b2da      	uxtb	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	701a      	strb	r2, [r3, #0]
	}

	if (als_flag) {
 8007278:	78bb      	ldrb	r3, [r7, #2]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <enable_sensor+0x4a>
		reginfo[0] = reginfo[0] | 0x03;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f043 0303 	orr.w	r3, r3, #3
 8007286:	b2da      	uxtb	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	e006      	b.n	800729c <enable_sensor+0x58>
	} else {
		reginfo[0] = reginfo[0] & 0xFC;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	b2da      	uxtb	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	701a      	strb	r2, [r3, #0]
	}

	//set_reg(TCS3430_ADDR, ENABLE_ADDR, reginfo[0]);
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, ENABLE_ADDR, reginfo, 1);
 800729c:	2301      	movs	r3, #1
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	2072      	movs	r0, #114	; 0x72
 80072a4:	f7fd fc5c 	bl	8004b60 <BSP_I2C1_WriteReg>
 80072a8:	4603      	mov	r3, r0
 80072aa:	4a04      	ldr	r2, [pc, #16]	; (80072bc <enable_sensor+0x78>)
 80072ac:	6013      	str	r3, [r2, #0]

	return ret;
 80072ae:	4b03      	ldr	r3, [pc, #12]	; (80072bc <enable_sensor+0x78>)
 80072b0:	681b      	ldr	r3, [r3, #0]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20001df8 	.word	0x20001df8

080072c0 <disable_sensor>:

int32_t disable_sensor(uint8_t *reginfo)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
	 * FUNCTION: Disable the sesor
	 * ---------
	 * INPUT: fd - the file descriptor of the i2c device
	 * RETURN: 0 - success
	 */
	reginfo[0] = reginfo[0] & 0x00;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, ENABLE_ADDR, reginfo, 1);
 80072ce:	2301      	movs	r3, #1
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	2180      	movs	r1, #128	; 0x80
 80072d4:	2072      	movs	r0, #114	; 0x72
 80072d6:	f7fd fc43 	bl	8004b60 <BSP_I2C1_WriteReg>
 80072da:	4603      	mov	r3, r0
 80072dc:	4a03      	ldr	r2, [pc, #12]	; (80072ec <disable_sensor+0x2c>)
 80072de:	6013      	str	r3, [r2, #0]
	return ret;
 80072e0:	4b02      	ldr	r3, [pc, #8]	; (80072ec <disable_sensor+0x2c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20001df8 	.word	0x20001df8

080072f0 <softReset>:

void softReset(uint8_t *reginfo)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  * FUNCTION: Change the enable register settings
  * ---------
  * INPUT: fd - the file descriptor of the i2c device
  * RETURN: 0 - success
  */
  disable_sensor(reginfo);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff ffe1 	bl	80072c0 <disable_sensor>
  set_atime(reginfo, 18);
 80072fe:	2112      	movs	r1, #18
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fdb7 	bl	8006e74 <set_atime>

  //setWaitTime(0);
  set_cfg0(reginfo, 0);
 8007306:	2100      	movs	r1, #0
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff fddb 	bl	8006ec4 <set_cfg0>

  //setALSGain(3);
  set_cfg1(reginfo, 0, 16);
 800730e:	2210      	movs	r2, #16
 8007310:	2100      	movs	r1, #0
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fe04 	bl	8006f20 <set_cfg1>

  //setHighGAIN(false);
  set_cfg2(reginfo, 1);
 8007318:	2101      	movs	r1, #1
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff fe8c 	bl	8007038 <set_cfg2>

  //setIntReadClear(false);
  //setSleepAfterInterrupt(false);
  set_cfg3(reginfo, 0, 0);
 8007320:	2200      	movs	r2, #0
 8007322:	2100      	movs	r1, #0
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff feb5 	bl	8007094 <set_cfg3>

  //setAutoZeroMode(0);
  //setAutoZeroNTHIteration(0x7f);
  set_AutoZeroMode(reginfo, 0, 0x7F);
 800732a:	227f      	movs	r2, #127	; 0x7f
 800732c:	2100      	movs	r1, #0
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fef8 	bl	8007124 <set_AutoZeroMode>

  //setALSInterrupt(false);
  //setALSSaturationInterrupt(false);
  set_ALSInterrupt(reginfo, 0, 0);
 8007334:	2200      	movs	r2, #0
 8007336:	2100      	movs	r1, #0
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ff3b 	bl	80071b4 <set_ALSInterrupt>
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <get_optics_data>:

int32_t get_optics_data(uint8_t *color_array)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]

	// TODO ADD ERROR CHECKING


	//read Z
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_Z_ADDR, color_array, 2);
 8007350:	2302      	movs	r3, #2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	2194      	movs	r1, #148	; 0x94
 8007356:	2072      	movs	r0, #114	; 0x72
 8007358:	f7fd fc34 	bl	8004bc4 <BSP_I2C1_ReadReg>
 800735c:	4603      	mov	r3, r0
 800735e:	4a13      	ldr	r2, [pc, #76]	; (80073ac <get_optics_data+0x64>)
 8007360:	6013      	str	r3, [r2, #0]
	//color_array[0] = buf[0];

	//read Y
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_Y_ADDR, color_array+2, 2);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	1c9a      	adds	r2, r3, #2
 8007366:	2302      	movs	r3, #2
 8007368:	2196      	movs	r1, #150	; 0x96
 800736a:	2072      	movs	r0, #114	; 0x72
 800736c:	f7fd fc2a 	bl	8004bc4 <BSP_I2C1_ReadReg>
 8007370:	4603      	mov	r3, r0
 8007372:	4a0e      	ldr	r2, [pc, #56]	; (80073ac <get_optics_data+0x64>)
 8007374:	6013      	str	r3, [r2, #0]
	//color_array[1] = buf[0];

	//read IR
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_IR_ADDR, color_array+4, 2);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	1d1a      	adds	r2, r3, #4
 800737a:	2302      	movs	r3, #2
 800737c:	2198      	movs	r1, #152	; 0x98
 800737e:	2072      	movs	r0, #114	; 0x72
 8007380:	f7fd fc20 	bl	8004bc4 <BSP_I2C1_ReadReg>
 8007384:	4603      	mov	r3, r0
 8007386:	4a09      	ldr	r2, [pc, #36]	; (80073ac <get_optics_data+0x64>)
 8007388:	6013      	str	r3, [r2, #0]

	//read X
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_X_ADDR, color_array+6, 2);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	1d9a      	adds	r2, r3, #6
 800738e:	2302      	movs	r3, #2
 8007390:	219a      	movs	r1, #154	; 0x9a
 8007392:	2072      	movs	r0, #114	; 0x72
 8007394:	f7fd fc16 	bl	8004bc4 <BSP_I2C1_ReadReg>
 8007398:	4603      	mov	r3, r0
 800739a:	4a04      	ldr	r2, [pc, #16]	; (80073ac <get_optics_data+0x64>)
 800739c:	6013      	str	r3, [r2, #0]

	return ret;
 800739e:	4b03      	ldr	r3, [pc, #12]	; (80073ac <get_optics_data+0x64>)
 80073a0:	681b      	ldr	r3, [r3, #0]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20001df8 	.word	0x20001df8

080073b0 <get_raw_XYZ>:

tcs3430_optics_val get_raw_XYZ(const tcs3430 *sensor) {
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]

    tcs3430_optics_val calibed;

    memset(&calibed, 0, sizeof(calibed));
 80073ba:	f107 0308 	add.w	r3, r7, #8
 80073be:	220e      	movs	r2, #14
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f00d fccc 	bl	8014d60 <memset>

    if ((get_optics_data((uint8_t*)sensor->XYZinfo)) != 0) {
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	3318      	adds	r3, #24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff ffbb 	bl	8007348 <get_optics_data>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <get_raw_XYZ+0x3e>
    	return calibed;     // if errors occur when reading from register, return empty calibed
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	461c      	mov	r4, r3
 80073dc:	f107 0308 	add.w	r3, r7, #8
 80073e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80073e2:	6020      	str	r0, [r4, #0]
 80073e4:	6061      	str	r1, [r4, #4]
 80073e6:	60a2      	str	r2, [r4, #8]
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	e043      	b.n	8007476 <get_raw_XYZ+0xc6>
    }

    uint16_t temp = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	82fb      	strh	r3, [r7, #22]

    temp = sensor->XYZinfo[1];
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	7e5b      	ldrb	r3, [r3, #25]
 80073f6:	82fb      	strh	r3, [r7, #22]
    calibed.Z = temp<<8 | sensor->XYZinfo[0];
 80073f8:	8afb      	ldrh	r3, [r7, #22]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	b21a      	sxth	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	7e1b      	ldrb	r3, [r3, #24]
 8007402:	b21b      	sxth	r3, r3
 8007404:	4313      	orrs	r3, r2
 8007406:	b21b      	sxth	r3, r3
 8007408:	b29b      	uxth	r3, r3
 800740a:	81bb      	strh	r3, [r7, #12]

    temp = sensor->XYZinfo[3];
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	7edb      	ldrb	r3, [r3, #27]
 8007410:	82fb      	strh	r3, [r7, #22]
    calibed.Y = temp<<8 | sensor->XYZinfo[2];
 8007412:	8afb      	ldrh	r3, [r7, #22]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	b21a      	sxth	r2, r3
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	7e9b      	ldrb	r3, [r3, #26]
 800741c:	b21b      	sxth	r3, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	b21b      	sxth	r3, r3
 8007422:	b29b      	uxth	r3, r3
 8007424:	817b      	strh	r3, [r7, #10]

    temp = sensor->XYZinfo[5];
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	7f5b      	ldrb	r3, [r3, #29]
 800742a:	82fb      	strh	r3, [r7, #22]
    calibed.IR = temp<<8 | sensor->XYZinfo[4];
 800742c:	8afb      	ldrh	r3, [r7, #22]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	b21a      	sxth	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	7f1b      	ldrb	r3, [r3, #28]
 8007436:	b21b      	sxth	r3, r3
 8007438:	4313      	orrs	r3, r2
 800743a:	b21b      	sxth	r3, r3
 800743c:	b29b      	uxth	r3, r3
 800743e:	81fb      	strh	r3, [r7, #14]

    temp = sensor->XYZinfo[7];
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	7fdb      	ldrb	r3, [r3, #31]
 8007444:	82fb      	strh	r3, [r7, #22]
    calibed.X = temp<<8  | sensor->XYZinfo[6];
 8007446:	8afb      	ldrh	r3, [r7, #22]
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	b21a      	sxth	r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	7f9b      	ldrb	r3, [r3, #30]
 8007450:	b21b      	sxth	r3, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	b21b      	sxth	r3, r3
 8007456:	b29b      	uxth	r3, r3
 8007458:	813b      	strh	r3, [r7, #8]

    calibed.CCT = 0;
 800745a:	2300      	movs	r3, #0
 800745c:	82bb      	strh	r3, [r7, #20]
    calibed.Lux = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	827b      	strh	r3, [r7, #18]
    /*calibed.IR = 0;*/

    return calibed;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	461c      	mov	r4, r3
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800746c:	6020      	str	r0, [r4, #0]
 800746e:	6061      	str	r1, [r4, #4]
 8007470:	60a2      	str	r2, [r4, #8]
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	81a3      	strh	r3, [r4, #12]
}
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	bd90      	pop	{r4, r7, pc}
	...

08007480 <TCS3430_print_color>:

void TCS3430_print_color(const tcs3430_optics_val *color_data) {
 8007480:	b5b0      	push	{r4, r5, r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af04      	add	r7, sp, #16
 8007486:	6078      	str	r0, [r7, #4]
     * RETURN: void
     */

    /* formatting the data to left aligned, zero decimal, width of eight floats */
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	881b      	ldrh	r3, [r3, #0]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 800748c:	4618      	mov	r0, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	885b      	ldrh	r3, [r3, #2]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 8007492:	461c      	mov	r4, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	889b      	ldrh	r3, [r3, #4]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 8007498:	461d      	mov	r5, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	88db      	ldrh	r3, [r3, #6]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 800749e:	461a      	mov	r2, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	895b      	ldrh	r3, [r3, #10]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 80074a4:	4619      	mov	r1, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	899b      	ldrh	r3, [r3, #12]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 80074aa:	9302      	str	r3, [sp, #8]
 80074ac:	9101      	str	r1, [sp, #4]
 80074ae:	9200      	str	r2, [sp, #0]
 80074b0:	462b      	mov	r3, r5
 80074b2:	4622      	mov	r2, r4
 80074b4:	4601      	mov	r1, r0
 80074b6:	4803      	ldr	r0, [pc, #12]	; (80074c4 <TCS3430_print_color+0x44>)
 80074b8:	f00d fb04 	bl	8014ac4 <iprintf>
	//fflush(stdout);
	/*
    write(stdout,color_data->X,2);
    write(stdout,color_data->Y,2);
    write(stdout,color_data->Z,2);*/
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bdb0      	pop	{r4, r5, r7, pc}
 80074c4:	080185f0 	.word	0x080185f0

080074c8 <begin>:

int32_t begin(tcs3430 *sensor_t)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
	softReset(sensor_t->reginfo);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff ff0c 	bl	80072f0 <softReset>
	ret = set_ALSInterrupt(sensor_t->reginfo, 0, 0);   //enable als interrupt
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff fe68 	bl	80071b4 <set_ALSInterrupt>
 80074e4:	4603      	mov	r3, r0
 80074e6:	4a1a      	ldr	r2, [pc, #104]	; (8007550 <begin+0x88>)
 80074e8:	6013      	str	r3, [r2, #0]
	ret = set_cfg3(sensor_t->reginfo,0,0); // enable als interrupt SC
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fdcf 	bl	8007094 <set_cfg3>
 80074f6:	4603      	mov	r3, r0
 80074f8:	4a15      	ldr	r2, [pc, #84]	; (8007550 <begin+0x88>)
 80074fa:	6013      	str	r3, [r2, #0]
	set_IRT_Cycle(sensor_t->reginfo,1); // multiple occurance of ALS interrupt
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2101      	movs	r1, #1
 8007500:	4618      	mov	r0, r3
 8007502:	f000 f8ef 	bl	80076e4 <set_IRT_Cycle>
	Update_ALSThreshold(sensor_t);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f824 	bl	8007554 <Update_ALSThreshold>
	reset_Status(sensor_t->reginfo);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 f954 	bl	80077bc <reset_Status>
	BSP_I2C1_WriteReg(TCS3430_ADDR, WTIME_ADDR, &(sensor_t->reginfo[2]), 1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	1c9a      	adds	r2, r3, #2
 8007518:	2301      	movs	r3, #1
 800751a:	2183      	movs	r1, #131	; 0x83
 800751c:	2072      	movs	r0, #114	; 0x72
 800751e:	f7fd fb1f 	bl	8004b60 <BSP_I2C1_WriteReg>

	ret = enable_sensor(sensor_t->reginfo, 0, 1);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	2100      	movs	r1, #0
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fe8b 	bl	8007244 <enable_sensor>
 800752e:	4603      	mov	r3, r0
 8007530:	4a07      	ldr	r2, [pc, #28]	; (8007550 <begin+0x88>)
 8007532:	6013      	str	r3, [r2, #0]
	ret = get_data(sensor_t->reginfo);//copy from sensor
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fc68 	bl	8006e0c <get_data>
 800753c:	4603      	mov	r3, r0
 800753e:	4a04      	ldr	r2, [pc, #16]	; (8007550 <begin+0x88>)
 8007540:	6013      	str	r3, [r2, #0]


	return ret;
 8007542:	4b03      	ldr	r3, [pc, #12]	; (8007550 <begin+0x88>)
 8007544:	681b      	ldr	r3, [r3, #0]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20001df8 	.word	0x20001df8

08007554 <Update_ALSThreshold>:
}
int MaxV(uint16_t x, uint16_t y) {
    return x < y ? x : y;
}

void Update_ALSThreshold(tcs3430 *sensor_t){
 8007554:	b590      	push	{r4, r7, lr}
 8007556:	b089      	sub	sp, #36	; 0x24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6178      	str	r0, [r7, #20]
	XYZ_data = get_raw_XYZ(sensor_t);
 800755c:	4c23      	ldr	r4, [pc, #140]	; (80075ec <Update_ALSThreshold+0x98>)
 800755e:	463b      	mov	r3, r7
 8007560:	6979      	ldr	r1, [r7, #20]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff ff24 	bl	80073b0 <get_raw_XYZ>
 8007568:	4623      	mov	r3, r4
 800756a:	463c      	mov	r4, r7
 800756c:	6820      	ldr	r0, [r4, #0]
 800756e:	6861      	ldr	r1, [r4, #4]
 8007570:	68a2      	ldr	r2, [r4, #8]
 8007572:	c307      	stmia	r3!, {r0, r1, r2}
 8007574:	89a2      	ldrh	r2, [r4, #12]
 8007576:	801a      	strh	r2, [r3, #0]
	//TODO: incoperate the above into the following
	int temp =XYZ_data.Z;
 8007578:	4b1c      	ldr	r3, [pc, #112]	; (80075ec <Update_ALSThreshold+0x98>)
 800757a:	889b      	ldrh	r3, [r3, #4]
 800757c:	61fb      	str	r3, [r7, #28]
	if (temp<Range){
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	dc02      	bgt.n	800758a <Update_ALSThreshold+0x36>
		temp = Range;
 8007584:	2301      	movs	r3, #1
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	e007      	b.n	800759a <Update_ALSThreshold+0x46>
	}else if ((temp+Range)>65525){
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8007590:	4293      	cmp	r3, r2
 8007592:	dd02      	ble.n	800759a <Update_ALSThreshold+0x46>
		temp = 65525-Range;
 8007594:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8007598:	61fb      	str	r3, [r7, #28]
	}
	set_ALS_THR_LOW(sensor_t->reginfo,temp-Range);
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	4619      	mov	r1, r3
 80075a6:	4610      	mov	r0, r2
 80075a8:	f000 f830 	bl	800760c <set_ALS_THR_LOW>
	set_ALS_THR_HIGH(sensor_t->reginfo,temp+Range);
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	3301      	adds	r3, #1
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f000 f85d 	bl	8007678 <set_ALS_THR_HIGH>
	printf("\n\rNew Low:%d New High:%d\n\r",temp-Range,temp+Range);
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	1e59      	subs	r1, r3, #1
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	3301      	adds	r3, #1
 80075c6:	461a      	mov	r2, r3
 80075c8:	4809      	ldr	r0, [pc, #36]	; (80075f0 <Update_ALSThreshold+0x9c>)
 80075ca:	f00d fa7b 	bl	8014ac4 <iprintf>
	reset_Status(sensor_t->reginfo);
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f8f3 	bl	80077bc <reset_Status>
	set_ALSInterrupt(sensor_t->reginfo, 1, 0);   //enable als interrupt
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2200      	movs	r2, #0
 80075da:	2101      	movs	r1, #1
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff fde9 	bl	80071b4 <set_ALSInterrupt>
}
 80075e2:	bf00      	nop
 80075e4:	3724      	adds	r7, #36	; 0x24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd90      	pop	{r4, r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20001de8 	.word	0x20001de8
 80075f0:	08018628 	.word	0x08018628

080075f4 <Color_Init>:



void Color_Init(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
	BSP_I2C1_Init();
 80075f8:	f7fd fa4c 	bl	8004a94 <BSP_I2C1_Init>
	begin(&sensor);
 80075fc:	4802      	ldr	r0, [pc, #8]	; (8007608 <Color_Init+0x14>)
 80075fe:	f7ff ff63 	bl	80074c8 <begin>
}
 8007602:	bf00      	nop
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20001dc8 	.word	0x20001dc8

0800760c <set_ALS_THR_LOW>:
	TCS3430_print_color(&XYZ_data);

}

void set_ALS_THR_LOW(uint8_t *reginfo, uint16_t val)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	807b      	strh	r3, [r7, #2]
	if(val > 65525)
 8007618:	887b      	ldrh	r3, [r7, #2]
 800761a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800761e:	4293      	cmp	r3, r2
 8007620:	d824      	bhi.n	800766c <set_ALS_THR_LOW+0x60>
	{
		return;
	}

	uint16_t value = val;
 8007622:	887b      	ldrh	r3, [r7, #2]
 8007624:	81fb      	strh	r3, [r7, #14]

	uint8_t low = value;
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	737b      	strb	r3, [r7, #13]
	reginfo[3] = low;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3303      	adds	r3, #3
 800762e:	7b7a      	ldrb	r2, [r7, #13]
 8007630:	701a      	strb	r2, [r3, #0]

	uint8_t high = value >> 8;
 8007632:	89fb      	ldrh	r3, [r7, #14]
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	b29b      	uxth	r3, r3
 8007638:	733b      	strb	r3, [r7, #12]
	reginfo[4] = high;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3304      	adds	r3, #4
 800763e:	7b3a      	ldrb	r2, [r7, #12]
 8007640:	701a      	strb	r2, [r3, #0]

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AILTL_ADDR, reginfo+3, 1);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	1cda      	adds	r2, r3, #3
 8007646:	2301      	movs	r3, #1
 8007648:	2184      	movs	r1, #132	; 0x84
 800764a:	2072      	movs	r0, #114	; 0x72
 800764c:	f7fd fa88 	bl	8004b60 <BSP_I2C1_WriteReg>
 8007650:	4603      	mov	r3, r0
 8007652:	4a08      	ldr	r2, [pc, #32]	; (8007674 <set_ALS_THR_LOW+0x68>)
 8007654:	6013      	str	r3, [r2, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AILTH_ADDR, reginfo+4, 1);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	1d1a      	adds	r2, r3, #4
 800765a:	2301      	movs	r3, #1
 800765c:	2185      	movs	r1, #133	; 0x85
 800765e:	2072      	movs	r0, #114	; 0x72
 8007660:	f7fd fa7e 	bl	8004b60 <BSP_I2C1_WriteReg>
 8007664:	4603      	mov	r3, r0
 8007666:	4a03      	ldr	r2, [pc, #12]	; (8007674 <set_ALS_THR_LOW+0x68>)
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	e000      	b.n	800766e <set_ALS_THR_LOW+0x62>
		return;
 800766c:	bf00      	nop


}
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20001df8 	.word	0x20001df8

08007678 <set_ALS_THR_HIGH>:

void set_ALS_THR_HIGH(uint8_t *reginfo, uint16_t val)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	807b      	strh	r3, [r7, #2]
	if(val > 65525)
 8007684:	887b      	ldrh	r3, [r7, #2]
 8007686:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800768a:	4293      	cmp	r3, r2
 800768c:	d824      	bhi.n	80076d8 <set_ALS_THR_HIGH+0x60>
	{
		return;
	}
	uint16_t value = val;
 800768e:	887b      	ldrh	r3, [r7, #2]
 8007690:	81fb      	strh	r3, [r7, #14]

	uint8_t low = value;
 8007692:	89fb      	ldrh	r3, [r7, #14]
 8007694:	737b      	strb	r3, [r7, #13]
	reginfo[5] = low;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3305      	adds	r3, #5
 800769a:	7b7a      	ldrb	r2, [r7, #13]
 800769c:	701a      	strb	r2, [r3, #0]

	uint8_t high = value >> 8;
 800769e:	89fb      	ldrh	r3, [r7, #14]
 80076a0:	0a1b      	lsrs	r3, r3, #8
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	733b      	strb	r3, [r7, #12]
	reginfo[6] = high;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3306      	adds	r3, #6
 80076aa:	7b3a      	ldrb	r2, [r7, #12]
 80076ac:	701a      	strb	r2, [r3, #0]

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AIHTL_ADDR, reginfo+5, 1);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	1d5a      	adds	r2, r3, #5
 80076b2:	2301      	movs	r3, #1
 80076b4:	2186      	movs	r1, #134	; 0x86
 80076b6:	2072      	movs	r0, #114	; 0x72
 80076b8:	f7fd fa52 	bl	8004b60 <BSP_I2C1_WriteReg>
 80076bc:	4603      	mov	r3, r0
 80076be:	4a08      	ldr	r2, [pc, #32]	; (80076e0 <set_ALS_THR_HIGH+0x68>)
 80076c0:	6013      	str	r3, [r2, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AIHTH_ADDR, reginfo+6, 1);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	1d9a      	adds	r2, r3, #6
 80076c6:	2301      	movs	r3, #1
 80076c8:	2187      	movs	r1, #135	; 0x87
 80076ca:	2072      	movs	r0, #114	; 0x72
 80076cc:	f7fd fa48 	bl	8004b60 <BSP_I2C1_WriteReg>
 80076d0:	4603      	mov	r3, r0
 80076d2:	4a03      	ldr	r2, [pc, #12]	; (80076e0 <set_ALS_THR_HIGH+0x68>)
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	e000      	b.n	80076da <set_ALS_THR_HIGH+0x62>
		return;
 80076d8:	bf00      	nop


}
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	20001df8 	.word	0x20001df8

080076e4 <set_IRT_Cycle>:

void set_IRT_Cycle(uint8_t *reginfo, uint8_t cycle)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
	if(cycle > 15)
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d901      	bls.n	80076fa <set_IRT_Cycle+0x16>
	{
		cycle = 15;
 80076f6:	230f      	movs	r3, #15
 80076f8:	70fb      	strb	r3, [r7, #3]
	}
	reginfo[7] = cycle;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3307      	adds	r3, #7
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	701a      	strb	r2, [r3, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, PERS_ADDR, reginfo+7, 1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	1dda      	adds	r2, r3, #7
 8007706:	2301      	movs	r3, #1
 8007708:	218c      	movs	r1, #140	; 0x8c
 800770a:	2072      	movs	r0, #114	; 0x72
 800770c:	f7fd fa28 	bl	8004b60 <BSP_I2C1_WriteReg>
 8007710:	4603      	mov	r3, r0
 8007712:	4a03      	ldr	r2, [pc, #12]	; (8007720 <set_IRT_Cycle+0x3c>)
 8007714:	6013      	str	r3, [r2, #0]


}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20001df8 	.word	0x20001df8

08007724 <TCS3430_print_reg>:

void TCS3430_print_reg(tcs3430 *sensor_t) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b09c      	sub	sp, #112	; 0x70
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	{

		int addr[] = {0x80, 0x81, 0x83, 0x84, 0x85, 0x86, 0x87, 0x8C,
 800772c:	4a20      	ldr	r2, [pc, #128]	; (80077b0 <TCS3430_print_reg+0x8c>)
 800772e:	f107 0308 	add.w	r3, r7, #8
 8007732:	4611      	mov	r1, r2
 8007734:	2264      	movs	r2, #100	; 0x64
 8007736:	4618      	mov	r0, r3
 8007738:	f00d fb91 	bl	8014e5e <memcpy>
					0x8D, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
					0x98, 0x99, 0x9A, 0x9B, 0x9F, 0xAB, 0xD6, 0xDD};


		for(int i = 0; i < 25; i++)
 800773c:	2300      	movs	r3, #0
 800773e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007740:	e022      	b.n	8007788 <TCS3430_print_reg+0x64>
		{
			BSP_I2C1_ReadReg(TCS3430_ADDR, addr[i], &(sensor_t->reginfo[i]), 1);
 8007742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	3370      	adds	r3, #112	; 0x70
 8007748:	443b      	add	r3, r7
 800774a:	f853 3c68 	ldr.w	r3, [r3, #-104]
 800774e:	b299      	uxth	r1, r3
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007754:	441a      	add	r2, r3
 8007756:	2301      	movs	r3, #1
 8007758:	2072      	movs	r0, #114	; 0x72
 800775a:	f7fd fa33 	bl	8004bc4 <BSP_I2C1_ReadReg>
			printf("%x---%d---%x\n\r",addr[i],i,(sensor_t->reginfo[i]));
 800775e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	3370      	adds	r3, #112	; 0x70
 8007764:	443b      	add	r3, r7
 8007766:	f853 1c68 	ldr.w	r1, [r3, #-104]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776e:	4413      	add	r3, r2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007774:	480f      	ldr	r0, [pc, #60]	; (80077b4 <TCS3430_print_reg+0x90>)
 8007776:	f00d f9a5 	bl	8014ac4 <iprintf>
			if(ret != BSP_ERROR_NONE) break;
 800777a:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <TCS3430_print_reg+0x94>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <TCS3430_print_reg+0x6c>
		for(int i = 0; i < 25; i++)
 8007782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007784:	3301      	adds	r3, #1
 8007786:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800778a:	2b18      	cmp	r3, #24
 800778c:	ddd9      	ble.n	8007742 <TCS3430_print_reg+0x1e>
 800778e:	e000      	b.n	8007792 <TCS3430_print_reg+0x6e>
			if(ret != BSP_ERROR_NONE) break;
 8007790:	bf00      	nop
		}
		ret = BSP_I2C1_WriteReg(TCS3430_ADDR, STATUS_ADDR, &(sensor_t->reginfo[12]), 0x10);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f103 020c 	add.w	r2, r3, #12
 8007798:	2310      	movs	r3, #16
 800779a:	2193      	movs	r1, #147	; 0x93
 800779c:	2072      	movs	r0, #114	; 0x72
 800779e:	f7fd f9df 	bl	8004b60 <BSP_I2C1_WriteReg>
 80077a2:	4603      	mov	r3, r0
 80077a4:	4a04      	ldr	r2, [pc, #16]	; (80077b8 <TCS3430_print_reg+0x94>)
 80077a6:	6013      	str	r3, [r2, #0]

	}

}
 80077a8:	bf00      	nop
 80077aa:	3770      	adds	r7, #112	; 0x70
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	08018654 	.word	0x08018654
 80077b4:	08018644 	.word	0x08018644
 80077b8:	20001df8 	.word	0x20001df8

080077bc <reset_Status>:

int32_t reset_Status(uint8_t *reginfo)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	reginfo[12] = 0xFF;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	330c      	adds	r3, #12
 80077c8:	22ff      	movs	r2, #255	; 0xff
 80077ca:	701a      	strb	r2, [r3, #0]

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, STATUS_ADDR, reginfo+12, 1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f103 020c 	add.w	r2, r3, #12
 80077d2:	2301      	movs	r3, #1
 80077d4:	2193      	movs	r1, #147	; 0x93
 80077d6:	2072      	movs	r0, #114	; 0x72
 80077d8:	f7fd f9c2 	bl	8004b60 <BSP_I2C1_WriteReg>
 80077dc:	4603      	mov	r3, r0
 80077de:	4a04      	ldr	r2, [pc, #16]	; (80077f0 <reset_Status+0x34>)
 80077e0:	6013      	str	r3, [r2, #0]

	return ret;
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <reset_Status+0x34>)
 80077e4:	681b      	ldr	r3, [r3, #0]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20001df8 	.word	0x20001df8

080077f4 <colordiff>:

void colordiff (tcs3430_optics_val base, tcs3430_optics_val current, float * delta_X, float * delta_Y){
 80077f4:	b490      	push	{r4, r7}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	463c      	mov	r4, r7
 80077fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    //calculate cie color
    float base_x,base_y,curr_x,curr_y;
    base_x = (float)base.X/(float)(base.X+base.Y+base.Z)*10;
 8007800:	883b      	ldrh	r3, [r7, #0]
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	883b      	ldrh	r3, [r7, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	887b      	ldrh	r3, [r7, #2]
 8007810:	4413      	add	r3, r2
 8007812:	88ba      	ldrh	r2, [r7, #4]
 8007814:	4413      	add	r3, r2
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800781e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007822:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800782a:	edc7 7a07 	vstr	s15, [r7, #28]
    base_y = (float)base.Y/(float)(base.X+base.Y+base.Z)*10;
 800782e:	887b      	ldrh	r3, [r7, #2]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007838:	883b      	ldrh	r3, [r7, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	887b      	ldrh	r3, [r7, #2]
 800783e:	4413      	add	r3, r2
 8007840:	88ba      	ldrh	r2, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	ee07 3a90 	vmov	s15, r3
 8007848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800784c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007850:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007858:	edc7 7a06 	vstr	s15, [r7, #24]
    curr_x = (float)current.X/(float)(current.X+current.Y+current.Z)*10;
 800785c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007866:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007868:	461a      	mov	r2, r3
 800786a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800786c:	4413      	add	r3, r2
 800786e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007870:	4413      	add	r3, r2
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800787a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007886:	edc7 7a05 	vstr	s15, [r7, #20]
    curr_y = (float)current.Y/(float)(current.X+current.Y+current.Z)*10;
 800788a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800788c:	ee07 3a90 	vmov	s15, r3
 8007890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007894:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007896:	461a      	mov	r2, r3
 8007898:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800789a:	4413      	add	r3, r2
 800789c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800789e:	4413      	add	r3, r2
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80078b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078b4:	edc7 7a04 	vstr	s15, [r7, #16]


    *delta_X = curr_x - base_x;//calculate frame deltaX
 80078b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80078bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80078c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	edc3 7a00 	vstr	s15, [r3]
    *delta_Y = curr_y - base_y;//calculate frame deltaY
 80078ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80078ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80078d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d8:	edc3 7a00 	vstr	s15, [r3]
}
 80078dc:	bf00      	nop
 80078de:	3720      	adds	r7, #32
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc90      	pop	{r4, r7}
 80078e4:	4770      	bx	lr

080078e6 <_vl53l8cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	4608      	mov	r0, r1
 80078f0:	4611      	mov	r1, r2
 80078f2:	461a      	mov	r2, r3
 80078f4:	4603      	mov	r3, r0
 80078f6:	70fb      	strb	r3, [r7, #3]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70bb      	strb	r3, [r7, #2]
 80078fc:	4613      	mov	r3, r2
 80078fe:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8007908:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	8839      	ldrh	r1, [r7, #0]
 8007914:	f002 f9fc 	bl	8009d10 <RdMulti>
 8007918:	4603      	mov	r3, r0
 800791a:	461a      	mov	r2, r3
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	4313      	orrs	r3, r2
 8007920:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	210a      	movs	r1, #10
 8007926:	4618      	mov	r0, r3
 8007928:	f002 fa3f 	bl	8009daa <WaitMs>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	4313      	orrs	r3, r2
 8007934:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2bc7      	cmp	r3, #199	; 0xc7
 800793a:	d904      	bls.n	8007946 <_vl53l8cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L8CX_STATUS_TIMEOUT_ERROR;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	f043 0301 	orr.w	r3, r3, #1
 8007942:	73fb      	strb	r3, [r7, #15]
			break;
 8007944:	e01a      	b.n	800797c <_vl53l8cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8007946:	78fb      	ldrb	r3, [r7, #3]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d909      	bls.n	8007960 <_vl53l8cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8007952:	2b7e      	cmp	r3, #126	; 0x7e
 8007954:	d904      	bls.n	8007960 <_vl53l8cx_poll_for_answer+0x7a>
		{
			status |= VL53L8CX_MCU_ERROR;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800795c:	73fb      	strb	r3, [r7, #15]
			break;
 800795e:	e00d      	b.n	800797c <_vl53l8cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	3301      	adds	r3, #1
 8007964:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8007966:	78bb      	ldrb	r3, [r7, #2]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	4413      	add	r3, r2
 800796c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8007970:	7e3b      	ldrb	r3, [r7, #24]
 8007972:	4013      	ands	r3, r2
 8007974:	b2db      	uxtb	r3, r3
 8007976:	7f3a      	ldrb	r2, [r7, #28]
 8007978:	429a      	cmp	r2, r3
 800797a:	d1c5      	bne.n	8007908 <_vl53l8cx_poll_for_answer+0x22>

	return status;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <_vl53l8cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l8cx_poll_for_mcu_boot(
              VL53L8CX_Configuration      *p_dev)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L8CX_STATUS_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f107 020b 	add.w	r2, r7, #11
 800799c:	2106      	movs	r1, #6
 800799e:	4618      	mov	r0, r3
 80079a0:	f002 f974 	bl	8009c8c <RdByte>
 80079a4:	4603      	mov	r3, r0
 80079a6:	461a      	mov	r2, r3
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	b25b      	sxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da10      	bge.n	80079d8 <_vl53l8cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f107 020a 	add.w	r2, r7, #10
 80079bc:	2107      	movs	r1, #7
 80079be:	4618      	mov	r0, r3
 80079c0:	f002 f964 	bl	8009c8c <RdByte>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	73fb      	strb	r3, [r7, #15]
            if(go2_status1 & (uint8_t)0x01)
 80079ce:	7abb      	ldrb	r3, [r7, #10]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d111      	bne.n	80079fc <_vl53l8cx_poll_for_mcu_boot+0x76>
            {
            	status |= VL53L8CX_STATUS_OK;
    			break;
            }
		}
		(void)WaitMs(&(p_dev->platform), 1);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2101      	movs	r1, #1
 80079dc:	4618      	mov	r0, r3
 80079de:	f002 f9e4 	bl	8009daa <WaitMs>
		timeout++;
 80079e2:	89bb      	ldrh	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <_vl53l8cx_poll_for_mcu_boot+0x7a>
			break;
		}
	}while (timeout < (uint16_t)500);
 80079f2:	89bb      	ldrh	r3, [r7, #12]
 80079f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80079f8:	d3cd      	bcc.n	8007996 <_vl53l8cx_poll_for_mcu_boot+0x10>
 80079fa:	e002      	b.n	8007a02 <_vl53l8cx_poll_for_mcu_boot+0x7c>
    			break;
 80079fc:	bf00      	nop
 80079fe:	e000      	b.n	8007a02 <_vl53l8cx_poll_for_mcu_boot+0x7c>
			break;
 8007a00:	bf00      	nop

   return status;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <_vl53l8cx_send_offset_data>:
 */

static uint8_t _vl53l8cx_send_offset_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b0ea      	sub	sp, #424	; 0x1a8
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a16:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a1a:	6018      	str	r0, [r3, #0]
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a22:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8007a26:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8007a2e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007a36:	4ad9      	ldr	r2, [pc, #868]	; (8007d9c <_vl53l8cx_send_offset_data+0x390>)
 8007a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a3c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8007a40:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007a48:	4ad5      	ldr	r2, [pc, #852]	; (8007da0 <_vl53l8cx_send_offset_data+0x394>)
 8007a4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a4e:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8007a52:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a56:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L8CX_OFFSET_BUFFER_SIZE);
 8007a60:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8007a6c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007a70:	4619      	mov	r1, r3
 8007a72:	f00d f9f4 	bl	8014e5e <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4){
 8007a76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a7a:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b10      	cmp	r3, #16
 8007a82:	f040 8122 	bne.w	8007cca <_vl53l8cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8007a86:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a8a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8007a94:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007a98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007a9c:	cb03      	ldmia	r3!, {r0, r1}
 8007a9e:	6010      	str	r0, [r2, #0]
 8007aa0:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8007aa2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007aa6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007ab0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f002 f942 	bl	8009d3e <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8007aba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007abe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 8007ac8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f00d f9c4 	bl	8014e5e <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8007ad6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ada:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 8007ae4:	f107 0318 	add.w	r3, r7, #24
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	4618      	mov	r0, r3
 8007aec:	f00d f9b7 	bl	8014e5e <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007af6:	e0ac      	b.n	8007c52 <_vl53l8cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8007af8:	2300      	movs	r3, #0
 8007afa:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8007afe:	e09c      	b.n	8007c3a <_vl53l8cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8007b00:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8007b04:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	005a      	lsls	r2, r3, #1
 8007b0e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8007b1a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007b1e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	440b      	add	r3, r1
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	1c59      	adds	r1, r3, #1
 8007b2a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b36:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8007b38:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007b3c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	440b      	add	r3, r1
 8007b44:	3304      	adds	r3, #4
 8007b46:	0059      	lsls	r1, r3, #1
 8007b48:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b54:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8007b56:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007b5a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	440b      	add	r3, r1
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	f103 0109 	add.w	r1, r3, #9
 8007b68:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b74:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8007b76:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007b7a:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8007b7e:	0092      	lsls	r2, r2, #2
 8007b80:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8007b82:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8007b84:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8007b90:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8007b94:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	4413      	add	r3, r2
 8007b9c:	005a      	lsls	r2, r3, #1
 8007b9e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007ba2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007ba6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007baa:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8007bac:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8007bb0:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007bb4:	00db      	lsls	r3, r3, #3
 8007bb6:	4413      	add	r3, r2
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007bc0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007bc4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007bc8:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8007bca:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007bce:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8007bd2:	00d2      	lsls	r2, r2, #3
 8007bd4:	440a      	add	r2, r1
 8007bd6:	3204      	adds	r2, #4
 8007bd8:	0051      	lsls	r1, r2, #1
 8007bda:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8007bde:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8007be2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8007be6:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8007be8:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8007bec:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8007bf0:	00d2      	lsls	r2, r2, #3
 8007bf2:	440a      	add	r2, r1
 8007bf4:	0052      	lsls	r2, r2, #1
 8007bf6:	f102 0109 	add.w	r1, r2, #9
 8007bfa:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8007bfe:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8007c02:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8007c06:	4413      	add	r3, r2
                                  /(int16_t)4;
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	da00      	bge.n	8007c0e <_vl53l8cx_send_offset_data+0x202>
 8007c0c:	3303      	adds	r3, #3
 8007c0e:	109b      	asrs	r3, r3, #2
 8007c10:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8007c12:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8007c16:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	441a      	add	r2, r3
 8007c1e:	b209      	sxth	r1, r1
 8007c20:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c24:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007c28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8007c2c:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	3301      	adds	r3, #1
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8007c3a:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	f77f af5e 	ble.w	8007b00 <_vl53l8cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8007c44:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007c52:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	f77f af4e 	ble.w	8007af8 <_vl53l8cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8007c5c:	f107 0318 	add.w	r3, r7, #24
 8007c60:	3320      	adds	r3, #32
 8007c62:	2260      	movs	r2, #96	; 0x60
 8007c64:	2100      	movs	r1, #0
 8007c66:	4618      	mov	r0, r3
 8007c68:	f00d f87a 	bl	8014d60 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8007c6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007c70:	3340      	adds	r3, #64	; 0x40
 8007c72:	22c0      	movs	r2, #192	; 0xc0
 8007c74:	2100      	movs	r1, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f00d f872 	bl	8014d60 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8007c7c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8007c8a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8007c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c92:	4618      	mov	r0, r3
 8007c94:	f00d f8e3 	bl	8014e5e <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8007c98:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007c9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8007ca6:	f107 0118 	add.w	r1, r7, #24
 8007caa:	2280      	movs	r2, #128	; 0x80
 8007cac:	4618      	mov	r0, r3
 8007cae:	f00d f8d6 	bl	8014e5e <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L8CX_OFFSET_BUFFER_SIZE);
 8007cb2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007cb6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007cc0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f002 f83a 	bl	8009d3e <SwapBuffer>
	}

	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8007cd0:	e01b      	b.n	8007d0a <_vl53l8cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8007cd2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8007cd6:	f103 0208 	add.w	r2, r3, #8
 8007cda:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8007cde:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8007ce2:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 8007ce6:	6809      	ldr	r1, [r1, #0]
 8007ce8:	440a      	add	r2, r1
 8007cea:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 8007cee:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8007cf2:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	460a      	mov	r2, r1
 8007cfc:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L8CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8007d00:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8007d04:	3301      	adds	r3, #1
 8007d06:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8007d0a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8007d0e:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8007d12:	d3de      	bcc.n	8007cd2 <_vl53l8cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8007d14:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007d18:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 8007d22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007d26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007d2a:	cb03      	ldmia	r3!, {r0, r1}
 8007d2c:	6010      	str	r0, [r2, #0]
 8007d2e:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8007d30:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007d34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007d3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8007d48:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8007d4c:	f642 6118 	movw	r1, #11800	; 0x2e18
 8007d50:	f001 ffc7 	bl	8009ce2 <WrMulti>
 8007d54:	4603      	mov	r3, r0
 8007d56:	461a      	mov	r2, r3
 8007d58:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8007d62:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8007d66:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	23ff      	movs	r3, #255	; 0xff
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8007d76:	2201      	movs	r2, #1
 8007d78:	2104      	movs	r1, #4
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	f7ff fdb3 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 8007d80:	4603      	mov	r3, r0
 8007d82:	461a      	mov	r2, r3
 8007d84:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8007d8e:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	080186b8 	.word	0x080186b8
 8007da0:	080186c0 	.word	0x080186c0

08007da4 <_vl53l8cx_send_xtalk_data>:
 */

static uint8_t _vl53l8cx_send_xtalk_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b0ca      	sub	sp, #296	; 0x128
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007dae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007db2:	6018      	str	r0, [r3, #0]
 8007db4:	460a      	mov	r2, r1
 8007db6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007dba:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007dbe:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8007dc6:	4a9a      	ldr	r2, [pc, #616]	; (8008030 <_vl53l8cx_send_xtalk_data+0x28c>)
 8007dc8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007dcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dd0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8007dd4:	4a97      	ldr	r2, [pc, #604]	; (8008034 <_vl53l8cx_send_xtalk_data+0x290>)
 8007dd6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007dda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dde:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8007de2:	4b95      	ldr	r3, [pc, #596]	; (8008038 <_vl53l8cx_send_xtalk_data+0x294>)
 8007de4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8007de8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007dec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 8007df6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007dfa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e04:	f44f 7242 	mov.w	r2, #776	; 0x308
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f00d f828 	bl	8014e5e <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L8CX_RESOLUTION_4X4)
 8007e0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e12:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b10      	cmp	r3, #16
 8007e1a:	f040 80d2 	bne.w	8007fc2 <_vl53l8cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8007e1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007e32:	cb03      	ldmia	r3!, {r0, r1}
 8007e34:	6010      	str	r0, [r2, #0]
 8007e36:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8007e38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8007e46:	461a      	mov	r2, r3
 8007e48:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8007e4c:	cb03      	ldmia	r3!, {r0, r1}
 8007e4e:	6010      	str	r0, [r2, #0]
 8007e50:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8007e52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007e60:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 ff6a 	bl	8009d3e <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8007e6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007e6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f203 5144 	addw	r1, r3, #1348	; 0x544
 8007e78:	f107 0308 	add.w	r3, r7, #8
 8007e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e80:	4618      	mov	r0, r3
 8007e82:	f00c ffec 	bl	8014e5e <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8007e86:	2300      	movs	r3, #0
 8007e88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007e8c:	e05d      	b.n	8007f4a <_vl53l8cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8007e94:	e04e      	b.n	8007f34 <_vl53l8cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8007e96:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 8007e9a:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	4413      	add	r3, r2
 8007ea2:	005a      	lsls	r2, r3, #1
 8007ea4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ea8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007eac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8007eb0:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8007eb4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	440b      	add	r3, r1
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	1c59      	adds	r1, r3, #1
 8007ec0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ec4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007ec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ecc:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8007ece:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8007ed2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	440b      	add	r3, r1
 8007eda:	3304      	adds	r3, #4
 8007edc:	0059      	lsls	r1, r3, #1
 8007ede:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ee2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007ee6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007eea:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8007eec:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8007ef0:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	440b      	add	r3, r1
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	f103 0109 	add.w	r1, r3, #9
 8007efe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007f02:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007f06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f0a:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8007f0c:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8007f10:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8007f14:	0092      	lsls	r2, r2, #2
 8007f16:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8007f18:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8007f1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007f1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8007f26:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8007f34:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	ddac      	ble.n	8007e96 <_vl53l8cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8007f3c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	3301      	adds	r3, #1
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8007f4a:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	dd9d      	ble.n	8007e8e <_vl53l8cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8007f52:	f107 0308 	add.w	r3, r7, #8
 8007f56:	3340      	adds	r3, #64	; 0x40
 8007f58:	22c0      	movs	r2, #192	; 0xc0
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f00c feff 	bl	8014d60 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8007f62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007f66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8007f70:	f107 0108 	add.w	r1, r7, #8
 8007f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f00c ff70 	bl	8014e5e <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8007f7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007f82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007f8c:	f44f 7142 	mov.w	r1, #776	; 0x308
 8007f90:	4618      	mov	r0, r3
 8007f92:	f001 fed4 	bl	8009d3e <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8007f96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007f9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8007fa4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007fa8:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8007faa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007fae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8007fb8:	2204      	movs	r2, #4
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f00c fecf 	bl	8014d60 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8007fc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007fc6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007fca:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L8CX_XTALK_BUFFER_SIZE);
 8007fcc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007fd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8007fda:	f44f 7342 	mov.w	r3, #776	; 0x308
 8007fde:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 8007fe2:	f001 fe7e 	bl	8009ce2 <WrMulti>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	461a      	mov	r2, r3
 8007fea:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8007ff4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ff8:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	23ff      	movs	r3, #255	; 0xff
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008008:	2201      	movs	r2, #1
 800800a:	2104      	movs	r1, #4
 800800c:	6800      	ldr	r0, [r0, #0]
 800800e:	f7ff fc6a 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800801a:	4313      	orrs	r3, r2
 800801c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8008020:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8008024:	4618      	mov	r0, r3
 8008026:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	080186c8 	.word	0x080186c8
 8008034:	080186d0 	.word	0x080186d0
 8008038:	0001fca0 	.word	0x0001fca0

0800803c <vl53l8cx_init>:
	return status;
}

uint8_t vl53l8cx_init(
		VL53L8CX_Configuration		*p_dev)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af02      	add	r7, sp, #8
 8008042:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L8CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8008048:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800804c:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 800804e:	2301      	movs	r3, #1
 8008050:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L8CX_DEFAULT_XTALK;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a7e      	ldr	r2, [pc, #504]	; (8008250 <vl53l8cx_init+0x214>)
 8008056:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L8CX_DEFAULT_CONFIGURATION;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a7e      	ldr	r2, [pc, #504]	; (8008254 <vl53l8cx_init+0x218>)
 800805c:	619a      	str	r2, [r3, #24]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008066:	4618      	mov	r0, r3
 8008068:	f001 fe25 	bl	8009cb6 <WrByte>
 800806c:	4603      	mov	r3, r0
 800806e:	461a      	mov	r2, r3
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	4313      	orrs	r3, r2
 8008074:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2204      	movs	r2, #4
 800807a:	2109      	movs	r1, #9
 800807c:	4618      	mov	r0, r3
 800807e:	f001 fe1a 	bl	8009cb6 <WrByte>
 8008082:	4603      	mov	r3, r0
 8008084:	461a      	mov	r2, r3
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	4313      	orrs	r3, r2
 800808a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2240      	movs	r2, #64	; 0x40
 8008090:	210f      	movs	r1, #15
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fe0f 	bl	8009cb6 <WrByte>
 8008098:	4603      	mov	r3, r0
 800809a:	461a      	mov	r2, r3
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	4313      	orrs	r3, r2
 80080a0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2203      	movs	r2, #3
 80080a6:	210a      	movs	r1, #10
 80080a8:	4618      	mov	r0, r3
 80080aa:	f001 fe04 	bl	8009cb6 <WrByte>
 80080ae:	4603      	mov	r3, r0
 80080b0:	461a      	mov	r2, r3
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f107 0216 	add.w	r2, r7, #22
 80080be:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80080c2:	4618      	mov	r0, r3
 80080c4:	f001 fde2 	bl	8009c8c <RdByte>
 80080c8:	4603      	mov	r3, r0
 80080ca:	461a      	mov	r2, r3
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	210c      	movs	r1, #12
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 fdec 	bl	8009cb6 <WrByte>
 80080de:	4603      	mov	r3, r0
 80080e0:	461a      	mov	r2, r3
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f240 1101 	movw	r1, #257	; 0x101
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 fde0 	bl	8009cb6 <WrByte>
 80080f6:	4603      	mov	r3, r0
 80080f8:	461a      	mov	r2, r3
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f44f 7181 	mov.w	r1, #258	; 0x102
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fdd4 	bl	8009cb6 <WrByte>
 800810e:	4603      	mov	r3, r0
 8008110:	461a      	mov	r2, r3
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	4313      	orrs	r3, r2
 8008116:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8008120:	4618      	mov	r0, r3
 8008122:	f001 fdc8 	bl	8009cb6 <WrByte>
 8008126:	4603      	mov	r3, r0
 8008128:	461a      	mov	r2, r3
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	4313      	orrs	r3, r2
 800812e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f244 0102 	movw	r1, #16386	; 0x4002
 8008138:	4618      	mov	r0, r3
 800813a:	f001 fdbc 	bl	8009cb6 <WrByte>
 800813e:	4603      	mov	r3, r0
 8008140:	461a      	mov	r2, r3
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	4313      	orrs	r3, r2
 8008146:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f244 0102 	movw	r1, #16386	; 0x4002
 8008150:	4618      	mov	r0, r3
 8008152:	f001 fdb0 	bl	8009cb6 <WrByte>
 8008156:	4603      	mov	r3, r0
 8008158:	461a      	mov	r2, r3
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	4313      	orrs	r3, r2
 800815e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2203      	movs	r2, #3
 8008164:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8008168:	4618      	mov	r0, r3
 800816a:	f001 fda4 	bl	8009cb6 <WrByte>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	4313      	orrs	r3, r2
 8008176:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f240 1103 	movw	r1, #259	; 0x103
 8008180:	4618      	mov	r0, r3
 8008182:	f001 fd98 	bl	8009cb6 <WrByte>
 8008186:	4603      	mov	r3, r0
 8008188:	461a      	mov	r2, r3
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	4313      	orrs	r3, r2
 800818e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	210c      	movs	r1, #12
 8008196:	4618      	mov	r0, r3
 8008198:	f001 fd8d 	bl	8009cb6 <WrByte>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2243      	movs	r2, #67	; 0x43
 80081aa:	210f      	movs	r1, #15
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 fd82 	bl	8009cb6 <WrByte>
 80081b2:	4603      	mov	r3, r0
 80081b4:	461a      	mov	r2, r3
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2101      	movs	r1, #1
 80081c0:	4618      	mov	r0, r3
 80081c2:	f001 fdf2 	bl	8009daa <WaitMs>
 80081c6:	4603      	mov	r3, r0
 80081c8:	461a      	mov	r2, r3
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2240      	movs	r2, #64	; 0x40
 80081d4:	210f      	movs	r1, #15
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 fd6d 	bl	8009cb6 <WrByte>
 80081dc:	4603      	mov	r3, r0
 80081de:	461a      	mov	r2, r3
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	210a      	movs	r1, #10
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 fd62 	bl	8009cb6 <WrByte>
 80081f2:	4603      	mov	r3, r0
 80081f4:	461a      	mov	r2, r3
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2164      	movs	r1, #100	; 0x64
 8008200:	4618      	mov	r0, r3
 8008202:	f001 fdd2 	bl	8009daa <WaitMs>
 8008206:	4603      	mov	r3, r0
 8008208:	461a      	mov	r2, r3
 800820a:	7dfb      	ldrb	r3, [r7, #23]
 800820c:	4313      	orrs	r3, r2
 800820e:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fd4c 	bl	8009cb6 <WrByte>
 800821e:	4603      	mov	r3, r0
 8008220:	461a      	mov	r2, r3
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	4313      	orrs	r3, r2
 8008226:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8008228:	2301      	movs	r3, #1
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	23ff      	movs	r3, #255	; 0xff
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	2306      	movs	r3, #6
 8008232:	2200      	movs	r2, #0
 8008234:	2101      	movs	r1, #1
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff fb55 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 800823c:	4603      	mov	r3, r0
 800823e:	461a      	mov	r2, r3
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	4313      	orrs	r3, r2
 8008244:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 830c 	bne.w	8008866 <vl53l8cx_init+0x82a>
 800824e:	e003      	b.n	8008258 <vl53l8cx_init+0x21c>
 8008250:	0802dcbc 	.word	0x0802dcbc
 8008254:	0802d8f0 	.word	0x0802d8f0
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	210e      	movs	r1, #14
 800825e:	4618      	mov	r0, r3
 8008260:	f001 fd29 	bl	8009cb6 <WrByte>
 8008264:	4603      	mov	r3, r0
 8008266:	461a      	mov	r2, r3
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	4313      	orrs	r3, r2
 800826c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2202      	movs	r2, #2
 8008272:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008276:	4618      	mov	r0, r3
 8008278:	f001 fd1d 	bl	8009cb6 <WrByte>
 800827c:	4603      	mov	r3, r0
 800827e:	461a      	mov	r2, r3
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	4313      	orrs	r3, r2
 8008284:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800828e:	4618      	mov	r0, r3
 8008290:	f001 fd11 	bl	8009cb6 <WrByte>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	4313      	orrs	r3, r2
 800829c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2203      	movs	r2, #3
 80082a2:	2106      	movs	r1, #6
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fd06 	bl	8009cb6 <WrByte>
 80082aa:	4603      	mov	r3, r0
 80082ac:	461a      	mov	r2, r3
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80082b4:	2310      	movs	r3, #16
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	2310      	movs	r3, #16
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	2321      	movs	r3, #33	; 0x21
 80082be:	2200      	movs	r2, #0
 80082c0:	2101      	movs	r1, #1
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fb0f 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fceb 	bl	8009cb6 <WrByte>
 80082e0:	4603      	mov	r3, r0
 80082e2:	461a      	mov	r2, r3
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f107 0216 	add.w	r2, r7, #22
 80082f0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 fcc9 	bl	8009c8c <RdByte>
 80082fa:	4603      	mov	r3, r0
 80082fc:	461a      	mov	r2, r3
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
 8008300:	4313      	orrs	r3, r2
 8008302:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	210c      	movs	r1, #12
 800830a:	4618      	mov	r0, r3
 800830c:	f001 fcd3 	bl	8009cb6 <WrByte>
 8008310:	4603      	mov	r3, r0
 8008312:	461a      	mov	r2, r3
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	4313      	orrs	r3, r2
 8008318:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008322:	4618      	mov	r0, r3
 8008324:	f001 fcc7 	bl	8009cb6 <WrByte>
 8008328:	4603      	mov	r3, r0
 800832a:	461a      	mov	r2, r3
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	4313      	orrs	r3, r2
 8008330:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f240 1101 	movw	r1, #257	; 0x101
 800833a:	4618      	mov	r0, r3
 800833c:	f001 fcbb 	bl	8009cb6 <WrByte>
 8008340:	4603      	mov	r3, r0
 8008342:	461a      	mov	r2, r3
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	4313      	orrs	r3, r2
 8008348:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fcaf 	bl	8009cb6 <WrByte>
 8008358:	4603      	mov	r3, r0
 800835a:	461a      	mov	r2, r3
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	4313      	orrs	r3, r2
 8008360:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800836a:	4618      	mov	r0, r3
 800836c:	f001 fca3 	bl	8009cb6 <WrByte>
 8008370:	4603      	mov	r3, r0
 8008372:	461a      	mov	r2, r3
 8008374:	7dfb      	ldrb	r3, [r7, #23]
 8008376:	4313      	orrs	r3, r2
 8008378:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f244 0102 	movw	r1, #16386	; 0x4002
 8008382:	4618      	mov	r0, r3
 8008384:	f001 fc97 	bl	8009cb6 <WrByte>
 8008388:	4603      	mov	r3, r0
 800838a:	461a      	mov	r2, r3
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	4313      	orrs	r3, r2
 8008390:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f244 0102 	movw	r1, #16386	; 0x4002
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fc8b 	bl	8009cb6 <WrByte>
 80083a0:	4603      	mov	r3, r0
 80083a2:	461a      	mov	r2, r3
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2203      	movs	r2, #3
 80083ae:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80083b2:	4618      	mov	r0, r3
 80083b4:	f001 fc7f 	bl	8009cb6 <WrByte>
 80083b8:	4603      	mov	r3, r0
 80083ba:	461a      	mov	r2, r3
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	4313      	orrs	r3, r2
 80083c0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f240 1103 	movw	r1, #259	; 0x103
 80083ca:	4618      	mov	r0, r3
 80083cc:	f001 fc73 	bl	8009cb6 <WrByte>
 80083d0:	4603      	mov	r3, r0
 80083d2:	461a      	mov	r2, r3
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f244 010f 	movw	r1, #16399	; 0x400f
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 fc67 	bl	8009cb6 <WrByte>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2243      	movs	r2, #67	; 0x43
 80083f6:	f240 211a 	movw	r1, #538	; 0x21a
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 fc5b 	bl	8009cb6 <WrByte>
 8008400:	4603      	mov	r3, r0
 8008402:	461a      	mov	r2, r3
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	4313      	orrs	r3, r2
 8008408:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2203      	movs	r2, #3
 800840e:	f240 211a 	movw	r1, #538	; 0x21a
 8008412:	4618      	mov	r0, r3
 8008414:	f001 fc4f 	bl	8009cb6 <WrByte>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	4313      	orrs	r3, r2
 8008420:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f240 211a 	movw	r1, #538	; 0x21a
 800842a:	4618      	mov	r0, r3
 800842c:	f001 fc43 	bl	8009cb6 <WrByte>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	4313      	orrs	r3, r2
 8008438:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f240 211a 	movw	r1, #538	; 0x21a
 8008442:	4618      	mov	r0, r3
 8008444:	f001 fc37 	bl	8009cb6 <WrByte>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	4313      	orrs	r3, r2
 8008450:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f240 2119 	movw	r1, #537	; 0x219
 800845a:	4618      	mov	r0, r3
 800845c:	f001 fc2b 	bl	8009cb6 <WrByte>
 8008460:	4603      	mov	r3, r0
 8008462:	461a      	mov	r2, r3
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	4313      	orrs	r3, r2
 8008468:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f240 211b 	movw	r1, #539	; 0x21b
 8008472:	4618      	mov	r0, r3
 8008474:	f001 fc1f 	bl	8009cb6 <WrByte>
 8008478:	4603      	mov	r3, r0
 800847a:	461a      	mov	r2, r3
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	4313      	orrs	r3, r2
 8008480:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fc13 	bl	8009cb6 <WrByte>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	4313      	orrs	r3, r2
 8008498:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f107 0216 	add.w	r2, r7, #22
 80084a0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80084a4:	4618      	mov	r0, r3
 80084a6:	f001 fbf1 	bl	8009c8c <RdByte>
 80084aa:	4603      	mov	r3, r0
 80084ac:	461a      	mov	r2, r3
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	210c      	movs	r1, #12
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 fbfb 	bl	8009cb6 <WrByte>
 80084c0:	4603      	mov	r3, r0
 80084c2:	461a      	mov	r2, r3
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80084d2:	4618      	mov	r0, r3
 80084d4:	f001 fbef 	bl	8009cb6 <WrByte>
 80084d8:	4603      	mov	r3, r0
 80084da:	461a      	mov	r2, r3
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	4313      	orrs	r3, r2
 80084e0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2207      	movs	r2, #7
 80084e6:	2120      	movs	r1, #32
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 fbe4 	bl	8009cb6 <WrByte>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461a      	mov	r2, r3
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2206      	movs	r2, #6
 80084fc:	2120      	movs	r1, #32
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 fbd9 	bl	8009cb6 <WrByte>
 8008504:	4603      	mov	r3, r0
 8008506:	461a      	mov	r2, r3
 8008508:	7dfb      	ldrb	r3, [r7, #23]
 800850a:	4313      	orrs	r3, r2
 800850c:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2209      	movs	r2, #9
 8008512:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008516:	4618      	mov	r0, r3
 8008518:	f001 fbcd 	bl	8009cb6 <WrByte>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	4313      	orrs	r3, r2
 8008524:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800852c:	4ad2      	ldr	r2, [pc, #840]	; (8008878 <vl53l8cx_init+0x83c>)
 800852e:	2100      	movs	r1, #0
 8008530:	f001 fbd7 	bl	8009ce2 <WrMulti>
 8008534:	4603      	mov	r3, r0
 8008536:	461a      	mov	r2, r3
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	4313      	orrs	r3, r2
 800853c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	220a      	movs	r2, #10
 8008542:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008546:	4618      	mov	r0, r3
 8008548:	f001 fbb5 	bl	8009cb6 <WrByte>
 800854c:	4603      	mov	r3, r0
 800854e:	461a      	mov	r2, r3
 8008550:	7dfb      	ldrb	r3, [r7, #23]
 8008552:	4313      	orrs	r3, r2
 8008554:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800855c:	4ac7      	ldr	r2, [pc, #796]	; (800887c <vl53l8cx_init+0x840>)
 800855e:	2100      	movs	r1, #0
 8008560:	f001 fbbf 	bl	8009ce2 <WrMulti>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	4313      	orrs	r3, r2
 800856c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	220b      	movs	r2, #11
 8008572:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008576:	4618      	mov	r0, r3
 8008578:	f001 fb9d 	bl	8009cb6 <WrByte>
 800857c:	4603      	mov	r3, r0
 800857e:	461a      	mov	r2, r3
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	4313      	orrs	r3, r2
 8008584:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800858c:	4abc      	ldr	r2, [pc, #752]	; (8008880 <vl53l8cx_init+0x844>)
 800858e:	2100      	movs	r1, #0
 8008590:	f001 fba7 	bl	8009ce2 <WrMulti>
 8008594:	4603      	mov	r3, r0
 8008596:	461a      	mov	r2, r3
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	4313      	orrs	r3, r2
 800859c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L8CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 fb85 	bl	8009cb6 <WrByte>
 80085ac:	4603      	mov	r3, r0
 80085ae:	461a      	mov	r2, r3
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80085be:	4618      	mov	r0, r3
 80085c0:	f001 fb79 	bl	8009cb6 <WrByte>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x06, 0x03);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2203      	movs	r2, #3
 80085d2:	2106      	movs	r1, #6
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fb6e 	bl	8009cb6 <WrByte>
 80085da:	4603      	mov	r3, r0
 80085dc:	461a      	mov	r2, r3
 80085de:	7dfb      	ldrb	r3, [r7, #23]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l8cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80085e4:	2310      	movs	r3, #16
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	2310      	movs	r3, #16
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2321      	movs	r3, #33	; 0x21
 80085ee:	2200      	movs	r2, #0
 80085f0:	2101      	movs	r1, #1
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff f977 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 80085f8:	4603      	mov	r3, r0
 80085fa:	461a      	mov	r2, r3
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
 80085fe:	4313      	orrs	r3, r2
 8008600:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800860a:	4618      	mov	r0, r3
 800860c:	f001 fb53 	bl	8009cb6 <WrByte>
 8008610:	4603      	mov	r3, r0
 8008612:	461a      	mov	r2, r3
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	4313      	orrs	r3, r2
 8008618:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f107 0216 	add.w	r2, r7, #22
 8008620:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008624:	4618      	mov	r0, r3
 8008626:	f001 fb31 	bl	8009c8c <RdByte>
 800862a:	4603      	mov	r3, r0
 800862c:	461a      	mov	r2, r3
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	4313      	orrs	r3, r2
 8008632:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	210c      	movs	r1, #12
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fb3b 	bl	8009cb6 <WrByte>
 8008640:	4603      	mov	r3, r0
 8008642:	461a      	mov	r2, r3
 8008644:	7dfb      	ldrb	r3, [r7, #23]
 8008646:	4313      	orrs	r3, r2
 8008648:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008652:	4618      	mov	r0, r3
 8008654:	f001 fb2f 	bl	8009cb6 <WrByte>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	4313      	orrs	r3, r2
 8008660:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f44f 718a 	mov.w	r1, #276	; 0x114
 800866a:	4618      	mov	r0, r3
 800866c:	f001 fb23 	bl	8009cb6 <WrByte>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	4313      	orrs	r3, r2
 8008678:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f240 1115 	movw	r1, #277	; 0x115
 8008682:	4618      	mov	r0, r3
 8008684:	f001 fb17 	bl	8009cb6 <WrByte>
 8008688:	4603      	mov	r3, r0
 800868a:	461a      	mov	r2, r3
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	4313      	orrs	r3, r2
 8008690:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2242      	movs	r2, #66	; 0x42
 8008696:	f44f 718b 	mov.w	r1, #278	; 0x116
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fb0b 	bl	8009cb6 <WrByte>
 80086a0:	4603      	mov	r3, r0
 80086a2:	461a      	mov	r2, r3
 80086a4:	7dfb      	ldrb	r3, [r7, #23]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f240 1117 	movw	r1, #279	; 0x117
 80086b2:	4618      	mov	r0, r3
 80086b4:	f001 faff 	bl	8009cb6 <WrByte>
 80086b8:	4603      	mov	r3, r0
 80086ba:	461a      	mov	r2, r3
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	4313      	orrs	r3, r2
 80086c0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	210b      	movs	r1, #11
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 faf4 	bl	8009cb6 <WrByte>
 80086ce:	4603      	mov	r3, r0
 80086d0:	461a      	mov	r2, r3
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f107 0216 	add.w	r2, r7, #22
 80086de:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80086e2:	4618      	mov	r0, r3
 80086e4:	f001 fad2 	bl	8009c8c <RdByte>
 80086e8:	4603      	mov	r3, r0
 80086ea:	461a      	mov	r2, r3
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	210c      	movs	r1, #12
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 fadc 	bl	8009cb6 <WrByte>
 80086fe:	4603      	mov	r3, r0
 8008700:	461a      	mov	r2, r3
 8008702:	7dfb      	ldrb	r3, [r7, #23]
 8008704:	4313      	orrs	r3, r2
 8008706:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	210b      	movs	r1, #11
 800870e:	4618      	mov	r0, r3
 8008710:	f001 fad1 	bl	8009cb6 <WrByte>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	4313      	orrs	r3, r2
 800871c:	75fb      	strb	r3, [r7, #23]

	status |= _vl53l8cx_poll_for_mcu_boot(p_dev);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff f931 	bl	8007986 <_vl53l8cx_poll_for_mcu_boot>
 8008724:	4603      	mov	r3, r0
 8008726:	461a      	mov	r2, r3
 8008728:	7dfb      	ldrb	r3, [r7, #23]
 800872a:	4313      	orrs	r3, r2
 800872c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f040 809a 	bne.w	800886a <vl53l8cx_init+0x82e>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2202      	movs	r2, #2
 800873a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800873e:	4618      	mov	r0, r3
 8008740:	f001 fab9 	bl	8009cb6 <WrByte>
 8008744:	4603      	mov	r3, r0
 8008746:	461a      	mov	r2, r3
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	4313      	orrs	r3, r2
 800874c:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	2328      	movs	r3, #40	; 0x28
 8008752:	4a4c      	ldr	r2, [pc, #304]	; (8008884 <vl53l8cx_init+0x848>)
 8008754:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8008758:	f001 fac3 	bl	8009ce2 <WrMulti>
 800875c:	4603      	mov	r3, r0
 800875e:	461a      	mov	r2, r3
 8008760:	7dfb      	ldrb	r3, [r7, #23]
 8008762:	4313      	orrs	r3, r2
 8008764:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L8CX_GET_NVM_CMD, sizeof(VL53L8CX_GET_NVM_CMD));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 0,
 8008766:	2302      	movs	r3, #2
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	23ff      	movs	r3, #255	; 0xff
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008772:	2200      	movs	r2, #0
 8008774:	2104      	movs	r1, #4
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7ff f8b5 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 800877c:	4603      	mov	r3, r0
 800877e:	461a      	mov	r2, r3
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	4313      	orrs	r3, r2
 8008784:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8008786:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L8CX_NVM_DATA_SIZE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 800878e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8008792:	f642 4104 	movw	r1, #11268	; 0x2c04
 8008796:	f001 fabb 	bl	8009d10 <RdMulti>
 800879a:	4603      	mov	r3, r0
 800879c:	461a      	mov	r2, r3
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f103 0020 	add.w	r0, r3, #32
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80087b0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80087b4:	4619      	mov	r1, r3
 80087b6:	f00c fb52 	bl	8014e5e <memcpy>
		VL53L8CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l8cx_send_offset_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 80087ba:	2110      	movs	r1, #16
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff f925 	bl	8007a0c <_vl53l8cx_send_offset_data>
 80087c2:	4603      	mov	r3, r0
 80087c4:	461a      	mov	r2, r3
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L8CX_DEFAULT_XTALK,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80087d2:	4a2d      	ldr	r2, [pc, #180]	; (8008888 <vl53l8cx_init+0x84c>)
 80087d4:	4618      	mov	r0, r3
 80087d6:	4611      	mov	r1, r2
 80087d8:	f44f 7342 	mov.w	r3, #776	; 0x308
 80087dc:	461a      	mov	r2, r3
 80087de:	f00c fb3e 	bl	8014e5e <memcpy>
		VL53L8CX_XTALK_BUFFER_SIZE);
	status |= _vl53l8cx_send_xtalk_data(p_dev, VL53L8CX_RESOLUTION_4X4);
 80087e2:	2110      	movs	r1, #16
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff fadd 	bl	8007da4 <_vl53l8cx_send_xtalk_data>
 80087ea:	4603      	mov	r3, r0
 80087ec:	461a      	mov	r2, r3
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L8CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	699a      	ldr	r2, [r3, #24]
 80087fa:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 80087fe:	f642 4134 	movw	r1, #11316	; 0x2c34
 8008802:	f001 fa6e 	bl	8009ce2 <WrMulti>
 8008806:	4603      	mov	r3, r0
 8008808:	461a      	mov	r2, r3
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	4313      	orrs	r3, r2
 800880e:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L8CX_DEFAULT_CONFIGURATION));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8008810:	2303      	movs	r3, #3
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	23ff      	movs	r3, #255	; 0xff
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800881c:	2201      	movs	r2, #1
 800881e:	2104      	movs	r1, #4
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff f860 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 8008826:	4603      	mov	r3, r0
 8008828:	461a      	mov	r2, r3
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	4313      	orrs	r3, r2
 800882e:	75fb      	strb	r3, [r7, #23]
		VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8008830:	f107 0110 	add.w	r1, r7, #16
 8008834:	2304      	movs	r3, #4
 8008836:	f64d 3280 	movw	r2, #56192	; 0xdb80
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 ffbe 	bl	80097bc <vl53l8cx_dci_write_data>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	4313      	orrs	r3, r2
 8008848:	75fb      	strb	r3, [r7, #23]
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L8CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800884a:	f107 010c 	add.w	r1, r7, #12
 800884e:	2304      	movs	r3, #4
 8008850:	f64d 1264 	movw	r2, #55652	; 0xd964
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 ffb1 	bl	80097bc <vl53l8cx_dci_write_data>
 800885a:	4603      	mov	r3, r0
 800885c:	461a      	mov	r2, r3
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	4313      	orrs	r3, r2
 8008862:	75fb      	strb	r3, [r7, #23]
 8008864:	e002      	b.n	800886c <vl53l8cx_init+0x830>
		goto exit;
 8008866:	bf00      	nop
 8008868:	e000      	b.n	800886c <vl53l8cx_init+0x830>
		goto exit;
 800886a:	bf00      	nop
			VL53L8CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

exit:
	return status;
 800886c:	7dfb      	ldrb	r3, [r7, #23]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	080188f0 	.word	0x080188f0
 800887c:	080208f0 	.word	0x080208f0
 8008880:	080288f0 	.word	0x080288f0
 8008884:	0802dfc4 	.word	0x0802dfc4
 8008888:	0802dcbc 	.word	0x0802dcbc

0800888c <vl53l8cx_set_i2c_address>:

uint8_t vl53l8cx_set_i2c_address(
		VL53L8CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 fa06 	bl	8009cb6 <WrByte>
 80088aa:	4603      	mov	r3, r0
 80088ac:	461a      	mov	r2, r3
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	887b      	ldrh	r3, [r7, #2]
 80088b8:	085b      	lsrs	r3, r3, #1
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	461a      	mov	r2, r3
 80088c0:	2104      	movs	r1, #4
 80088c2:	f001 f9f8 	bl	8009cb6 <WrByte>
 80088c6:	4603      	mov	r3, r0
 80088c8:	461a      	mov	r2, r3
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	887a      	ldrh	r2, [r7, #2]
 80088d4:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2202      	movs	r2, #2
 80088da:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80088de:	4618      	mov	r0, r3
 80088e0:	f001 f9e9 	bl	8009cb6 <WrByte>
 80088e4:	4603      	mov	r3, r0
 80088e6:	461a      	mov	r2, r3
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	73fb      	strb	r3, [r7, #15]

	return status;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <vl53l8cx_get_power_mode>:

uint8_t vl53l8cx_get_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800890e:	4618      	mov	r0, r3
 8008910:	f001 f9d1 	bl	8009cb6 <WrByte>
 8008914:	4603      	mov	r3, r0
 8008916:	461a      	mov	r2, r3
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	4313      	orrs	r3, r2
 800891c:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f107 020e 	add.w	r2, r7, #14
 8008924:	2109      	movs	r1, #9
 8008926:	4618      	mov	r0, r3
 8008928:	f001 f9b0 	bl	8009c8c <RdByte>
 800892c:	4603      	mov	r3, r0
 800892e:	461a      	mov	r2, r3
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	4313      	orrs	r3, r2
 8008934:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d005      	beq.n	8008948 <vl53l8cx_get_power_mode+0x50>
 800893c:	2b04      	cmp	r3, #4
 800893e:	d107      	bne.n	8008950 <vl53l8cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L8CX_POWER_MODE_WAKEUP;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2201      	movs	r2, #1
 8008944:	701a      	strb	r2, [r3, #0]
			break;
 8008946:	e009      	b.n	800895c <vl53l8cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L8CX_POWER_MODE_SLEEP;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	701a      	strb	r2, [r3, #0]

			break;
 800894e:	e005      	b.n	800895c <vl53l8cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
			status = VL53L8CX_STATUS_ERROR;
 8008956:	23ff      	movs	r3, #255	; 0xff
 8008958:	73fb      	strb	r3, [r7, #15]
			break;
 800895a:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008964:	4618      	mov	r0, r3
 8008966:	f001 f9a6 	bl	8009cb6 <WrByte>
 800896a:	4603      	mov	r3, r0
 800896c:	461a      	mov	r2, r3
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	4313      	orrs	r3, r2
 8008972:	73fb      	strb	r3, [r7, #15]

	return status;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <vl53l8cx_set_power_mode>:

uint8_t vl53l8cx_set_power_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b086      	sub	sp, #24
 8008982:	af02      	add	r7, sp, #8
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L8CX_STATUS_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_get_power_mode(p_dev, &current_power_mode);
 800898e:	f107 030e 	add.w	r3, r7, #14
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff ffaf 	bl	80088f8 <vl53l8cx_get_power_mode>
 800899a:	4603      	mov	r3, r0
 800899c:	461a      	mov	r2, r3
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d061      	beq.n	8008a70 <vl53l8cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d028      	beq.n	8008a04 <vl53l8cx_set_power_mode+0x86>
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d14d      	bne.n	8008a52 <vl53l8cx_set_power_mode+0xd4>
	{
		case VL53L8CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 f979 	bl	8009cb6 <WrByte>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2204      	movs	r2, #4
 80089d2:	2109      	movs	r1, #9
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 f96e 	bl	8009cb6 <WrByte>
 80089da:	4603      	mov	r3, r0
 80089dc:	461a      	mov	r2, r3
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 80089e4:	2301      	movs	r3, #1
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	2301      	movs	r3, #1
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	2306      	movs	r3, #6
 80089ee:	2200      	movs	r2, #0
 80089f0:	2101      	movs	r1, #1
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7fe ff77 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 80089f8:	4603      	mov	r3, r0
 80089fa:	461a      	mov	r2, r3
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 8008a02:	e029      	b.n	8008a58 <vl53l8cx_set_power_mode+0xda>

		case VL53L8CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 f952 	bl	8009cb6 <WrByte>
 8008a12:	4603      	mov	r3, r0
 8008a14:	461a      	mov	r2, r3
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	2109      	movs	r1, #9
 8008a22:	4618      	mov	r0, r3
 8008a24:	f001 f947 	bl	8009cb6 <WrByte>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l8cx_poll_for_answer(
 8008a32:	2300      	movs	r3, #0
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	2301      	movs	r3, #1
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	2306      	movs	r3, #6
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2101      	movs	r1, #1
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7fe ff50 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 8008a46:	4603      	mov	r3, r0
 8008a48:	461a      	mov	r2, r3
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8008a50:	e002      	b.n	8008a58 <vl53l8cx_set_power_mode+0xda>

		default:
			status = VL53L8CX_STATUS_ERROR;
 8008a52:	23ff      	movs	r3, #255	; 0xff
 8008a54:	73fb      	strb	r3, [r7, #15]
			break;
 8008a56:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 f928 	bl	8009cb6 <WrByte>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <vl53l8cx_start_ranging>:

uint8_t vl53l8cx_start_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8008a7c:	b5b0      	push	{r4, r5, r7, lr}
 8008a7e:	b09c      	sub	sp, #112	; 0x70
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L8CX_STATUS_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	653b      	str	r3, [r7, #80]	; 0x50
 8008a8e:	2300      	movs	r3, #0
 8008a90:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8008a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a96:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l8cx_get_resolution(p_dev, &resolution);
 8008a98:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fc5c 	bl	800935c <vl53l8cx_get_resolution>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008aac:	4313      	orrs	r3, r2
 8008aae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	22ff      	movs	r2, #255	; 0xff
 8008abc:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8008abe:	4bb5      	ldr	r3, [pc, #724]	; (8008d94 <vl53l8cx_start_ranging+0x318>)
 8008ac0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8008ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L8CX_START_BH,
 8008aca:	4bb3      	ldr	r3, [pc, #716]	; (8008d98 <vl53l8cx_start_ranging+0x31c>)
 8008acc:	f107 040c 	add.w	r4, r7, #12
 8008ad0:	461d      	mov	r5, r3
 8008ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ada:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008ade:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L8CX_TARGET_STATUS_BH,
		VL53L8CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8008ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aea:	3320      	adds	r3, #32
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8008aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af0:	3340      	adds	r3, #64	; 0x40
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8008af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8008afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008afe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8008b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b12:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8008b14:	2300      	movs	r3, #0
 8008b16:	663b      	str	r3, [r7, #96]	; 0x60
 8008b18:	e073      	b.n	8008c02 <vl53l8cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 8008b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	3368      	adds	r3, #104	; 0x68
 8008b20:	443b      	add	r3, r7
 8008b22:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d067      	beq.n	8008bfa <vl53l8cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 8008b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b2c:	095b      	lsrs	r3, r3, #5
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	3368      	adds	r3, #104	; 0x68
 8008b32:	443b      	add	r3, r7
 8008b34:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8008b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b3a:	f003 031f 	and.w	r3, r3, #31
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d057      	beq.n	8008bfa <vl53l8cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8008b4a:	f107 020c 	add.w	r2, r7, #12
 8008b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8008b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 030f 	and.w	r3, r3, #15
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d03a      	beq.n	8008bda <vl53l8cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8008b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b0c      	cmp	r3, #12
 8008b70:	d833      	bhi.n	8008bda <vl53l8cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8008b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d910      	bls.n	8008ba0 <vl53l8cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8008b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b80:	885b      	ldrh	r3, [r3, #2]
 8008b82:	f645 028f 	movw	r2, #22671	; 0x588f
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d80a      	bhi.n	8008ba0 <vl53l8cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 8008b8a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b92:	b299      	uxth	r1, r3
 8008b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b96:	8813      	ldrh	r3, [r2, #0]
 8008b98:	f361 130f 	bfi	r3, r1, #4, #12
 8008b9c:	8013      	strh	r3, [r2, #0]
 8008b9e:	e009      	b.n	8008bb4 <vl53l8cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8008ba0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ba8:	b299      	uxth	r1, r3
 8008baa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bac:	8813      	ldrh	r3, [r2, #0]
 8008bae:	f361 130f 	bfi	r3, r1, #4, #12
 8008bb2:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L8CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bba:	7812      	ldrb	r2, [r2, #0]
 8008bbc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008bc0:	b2d2      	uxtb	r2, r2
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bc6:	8812      	ldrh	r2, [r2, #0]
 8008bc8:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8008bcc:	b292      	uxth	r2, r2
 8008bce:	fb01 f202 	mul.w	r2, r1, r2
 8008bd2:	441a      	add	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	615a      	str	r2, [r3, #20]
 8008bd8:	e009      	b.n	8008bee <vl53l8cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008be0:	8812      	ldrh	r2, [r2, #0]
 8008be2:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8008be6:	b292      	uxth	r2, r2
 8008be8:	441a      	add	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	1d1a      	adds	r2, r3, #4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	615a      	str	r2, [r3, #20]
 8008bf8:	e000      	b.n	8008bfc <vl53l8cx_start_ranging+0x180>
			continue;
 8008bfa:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8008bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bfe:	3301      	adds	r3, #1
 8008c00:	663b      	str	r3, [r7, #96]	; 0x60
 8008c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c04:	2b0b      	cmp	r3, #11
 8008c06:	d988      	bls.n	8008b1a <vl53l8cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	f103 0218 	add.w	r2, r3, #24
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	615a      	str	r2, [r3, #20]

	status |= vl53l8cx_dci_write_data(p_dev,
 8008c14:	f107 010c 	add.w	r1, r7, #12
 8008c18:	2330      	movs	r3, #48	; 0x30
 8008c1a:	f64d 1280 	movw	r2, #55680	; 0xd980
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fdcc 	bl	80097bc <vl53l8cx_dci_write_data>
 8008c24:	4603      	mov	r3, r0
 8008c26:	461a      	mov	r2, r3
 8008c28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L8CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 8008c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l8cx_dci_write_data(p_dev,
 8008c3e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008c42:	2308      	movs	r3, #8
 8008c44:	f64d 1268 	movw	r2, #55656	; 0xd968
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fdb7 	bl	80097bc <vl53l8cx_dci_write_data>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	461a      	mov	r2, r3
 8008c52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c56:	4313      	orrs	r3, r2
 8008c58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L8CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l8cx_dci_write_data(p_dev,
 8008c5c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8008c60:	2310      	movs	r3, #16
 8008c62:	f64d 1270 	movw	r2, #55664	; 0xd970
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fda8 	bl	80097bc <vl53l8cx_dci_write_data>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c74:	4313      	orrs	r3, r2
 8008c76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L8CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f817 	bl	8009cb6 <WrByte>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c90:	4313      	orrs	r3, r2
 8008c92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2205      	movs	r2, #5
 8008c9a:	2109      	movs	r1, #9
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 f80a 	bl	8009cb6 <WrByte>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008caa:	4313      	orrs	r3, r2
 8008cac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fffc 	bl	8009cb6 <WrByte>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L8CX_UI_CMD_END -
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008cd2:	2304      	movs	r3, #4
 8008cd4:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8008cd8:	f001 f803 	bl	8009ce2 <WrMulti>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 8008cea:	2303      	movs	r3, #3
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	23ff      	movs	r3, #255	; 0xff
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	2104      	movs	r1, #4
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7fe fdf3 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 8008d00:	4603      	mov	r3, r0
 8008d02:	461a      	mov	r2, r3
 8008d04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8008d14:	230c      	movs	r3, #12
 8008d16:	f245 4240 	movw	r2, #21568	; 0x5440
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fcc4 	bl	80096a8 <vl53l8cx_dci_read_data>
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 8008d3c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008d40:	461a      	mov	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d002      	beq.n	8008d50 <vl53l8cx_start_ranging+0x2d4>
	{
		status |= VL53L8CX_STATUS_ERROR;
 8008d4a:	23ff      	movs	r3, #255	; 0xff
 8008d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	/* Ensure that there is no laser safety fault */
	status |= vl53l8cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0xE0C4, 8);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l8cx_dci_read_data(p_dev,
 8008d56:	2308      	movs	r3, #8
 8008d58:	f24e 02c4 	movw	r2, #57540	; 0xe0c4
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fca3 	bl	80096a8 <vl53l8cx_dci_read_data>
 8008d62:	4603      	mov	r3, r0
 8008d64:	461a      	mov	r2, r3
 8008d66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if((uint8_t)p_dev->temp_buffer[0x6] != (uint8_t)0)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <vl53l8cx_start_ranging+0x30a>
	{
		status |= VL53L8CX_STATUS_LASER_SAFETY;
 8008d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d7e:	f043 0303 	orr.w	r3, r3, #3
 8008d82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 8008d86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3768      	adds	r7, #104	; 0x68
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bdb0      	pop	{r4, r5, r7, pc}
 8008d92:	bf00      	nop
 8008d94:	080186d8 	.word	0x080186d8
 8008d98:	080186e8 	.word	0x080186e8

08008d9c <vl53l8cx_stop_ranging>:

uint8_t vl53l8cx_stop_ranging(
		VL53L8CX_Configuration		*p_dev)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L8CX_STATUS_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	74fb      	strb	r3, [r7, #19]
 8008da8:	2300      	movs	r3, #0
 8008daa:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f107 020c 	add.w	r2, r7, #12
 8008dba:	2304      	movs	r3, #4
 8008dbc:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8008dc0:	f000 ffa6 	bl	8009d10 <RdMulti>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	7dfb      	ldrb	r3, [r7, #23]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if(auto_stop_flag != (uint32_t)0x4FF)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d048      	beq.n	8008e6a <vl53l8cx_stop_ranging+0xce>
	{
	        status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 ff68 	bl	8009cb6 <WrByte>
 8008de6:	4603      	mov	r3, r0
 8008de8:	461a      	mov	r2, r3
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2216      	movs	r2, #22
 8008df4:	2115      	movs	r1, #21
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 ff5d 	bl	8009cb6 <WrByte>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	461a      	mov	r2, r3
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	75fb      	strb	r3, [r7, #23]
	        status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	2114      	movs	r1, #20
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 ff52 	bl	8009cb6 <WrByte>
 8008e12:	4603      	mov	r3, r0
 8008e14:	461a      	mov	r2, r3
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8008e1c:	e021      	b.n	8008e62 <vl53l8cx_stop_ranging+0xc6>
	        {
	        	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f107 0213 	add.w	r2, r7, #19
 8008e24:	2106      	movs	r1, #6
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 ff30 	bl	8009c8c <RdByte>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	461a      	mov	r2, r3
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	75fb      	strb	r3, [r7, #23]
	        	status |= WaitMs(&(p_dev->platform), 10);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	210a      	movs	r1, #10
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 ffb5 	bl	8009daa <WaitMs>
 8008e40:	4603      	mov	r3, r0
 8008e42:	461a      	mov	r2, r3
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	75fb      	strb	r3, [r7, #23]
	        	timeout++;	/* Timeout reached after 5 seconds */
 8008e4a:	8abb      	ldrh	r3, [r7, #20]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	82bb      	strh	r3, [r7, #20]

	        	if(timeout > (uint16_t)500)
 8008e50:	8abb      	ldrh	r3, [r7, #20]
 8008e52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008e56:	d904      	bls.n	8008e62 <vl53l8cx_stop_ranging+0xc6>
				{
					status |= tmp;
 8008e58:	7cfa      	ldrb	r2, [r7, #19]
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	75fb      	strb	r3, [r7, #23]
					break;
 8008e60:	e003      	b.n	8008e6a <vl53l8cx_stop_ranging+0xce>
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8008e62:	7cfb      	ldrb	r3, [r7, #19]
 8008e64:	b25b      	sxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	dad9      	bge.n	8008e1e <vl53l8cx_stop_ranging+0x82>
				}
        	}
        }

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f107 0213 	add.w	r2, r7, #19
 8008e70:	2106      	movs	r1, #6
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 ff0a 	bl	8009c8c <RdByte>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8008e82:	7cfb      	ldrb	r3, [r7, #19]
 8008e84:	b25b      	sxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da15      	bge.n	8008eb6 <vl53l8cx_stop_ranging+0x11a>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f107 0213 	add.w	r2, r7, #19
 8008e90:	2107      	movs	r1, #7
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fefa 	bl	8009c8c <RdByte>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8008ea2:	7cfb      	ldrb	r3, [r7, #19]
 8008ea4:	2b84      	cmp	r3, #132	; 0x84
 8008ea6:	d006      	beq.n	8008eb6 <vl53l8cx_stop_ranging+0x11a>
 8008ea8:	7cfb      	ldrb	r3, [r7, #19]
 8008eaa:	2b85      	cmp	r3, #133	; 0x85
 8008eac:	d003      	beq.n	8008eb6 <vl53l8cx_stop_ranging+0x11a>
		   status |= tmp;
 8008eae:	7cfa      	ldrb	r2, [r7, #19]
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fef9 	bl	8009cb6 <WrByte>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2114      	movs	r1, #20
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 feee 	bl	8009cb6 <WrByte>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2115      	movs	r1, #21
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fee3 	bl	8009cb6 <WrByte>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2204      	movs	r2, #4
 8008efe:	2109      	movs	r1, #9
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fed8 	bl	8009cb6 <WrByte>
 8008f06:	4603      	mov	r3, r0
 8008f08:	461a      	mov	r2, r3
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 fecc 	bl	8009cb6 <WrByte>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	461a      	mov	r2, r3
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	75fb      	strb	r3, [r7, #23]

	return status;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <vl53l8cx_check_data_ready>:

uint8_t vl53l8cx_check_data_ready(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8008f48:	2304      	movs	r3, #4
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	f000 fee0 	bl	8009d10 <RdMulti>
 8008f50:	4603      	mov	r3, r0
 8008f52:	461a      	mov	r2, r3
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7c1b      	ldrb	r3, [r3, #16]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d020      	beq.n	8008faa <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8008f6e:	2bff      	cmp	r3, #255	; 0xff
 8008f70:	d01b      	beq.n	8008faa <vl53l8cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8008f78:	2b05      	cmp	r3, #5
 8008f7a:	d116      	bne.n	8008faa <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8008f82:	f003 0305 	and.w	r3, r3, #5
 8008f86:	2b05      	cmp	r3, #5
 8008f88:	d10f      	bne.n	8008faa <vl53l8cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8008f90:	f003 0310 	and.w	r3, r3, #16
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d008      	beq.n	8008faa <vl53l8cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	741a      	strb	r2, [r3, #16]
 8008fa8:	e00e      	b.n	8008fc8 <vl53l8cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8008fb0:	b25b      	sxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	da05      	bge.n	8008fc2 <vl53l8cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <vl53l8cx_get_ranging_data>:

uint8_t vl53l8cx_get_ranging_data(
		VL53L8CX_Configuration		*p_dev,
		VL53L8CX_ResultsData		*p_results)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	77fb      	strb	r3, [r7, #31]
	uint16_t header_id, footer_id;
	union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 8008fe2:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	2100      	movs	r1, #0
 8008ff0:	f000 fe8e 	bl	8009d10 <RdMulti>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	7ffb      	ldrb	r3, [r7, #31]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	b29b      	uxth	r3, r3
 8009014:	4619      	mov	r1, r3
 8009016:	4610      	mov	r0, r2
 8009018:	f000 fe91 	bl	8009d3e <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 800901c:	2310      	movs	r3, #16
 800901e:	61bb      	str	r3, [r7, #24]
 8009020:	e0db      	b.n	80091da <vl53l8cx_get_ranging_data+0x206>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	4413      	add	r3, r2
 800902c:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b01      	cmp	r3, #1
 800903a:	d915      	bls.n	8009068 <vl53l8cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b0c      	cmp	r3, #12
 8009048:	d80e      	bhi.n	8009068 <vl53l8cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009052:	b2db      	uxtb	r3, r3
 8009054:	461a      	mov	r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800905e:	b29b      	uxth	r3, r3
 8009060:	fb02 f303 	mul.w	r3, r2, r3
 8009064:	613b      	str	r3, [r7, #16]
 8009066:	e005      	b.n	8009074 <vl53l8cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8009070:	b29b      	uxth	r3, r3
 8009072:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	885b      	ldrh	r3, [r3, #2]
 8009078:	f24e 0284 	movw	r2, #57476	; 0xe084
 800907c:	4293      	cmp	r3, r2
 800907e:	f000 8088 	beq.w	8009192 <vl53l8cx_get_ranging_data+0x1be>
 8009082:	f24e 0284 	movw	r2, #57476	; 0xe084
 8009086:	4293      	cmp	r3, r2
 8009088:	f300 809f 	bgt.w	80091ca <vl53l8cx_get_ranging_data+0x1f6>
 800908c:	f24e 0244 	movw	r2, #57412	; 0xe044
 8009090:	4293      	cmp	r3, r2
 8009092:	d070      	beq.n	8009176 <vl53l8cx_get_ranging_data+0x1a2>
 8009094:	f24e 0244 	movw	r2, #57412	; 0xe044
 8009098:	4293      	cmp	r3, r2
 800909a:	f300 8096 	bgt.w	80091ca <vl53l8cx_get_ranging_data+0x1f6>
 800909e:	f64d 7244 	movw	r2, #57156	; 0xdf44
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d059      	beq.n	800915a <vl53l8cx_get_ranging_data+0x186>
 80090a6:	f64d 7244 	movw	r2, #57156	; 0xdf44
 80090aa:	4293      	cmp	r3, r2
 80090ac:	f300 808d 	bgt.w	80091ca <vl53l8cx_get_ranging_data+0x1f6>
 80090b0:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d042      	beq.n	800913e <vl53l8cx_get_ranging_data+0x16a>
 80090b8:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 80090bc:	4293      	cmp	r3, r2
 80090be:	f300 8084 	bgt.w	80091ca <vl53l8cx_get_ranging_data+0x1f6>
 80090c2:	f64d 3284 	movw	r2, #56196	; 0xdb84
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d02b      	beq.n	8009122 <vl53l8cx_get_ranging_data+0x14e>
 80090ca:	f64d 3284 	movw	r2, #56196	; 0xdb84
 80090ce:	4293      	cmp	r3, r2
 80090d0:	dc7b      	bgt.n	80091ca <vl53l8cx_get_ranging_data+0x1f6>
 80090d2:	f64d 0258 	movw	r2, #55384	; 0xd858
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d069      	beq.n	80091ae <vl53l8cx_get_ranging_data+0x1da>
 80090da:	f64d 0258 	movw	r2, #55384	; 0xd858
 80090de:	4293      	cmp	r3, r2
 80090e0:	dc73      	bgt.n	80091ca <vl53l8cx_get_ranging_data+0x1f6>
 80090e2:	f245 42b4 	movw	r2, #21684	; 0x54b4
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d004      	beq.n	80090f4 <vl53l8cx_get_ranging_data+0x120>
 80090ea:	f245 42d0 	movw	r2, #21712	; 0x54d0
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00a      	beq.n	8009108 <vl53l8cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80090f2:	e06a      	b.n	80091ca <vl53l8cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	330c      	adds	r3, #12
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	4413      	add	r3, r2
 80090fc:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8009100:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	701a      	strb	r2, [r3, #0]
				break;
 8009106:	e061      	b.n	80091cc <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	3304      	adds	r3, #4
 8009110:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	4619      	mov	r1, r3
 800911c:	f00b fe9f 	bl	8014e5e <memcpy>
				break;
 8009120:	e054      	b.n	80091cc <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	3304      	adds	r3, #4
 800912c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	4619      	mov	r1, r3
 8009138:	f00b fe91 	bl	8014e5e <memcpy>
				break;
 800913c:	e046      	b.n	80091cc <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	3304      	adds	r3, #4
 8009148:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4619      	mov	r1, r3
 8009154:	f00b fe83 	bl	8014e5e <memcpy>
				break;
 8009158:	e038      	b.n	80091cc <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	3304      	adds	r3, #4
 8009164:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	4619      	mov	r1, r3
 8009170:	f00b fe75 	bl	8014e5e <memcpy>
				break;
 8009174:	e02a      	b.n	80091cc <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	3304      	adds	r3, #4
 8009180:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4619      	mov	r1, r3
 800918c:	f00b fe67 	bl	8014e5e <memcpy>
				break;
 8009190:	e01c      	b.n	80091cc <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	3304      	adds	r3, #4
 800919c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	4619      	mov	r1, r3
 80091a8:	f00b fe59 	bl	8014e5e <memcpy>
				break;
 80091ac:	e00e      	b.n	80091cc <vl53l8cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	3304      	adds	r3, #4
 80091b8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	4619      	mov	r1, r3
 80091c4:	f00b fe4b 	bl	8014e5e <memcpy>
				break;
 80091c8:	e000      	b.n	80091cc <vl53l8cx_get_ranging_data+0x1f8>
				break;
 80091ca:	bf00      	nop
		}
		i += msize;
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	4413      	add	r3, r2
 80091d2:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	3304      	adds	r3, #4
 80091d8:	61bb      	str	r3, [r7, #24]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	f4ff af1e 	bcc.w	8009022 <vl53l8cx_get_ranging_data+0x4e>

#ifndef VL53L8CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L8CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80091e6:	2300      	movs	r3, #0
 80091e8:	61bb      	str	r3, [r7, #24]
 80091ea:	e00d      	b.n	8009208 <vl53l8cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	0ada      	lsrs	r2, r3, #11
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	3301      	adds	r3, #1
 8009206:	61bb      	str	r3, [r7, #24]
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	2b3f      	cmp	r3, #63	; 0x3f
 800920c:	d9ee      	bls.n	80091ec <vl53l8cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 800920e:	2300      	movs	r3, #0
 8009210:	61bb      	str	r3, [r7, #24]
 8009212:	e033      	b.n	800927c <vl53l8cx_get_ranging_data+0x2a8>
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L8CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	4413      	add	r3, r2
 8009220:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	da00      	bge.n	800922a <vl53l8cx_get_ranging_data+0x256>
 8009228:	3303      	adds	r3, #3
 800922a:	109b      	asrs	r3, r3, #2
 800922c:	b219      	sxth	r1, r3
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	4413      	add	r3, r2
 800923a:	460a      	mov	r2, r1
 800923c:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L8CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	4413      	add	r3, r2
 8009244:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	b2d9      	uxtb	r1, r3
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	4413      	add	r3, r2
 8009254:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8009258:	460a      	mov	r2, r1
 800925a:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L8CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L8CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	3350      	adds	r3, #80	; 0x50
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	0ada      	lsrs	r2, r3, #11
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	3350      	adds	r3, #80	; 0x50
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	440b      	add	r3, r1
 8009274:	605a      	str	r2, [r3, #4]
			*VL53L8CX_NB_TARGET_PER_ZONE); i++)
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	3301      	adds	r3, #1
 800927a:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L8CX_RESOLUTION_8X8
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2b3f      	cmp	r3, #63	; 0x3f
 8009280:	d9c8      	bls.n	8009214 <vl53l8cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L8CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 8009282:	2300      	movs	r3, #0
 8009284:	61bb      	str	r3, [r7, #24]
 8009286:	e01b      	b.n	80092c0 <vl53l8cx_get_ranging_data+0x2ec>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	4413      	add	r3, r2
 800928e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d110      	bne.n	80092ba <vl53l8cx_get_ranging_data+0x2e6>
			for(j = 0; j < (uint32_t)
 8009298:	2300      	movs	r3, #0
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	e00a      	b.n	80092b4 <vl53l8cx_get_ranging_data+0x2e0>
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L8CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L8CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	4413      	add	r3, r2
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	4413      	add	r3, r2
 80092a8:	22ff      	movs	r2, #255	; 0xff
 80092aa:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L8CX_NB_TARGET_PER_ZONE; j++)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	3301      	adds	r3, #1
 80092b2:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0f1      	beq.n	800929e <vl53l8cx_get_ranging_data+0x2ca>
	for(i = 0; i < (uint32_t)VL53L8CX_RESOLUTION_8X8; i++)
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	3301      	adds	r3, #1
 80092be:	61bb      	str	r3, [r7, #24]
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2b3f      	cmp	r3, #63	; 0x3f
 80092c4:	d9e0      	bls.n	8009288 <vl53l8cx_get_ranging_data+0x2b4>
		}
	}
#endif

#ifndef VL53L8CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 80092c6:	2300      	movs	r3, #0
 80092c8:	61bb      	str	r3, [r7, #24]
 80092ca:	e012      	b.n	80092f2 <vl53l8cx_get_ranging_data+0x31e>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	33d2      	adds	r3, #210	; 0xd2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4413      	add	r3, r2
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	4a1f      	ldr	r2, [pc, #124]	; (8009358 <vl53l8cx_get_ranging_data+0x384>)
 80092da:	fba2 2303 	umull	r2, r3, r2, r3
 80092de:	0bda      	lsrs	r2, r3, #15
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	33d2      	adds	r3, #210	; 0xd2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	3301      	adds	r3, #1
 80092f0:	61bb      	str	r3, [r7, #24]
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	2b1f      	cmp	r3, #31
 80092f6:	d9e9      	bls.n	80092cc <vl53l8cx_get_ranging_data+0x2f8>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 80092fe:	b29b      	uxth	r3, r3
 8009300:	021b      	lsls	r3, r3, #8
 8009302:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 800930a:	b29a      	uxth	r2, r3
 800930c:	89fb      	ldrh	r3, [r7, #14]
 800930e:	4313      	orrs	r3, r2
 8009310:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8009316:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	4413      	add	r3, r2
 800931c:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8009320:	b29b      	uxth	r3, r3
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 800932a:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	4413      	add	r3, r2
 8009330:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8009334:	b29a      	uxth	r2, r3
 8009336:	89bb      	ldrh	r3, [r7, #12]
 8009338:	4313      	orrs	r3, r2
 800933a:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 800933c:	89fa      	ldrh	r2, [r7, #14]
 800933e:	89bb      	ldrh	r3, [r7, #12]
 8009340:	429a      	cmp	r2, r3
 8009342:	d003      	beq.n	800934c <vl53l8cx_get_ranging_data+0x378>
	{
		status |= VL53L8CX_STATUS_CORRUPTED_FRAME;
 8009344:	7ffb      	ldrb	r3, [r7, #31]
 8009346:	f043 0302 	orr.w	r3, r3, #2
 800934a:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 800934c:	7ffb      	ldrb	r3, [r7, #31]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3720      	adds	r7, #32
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	80008001 	.word	0x80008001

0800935c <vl53l8cx_get_resolution>:

uint8_t vl53l8cx_get_resolution(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8009370:	2308      	movs	r3, #8
 8009372:	f245 4250 	movw	r2, #21584	; 0x5450
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f996 	bl	80096a8 <vl53l8cx_dci_read_data>
 800937c:	4603      	mov	r3, r0
 800937e:	461a      	mov	r2, r3
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	4313      	orrs	r3, r2
 8009384:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8009392:	fb12 f303 	smulbb	r3, r2, r3
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	701a      	strb	r2, [r3, #0]

	return status;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <vl53l8cx_set_resolution>:


uint8_t vl53l8cx_set_resolution(
		VL53L8CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 80093b6:	78fb      	ldrb	r3, [r7, #3]
 80093b8:	2b10      	cmp	r3, #16
 80093ba:	d002      	beq.n	80093c2 <vl53l8cx_set_resolution+0x1c>
 80093bc:	2b40      	cmp	r3, #64	; 0x40
 80093be:	d055      	beq.n	800946c <vl53l8cx_set_resolution+0xc6>
 80093c0:	e0a9      	b.n	8009516 <vl53l8cx_set_resolution+0x170>
		case VL53L8CX_RESOLUTION_4X4:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80093c8:	2310      	movs	r3, #16
 80093ca:	f64a 5238 	movw	r2, #44344	; 0xad38
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f96a 	bl	80096a8 <vl53l8cx_dci_read_data>
 80093d4:	4603      	mov	r3, r0
 80093d6:	461a      	mov	r2, r3
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	4313      	orrs	r3, r2
 80093dc:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2240      	movs	r2, #64	; 0x40
 80093e2:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2240      	movs	r2, #64	; 0x40
 80093ea:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2204      	movs	r2, #4
 80093f2:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 80093fc:	2310      	movs	r3, #16
 80093fe:	f64a 5238 	movw	r2, #44344	; 0xad38
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f9da 	bl	80097bc <vl53l8cx_dci_write_data>
 8009408:	4603      	mov	r3, r0
 800940a:	461a      	mov	r2, r3
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	4313      	orrs	r3, r2
 8009410:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8009418:	2308      	movs	r3, #8
 800941a:	f245 4250 	movw	r2, #21584	; 0x5450
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f942 	bl	80096a8 <vl53l8cx_dci_read_data>
 8009424:	4603      	mov	r3, r0
 8009426:	461a      	mov	r2, r3
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	4313      	orrs	r3, r2
 800942c:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2204      	movs	r2, #4
 8009432:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2204      	movs	r2, #4
 800943a:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2208      	movs	r2, #8
 8009442:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2208      	movs	r2, #8
 800944a:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 8009454:	2308      	movs	r3, #8
 8009456:	f245 4250 	movw	r2, #21584	; 0x5450
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f9ae 	bl	80097bc <vl53l8cx_dci_write_data>
 8009460:	4603      	mov	r3, r0
 8009462:	461a      	mov	r2, r3
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	4313      	orrs	r3, r2
 8009468:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			break;
 800946a:	e057      	b.n	800951c <vl53l8cx_set_resolution+0x176>

		case VL53L8CX_RESOLUTION_8X8:
			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 8009472:	2310      	movs	r3, #16
 8009474:	f64a 5238 	movw	r2, #44344	; 0xad38
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f915 	bl	80096a8 <vl53l8cx_dci_read_data>
 800947e:	4603      	mov	r3, r0
 8009480:	461a      	mov	r2, r3
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	4313      	orrs	r3, r2
 8009486:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2210      	movs	r2, #16
 800948c:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2210      	movs	r2, #16
 8009494:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 80094a6:	2310      	movs	r3, #16
 80094a8:	f64a 5238 	movw	r2, #44344	; 0xad38
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f985 	bl	80097bc <vl53l8cx_dci_write_data>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461a      	mov	r2, r3
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_DSS_CONFIG, 16);

			status |= vl53l8cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_read_data(p_dev,
 80094c2:	2308      	movs	r3, #8
 80094c4:	f245 4250 	movw	r2, #21584	; 0x5450
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f8ed 	bl	80096a8 <vl53l8cx_dci_read_data>
 80094ce:	4603      	mov	r3, r0
 80094d0:	461a      	mov	r2, r3
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2208      	movs	r2, #8
 80094dc:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2208      	movs	r2, #8
 80094e4:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2204      	movs	r2, #4
 80094ec:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2204      	movs	r2, #4
 80094f4:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l8cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l8cx_dci_write_data(p_dev,
 80094fe:	2308      	movs	r3, #8
 8009500:	f245 4250 	movw	r2, #21584	; 0x5450
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f959 	bl	80097bc <vl53l8cx_dci_write_data>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	4313      	orrs	r3, r2
 8009512:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_ZONE_CONFIG, 8);

			break;
 8009514:	e002      	b.n	800951c <vl53l8cx_set_resolution+0x176>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 8009516:	237f      	movs	r3, #127	; 0x7f
 8009518:	73fb      	strb	r3, [r7, #15]
			break;
 800951a:	bf00      	nop
		}

	status |= _vl53l8cx_send_offset_data(p_dev, resolution);
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7fe fa73 	bl	8007a0c <_vl53l8cx_send_offset_data>
 8009526:	4603      	mov	r3, r0
 8009528:	461a      	mov	r2, r3
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	4313      	orrs	r3, r2
 800952e:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l8cx_send_xtalk_data(p_dev, resolution);
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7fe fc35 	bl	8007da4 <_vl53l8cx_send_xtalk_data>
 800953a:	4603      	mov	r3, r0
 800953c:	461a      	mov	r2, r3
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	4313      	orrs	r3, r2
 8009542:	73fb      	strb	r3, [r7, #15]

	return status;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <vl53l8cx_set_ranging_frequency_hz>:
}

uint8_t vl53l8cx_set_ranging_frequency_hz(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b088      	sub	sp, #32
 8009552:	af04      	add	r7, sp, #16
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8009564:	2301      	movs	r3, #1
 8009566:	9302      	str	r3, [sp, #8]
 8009568:	2301      	movs	r3, #1
 800956a:	9301      	str	r3, [sp, #4]
 800956c:	1cfb      	adds	r3, r7, #3
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	2304      	movs	r3, #4
 8009572:	f245 4258 	movw	r2, #21592	; 0x5458
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f9be 	bl	80098f8 <vl53l8cx_dci_replace_data>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	4313      	orrs	r3, r2
 8009584:	73fb      	strb	r3, [r7, #15]
					VL53L8CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8009586:	7bfb      	ldrb	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <vl53l8cx_set_integration_time_ms>:
}

uint8_t vl53l8cx_set_integration_time_ms(
		VL53L8CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af04      	add	r7, sp, #16
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d903      	bls.n	80095b0 <vl53l8cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095ae:	d904      	bls.n	80095ba <vl53l8cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L8CX_STATUS_INVALID_PARAM;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80095b6:	73fb      	strb	r3, [r7, #15]
 80095b8:	e01a      	b.n	80095f0 <vl53l8cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095c0:	fb02 f303 	mul.w	r3, r2, r3
 80095c4:	60bb      	str	r3, [r7, #8]

		status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80095cc:	2300      	movs	r3, #0
 80095ce:	9302      	str	r3, [sp, #8]
 80095d0:	2304      	movs	r3, #4
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	f107 0308 	add.w	r3, r7, #8
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	2314      	movs	r3, #20
 80095dc:	f245 425c 	movw	r2, #21596	; 0x545c
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f989 	bl	80098f8 <vl53l8cx_dci_replace_data>
 80095e6:	4603      	mov	r3, r0
 80095e8:	461a      	mov	r2, r3
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	73fb      	strb	r3, [r7, #15]
				VL53L8CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <vl53l8cx_set_ranging_mode>:
}

uint8_t vl53l8cx_set_ranging_mode(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	460b      	mov	r3, r1
 8009604:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L8CX_STATUS_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 800960a:	2300      	movs	r3, #0
 800960c:	60bb      	str	r3, [r7, #8]

	status |= vl53l8cx_dci_read_data(p_dev, p_dev->temp_buffer,
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8009614:	2308      	movs	r3, #8
 8009616:	f64a 5230 	movw	r2, #44336	; 0xad30
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f844 	bl	80096a8 <vl53l8cx_dci_read_data>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4313      	orrs	r3, r2
 8009628:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d002      	beq.n	8009636 <vl53l8cx_set_ranging_mode+0x3c>
 8009630:	2b03      	cmp	r3, #3
 8009632:	d00b      	beq.n	800964c <vl53l8cx_set_ranging_mode+0x52>
 8009634:	e015      	b.n	8009662 <vl53l8cx_set_ranging_mode+0x68>
	{
		case VL53L8CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2203      	movs	r2, #3
 8009642:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 8009646:	2300      	movs	r3, #0
 8009648:	60bb      	str	r3, [r7, #8]
			break;
 800964a:	e00d      	b.n	8009668 <vl53l8cx_set_ranging_mode+0x6e>

		case VL53L8CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2203      	movs	r2, #3
 8009650:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 800965c:	2301      	movs	r3, #1
 800965e:	60bb      	str	r3, [r7, #8]
			break;
 8009660:	e002      	b.n	8009668 <vl53l8cx_set_ranging_mode+0x6e>

		default:
			status = VL53L8CX_STATUS_INVALID_PARAM;
 8009662:	237f      	movs	r3, #127	; 0x7f
 8009664:	73fb      	strb	r3, [r7, #15]
			break;
 8009666:	bf00      	nop
	}

	status |= vl53l8cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 800966e:	2308      	movs	r3, #8
 8009670:	f64a 5230 	movw	r2, #44336	; 0xad30
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f8a1 	bl	80097bc <vl53l8cx_dci_write_data>
 800967a:	4603      	mov	r3, r0
 800967c:	461a      	mov	r2, r3
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	4313      	orrs	r3, r2
 8009682:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8009684:	f107 0108 	add.w	r1, r7, #8
 8009688:	2304      	movs	r3, #4
 800968a:	f64d 1264 	movw	r2, #55652	; 0xd964
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f894 	bl	80097bc <vl53l8cx_dci_write_data>
 8009694:	4603      	mov	r3, r0
 8009696:	461a      	mov	r2, r3
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	4313      	orrs	r3, r2
 800969c:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 800969e:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <vl53l8cx_dci_read_data>:
uint8_t vl53l8cx_dci_read_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08c      	sub	sp, #48	; 0x30
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L8CX_STATUS_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80096bc:	887b      	ldrh	r3, [r7, #2]
 80096be:	330c      	adds	r3, #12
 80096c0:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80096c2:	4a3d      	ldr	r2, [pc, #244]	; (80097b8 <vl53l8cx_dci_read_data+0x110>)
 80096c4:	f107 0314 	add.w	r3, r7, #20
 80096c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80096ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
 80096ce:	887b      	ldrh	r3, [r7, #2]
 80096d0:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 80096d4:	d903      	bls.n	80096de <vl53l8cx_dci_read_data+0x36>
	{
		status |= VL53L8CX_STATUS_ERROR;
 80096d6:	23ff      	movs	r3, #255	; 0xff
 80096d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80096dc:	e065      	b.n	80097aa <vl53l8cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	0a1b      	lsrs	r3, r3, #8
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 80096ec:	887b      	ldrh	r3, [r7, #2]
 80096ee:	111b      	asrs	r3, r3, #4
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80096f4:	887b      	ldrh	r3, [r7, #2]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	011b      	lsls	r3, r3, #4
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f107 0214 	add.w	r2, r7, #20
 8009704:	230c      	movs	r3, #12
 8009706:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 800970a:	f000 faea 	bl	8009ce2 <WrMulti>
 800970e:	4603      	mov	r3, r0
 8009710:	461a      	mov	r2, r3
 8009712:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009716:	4313      	orrs	r3, r2
 8009718:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L8CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 800971c:	2303      	movs	r3, #3
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	23ff      	movs	r3, #255	; 0xff
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8009728:	2201      	movs	r2, #1
 800972a:	2104      	movs	r1, #4
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f7fe f8da 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 8009732:	4603      	mov	r3, r0
 8009734:	461a      	mov	r2, r3
 8009736:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800973a:	4313      	orrs	r3, r2
 800973c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L8CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8009740:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L8CX_UI_CMD_START,
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	f642 4104 	movw	r1, #11268	; 0x2c04
 800974e:	f000 fadf 	bl	8009d10 <RdMulti>
 8009752:	4603      	mov	r3, r0
 8009754:	461a      	mov	r2, r3
 8009756:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800975a:	4313      	orrs	r3, r2
 800975c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8009766:	887b      	ldrh	r3, [r7, #2]
 8009768:	330c      	adds	r3, #12
 800976a:	b29b      	uxth	r3, r3
 800976c:	4619      	mov	r1, r3
 800976e:	4610      	mov	r0, r2
 8009770:	f000 fae5 	bl	8009d3e <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8009774:	2300      	movs	r3, #0
 8009776:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009778:	e011      	b.n	800979e <vl53l8cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 800977a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800977e:	1d1a      	adds	r2, r3, #4
 8009780:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009784:	68b9      	ldr	r1, [r7, #8]
 8009786:	440b      	add	r3, r1
 8009788:	68f9      	ldr	r1, [r7, #12]
 800978a:	440a      	add	r2, r1
 800978c:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8009790:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8009792:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009796:	b29b      	uxth	r3, r3
 8009798:	3301      	adds	r3, #1
 800979a:	b29b      	uxth	r3, r3
 800979c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800979e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097a2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80097a6:	429a      	cmp	r2, r3
 80097a8:	dbe7      	blt.n	800977a <vl53l8cx_dci_read_data+0xd2>
		}
	}

	return status;
 80097aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3728      	adds	r7, #40	; 0x28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	08018718 	.word	0x08018718

080097bc <vl53l8cx_dci_write_data>:
uint8_t vl53l8cx_dci_write_data(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08c      	sub	sp, #48	; 0x30
 80097c0:	af02      	add	r7, sp, #8
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80097d0:	2300      	movs	r3, #0
 80097d2:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80097d4:	2300      	movs	r3, #0
 80097d6:	753b      	strb	r3, [r7, #20]
 80097d8:	2300      	movs	r3, #0
 80097da:	757b      	strb	r3, [r7, #21]
 80097dc:	2300      	movs	r3, #0
 80097de:	75bb      	strb	r3, [r7, #22]
 80097e0:	230f      	movs	r3, #15
 80097e2:	75fb      	strb	r3, [r7, #23]
 80097e4:	2305      	movs	r3, #5
 80097e6:	763b      	strb	r3, [r7, #24]
 80097e8:	2301      	movs	r3, #1
 80097ea:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 80097ec:	887b      	ldrh	r3, [r7, #2]
 80097ee:	3308      	adds	r3, #8
 80097f0:	121b      	asrs	r3, r3, #8
 80097f2:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80097f4:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80097f6:	887b      	ldrh	r3, [r7, #2]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	3308      	adds	r3, #8
 80097fc:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80097fe:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L8CX_UI_CMD_END -
 8009800:	887b      	ldrh	r3, [r7, #2]
 8009802:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8009806:	3334      	adds	r3, #52	; 0x34
 8009808:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800980a:	887b      	ldrh	r3, [r7, #2]
 800980c:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8009810:	d903      	bls.n	800981a <vl53l8cx_dci_write_data+0x5e>
           > (uint16_t)VL53L8CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L8CX_STATUS_ERROR;
 8009812:	23ff      	movs	r3, #255	; 0xff
 8009814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009818:	e068      	b.n	80098ec <vl53l8cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	0a1b      	lsrs	r3, r3, #8
 800981e:	b2db      	uxtb	r3, r3
 8009820:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	b2db      	uxtb	r3, r3
 8009826:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8009828:	887b      	ldrh	r3, [r7, #2]
 800982a:	111b      	asrs	r3, r3, #4
 800982c:	b2db      	uxtb	r3, r3
 800982e:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8009830:	887b      	ldrh	r3, [r7, #2]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	b2db      	uxtb	r3, r3
 8009838:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 800983a:	887b      	ldrh	r3, [r7, #2]
 800983c:	4619      	mov	r1, r3
 800983e:	68b8      	ldr	r0, [r7, #8]
 8009840:	f000 fa7d 	bl	8009d3e <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8009844:	887b      	ldrh	r3, [r7, #2]
 8009846:	3b01      	subs	r3, #1
 8009848:	b29b      	uxth	r3, r3
 800984a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800984c:	e012      	b.n	8009874 <vl53l8cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 800984e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	441a      	add	r2, r3
 8009856:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800985a:	3304      	adds	r3, #4
 800985c:	7811      	ldrb	r1, [r2, #0]
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	4413      	add	r3, r2
 8009862:	460a      	mov	r2, r1
 8009864:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8009868:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800986c:	b29b      	uxth	r3, r3
 800986e:	3b01      	subs	r3, #1
 8009870:	b29b      	uxth	r3, r3
 8009872:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009874:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009878:	2b00      	cmp	r3, #0
 800987a:	dae8      	bge.n	800984e <vl53l8cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009882:	69fa      	ldr	r2, [r7, #28]
 8009884:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8009886:	887b      	ldrh	r3, [r7, #2]
 8009888:	3304      	adds	r3, #4
 800988a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4413      	add	r3, r2
 8009892:	461a      	mov	r2, r3
 8009894:	f107 0314 	add.w	r3, r7, #20
 8009898:	cb03      	ldmia	r3!, {r0, r1}
 800989a:	6010      	str	r0, [r2, #0]
 800989c:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 800989e:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 80098a6:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 80098a8:	330c      	adds	r3, #12
 80098aa:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80098ac:	f000 fa19 	bl	8009ce2 <WrMulti>
 80098b0:	4603      	mov	r3, r0
 80098b2:	461a      	mov	r2, r3
 80098b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098b8:	4313      	orrs	r3, r2
 80098ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l8cx_poll_for_answer(p_dev, 4, 1,
 80098be:	2303      	movs	r3, #3
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	23ff      	movs	r3, #255	; 0xff
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80098ca:	2201      	movs	r2, #1
 80098cc:	2104      	movs	r1, #4
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7fe f809 	bl	80078e6 <_vl53l8cx_poll_for_answer>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098dc:	4313      	orrs	r3, r2
 80098de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L8CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 80098e2:	887b      	ldrh	r3, [r7, #2]
 80098e4:	4619      	mov	r1, r3
 80098e6:	68b8      	ldr	r0, [r7, #8]
 80098e8:	f000 fa29 	bl	8009d3e <SwapBuffer>
	}

	return status;
 80098ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3728      	adds	r7, #40	; 0x28
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <vl53l8cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L8CX_STATUS_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]

	status |= vl53l8cx_dci_read_data(p_dev, data, index, data_size);
 800990a:	887b      	ldrh	r3, [r7, #2]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	68b9      	ldr	r1, [r7, #8]
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7ff fec9 	bl	80096a8 <vl53l8cx_dci_read_data>
 8009916:	4603      	mov	r3, r0
 8009918:	461a      	mov	r2, r3
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	4313      	orrs	r3, r2
 800991e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8009920:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	4413      	add	r3, r2
 8009926:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009928:	6a39      	ldr	r1, [r7, #32]
 800992a:	4618      	mov	r0, r3
 800992c:	f00b fa97 	bl	8014e5e <memcpy>
	status |= vl53l8cx_dci_write_data(p_dev, data, index, data_size);
 8009930:	887b      	ldrh	r3, [r7, #2]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	68b9      	ldr	r1, [r7, #8]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f7ff ff40 	bl	80097bc <vl53l8cx_dci_write_data>
 800993c:	4603      	mov	r3, r0
 800993e:	461a      	mov	r2, r3
 8009940:	7dfb      	ldrb	r3, [r7, #23]
 8009942:	4313      	orrs	r3, r2
 8009944:	75fb      	strb	r3, [r7, #23]

	return status;
 8009946:	7dfb      	ldrb	r3, [r7, #23]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <vl53l8cx_set_detection_thresholds_enable>:
}

uint8_t vl53l8cx_set_detection_thresholds_enable(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b088      	sub	sp, #32
 8009954:	af04      	add	r7, sp, #16
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L8CX_STATUS_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8009960:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8009964:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 8009966:	78fb      	ldrb	r3, [r7, #3]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d104      	bne.n	8009976 <vl53l8cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 800996c:	2301      	movs	r3, #1
 800996e:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8009970:	2304      	movs	r3, #4
 8009972:	73bb      	strb	r3, [r7, #14]
 8009974:	e003      	b.n	800997e <vl53l8cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 8009976:	2300      	movs	r3, #0
 8009978:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 800997a:	230c      	movs	r3, #12
 800997c:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8009984:	2300      	movs	r3, #0
 8009986:	9302      	str	r3, [sp, #8]
 8009988:	2304      	movs	r3, #4
 800998a:	9301      	str	r3, [sp, #4]
 800998c:	f107 0308 	add.w	r3, r7, #8
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	2308      	movs	r3, #8
 8009994:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7ff ffad 	bl	80098f8 <vl53l8cx_dci_replace_data>
 800999e:	4603      	mov	r3, r0
 80099a0:	461a      	mov	r2, r3
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l8cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80099ae:	2311      	movs	r3, #17
 80099b0:	9302      	str	r3, [sp, #8]
 80099b2:	2301      	movs	r3, #1
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	f107 030e 	add.w	r3, r7, #14
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	2314      	movs	r3, #20
 80099be:	f245 4288 	movw	r2, #21640	; 0x5488
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff ff98 	bl	80098f8 <vl53l8cx_dci_replace_data>
 80099c8:	4603      	mov	r3, r0
 80099ca:	461a      	mov	r2, r3
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	73fb      	strb	r3, [r7, #15]
			VL53L8CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <vl53l8cx_set_detection_thresholds>:
}

uint8_t vl53l8cx_set_detection_thresholds(
		VL53L8CX_Configuration			*p_dev,
		VL53L8CX_DetectionThresholds	*p_thresholds)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L8CX_STATUS_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 80099ea:	4aa7      	ldr	r2, [pc, #668]	; (8009c88 <vl53l8cx_set_detection_thresholds+0x2ac>)
 80099ec:	f107 030c 	add.w	r3, r7, #12
 80099f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099f4:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 80099f8:	2300      	movs	r3, #0
 80099fa:	75fb      	strb	r3, [r7, #23]
 80099fc:	e120      	b.n	8009c40 <vl53l8cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	7a1b      	ldrb	r3, [r3, #8]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	2b12      	cmp	r3, #18
 8009a06:	f200 8117 	bhi.w	8009c38 <vl53l8cx_set_detection_thresholds+0x25c>
 8009a0a:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <vl53l8cx_set_detection_thresholds+0x34>)
 8009a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a10:	08009a5d 	.word	0x08009a5d
 8009a14:	08009aab 	.word	0x08009aab
 8009a18:	08009c39 	.word	0x08009c39
 8009a1c:	08009af9 	.word	0x08009af9
 8009a20:	08009c39 	.word	0x08009c39
 8009a24:	08009c39 	.word	0x08009c39
 8009a28:	08009c39 	.word	0x08009c39
 8009a2c:	08009b47 	.word	0x08009b47
 8009a30:	08009c39 	.word	0x08009c39
 8009a34:	08009c39 	.word	0x08009c39
 8009a38:	08009c39 	.word	0x08009c39
 8009a3c:	08009c39 	.word	0x08009c39
 8009a40:	08009b95 	.word	0x08009b95
 8009a44:	08009c39 	.word	0x08009c39
 8009a48:	08009c39 	.word	0x08009c39
 8009a4c:	08009c39 	.word	0x08009c39
 8009a50:	08009c39 	.word	0x08009c39
 8009a54:	08009c39 	.word	0x08009c39
 8009a58:	08009be3 	.word	0x08009be3
		{
			case VL53L8CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8009a5c:	7dfa      	ldrb	r2, [r7, #23]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	461a      	mov	r2, r3
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	6819      	ldr	r1, [r3, #0]
 8009a6e:	7dfa      	ldrb	r2, [r7, #23]
 8009a70:	4613      	mov	r3, r2
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	4413      	add	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	461a      	mov	r2, r3
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	008a      	lsls	r2, r1, #2
 8009a80:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8009a82:	7dfa      	ldrb	r2, [r7, #23]
 8009a84:	4613      	mov	r3, r2
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	4413      	add	r3, r2
 8009a92:	6859      	ldr	r1, [r3, #4]
 8009a94:	7dfa      	ldrb	r2, [r7, #23]
 8009a96:	4613      	mov	r3, r2
 8009a98:	005b      	lsls	r3, r3, #1
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	008a      	lsls	r2, r1, #2
 8009aa6:	605a      	str	r2, [r3, #4]
				break;
 8009aa8:	e0c7      	b.n	8009c3a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8009aaa:	7dfa      	ldrb	r2, [r7, #23]
 8009aac:	4613      	mov	r3, r2
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	4413      	add	r3, r2
 8009aba:	6819      	ldr	r1, [r3, #0]
 8009abc:	7dfa      	ldrb	r2, [r7, #23]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	4413      	add	r3, r2
 8009acc:	02ca      	lsls	r2, r1, #11
 8009ace:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8009ad0:	7dfa      	ldrb	r2, [r7, #23]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	461a      	mov	r2, r3
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	4413      	add	r3, r2
 8009ae0:	6859      	ldr	r1, [r3, #4]
 8009ae2:	7dfa      	ldrb	r2, [r7, #23]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	4413      	add	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	461a      	mov	r2, r3
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	4413      	add	r3, r2
 8009af2:	02ca      	lsls	r2, r1, #11
 8009af4:	605a      	str	r2, [r3, #4]
				break;
 8009af6:	e0a0      	b.n	8009c3a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8009af8:	7dfa      	ldrb	r2, [r7, #23]
 8009afa:	4613      	mov	r3, r2
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	461a      	mov	r2, r3
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	4413      	add	r3, r2
 8009b08:	6819      	ldr	r1, [r3, #0]
 8009b0a:	7dfa      	ldrb	r2, [r7, #23]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	461a      	mov	r2, r3
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	4413      	add	r3, r2
 8009b1a:	01ca      	lsls	r2, r1, #7
 8009b1c:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8009b1e:	7dfa      	ldrb	r2, [r7, #23]
 8009b20:	4613      	mov	r3, r2
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	461a      	mov	r2, r3
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	6859      	ldr	r1, [r3, #4]
 8009b30:	7dfa      	ldrb	r2, [r7, #23]
 8009b32:	4613      	mov	r3, r2
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	4413      	add	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	4413      	add	r3, r2
 8009b40:	01ca      	lsls	r2, r1, #7
 8009b42:	605a      	str	r2, [r3, #4]
				break;
 8009b44:	e079      	b.n	8009c3a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8009b46:	7dfa      	ldrb	r2, [r7, #23]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	4413      	add	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	461a      	mov	r2, r3
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	4413      	add	r3, r2
 8009b56:	6819      	ldr	r1, [r3, #0]
 8009b58:	7dfa      	ldrb	r2, [r7, #23]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	005b      	lsls	r3, r3, #1
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	461a      	mov	r2, r3
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	4413      	add	r3, r2
 8009b68:	02ca      	lsls	r2, r1, #11
 8009b6a:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8009b6c:	7dfa      	ldrb	r2, [r7, #23]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	4413      	add	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	461a      	mov	r2, r3
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	6859      	ldr	r1, [r3, #4]
 8009b7e:	7dfa      	ldrb	r2, [r7, #23]
 8009b80:	4613      	mov	r3, r2
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	461a      	mov	r2, r3
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	02ca      	lsls	r2, r1, #11
 8009b90:	605a      	str	r2, [r3, #4]
				break;
 8009b92:	e052      	b.n	8009c3a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 8009b94:	7dfa      	ldrb	r2, [r7, #23]
 8009b96:	4613      	mov	r3, r2
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	6819      	ldr	r1, [r3, #0]
 8009ba6:	7dfa      	ldrb	r2, [r7, #23]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	4413      	add	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	020a      	lsls	r2, r1, #8
 8009bb8:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8009bba:	7dfa      	ldrb	r2, [r7, #23]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	005b      	lsls	r3, r3, #1
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	4413      	add	r3, r2
 8009bca:	6859      	ldr	r1, [r3, #4]
 8009bcc:	7dfa      	ldrb	r2, [r7, #23]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	4413      	add	r3, r2
 8009bdc:	020a      	lsls	r2, r1, #8
 8009bde:	605a      	str	r2, [r3, #4]
				break;
 8009be0:	e02b      	b.n	8009c3a <vl53l8cx_set_detection_thresholds+0x25e>
			case VL53L8CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 8009be2:	7dfa      	ldrb	r2, [r7, #23]
 8009be4:	4613      	mov	r3, r2
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	4413      	add	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	461a      	mov	r2, r3
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	7df9      	ldrb	r1, [r7, #23]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	440b      	add	r3, r1
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4619      	mov	r1, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	4419      	add	r1, r3
 8009c04:	4613      	mov	r3, r2
 8009c06:	041b      	lsls	r3, r3, #16
 8009c08:	1a9b      	subs	r3, r3, r2
 8009c0a:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8009c0c:	7dfa      	ldrb	r2, [r7, #23]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	461a      	mov	r2, r3
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	7df9      	ldrb	r1, [r7, #23]
 8009c20:	460b      	mov	r3, r1
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	440b      	add	r3, r1
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4619      	mov	r1, r3
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	4419      	add	r1, r3
 8009c2e:	4613      	mov	r3, r2
 8009c30:	041b      	lsls	r3, r3, #16
 8009c32:	1a9b      	subs	r3, r3, r2
 8009c34:	604b      	str	r3, [r1, #4]
				break;
 8009c36:	e000      	b.n	8009c3a <vl53l8cx_set_detection_thresholds+0x25e>
			default:
				break;
 8009c38:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L8CX_NB_THRESHOLDS; i++)
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	75fb      	strb	r3, [r7, #23]
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	2b3f      	cmp	r3, #63	; 0x3f
 8009c44:	f67f aedb 	bls.w	80099fe <vl53l8cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8009c48:	f107 010c 	add.w	r1, r7, #12
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff fdb2 	bl	80097bc <vl53l8cx_dci_write_data>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	7dbb      	ldrb	r3, [r7, #22]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_VALID_STATUS,
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l8cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 8009c62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c66:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff fda5 	bl	80097bc <vl53l8cx_dci_write_data>
 8009c72:	4603      	mov	r3, r0
 8009c74:	461a      	mov	r2, r3
 8009c76:	7dbb      	ldrb	r3, [r7, #22]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	75bb      	strb	r3, [r7, #22]
			VL53L8CX_DCI_DET_THRESH_START,
			(uint16_t)(VL53L8CX_NB_THRESHOLDS
			*sizeof(VL53L8CX_DetectionThresholds)));

	return status;
 8009c7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	08018724 	.word	0x08018724

08009c8c <RdByte>:

uint8_t RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8009c8c:	b590      	push	{r4, r7, lr}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	460b      	mov	r3, r1
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	689c      	ldr	r4, [r3, #8]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	8818      	ldrh	r0, [r3, #0]
 8009ca2:	8979      	ldrh	r1, [r7, #10]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	47a0      	blx	r4
 8009caa:	4603      	mov	r3, r0
 8009cac:	b2db      	uxtb	r3, r3
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd90      	pop	{r4, r7, pc}

08009cb6 <WrByte>:

uint8_t WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8009cb6:	b590      	push	{r4, r7, lr}
 8009cb8:	b083      	sub	sp, #12
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	807b      	strh	r3, [r7, #2]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685c      	ldr	r4, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	8818      	ldrh	r0, [r3, #0]
 8009cce:	1c7a      	adds	r2, r7, #1
 8009cd0:	8879      	ldrh	r1, [r7, #2]
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	47a0      	blx	r4
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	b2db      	uxtb	r3, r3
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd90      	pop	{r4, r7, pc}

08009ce2 <WrMulti>:
uint8_t WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8009ce2:	b590      	push	{r4, r7, lr}
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	685c      	ldr	r4, [r3, #4]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	8818      	ldrh	r0, [r3, #0]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	8979      	ldrh	r1, [r7, #10]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	47a0      	blx	r4
 8009d04:	4603      	mov	r3, r0
 8009d06:	b2db      	uxtb	r3, r3
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd90      	pop	{r4, r7, pc}

08009d10 <RdMulti>:
uint8_t RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8009d10:	b590      	push	{r4, r7, lr}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	607a      	str	r2, [r7, #4]
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	689c      	ldr	r4, [r3, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8818      	ldrh	r0, [r3, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	8979      	ldrh	r1, [r7, #10]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	47a0      	blx	r4
 8009d32:	4603      	mov	r3, r0
 8009d34:	b2db      	uxtb	r3, r3
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd90      	pop	{r4, r7, pc}

08009d3e <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	e021      	b.n	8009d94 <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	6879      	ldr	r1, [r7, #4]
 8009d60:	440b      	add	r3, r1
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	041b      	lsls	r3, r3, #16
 8009d66:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3302      	adds	r3, #2
 8009d6c:	6879      	ldr	r1, [r7, #4]
 8009d6e:	440b      	add	r3, r1
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	021b      	lsls	r3, r3, #8
 8009d74:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	3203      	adds	r2, #3
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	7812      	ldrb	r2, [r2, #0]
 8009d80:	4313      	orrs	r3, r2
    tmp = (
 8009d82:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4413      	add	r3, r2
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3304      	adds	r3, #4
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	887b      	ldrh	r3, [r7, #2]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d3d9      	bcc.n	8009d50 <SwapBuffer+0x12>
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	bf00      	nop
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <WaitMs>:

uint8_t WaitMs(
		VL53L8CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	4798      	blx	r3
 8009dba:	4603      	mov	r3, r0
 8009dbc:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8009dbe:	bf00      	nop
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	4798      	blx	r3
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	461a      	mov	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d8f5      	bhi.n	8009dc0 <WaitMs+0x16>

  return 0;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <VL53L8CX_RegisterBusIO>:
  * @param pObj    vl53l8cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_RegisterBusIO(VL53L8CX_Object_t *pObj, VL53L8CX_IO_t *pIO)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d002      	beq.n	8009df4 <VL53L8CX_RegisterBusIO+0x16>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d103      	bne.n	8009dfc <VL53L8CX_RegisterBusIO+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8009df4:	f06f 0301 	mvn.w	r3, #1
 8009df8:	60fb      	str	r3, [r7, #12]
 8009dfa:	e033      	b.n	8009e64 <VL53L8CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	891a      	ldrh	r2, [r3, #8]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	691a      	ldr	r2, [r3, #16]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	695a      	ldr	r2, [r3, #20]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	615a      	str	r2, [r3, #20]

    /* fill vl53l8cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	891a      	ldrh	r2, [r3, #8]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	691a      	ldr	r2, [r3, #16]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	68da      	ldr	r2, [r3, #12]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	695a      	ldr	r2, [r3, #20]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d004      	beq.n	8009e5e <VL53L8CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4798      	blx	r3
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	e002      	b.n	8009e64 <VL53L8CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L8CX_ERROR;
 8009e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e62:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009e64:	68fb      	ldr	r3, [r7, #12]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <VL53L8CX_Init>:
  * @brief Initializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Init(VL53L8CX_Object_t *pObj)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d103      	bne.n	8009e84 <VL53L8CX_Init+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8009e7c:	f06f 0301 	mvn.w	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	e02e      	b.n	8009ee2 <VL53L8CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <VL53L8CX_Init+0x28>
  {
    ret =  VL53L8CX_ERROR;
 8009e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	e025      	b.n	8009ee2 <VL53L8CX_Init+0x74>
  }
  else if (vl53l8cx_init(&pObj->Dev) != VL53L8CX_STATUS_OK)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3318      	adds	r3, #24
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe f8ce 	bl	800803c <vl53l8cx_init>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d003      	beq.n	8009eae <VL53L8CX_Init+0x40>
  {
    ret = VL53L8CX_ERROR;
 8009ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	e019      	b.n	8009ee2 <VL53L8CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    pObj->IsBlocking = 0U;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
    pObj->IsContinuous = 0U;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
    pObj->IsAmbientEnabled = 0U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsInitialized = 1U;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
    ret = VL53L8CX_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <VL53L8CX_DeInit>:
  * @brief Deinitializes the vl53l8cx.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_DeInit(VL53L8CX_Object_t *pObj)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d103      	bne.n	8009f02 <VL53L8CX_DeInit+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8009efa:	f06f 0301 	mvn.w	r3, #1
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e018      	b.n	8009f34 <VL53L8CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d110      	bne.n	8009f2e <VL53L8CX_DeInit+0x42>
  {
    /* De-initialize the vl53l8cx interface */
    if (pObj->IO.DeInit() != 0)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4798      	blx	r3
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d003      	beq.n	8009f20 <VL53L8CX_DeInit+0x34>
    {
      ret = VL53L8CX_ERROR;
 8009f18:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	e009      	b.n	8009f34 <VL53L8CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L8CX_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8009f2c:	e002      	b.n	8009f34 <VL53L8CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L8CX_ERROR;
 8009f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f32:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009f34:	68fb      	ldr	r3, [r7, #12]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <VL53L8CX_ReadID>:
  * @param pObj    vl53l8cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ReadID(VL53L8CX_Object_t *pObj, uint32_t *pId)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L8CX_STATUS_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <VL53L8CX_ReadID+0x22>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d103      	bne.n	8009f68 <VL53L8CX_ReadID+0x2a>
  {
    ret = VL53L8CX_INVALID_PARAM;
 8009f60:	f06f 0301 	mvn.w	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	e045      	b.n	8009ff4 <VL53L8CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3318      	adds	r3, #24
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fe9f 	bl	8009cb6 <WrByte>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	7afb      	ldrb	r3, [r7, #11]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	3318      	adds	r3, #24
 8009f86:	f107 020a 	add.w	r2, r7, #10
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff fe7d 	bl	8009c8c <RdByte>
 8009f92:	4603      	mov	r3, r0
 8009f94:	461a      	mov	r2, r3
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3318      	adds	r3, #24
 8009fa0:	f107 0209 	add.w	r2, r7, #9
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7ff fe70 	bl	8009c8c <RdByte>
 8009fac:	4603      	mov	r3, r0
 8009fae:	461a      	mov	r2, r3
 8009fb0:	7afb      	ldrb	r3, [r7, #11]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3318      	adds	r3, #24
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff fe78 	bl	8009cb6 <WrByte>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	461a      	mov	r2, r3
 8009fca:	7afb      	ldrb	r3, [r7, #11]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8009fd0:	7afb      	ldrb	r3, [r7, #11]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d108      	bne.n	8009fe8 <VL53L8CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8009fd6:	7abb      	ldrb	r3, [r7, #10]
 8009fd8:	021b      	lsls	r3, r3, #8
 8009fda:	7a7a      	ldrb	r2, [r7, #9]
 8009fdc:	441a      	add	r2, r3
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	e005      	b.n	8009ff4 <VL53L8CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]
      ret = VL53L8CX_ERROR;
 8009fee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <VL53L8CX_GetCapabilities>:
  * @param pObj    vl53l8cx context object.
  * @param pCap    Pointer to the vl53l8cx capabilities.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetCapabilities(VL53L8CX_Object_t *pObj, VL53L8CX_Capabilities_t *pCap)
{
 8009ffe:	b480      	push	{r7}
 800a000:	b085      	sub	sp, #20
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <VL53L8CX_GetCapabilities+0x16>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d103      	bne.n	800a01c <VL53L8CX_GetCapabilities+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a014:	f06f 0301 	mvn.w	r3, #1
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	e00d      	b.n	800a038 <VL53L8CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L8CX_RESOLUTION_8X8;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2240      	movs	r2, #64	; 0x40
 800a020:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L8CX_TARGET_PER_ZONE;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2201      	movs	r2, #1
 800a026:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2200      	movs	r2, #0
 800a02c:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2201      	movs	r2, #1
 800a032:	60da      	str	r2, [r3, #12]

    ret = VL53L8CX_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a038:	68fb      	ldr	r3, [r7, #12]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
	...

0800a048 <VL53L8CX_ConfigProfile>:
  * @param pObj    vl53l8cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigProfile(VL53L8CX_Object_t *pObj, VL53L8CX_ProfileConfig_t *pConfig)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L8CX_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01b      	beq.n	800a094 <VL53L8CX_ConfigProfile+0x4c>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d018      	beq.n	800a094 <VL53L8CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L8CX_INVALID_PARAM;
  }

  switch (profile)
 800a074:	7c7b      	ldrb	r3, [r7, #17]
 800a076:	3b01      	subs	r3, #1
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d822      	bhi.n	800a0c2 <VL53L8CX_ConfigProfile+0x7a>
 800a07c:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <VL53L8CX_ConfigProfile+0x3c>)
 800a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a082:	bf00      	nop
 800a084:	0800a09b 	.word	0x0800a09b
 800a088:	0800a0a5 	.word	0x0800a0a5
 800a08c:	0800a0af 	.word	0x0800a0af
 800a090:	0800a0b9 	.word	0x0800a0b9
    return VL53L8CX_INVALID_PARAM;
 800a094:	f06f 0301 	mvn.w	r3, #1
 800a098:	e070      	b.n	800a17c <VL53L8CX_ConfigProfile+0x134>
  {
  case VL53L8CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 800a09a:	2310      	movs	r3, #16
 800a09c:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	74bb      	strb	r3, [r7, #18]
    break;
 800a0a2:	e016      	b.n	800a0d2 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_4X4;
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	74bb      	strb	r3, [r7, #18]
    break;
 800a0ac:	e011      	b.n	800a0d2 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 800a0ae:	2340      	movs	r3, #64	; 0x40
 800a0b0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_CONTINUOUS;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	74bb      	strb	r3, [r7, #18]
    break;
 800a0b6:	e00c      	b.n	800a0d2 <VL53L8CX_ConfigProfile+0x8a>
  case VL53L8CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L8CX_RESOLUTION_8X8;
 800a0b8:	2340      	movs	r3, #64	; 0x40
 800a0ba:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L8CX_RANGING_MODE_AUTONOMOUS;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	74bb      	strb	r3, [r7, #18]
    break;
 800a0c0:	e007      	b.n	800a0d2 <VL53L8CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	74bb      	strb	r3, [r7, #18]
    ret = VL53L8CX_INVALID_PARAM;
 800a0ca:	f06f 0301 	mvn.w	r3, #1
 800a0ce:	617b      	str	r3, [r7, #20]
    break;
 800a0d0:	bf00      	nop
  }

  if (ret != VL53L8CX_OK)
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <VL53L8CX_ConfigProfile+0x94>
  {
    return ret;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	e04f      	b.n	800a17c <VL53L8CX_ConfigProfile+0x134>
  }
  else if (vl53l8cx_set_resolution(&pObj->Dev, resolution) != VL53L8CX_STATUS_OK)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3318      	adds	r3, #24
 800a0e0:	7cfa      	ldrb	r2, [r7, #19]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff f95e 	bl	80093a6 <vl53l8cx_set_resolution>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <VL53L8CX_ConfigProfile+0xb0>
  {
    ret = VL53L8CX_ERROR;
 800a0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	e040      	b.n	800a17a <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L8CX_STATUS_OK)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3318      	adds	r3, #24
 800a0fc:	7cba      	ldrb	r2, [r7, #18]
 800a0fe:	4611      	mov	r1, r2
 800a100:	4618      	mov	r0, r3
 800a102:	f7ff fa7a 	bl	80095fa <vl53l8cx_set_ranging_mode>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <VL53L8CX_ConfigProfile+0xcc>
  {
    ret = VL53L8CX_ERROR;
 800a10c:	f04f 33ff 	mov.w	r3, #4294967295
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	e032      	b.n	800a17a <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L8CX_STATUS_OK)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3318      	adds	r3, #24
 800a118:	68f9      	ldr	r1, [r7, #12]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7ff fa38 	bl	8009590 <vl53l8cx_set_integration_time_ms>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <VL53L8CX_ConfigProfile+0xe6>
  {
    ret = VL53L8CX_ERROR;
 800a126:	f04f 33ff 	mov.w	r3, #4294967295
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	e025      	b.n	800a17a <VL53L8CX_ConfigProfile+0x132>
  }
  else if (vl53l8cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L8CX_STATUS_OK)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3318      	adds	r3, #24
 800a132:	7afa      	ldrb	r2, [r7, #11]
 800a134:	4611      	mov	r1, r2
 800a136:	4618      	mov	r0, r3
 800a138:	f7ff fa09 	bl	800954e <vl53l8cx_set_ranging_frequency_hz>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d003      	beq.n	800a14a <VL53L8CX_ConfigProfile+0x102>
  {
    ret = VL53L8CX_ERROR;
 800a142:	f04f 33ff 	mov.w	r3, #4294967295
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	e017      	b.n	800a17a <VL53L8CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bf14      	ite	ne
 800a152:	2301      	movne	r3, #1
 800a154:	2300      	moveq	r3, #0
 800a156:	b2db      	uxtb	r3, r3
 800a158:	461a      	mov	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	bf14      	ite	ne
 800a168:	2301      	movne	r3, #1
 800a16a:	2300      	moveq	r3, #0
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	461a      	mov	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951

    ret = VL53L8CX_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800a17a:	697b      	ldr	r3, [r7, #20]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <VL53L8CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigROI(VL53L8CX_Object_t *pObj, VL53L8CX_ROIConfig_t *pROIConfig)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L8CX_NOT_IMPLEMENTED;
 800a18e:	f06f 0303 	mvn.w	r3, #3
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <VL53L8CX_ConfigIT>:
  * @param pObj    vl53l8cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_ConfigIT(VL53L8CX_Object_t *pObj, VL53L8CX_ITConfig_t *pITConfig)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	72bb      	strb	r3, [r7, #10]
  static VL53L8CX_DetectionThresholds thresholds[VL53L8CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <VL53L8CX_ConfigIT+0x1a>
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d103      	bne.n	800a1c2 <VL53L8CX_ConfigIT+0x22>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a1ba:	f06f 0301 	mvn.w	r3, #1
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	e09f      	b.n	800a302 <VL53L8CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L8CX_IT_DEFAULT)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2bff      	cmp	r3, #255	; 0xff
 800a1c8:	d113      	bne.n	800a1f2 <VL53L8CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3318      	adds	r3, #24
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fbbd 	bl	8009950 <vl53l8cx_set_detection_thresholds_enable>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	461a      	mov	r2, r3
 800a1da:	7abb      	ldrb	r3, [r7, #10]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 800a1e0:	7abb      	ldrb	r3, [r7, #10]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <VL53L8CX_ConfigIT+0x4c>
 800a1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ea:	e000      	b.n	800a1ee <VL53L8CX_ConfigIT+0x4e>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	e087      	b.n	800a302 <VL53L8CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l8cx_get_resolution(&pObj->Dev, &res);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	3318      	adds	r3, #24
 800a1f6:	f107 0209 	add.w	r2, r7, #9
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff f8ad 	bl	800935c <vl53l8cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 800a202:	2300      	movs	r3, #0
 800a204:	72fb      	strb	r3, [r7, #11]
 800a206:	e044      	b.n	800a292 <VL53L8CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 800a208:	7afa      	ldrb	r2, [r7, #11]
 800a20a:	4940      	ldr	r1, [pc, #256]	; (800a30c <VL53L8CX_ConfigIT+0x16c>)
 800a20c:	4613      	mov	r3, r2
 800a20e:	005b      	lsls	r3, r3, #1
 800a210:	4413      	add	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	440b      	add	r3, r1
 800a216:	330a      	adds	r3, #10
 800a218:	7afa      	ldrb	r2, [r7, #11]
 800a21a:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L8CX_DISTANCE_MM;
 800a21c:	7afa      	ldrb	r2, [r7, #11]
 800a21e:	493b      	ldr	r1, [pc, #236]	; (800a30c <VL53L8CX_ConfigIT+0x16c>)
 800a220:	4613      	mov	r3, r2
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	4413      	add	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	440b      	add	r3, r1
 800a22a:	3308      	adds	r3, #8
 800a22c:	2201      	movs	r2, #1
 800a22e:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	7afa      	ldrb	r2, [r7, #11]
 800a236:	b2d8      	uxtb	r0, r3
 800a238:	4934      	ldr	r1, [pc, #208]	; (800a30c <VL53L8CX_ConfigIT+0x16c>)
 800a23a:	4613      	mov	r3, r2
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	440b      	add	r3, r1
 800a244:	3309      	adds	r3, #9
 800a246:	4602      	mov	r2, r0
 800a248:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L8CX_OPERATION_NONE;
 800a24a:	7afa      	ldrb	r2, [r7, #11]
 800a24c:	492f      	ldr	r1, [pc, #188]	; (800a30c <VL53L8CX_ConfigIT+0x16c>)
 800a24e:	4613      	mov	r3, r2
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	440b      	add	r3, r1
 800a258:	330b      	adds	r3, #11
 800a25a:	2200      	movs	r2, #0
 800a25c:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	7afa      	ldrb	r2, [r7, #11]
 800a264:	4618      	mov	r0, r3
 800a266:	4929      	ldr	r1, [pc, #164]	; (800a30c <VL53L8CX_ConfigIT+0x16c>)
 800a268:	4613      	mov	r3, r2
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	4413      	add	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	440b      	add	r3, r1
 800a272:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	7afa      	ldrb	r2, [r7, #11]
 800a27a:	4618      	mov	r0, r3
 800a27c:	4923      	ldr	r1, [pc, #140]	; (800a30c <VL53L8CX_ConfigIT+0x16c>)
 800a27e:	4613      	mov	r3, r2
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	4413      	add	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	440b      	add	r3, r1
 800a288:	3304      	adds	r3, #4
 800a28a:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 800a28c:	7afb      	ldrb	r3, [r7, #11]
 800a28e:	3301      	adds	r3, #1
 800a290:	72fb      	strb	r3, [r7, #11]
 800a292:	7a7b      	ldrb	r3, [r7, #9]
 800a294:	7afa      	ldrb	r2, [r7, #11]
 800a296:	429a      	cmp	r2, r3
 800a298:	d3b6      	bcc.n	800a208 <VL53L8CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L8CX_LAST_THRESHOLD;
 800a29a:	7afa      	ldrb	r2, [r7, #11]
 800a29c:	491b      	ldr	r1, [pc, #108]	; (800a30c <VL53L8CX_ConfigIT+0x16c>)
 800a29e:	4613      	mov	r3, r2
 800a2a0:	005b      	lsls	r3, r3, #1
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	440b      	add	r3, r1
 800a2a8:	330a      	adds	r3, #10
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	7afa      	ldrb	r2, [r7, #11]
 800a2ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2b2:	b2d8      	uxtb	r0, r3
 800a2b4:	4915      	ldr	r1, [pc, #84]	; (800a30c <VL53L8CX_ConfigIT+0x16c>)
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	4413      	add	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	440b      	add	r3, r1
 800a2c0:	330a      	adds	r3, #10
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l8cx_set_detection_thresholds(&pObj->Dev, thresholds);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3318      	adds	r3, #24
 800a2ca:	4910      	ldr	r1, [pc, #64]	; (800a30c <VL53L8CX_ConfigIT+0x16c>)
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff fb85 	bl	80099dc <vl53l8cx_set_detection_thresholds>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	7abb      	ldrb	r3, [r7, #10]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l8cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3318      	adds	r3, #24
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff fb34 	bl	8009950 <vl53l8cx_set_detection_thresholds_enable>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	7abb      	ldrb	r3, [r7, #10]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L8CX_ERROR : VL53L8CX_OK;
 800a2f2:	7abb      	ldrb	r3, [r7, #10]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <VL53L8CX_ConfigIT+0x15e>
 800a2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fc:	e000      	b.n	800a300 <VL53L8CX_ConfigIT+0x160>
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a302:	68fb      	ldr	r3, [r7, #12]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	20001dfc 	.word	0x20001dfc

0800a310 <VL53L8CX_GetDistance>:
  * @param pObj    vl53l8cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetDistance(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <VL53L8CX_GetDistance+0x16>
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d103      	bne.n	800a32e <VL53L8CX_GetDistance+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a326:	f06f 0301 	mvn.w	r3, #1
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	e019      	b.n	800a362 <VL53L8CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 800a334:	2b00      	cmp	r3, #0
 800a336:	d103      	bne.n	800a340 <VL53L8CX_GetDistance+0x30>
  {
    ret = VL53L8CX_ERROR;
 800a338:	f04f 33ff 	mov.w	r3, #4294967295
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	e010      	b.n	800a362 <VL53L8CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 800a346:	2b01      	cmp	r3, #1
 800a348:	d106      	bne.n	800a358 <VL53L8CX_GetDistance+0x48>
    {
      ret = vl53l8cx_poll_for_measurement(pObj, V53L8CX_POLL_TIMEOUT);
 800a34a:	f241 3188 	movw	r1, #5000	; 0x1388
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f93a 	bl	800a5c8 <vl53l8cx_poll_for_measurement>
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	e004      	b.n	800a362 <VL53L8CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l8cx_poll_for_measurement(pObj, 0U);
 800a358:	2100      	movs	r1, #0
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f934 	bl	800a5c8 <vl53l8cx_poll_for_measurement>
 800a360:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L8CX_OK)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d104      	bne.n	800a372 <VL53L8CX_GetDistance+0x62>
  {
    ret = vl53l8cx_get_result(pObj, pResult);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f960 	bl	800a630 <vl53l8cx_get_result>
 800a370:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a372:	68fb      	ldr	r3, [r7, #12]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <VL53L8CX_Start>:
  * @param pObj    vl53l8cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Start(VL53L8CX_Object_t *pObj, uint32_t Mode)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d103      	bne.n	800a394 <VL53L8CX_Start+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a38c:	f06f 0301 	mvn.w	r3, #1
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	e04c      	b.n	800a42e <VL53L8CX_Start+0xb2>
  }
  else if (vl53l8cx_start_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3318      	adds	r3, #24
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe fb6f 	bl	8008a7c <vl53l8cx_start_ranging>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d141      	bne.n	800a428 <VL53L8CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L8CX_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d82f      	bhi.n	800a418 <VL53L8CX_Start+0x9c>
 800a3b8:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <VL53L8CX_Start+0x44>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a3d1 	.word	0x0800a3d1
 800a3c4:	0800a3e3 	.word	0x0800a3e3
 800a3c8:	0800a3f5 	.word	0x0800a3f5
 800a3cc:	0800a407 	.word	0x0800a407
    {
      case VL53L8CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800a3e0:	e025      	b.n	800a42e <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800a3f2:	e01c      	b.n	800a42e <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800a404:	e013      	b.n	800a42e <VL53L8CX_Start+0xb2>

      case VL53L8CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800a416:	e00a      	b.n	800a42e <VL53L8CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
        ret = VL53L8CX_INVALID_PARAM;
 800a420:	f06f 0301 	mvn.w	r3, #1
 800a424:	60fb      	str	r3, [r7, #12]
        break;
 800a426:	e002      	b.n	800a42e <VL53L8CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L8CX_ERROR;
 800a428:	f04f 33ff 	mov.w	r3, #4294967295
 800a42c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a42e:	68fb      	ldr	r3, [r7, #12]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <VL53L8CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l8cx context object.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_Stop(VL53L8CX_Object_t *pObj)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d103      	bne.n	800a44e <VL53L8CX_Stop+0x16>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a446:	f06f 0301 	mvn.w	r3, #1
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e01a      	b.n	800a484 <VL53L8CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 800a454:	2b00      	cmp	r3, #0
 800a456:	d103      	bne.n	800a460 <VL53L8CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L8CX_ERROR;
 800a458:	f04f 33ff 	mov.w	r3, #4294967295
 800a45c:	60fb      	str	r3, [r7, #12]
 800a45e:	e011      	b.n	800a484 <VL53L8CX_Stop+0x4c>
  }
  else if (vl53l8cx_stop_ranging(&pObj->Dev) == VL53L8CX_STATUS_OK)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3318      	adds	r3, #24
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe fc99 	bl	8008d9c <vl53l8cx_stop_ranging>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d106      	bne.n	800a47e <VL53L8CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L8CX_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	e002      	b.n	800a484 <VL53L8CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L8CX_ERROR;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a484:	68fb      	ldr	r3, [r7, #12]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <VL53L8CX_SetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param Address     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetAddress(VL53L8CX_Object_t *pObj, uint32_t Address)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <VL53L8CX_SetAddress+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a49e:	f06f 0301 	mvn.w	r3, #1
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	e016      	b.n	800a4d4 <VL53L8CX_SetAddress+0x46>
  }
  else if (vl53l8cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L8CX_STATUS_OK)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3318      	adds	r3, #24
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	b2d2      	uxtb	r2, r2
 800a4ae:	b292      	uxth	r2, r2
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe f9ea 	bl	800888c <vl53l8cx_set_i2c_address>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <VL53L8CX_SetAddress+0x38>
  {
    ret = VL53L8CX_ERROR;
 800a4be:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	e006      	b.n	800a4d4 <VL53L8CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	811a      	strh	r2, [r3, #8]
    ret = VL53L8CX_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <VL53L8CX_GetAddress>:
  * @param pObj    vl53l8cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetAddress(VL53L8CX_Object_t *pObj, uint32_t *pAddress)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b085      	sub	sp, #20
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <VL53L8CX_GetAddress+0x16>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d103      	bne.n	800a4fc <VL53L8CX_GetAddress+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a4f4:	f06f 0301 	mvn.w	r3, #1
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	e006      	b.n	800a50a <VL53L8CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	891b      	ldrh	r3, [r3, #8]
 800a500:	461a      	mov	r2, r3
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a50a:	68fb      	ldr	r3, [r7, #12]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <VL53L8CX_SetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_SetPowerMode(VL53L8CX_Object_t *pObj, uint32_t PowerMode)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d103      	bne.n	800a530 <VL53L8CX_SetPowerMode+0x18>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a528:	f06f 0301 	mvn.w	r3, #1
 800a52c:	60fb      	str	r3, [r7, #12]
 800a52e:	e01a      	b.n	800a566 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L8CX_POWER_MODE_SLEEP) &&
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d006      	beq.n	800a544 <VL53L8CX_SetPowerMode+0x2c>
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d003      	beq.n	800a544 <VL53L8CX_SetPowerMode+0x2c>
           (PowerMode != VL53L8CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a53c:	f06f 0301 	mvn.w	r3, #1
 800a540:	60fb      	str	r3, [r7, #12]
 800a542:	e010      	b.n	800a566 <VL53L8CX_SetPowerMode+0x4e>
  }
  else if (vl53l8cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L8CX_STATUS_OK)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3318      	adds	r3, #24
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	b2d2      	uxtb	r2, r2
 800a54c:	4611      	mov	r1, r2
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe fa15 	bl	800897e <vl53l8cx_set_power_mode>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <VL53L8CX_SetPowerMode+0x4a>
  {
    ret = VL53L8CX_ERROR;
 800a55a:	f04f 33ff 	mov.w	r3, #4294967295
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	e001      	b.n	800a566 <VL53L8CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L8CX_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a566:	68fb      	ldr	r3, [r7, #12]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <VL53L8CX_GetPowerMode>:
  * @param pObj    vl53l8cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L8CX status
  */
int32_t VL53L8CX_GetPowerMode(VL53L8CX_Object_t *pObj, uint32_t *pPowerMode)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <VL53L8CX_GetPowerMode+0x16>
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <VL53L8CX_GetPowerMode+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a586:	f06f 0301 	mvn.w	r3, #1
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	e017      	b.n	800a5be <VL53L8CX_GetPowerMode+0x4e>
  }
  else if (vl53l8cx_get_power_mode(&pObj->Dev, &powermode) != VL53L8CX_STATUS_OK)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	3318      	adds	r3, #24
 800a592:	f107 020b 	add.w	r2, r7, #11
 800a596:	4611      	mov	r1, r2
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fe f9ad 	bl	80088f8 <vl53l8cx_get_power_mode>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d006      	beq.n	800a5b2 <VL53L8CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_ERROR;
 800a5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	e005      	b.n	800a5be <VL53L8CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 800a5b2:	7afb      	ldrb	r3, [r7, #11]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	601a      	str	r2, [r3, #0]
    ret = VL53L8CX_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a5be:	68fb      	ldr	r3, [r7, #12]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <vl53l8cx_poll_for_measurement>:

/** @defgroup VL53L8CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l8cx_poll_for_measurement(VL53L8CX_Object_t *pObj, uint32_t Timeout)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d103      	bne.n	800a5e4 <vl53l8cx_poll_for_measurement+0x1c>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a5dc:	f06f 0301 	mvn.w	r3, #1
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	e01f      	b.n	800a624 <vl53l8cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L8CX_TIMEOUT;
 800a5e4:	f06f 0302 	mvn.w	r3, #2
 800a5e8:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	4798      	blx	r3
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l8cx_check_data_ready(&pObj->Dev, &NewDataReady);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3318      	adds	r3, #24
 800a5f8:	f107 020f 	add.w	r2, r7, #15
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fc97 	bl	8008f32 <vl53l8cx_check_data_ready>

      if (NewDataReady == 1U)
 800a604:	7bfb      	ldrb	r3, [r7, #15]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d102      	bne.n	800a610 <vl53l8cx_poll_for_measurement+0x48>
      {
        ret = VL53L8CX_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	617b      	str	r3, [r7, #20]
        break;
 800a60e:	e009      	b.n	800a624 <vl53l8cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	695b      	ldr	r3, [r3, #20]
 800a614:	4798      	blx	r3
 800a616:	4603      	mov	r3, r0
 800a618:	461a      	mov	r2, r3
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d8e7      	bhi.n	800a5f4 <vl53l8cx_poll_for_measurement+0x2c>

  }

  return ret;
 800a624:	697b      	ldr	r3, [r7, #20]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <vl53l8cx_get_result>:

static int32_t vl53l8cx_get_result(VL53L8CX_Object_t *pObj, VL53L8CX_Result_t *pResult)
{
 800a630:	b590      	push	{r4, r7, lr}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L8CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <vl53l8cx_get_result+0x16>
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d103      	bne.n	800a64e <vl53l8cx_get_result+0x1e>
  {
    ret = VL53L8CX_INVALID_PARAM;
 800a646:	f06f 0301 	mvn.w	r3, #1
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	e0cf      	b.n	800a7ee <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_resolution(&pObj->Dev, &resolution) != VL53L8CX_STATUS_OK)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3318      	adds	r3, #24
 800a652:	f107 0208 	add.w	r2, r7, #8
 800a656:	4611      	mov	r1, r2
 800a658:	4618      	mov	r0, r3
 800a65a:	f7fe fe7f 	bl	800935c <vl53l8cx_get_resolution>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d003      	beq.n	800a66c <vl53l8cx_get_result+0x3c>
  {
    ret = VL53L8CX_ERROR;
 800a664:	f04f 33ff 	mov.w	r3, #4294967295
 800a668:	60fb      	str	r3, [r7, #12]
 800a66a:	e0c0      	b.n	800a7ee <vl53l8cx_get_result+0x1be>
  }
  else if (vl53l8cx_get_ranging_data(&pObj->Dev, &data) != VL53L8CX_STATUS_OK)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3318      	adds	r3, #24
 800a670:	4961      	ldr	r1, [pc, #388]	; (800a7f8 <vl53l8cx_get_result+0x1c8>)
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe fcae 	bl	8008fd4 <vl53l8cx_get_ranging_data>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <vl53l8cx_get_result+0x56>
  {
    ret = VL53L8CX_ERROR;
 800a67e:	f04f 33ff 	mov.w	r3, #4294967295
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e0b3      	b.n	800a7ee <vl53l8cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 800a686:	7a3b      	ldrb	r3, [r7, #8]
 800a688:	461a      	mov	r2, r3
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 800a68e:	2300      	movs	r3, #0
 800a690:	72fb      	strb	r3, [r7, #11]
 800a692:	e0a5      	b.n	800a7e0 <vl53l8cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 800a694:	7afb      	ldrb	r3, [r7, #11]
 800a696:	7afa      	ldrb	r2, [r7, #11]
 800a698:	4957      	ldr	r1, [pc, #348]	; (800a7f8 <vl53l8cx_get_result+0x1c8>)
 800a69a:	440b      	add	r3, r1
 800a69c:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	440b      	add	r3, r1
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	72bb      	strb	r3, [r7, #10]
 800a6b6:	e087      	b.n	800a7c8 <vl53l8cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 800a6b8:	7afa      	ldrb	r2, [r7, #11]
 800a6ba:	7abb      	ldrb	r3, [r7, #10]
 800a6bc:	4413      	add	r3, r2
 800a6be:	4a4e      	ldr	r2, [pc, #312]	; (800a7f8 <vl53l8cx_get_result+0x1c8>)
 800a6c0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	4413      	add	r3, r2
 800a6c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a6cc:	7afa      	ldrb	r2, [r7, #11]
 800a6ce:	7ab8      	ldrb	r0, [r7, #10]
 800a6d0:	461c      	mov	r4, r3
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	4403      	add	r3, r0
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	440b      	add	r3, r1
 800a6e0:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d116      	bne.n	800a71a <vl53l8cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	4a42      	ldr	r2, [pc, #264]	; (800a7f8 <vl53l8cx_get_result+0x1c8>)
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	7afa      	ldrb	r2, [r7, #11]
 800a6f8:	7ab8      	ldrb	r0, [r7, #10]
 800a6fa:	ee07 3a90 	vmov	s15, r3
 800a6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	4613      	mov	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	4403      	add	r3, r0
 800a70c:	3302      	adds	r3, #2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	440b      	add	r3, r1
 800a712:	3308      	adds	r3, #8
 800a714:	edc3 7a00 	vstr	s15, [r3]
 800a718:	e00d      	b.n	800a736 <vl53l8cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 800a71a:	7afa      	ldrb	r2, [r7, #11]
 800a71c:	7ab8      	ldrb	r0, [r7, #10]
 800a71e:	6839      	ldr	r1, [r7, #0]
 800a720:	4613      	mov	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4413      	add	r3, r2
 800a726:	4403      	add	r3, r0
 800a728:	3302      	adds	r3, #2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	3308      	adds	r3, #8
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d119      	bne.n	800a774 <vl53l8cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 800a740:	7afa      	ldrb	r2, [r7, #11]
 800a742:	7abb      	ldrb	r3, [r7, #10]
 800a744:	4413      	add	r3, r2
 800a746:	4a2c      	ldr	r2, [pc, #176]	; (800a7f8 <vl53l8cx_get_result+0x1c8>)
 800a748:	3350      	adds	r3, #80	; 0x50
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 800a750:	7afa      	ldrb	r2, [r7, #11]
 800a752:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 800a754:	ee07 3a90 	vmov	s15, r3
 800a758:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	4403      	add	r3, r0
 800a766:	3304      	adds	r3, #4
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	440b      	add	r3, r1
 800a76c:	3304      	adds	r3, #4
 800a76e:	edc3 7a00 	vstr	s15, [r3]
 800a772:	e00d      	b.n	800a790 <vl53l8cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 800a774:	7afa      	ldrb	r2, [r7, #11]
 800a776:	7ab8      	ldrb	r0, [r7, #10]
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	4403      	add	r3, r0
 800a782:	3304      	adds	r3, #4
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	440b      	add	r3, r1
 800a788:	3304      	adds	r3, #4
 800a78a:	f04f 0200 	mov.w	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L8CX_NB_TARGET_PER_ZONE * i) + j];
 800a790:	7afa      	ldrb	r2, [r7, #11]
 800a792:	7abb      	ldrb	r3, [r7, #10]
 800a794:	4413      	add	r3, r2
 800a796:	4a18      	ldr	r2, [pc, #96]	; (800a7f8 <vl53l8cx_get_result+0x1c8>)
 800a798:	4413      	add	r3, r2
 800a79a:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800a79e:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l8cx_map_target_status(target_status);
 800a7a0:	7a7b      	ldrb	r3, [r7, #9]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 f82a 	bl	800a7fc <vl53l8cx_map_target_status>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	7afa      	ldrb	r2, [r7, #11]
 800a7ac:	7ab8      	ldrb	r0, [r7, #10]
 800a7ae:	461c      	mov	r4, r3
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	4403      	add	r3, r0
 800a7ba:	3302      	adds	r3, #2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	440b      	add	r3, r1
 800a7c0:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 800a7c2:	7abb      	ldrb	r3, [r7, #10]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	72bb      	strb	r3, [r7, #10]
 800a7c8:	7afb      	ldrb	r3, [r7, #11]
 800a7ca:	4a0b      	ldr	r2, [pc, #44]	; (800a7f8 <vl53l8cx_get_result+0x1c8>)
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a7d2:	7aba      	ldrb	r2, [r7, #10]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	f4ff af6f 	bcc.w	800a6b8 <vl53l8cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 800a7da:	7afb      	ldrb	r3, [r7, #11]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	72fb      	strb	r3, [r7, #11]
 800a7e0:	7a3b      	ldrb	r3, [r7, #8]
 800a7e2:	7afa      	ldrb	r2, [r7, #11]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	f4ff af55 	bcc.w	800a694 <vl53l8cx_get_result+0x64>
      }
    }

    ret = VL53L8CX_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3714      	adds	r7, #20
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd90      	pop	{r4, r7, pc}
 800a7f8:	200020fc 	.word	0x200020fc

0800a7fc <vl53l8cx_map_target_status>:

static uint8_t vl53l8cx_map_target_status(uint8_t status)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 800a806:	79fb      	ldrb	r3, [r7, #7]
 800a808:	2b05      	cmp	r3, #5
 800a80a:	d002      	beq.n	800a812 <vl53l8cx_map_target_status+0x16>
 800a80c:	79fb      	ldrb	r3, [r7, #7]
 800a80e:	2b09      	cmp	r3, #9
 800a810:	d102      	bne.n	800a818 <vl53l8cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]
 800a816:	e007      	b.n	800a828 <vl53l8cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d102      	bne.n	800a824 <vl53l8cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800a81e:	23ff      	movs	r3, #255	; 0xff
 800a820:	73fb      	strb	r3, [r7, #15]
 800a822:	e001      	b.n	800a828 <vl53l8cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a828:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
	...

0800a838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a838:	b480      	push	{r7}
 800a83a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800a83c:	4b26      	ldr	r3, [pc, #152]	; (800a8d8 <SystemInit+0xa0>)
 800a83e:	2200      	movs	r2, #0
 800a840:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800a842:	4b25      	ldr	r3, [pc, #148]	; (800a8d8 <SystemInit+0xa0>)
 800a844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a848:	4a23      	ldr	r2, [pc, #140]	; (800a8d8 <SystemInit+0xa0>)
 800a84a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a84e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a85c:	f043 0301 	orr.w	r3, r3, #1
 800a860:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800a862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a866:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800a86a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800a86c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a876:	4b19      	ldr	r3, [pc, #100]	; (800a8dc <SystemInit+0xa4>)
 800a878:	4013      	ands	r3, r2
 800a87a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800a87c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a888:	f023 0305 	bic.w	r3, r3, #5
 800a88c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800a890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a89c:	f023 0301 	bic.w	r3, r3, #1
 800a8a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800a8a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8a8:	4a0d      	ldr	r2, [pc, #52]	; (800a8e0 <SystemInit+0xa8>)
 800a8aa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800a8ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8b0:	4a0b      	ldr	r2, [pc, #44]	; (800a8e0 <SystemInit+0xa8>)
 800a8b2:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a8b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a8c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	619a      	str	r2, [r3, #24]
}
 800a8cc:	bf00      	nop
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	e000ed00 	.word	0xe000ed00
 800a8dc:	faf6fefb 	.word	0xfaf6fefb
 800a8e0:	22041000 	.word	0x22041000

0800a8e4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800a8e8:	4b05      	ldr	r3, [pc, #20]	; (800a900 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	4a04      	ldr	r2, [pc, #16]	; (800a900 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800a8ee:	f043 0301 	orr.w	r3, r3, #1
 800a8f2:	6053      	str	r3, [r2, #4]
}
 800a8f4:	bf00      	nop
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	e0042000 	.word	0xe0042000

0800a904 <LL_DBGMCU_EnableDBGStopMode>:
{
 800a904:	b480      	push	{r7}
 800a906:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800a908:	4b05      	ldr	r3, [pc, #20]	; (800a920 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	4a04      	ldr	r2, [pc, #16]	; (800a920 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800a90e:	f043 0302 	orr.w	r3, r3, #2
 800a912:	6053      	str	r3, [r2, #4]
}
 800a914:	bf00      	nop
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	e0042000 	.word	0xe0042000

0800a924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a92e:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <HAL_Init+0x3c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a0b      	ldr	r2, [pc, #44]	; (800a960 <HAL_Init+0x3c>)
 800a934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a938:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a93a:	2003      	movs	r0, #3
 800a93c:	f000 f9c0 	bl	800acc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a940:	2000      	movs	r0, #0
 800a942:	f000 f80f 	bl	800a964 <HAL_InitTick>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	71fb      	strb	r3, [r7, #7]
 800a950:	e001      	b.n	800a956 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a952:	f7f9 fe38 	bl	80045c6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a956:	79fb      	ldrb	r3, [r7, #7]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	58004000 	.word	0x58004000

0800a964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800a970:	4b17      	ldr	r3, [pc, #92]	; (800a9d0 <HAL_InitTick+0x6c>)
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d024      	beq.n	800a9c2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a978:	f003 f818 	bl	800d9ac <HAL_RCC_GetHCLKFreq>
 800a97c:	4602      	mov	r2, r0
 800a97e:	4b14      	ldr	r3, [pc, #80]	; (800a9d0 <HAL_InitTick+0x6c>)
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	4619      	mov	r1, r3
 800a984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a988:	fbb3 f3f1 	udiv	r3, r3, r1
 800a98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a990:	4618      	mov	r0, r3
 800a992:	f000 f9d6 	bl	800ad42 <HAL_SYSTICK_Config>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10f      	bne.n	800a9bc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b0f      	cmp	r3, #15
 800a9a0:	d809      	bhi.n	800a9b6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	6879      	ldr	r1, [r7, #4]
 800a9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9aa:	f000 f994 	bl	800acd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a9ae:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <HAL_InitTick+0x70>)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	e007      	b.n	800a9c6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	73fb      	strb	r3, [r7, #15]
 800a9ba:	e004      	b.n	800a9c6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	73fb      	strb	r3, [r7, #15]
 800a9c0:	e001      	b.n	800a9c6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	2000007c 	.word	0x2000007c
 800a9d4:	20000078 	.word	0x20000078

0800a9d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a9dc:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <HAL_IncTick+0x20>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4b06      	ldr	r3, [pc, #24]	; (800a9fc <HAL_IncTick+0x24>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	4a04      	ldr	r2, [pc, #16]	; (800a9fc <HAL_IncTick+0x24>)
 800a9ea:	6013      	str	r3, [r2, #0]
}
 800a9ec:	bf00      	nop
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	2000007c 	.word	0x2000007c
 800a9fc:	200024cc 	.word	0x200024cc

0800aa00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
  return uwTick;
 800aa04:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <HAL_GetTick+0x14>)
 800aa06:	681b      	ldr	r3, [r3, #0]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	200024cc 	.word	0x200024cc

0800aa18 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800aa1c:	4b03      	ldr	r3, [pc, #12]	; (800aa2c <HAL_GetTickPrio+0x14>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	20000078 	.word	0x20000078

0800aa30 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800aa30:	b480      	push	{r7}
 800aa32:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800aa34:	4b03      	ldr	r3, [pc, #12]	; (800aa44 <HAL_GetTickFreq+0x14>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	2000007c 	.word	0x2000007c

0800aa48 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800aa4c:	f7ff ff4a 	bl	800a8e4 <LL_DBGMCU_EnableDBGSleepMode>
}
 800aa50:	bf00      	nop
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800aa58:	f7ff ff54 	bl	800a904 <LL_DBGMCU_EnableDBGStopMode>
}
 800aa5c:	bf00      	nop
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f003 0307 	and.w	r3, r3, #7
 800aa6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aa70:	4b0c      	ldr	r3, [pc, #48]	; (800aaa4 <__NVIC_SetPriorityGrouping+0x44>)
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aa88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800aa8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aa92:	4a04      	ldr	r2, [pc, #16]	; (800aaa4 <__NVIC_SetPriorityGrouping+0x44>)
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	60d3      	str	r3, [r2, #12]
}
 800aa98:	bf00      	nop
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	e000ed00 	.word	0xe000ed00

0800aaa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aaac:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <__NVIC_GetPriorityGrouping+0x18>)
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	0a1b      	lsrs	r3, r3, #8
 800aab2:	f003 0307 	and.w	r3, r3, #7
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr
 800aac0:	e000ed00 	.word	0xe000ed00

0800aac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	4603      	mov	r3, r0
 800aacc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	db0b      	blt.n	800aaee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	f003 021f 	and.w	r2, r3, #31
 800aadc:	4907      	ldr	r1, [pc, #28]	; (800aafc <__NVIC_EnableIRQ+0x38>)
 800aade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aae2:	095b      	lsrs	r3, r3, #5
 800aae4:	2001      	movs	r0, #1
 800aae6:	fa00 f202 	lsl.w	r2, r0, r2
 800aaea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800aaee:	bf00      	nop
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	e000e100 	.word	0xe000e100

0800ab00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4603      	mov	r3, r0
 800ab08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	db12      	blt.n	800ab38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab12:	79fb      	ldrb	r3, [r7, #7]
 800ab14:	f003 021f 	and.w	r2, r3, #31
 800ab18:	490a      	ldr	r1, [pc, #40]	; (800ab44 <__NVIC_DisableIRQ+0x44>)
 800ab1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab1e:	095b      	lsrs	r3, r3, #5
 800ab20:	2001      	movs	r0, #1
 800ab22:	fa00 f202 	lsl.w	r2, r0, r2
 800ab26:	3320      	adds	r3, #32
 800ab28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ab2c:	f3bf 8f4f 	dsb	sy
}
 800ab30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ab32:	f3bf 8f6f 	isb	sy
}
 800ab36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	e000e100 	.word	0xe000e100

0800ab48 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	db0c      	blt.n	800ab74 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab5a:	79fb      	ldrb	r3, [r7, #7]
 800ab5c:	f003 021f 	and.w	r2, r3, #31
 800ab60:	4907      	ldr	r1, [pc, #28]	; (800ab80 <__NVIC_SetPendingIRQ+0x38>)
 800ab62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab66:	095b      	lsrs	r3, r3, #5
 800ab68:	2001      	movs	r0, #1
 800ab6a:	fa00 f202 	lsl.w	r2, r0, r2
 800ab6e:	3340      	adds	r3, #64	; 0x40
 800ab70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	e000e100 	.word	0xe000e100

0800ab84 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	db0c      	blt.n	800abb0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab96:	79fb      	ldrb	r3, [r7, #7]
 800ab98:	f003 021f 	and.w	r2, r3, #31
 800ab9c:	4907      	ldr	r1, [pc, #28]	; (800abbc <__NVIC_ClearPendingIRQ+0x38>)
 800ab9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aba2:	095b      	lsrs	r3, r3, #5
 800aba4:	2001      	movs	r0, #1
 800aba6:	fa00 f202 	lsl.w	r2, r0, r2
 800abaa:	3360      	adds	r3, #96	; 0x60
 800abac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	e000e100 	.word	0xe000e100

0800abc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	6039      	str	r1, [r7, #0]
 800abca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	db0a      	blt.n	800abea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	490c      	ldr	r1, [pc, #48]	; (800ac0c <__NVIC_SetPriority+0x4c>)
 800abda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abde:	0112      	lsls	r2, r2, #4
 800abe0:	b2d2      	uxtb	r2, r2
 800abe2:	440b      	add	r3, r1
 800abe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800abe8:	e00a      	b.n	800ac00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	b2da      	uxtb	r2, r3
 800abee:	4908      	ldr	r1, [pc, #32]	; (800ac10 <__NVIC_SetPriority+0x50>)
 800abf0:	79fb      	ldrb	r3, [r7, #7]
 800abf2:	f003 030f 	and.w	r3, r3, #15
 800abf6:	3b04      	subs	r3, #4
 800abf8:	0112      	lsls	r2, r2, #4
 800abfa:	b2d2      	uxtb	r2, r2
 800abfc:	440b      	add	r3, r1
 800abfe:	761a      	strb	r2, [r3, #24]
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	e000e100 	.word	0xe000e100
 800ac10:	e000ed00 	.word	0xe000ed00

0800ac14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b089      	sub	sp, #36	; 0x24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	f1c3 0307 	rsb	r3, r3, #7
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	bf28      	it	cs
 800ac32:	2304      	movcs	r3, #4
 800ac34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	3304      	adds	r3, #4
 800ac3a:	2b06      	cmp	r3, #6
 800ac3c:	d902      	bls.n	800ac44 <NVIC_EncodePriority+0x30>
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	3b03      	subs	r3, #3
 800ac42:	e000      	b.n	800ac46 <NVIC_EncodePriority+0x32>
 800ac44:	2300      	movs	r3, #0
 800ac46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac48:	f04f 32ff 	mov.w	r2, #4294967295
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac52:	43da      	mvns	r2, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	401a      	ands	r2, r3
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ac5c:	f04f 31ff 	mov.w	r1, #4294967295
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	fa01 f303 	lsl.w	r3, r1, r3
 800ac66:	43d9      	mvns	r1, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ac6c:	4313      	orrs	r3, r2
         );
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3724      	adds	r7, #36	; 0x24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
	...

0800ac7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac8c:	d301      	bcc.n	800ac92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e00f      	b.n	800acb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ac92:	4a0a      	ldr	r2, [pc, #40]	; (800acbc <SysTick_Config+0x40>)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ac9a:	210f      	movs	r1, #15
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	f7ff ff8e 	bl	800abc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aca4:	4b05      	ldr	r3, [pc, #20]	; (800acbc <SysTick_Config+0x40>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800acaa:	4b04      	ldr	r3, [pc, #16]	; (800acbc <SysTick_Config+0x40>)
 800acac:	2207      	movs	r2, #7
 800acae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	e000e010 	.word	0xe000e010

0800acc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fec9 	bl	800aa60 <__NVIC_SetPriorityGrouping>
}
 800acce:	bf00      	nop
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b086      	sub	sp, #24
 800acda:	af00      	add	r7, sp, #0
 800acdc:	4603      	mov	r3, r0
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	607a      	str	r2, [r7, #4]
 800ace2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ace4:	f7ff fee0 	bl	800aaa8 <__NVIC_GetPriorityGrouping>
 800ace8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	68b9      	ldr	r1, [r7, #8]
 800acee:	6978      	ldr	r0, [r7, #20]
 800acf0:	f7ff ff90 	bl	800ac14 <NVIC_EncodePriority>
 800acf4:	4602      	mov	r2, r0
 800acf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acfa:	4611      	mov	r1, r2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff ff5f 	bl	800abc0 <__NVIC_SetPriority>
}
 800ad02:	bf00      	nop
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	4603      	mov	r3, r0
 800ad12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ad14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fed3 	bl	800aac4 <__NVIC_EnableIRQ>
}
 800ad1e:	bf00      	nop
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ad30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff fee3 	bl	800ab00 <__NVIC_DisableIRQ>
}
 800ad3a:	bf00      	nop
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b082      	sub	sp, #8
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff ff96 	bl	800ac7c <SysTick_Config>
 800ad50:	4603      	mov	r3, r0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	4603      	mov	r3, r0
 800ad62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800ad64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff feed 	bl	800ab48 <__NVIC_SetPendingIRQ>
}
 800ad6e:	bf00      	nop
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b082      	sub	sp, #8
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800ad80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff fefd 	bl	800ab84 <__NVIC_ClearPendingIRQ>
}
 800ad8a:	bf00      	nop
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e08e      	b.n	800aec4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	4b47      	ldr	r3, [pc, #284]	; (800aecc <HAL_DMA_Init+0x138>)
 800adae:	429a      	cmp	r2, r3
 800adb0:	d80f      	bhi.n	800add2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	4b45      	ldr	r3, [pc, #276]	; (800aed0 <HAL_DMA_Init+0x13c>)
 800adba:	4413      	add	r3, r2
 800adbc:	4a45      	ldr	r2, [pc, #276]	; (800aed4 <HAL_DMA_Init+0x140>)
 800adbe:	fba2 2303 	umull	r2, r3, r2, r3
 800adc2:	091b      	lsrs	r3, r3, #4
 800adc4:	009a      	lsls	r2, r3, #2
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a42      	ldr	r2, [pc, #264]	; (800aed8 <HAL_DMA_Init+0x144>)
 800adce:	641a      	str	r2, [r3, #64]	; 0x40
 800add0:	e00e      	b.n	800adf0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	4b40      	ldr	r3, [pc, #256]	; (800aedc <HAL_DMA_Init+0x148>)
 800adda:	4413      	add	r3, r2
 800addc:	4a3d      	ldr	r2, [pc, #244]	; (800aed4 <HAL_DMA_Init+0x140>)
 800adde:	fba2 2303 	umull	r2, r3, r2, r3
 800ade2:	091b      	lsrs	r3, r3, #4
 800ade4:	009a      	lsls	r2, r3, #2
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a3c      	ldr	r2, [pc, #240]	; (800aee0 <HAL_DMA_Init+0x14c>)
 800adee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ae06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ae14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ae20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ae2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fa74 	bl	800b330 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae50:	d102      	bne.n	800ae58 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae60:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ae64:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ae6e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d010      	beq.n	800ae9a <HAL_DMA_Init+0x106>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d80c      	bhi.n	800ae9a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fa93 	bl	800b3ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ae96:	605a      	str	r2, [r3, #4]
 800ae98:	e008      	b.n	800aeac <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	40020407 	.word	0x40020407
 800aed0:	bffdfff8 	.word	0xbffdfff8
 800aed4:	cccccccd 	.word	0xcccccccd
 800aed8:	40020000 	.word	0x40020000
 800aedc:	bffdfbf8 	.word	0xbffdfbf8
 800aee0:	40020400 	.word	0x40020400

0800aee4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d101      	bne.n	800af04 <HAL_DMA_Start_IT+0x20>
 800af00:	2302      	movs	r3, #2
 800af02:	e066      	b.n	800afd2 <HAL_DMA_Start_IT+0xee>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b01      	cmp	r3, #1
 800af16:	d155      	bne.n	800afc4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2202      	movs	r2, #2
 800af1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f022 0201 	bic.w	r2, r2, #1
 800af34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	68b9      	ldr	r1, [r7, #8]
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 f9b9 	bl	800b2b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	2b00      	cmp	r3, #0
 800af48:	d008      	beq.n	800af5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f042 020e 	orr.w	r2, r2, #14
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	e00f      	b.n	800af7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f022 0204 	bic.w	r2, r2, #4
 800af6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f042 020a 	orr.w	r2, r2, #10
 800af7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d007      	beq.n	800af9a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af98:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d007      	beq.n	800afb2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afb0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f042 0201 	orr.w	r2, r2, #1
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	e005      	b.n	800afd0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800afcc:	2302      	movs	r3, #2
 800afce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	e04f      	b.n	800b08c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d008      	beq.n	800b00a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2204      	movs	r2, #4
 800affc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e040      	b.n	800b08c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f022 020e 	bic.w	r2, r2, #14
 800b018:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f022 0201 	bic.w	r2, r2, #1
 800b038:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b03e:	f003 021c 	and.w	r2, r3, #28
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b046:	2101      	movs	r1, #1
 800b048:	fa01 f202 	lsl.w	r2, r1, r2
 800b04c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b056:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00c      	beq.n	800b07a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b06e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b078:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d005      	beq.n	800b0bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2204      	movs	r2, #4
 800b0b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	73fb      	strb	r3, [r7, #15]
 800b0ba:	e047      	b.n	800b14c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 020e 	bic.w	r2, r2, #14
 800b0ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f022 0201 	bic.w	r2, r2, #1
 800b0da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f0:	f003 021c 	and.w	r2, r3, #28
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	fa01 f202 	lsl.w	r2, r1, r2
 800b0fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b108:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00c      	beq.n	800b12c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b11c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b120:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b12a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	4798      	blx	r3
    }
  }
  return status;
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b172:	f003 031c 	and.w	r3, r3, #28
 800b176:	2204      	movs	r2, #4
 800b178:	409a      	lsls	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	4013      	ands	r3, r2
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d026      	beq.n	800b1d0 <HAL_DMA_IRQHandler+0x7a>
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f003 0304 	and.w	r3, r3, #4
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d021      	beq.n	800b1d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0320 	and.w	r3, r3, #32
 800b196:	2b00      	cmp	r3, #0
 800b198:	d107      	bne.n	800b1aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f022 0204 	bic.w	r2, r2, #4
 800b1a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ae:	f003 021c 	and.w	r2, r3, #28
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	2104      	movs	r1, #4
 800b1b8:	fa01 f202 	lsl.w	r2, r1, r2
 800b1bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d071      	beq.n	800b2aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b1ce:	e06c      	b.n	800b2aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1d4:	f003 031c 	and.w	r3, r3, #28
 800b1d8:	2202      	movs	r2, #2
 800b1da:	409a      	lsls	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d02e      	beq.n	800b242 <HAL_DMA_IRQHandler+0xec>
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f003 0302 	and.w	r3, r3, #2
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d029      	beq.n	800b242 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0320 	and.w	r3, r3, #32
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10b      	bne.n	800b214 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f022 020a 	bic.w	r2, r2, #10
 800b20a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b218:	f003 021c 	and.w	r2, r3, #28
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b220:	2102      	movs	r1, #2
 800b222:	fa01 f202 	lsl.w	r2, r1, r2
 800b226:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b234:	2b00      	cmp	r3, #0
 800b236:	d038      	beq.n	800b2aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b240:	e033      	b.n	800b2aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b246:	f003 031c 	and.w	r3, r3, #28
 800b24a:	2208      	movs	r2, #8
 800b24c:	409a      	lsls	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4013      	ands	r3, r2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d02a      	beq.n	800b2ac <HAL_DMA_IRQHandler+0x156>
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f003 0308 	and.w	r3, r3, #8
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d025      	beq.n	800b2ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f022 020e 	bic.w	r2, r2, #14
 800b26e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b274:	f003 021c 	and.w	r2, r3, #28
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27c:	2101      	movs	r1, #1
 800b27e:	fa01 f202 	lsl.w	r2, r1, r2
 800b282:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d004      	beq.n	800b2ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
}
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b2ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d004      	beq.n	800b2de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b2dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e2:	f003 021c 	and.w	r2, r3, #28
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	fa01 f202 	lsl.w	r2, r1, r2
 800b2f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	2b10      	cmp	r3, #16
 800b300:	d108      	bne.n	800b314 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b312:	e007      	b.n	800b324 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	60da      	str	r2, [r3, #12]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	461a      	mov	r2, r3
 800b33e:	4b17      	ldr	r3, [pc, #92]	; (800b39c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800b340:	429a      	cmp	r2, r3
 800b342:	d80a      	bhi.n	800b35a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b348:	089b      	lsrs	r3, r3, #2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b350:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	6493      	str	r3, [r2, #72]	; 0x48
 800b358:	e007      	b.n	800b36a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35e:	089b      	lsrs	r3, r3, #2
 800b360:	009a      	lsls	r2, r3, #2
 800b362:	4b0f      	ldr	r3, [pc, #60]	; (800b3a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800b364:	4413      	add	r3, r2
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	3b08      	subs	r3, #8
 800b372:	4a0c      	ldr	r2, [pc, #48]	; (800b3a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800b374:	fba2 2303 	umull	r2, r3, r2, r3
 800b378:	091b      	lsrs	r3, r3, #4
 800b37a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a0a      	ldr	r2, [pc, #40]	; (800b3a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800b380:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f003 031f 	and.w	r3, r3, #31
 800b388:	2201      	movs	r2, #1
 800b38a:	409a      	lsls	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b390:	bf00      	nop
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	40020407 	.word	0x40020407
 800b3a0:	4002081c 	.word	0x4002081c
 800b3a4:	cccccccd 	.word	0xcccccccd
 800b3a8:	40020880 	.word	0x40020880

0800b3ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b3c2:	4413      	add	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a09      	ldr	r2, [pc, #36]	; (800b3f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800b3d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	f003 0303 	and.w	r3, r3, #3
 800b3da:	2201      	movs	r2, #1
 800b3dc:	409a      	lsls	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	1000823f 	.word	0x1000823f
 800b3f4:	40020940 	.word	0x40020940

0800b3f8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d12b      	bne.n	800b466 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b414:	2b01      	cmp	r3, #1
 800b416:	d101      	bne.n	800b41c <HAL_DMAEx_ConfigMuxSync+0x24>
 800b418:	2302      	movs	r3, #2
 800b41a:	e025      	b.n	800b468 <HAL_DMAEx_ConfigMuxSync+0x70>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	4b12      	ldr	r3, [pc, #72]	; (800b474 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 800b42c:	4013      	ands	r3, r2
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	6811      	ldr	r1, [r2, #0]
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	68d2      	ldr	r2, [r2, #12]
 800b436:	3a01      	subs	r2, #1
 800b438:	04d2      	lsls	r2, r2, #19
 800b43a:	4311      	orrs	r1, r2
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	6852      	ldr	r2, [r2, #4]
 800b440:	4311      	orrs	r1, r2
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	7a12      	ldrb	r2, [r2, #8]
 800b446:	0412      	lsls	r2, r2, #16
 800b448:	4311      	orrs	r1, r2
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	7a52      	ldrb	r2, [r2, #9]
 800b44e:	0252      	lsls	r2, r2, #9
 800b450:	4311      	orrs	r1, r2
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b456:	430b      	orrs	r3, r1
 800b458:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	e000      	b.n	800b468 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
  }
}
 800b468:	4618      	mov	r0, r3
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr
 800b474:	e000fdff 	.word	0xe000fdff

0800b478 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800b478:	b480      	push	{r7}
 800b47a:	b087      	sub	sp, #28
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	0c1b      	lsrs	r3, r3, #16
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 031f 	and.w	r3, r3, #31
 800b494:	2201      	movs	r2, #1
 800b496:	fa02 f303 	lsl.w	r3, r2, r3
 800b49a:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	015b      	lsls	r3, r3, #5
 800b4a0:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 800b4a4:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800b4a8:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	601a      	str	r2, [r3, #0]
}
 800b4b0:	bf00      	nop
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b087      	sub	sp, #28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b4ca:	e14c      	b.n	800b766 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b4d8:	4013      	ands	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 813e 	beq.w	800b760 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f003 0303 	and.w	r3, r3, #3
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d005      	beq.n	800b4fc <HAL_GPIO_Init+0x40>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f003 0303 	and.w	r3, r3, #3
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d130      	bne.n	800b55e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	2203      	movs	r2, #3
 800b508:	fa02 f303 	lsl.w	r3, r2, r3
 800b50c:	43db      	mvns	r3, r3
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	4013      	ands	r3, r2
 800b512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	68da      	ldr	r2, [r3, #12]
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	fa02 f303 	lsl.w	r3, r2, r3
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	4313      	orrs	r3, r2
 800b524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b532:	2201      	movs	r2, #1
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	fa02 f303 	lsl.w	r3, r2, r3
 800b53a:	43db      	mvns	r3, r3
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	4013      	ands	r3, r2
 800b540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	091b      	lsrs	r3, r3, #4
 800b548:	f003 0201 	and.w	r2, r3, #1
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	fa02 f303 	lsl.w	r3, r2, r3
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	4313      	orrs	r3, r2
 800b556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2b03      	cmp	r3, #3
 800b568:	d017      	beq.n	800b59a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	2203      	movs	r2, #3
 800b576:	fa02 f303 	lsl.w	r3, r2, r3
 800b57a:	43db      	mvns	r3, r3
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	4013      	ands	r3, r2
 800b580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	689a      	ldr	r2, [r3, #8]
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	fa02 f303 	lsl.w	r3, r2, r3
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	4313      	orrs	r3, r2
 800b592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d123      	bne.n	800b5ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	08da      	lsrs	r2, r3, #3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	3208      	adds	r2, #8
 800b5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	220f      	movs	r2, #15
 800b5be:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c2:	43db      	mvns	r3, r3
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	691a      	ldr	r2, [r3, #16]
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f003 0307 	and.w	r3, r3, #7
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	08da      	lsrs	r2, r3, #3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3208      	adds	r2, #8
 800b5e8:	6939      	ldr	r1, [r7, #16]
 800b5ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	2203      	movs	r2, #3
 800b5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fe:	43db      	mvns	r3, r3
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	4013      	ands	r3, r2
 800b604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	f003 0203 	and.w	r2, r3, #3
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	fa02 f303 	lsl.w	r3, r2, r3
 800b616:	693a      	ldr	r2, [r7, #16]
 800b618:	4313      	orrs	r3, r2
 800b61a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f000 8098 	beq.w	800b760 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800b630:	4a54      	ldr	r2, [pc, #336]	; (800b784 <HAL_GPIO_Init+0x2c8>)
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	089b      	lsrs	r3, r3, #2
 800b636:	3302      	adds	r3, #2
 800b638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b63c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f003 0303 	and.w	r3, r3, #3
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	220f      	movs	r2, #15
 800b648:	fa02 f303 	lsl.w	r3, r2, r3
 800b64c:	43db      	mvns	r3, r3
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	4013      	ands	r3, r2
 800b652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b65a:	d019      	beq.n	800b690 <HAL_GPIO_Init+0x1d4>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a4a      	ldr	r2, [pc, #296]	; (800b788 <HAL_GPIO_Init+0x2cc>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d013      	beq.n	800b68c <HAL_GPIO_Init+0x1d0>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a49      	ldr	r2, [pc, #292]	; (800b78c <HAL_GPIO_Init+0x2d0>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00d      	beq.n	800b688 <HAL_GPIO_Init+0x1cc>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a48      	ldr	r2, [pc, #288]	; (800b790 <HAL_GPIO_Init+0x2d4>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d007      	beq.n	800b684 <HAL_GPIO_Init+0x1c8>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a47      	ldr	r2, [pc, #284]	; (800b794 <HAL_GPIO_Init+0x2d8>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d101      	bne.n	800b680 <HAL_GPIO_Init+0x1c4>
 800b67c:	2304      	movs	r3, #4
 800b67e:	e008      	b.n	800b692 <HAL_GPIO_Init+0x1d6>
 800b680:	2307      	movs	r3, #7
 800b682:	e006      	b.n	800b692 <HAL_GPIO_Init+0x1d6>
 800b684:	2303      	movs	r3, #3
 800b686:	e004      	b.n	800b692 <HAL_GPIO_Init+0x1d6>
 800b688:	2302      	movs	r3, #2
 800b68a:	e002      	b.n	800b692 <HAL_GPIO_Init+0x1d6>
 800b68c:	2301      	movs	r3, #1
 800b68e:	e000      	b.n	800b692 <HAL_GPIO_Init+0x1d6>
 800b690:	2300      	movs	r3, #0
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	f002 0203 	and.w	r2, r2, #3
 800b698:	0092      	lsls	r2, r2, #2
 800b69a:	4093      	lsls	r3, r2
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b6a2:	4938      	ldr	r1, [pc, #224]	; (800b784 <HAL_GPIO_Init+0x2c8>)
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	089b      	lsrs	r3, r3, #2
 800b6a8:	3302      	adds	r3, #2
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b6b0:	4b39      	ldr	r3, [pc, #228]	; (800b798 <HAL_GPIO_Init+0x2dc>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	43db      	mvns	r3, r3
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	4013      	ands	r3, r2
 800b6be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d003      	beq.n	800b6d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800b6cc:	693a      	ldr	r2, [r7, #16]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b6d4:	4a30      	ldr	r2, [pc, #192]	; (800b798 <HAL_GPIO_Init+0x2dc>)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b6da:	4b2f      	ldr	r3, [pc, #188]	; (800b798 <HAL_GPIO_Init+0x2dc>)
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	43db      	mvns	r3, r3
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b6fe:	4a26      	ldr	r2, [pc, #152]	; (800b798 <HAL_GPIO_Init+0x2dc>)
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b704:	4b24      	ldr	r3, [pc, #144]	; (800b798 <HAL_GPIO_Init+0x2dc>)
 800b706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b70a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	43db      	mvns	r3, r3
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	4013      	ands	r3, r2
 800b714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d003      	beq.n	800b72a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	4313      	orrs	r3, r2
 800b728:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b72a:	4a1b      	ldr	r2, [pc, #108]	; (800b798 <HAL_GPIO_Init+0x2dc>)
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800b732:	4b19      	ldr	r3, [pc, #100]	; (800b798 <HAL_GPIO_Init+0x2dc>)
 800b734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	43db      	mvns	r3, r3
 800b73e:	693a      	ldr	r2, [r7, #16]
 800b740:	4013      	ands	r3, r2
 800b742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d003      	beq.n	800b758 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	4313      	orrs	r3, r2
 800b756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b758:	4a0f      	ldr	r2, [pc, #60]	; (800b798 <HAL_GPIO_Init+0x2dc>)
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	3301      	adds	r3, #1
 800b764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	fa22 f303 	lsr.w	r3, r2, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	f47f aeab 	bne.w	800b4cc <HAL_GPIO_Init+0x10>
  }
}
 800b776:	bf00      	nop
 800b778:	bf00      	nop
 800b77a:	371c      	adds	r7, #28
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	40010000 	.word	0x40010000
 800b788:	48000400 	.word	0x48000400
 800b78c:	48000800 	.word	0x48000800
 800b790:	48000c00 	.word	0x48000c00
 800b794:	48001000 	.word	0x48001000
 800b798:	58000800 	.word	0x58000800

0800b79c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800b7aa:	e0bb      	b.n	800b924 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 80ae 	beq.w	800b91e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800b7c2:	4a5f      	ldr	r2, [pc, #380]	; (800b940 <HAL_GPIO_DeInit+0x1a4>)
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	089b      	lsrs	r3, r3, #2
 800b7c8:	3302      	adds	r3, #2
 800b7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f003 0303 	and.w	r3, r3, #3
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	220f      	movs	r2, #15
 800b7da:	fa02 f303 	lsl.w	r3, r2, r3
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b7ea:	d019      	beq.n	800b820 <HAL_GPIO_DeInit+0x84>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a55      	ldr	r2, [pc, #340]	; (800b944 <HAL_GPIO_DeInit+0x1a8>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d013      	beq.n	800b81c <HAL_GPIO_DeInit+0x80>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a54      	ldr	r2, [pc, #336]	; (800b948 <HAL_GPIO_DeInit+0x1ac>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d00d      	beq.n	800b818 <HAL_GPIO_DeInit+0x7c>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a53      	ldr	r2, [pc, #332]	; (800b94c <HAL_GPIO_DeInit+0x1b0>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d007      	beq.n	800b814 <HAL_GPIO_DeInit+0x78>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a52      	ldr	r2, [pc, #328]	; (800b950 <HAL_GPIO_DeInit+0x1b4>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d101      	bne.n	800b810 <HAL_GPIO_DeInit+0x74>
 800b80c:	2304      	movs	r3, #4
 800b80e:	e008      	b.n	800b822 <HAL_GPIO_DeInit+0x86>
 800b810:	2307      	movs	r3, #7
 800b812:	e006      	b.n	800b822 <HAL_GPIO_DeInit+0x86>
 800b814:	2303      	movs	r3, #3
 800b816:	e004      	b.n	800b822 <HAL_GPIO_DeInit+0x86>
 800b818:	2302      	movs	r3, #2
 800b81a:	e002      	b.n	800b822 <HAL_GPIO_DeInit+0x86>
 800b81c:	2301      	movs	r3, #1
 800b81e:	e000      	b.n	800b822 <HAL_GPIO_DeInit+0x86>
 800b820:	2300      	movs	r3, #0
 800b822:	697a      	ldr	r2, [r7, #20]
 800b824:	f002 0203 	and.w	r2, r2, #3
 800b828:	0092      	lsls	r2, r2, #2
 800b82a:	4093      	lsls	r3, r2
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d136      	bne.n	800b8a0 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800b832:	4b48      	ldr	r3, [pc, #288]	; (800b954 <HAL_GPIO_DeInit+0x1b8>)
 800b834:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	43db      	mvns	r3, r3
 800b83c:	4945      	ldr	r1, [pc, #276]	; (800b954 <HAL_GPIO_DeInit+0x1b8>)
 800b83e:	4013      	ands	r3, r2
 800b840:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800b844:	4b43      	ldr	r3, [pc, #268]	; (800b954 <HAL_GPIO_DeInit+0x1b8>)
 800b846:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	43db      	mvns	r3, r3
 800b84e:	4941      	ldr	r1, [pc, #260]	; (800b954 <HAL_GPIO_DeInit+0x1b8>)
 800b850:	4013      	ands	r3, r2
 800b852:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800b856:	4b3f      	ldr	r3, [pc, #252]	; (800b954 <HAL_GPIO_DeInit+0x1b8>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	43db      	mvns	r3, r3
 800b85e:	493d      	ldr	r1, [pc, #244]	; (800b954 <HAL_GPIO_DeInit+0x1b8>)
 800b860:	4013      	ands	r3, r2
 800b862:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800b864:	4b3b      	ldr	r3, [pc, #236]	; (800b954 <HAL_GPIO_DeInit+0x1b8>)
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	43db      	mvns	r3, r3
 800b86c:	4939      	ldr	r1, [pc, #228]	; (800b954 <HAL_GPIO_DeInit+0x1b8>)
 800b86e:	4013      	ands	r3, r2
 800b870:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f003 0303 	and.w	r3, r3, #3
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	220f      	movs	r2, #15
 800b87c:	fa02 f303 	lsl.w	r3, r2, r3
 800b880:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800b882:	4a2f      	ldr	r2, [pc, #188]	; (800b940 <HAL_GPIO_DeInit+0x1a4>)
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	089b      	lsrs	r3, r3, #2
 800b888:	3302      	adds	r3, #2
 800b88a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	43da      	mvns	r2, r3
 800b892:	482b      	ldr	r0, [pc, #172]	; (800b940 <HAL_GPIO_DeInit+0x1a4>)
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	089b      	lsrs	r3, r3, #2
 800b898:	400a      	ands	r2, r1
 800b89a:	3302      	adds	r3, #2
 800b89c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	2103      	movs	r1, #3
 800b8aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ae:	431a      	orrs	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	08da      	lsrs	r2, r3, #3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	3208      	adds	r2, #8
 800b8bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	220f      	movs	r2, #15
 800b8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ce:	43db      	mvns	r3, r3
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	08d2      	lsrs	r2, r2, #3
 800b8d4:	4019      	ands	r1, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	3208      	adds	r2, #8
 800b8da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	68da      	ldr	r2, [r3, #12]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	2103      	movs	r1, #3
 800b8e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ec:	43db      	mvns	r3, r3
 800b8ee:	401a      	ands	r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	2101      	movs	r1, #1
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b900:	43db      	mvns	r3, r3
 800b902:	401a      	ands	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	689a      	ldr	r2, [r3, #8]
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	005b      	lsls	r3, r3, #1
 800b910:	2103      	movs	r1, #3
 800b912:	fa01 f303 	lsl.w	r3, r1, r3
 800b916:	43db      	mvns	r3, r3
 800b918:	401a      	ands	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	3301      	adds	r3, #1
 800b922:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	fa22 f303 	lsr.w	r3, r2, r3
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f47f af3d 	bne.w	800b7ac <HAL_GPIO_DeInit+0x10>
  }
}
 800b932:	bf00      	nop
 800b934:	bf00      	nop
 800b936:	371c      	adds	r7, #28
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	40010000 	.word	0x40010000
 800b944:	48000400 	.word	0x48000400
 800b948:	48000800 	.word	0x48000800
 800b94c:	48000c00 	.word	0x48000c00
 800b950:	48001000 	.word	0x48001000
 800b954:	58000800 	.word	0x58000800

0800b958 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	460b      	mov	r3, r1
 800b962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	691a      	ldr	r2, [r3, #16]
 800b968:	887b      	ldrh	r3, [r7, #2]
 800b96a:	4013      	ands	r3, r2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b970:	2301      	movs	r3, #1
 800b972:	73fb      	strb	r3, [r7, #15]
 800b974:	e001      	b.n	800b97a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b976:	2300      	movs	r3, #0
 800b978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	807b      	strh	r3, [r7, #2]
 800b994:	4613      	mov	r3, r2
 800b996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b998:	787b      	ldrb	r3, [r7, #1]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b99e:	887a      	ldrh	r2, [r7, #2]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b9a4:	e002      	b.n	800b9ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b9a6:	887a      	ldrh	r2, [r7, #2]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	695b      	ldr	r3, [r3, #20]
 800b9c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b9ca:	887a      	ldrh	r2, [r7, #2]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	041a      	lsls	r2, r3, #16
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	43d9      	mvns	r1, r3
 800b9d6:	887b      	ldrh	r3, [r7, #2]
 800b9d8:	400b      	ands	r3, r1
 800b9da:	431a      	orrs	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	619a      	str	r2, [r3, #24]
}
 800b9e0:	bf00      	nop
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b9f6:	4b08      	ldr	r3, [pc, #32]	; (800ba18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b9f8:	68da      	ldr	r2, [r3, #12]
 800b9fa:	88fb      	ldrh	r3, [r7, #6]
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d006      	beq.n	800ba10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ba02:	4a05      	ldr	r2, [pc, #20]	; (800ba18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ba04:	88fb      	ldrh	r3, [r7, #6]
 800ba06:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ba08:	88fb      	ldrh	r3, [r7, #6]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f7 f80c 	bl	8002a28 <HAL_GPIO_EXTI_Callback>
  }
}
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	58000800 	.word	0x58000800

0800ba1c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800ba22:	4b0a      	ldr	r3, [pc, #40]	; (800ba4c <HAL_HSEM_IRQHandler+0x30>)
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800ba28:	4b08      	ldr	r3, [pc, #32]	; (800ba4c <HAL_HSEM_IRQHandler+0x30>)
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	43db      	mvns	r3, r3
 800ba30:	4906      	ldr	r1, [pc, #24]	; (800ba4c <HAL_HSEM_IRQHandler+0x30>)
 800ba32:	4013      	ands	r3, r2
 800ba34:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800ba36:	4a05      	ldr	r2, [pc, #20]	; (800ba4c <HAL_HSEM_IRQHandler+0x30>)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f807 	bl	800ba50 <HAL_HSEM_FreeCallback>
}
 800ba42:	bf00      	nop
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	58001500 	.word	0x58001500

0800ba50 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e081      	b.n	800bb7a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f8a8 	bl	800bbe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2224      	movs	r2, #36	; 0x24
 800ba94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f022 0201 	bic.w	r2, r2, #1
 800baa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bab4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689a      	ldr	r2, [r3, #8]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bac4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d107      	bne.n	800bade <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689a      	ldr	r2, [r3, #8]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bada:	609a      	str	r2, [r3, #8]
 800badc:	e006      	b.n	800baec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	689a      	ldr	r2, [r3, #8]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800baea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d104      	bne.n	800bafe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bafc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	6812      	ldr	r2, [r2, #0]
 800bb08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bb0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	68da      	ldr	r2, [r3, #12]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691a      	ldr	r2, [r3, #16]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	430a      	orrs	r2, r1
 800bb3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	69d9      	ldr	r1, [r3, #28]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a1a      	ldr	r2, [r3, #32]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	430a      	orrs	r2, r1
 800bb4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f042 0201 	orr.w	r2, r2, #1
 800bb5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2220      	movs	r2, #32
 800bb66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e021      	b.n	800bbd8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2224      	movs	r2, #36	; 0x24
 800bb98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f022 0201 	bic.w	r2, r2, #1
 800bbaa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f821 	bl	800bbf4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af02      	add	r7, sp, #8
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	4608      	mov	r0, r1
 800bc12:	4611      	mov	r1, r2
 800bc14:	461a      	mov	r2, r3
 800bc16:	4603      	mov	r3, r0
 800bc18:	817b      	strh	r3, [r7, #10]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	813b      	strh	r3, [r7, #8]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b20      	cmp	r3, #32
 800bc2c:	f040 80f9 	bne.w	800be22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d002      	beq.n	800bc3c <HAL_I2C_Mem_Write+0x34>
 800bc36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d105      	bne.n	800bc48 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	e0ed      	b.n	800be24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d101      	bne.n	800bc56 <HAL_I2C_Mem_Write+0x4e>
 800bc52:	2302      	movs	r3, #2
 800bc54:	e0e6      	b.n	800be24 <HAL_I2C_Mem_Write+0x21c>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bc5e:	f7fe fecf 	bl	800aa00 <HAL_GetTick>
 800bc62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	2319      	movs	r3, #25
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 fadd 	bl	800c230 <I2C_WaitOnFlagUntilTimeout>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e0d1      	b.n	800be24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2221      	movs	r2, #33	; 0x21
 800bc84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2240      	movs	r2, #64	; 0x40
 800bc8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6a3a      	ldr	r2, [r7, #32]
 800bc9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bca8:	88f8      	ldrh	r0, [r7, #6]
 800bcaa:	893a      	ldrh	r2, [r7, #8]
 800bcac:	8979      	ldrh	r1, [r7, #10]
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	9301      	str	r3, [sp, #4]
 800bcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f000 f9ed 	bl	800c098 <I2C_RequestMemoryWrite>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d005      	beq.n	800bcd0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e0a9      	b.n	800be24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	2bff      	cmp	r3, #255	; 0xff
 800bcd8:	d90e      	bls.n	800bcf8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	22ff      	movs	r2, #255	; 0xff
 800bcde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bce4:	b2da      	uxtb	r2, r3
 800bce6:	8979      	ldrh	r1, [r7, #10]
 800bce8:	2300      	movs	r3, #0
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f000 fc57 	bl	800c5a4 <I2C_TransferConfig>
 800bcf6:	e00f      	b.n	800bd18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	8979      	ldrh	r1, [r7, #10]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f000 fc46 	bl	800c5a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f000 fad6 	bl	800c2ce <I2C_WaitOnTXISFlagUntilTimeout>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e07b      	b.n	800be24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd30:	781a      	ldrb	r2, [r3, #0]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	1c5a      	adds	r2, r3, #1
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd54:	3b01      	subs	r3, #1
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d034      	beq.n	800bdd0 <HAL_I2C_Mem_Write+0x1c8>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d130      	bne.n	800bdd0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	2200      	movs	r2, #0
 800bd76:	2180      	movs	r1, #128	; 0x80
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 fa59 	bl	800c230 <I2C_WaitOnFlagUntilTimeout>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e04d      	b.n	800be24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	2bff      	cmp	r3, #255	; 0xff
 800bd90:	d90e      	bls.n	800bdb0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	22ff      	movs	r2, #255	; 0xff
 800bd96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd9c:	b2da      	uxtb	r2, r3
 800bd9e:	8979      	ldrh	r1, [r7, #10]
 800bda0:	2300      	movs	r3, #0
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bda8:	68f8      	ldr	r0, [r7, #12]
 800bdaa:	f000 fbfb 	bl	800c5a4 <I2C_TransferConfig>
 800bdae:	e00f      	b.n	800bdd0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	8979      	ldrh	r1, [r7, #10]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f000 fbea 	bl	800c5a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d19e      	bne.n	800bd18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f000 fabc 	bl	800c35c <I2C_WaitOnSTOPFlagUntilTimeout>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e01a      	b.n	800be24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	6859      	ldr	r1, [r3, #4]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	4b0a      	ldr	r3, [pc, #40]	; (800be2c <HAL_I2C_Mem_Write+0x224>)
 800be02:	400b      	ands	r3, r1
 800be04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2220      	movs	r2, #32
 800be0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	e000      	b.n	800be24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800be22:	2302      	movs	r3, #2
  }
}
 800be24:	4618      	mov	r0, r3
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	fe00e800 	.word	0xfe00e800

0800be30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b088      	sub	sp, #32
 800be34:	af02      	add	r7, sp, #8
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	4608      	mov	r0, r1
 800be3a:	4611      	mov	r1, r2
 800be3c:	461a      	mov	r2, r3
 800be3e:	4603      	mov	r3, r0
 800be40:	817b      	strh	r3, [r7, #10]
 800be42:	460b      	mov	r3, r1
 800be44:	813b      	strh	r3, [r7, #8]
 800be46:	4613      	mov	r3, r2
 800be48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b20      	cmp	r3, #32
 800be54:	f040 80fd 	bne.w	800c052 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800be58:	6a3b      	ldr	r3, [r7, #32]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <HAL_I2C_Mem_Read+0x34>
 800be5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be60:	2b00      	cmp	r3, #0
 800be62:	d105      	bne.n	800be70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	e0f1      	b.n	800c054 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be76:	2b01      	cmp	r3, #1
 800be78:	d101      	bne.n	800be7e <HAL_I2C_Mem_Read+0x4e>
 800be7a:	2302      	movs	r3, #2
 800be7c:	e0ea      	b.n	800c054 <HAL_I2C_Mem_Read+0x224>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800be86:	f7fe fdbb 	bl	800aa00 <HAL_GetTick>
 800be8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	2319      	movs	r3, #25
 800be92:	2201      	movs	r2, #1
 800be94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f000 f9c9 	bl	800c230 <I2C_WaitOnFlagUntilTimeout>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	e0d5      	b.n	800c054 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2222      	movs	r2, #34	; 0x22
 800beac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2240      	movs	r2, #64	; 0x40
 800beb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6a3a      	ldr	r2, [r7, #32]
 800bec2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bed0:	88f8      	ldrh	r0, [r7, #6]
 800bed2:	893a      	ldrh	r2, [r7, #8]
 800bed4:	8979      	ldrh	r1, [r7, #10]
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	9301      	str	r3, [sp, #4]
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	4603      	mov	r3, r0
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f000 f92d 	bl	800c140 <I2C_RequestMemoryRead>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d005      	beq.n	800bef8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e0ad      	b.n	800c054 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800befc:	b29b      	uxth	r3, r3
 800befe:	2bff      	cmp	r3, #255	; 0xff
 800bf00:	d90e      	bls.n	800bf20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	22ff      	movs	r2, #255	; 0xff
 800bf06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	8979      	ldrh	r1, [r7, #10]
 800bf10:	4b52      	ldr	r3, [pc, #328]	; (800c05c <HAL_I2C_Mem_Read+0x22c>)
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 fb43 	bl	800c5a4 <I2C_TransferConfig>
 800bf1e:	e00f      	b.n	800bf40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	8979      	ldrh	r1, [r7, #10]
 800bf32:	4b4a      	ldr	r3, [pc, #296]	; (800c05c <HAL_I2C_Mem_Read+0x22c>)
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 fb32 	bl	800c5a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	2200      	movs	r2, #0
 800bf48:	2104      	movs	r1, #4
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 f970 	bl	800c230 <I2C_WaitOnFlagUntilTimeout>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	e07c      	b.n	800c054 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	b2d2      	uxtb	r2, r2
 800bf66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6c:	1c5a      	adds	r2, r3, #1
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	3b01      	subs	r3, #1
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d034      	beq.n	800c000 <HAL_I2C_Mem_Read+0x1d0>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d130      	bne.n	800c000 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2180      	movs	r1, #128	; 0x80
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 f941 	bl	800c230 <I2C_WaitOnFlagUntilTimeout>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e04d      	b.n	800c054 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	2bff      	cmp	r3, #255	; 0xff
 800bfc0:	d90e      	bls.n	800bfe0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	22ff      	movs	r2, #255	; 0xff
 800bfc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	8979      	ldrh	r1, [r7, #10]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 fae3 	bl	800c5a4 <I2C_TransferConfig>
 800bfde:	e00f      	b.n	800c000 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	8979      	ldrh	r1, [r7, #10]
 800bff2:	2300      	movs	r3, #0
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 fad2 	bl	800c5a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c004:	b29b      	uxth	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d19a      	bne.n	800bf40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f000 f9a4 	bl	800c35c <I2C_WaitOnSTOPFlagUntilTimeout>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e01a      	b.n	800c054 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2220      	movs	r2, #32
 800c024:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6859      	ldr	r1, [r3, #4]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <HAL_I2C_Mem_Read+0x230>)
 800c032:	400b      	ands	r3, r1
 800c034:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2220      	movs	r2, #32
 800c03a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c04e:	2300      	movs	r3, #0
 800c050:	e000      	b.n	800c054 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c052:	2302      	movs	r3, #2
  }
}
 800c054:	4618      	mov	r0, r3
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	80002400 	.word	0x80002400
 800c060:	fe00e800 	.word	0xfe00e800

0800c064 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c072:	b2db      	uxtb	r3, r3
}
 800c074:	4618      	mov	r0, r3
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b086      	sub	sp, #24
 800c09c:	af02      	add	r7, sp, #8
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	4608      	mov	r0, r1
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	817b      	strh	r3, [r7, #10]
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	813b      	strh	r3, [r7, #8]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c0b2:	88fb      	ldrh	r3, [r7, #6]
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	8979      	ldrh	r1, [r7, #10]
 800c0b8:	4b20      	ldr	r3, [pc, #128]	; (800c13c <I2C_RequestMemoryWrite+0xa4>)
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f000 fa6f 	bl	800c5a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0c6:	69fa      	ldr	r2, [r7, #28]
 800c0c8:	69b9      	ldr	r1, [r7, #24]
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f000 f8ff 	bl	800c2ce <I2C_WaitOnTXISFlagUntilTimeout>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e02c      	b.n	800c134 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c0da:	88fb      	ldrh	r3, [r7, #6]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d105      	bne.n	800c0ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c0e0:	893b      	ldrh	r3, [r7, #8]
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	629a      	str	r2, [r3, #40]	; 0x28
 800c0ea:	e015      	b.n	800c118 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c0ec:	893b      	ldrh	r3, [r7, #8]
 800c0ee:	0a1b      	lsrs	r3, r3, #8
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0fa:	69fa      	ldr	r2, [r7, #28]
 800c0fc:	69b9      	ldr	r1, [r7, #24]
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f000 f8e5 	bl	800c2ce <I2C_WaitOnTXISFlagUntilTimeout>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e012      	b.n	800c134 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c10e:	893b      	ldrh	r3, [r7, #8]
 800c110:	b2da      	uxtb	r2, r3
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	2200      	movs	r2, #0
 800c120:	2180      	movs	r1, #128	; 0x80
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f000 f884 	bl	800c230 <I2C_WaitOnFlagUntilTimeout>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	e000      	b.n	800c134 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	80002000 	.word	0x80002000

0800c140 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af02      	add	r7, sp, #8
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	4608      	mov	r0, r1
 800c14a:	4611      	mov	r1, r2
 800c14c:	461a      	mov	r2, r3
 800c14e:	4603      	mov	r3, r0
 800c150:	817b      	strh	r3, [r7, #10]
 800c152:	460b      	mov	r3, r1
 800c154:	813b      	strh	r3, [r7, #8]
 800c156:	4613      	mov	r3, r2
 800c158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c15a:	88fb      	ldrh	r3, [r7, #6]
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	8979      	ldrh	r1, [r7, #10]
 800c160:	4b20      	ldr	r3, [pc, #128]	; (800c1e4 <I2C_RequestMemoryRead+0xa4>)
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	2300      	movs	r3, #0
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f000 fa1c 	bl	800c5a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c16c:	69fa      	ldr	r2, [r7, #28]
 800c16e:	69b9      	ldr	r1, [r7, #24]
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f000 f8ac 	bl	800c2ce <I2C_WaitOnTXISFlagUntilTimeout>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c17c:	2301      	movs	r3, #1
 800c17e:	e02c      	b.n	800c1da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c180:	88fb      	ldrh	r3, [r7, #6]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d105      	bne.n	800c192 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c186:	893b      	ldrh	r3, [r7, #8]
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	629a      	str	r2, [r3, #40]	; 0x28
 800c190:	e015      	b.n	800c1be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c192:	893b      	ldrh	r3, [r7, #8]
 800c194:	0a1b      	lsrs	r3, r3, #8
 800c196:	b29b      	uxth	r3, r3
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1a0:	69fa      	ldr	r2, [r7, #28]
 800c1a2:	69b9      	ldr	r1, [r7, #24]
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f000 f892 	bl	800c2ce <I2C_WaitOnTXISFlagUntilTimeout>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e012      	b.n	800c1da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c1b4:	893b      	ldrh	r3, [r7, #8]
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	2140      	movs	r1, #64	; 0x40
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f000 f831 	bl	800c230 <I2C_WaitOnFlagUntilTimeout>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d001      	beq.n	800c1d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e000      	b.n	800c1da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	80002000 	.word	0x80002000

0800c1e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	f003 0302 	and.w	r3, r3, #2
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d103      	bne.n	800c206 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2200      	movs	r2, #0
 800c204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	699b      	ldr	r3, [r3, #24]
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	2b01      	cmp	r3, #1
 800c212:	d007      	beq.n	800c224 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	699a      	ldr	r2, [r3, #24]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f042 0201 	orr.w	r2, r2, #1
 800c222:	619a      	str	r2, [r3, #24]
  }
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	603b      	str	r3, [r7, #0]
 800c23c:	4613      	mov	r3, r2
 800c23e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c240:	e031      	b.n	800c2a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c248:	d02d      	beq.n	800c2a6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c24a:	f7fe fbd9 	bl	800aa00 <HAL_GetTick>
 800c24e:	4602      	mov	r2, r0
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	429a      	cmp	r2, r3
 800c258:	d302      	bcc.n	800c260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d122      	bne.n	800c2a6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	699a      	ldr	r2, [r3, #24]
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	4013      	ands	r3, r2
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	bf0c      	ite	eq
 800c270:	2301      	moveq	r3, #1
 800c272:	2300      	movne	r3, #0
 800c274:	b2db      	uxtb	r3, r3
 800c276:	461a      	mov	r2, r3
 800c278:	79fb      	ldrb	r3, [r7, #7]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d113      	bne.n	800c2a6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c282:	f043 0220 	orr.w	r2, r3, #32
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2220      	movs	r2, #32
 800c28e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e00f      	b.n	800c2c6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	699a      	ldr	r2, [r3, #24]
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	bf0c      	ite	eq
 800c2b6:	2301      	moveq	r3, #1
 800c2b8:	2300      	movne	r3, #0
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	461a      	mov	r2, r3
 800c2be:	79fb      	ldrb	r3, [r7, #7]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d0be      	beq.n	800c242 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c2da:	e033      	b.n	800c344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	68b9      	ldr	r1, [r7, #8]
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 f87f 	bl	800c3e4 <I2C_IsErrorOccurred>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e031      	b.n	800c354 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f6:	d025      	beq.n	800c344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2f8:	f7fe fb82 	bl	800aa00 <HAL_GetTick>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	429a      	cmp	r2, r3
 800c306:	d302      	bcc.n	800c30e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d11a      	bne.n	800c344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	f003 0302 	and.w	r3, r3, #2
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d013      	beq.n	800c344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c320:	f043 0220 	orr.w	r2, r3, #32
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2220      	movs	r2, #32
 800c32c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	e007      	b.n	800c354 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	f003 0302 	and.w	r3, r3, #2
 800c34e:	2b02      	cmp	r3, #2
 800c350:	d1c4      	bne.n	800c2dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c368:	e02f      	b.n	800c3ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	68b9      	ldr	r1, [r7, #8]
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f000 f838 	bl	800c3e4 <I2C_IsErrorOccurred>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e02d      	b.n	800c3da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c37e:	f7fe fb3f 	bl	800aa00 <HAL_GetTick>
 800c382:	4602      	mov	r2, r0
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d302      	bcc.n	800c394 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d11a      	bne.n	800c3ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	f003 0320 	and.w	r3, r3, #32
 800c39e:	2b20      	cmp	r3, #32
 800c3a0:	d013      	beq.n	800c3ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a6:	f043 0220 	orr.w	r2, r3, #32
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2220      	movs	r2, #32
 800c3b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e007      	b.n	800c3da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	f003 0320 	and.w	r3, r3, #32
 800c3d4:	2b20      	cmp	r3, #32
 800c3d6:	d1c8      	bne.n	800c36a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
	...

0800c3e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b08a      	sub	sp, #40	; 0x28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	f003 0310 	and.w	r3, r3, #16
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d068      	beq.n	800c4e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2210      	movs	r2, #16
 800c416:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c418:	e049      	b.n	800c4ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c420:	d045      	beq.n	800c4ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c422:	f7fe faed 	bl	800aa00 <HAL_GetTick>
 800c426:	4602      	mov	r2, r0
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	68ba      	ldr	r2, [r7, #8]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d302      	bcc.n	800c438 <I2C_IsErrorOccurred+0x54>
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d13a      	bne.n	800c4ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c442:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c44a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c45a:	d121      	bne.n	800c4a0 <I2C_IsErrorOccurred+0xbc>
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c462:	d01d      	beq.n	800c4a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c464:	7cfb      	ldrb	r3, [r7, #19]
 800c466:	2b20      	cmp	r3, #32
 800c468:	d01a      	beq.n	800c4a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c478:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c47a:	f7fe fac1 	bl	800aa00 <HAL_GetTick>
 800c47e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c480:	e00e      	b.n	800c4a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c482:	f7fe fabd 	bl	800aa00 <HAL_GetTick>
 800c486:	4602      	mov	r2, r0
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	1ad3      	subs	r3, r2, r3
 800c48c:	2b19      	cmp	r3, #25
 800c48e:	d907      	bls.n	800c4a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	f043 0320 	orr.w	r3, r3, #32
 800c496:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c49e:	e006      	b.n	800c4ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	f003 0320 	and.w	r3, r3, #32
 800c4aa:	2b20      	cmp	r3, #32
 800c4ac:	d1e9      	bne.n	800c482 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	f003 0320 	and.w	r3, r3, #32
 800c4b8:	2b20      	cmp	r3, #32
 800c4ba:	d003      	beq.n	800c4c4 <I2C_IsErrorOccurred+0xe0>
 800c4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d0aa      	beq.n	800c41a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d103      	bne.n	800c4d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2220      	movs	r2, #32
 800c4d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	f043 0304 	orr.w	r3, r3, #4
 800c4da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00b      	beq.n	800c50c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c4f4:	6a3b      	ldr	r3, [r7, #32]
 800c4f6:	f043 0301 	orr.w	r3, r3, #1
 800c4fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c504:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c506:	2301      	movs	r3, #1
 800c508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00b      	beq.n	800c52e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	f043 0308 	orr.w	r3, r3, #8
 800c51c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c526:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c528:	2301      	movs	r3, #1
 800c52a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00b      	beq.n	800c550 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c538:	6a3b      	ldr	r3, [r7, #32]
 800c53a:	f043 0302 	orr.w	r3, r3, #2
 800c53e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c548:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c554:	2b00      	cmp	r3, #0
 800c556:	d01c      	beq.n	800c592 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f7ff fe45 	bl	800c1e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6859      	ldr	r1, [r3, #4]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	4b0d      	ldr	r3, [pc, #52]	; (800c5a0 <I2C_IsErrorOccurred+0x1bc>)
 800c56a:	400b      	ands	r3, r1
 800c56c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c572:	6a3b      	ldr	r3, [r7, #32]
 800c574:	431a      	orrs	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2220      	movs	r2, #32
 800c57e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c596:	4618      	mov	r0, r3
 800c598:	3728      	adds	r7, #40	; 0x28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	fe00e800 	.word	0xfe00e800

0800c5a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	607b      	str	r3, [r7, #4]
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	817b      	strh	r3, [r7, #10]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c5b6:	897b      	ldrh	r3, [r7, #10]
 800c5b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c5bc:	7a7b      	ldrb	r3, [r7, #9]
 800c5be:	041b      	lsls	r3, r3, #16
 800c5c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c5c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	685a      	ldr	r2, [r3, #4]
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	0d5b      	lsrs	r3, r3, #21
 800c5de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c5e2:	4b08      	ldr	r3, [pc, #32]	; (800c604 <I2C_TransferConfig+0x60>)
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	43db      	mvns	r3, r3
 800c5e8:	ea02 0103 	and.w	r1, r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	697a      	ldr	r2, [r7, #20]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c5f6:	bf00      	nop
 800c5f8:	371c      	adds	r7, #28
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	03ff63ff 	.word	0x03ff63ff

0800c608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d138      	bne.n	800c690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c624:	2b01      	cmp	r3, #1
 800c626:	d101      	bne.n	800c62c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c628:	2302      	movs	r3, #2
 800c62a:	e032      	b.n	800c692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2224      	movs	r2, #36	; 0x24
 800c638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f022 0201 	bic.w	r2, r2, #1
 800c64a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c65a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6819      	ldr	r1, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	430a      	orrs	r2, r1
 800c66a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f042 0201 	orr.w	r2, r2, #1
 800c67a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2220      	movs	r2, #32
 800c680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c68c:	2300      	movs	r3, #0
 800c68e:	e000      	b.n	800c692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c690:	2302      	movs	r3, #2
  }
}
 800c692:	4618      	mov	r0, r3
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b085      	sub	sp, #20
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b20      	cmp	r3, #32
 800c6b2:	d139      	bne.n	800c728 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d101      	bne.n	800c6c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c6be:	2302      	movs	r3, #2
 800c6c0:	e033      	b.n	800c72a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2224      	movs	r2, #36	; 0x24
 800c6ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f022 0201 	bic.w	r2, r2, #1
 800c6e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c6f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	021b      	lsls	r3, r3, #8
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f042 0201 	orr.w	r2, r2, #1
 800c712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	e000      	b.n	800c72a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c728:	2302      	movs	r3, #2
  }
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
	...

0800c738 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d01e      	beq.n	800c788 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800c74a:	4b13      	ldr	r3, [pc, #76]	; (800c798 <HAL_IPCC_Init+0x60>)
 800c74c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b00      	cmp	r3, #0
 800c758:	d102      	bne.n	800c760 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7f7 ff44 	bl	80045e8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800c760:	68b8      	ldr	r0, [r7, #8]
 800c762:	f000 f85b 	bl	800c81c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f82c 	bl	800c7d0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800c786:	e001      	b.n	800c78c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800c78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	58000c00 	.word	0x58000c00

0800c79c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800c7aa:	bf00      	nop
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	60f8      	str	r0, [r7, #12]
 800c7be:	60b9      	str	r1, [r7, #8]
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800c7c4:	bf00      	nop
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800c7d8:	2300      	movs	r3, #0
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	e00f      	b.n	800c7fe <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	4a0b      	ldr	r2, [pc, #44]	; (800c814 <IPCC_SetDefaultCallbacks+0x44>)
 800c7e8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3306      	adds	r3, #6
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	4413      	add	r3, r2
 800c7f4:	4a08      	ldr	r2, [pc, #32]	; (800c818 <IPCC_SetDefaultCallbacks+0x48>)
 800c7f6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	60fb      	str	r3, [r7, #12]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2b05      	cmp	r3, #5
 800c802:	d9ec      	bls.n	800c7de <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	0800c79d 	.word	0x0800c79d
 800c818:	0800c7b7 	.word	0x0800c7b7

0800c81c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800c830:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	223f      	movs	r2, #63	; 0x3f
 800c836:	609a      	str	r2, [r3, #8]
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c844:	b480      	push	{r7}
 800c846:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c848:	4b05      	ldr	r3, [pc, #20]	; (800c860 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a04      	ldr	r2, [pc, #16]	; (800c860 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c84e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c852:	6013      	str	r3, [r2, #0]
}
 800c854:	bf00      	nop
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	58000400 	.word	0x58000400

0800c864 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c864:	b480      	push	{r7}
 800c866:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800c868:	4b04      	ldr	r3, [pc, #16]	; (800c87c <HAL_PWREx_GetVoltageRange+0x18>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800c870:	4618      	mov	r0, r3
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	58000400 	.word	0x58000400

0800c880 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800c880:	b480      	push	{r7}
 800c882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800c884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c88e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c892:	d101      	bne.n	800c898 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800c894:	2301      	movs	r3, #1
 800c896:	e000      	b.n	800c89a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <LL_RCC_HSE_Enable>:
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c8a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c8b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8b6:	6013      	str	r3, [r2, #0]
}
 800c8b8:	bf00      	nop
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <LL_RCC_HSE_Disable>:
{
 800c8c2:	b480      	push	{r7}
 800c8c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800c8c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c8d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8d4:	6013      	str	r3, [r2, #0]
}
 800c8d6:	bf00      	nop
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <LL_RCC_HSE_IsReady>:
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c8e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f2:	d101      	bne.n	800c8f8 <LL_RCC_HSE_IsReady+0x18>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e000      	b.n	800c8fa <LL_RCC_HSE_IsReady+0x1a>
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <LL_RCC_HSI_Enable>:
{
 800c904:	b480      	push	{r7}
 800c906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c916:	6013      	str	r3, [r2, #0]
}
 800c918:	bf00      	nop
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <LL_RCC_HSI_Disable>:
{
 800c922:	b480      	push	{r7}
 800c924:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800c926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c934:	6013      	str	r3, [r2, #0]
}
 800c936:	bf00      	nop
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <LL_RCC_HSI_IsReady>:
{
 800c940:	b480      	push	{r7}
 800c942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c94e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c952:	d101      	bne.n	800c958 <LL_RCC_HSI_IsReady+0x18>
 800c954:	2301      	movs	r3, #1
 800c956:	e000      	b.n	800c95a <LL_RCC_HSI_IsReady+0x1a>
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <LL_RCC_HSI_SetCalibTrimming>:
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800c96c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	061b      	lsls	r3, r3, #24
 800c97a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c97e:	4313      	orrs	r3, r2
 800c980:	604b      	str	r3, [r1, #4]
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <LL_RCC_HSI48_Enable>:
{
 800c98e:	b480      	push	{r7}
 800c990:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c99a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c99e:	f043 0301 	orr.w	r3, r3, #1
 800c9a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800c9a6:	bf00      	nop
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <LL_RCC_HSI48_Disable>:
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c9b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c9c0:	f023 0301 	bic.w	r3, r3, #1
 800c9c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800c9c8:	bf00      	nop
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <LL_RCC_HSI48_IsReady>:
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800c9d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9de:	f003 0302 	and.w	r3, r3, #2
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	d101      	bne.n	800c9ea <LL_RCC_HSI48_IsReady+0x18>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e000      	b.n	800c9ec <LL_RCC_HSI48_IsReady+0x1a>
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <LL_RCC_LSE_Enable>:
{
 800c9f6:	b480      	push	{r7}
 800c9f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c9fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca06:	f043 0301 	orr.w	r3, r3, #1
 800ca0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ca0e:	bf00      	nop
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <LL_RCC_LSE_Disable>:
{
 800ca18:	b480      	push	{r7}
 800ca1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800ca1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca28:	f023 0301 	bic.w	r3, r3, #1
 800ca2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ca30:	bf00      	nop
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <LL_RCC_LSE_EnableBypass>:
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ca3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca4a:	f043 0304 	orr.w	r3, r3, #4
 800ca4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ca52:	bf00      	nop
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <LL_RCC_LSE_DisableBypass>:
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800ca60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ca6c:	f023 0304 	bic.w	r3, r3, #4
 800ca70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800ca74:	bf00      	nop
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <LL_RCC_LSE_IsReady>:
{
 800ca7e:	b480      	push	{r7}
 800ca80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ca82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca8a:	f003 0302 	and.w	r3, r3, #2
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d101      	bne.n	800ca96 <LL_RCC_LSE_IsReady+0x18>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e000      	b.n	800ca98 <LL_RCC_LSE_IsReady+0x1a>
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <LL_RCC_LSI1_Enable>:
{
 800caa2:	b480      	push	{r7}
 800caa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800caa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800caaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800caae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cab2:	f043 0301 	orr.w	r3, r3, #1
 800cab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800caba:	bf00      	nop
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <LL_RCC_LSI1_Disable>:
{
 800cac4:	b480      	push	{r7}
 800cac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800cac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cacc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cad4:	f023 0301 	bic.w	r3, r3, #1
 800cad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800cadc:	bf00      	nop
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <LL_RCC_LSI1_IsReady>:
{
 800cae6:	b480      	push	{r7}
 800cae8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800caea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800caee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800caf2:	f003 0302 	and.w	r3, r3, #2
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d101      	bne.n	800cafe <LL_RCC_LSI1_IsReady+0x18>
 800cafa:	2301      	movs	r3, #1
 800cafc:	e000      	b.n	800cb00 <LL_RCC_LSI1_IsReady+0x1a>
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <LL_RCC_LSI2_Enable>:
{
 800cb0a:	b480      	push	{r7}
 800cb0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800cb0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cb1a:	f043 0304 	orr.w	r3, r3, #4
 800cb1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800cb22:	bf00      	nop
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <LL_RCC_LSI2_Disable>:
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800cb30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cb3c:	f023 0304 	bic.w	r3, r3, #4
 800cb40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800cb44:	bf00      	nop
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <LL_RCC_LSI2_IsReady>:
{
 800cb4e:	b480      	push	{r7}
 800cb50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800cb52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb5a:	f003 0308 	and.w	r3, r3, #8
 800cb5e:	2b08      	cmp	r3, #8
 800cb60:	d101      	bne.n	800cb66 <LL_RCC_LSI2_IsReady+0x18>
 800cb62:	2301      	movs	r3, #1
 800cb64:	e000      	b.n	800cb68 <LL_RCC_LSI2_IsReady+0x1a>
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <LL_RCC_LSI2_SetTrimming>:
{
 800cb72:	b480      	push	{r7}
 800cb74:	b083      	sub	sp, #12
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800cb7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	021b      	lsls	r3, r3, #8
 800cb8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <LL_RCC_MSI_Enable>:
{
 800cba0:	b480      	push	{r7}
 800cba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800cba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cbae:	f043 0301 	orr.w	r3, r3, #1
 800cbb2:	6013      	str	r3, [r2, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr

0800cbbe <LL_RCC_MSI_Disable>:
{
 800cbbe:	b480      	push	{r7}
 800cbc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800cbc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cbcc:	f023 0301 	bic.w	r3, r3, #1
 800cbd0:	6013      	str	r3, [r2, #0]
}
 800cbd2:	bf00      	nop
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <LL_RCC_MSI_IsReady>:
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800cbe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f003 0302 	and.w	r3, r3, #2
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d101      	bne.n	800cbf2 <LL_RCC_MSI_IsReady+0x16>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e000      	b.n	800cbf4 <LL_RCC_MSI_IsReady+0x18>
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <LL_RCC_MSI_SetRange>:
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b083      	sub	sp, #12
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800cc06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cc10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	600b      	str	r3, [r1, #0]
}
 800cc1a:	bf00      	nop
 800cc1c:	370c      	adds	r7, #12
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr

0800cc26 <LL_RCC_MSI_GetRange>:
{
 800cc26:	b480      	push	{r7}
 800cc28:	b083      	sub	sp, #12
 800cc2a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800cc2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc36:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2bb0      	cmp	r3, #176	; 0xb0
 800cc3c:	d901      	bls.n	800cc42 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800cc3e:	23b0      	movs	r3, #176	; 0xb0
 800cc40:	607b      	str	r3, [r7, #4]
  return msiRange;
 800cc42:	687b      	ldr	r3, [r7, #4]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <LL_RCC_MSI_SetCalibTrimming>:
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800cc58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	021b      	lsls	r3, r3, #8
 800cc66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	604b      	str	r3, [r1, #4]
}
 800cc6e:	bf00      	nop
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <LL_RCC_SetSysClkSource>:
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b083      	sub	sp, #12
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800cc82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	f023 0203 	bic.w	r2, r3, #3
 800cc8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	608b      	str	r3, [r1, #8]
}
 800cc96:	bf00      	nop
 800cc98:	370c      	adds	r7, #12
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <LL_RCC_GetSysClkSource>:
{
 800cca2:	b480      	push	{r7}
 800cca4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800cca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f003 030c 	and.w	r3, r3, #12
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <LL_RCC_SetAHBPrescaler>:
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b083      	sub	sp, #12
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ccc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	608b      	str	r3, [r1, #8]
}
 800ccd6:	bf00      	nop
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <LL_C2_RCC_SetAHBPrescaler>:
{
 800cce2:	b480      	push	{r7}
 800cce4:	b083      	sub	sp, #12
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800ccea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ccf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ccf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800cd02:	bf00      	nop
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <LL_RCC_SetAHB4Prescaler>:
{
 800cd0e:	b480      	push	{r7}
 800cd10:	b083      	sub	sp, #12
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800cd16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cd1e:	f023 020f 	bic.w	r2, r3, #15
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	091b      	lsrs	r3, r3, #4
 800cd26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <LL_RCC_SetAPB1Prescaler>:
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800cd44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cd4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	4313      	orrs	r3, r2
 800cd56:	608b      	str	r3, [r1, #8]
}
 800cd58:	bf00      	nop
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <LL_RCC_SetAPB2Prescaler>:
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800cd6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cd76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	608b      	str	r3, [r1, #8]
}
 800cd80:	bf00      	nop
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <LL_RCC_GetAHBPrescaler>:
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800cd90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <LL_RCC_GetAHB4Prescaler>:
{
 800cda4:	b480      	push	{r7}
 800cda6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800cda8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cdb0:	011b      	lsls	r3, r3, #4
 800cdb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <LL_RCC_GetAPB1Prescaler>:
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800cdc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <LL_RCC_GetAPB2Prescaler>:
{
 800cdd8:	b480      	push	{r7}
 800cdda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800cddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <LL_RCC_PLL_Enable>:
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800cdf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cdfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce02:	6013      	str	r3, [r2, #0]
}
 800ce04:	bf00      	nop
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <LL_RCC_PLL_Disable>:
{
 800ce0e:	b480      	push	{r7}
 800ce10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ce12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ce1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce20:	6013      	str	r3, [r2, #0]
}
 800ce22:	bf00      	nop
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <LL_RCC_PLL_IsReady>:
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ce30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce3e:	d101      	bne.n	800ce44 <LL_RCC_PLL_IsReady+0x18>
 800ce40:	2301      	movs	r3, #1
 800ce42:	e000      	b.n	800ce46 <LL_RCC_PLL_IsReady+0x1a>
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <LL_RCC_PLL_GetN>:
{
 800ce50:	b480      	push	{r7}
 800ce52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800ce54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	0a1b      	lsrs	r3, r3, #8
 800ce5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <LL_RCC_PLL_GetR>:
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800ce6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <LL_RCC_PLL_GetDivider>:
{
 800ce82:	b480      	push	{r7}
 800ce84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800ce86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <LL_RCC_PLL_GetMainSource>:
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ce9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	f003 0303 	and.w	r3, r3, #3
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <LL_RCC_IsActiveFlag_HPRE>:
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ceb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cec4:	d101      	bne.n	800ceca <LL_RCC_IsActiveFlag_HPRE+0x18>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e000      	b.n	800cecc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr

0800ced6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800ced6:	b480      	push	{r7}
 800ced8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ceda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cede:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceea:	d101      	bne.n	800cef0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ceec:	2301      	movs	r3, #1
 800ceee:	e000      	b.n	800cef2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800cefc:	b480      	push	{r7}
 800cefe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800cf00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cf08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf10:	d101      	bne.n	800cf16 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800cf12:	2301      	movs	r3, #1
 800cf14:	e000      	b.n	800cf18 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr

0800cf22 <LL_RCC_IsActiveFlag_PPRE1>:
{
 800cf22:	b480      	push	{r7}
 800cf24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800cf26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf34:	d101      	bne.n	800cf3a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800cf36:	2301      	movs	r3, #1
 800cf38:	e000      	b.n	800cf3c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800cf46:	b480      	push	{r7}
 800cf48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800cf4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cf58:	d101      	bne.n	800cf5e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e000      	b.n	800cf60 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
	...

0800cf6c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cf6c:	b590      	push	{r4, r7, lr}
 800cf6e:	b08d      	sub	sp, #52	; 0x34
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e363      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0320 	and.w	r3, r3, #32
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 808d 	beq.w	800d0a6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cf8c:	f7ff fe89 	bl	800cca2 <LL_RCC_GetSysClkSource>
 800cf90:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cf92:	f7ff ff82 	bl	800ce9a <LL_RCC_PLL_GetMainSource>
 800cf96:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d005      	beq.n	800cfaa <HAL_RCC_OscConfig+0x3e>
 800cf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa0:	2b0c      	cmp	r3, #12
 800cfa2:	d147      	bne.n	800d034 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800cfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d144      	bne.n	800d034 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	69db      	ldr	r3, [r3, #28]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e347      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cfba:	f7ff fe34 	bl	800cc26 <LL_RCC_MSI_GetRange>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	429c      	cmp	r4, r3
 800cfc2:	d914      	bls.n	800cfee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 fd2f 	bl	800da2c <RCC_SetFlashLatencyFromMSIRange>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d001      	beq.n	800cfd8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e336      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff fe0e 	bl	800cbfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6a1b      	ldr	r3, [r3, #32]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff fe32 	bl	800cc50 <LL_RCC_MSI_SetCalibTrimming>
 800cfec:	e013      	b.n	800d016 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7ff fe03 	bl	800cbfe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a1b      	ldr	r3, [r3, #32]
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7ff fe27 	bl	800cc50 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d006:	4618      	mov	r0, r3
 800d008:	f000 fd10 	bl	800da2c <RCC_SetFlashLatencyFromMSIRange>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	e317      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d016:	f000 fcc9 	bl	800d9ac <HAL_RCC_GetHCLKFreq>
 800d01a:	4603      	mov	r3, r0
 800d01c:	4aa4      	ldr	r2, [pc, #656]	; (800d2b0 <HAL_RCC_OscConfig+0x344>)
 800d01e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d020:	4ba4      	ldr	r3, [pc, #656]	; (800d2b4 <HAL_RCC_OscConfig+0x348>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4618      	mov	r0, r3
 800d026:	f7fd fc9d 	bl	800a964 <HAL_InitTick>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d039      	beq.n	800d0a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	e308      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	69db      	ldr	r3, [r3, #28]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d01e      	beq.n	800d07a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d03c:	f7ff fdb0 	bl	800cba0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d040:	f7fd fcde 	bl	800aa00 <HAL_GetTick>
 800d044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800d046:	e008      	b.n	800d05a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d048:	f7fd fcda 	bl	800aa00 <HAL_GetTick>
 800d04c:	4602      	mov	r2, r0
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	2b02      	cmp	r3, #2
 800d054:	d901      	bls.n	800d05a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800d056:	2303      	movs	r3, #3
 800d058:	e2f5      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800d05a:	f7ff fdbf 	bl	800cbdc <LL_RCC_MSI_IsReady>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d0f1      	beq.n	800d048 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff fdc8 	bl	800cbfe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a1b      	ldr	r3, [r3, #32]
 800d072:	4618      	mov	r0, r3
 800d074:	f7ff fdec 	bl	800cc50 <LL_RCC_MSI_SetCalibTrimming>
 800d078:	e015      	b.n	800d0a6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d07a:	f7ff fda0 	bl	800cbbe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d07e:	f7fd fcbf 	bl	800aa00 <HAL_GetTick>
 800d082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800d084:	e008      	b.n	800d098 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d086:	f7fd fcbb 	bl	800aa00 <HAL_GetTick>
 800d08a:	4602      	mov	r2, r0
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	2b02      	cmp	r3, #2
 800d092:	d901      	bls.n	800d098 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800d094:	2303      	movs	r3, #3
 800d096:	e2d6      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800d098:	f7ff fda0 	bl	800cbdc <LL_RCC_MSI_IsReady>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1f1      	bne.n	800d086 <HAL_RCC_OscConfig+0x11a>
 800d0a2:	e000      	b.n	800d0a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d0a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f003 0301 	and.w	r3, r3, #1
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d047      	beq.n	800d142 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d0b2:	f7ff fdf6 	bl	800cca2 <LL_RCC_GetSysClkSource>
 800d0b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d0b8:	f7ff feef 	bl	800ce9a <LL_RCC_PLL_GetMainSource>
 800d0bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800d0be:	6a3b      	ldr	r3, [r7, #32]
 800d0c0:	2b08      	cmp	r3, #8
 800d0c2:	d005      	beq.n	800d0d0 <HAL_RCC_OscConfig+0x164>
 800d0c4:	6a3b      	ldr	r3, [r7, #32]
 800d0c6:	2b0c      	cmp	r3, #12
 800d0c8:	d108      	bne.n	800d0dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d105      	bne.n	800d0dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d134      	bne.n	800d142 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e2b4      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0e4:	d102      	bne.n	800d0ec <HAL_RCC_OscConfig+0x180>
 800d0e6:	f7ff fbdd 	bl	800c8a4 <LL_RCC_HSE_Enable>
 800d0ea:	e001      	b.n	800d0f0 <HAL_RCC_OscConfig+0x184>
 800d0ec:	f7ff fbe9 	bl	800c8c2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d012      	beq.n	800d11e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0f8:	f7fd fc82 	bl	800aa00 <HAL_GetTick>
 800d0fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800d0fe:	e008      	b.n	800d112 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d100:	f7fd fc7e 	bl	800aa00 <HAL_GetTick>
 800d104:	4602      	mov	r2, r0
 800d106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d108:	1ad3      	subs	r3, r2, r3
 800d10a:	2b64      	cmp	r3, #100	; 0x64
 800d10c:	d901      	bls.n	800d112 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d10e:	2303      	movs	r3, #3
 800d110:	e299      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800d112:	f7ff fbe5 	bl	800c8e0 <LL_RCC_HSE_IsReady>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d0f1      	beq.n	800d100 <HAL_RCC_OscConfig+0x194>
 800d11c:	e011      	b.n	800d142 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d11e:	f7fd fc6f 	bl	800aa00 <HAL_GetTick>
 800d122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800d124:	e008      	b.n	800d138 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d126:	f7fd fc6b 	bl	800aa00 <HAL_GetTick>
 800d12a:	4602      	mov	r2, r0
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	2b64      	cmp	r3, #100	; 0x64
 800d132:	d901      	bls.n	800d138 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800d134:	2303      	movs	r3, #3
 800d136:	e286      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800d138:	f7ff fbd2 	bl	800c8e0 <LL_RCC_HSE_IsReady>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1f1      	bne.n	800d126 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f003 0302 	and.w	r3, r3, #2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d04c      	beq.n	800d1e8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d14e:	f7ff fda8 	bl	800cca2 <LL_RCC_GetSysClkSource>
 800d152:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d154:	f7ff fea1 	bl	800ce9a <LL_RCC_PLL_GetMainSource>
 800d158:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	2b04      	cmp	r3, #4
 800d15e:	d005      	beq.n	800d16c <HAL_RCC_OscConfig+0x200>
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	2b0c      	cmp	r3, #12
 800d164:	d10e      	bne.n	800d184 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d10b      	bne.n	800d184 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800d174:	2301      	movs	r3, #1
 800d176:	e266      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7ff fbf1 	bl	800c964 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d182:	e031      	b.n	800d1e8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d019      	beq.n	800d1c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d18c:	f7ff fbba 	bl	800c904 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d190:	f7fd fc36 	bl	800aa00 <HAL_GetTick>
 800d194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800d196:	e008      	b.n	800d1aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d198:	f7fd fc32 	bl	800aa00 <HAL_GetTick>
 800d19c:	4602      	mov	r2, r0
 800d19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	d901      	bls.n	800d1aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	e24d      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800d1aa:	f7ff fbc9 	bl	800c940 <LL_RCC_HSI_IsReady>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d0f1      	beq.n	800d198 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7ff fbd3 	bl	800c964 <LL_RCC_HSI_SetCalibTrimming>
 800d1be:	e013      	b.n	800d1e8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d1c0:	f7ff fbaf 	bl	800c922 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1c4:	f7fd fc1c 	bl	800aa00 <HAL_GetTick>
 800d1c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800d1ca:	e008      	b.n	800d1de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d1cc:	f7fd fc18 	bl	800aa00 <HAL_GetTick>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	d901      	bls.n	800d1de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	e233      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800d1de:	f7ff fbaf 	bl	800c940 <LL_RCC_HSI_IsReady>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d1f1      	bne.n	800d1cc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f003 0308 	and.w	r3, r3, #8
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d106      	bne.n	800d202 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f000 80a3 	beq.w	800d348 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	695b      	ldr	r3, [r3, #20]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d076      	beq.n	800d2f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 0310 	and.w	r3, r3, #16
 800d212:	2b00      	cmp	r3, #0
 800d214:	d046      	beq.n	800d2a4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800d216:	f7ff fc66 	bl	800cae6 <LL_RCC_LSI1_IsReady>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d113      	bne.n	800d248 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800d220:	f7ff fc3f 	bl	800caa2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d224:	f7fd fbec 	bl	800aa00 <HAL_GetTick>
 800d228:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d22a:	e008      	b.n	800d23e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d22c:	f7fd fbe8 	bl	800aa00 <HAL_GetTick>
 800d230:	4602      	mov	r2, r0
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	2b02      	cmp	r3, #2
 800d238:	d901      	bls.n	800d23e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800d23a:	2303      	movs	r3, #3
 800d23c:	e203      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d23e:	f7ff fc52 	bl	800cae6 <LL_RCC_LSI1_IsReady>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d0f1      	beq.n	800d22c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800d248:	f7ff fc5f 	bl	800cb0a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d24c:	f7fd fbd8 	bl	800aa00 <HAL_GetTick>
 800d250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d252:	e008      	b.n	800d266 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d254:	f7fd fbd4 	bl	800aa00 <HAL_GetTick>
 800d258:	4602      	mov	r2, r0
 800d25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d901      	bls.n	800d266 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800d262:	2303      	movs	r3, #3
 800d264:	e1ef      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d266:	f7ff fc72 	bl	800cb4e <LL_RCC_LSI2_IsReady>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d0f1      	beq.n	800d254 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	4618      	mov	r0, r3
 800d276:	f7ff fc7c 	bl	800cb72 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800d27a:	f7ff fc23 	bl	800cac4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d27e:	f7fd fbbf 	bl	800aa00 <HAL_GetTick>
 800d282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d284:	e008      	b.n	800d298 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d286:	f7fd fbbb 	bl	800aa00 <HAL_GetTick>
 800d28a:	4602      	mov	r2, r0
 800d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	2b02      	cmp	r3, #2
 800d292:	d901      	bls.n	800d298 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e1d6      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d298:	f7ff fc25 	bl	800cae6 <LL_RCC_LSI1_IsReady>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d1f1      	bne.n	800d286 <HAL_RCC_OscConfig+0x31a>
 800d2a2:	e051      	b.n	800d348 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800d2a4:	f7ff fbfd 	bl	800caa2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2a8:	f7fd fbaa 	bl	800aa00 <HAL_GetTick>
 800d2ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d2ae:	e00c      	b.n	800d2ca <HAL_RCC_OscConfig+0x35e>
 800d2b0:	20000074 	.word	0x20000074
 800d2b4:	20000078 	.word	0x20000078
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d2b8:	f7fd fba2 	bl	800aa00 <HAL_GetTick>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d901      	bls.n	800d2ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800d2c6:	2303      	movs	r3, #3
 800d2c8:	e1bd      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d2ca:	f7ff fc0c 	bl	800cae6 <LL_RCC_LSI1_IsReady>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d0f1      	beq.n	800d2b8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800d2d4:	f7ff fc2a 	bl	800cb2c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d2d8:	e008      	b.n	800d2ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d2da:	f7fd fb91 	bl	800aa00 <HAL_GetTick>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d901      	bls.n	800d2ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e1ac      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d2ec:	f7ff fc2f 	bl	800cb4e <LL_RCC_LSI2_IsReady>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1f1      	bne.n	800d2da <HAL_RCC_OscConfig+0x36e>
 800d2f6:	e027      	b.n	800d348 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800d2f8:	f7ff fc18 	bl	800cb2c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2fc:	f7fd fb80 	bl	800aa00 <HAL_GetTick>
 800d300:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d302:	e008      	b.n	800d316 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d304:	f7fd fb7c 	bl	800aa00 <HAL_GetTick>
 800d308:	4602      	mov	r2, r0
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	2b03      	cmp	r3, #3
 800d310:	d901      	bls.n	800d316 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800d312:	2303      	movs	r3, #3
 800d314:	e197      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d316:	f7ff fc1a 	bl	800cb4e <LL_RCC_LSI2_IsReady>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1f1      	bne.n	800d304 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800d320:	f7ff fbd0 	bl	800cac4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d324:	f7fd fb6c 	bl	800aa00 <HAL_GetTick>
 800d328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d32a:	e008      	b.n	800d33e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d32c:	f7fd fb68 	bl	800aa00 <HAL_GetTick>
 800d330:	4602      	mov	r2, r0
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	2b02      	cmp	r3, #2
 800d338:	d901      	bls.n	800d33e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800d33a:	2303      	movs	r3, #3
 800d33c:	e183      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d33e:	f7ff fbd2 	bl	800cae6 <LL_RCC_LSI1_IsReady>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1f1      	bne.n	800d32c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 0304 	and.w	r3, r3, #4
 800d350:	2b00      	cmp	r3, #0
 800d352:	d05b      	beq.n	800d40c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d354:	4ba7      	ldr	r3, [pc, #668]	; (800d5f4 <HAL_RCC_OscConfig+0x688>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d114      	bne.n	800d38a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d360:	f7ff fa70 	bl	800c844 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d364:	f7fd fb4c 	bl	800aa00 <HAL_GetTick>
 800d368:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d36a:	e008      	b.n	800d37e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d36c:	f7fd fb48 	bl	800aa00 <HAL_GetTick>
 800d370:	4602      	mov	r2, r0
 800d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d374:	1ad3      	subs	r3, r2, r3
 800d376:	2b02      	cmp	r3, #2
 800d378:	d901      	bls.n	800d37e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800d37a:	2303      	movs	r3, #3
 800d37c:	e163      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d37e:	4b9d      	ldr	r3, [pc, #628]	; (800d5f4 <HAL_RCC_OscConfig+0x688>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d386:	2b00      	cmp	r3, #0
 800d388:	d0f0      	beq.n	800d36c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d102      	bne.n	800d398 <HAL_RCC_OscConfig+0x42c>
 800d392:	f7ff fb30 	bl	800c9f6 <LL_RCC_LSE_Enable>
 800d396:	e00c      	b.n	800d3b2 <HAL_RCC_OscConfig+0x446>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	2b05      	cmp	r3, #5
 800d39e:	d104      	bne.n	800d3aa <HAL_RCC_OscConfig+0x43e>
 800d3a0:	f7ff fb4b 	bl	800ca3a <LL_RCC_LSE_EnableBypass>
 800d3a4:	f7ff fb27 	bl	800c9f6 <LL_RCC_LSE_Enable>
 800d3a8:	e003      	b.n	800d3b2 <HAL_RCC_OscConfig+0x446>
 800d3aa:	f7ff fb35 	bl	800ca18 <LL_RCC_LSE_Disable>
 800d3ae:	f7ff fb55 	bl	800ca5c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d014      	beq.n	800d3e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3ba:	f7fd fb21 	bl	800aa00 <HAL_GetTick>
 800d3be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800d3c0:	e00a      	b.n	800d3d8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3c2:	f7fd fb1d 	bl	800aa00 <HAL_GetTick>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d901      	bls.n	800d3d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e136      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800d3d8:	f7ff fb51 	bl	800ca7e <LL_RCC_LSE_IsReady>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d0ef      	beq.n	800d3c2 <HAL_RCC_OscConfig+0x456>
 800d3e2:	e013      	b.n	800d40c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3e4:	f7fd fb0c 	bl	800aa00 <HAL_GetTick>
 800d3e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800d3ea:	e00a      	b.n	800d402 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3ec:	f7fd fb08 	bl	800aa00 <HAL_GetTick>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	1ad3      	subs	r3, r2, r3
 800d3f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d901      	bls.n	800d402 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800d3fe:	2303      	movs	r3, #3
 800d400:	e121      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800d402:	f7ff fb3c 	bl	800ca7e <LL_RCC_LSE_IsReady>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1ef      	bne.n	800d3ec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d414:	2b00      	cmp	r3, #0
 800d416:	d02c      	beq.n	800d472 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d014      	beq.n	800d44a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d420:	f7ff fab5 	bl	800c98e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d424:	f7fd faec 	bl	800aa00 <HAL_GetTick>
 800d428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d42a:	e008      	b.n	800d43e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d42c:	f7fd fae8 	bl	800aa00 <HAL_GetTick>
 800d430:	4602      	mov	r2, r0
 800d432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	2b02      	cmp	r3, #2
 800d438:	d901      	bls.n	800d43e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800d43a:	2303      	movs	r3, #3
 800d43c:	e103      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800d43e:	f7ff fac8 	bl	800c9d2 <LL_RCC_HSI48_IsReady>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d0f1      	beq.n	800d42c <HAL_RCC_OscConfig+0x4c0>
 800d448:	e013      	b.n	800d472 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d44a:	f7ff fab1 	bl	800c9b0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d44e:	f7fd fad7 	bl	800aa00 <HAL_GetTick>
 800d452:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d454:	e008      	b.n	800d468 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d456:	f7fd fad3 	bl	800aa00 <HAL_GetTick>
 800d45a:	4602      	mov	r2, r0
 800d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	2b02      	cmp	r3, #2
 800d462:	d901      	bls.n	800d468 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	e0ee      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800d468:	f7ff fab3 	bl	800c9d2 <LL_RCC_HSI48_IsReady>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1f1      	bne.n	800d456 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d476:	2b00      	cmp	r3, #0
 800d478:	f000 80e4 	beq.w	800d644 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d47c:	f7ff fc11 	bl	800cca2 <LL_RCC_GetSysClkSource>
 800d480:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800d482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48e:	2b02      	cmp	r3, #2
 800d490:	f040 80b4 	bne.w	800d5fc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f003 0203 	and.w	r2, r3, #3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d123      	bne.n	800d4ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d11c      	bne.n	800d4ea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	0a1b      	lsrs	r3, r3, #8
 800d4b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d114      	bne.n	800d4ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d10d      	bne.n	800d4ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d106      	bne.n	800d4ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d05d      	beq.n	800d5a6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b0c      	cmp	r3, #12
 800d4ee:	d058      	beq.n	800d5a2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d4f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	e0a1      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d502:	f7ff fc84 	bl	800ce0e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d506:	f7fd fa7b 	bl	800aa00 <HAL_GetTick>
 800d50a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d50c:	e008      	b.n	800d520 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d50e:	f7fd fa77 	bl	800aa00 <HAL_GetTick>
 800d512:	4602      	mov	r2, r0
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d901      	bls.n	800d520 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800d51c:	2303      	movs	r3, #3
 800d51e:	e092      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1ef      	bne.n	800d50e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d52e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d532:	68da      	ldr	r2, [r3, #12]
 800d534:	4b30      	ldr	r3, [pc, #192]	; (800d5f8 <HAL_RCC_OscConfig+0x68c>)
 800d536:	4013      	ands	r3, r2
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d540:	4311      	orrs	r1, r2
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d546:	0212      	lsls	r2, r2, #8
 800d548:	4311      	orrs	r1, r2
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d54e:	4311      	orrs	r1, r2
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d554:	4311      	orrs	r1, r2
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d55a:	430a      	orrs	r2, r1
 800d55c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d560:	4313      	orrs	r3, r2
 800d562:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d564:	f7ff fc44 	bl	800cdf0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d576:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d578:	f7fd fa42 	bl	800aa00 <HAL_GetTick>
 800d57c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d57e:	e008      	b.n	800d592 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d580:	f7fd fa3e 	bl	800aa00 <HAL_GetTick>
 800d584:	4602      	mov	r2, r0
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	1ad3      	subs	r3, r2, r3
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d901      	bls.n	800d592 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e059      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d0ef      	beq.n	800d580 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d5a0:	e050      	b.n	800d644 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e04f      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d5a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d147      	bne.n	800d644 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d5b4:	f7ff fc1c 	bl	800cdf0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d5b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d5c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d5c8:	f7fd fa1a 	bl	800aa00 <HAL_GetTick>
 800d5cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d5ce:	e008      	b.n	800d5e2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5d0:	f7fd fa16 	bl	800aa00 <HAL_GetTick>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d901      	bls.n	800d5e2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	e031      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d5e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d0ef      	beq.n	800d5d0 <HAL_RCC_OscConfig+0x664>
 800d5f0:	e028      	b.n	800d644 <HAL_RCC_OscConfig+0x6d8>
 800d5f2:	bf00      	nop
 800d5f4:	58000400 	.word	0x58000400
 800d5f8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	2b0c      	cmp	r3, #12
 800d600:	d01e      	beq.n	800d640 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d602:	f7ff fc04 	bl	800ce0e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d606:	f7fd f9fb 	bl	800aa00 <HAL_GetTick>
 800d60a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d60c:	e008      	b.n	800d620 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d60e:	f7fd f9f7 	bl	800aa00 <HAL_GetTick>
 800d612:	4602      	mov	r2, r0
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d901      	bls.n	800d620 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800d61c:	2303      	movs	r3, #3
 800d61e:	e012      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1ef      	bne.n	800d60e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800d62e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d632:	68da      	ldr	r2, [r3, #12]
 800d634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d638:	4b05      	ldr	r3, [pc, #20]	; (800d650 <HAL_RCC_OscConfig+0x6e4>)
 800d63a:	4013      	ands	r3, r2
 800d63c:	60cb      	str	r3, [r1, #12]
 800d63e:	e001      	b.n	800d644 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	e000      	b.n	800d646 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3734      	adds	r7, #52	; 0x34
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd90      	pop	{r4, r7, pc}
 800d64e:	bf00      	nop
 800d650:	eefefffc 	.word	0xeefefffc

0800d654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	e12d      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d668:	4b98      	ldr	r3, [pc, #608]	; (800d8cc <HAL_RCC_ClockConfig+0x278>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f003 0307 	and.w	r3, r3, #7
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	429a      	cmp	r2, r3
 800d674:	d91b      	bls.n	800d6ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d676:	4b95      	ldr	r3, [pc, #596]	; (800d8cc <HAL_RCC_ClockConfig+0x278>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f023 0207 	bic.w	r2, r3, #7
 800d67e:	4993      	ldr	r1, [pc, #588]	; (800d8cc <HAL_RCC_ClockConfig+0x278>)
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	4313      	orrs	r3, r2
 800d684:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d686:	f7fd f9bb 	bl	800aa00 <HAL_GetTick>
 800d68a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d68c:	e008      	b.n	800d6a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d68e:	f7fd f9b7 	bl	800aa00 <HAL_GetTick>
 800d692:	4602      	mov	r2, r0
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	1ad3      	subs	r3, r2, r3
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d901      	bls.n	800d6a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800d69c:	2303      	movs	r3, #3
 800d69e:	e111      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6a0:	4b8a      	ldr	r3, [pc, #552]	; (800d8cc <HAL_RCC_ClockConfig+0x278>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f003 0307 	and.w	r3, r3, #7
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d1ef      	bne.n	800d68e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f003 0302 	and.w	r3, r3, #2
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d016      	beq.n	800d6e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7ff fafb 	bl	800ccba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d6c4:	f7fd f99c 	bl	800aa00 <HAL_GetTick>
 800d6c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800d6ca:	e008      	b.n	800d6de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d6cc:	f7fd f998 	bl	800aa00 <HAL_GetTick>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	2b02      	cmp	r3, #2
 800d6d8:	d901      	bls.n	800d6de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	e0f2      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800d6de:	f7ff fbe8 	bl	800ceb2 <LL_RCC_IsActiveFlag_HPRE>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d0f1      	beq.n	800d6cc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 0320 	and.w	r3, r3, #32
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d016      	beq.n	800d722 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	695b      	ldr	r3, [r3, #20]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff faf2 	bl	800cce2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d6fe:	f7fd f97f 	bl	800aa00 <HAL_GetTick>
 800d702:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d704:	e008      	b.n	800d718 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d706:	f7fd f97b 	bl	800aa00 <HAL_GetTick>
 800d70a:	4602      	mov	r2, r0
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	1ad3      	subs	r3, r2, r3
 800d710:	2b02      	cmp	r3, #2
 800d712:	d901      	bls.n	800d718 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800d714:	2303      	movs	r3, #3
 800d716:	e0d5      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d718:	f7ff fbdd 	bl	800ced6 <LL_RCC_IsActiveFlag_C2HPRE>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d0f1      	beq.n	800d706 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d016      	beq.n	800d75c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	699b      	ldr	r3, [r3, #24]
 800d732:	4618      	mov	r0, r3
 800d734:	f7ff faeb 	bl	800cd0e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d738:	f7fd f962 	bl	800aa00 <HAL_GetTick>
 800d73c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d73e:	e008      	b.n	800d752 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d740:	f7fd f95e 	bl	800aa00 <HAL_GetTick>
 800d744:	4602      	mov	r2, r0
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d901      	bls.n	800d752 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800d74e:	2303      	movs	r3, #3
 800d750:	e0b8      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d752:	f7ff fbd3 	bl	800cefc <LL_RCC_IsActiveFlag_SHDHPRE>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d0f1      	beq.n	800d740 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f003 0304 	and.w	r3, r3, #4
 800d764:	2b00      	cmp	r3, #0
 800d766:	d016      	beq.n	800d796 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff fae5 	bl	800cd3c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d772:	f7fd f945 	bl	800aa00 <HAL_GetTick>
 800d776:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d778:	e008      	b.n	800d78c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d77a:	f7fd f941 	bl	800aa00 <HAL_GetTick>
 800d77e:	4602      	mov	r2, r0
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	1ad3      	subs	r3, r2, r3
 800d784:	2b02      	cmp	r3, #2
 800d786:	d901      	bls.n	800d78c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800d788:	2303      	movs	r3, #3
 800d78a:	e09b      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d78c:	f7ff fbc9 	bl	800cf22 <LL_RCC_IsActiveFlag_PPRE1>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d0f1      	beq.n	800d77a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f003 0308 	and.w	r3, r3, #8
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d017      	beq.n	800d7d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	00db      	lsls	r3, r3, #3
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7ff fadb 	bl	800cd64 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d7ae:	f7fd f927 	bl	800aa00 <HAL_GetTick>
 800d7b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d7b4:	e008      	b.n	800d7c8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d7b6:	f7fd f923 	bl	800aa00 <HAL_GetTick>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	1ad3      	subs	r3, r2, r3
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d901      	bls.n	800d7c8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	e07d      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d7c8:	f7ff fbbd 	bl	800cf46 <LL_RCC_IsActiveFlag_PPRE2>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d0f1      	beq.n	800d7b6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d043      	beq.n	800d866 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d106      	bne.n	800d7f4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800d7e6:	f7ff f87b 	bl	800c8e0 <LL_RCC_HSE_IsReady>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d11e      	bne.n	800d82e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e067      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	2b03      	cmp	r3, #3
 800d7fa:	d106      	bne.n	800d80a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800d7fc:	f7ff fb16 	bl	800ce2c <LL_RCC_PLL_IsReady>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d113      	bne.n	800d82e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e05c      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d106      	bne.n	800d820 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800d812:	f7ff f9e3 	bl	800cbdc <LL_RCC_MSI_IsReady>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d108      	bne.n	800d82e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	e051      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800d820:	f7ff f88e 	bl	800c940 <LL_RCC_HSI_IsReady>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d101      	bne.n	800d82e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d82a:	2301      	movs	r3, #1
 800d82c:	e04a      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	4618      	mov	r0, r3
 800d834:	f7ff fa21 	bl	800cc7a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d838:	f7fd f8e2 	bl	800aa00 <HAL_GetTick>
 800d83c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d83e:	e00a      	b.n	800d856 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d840:	f7fd f8de 	bl	800aa00 <HAL_GetTick>
 800d844:	4602      	mov	r2, r0
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d84e:	4293      	cmp	r3, r2
 800d850:	d901      	bls.n	800d856 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800d852:	2303      	movs	r3, #3
 800d854:	e036      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d856:	f7ff fa24 	bl	800cca2 <LL_RCC_GetSysClkSource>
 800d85a:	4602      	mov	r2, r0
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	429a      	cmp	r2, r3
 800d864:	d1ec      	bne.n	800d840 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d866:	4b19      	ldr	r3, [pc, #100]	; (800d8cc <HAL_RCC_ClockConfig+0x278>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f003 0307 	and.w	r3, r3, #7
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	429a      	cmp	r2, r3
 800d872:	d21b      	bcs.n	800d8ac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d874:	4b15      	ldr	r3, [pc, #84]	; (800d8cc <HAL_RCC_ClockConfig+0x278>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f023 0207 	bic.w	r2, r3, #7
 800d87c:	4913      	ldr	r1, [pc, #76]	; (800d8cc <HAL_RCC_ClockConfig+0x278>)
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	4313      	orrs	r3, r2
 800d882:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d884:	f7fd f8bc 	bl	800aa00 <HAL_GetTick>
 800d888:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d88a:	e008      	b.n	800d89e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d88c:	f7fd f8b8 	bl	800aa00 <HAL_GetTick>
 800d890:	4602      	mov	r2, r0
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	2b02      	cmp	r3, #2
 800d898:	d901      	bls.n	800d89e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800d89a:	2303      	movs	r3, #3
 800d89c:	e012      	b.n	800d8c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d89e:	4b0b      	ldr	r3, [pc, #44]	; (800d8cc <HAL_RCC_ClockConfig+0x278>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f003 0307 	and.w	r3, r3, #7
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d1ef      	bne.n	800d88c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d8ac:	f000 f87e 	bl	800d9ac <HAL_RCC_GetHCLKFreq>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	4a07      	ldr	r2, [pc, #28]	; (800d8d0 <HAL_RCC_ClockConfig+0x27c>)
 800d8b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800d8b6:	f7fd f8af 	bl	800aa18 <HAL_GetTickPrio>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fd f851 	bl	800a964 <HAL_InitTick>
 800d8c2:	4603      	mov	r3, r0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	58004000 	.word	0x58004000
 800d8d0:	20000074 	.word	0x20000074

0800d8d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d8d4:	b590      	push	{r4, r7, lr}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d8da:	f7ff f9e2 	bl	800cca2 <LL_RCC_GetSysClkSource>
 800d8de:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10a      	bne.n	800d8fc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d8e6:	f7ff f99e 	bl	800cc26 <LL_RCC_MSI_GetRange>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	091b      	lsrs	r3, r3, #4
 800d8ee:	f003 030f 	and.w	r3, r3, #15
 800d8f2:	4a2b      	ldr	r2, [pc, #172]	; (800d9a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8f8:	60fb      	str	r3, [r7, #12]
 800d8fa:	e04b      	b.n	800d994 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b04      	cmp	r3, #4
 800d900:	d102      	bne.n	800d908 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d902:	4b28      	ldr	r3, [pc, #160]	; (800d9a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d904:	60fb      	str	r3, [r7, #12]
 800d906:	e045      	b.n	800d994 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b08      	cmp	r3, #8
 800d90c:	d10a      	bne.n	800d924 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d90e:	f7fe ffb7 	bl	800c880 <LL_RCC_HSE_IsEnabledDiv2>
 800d912:	4603      	mov	r3, r0
 800d914:	2b01      	cmp	r3, #1
 800d916:	d102      	bne.n	800d91e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800d918:	4b22      	ldr	r3, [pc, #136]	; (800d9a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d91a:	60fb      	str	r3, [r7, #12]
 800d91c:	e03a      	b.n	800d994 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800d91e:	4b22      	ldr	r3, [pc, #136]	; (800d9a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800d920:	60fb      	str	r3, [r7, #12]
 800d922:	e037      	b.n	800d994 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800d924:	f7ff fab9 	bl	800ce9a <LL_RCC_PLL_GetMainSource>
 800d928:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d003      	beq.n	800d938 <HAL_RCC_GetSysClockFreq+0x64>
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	2b03      	cmp	r3, #3
 800d934:	d003      	beq.n	800d93e <HAL_RCC_GetSysClockFreq+0x6a>
 800d936:	e00d      	b.n	800d954 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800d938:	4b1a      	ldr	r3, [pc, #104]	; (800d9a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d93a:	60bb      	str	r3, [r7, #8]
        break;
 800d93c:	e015      	b.n	800d96a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d93e:	f7fe ff9f 	bl	800c880 <LL_RCC_HSE_IsEnabledDiv2>
 800d942:	4603      	mov	r3, r0
 800d944:	2b01      	cmp	r3, #1
 800d946:	d102      	bne.n	800d94e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800d948:	4b16      	ldr	r3, [pc, #88]	; (800d9a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d94a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800d94c:	e00d      	b.n	800d96a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800d94e:	4b16      	ldr	r3, [pc, #88]	; (800d9a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800d950:	60bb      	str	r3, [r7, #8]
        break;
 800d952:	e00a      	b.n	800d96a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d954:	f7ff f967 	bl	800cc26 <LL_RCC_MSI_GetRange>
 800d958:	4603      	mov	r3, r0
 800d95a:	091b      	lsrs	r3, r3, #4
 800d95c:	f003 030f 	and.w	r3, r3, #15
 800d960:	4a0f      	ldr	r2, [pc, #60]	; (800d9a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d966:	60bb      	str	r3, [r7, #8]
        break;
 800d968:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800d96a:	f7ff fa71 	bl	800ce50 <LL_RCC_PLL_GetN>
 800d96e:	4602      	mov	r2, r0
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	fb03 f402 	mul.w	r4, r3, r2
 800d976:	f7ff fa84 	bl	800ce82 <LL_RCC_PLL_GetDivider>
 800d97a:	4603      	mov	r3, r0
 800d97c:	091b      	lsrs	r3, r3, #4
 800d97e:	3301      	adds	r3, #1
 800d980:	fbb4 f4f3 	udiv	r4, r4, r3
 800d984:	f7ff fa71 	bl	800ce6a <LL_RCC_PLL_GetR>
 800d988:	4603      	mov	r3, r0
 800d98a:	0f5b      	lsrs	r3, r3, #29
 800d98c:	3301      	adds	r3, #1
 800d98e:	fbb4 f3f3 	udiv	r3, r4, r3
 800d992:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800d994:	68fb      	ldr	r3, [r7, #12]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3714      	adds	r7, #20
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd90      	pop	{r4, r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	0802e04c 	.word	0x0802e04c
 800d9a4:	00f42400 	.word	0x00f42400
 800d9a8:	01e84800 	.word	0x01e84800

0800d9ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d9ac:	b598      	push	{r3, r4, r7, lr}
 800d9ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800d9b0:	f7ff ff90 	bl	800d8d4 <HAL_RCC_GetSysClockFreq>
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	f7ff f9e9 	bl	800cd8c <LL_RCC_GetAHBPrescaler>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	091b      	lsrs	r3, r3, #4
 800d9be:	f003 030f 	and.w	r3, r3, #15
 800d9c2:	4a03      	ldr	r2, [pc, #12]	; (800d9d0 <HAL_RCC_GetHCLKFreq+0x24>)
 800d9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	bd98      	pop	{r3, r4, r7, pc}
 800d9d0:	0802dfec 	.word	0x0802dfec

0800d9d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d9d4:	b598      	push	{r3, r4, r7, lr}
 800d9d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800d9d8:	f7ff ffe8 	bl	800d9ac <HAL_RCC_GetHCLKFreq>
 800d9dc:	4604      	mov	r4, r0
 800d9de:	f7ff f9ef 	bl	800cdc0 <LL_RCC_GetAPB1Prescaler>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	0a1b      	lsrs	r3, r3, #8
 800d9e6:	f003 0307 	and.w	r3, r3, #7
 800d9ea:	4a04      	ldr	r2, [pc, #16]	; (800d9fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800d9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9f0:	f003 031f 	and.w	r3, r3, #31
 800d9f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	bd98      	pop	{r3, r4, r7, pc}
 800d9fc:	0802e02c 	.word	0x0802e02c

0800da00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800da00:	b598      	push	{r3, r4, r7, lr}
 800da02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800da04:	f7ff ffd2 	bl	800d9ac <HAL_RCC_GetHCLKFreq>
 800da08:	4604      	mov	r4, r0
 800da0a:	f7ff f9e5 	bl	800cdd8 <LL_RCC_GetAPB2Prescaler>
 800da0e:	4603      	mov	r3, r0
 800da10:	0adb      	lsrs	r3, r3, #11
 800da12:	f003 0307 	and.w	r3, r3, #7
 800da16:	4a04      	ldr	r2, [pc, #16]	; (800da28 <HAL_RCC_GetPCLK2Freq+0x28>)
 800da18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da1c:	f003 031f 	and.w	r3, r3, #31
 800da20:	fa24 f303 	lsr.w	r3, r4, r3
}
 800da24:	4618      	mov	r0, r3
 800da26:	bd98      	pop	{r3, r4, r7, pc}
 800da28:	0802e02c 	.word	0x0802e02c

0800da2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800da2c:	b590      	push	{r4, r7, lr}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2bb0      	cmp	r3, #176	; 0xb0
 800da38:	d903      	bls.n	800da42 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800da3a:	4b15      	ldr	r3, [pc, #84]	; (800da90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800da3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	e007      	b.n	800da52 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	091b      	lsrs	r3, r3, #4
 800da46:	f003 030f 	and.w	r3, r3, #15
 800da4a:	4a11      	ldr	r2, [pc, #68]	; (800da90 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800da4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da50:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800da52:	f7ff f9a7 	bl	800cda4 <LL_RCC_GetAHB4Prescaler>
 800da56:	4603      	mov	r3, r0
 800da58:	091b      	lsrs	r3, r3, #4
 800da5a:	f003 030f 	and.w	r3, r3, #15
 800da5e:	4a0d      	ldr	r2, [pc, #52]	; (800da94 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800da60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	fbb2 f3f3 	udiv	r3, r2, r3
 800da6a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	4a0a      	ldr	r2, [pc, #40]	; (800da98 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800da70:	fba2 2303 	umull	r2, r3, r2, r3
 800da74:	0c9c      	lsrs	r4, r3, #18
 800da76:	f7fe fef5 	bl	800c864 <HAL_PWREx_GetVoltageRange>
 800da7a:	4603      	mov	r3, r0
 800da7c:	4619      	mov	r1, r3
 800da7e:	4620      	mov	r0, r4
 800da80:	f000 f80c 	bl	800da9c <RCC_SetFlashLatency>
 800da84:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800da86:	4618      	mov	r0, r3
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd90      	pop	{r4, r7, pc}
 800da8e:	bf00      	nop
 800da90:	0802e04c 	.word	0x0802e04c
 800da94:	0802dfec 	.word	0x0802dfec
 800da98:	431bde83 	.word	0x431bde83

0800da9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800da9c:	b590      	push	{r4, r7, lr}
 800da9e:	b093      	sub	sp, #76	; 0x4c
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800daa6:	4b37      	ldr	r3, [pc, #220]	; (800db84 <RCC_SetFlashLatency+0xe8>)
 800daa8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800daac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800daae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800dab2:	4a35      	ldr	r2, [pc, #212]	; (800db88 <RCC_SetFlashLatency+0xec>)
 800dab4:	f107 031c 	add.w	r3, r7, #28
 800dab8:	ca07      	ldmia	r2, {r0, r1, r2}
 800daba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800dabe:	4b33      	ldr	r3, [pc, #204]	; (800db8c <RCC_SetFlashLatency+0xf0>)
 800dac0:	f107 040c 	add.w	r4, r7, #12
 800dac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800daca:	2300      	movs	r3, #0
 800dacc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dad4:	d11a      	bne.n	800db0c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800dad6:	2300      	movs	r3, #0
 800dad8:	643b      	str	r3, [r7, #64]	; 0x40
 800dada:	e013      	b.n	800db04 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800dadc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	3348      	adds	r3, #72	; 0x48
 800dae2:	443b      	add	r3, r7
 800dae4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	429a      	cmp	r2, r3
 800daec:	d807      	bhi.n	800dafe <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800daee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	3348      	adds	r3, #72	; 0x48
 800daf4:	443b      	add	r3, r7
 800daf6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800dafa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800dafc:	e020      	b.n	800db40 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800dafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db00:	3301      	adds	r3, #1
 800db02:	643b      	str	r3, [r7, #64]	; 0x40
 800db04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db06:	2b03      	cmp	r3, #3
 800db08:	d9e8      	bls.n	800dadc <RCC_SetFlashLatency+0x40>
 800db0a:	e019      	b.n	800db40 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800db0c:	2300      	movs	r3, #0
 800db0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db10:	e013      	b.n	800db3a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800db12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	3348      	adds	r3, #72	; 0x48
 800db18:	443b      	add	r3, r7
 800db1a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	429a      	cmp	r2, r3
 800db22:	d807      	bhi.n	800db34 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800db24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	3348      	adds	r3, #72	; 0x48
 800db2a:	443b      	add	r3, r7
 800db2c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800db30:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800db32:	e005      	b.n	800db40 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800db34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db36:	3301      	adds	r3, #1
 800db38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	d9e8      	bls.n	800db12 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800db40:	4b13      	ldr	r3, [pc, #76]	; (800db90 <RCC_SetFlashLatency+0xf4>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f023 0207 	bic.w	r2, r3, #7
 800db48:	4911      	ldr	r1, [pc, #68]	; (800db90 <RCC_SetFlashLatency+0xf4>)
 800db4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db4c:	4313      	orrs	r3, r2
 800db4e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800db50:	f7fc ff56 	bl	800aa00 <HAL_GetTick>
 800db54:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800db56:	e008      	b.n	800db6a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800db58:	f7fc ff52 	bl	800aa00 <HAL_GetTick>
 800db5c:	4602      	mov	r2, r0
 800db5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db60:	1ad3      	subs	r3, r2, r3
 800db62:	2b02      	cmp	r3, #2
 800db64:	d901      	bls.n	800db6a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800db66:	2303      	movs	r3, #3
 800db68:	e007      	b.n	800db7a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800db6a:	4b09      	ldr	r3, [pc, #36]	; (800db90 <RCC_SetFlashLatency+0xf4>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f003 0307 	and.w	r3, r3, #7
 800db72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db74:	429a      	cmp	r2, r3
 800db76:	d1ef      	bne.n	800db58 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	374c      	adds	r7, #76	; 0x4c
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd90      	pop	{r4, r7, pc}
 800db82:	bf00      	nop
 800db84:	0801872c 	.word	0x0801872c
 800db88:	0801873c 	.word	0x0801873c
 800db8c:	08018748 	.word	0x08018748
 800db90:	58004000 	.word	0x58004000

0800db94 <LL_RCC_LSE_IsEnabled>:
{
 800db94:	b480      	push	{r7}
 800db96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800db98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dba0:	f003 0301 	and.w	r3, r3, #1
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d101      	bne.n	800dbac <LL_RCC_LSE_IsEnabled+0x18>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e000      	b.n	800dbae <LL_RCC_LSE_IsEnabled+0x1a>
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <LL_RCC_LSE_IsReady>:
{
 800dbb8:	b480      	push	{r7}
 800dbba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800dbbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbc4:	f003 0302 	and.w	r3, r3, #2
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d101      	bne.n	800dbd0 <LL_RCC_LSE_IsReady+0x18>
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e000      	b.n	800dbd2 <LL_RCC_LSE_IsReady+0x1a>
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr

0800dbdc <LL_RCC_SetRFWKPClockSource>:
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800dbe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800dbf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800dbfc:	bf00      	nop
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <LL_RCC_SetSMPSClockSource>:
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800dc10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc16:	f023 0203 	bic.w	r2, r3, #3
 800dc1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4313      	orrs	r3, r2
 800dc22:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dc24:	bf00      	nop
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <LL_RCC_SetSMPSPrescaler>:
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800dc38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dc42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dc4c:	bf00      	nop
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <LL_RCC_SetUSARTClockSource>:
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800dc60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc68:	f023 0203 	bic.w	r2, r3, #3
 800dc6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800dc78:	bf00      	nop
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <LL_RCC_SetLPUARTClockSource>:
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800dc8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dc98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <LL_RCC_SetI2CClockSource>:
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800dcb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dcbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	091b      	lsrs	r3, r3, #4
 800dcc4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800dcc8:	43db      	mvns	r3, r3
 800dcca:	401a      	ands	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	011b      	lsls	r3, r3, #4
 800dcd0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800dcd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800dcde:	bf00      	nop
 800dce0:	370c      	adds	r7, #12
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <LL_RCC_SetLPTIMClockSource>:
{
 800dcea:	b480      	push	{r7}
 800dcec:	b083      	sub	sp, #12
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800dcf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dcf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	0c1b      	lsrs	r3, r3, #16
 800dcfe:	041b      	lsls	r3, r3, #16
 800dd00:	43db      	mvns	r3, r3
 800dd02:	401a      	ands	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	041b      	lsls	r3, r3, #16
 800dd08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800dd12:	bf00      	nop
 800dd14:	370c      	adds	r7, #12
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr

0800dd1e <LL_RCC_SetSAIClockSource>:
{
 800dd1e:	b480      	push	{r7}
 800dd20:	b083      	sub	sp, #12
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800dd26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dd32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800dd3e:	bf00      	nop
 800dd40:	370c      	adds	r7, #12
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr

0800dd4a <LL_RCC_SetRNGClockSource>:
{
 800dd4a:	b480      	push	{r7}
 800dd4c:	b083      	sub	sp, #12
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800dd52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd5a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800dd5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800dd6a:	bf00      	nop
 800dd6c:	370c      	adds	r7, #12
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <LL_RCC_SetCLK48ClockSource>:
{
 800dd76:	b480      	push	{r7}
 800dd78:	b083      	sub	sp, #12
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800dd7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dd8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800dd96:	bf00      	nop
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <LL_RCC_SetUSBClockSource>:
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b082      	sub	sp, #8
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f7ff ffe3 	bl	800dd76 <LL_RCC_SetCLK48ClockSource>
}
 800ddb0:	bf00      	nop
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <LL_RCC_SetADCClockSource>:
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800ddc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ddc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ddcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <LL_RCC_SetRTCClockSource>:
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800ddec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ddf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ddf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4313      	orrs	r3, r2
 800de00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800de04:	bf00      	nop
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <LL_RCC_GetRTCClockSource>:
{
 800de10:	b480      	push	{r7}
 800de12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800de14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800de20:	4618      	mov	r0, r3
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr

0800de2a <LL_RCC_ForceBackupDomainReset>:
{
 800de2a:	b480      	push	{r7}
 800de2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800de2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800de3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800de42:	bf00      	nop
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <LL_RCC_ReleaseBackupDomainReset>:
{
 800de4c:	b480      	push	{r7}
 800de4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800de50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800de5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800de64:	bf00      	nop
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <LL_RCC_PLLSAI1_Enable>:
{
 800de6e:	b480      	push	{r7}
 800de70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800de72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800de7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de80:	6013      	str	r3, [r2, #0]
}
 800de82:	bf00      	nop
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <LL_RCC_PLLSAI1_Disable>:
{
 800de8c:	b480      	push	{r7}
 800de8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800de90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800de9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800de9e:	6013      	str	r3, [r2, #0]
}
 800dea0:	bf00      	nop
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <LL_RCC_PLLSAI1_IsReady>:
{
 800deaa:	b480      	push	{r7}
 800deac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800deae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800deb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800debc:	d101      	bne.n	800dec2 <LL_RCC_PLLSAI1_IsReady+0x18>
 800debe:	2301      	movs	r3, #1
 800dec0:	e000      	b.n	800dec4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr

0800dece <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b088      	sub	sp, #32
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800ded6:	2300      	movs	r3, #0
 800ded8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800deda:	2300      	movs	r3, #0
 800dedc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d034      	beq.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800def2:	d021      	beq.n	800df38 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800def4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800def8:	d81b      	bhi.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800defa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800defe:	d01d      	beq.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800df00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800df04:	d815      	bhi.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00b      	beq.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800df0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df0e:	d110      	bne.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800df10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800df1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df1e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800df20:	e00d      	b.n	800df3e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	3304      	adds	r3, #4
 800df26:	4618      	mov	r0, r3
 800df28:	f000 f947 	bl	800e1ba <RCCEx_PLLSAI1_ConfigNP>
 800df2c:	4603      	mov	r3, r0
 800df2e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800df30:	e005      	b.n	800df3e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	77fb      	strb	r3, [r7, #31]
        break;
 800df36:	e002      	b.n	800df3e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800df38:	bf00      	nop
 800df3a:	e000      	b.n	800df3e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800df3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df3e:	7ffb      	ldrb	r3, [r7, #31]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d105      	bne.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df48:	4618      	mov	r0, r3
 800df4a:	f7ff fee8 	bl	800dd1e <LL_RCC_SetSAIClockSource>
 800df4e:	e001      	b.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df50:	7ffb      	ldrb	r3, [r7, #31]
 800df52:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d046      	beq.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800df60:	f7ff ff56 	bl	800de10 <LL_RCC_GetRTCClockSource>
 800df64:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df6a:	69ba      	ldr	r2, [r7, #24]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d03c      	beq.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800df70:	f7fe fc68 	bl	800c844 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d105      	bne.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df7e:	4618      	mov	r0, r3
 800df80:	f7ff ff30 	bl	800dde4 <LL_RCC_SetRTCClockSource>
 800df84:	e02e      	b.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800df86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800df8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df8e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800df90:	f7ff ff4b 	bl	800de2a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800df94:	f7ff ff5a 	bl	800de4c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800dfa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800dfb0:	f7ff fdf0 	bl	800db94 <LL_RCC_LSE_IsEnabled>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d114      	bne.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dfba:	f7fc fd21 	bl	800aa00 <HAL_GetTick>
 800dfbe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800dfc0:	e00b      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dfc2:	f7fc fd1d 	bl	800aa00 <HAL_GetTick>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	1ad3      	subs	r3, r2, r3
 800dfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d902      	bls.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800dfd4:	2303      	movs	r3, #3
 800dfd6:	77fb      	strb	r3, [r7, #31]
              break;
 800dfd8:	e004      	b.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800dfda:	f7ff fded 	bl	800dbb8 <LL_RCC_LSE_IsReady>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d1ee      	bne.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800dfe4:	7ffb      	ldrb	r3, [r7, #31]
 800dfe6:	77bb      	strb	r3, [r7, #30]
 800dfe8:	e001      	b.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfea:	7ffb      	ldrb	r3, [r7, #31]
 800dfec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d004      	beq.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	699b      	ldr	r3, [r3, #24]
 800dffe:	4618      	mov	r0, r3
 800e000:	f7ff fe2a 	bl	800dc58 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 0302 	and.w	r3, r3, #2
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d004      	beq.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	4618      	mov	r0, r3
 800e016:	f7ff fe35 	bl	800dc84 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f003 0310 	and.w	r3, r3, #16
 800e022:	2b00      	cmp	r3, #0
 800e024:	d004      	beq.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7ff fe5d 	bl	800dcea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f003 0320 	and.w	r3, r3, #32
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d004      	beq.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff fe52 	bl	800dcea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f003 0304 	and.w	r3, r3, #4
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d004      	beq.n	800e05c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a1b      	ldr	r3, [r3, #32]
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff fe2a 	bl	800dcb0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f003 0308 	and.w	r3, r3, #8
 800e064:	2b00      	cmp	r3, #0
 800e066:	d004      	beq.n	800e072 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7ff fe1f 	bl	800dcb0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d022      	beq.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e082:	4618      	mov	r0, r3
 800e084:	f7ff fe8d 	bl	800dda2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e08c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e090:	d107      	bne.n	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800e092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e09c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e0a0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e0aa:	d10b      	bne.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3304      	adds	r3, #4
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f000 f8dd 	bl	800e270 <RCCEx_PLLSAI1_ConfigNQ>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e0ba:	7ffb      	ldrb	r3, [r7, #31]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800e0c0:	7ffb      	ldrb	r3, [r7, #31]
 800e0c2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d02b      	beq.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0d8:	d008      	beq.n	800e0ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0e2:	d003      	beq.n	800e0ec <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d105      	bne.n	800e0f8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7ff fe2a 	bl	800dd4a <LL_RCC_SetRNGClockSource>
 800e0f6:	e00a      	b.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0x240>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e100:	60fb      	str	r3, [r7, #12]
 800e102:	2000      	movs	r0, #0
 800e104:	f7ff fe21 	bl	800dd4a <LL_RCC_SetRNGClockSource>
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f7ff fe34 	bl	800dd76 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e112:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800e116:	d107      	bne.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800e118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e126:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e130:	2b00      	cmp	r3, #0
 800e132:	d022      	beq.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e138:	4618      	mov	r0, r3
 800e13a:	f7ff fe3d 	bl	800ddb8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e146:	d107      	bne.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e156:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e15c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e160:	d10b      	bne.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3304      	adds	r3, #4
 800e166:	4618      	mov	r0, r3
 800e168:	f000 f8dd 	bl	800e326 <RCCEx_PLLSAI1_ConfigNR>
 800e16c:	4603      	mov	r3, r0
 800e16e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e170:	7ffb      	ldrb	r3, [r7, #31]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d001      	beq.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800e176:	7ffb      	ldrb	r3, [r7, #31]
 800e178:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e182:	2b00      	cmp	r3, #0
 800e184:	d004      	beq.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7ff fd26 	bl	800dbdc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d009      	beq.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7ff fd45 	bl	800dc30 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7ff fd2c 	bl	800dc08 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800e1b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3720      	adds	r7, #32
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b084      	sub	sp, #16
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e1c6:	f7ff fe61 	bl	800de8c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e1ca:	f7fc fc19 	bl	800aa00 <HAL_GetTick>
 800e1ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e1d0:	e009      	b.n	800e1e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e1d2:	f7fc fc15 	bl	800aa00 <HAL_GetTick>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	2b02      	cmp	r3, #2
 800e1de:	d902      	bls.n	800e1e6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800e1e0:	2303      	movs	r3, #3
 800e1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e1e4:	e004      	b.n	800e1f0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e1e6:	f7ff fe60 	bl	800deaa <LL_RCC_PLLSAI1_IsReady>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d1f0      	bne.n	800e1d2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800e1f0:	7bfb      	ldrb	r3, [r7, #15]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d137      	bne.n	800e266 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e1f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	021b      	lsls	r3, r3, #8
 800e206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e20a:	4313      	orrs	r3, r2
 800e20c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800e20e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e220:	4313      	orrs	r3, r2
 800e222:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e224:	f7ff fe23 	bl	800de6e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e228:	f7fc fbea 	bl	800aa00 <HAL_GetTick>
 800e22c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e22e:	e009      	b.n	800e244 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e230:	f7fc fbe6 	bl	800aa00 <HAL_GetTick>
 800e234:	4602      	mov	r2, r0
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	d902      	bls.n	800e244 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800e23e:	2303      	movs	r3, #3
 800e240:	73fb      	strb	r3, [r7, #15]
        break;
 800e242:	e004      	b.n	800e24e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e244:	f7ff fe31 	bl	800deaa <LL_RCC_PLLSAI1_IsReady>
 800e248:	4603      	mov	r3, r0
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d1f0      	bne.n	800e230 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800e24e:	7bfb      	ldrb	r3, [r7, #15]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d108      	bne.n	800e266 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e258:	691a      	ldr	r2, [r3, #16]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	691b      	ldr	r3, [r3, #16]
 800e25e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e262:	4313      	orrs	r3, r2
 800e264:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e266:	7bfb      	ldrb	r3, [r7, #15]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e27c:	f7ff fe06 	bl	800de8c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e280:	f7fc fbbe 	bl	800aa00 <HAL_GetTick>
 800e284:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e286:	e009      	b.n	800e29c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e288:	f7fc fbba 	bl	800aa00 <HAL_GetTick>
 800e28c:	4602      	mov	r2, r0
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	2b02      	cmp	r3, #2
 800e294:	d902      	bls.n	800e29c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800e296:	2303      	movs	r3, #3
 800e298:	73fb      	strb	r3, [r7, #15]
      break;
 800e29a:	e004      	b.n	800e2a6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e29c:	f7ff fe05 	bl	800deaa <LL_RCC_PLLSAI1_IsReady>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1f0      	bne.n	800e288 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800e2a6:	7bfb      	ldrb	r3, [r7, #15]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d137      	bne.n	800e31c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e2ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	021b      	lsls	r3, r3, #8
 800e2bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800e2c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e2c8:	691b      	ldr	r3, [r3, #16]
 800e2ca:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e2da:	f7ff fdc8 	bl	800de6e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2de:	f7fc fb8f 	bl	800aa00 <HAL_GetTick>
 800e2e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e2e4:	e009      	b.n	800e2fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e2e6:	f7fc fb8b 	bl	800aa00 <HAL_GetTick>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	d902      	bls.n	800e2fa <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	73fb      	strb	r3, [r7, #15]
        break;
 800e2f8:	e004      	b.n	800e304 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e2fa:	f7ff fdd6 	bl	800deaa <LL_RCC_PLLSAI1_IsReady>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b01      	cmp	r3, #1
 800e302:	d1f0      	bne.n	800e2e6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800e304:	7bfb      	ldrb	r3, [r7, #15]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d108      	bne.n	800e31c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e30a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e30e:	691a      	ldr	r2, [r3, #16]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e318:	4313      	orrs	r3, r2
 800e31a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b084      	sub	sp, #16
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e32e:	2300      	movs	r3, #0
 800e330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e332:	f7ff fdab 	bl	800de8c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e336:	f7fc fb63 	bl	800aa00 <HAL_GetTick>
 800e33a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e33c:	e009      	b.n	800e352 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e33e:	f7fc fb5f 	bl	800aa00 <HAL_GetTick>
 800e342:	4602      	mov	r2, r0
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	1ad3      	subs	r3, r2, r3
 800e348:	2b02      	cmp	r3, #2
 800e34a:	d902      	bls.n	800e352 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800e34c:	2303      	movs	r3, #3
 800e34e:	73fb      	strb	r3, [r7, #15]
      break;
 800e350:	e004      	b.n	800e35c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e352:	f7ff fdaa 	bl	800deaa <LL_RCC_PLLSAI1_IsReady>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1f0      	bne.n	800e33e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800e35c:	7bfb      	ldrb	r3, [r7, #15]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d137      	bne.n	800e3d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e366:	691b      	ldr	r3, [r3, #16]
 800e368:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	021b      	lsls	r3, r3, #8
 800e372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e376:	4313      	orrs	r3, r2
 800e378:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800e37a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e38c:	4313      	orrs	r3, r2
 800e38e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e390:	f7ff fd6d 	bl	800de6e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e394:	f7fc fb34 	bl	800aa00 <HAL_GetTick>
 800e398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e39a:	e009      	b.n	800e3b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e39c:	f7fc fb30 	bl	800aa00 <HAL_GetTick>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d902      	bls.n	800e3b0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	73fb      	strb	r3, [r7, #15]
        break;
 800e3ae:	e004      	b.n	800e3ba <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e3b0:	f7ff fd7b 	bl	800deaa <LL_RCC_PLLSAI1_IsReady>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d1f0      	bne.n	800e39c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800e3ba:	7bfb      	ldrb	r3, [r7, #15]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d108      	bne.n	800e3d2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e3c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3c4:	691a      	ldr	r2, [r3, #16]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	691b      	ldr	r3, [r3, #16]
 800e3ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d101      	bne.n	800e3ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e027      	b.n	800e43e <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	7a5b      	ldrb	r3, [r3, #9]
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d105      	bne.n	800e404 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7f6 fa0c 	bl	800481c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2202      	movs	r2, #2
 800e408:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f023 0120 	bic.w	r1, r3, #32
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	685a      	ldr	r2, [r3, #4]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	430a      	orrs	r2, r1
 800e41e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f042 0204 	orr.w	r2, r2, #4
 800e42e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2201      	movs	r2, #1
 800e434:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
	...

0800e448 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d101      	bne.n	800e45a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e09f      	b.n	800e59a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e460:	b2db      	uxtb	r3, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	d106      	bne.n	800e474 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7f6 f9fe 	bl	8004870 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2202      	movs	r2, #2
 800e478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e47c:	4b49      	ldr	r3, [pc, #292]	; (800e5a4 <HAL_RTC_Init+0x15c>)
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	f003 0310 	and.w	r3, r3, #16
 800e484:	2b10      	cmp	r3, #16
 800e486:	d07e      	beq.n	800e586 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	22ca      	movs	r2, #202	; 0xca
 800e48e:	625a      	str	r2, [r3, #36]	; 0x24
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2253      	movs	r2, #83	; 0x53
 800e496:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f8ab 	bl	800e5f4 <RTC_EnterInitMode>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d00a      	beq.n	800e4ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	22ff      	movs	r2, #255	; 0xff
 800e4aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2204      	movs	r2, #4
 800e4b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	73fb      	strb	r3, [r7, #15]
 800e4b8:	e067      	b.n	800e58a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	6812      	ldr	r2, [r2, #0]
 800e4c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	6899      	ldr	r1, [r3, #8]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685a      	ldr	r2, [r3, #4]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	691b      	ldr	r3, [r3, #16]
 800e4dc:	431a      	orrs	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	699b      	ldr	r3, [r3, #24]
 800e4e2:	431a      	orrs	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	430a      	orrs	r2, r1
 800e4ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	68d2      	ldr	r2, [r2, #12]
 800e4f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	6919      	ldr	r1, [r3, #16]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	689b      	ldr	r3, [r3, #8]
 800e500:	041a      	lsls	r2, r3, #16
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	430a      	orrs	r2, r1
 800e508:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	68da      	ldr	r2, [r3, #12]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e518:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f022 0203 	bic.w	r2, r2, #3
 800e528:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	69da      	ldr	r2, [r3, #28]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	695b      	ldr	r3, [r3, #20]
 800e538:	431a      	orrs	r2, r3
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	430a      	orrs	r2, r1
 800e540:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	689b      	ldr	r3, [r3, #8]
 800e548:	f003 0320 	and.w	r3, r3, #32
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d113      	bne.n	800e578 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f000 f829 	bl	800e5a8 <HAL_RTC_WaitForSynchro>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00d      	beq.n	800e578 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	22ff      	movs	r2, #255	; 0xff
 800e562:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2204      	movs	r2, #4
 800e568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2200      	movs	r2, #0
 800e570:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800e574:	2301      	movs	r3, #1
 800e576:	e010      	b.n	800e59a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	22ff      	movs	r2, #255	; 0xff
 800e57e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800e580:	2300      	movs	r3, #0
 800e582:	73fb      	strb	r3, [r7, #15]
 800e584:	e001      	b.n	800e58a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800e58a:	7bfb      	ldrb	r3, [r7, #15]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d103      	bne.n	800e598 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800e598:	7bfb      	ldrb	r3, [r7, #15]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	40002800 	.word	0x40002800

0800e5a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68da      	ldr	r2, [r3, #12]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e5be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800e5c0:	f7fc fa1e 	bl	800aa00 <HAL_GetTick>
 800e5c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e5c6:	e009      	b.n	800e5dc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e5c8:	f7fc fa1a 	bl	800aa00 <HAL_GetTick>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5d6:	d901      	bls.n	800e5dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800e5d8:	2303      	movs	r3, #3
 800e5da:	e007      	b.n	800e5ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	f003 0320 	and.w	r3, r3, #32
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d0ee      	beq.n	800e5c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3710      	adds	r7, #16
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e606:	2b00      	cmp	r3, #0
 800e608:	d119      	bne.n	800e63e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f04f 32ff 	mov.w	r2, #4294967295
 800e612:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e614:	f7fc f9f4 	bl	800aa00 <HAL_GetTick>
 800e618:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e61a:	e009      	b.n	800e630 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e61c:	f7fc f9f0 	bl	800aa00 <HAL_GetTick>
 800e620:	4602      	mov	r2, r0
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e62a:	d901      	bls.n	800e630 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800e62c:	2303      	movs	r3, #3
 800e62e:	e007      	b.n	800e640 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	68db      	ldr	r3, [r3, #12]
 800e636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0ee      	beq.n	800e61c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d101      	bne.n	800e662 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800e65e:	2302      	movs	r3, #2
 800e660:	e0a8      	b.n	800e7b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2201      	movs	r2, #1
 800e666:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2202      	movs	r2, #2
 800e66e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	22ca      	movs	r2, #202	; 0xca
 800e678:	625a      	str	r2, [r3, #36]	; 0x24
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2253      	movs	r2, #83	; 0x53
 800e680:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d020      	beq.n	800e6d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800e690:	f7fc f9b6 	bl	800aa00 <HAL_GetTick>
 800e694:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800e696:	e015      	b.n	800e6c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e698:	f7fc f9b2 	bl	800aa00 <HAL_GetTick>
 800e69c:	4602      	mov	r2, r0
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e6a6:	d90d      	bls.n	800e6c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	22ff      	movs	r2, #255	; 0xff
 800e6ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2203      	movs	r2, #3
 800e6b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800e6c0:	2303      	movs	r3, #3
 800e6c2:	e077      	b.n	800e7b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	f003 0304 	and.w	r3, r3, #4
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1e2      	bne.n	800e698 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	689a      	ldr	r2, [r3, #8]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6e0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	68db      	ldr	r3, [r3, #12]
 800e6e8:	b2da      	uxtb	r2, r3
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800e6f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800e6f4:	f7fc f984 	bl	800aa00 <HAL_GetTick>
 800e6f8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800e6fa:	e015      	b.n	800e728 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e6fc:	f7fc f980 	bl	800aa00 <HAL_GetTick>
 800e700:	4602      	mov	r2, r0
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	1ad3      	subs	r3, r2, r3
 800e706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e70a:	d90d      	bls.n	800e728 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	22ff      	movs	r2, #255	; 0xff
 800e712:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2203      	movs	r2, #3
 800e718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800e724:	2303      	movs	r3, #3
 800e726:	e045      	b.n	800e7b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	f003 0304 	and.w	r3, r3, #4
 800e732:	2b00      	cmp	r3, #0
 800e734:	d0e2      	beq.n	800e6fc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	689a      	ldr	r2, [r3, #8]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f022 0207 	bic.w	r2, r2, #7
 800e74c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	6899      	ldr	r1, [r3, #8]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	430a      	orrs	r2, r1
 800e75c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800e75e:	4b17      	ldr	r3, [pc, #92]	; (800e7bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800e760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e764:	4a15      	ldr	r2, [pc, #84]	; (800e7bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800e766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e76a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800e76e:	4b13      	ldr	r3, [pc, #76]	; (800e7bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4a12      	ldr	r2, [pc, #72]	; (800e7bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800e774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e778:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	689a      	ldr	r2, [r3, #8]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e788:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	689a      	ldr	r2, [r3, #8]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e798:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	22ff      	movs	r2, #255	; 0xff
 800e7a0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3718      	adds	r7, #24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	58000800 	.word	0x58000800

0800e7c0 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d101      	bne.n	800e7d6 <HAL_RTCEx_EnableBypassShadow+0x16>
 800e7d2:	2302      	movs	r3, #2
 800e7d4:	e024      	b.n	800e820 <HAL_RTCEx_EnableBypassShadow+0x60>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2202      	movs	r2, #2
 800e7e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	22ca      	movs	r2, #202	; 0xca
 800e7ec:	625a      	str	r2, [r3, #36]	; 0x24
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	2253      	movs	r2, #83	; 0x53
 800e7f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	689a      	ldr	r2, [r3, #8]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f042 0220 	orr.w	r2, r2, #32
 800e804:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	22ff      	movs	r2, #255	; 0xff
 800e80c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2201      	movs	r2, #1
 800e812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800e81e:	2300      	movs	r3, #0
}
 800e820:	4618      	mov	r0, r3
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <LL_RCC_GetUSARTClockSource>:
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800e834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e838:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4013      	ands	r3, r2
}
 800e840:	4618      	mov	r0, r3
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <LL_RCC_GetLPUARTClockSource>:
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800e854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e858:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4013      	ands	r3, r2
}
 800e860:	4618      	mov	r0, r3
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d101      	bne.n	800e87e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e87a:	2301      	movs	r3, #1
 800e87c:	e042      	b.n	800e904 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e884:	2b00      	cmp	r3, #0
 800e886:	d106      	bne.n	800e896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f7f5 fecd 	bl	8004630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2224      	movs	r2, #36	; 0x24
 800e89a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f022 0201 	bic.w	r2, r2, #1
 800e8ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d002      	beq.n	800e8bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 fe60 	bl	800f57c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 fc35 	bl	800f12c <UART_SetConfig>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d101      	bne.n	800e8cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e01b      	b.n	800e904 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	685a      	ldr	r2, [r3, #4]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e8da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	689a      	ldr	r2, [r3, #8]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e8ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f042 0201 	orr.w	r2, r2, #1
 800e8fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 fedf 	bl	800f6c0 <UART_CheckIdleState>
 800e902:	4603      	mov	r3, r0
}
 800e904:	4618      	mov	r0, r3
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b08a      	sub	sp, #40	; 0x28
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	4613      	mov	r3, r2
 800e918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e920:	2b20      	cmp	r3, #32
 800e922:	d137      	bne.n	800e994 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d002      	beq.n	800e930 <HAL_UART_Receive_IT+0x24>
 800e92a:	88fb      	ldrh	r3, [r7, #6]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d101      	bne.n	800e934 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e930:	2301      	movs	r3, #1
 800e932:	e030      	b.n	800e996 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2200      	movs	r2, #0
 800e938:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a18      	ldr	r2, [pc, #96]	; (800e9a0 <HAL_UART_Receive_IT+0x94>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d01f      	beq.n	800e984 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d018      	beq.n	800e984 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	e853 3f00 	ldrex	r3, [r3]
 800e95e:	613b      	str	r3, [r7, #16]
   return(result);
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e966:	627b      	str	r3, [r7, #36]	; 0x24
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	461a      	mov	r2, r3
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	623b      	str	r3, [r7, #32]
 800e972:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e974:	69f9      	ldr	r1, [r7, #28]
 800e976:	6a3a      	ldr	r2, [r7, #32]
 800e978:	e841 2300 	strex	r3, r2, [r1]
 800e97c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d1e6      	bne.n	800e952 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e984:	88fb      	ldrh	r3, [r7, #6]
 800e986:	461a      	mov	r2, r3
 800e988:	68b9      	ldr	r1, [r7, #8]
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f000 ffb0 	bl	800f8f0 <UART_Start_Receive_IT>
 800e990:	4603      	mov	r3, r0
 800e992:	e000      	b.n	800e996 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e994:	2302      	movs	r3, #2
  }
}
 800e996:	4618      	mov	r0, r3
 800e998:	3728      	adds	r7, #40	; 0x28
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	40008000 	.word	0x40008000

0800e9a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08a      	sub	sp, #40	; 0x28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9b8:	2b20      	cmp	r3, #32
 800e9ba:	d167      	bne.n	800ea8c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d002      	beq.n	800e9c8 <HAL_UART_Transmit_DMA+0x24>
 800e9c2:	88fb      	ldrh	r3, [r7, #6]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d101      	bne.n	800e9cc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	e060      	b.n	800ea8e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	88fa      	ldrh	r2, [r7, #6]
 800e9d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	88fa      	ldrh	r2, [r7, #6]
 800e9de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	2221      	movs	r2, #33	; 0x21
 800e9ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d028      	beq.n	800ea4c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9fe:	4a26      	ldr	r2, [pc, #152]	; (800ea98 <HAL_UART_Transmit_DMA+0xf4>)
 800ea00:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea06:	4a25      	ldr	r2, [pc, #148]	; (800ea9c <HAL_UART_Transmit_DMA+0xf8>)
 800ea08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea0e:	4a24      	ldr	r2, [pc, #144]	; (800eaa0 <HAL_UART_Transmit_DMA+0xfc>)
 800ea10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea16:	2200      	movs	r2, #0
 800ea18:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea22:	4619      	mov	r1, r3
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	3328      	adds	r3, #40	; 0x28
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	88fb      	ldrh	r3, [r7, #6]
 800ea2e:	f7fc fa59 	bl	800aee4 <HAL_DMA_Start_IT>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d009      	beq.n	800ea4c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2210      	movs	r2, #16
 800ea3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2220      	movs	r2, #32
 800ea44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	e020      	b.n	800ea8e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2240      	movs	r2, #64	; 0x40
 800ea52:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	3308      	adds	r3, #8
 800ea5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	e853 3f00 	ldrex	r3, [r3]
 800ea62:	613b      	str	r3, [r7, #16]
   return(result);
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	3308      	adds	r3, #8
 800ea72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea74:	623a      	str	r2, [r7, #32]
 800ea76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea78:	69f9      	ldr	r1, [r7, #28]
 800ea7a:	6a3a      	ldr	r2, [r7, #32]
 800ea7c:	e841 2300 	strex	r3, r2, [r1]
 800ea80:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1e5      	bne.n	800ea54 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	e000      	b.n	800ea8e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ea8c:	2302      	movs	r3, #2
  }
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3728      	adds	r7, #40	; 0x28
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	0800fc83 	.word	0x0800fc83
 800ea9c:	0800fd1d 	.word	0x0800fd1d
 800eaa0:	0800fd39 	.word	0x0800fd39

0800eaa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b0ba      	sub	sp, #232	; 0xe8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	69db      	ldr	r3, [r3, #28]
 800eab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eaca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eace:	f640 030f 	movw	r3, #2063	; 0x80f
 800ead2:	4013      	ands	r3, r2
 800ead4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ead8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d11b      	bne.n	800eb18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eae4:	f003 0320 	and.w	r3, r3, #32
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d015      	beq.n	800eb18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eaec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaf0:	f003 0320 	and.w	r3, r3, #32
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d105      	bne.n	800eb04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eaf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eafc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d009      	beq.n	800eb18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f000 82e3 	beq.w	800f0d4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	4798      	blx	r3
      }
      return;
 800eb16:	e2dd      	b.n	800f0d4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eb18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 8123 	beq.w	800ed68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eb22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eb26:	4b8d      	ldr	r3, [pc, #564]	; (800ed5c <HAL_UART_IRQHandler+0x2b8>)
 800eb28:	4013      	ands	r3, r2
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d106      	bne.n	800eb3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eb2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800eb32:	4b8b      	ldr	r3, [pc, #556]	; (800ed60 <HAL_UART_IRQHandler+0x2bc>)
 800eb34:	4013      	ands	r3, r2
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	f000 8116 	beq.w	800ed68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb40:	f003 0301 	and.w	r3, r3, #1
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d011      	beq.n	800eb6c <HAL_UART_IRQHandler+0xc8>
 800eb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00b      	beq.n	800eb6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb62:	f043 0201 	orr.w	r2, r3, #1
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb70:	f003 0302 	and.w	r3, r3, #2
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d011      	beq.n	800eb9c <HAL_UART_IRQHandler+0xf8>
 800eb78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb7c:	f003 0301 	and.w	r3, r3, #1
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00b      	beq.n	800eb9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2202      	movs	r2, #2
 800eb8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb92:	f043 0204 	orr.w	r2, r3, #4
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eba0:	f003 0304 	and.w	r3, r3, #4
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d011      	beq.n	800ebcc <HAL_UART_IRQHandler+0x128>
 800eba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebac:	f003 0301 	and.w	r3, r3, #1
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00b      	beq.n	800ebcc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2204      	movs	r2, #4
 800ebba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebc2:	f043 0202 	orr.w	r2, r3, #2
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ebcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebd0:	f003 0308 	and.w	r3, r3, #8
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d017      	beq.n	800ec08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ebd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebdc:	f003 0320 	and.w	r3, r3, #32
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d105      	bne.n	800ebf0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ebe4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ebe8:	4b5c      	ldr	r3, [pc, #368]	; (800ed5c <HAL_UART_IRQHandler+0x2b8>)
 800ebea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00b      	beq.n	800ec08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2208      	movs	r2, #8
 800ebf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebfe:	f043 0208 	orr.w	r2, r3, #8
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ec08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d012      	beq.n	800ec3a <HAL_UART_IRQHandler+0x196>
 800ec14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00c      	beq.n	800ec3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec30:	f043 0220 	orr.w	r2, r3, #32
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f000 8249 	beq.w	800f0d8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec4a:	f003 0320 	and.w	r3, r3, #32
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d013      	beq.n	800ec7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec56:	f003 0320 	and.w	r3, r3, #32
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d105      	bne.n	800ec6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d007      	beq.n	800ec7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d003      	beq.n	800ec7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec8e:	2b40      	cmp	r3, #64	; 0x40
 800ec90:	d005      	beq.n	800ec9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ec92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ec96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d054      	beq.n	800ed48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 ff89 	bl	800fbb6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	689b      	ldr	r3, [r3, #8]
 800ecaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecae:	2b40      	cmp	r3, #64	; 0x40
 800ecb0:	d146      	bne.n	800ed40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	3308      	adds	r3, #8
 800ecb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ecc0:	e853 3f00 	ldrex	r3, [r3]
 800ecc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ecc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	3308      	adds	r3, #8
 800ecda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ecde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ece2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ecea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ecee:	e841 2300 	strex	r3, r2, [r1]
 800ecf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ecf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1d9      	bne.n	800ecb2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d017      	beq.n	800ed38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed0e:	4a15      	ldr	r2, [pc, #84]	; (800ed64 <HAL_UART_IRQHandler+0x2c0>)
 800ed10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fc f9bd 	bl	800b098 <HAL_DMA_Abort_IT>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d019      	beq.n	800ed58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ed32:	4610      	mov	r0, r2
 800ed34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed36:	e00f      	b.n	800ed58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 f9e1 	bl	800f100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed3e:	e00b      	b.n	800ed58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 f9dd 	bl	800f100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed46:	e007      	b.n	800ed58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f000 f9d9 	bl	800f100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ed56:	e1bf      	b.n	800f0d8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed58:	bf00      	nop
    return;
 800ed5a:	e1bd      	b.n	800f0d8 <HAL_UART_IRQHandler+0x634>
 800ed5c:	10000001 	.word	0x10000001
 800ed60:	04000120 	.word	0x04000120
 800ed64:	0800fdb9 	.word	0x0800fdb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	f040 8153 	bne.w	800f018 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ed72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed76:	f003 0310 	and.w	r3, r3, #16
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 814c 	beq.w	800f018 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ed80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed84:	f003 0310 	and.w	r3, r3, #16
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f000 8145 	beq.w	800f018 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2210      	movs	r2, #16
 800ed94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eda0:	2b40      	cmp	r3, #64	; 0x40
 800eda2:	f040 80bb 	bne.w	800ef1c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800edb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f000 818f 	beq.w	800f0dc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800edc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800edc8:	429a      	cmp	r2, r3
 800edca:	f080 8187 	bcs.w	800f0dc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800edd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f003 0320 	and.w	r3, r3, #32
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f040 8087 	bne.w	800eefa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800edf8:	e853 3f00 	ldrex	r3, [r3]
 800edfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ee00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	461a      	mov	r2, r3
 800ee12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ee1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ee22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ee26:	e841 2300 	strex	r3, r2, [r1]
 800ee2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ee2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1da      	bne.n	800edec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	3308      	adds	r3, #8
 800ee3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee40:	e853 3f00 	ldrex	r3, [r3]
 800ee44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ee46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee48:	f023 0301 	bic.w	r3, r3, #1
 800ee4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	3308      	adds	r3, #8
 800ee56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ee5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ee5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ee62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ee66:	e841 2300 	strex	r3, r2, [r1]
 800ee6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ee6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d1e1      	bne.n	800ee36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	3308      	adds	r3, #8
 800ee78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee7c:	e853 3f00 	ldrex	r3, [r3]
 800ee80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ee82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	3308      	adds	r3, #8
 800ee92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ee96:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ee98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ee9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ee9e:	e841 2300 	strex	r3, r2, [r1]
 800eea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d1e3      	bne.n	800ee72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2220      	movs	r2, #32
 800eeae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eec0:	e853 3f00 	ldrex	r3, [r3]
 800eec4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eec8:	f023 0310 	bic.w	r3, r3, #16
 800eecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eeda:	65bb      	str	r3, [r7, #88]	; 0x58
 800eedc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eede:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eee2:	e841 2300 	strex	r3, r2, [r1]
 800eee6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d1e4      	bne.n	800eeb8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fc f870 	bl	800afda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2202      	movs	r2, #2
 800eefe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	1ad3      	subs	r3, r2, r3
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	4619      	mov	r1, r3
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 f8fd 	bl	800f114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef1a:	e0df      	b.n	800f0dc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	1ad3      	subs	r3, r2, r3
 800ef2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f000 80d1 	beq.w	800f0e0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800ef3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	f000 80cc 	beq.w	800f0e0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef50:	e853 3f00 	ldrex	r3, [r3]
 800ef54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	461a      	mov	r2, r3
 800ef66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef6a:	647b      	str	r3, [r7, #68]	; 0x44
 800ef6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef72:	e841 2300 	strex	r3, r2, [r1]
 800ef76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ef78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1e4      	bne.n	800ef48 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	3308      	adds	r3, #8
 800ef84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef88:	e853 3f00 	ldrex	r3, [r3]
 800ef8c:	623b      	str	r3, [r7, #32]
   return(result);
 800ef8e:	6a3b      	ldr	r3, [r7, #32]
 800ef90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ef94:	f023 0301 	bic.w	r3, r3, #1
 800ef98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	3308      	adds	r3, #8
 800efa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800efa6:	633a      	str	r2, [r7, #48]	; 0x30
 800efa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efae:	e841 2300 	strex	r3, r2, [r1]
 800efb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800efb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1e1      	bne.n	800ef7e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2220      	movs	r2, #32
 800efbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	e853 3f00 	ldrex	r3, [r3]
 800efda:	60fb      	str	r3, [r7, #12]
   return(result);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f023 0310 	bic.w	r3, r3, #16
 800efe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	461a      	mov	r2, r3
 800efec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eff0:	61fb      	str	r3, [r7, #28]
 800eff2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff4:	69b9      	ldr	r1, [r7, #24]
 800eff6:	69fa      	ldr	r2, [r7, #28]
 800eff8:	e841 2300 	strex	r3, r2, [r1]
 800effc:	617b      	str	r3, [r7, #20]
   return(result);
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1e4      	bne.n	800efce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2202      	movs	r2, #2
 800f008:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f00a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f00e:	4619      	mov	r1, r3
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 f87f 	bl	800f114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f016:	e063      	b.n	800f0e0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f01c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f020:	2b00      	cmp	r3, #0
 800f022:	d00e      	beq.n	800f042 <HAL_UART_IRQHandler+0x59e>
 800f024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d008      	beq.n	800f042 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f001 fc1a 	bl	8010874 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f040:	e051      	b.n	800f0e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d014      	beq.n	800f078 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f04e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f056:	2b00      	cmp	r3, #0
 800f058:	d105      	bne.n	800f066 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f05a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f05e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f062:	2b00      	cmp	r3, #0
 800f064:	d008      	beq.n	800f078 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d03a      	beq.n	800f0e4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	4798      	blx	r3
    }
    return;
 800f076:	e035      	b.n	800f0e4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f080:	2b00      	cmp	r3, #0
 800f082:	d009      	beq.n	800f098 <HAL_UART_IRQHandler+0x5f4>
 800f084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d003      	beq.n	800f098 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fea7 	bl	800fde4 <UART_EndTransmit_IT>
    return;
 800f096:	e026      	b.n	800f0e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f09c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d009      	beq.n	800f0b8 <HAL_UART_IRQHandler+0x614>
 800f0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f001 fbf3 	bl	801089c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0b6:	e016      	b.n	800f0e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d010      	beq.n	800f0e6 <HAL_UART_IRQHandler+0x642>
 800f0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	da0c      	bge.n	800f0e6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f001 fbdb 	bl	8010888 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0d2:	e008      	b.n	800f0e6 <HAL_UART_IRQHandler+0x642>
      return;
 800f0d4:	bf00      	nop
 800f0d6:	e006      	b.n	800f0e6 <HAL_UART_IRQHandler+0x642>
    return;
 800f0d8:	bf00      	nop
 800f0da:	e004      	b.n	800f0e6 <HAL_UART_IRQHandler+0x642>
      return;
 800f0dc:	bf00      	nop
 800f0de:	e002      	b.n	800f0e6 <HAL_UART_IRQHandler+0x642>
      return;
 800f0e0:	bf00      	nop
 800f0e2:	e000      	b.n	800f0e6 <HAL_UART_IRQHandler+0x642>
    return;
 800f0e4:	bf00      	nop
  }
}
 800f0e6:	37e8      	adds	r7, #232	; 0xe8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f0f4:	bf00      	nop
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f108:	bf00      	nop
 800f10a:	370c      	adds	r7, #12
 800f10c:	46bd      	mov	sp, r7
 800f10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f112:	4770      	bx	lr

0800f114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f12c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f130:	b08c      	sub	sp, #48	; 0x30
 800f132:	af00      	add	r7, sp, #0
 800f134:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f136:	2300      	movs	r3, #0
 800f138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	689a      	ldr	r2, [r3, #8]
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	691b      	ldr	r3, [r3, #16]
 800f144:	431a      	orrs	r2, r3
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	695b      	ldr	r3, [r3, #20]
 800f14a:	431a      	orrs	r2, r3
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	69db      	ldr	r3, [r3, #28]
 800f150:	4313      	orrs	r3, r2
 800f152:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	4baf      	ldr	r3, [pc, #700]	; (800f418 <UART_SetConfig+0x2ec>)
 800f15c:	4013      	ands	r3, r2
 800f15e:	697a      	ldr	r2, [r7, #20]
 800f160:	6812      	ldr	r2, [r2, #0]
 800f162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f164:	430b      	orrs	r3, r1
 800f166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	68da      	ldr	r2, [r3, #12]
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	430a      	orrs	r2, r1
 800f17c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	699b      	ldr	r3, [r3, #24]
 800f182:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4aa4      	ldr	r2, [pc, #656]	; (800f41c <UART_SetConfig+0x2f0>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d004      	beq.n	800f198 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	6a1b      	ldr	r3, [r3, #32]
 800f192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f194:	4313      	orrs	r3, r2
 800f196:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f1a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	6812      	ldr	r2, [r2, #0]
 800f1aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1ac:	430b      	orrs	r3, r1
 800f1ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b6:	f023 010f 	bic.w	r1, r3, #15
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	430a      	orrs	r2, r1
 800f1c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a95      	ldr	r2, [pc, #596]	; (800f420 <UART_SetConfig+0x2f4>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d125      	bne.n	800f21c <UART_SetConfig+0xf0>
 800f1d0:	2003      	movs	r0, #3
 800f1d2:	f7ff fb2b 	bl	800e82c <LL_RCC_GetUSARTClockSource>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b03      	cmp	r3, #3
 800f1da:	d81b      	bhi.n	800f214 <UART_SetConfig+0xe8>
 800f1dc:	a201      	add	r2, pc, #4	; (adr r2, 800f1e4 <UART_SetConfig+0xb8>)
 800f1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e2:	bf00      	nop
 800f1e4:	0800f1f5 	.word	0x0800f1f5
 800f1e8:	0800f205 	.word	0x0800f205
 800f1ec:	0800f1fd 	.word	0x0800f1fd
 800f1f0:	0800f20d 	.word	0x0800f20d
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f1fa:	e042      	b.n	800f282 <UART_SetConfig+0x156>
 800f1fc:	2302      	movs	r3, #2
 800f1fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f202:	e03e      	b.n	800f282 <UART_SetConfig+0x156>
 800f204:	2304      	movs	r3, #4
 800f206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f20a:	e03a      	b.n	800f282 <UART_SetConfig+0x156>
 800f20c:	2308      	movs	r3, #8
 800f20e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f212:	e036      	b.n	800f282 <UART_SetConfig+0x156>
 800f214:	2310      	movs	r3, #16
 800f216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f21a:	e032      	b.n	800f282 <UART_SetConfig+0x156>
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a7e      	ldr	r2, [pc, #504]	; (800f41c <UART_SetConfig+0x2f0>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d12a      	bne.n	800f27c <UART_SetConfig+0x150>
 800f226:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800f22a:	f7ff fb0f 	bl	800e84c <LL_RCC_GetLPUARTClockSource>
 800f22e:	4603      	mov	r3, r0
 800f230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f234:	d01a      	beq.n	800f26c <UART_SetConfig+0x140>
 800f236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f23a:	d81b      	bhi.n	800f274 <UART_SetConfig+0x148>
 800f23c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f240:	d00c      	beq.n	800f25c <UART_SetConfig+0x130>
 800f242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f246:	d815      	bhi.n	800f274 <UART_SetConfig+0x148>
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d003      	beq.n	800f254 <UART_SetConfig+0x128>
 800f24c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f250:	d008      	beq.n	800f264 <UART_SetConfig+0x138>
 800f252:	e00f      	b.n	800f274 <UART_SetConfig+0x148>
 800f254:	2300      	movs	r3, #0
 800f256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f25a:	e012      	b.n	800f282 <UART_SetConfig+0x156>
 800f25c:	2302      	movs	r3, #2
 800f25e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f262:	e00e      	b.n	800f282 <UART_SetConfig+0x156>
 800f264:	2304      	movs	r3, #4
 800f266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f26a:	e00a      	b.n	800f282 <UART_SetConfig+0x156>
 800f26c:	2308      	movs	r3, #8
 800f26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f272:	e006      	b.n	800f282 <UART_SetConfig+0x156>
 800f274:	2310      	movs	r3, #16
 800f276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f27a:	e002      	b.n	800f282 <UART_SetConfig+0x156>
 800f27c:	2310      	movs	r3, #16
 800f27e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a65      	ldr	r2, [pc, #404]	; (800f41c <UART_SetConfig+0x2f0>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	f040 8097 	bne.w	800f3bc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f28e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f292:	2b08      	cmp	r3, #8
 800f294:	d823      	bhi.n	800f2de <UART_SetConfig+0x1b2>
 800f296:	a201      	add	r2, pc, #4	; (adr r2, 800f29c <UART_SetConfig+0x170>)
 800f298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29c:	0800f2c1 	.word	0x0800f2c1
 800f2a0:	0800f2df 	.word	0x0800f2df
 800f2a4:	0800f2c9 	.word	0x0800f2c9
 800f2a8:	0800f2df 	.word	0x0800f2df
 800f2ac:	0800f2cf 	.word	0x0800f2cf
 800f2b0:	0800f2df 	.word	0x0800f2df
 800f2b4:	0800f2df 	.word	0x0800f2df
 800f2b8:	0800f2df 	.word	0x0800f2df
 800f2bc:	0800f2d7 	.word	0x0800f2d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2c0:	f7fe fb88 	bl	800d9d4 <HAL_RCC_GetPCLK1Freq>
 800f2c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f2c6:	e010      	b.n	800f2ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f2c8:	4b56      	ldr	r3, [pc, #344]	; (800f424 <UART_SetConfig+0x2f8>)
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f2cc:	e00d      	b.n	800f2ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f2ce:	f7fe fb01 	bl	800d8d4 <HAL_RCC_GetSysClockFreq>
 800f2d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f2d4:	e009      	b.n	800f2ea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f2dc:	e005      	b.n	800f2ea <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f2e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f000 812b 	beq.w	800f548 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f6:	4a4c      	ldr	r2, [pc, #304]	; (800f428 <UART_SetConfig+0x2fc>)
 800f2f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f300:	fbb3 f3f2 	udiv	r3, r3, r2
 800f304:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	685a      	ldr	r2, [r3, #4]
 800f30a:	4613      	mov	r3, r2
 800f30c:	005b      	lsls	r3, r3, #1
 800f30e:	4413      	add	r3, r2
 800f310:	69ba      	ldr	r2, [r7, #24]
 800f312:	429a      	cmp	r2, r3
 800f314:	d305      	bcc.n	800f322 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f31c:	69ba      	ldr	r2, [r7, #24]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d903      	bls.n	800f32a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800f322:	2301      	movs	r3, #1
 800f324:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f328:	e10e      	b.n	800f548 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32c:	2200      	movs	r2, #0
 800f32e:	60bb      	str	r3, [r7, #8]
 800f330:	60fa      	str	r2, [r7, #12]
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f336:	4a3c      	ldr	r2, [pc, #240]	; (800f428 <UART_SetConfig+0x2fc>)
 800f338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	2200      	movs	r2, #0
 800f340:	603b      	str	r3, [r7, #0]
 800f342:	607a      	str	r2, [r7, #4]
 800f344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f348:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f34c:	f7f1 fc64 	bl	8000c18 <__aeabi_uldivmod>
 800f350:	4602      	mov	r2, r0
 800f352:	460b      	mov	r3, r1
 800f354:	4610      	mov	r0, r2
 800f356:	4619      	mov	r1, r3
 800f358:	f04f 0200 	mov.w	r2, #0
 800f35c:	f04f 0300 	mov.w	r3, #0
 800f360:	020b      	lsls	r3, r1, #8
 800f362:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f366:	0202      	lsls	r2, r0, #8
 800f368:	6979      	ldr	r1, [r7, #20]
 800f36a:	6849      	ldr	r1, [r1, #4]
 800f36c:	0849      	lsrs	r1, r1, #1
 800f36e:	2000      	movs	r0, #0
 800f370:	460c      	mov	r4, r1
 800f372:	4605      	mov	r5, r0
 800f374:	eb12 0804 	adds.w	r8, r2, r4
 800f378:	eb43 0905 	adc.w	r9, r3, r5
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	2200      	movs	r2, #0
 800f382:	469a      	mov	sl, r3
 800f384:	4693      	mov	fp, r2
 800f386:	4652      	mov	r2, sl
 800f388:	465b      	mov	r3, fp
 800f38a:	4640      	mov	r0, r8
 800f38c:	4649      	mov	r1, r9
 800f38e:	f7f1 fc43 	bl	8000c18 <__aeabi_uldivmod>
 800f392:	4602      	mov	r2, r0
 800f394:	460b      	mov	r3, r1
 800f396:	4613      	mov	r3, r2
 800f398:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3a0:	d308      	bcc.n	800f3b4 <UART_SetConfig+0x288>
 800f3a2:	6a3b      	ldr	r3, [r7, #32]
 800f3a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3a8:	d204      	bcs.n	800f3b4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	6a3a      	ldr	r2, [r7, #32]
 800f3b0:	60da      	str	r2, [r3, #12]
 800f3b2:	e0c9      	b.n	800f548 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f3ba:	e0c5      	b.n	800f548 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	69db      	ldr	r3, [r3, #28]
 800f3c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3c4:	d16d      	bne.n	800f4a2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800f3c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	2b07      	cmp	r3, #7
 800f3ce:	d82d      	bhi.n	800f42c <UART_SetConfig+0x300>
 800f3d0:	a201      	add	r2, pc, #4	; (adr r2, 800f3d8 <UART_SetConfig+0x2ac>)
 800f3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d6:	bf00      	nop
 800f3d8:	0800f3f9 	.word	0x0800f3f9
 800f3dc:	0800f401 	.word	0x0800f401
 800f3e0:	0800f42d 	.word	0x0800f42d
 800f3e4:	0800f407 	.word	0x0800f407
 800f3e8:	0800f42d 	.word	0x0800f42d
 800f3ec:	0800f42d 	.word	0x0800f42d
 800f3f0:	0800f42d 	.word	0x0800f42d
 800f3f4:	0800f40f 	.word	0x0800f40f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3f8:	f7fe fb02 	bl	800da00 <HAL_RCC_GetPCLK2Freq>
 800f3fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f3fe:	e01b      	b.n	800f438 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f400:	4b08      	ldr	r3, [pc, #32]	; (800f424 <UART_SetConfig+0x2f8>)
 800f402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f404:	e018      	b.n	800f438 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f406:	f7fe fa65 	bl	800d8d4 <HAL_RCC_GetSysClockFreq>
 800f40a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f40c:	e014      	b.n	800f438 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f40e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f414:	e010      	b.n	800f438 <UART_SetConfig+0x30c>
 800f416:	bf00      	nop
 800f418:	cfff69f3 	.word	0xcfff69f3
 800f41c:	40008000 	.word	0x40008000
 800f420:	40013800 	.word	0x40013800
 800f424:	00f42400 	.word	0x00f42400
 800f428:	0802e08c 	.word	0x0802e08c
      default:
        pclk = 0U;
 800f42c:	2300      	movs	r3, #0
 800f42e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f430:	2301      	movs	r3, #1
 800f432:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f436:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f000 8084 	beq.w	800f548 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f444:	4a4b      	ldr	r2, [pc, #300]	; (800f574 <UART_SetConfig+0x448>)
 800f446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f44a:	461a      	mov	r2, r3
 800f44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f452:	005a      	lsls	r2, r3, #1
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	085b      	lsrs	r3, r3, #1
 800f45a:	441a      	add	r2, r3
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	685b      	ldr	r3, [r3, #4]
 800f460:	fbb2 f3f3 	udiv	r3, r2, r3
 800f464:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	2b0f      	cmp	r3, #15
 800f46a:	d916      	bls.n	800f49a <UART_SetConfig+0x36e>
 800f46c:	6a3b      	ldr	r3, [r7, #32]
 800f46e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f472:	d212      	bcs.n	800f49a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f474:	6a3b      	ldr	r3, [r7, #32]
 800f476:	b29b      	uxth	r3, r3
 800f478:	f023 030f 	bic.w	r3, r3, #15
 800f47c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f47e:	6a3b      	ldr	r3, [r7, #32]
 800f480:	085b      	lsrs	r3, r3, #1
 800f482:	b29b      	uxth	r3, r3
 800f484:	f003 0307 	and.w	r3, r3, #7
 800f488:	b29a      	uxth	r2, r3
 800f48a:	8bfb      	ldrh	r3, [r7, #30]
 800f48c:	4313      	orrs	r3, r2
 800f48e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	8bfa      	ldrh	r2, [r7, #30]
 800f496:	60da      	str	r2, [r3, #12]
 800f498:	e056      	b.n	800f548 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f49a:	2301      	movs	r3, #1
 800f49c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f4a0:	e052      	b.n	800f548 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f4a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	2b07      	cmp	r3, #7
 800f4aa:	d822      	bhi.n	800f4f2 <UART_SetConfig+0x3c6>
 800f4ac:	a201      	add	r2, pc, #4	; (adr r2, 800f4b4 <UART_SetConfig+0x388>)
 800f4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b2:	bf00      	nop
 800f4b4:	0800f4d5 	.word	0x0800f4d5
 800f4b8:	0800f4dd 	.word	0x0800f4dd
 800f4bc:	0800f4f3 	.word	0x0800f4f3
 800f4c0:	0800f4e3 	.word	0x0800f4e3
 800f4c4:	0800f4f3 	.word	0x0800f4f3
 800f4c8:	0800f4f3 	.word	0x0800f4f3
 800f4cc:	0800f4f3 	.word	0x0800f4f3
 800f4d0:	0800f4eb 	.word	0x0800f4eb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f4d4:	f7fe fa94 	bl	800da00 <HAL_RCC_GetPCLK2Freq>
 800f4d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f4da:	e010      	b.n	800f4fe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f4dc:	4b26      	ldr	r3, [pc, #152]	; (800f578 <UART_SetConfig+0x44c>)
 800f4de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f4e0:	e00d      	b.n	800f4fe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f4e2:	f7fe f9f7 	bl	800d8d4 <HAL_RCC_GetSysClockFreq>
 800f4e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f4e8:	e009      	b.n	800f4fe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f4ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f4f0:	e005      	b.n	800f4fe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f4fc:	bf00      	nop
    }

    if (pclk != 0U)
 800f4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f500:	2b00      	cmp	r3, #0
 800f502:	d021      	beq.n	800f548 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f508:	4a1a      	ldr	r2, [pc, #104]	; (800f574 <UART_SetConfig+0x448>)
 800f50a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f50e:	461a      	mov	r2, r3
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	fbb3 f2f2 	udiv	r2, r3, r2
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	085b      	lsrs	r3, r3, #1
 800f51c:	441a      	add	r2, r3
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	fbb2 f3f3 	udiv	r3, r2, r3
 800f526:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f528:	6a3b      	ldr	r3, [r7, #32]
 800f52a:	2b0f      	cmp	r3, #15
 800f52c:	d909      	bls.n	800f542 <UART_SetConfig+0x416>
 800f52e:	6a3b      	ldr	r3, [r7, #32]
 800f530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f534:	d205      	bcs.n	800f542 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	b29a      	uxth	r2, r3
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	60da      	str	r2, [r3, #12]
 800f540:	e002      	b.n	800f548 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f542:	2301      	movs	r3, #1
 800f544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	2201      	movs	r2, #1
 800f54c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	2201      	movs	r2, #1
 800f554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	2200      	movs	r2, #0
 800f55c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	2200      	movs	r2, #0
 800f562:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f564:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3730      	adds	r7, #48	; 0x30
 800f56c:	46bd      	mov	sp, r7
 800f56e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f572:	bf00      	nop
 800f574:	0802e08c 	.word	0x0802e08c
 800f578:	00f42400 	.word	0x00f42400

0800f57c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f588:	f003 0308 	and.w	r3, r3, #8
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00a      	beq.n	800f5a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	430a      	orrs	r2, r1
 800f5a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5aa:	f003 0301 	and.w	r3, r3, #1
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d00a      	beq.n	800f5c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	430a      	orrs	r2, r1
 800f5c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5cc:	f003 0302 	and.w	r3, r3, #2
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d00a      	beq.n	800f5ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	430a      	orrs	r2, r1
 800f5e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ee:	f003 0304 	and.w	r3, r3, #4
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00a      	beq.n	800f60c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	430a      	orrs	r2, r1
 800f60a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f610:	f003 0310 	and.w	r3, r3, #16
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00a      	beq.n	800f62e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	430a      	orrs	r2, r1
 800f62c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f632:	f003 0320 	and.w	r3, r3, #32
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00a      	beq.n	800f650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	689b      	ldr	r3, [r3, #8]
 800f640:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	430a      	orrs	r2, r1
 800f64e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d01a      	beq.n	800f692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	430a      	orrs	r2, r1
 800f670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f67a:	d10a      	bne.n	800f692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	430a      	orrs	r2, r1
 800f690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00a      	beq.n	800f6b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	430a      	orrs	r2, r1
 800f6b2:	605a      	str	r2, [r3, #4]
  }
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b098      	sub	sp, #96	; 0x60
 800f6c4:	af02      	add	r7, sp, #8
 800f6c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f6d0:	f7fb f996 	bl	800aa00 <HAL_GetTick>
 800f6d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f003 0308 	and.w	r3, r3, #8
 800f6e0:	2b08      	cmp	r3, #8
 800f6e2:	d12f      	bne.n	800f744 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f6e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f6e8:	9300      	str	r3, [sp, #0]
 800f6ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 f88e 	bl	800f814 <UART_WaitOnFlagUntilTimeout>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d022      	beq.n	800f744 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f706:	e853 3f00 	ldrex	r3, [r3]
 800f70a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f70e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f712:	653b      	str	r3, [r7, #80]	; 0x50
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	461a      	mov	r2, r3
 800f71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f71c:	647b      	str	r3, [r7, #68]	; 0x44
 800f71e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f724:	e841 2300 	strex	r3, r2, [r1]
 800f728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d1e6      	bne.n	800f6fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2220      	movs	r2, #32
 800f734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f740:	2303      	movs	r3, #3
 800f742:	e063      	b.n	800f80c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f003 0304 	and.w	r3, r3, #4
 800f74e:	2b04      	cmp	r3, #4
 800f750:	d149      	bne.n	800f7e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f752:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f756:	9300      	str	r3, [sp, #0]
 800f758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f75a:	2200      	movs	r2, #0
 800f75c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 f857 	bl	800f814 <UART_WaitOnFlagUntilTimeout>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d03c      	beq.n	800f7e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f774:	e853 3f00 	ldrex	r3, [r3]
 800f778:	623b      	str	r3, [r7, #32]
   return(result);
 800f77a:	6a3b      	ldr	r3, [r7, #32]
 800f77c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f780:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f78a:	633b      	str	r3, [r7, #48]	; 0x30
 800f78c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f78e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f792:	e841 2300 	strex	r3, r2, [r1]
 800f796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1e6      	bne.n	800f76c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	3308      	adds	r3, #8
 800f7a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	e853 3f00 	ldrex	r3, [r3]
 800f7ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f023 0301 	bic.w	r3, r3, #1
 800f7b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	3308      	adds	r3, #8
 800f7bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7be:	61fa      	str	r2, [r7, #28]
 800f7c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c2:	69b9      	ldr	r1, [r7, #24]
 800f7c4:	69fa      	ldr	r2, [r7, #28]
 800f7c6:	e841 2300 	strex	r3, r2, [r1]
 800f7ca:	617b      	str	r3, [r7, #20]
   return(result);
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1e5      	bne.n	800f79e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2220      	movs	r2, #32
 800f7d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f7e2:	2303      	movs	r3, #3
 800f7e4:	e012      	b.n	800f80c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2220      	movs	r2, #32
 800f7ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2220      	movs	r2, #32
 800f7f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f80a:	2300      	movs	r3, #0
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3758      	adds	r7, #88	; 0x58
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	603b      	str	r3, [r7, #0]
 800f820:	4613      	mov	r3, r2
 800f822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f824:	e04f      	b.n	800f8c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f82c:	d04b      	beq.n	800f8c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f82e:	f7fb f8e7 	bl	800aa00 <HAL_GetTick>
 800f832:	4602      	mov	r2, r0
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	69ba      	ldr	r2, [r7, #24]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d302      	bcc.n	800f844 <UART_WaitOnFlagUntilTimeout+0x30>
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d101      	bne.n	800f848 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f844:	2303      	movs	r3, #3
 800f846:	e04e      	b.n	800f8e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f003 0304 	and.w	r3, r3, #4
 800f852:	2b00      	cmp	r3, #0
 800f854:	d037      	beq.n	800f8c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	2b80      	cmp	r3, #128	; 0x80
 800f85a:	d034      	beq.n	800f8c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	2b40      	cmp	r3, #64	; 0x40
 800f860:	d031      	beq.n	800f8c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	69db      	ldr	r3, [r3, #28]
 800f868:	f003 0308 	and.w	r3, r3, #8
 800f86c:	2b08      	cmp	r3, #8
 800f86e:	d110      	bne.n	800f892 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2208      	movs	r2, #8
 800f876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f000 f99c 	bl	800fbb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2208      	movs	r2, #8
 800f882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2200      	movs	r2, #0
 800f88a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	e029      	b.n	800f8e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	69db      	ldr	r3, [r3, #28]
 800f898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f89c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8a0:	d111      	bne.n	800f8c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f000 f982 	bl	800fbb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2220      	movs	r2, #32
 800f8b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f8c2:	2303      	movs	r3, #3
 800f8c4:	e00f      	b.n	800f8e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	69da      	ldr	r2, [r3, #28]
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	4013      	ands	r3, r2
 800f8d0:	68ba      	ldr	r2, [r7, #8]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	bf0c      	ite	eq
 800f8d6:	2301      	moveq	r3, #1
 800f8d8:	2300      	movne	r3, #0
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	461a      	mov	r2, r3
 800f8de:	79fb      	ldrb	r3, [r7, #7]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d0a0      	beq.n	800f826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
	...

0800f8f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b0a3      	sub	sp, #140	; 0x8c
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	60b9      	str	r1, [r7, #8]
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	68ba      	ldr	r2, [r7, #8]
 800f902:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	88fa      	ldrh	r2, [r7, #6]
 800f908:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	88fa      	ldrh	r2, [r7, #6]
 800f910:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2200      	movs	r2, #0
 800f918:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	689b      	ldr	r3, [r3, #8]
 800f91e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f922:	d10e      	bne.n	800f942 <UART_Start_Receive_IT+0x52>
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d105      	bne.n	800f938 <UART_Start_Receive_IT+0x48>
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f932:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f936:	e02d      	b.n	800f994 <UART_Start_Receive_IT+0xa4>
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	22ff      	movs	r2, #255	; 0xff
 800f93c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f940:	e028      	b.n	800f994 <UART_Start_Receive_IT+0xa4>
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d10d      	bne.n	800f966 <UART_Start_Receive_IT+0x76>
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d104      	bne.n	800f95c <UART_Start_Receive_IT+0x6c>
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	22ff      	movs	r2, #255	; 0xff
 800f956:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f95a:	e01b      	b.n	800f994 <UART_Start_Receive_IT+0xa4>
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	227f      	movs	r2, #127	; 0x7f
 800f960:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f964:	e016      	b.n	800f994 <UART_Start_Receive_IT+0xa4>
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	689b      	ldr	r3, [r3, #8]
 800f96a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f96e:	d10d      	bne.n	800f98c <UART_Start_Receive_IT+0x9c>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d104      	bne.n	800f982 <UART_Start_Receive_IT+0x92>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	227f      	movs	r2, #127	; 0x7f
 800f97c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f980:	e008      	b.n	800f994 <UART_Start_Receive_IT+0xa4>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	223f      	movs	r2, #63	; 0x3f
 800f986:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f98a:	e003      	b.n	800f994 <UART_Start_Receive_IT+0xa4>
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2200      	movs	r2, #0
 800f998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2222      	movs	r2, #34	; 0x22
 800f9a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	3308      	adds	r3, #8
 800f9aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9ae:	e853 3f00 	ldrex	r3, [r3]
 800f9b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f9b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9b6:	f043 0301 	orr.w	r3, r3, #1
 800f9ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	3308      	adds	r3, #8
 800f9c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f9c8:	673a      	str	r2, [r7, #112]	; 0x70
 800f9ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f9ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f9d0:	e841 2300 	strex	r3, r2, [r1]
 800f9d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f9d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1e3      	bne.n	800f9a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9e4:	d14f      	bne.n	800fa86 <UART_Start_Receive_IT+0x196>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f9ec:	88fa      	ldrh	r2, [r7, #6]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d349      	bcc.n	800fa86 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	689b      	ldr	r3, [r3, #8]
 800f9f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9fa:	d107      	bne.n	800fa0c <UART_Start_Receive_IT+0x11c>
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d103      	bne.n	800fa0c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	4a47      	ldr	r2, [pc, #284]	; (800fb24 <UART_Start_Receive_IT+0x234>)
 800fa08:	675a      	str	r2, [r3, #116]	; 0x74
 800fa0a:	e002      	b.n	800fa12 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	4a46      	ldr	r2, [pc, #280]	; (800fb28 <UART_Start_Receive_IT+0x238>)
 800fa10:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d01a      	beq.n	800fa50 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa22:	e853 3f00 	ldrex	r3, [r3]
 800fa26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fa28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa3e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa44:	e841 2300 	strex	r3, r2, [r1]
 800fa48:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fa4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d1e4      	bne.n	800fa1a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	3308      	adds	r3, #8
 800fa56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa5a:	e853 3f00 	ldrex	r3, [r3]
 800fa5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa66:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	3308      	adds	r3, #8
 800fa6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fa70:	64ba      	str	r2, [r7, #72]	; 0x48
 800fa72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa78:	e841 2300 	strex	r3, r2, [r1]
 800fa7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fa7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d1e5      	bne.n	800fa50 <UART_Start_Receive_IT+0x160>
 800fa84:	e046      	b.n	800fb14 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	689b      	ldr	r3, [r3, #8]
 800fa8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa8e:	d107      	bne.n	800faa0 <UART_Start_Receive_IT+0x1b0>
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d103      	bne.n	800faa0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	4a24      	ldr	r2, [pc, #144]	; (800fb2c <UART_Start_Receive_IT+0x23c>)
 800fa9c:	675a      	str	r2, [r3, #116]	; 0x74
 800fa9e:	e002      	b.n	800faa6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	4a23      	ldr	r2, [pc, #140]	; (800fb30 <UART_Start_Receive_IT+0x240>)
 800faa4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	691b      	ldr	r3, [r3, #16]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d019      	beq.n	800fae2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab6:	e853 3f00 	ldrex	r3, [r3]
 800faba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fac2:	677b      	str	r3, [r7, #116]	; 0x74
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	461a      	mov	r2, r3
 800faca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800facc:	637b      	str	r3, [r7, #52]	; 0x34
 800face:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fad4:	e841 2300 	strex	r3, r2, [r1]
 800fad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d1e6      	bne.n	800faae <UART_Start_Receive_IT+0x1be>
 800fae0:	e018      	b.n	800fb14 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	e853 3f00 	ldrex	r3, [r3]
 800faee:	613b      	str	r3, [r7, #16]
   return(result);
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	f043 0320 	orr.w	r3, r3, #32
 800faf6:	67bb      	str	r3, [r7, #120]	; 0x78
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	461a      	mov	r2, r3
 800fafe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb00:	623b      	str	r3, [r7, #32]
 800fb02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb04:	69f9      	ldr	r1, [r7, #28]
 800fb06:	6a3a      	ldr	r2, [r7, #32]
 800fb08:	e841 2300 	strex	r3, r2, [r1]
 800fb0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1e6      	bne.n	800fae2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	378c      	adds	r7, #140	; 0x8c
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr
 800fb22:	bf00      	nop
 800fb24:	0801050d 	.word	0x0801050d
 800fb28:	080101ad 	.word	0x080101ad
 800fb2c:	0800fff5 	.word	0x0800fff5
 800fb30:	0800fe3d 	.word	0x0800fe3d

0800fb34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b08f      	sub	sp, #60	; 0x3c
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb42:	6a3b      	ldr	r3, [r7, #32]
 800fb44:	e853 3f00 	ldrex	r3, [r3]
 800fb48:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fb50:	637b      	str	r3, [r7, #52]	; 0x34
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	461a      	mov	r2, r3
 800fb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb5c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb62:	e841 2300 	strex	r3, r2, [r1]
 800fb66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1e6      	bne.n	800fb3c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	3308      	adds	r3, #8
 800fb74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	e853 3f00 	ldrex	r3, [r3]
 800fb7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fb84:	633b      	str	r3, [r7, #48]	; 0x30
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	3308      	adds	r3, #8
 800fb8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb8e:	61ba      	str	r2, [r7, #24]
 800fb90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb92:	6979      	ldr	r1, [r7, #20]
 800fb94:	69ba      	ldr	r2, [r7, #24]
 800fb96:	e841 2300 	strex	r3, r2, [r1]
 800fb9a:	613b      	str	r3, [r7, #16]
   return(result);
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d1e5      	bne.n	800fb6e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2220      	movs	r2, #32
 800fba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800fbaa:	bf00      	nop
 800fbac:	373c      	adds	r7, #60	; 0x3c
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fbb6:	b480      	push	{r7}
 800fbb8:	b095      	sub	sp, #84	; 0x54
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc6:	e853 3f00 	ldrex	r3, [r3]
 800fbca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fbd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbdc:	643b      	str	r3, [r7, #64]	; 0x40
 800fbde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fbe4:	e841 2300 	strex	r3, r2, [r1]
 800fbe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1e6      	bne.n	800fbbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	3308      	adds	r3, #8
 800fbf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf8:	6a3b      	ldr	r3, [r7, #32]
 800fbfa:	e853 3f00 	ldrex	r3, [r3]
 800fbfe:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc06:	f023 0301 	bic.w	r3, r3, #1
 800fc0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	3308      	adds	r3, #8
 800fc12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc1c:	e841 2300 	strex	r3, r2, [r1]
 800fc20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1e3      	bne.n	800fbf0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d118      	bne.n	800fc62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	e853 3f00 	ldrex	r3, [r3]
 800fc3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	f023 0310 	bic.w	r3, r3, #16
 800fc44:	647b      	str	r3, [r7, #68]	; 0x44
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc4e:	61bb      	str	r3, [r7, #24]
 800fc50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc52:	6979      	ldr	r1, [r7, #20]
 800fc54:	69ba      	ldr	r2, [r7, #24]
 800fc56:	e841 2300 	strex	r3, r2, [r1]
 800fc5a:	613b      	str	r3, [r7, #16]
   return(result);
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d1e6      	bne.n	800fc30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2220      	movs	r2, #32
 800fc66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fc76:	bf00      	nop
 800fc78:	3754      	adds	r7, #84	; 0x54
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr

0800fc82 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b090      	sub	sp, #64	; 0x40
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc8e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f003 0320 	and.w	r3, r3, #32
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d137      	bne.n	800fd0e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800fc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca0:	2200      	movs	r2, #0
 800fca2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	3308      	adds	r3, #8
 800fcac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb0:	e853 3f00 	ldrex	r3, [r3]
 800fcb4:	623b      	str	r3, [r7, #32]
   return(result);
 800fcb6:	6a3b      	ldr	r3, [r7, #32]
 800fcb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fcbc:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3308      	adds	r3, #8
 800fcc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcc6:	633a      	str	r2, [r7, #48]	; 0x30
 800fcc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcce:	e841 2300 	strex	r3, r2, [r1]
 800fcd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1e5      	bne.n	800fca6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fcda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	e853 3f00 	ldrex	r3, [r3]
 800fce6:	60fb      	str	r3, [r7, #12]
   return(result);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcee:	637b      	str	r3, [r7, #52]	; 0x34
 800fcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcf8:	61fb      	str	r3, [r7, #28]
 800fcfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfc:	69b9      	ldr	r1, [r7, #24]
 800fcfe:	69fa      	ldr	r2, [r7, #28]
 800fd00:	e841 2300 	strex	r3, r2, [r1]
 800fd04:	617b      	str	r3, [r7, #20]
   return(result);
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1e6      	bne.n	800fcda <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fd0c:	e002      	b.n	800fd14 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800fd0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fd10:	f7f4 f9d6 	bl	80040c0 <HAL_UART_TxCpltCallback>
}
 800fd14:	bf00      	nop
 800fd16:	3740      	adds	r7, #64	; 0x40
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd28:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	f7ff f9de 	bl	800f0ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd30:	bf00      	nop
 800fd32:	3710      	adds	r7, #16
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd44:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd4c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd54:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	689b      	ldr	r3, [r3, #8]
 800fd5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd60:	2b80      	cmp	r3, #128	; 0x80
 800fd62:	d109      	bne.n	800fd78 <UART_DMAError+0x40>
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	2b21      	cmp	r3, #33	; 0x21
 800fd68:	d106      	bne.n	800fd78 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fd72:	6978      	ldr	r0, [r7, #20]
 800fd74:	f7ff fede 	bl	800fb34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd82:	2b40      	cmp	r3, #64	; 0x40
 800fd84:	d109      	bne.n	800fd9a <UART_DMAError+0x62>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2b22      	cmp	r3, #34	; 0x22
 800fd8a:	d106      	bne.n	800fd9a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fd94:	6978      	ldr	r0, [r7, #20]
 800fd96:	f7ff ff0e 	bl	800fbb6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fda0:	f043 0210 	orr.w	r2, r3, #16
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fdaa:	6978      	ldr	r0, [r7, #20]
 800fdac:	f7ff f9a8 	bl	800f100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdb0:	bf00      	nop
 800fdb2:	3718      	adds	r7, #24
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f7ff f992 	bl	800f100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fddc:	bf00      	nop
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b088      	sub	sp, #32
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	e853 3f00 	ldrex	r3, [r3]
 800fdf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe00:	61fb      	str	r3, [r7, #28]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	461a      	mov	r2, r3
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	61bb      	str	r3, [r7, #24]
 800fe0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe0e:	6979      	ldr	r1, [r7, #20]
 800fe10:	69ba      	ldr	r2, [r7, #24]
 800fe12:	e841 2300 	strex	r3, r2, [r1]
 800fe16:	613b      	str	r3, [r7, #16]
   return(result);
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d1e6      	bne.n	800fdec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2220      	movs	r2, #32
 800fe22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7f4 f947 	bl	80040c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe32:	bf00      	nop
 800fe34:	3720      	adds	r7, #32
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
	...

0800fe3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b09c      	sub	sp, #112	; 0x70
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe54:	2b22      	cmp	r3, #34	; 0x22
 800fe56:	f040 80be 	bne.w	800ffd6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fe64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fe68:	b2d9      	uxtb	r1, r3
 800fe6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fe6e:	b2da      	uxtb	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe74:	400a      	ands	r2, r1
 800fe76:	b2d2      	uxtb	r2, r2
 800fe78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe7e:	1c5a      	adds	r2, r3, #1
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	3b01      	subs	r3, #1
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f040 80a1 	bne.w	800ffe6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feac:	e853 3f00 	ldrex	r3, [r3]
 800feb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800feb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800feb8:	66bb      	str	r3, [r7, #104]	; 0x68
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	461a      	mov	r2, r3
 800fec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fec2:	65bb      	str	r3, [r7, #88]	; 0x58
 800fec4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800feca:	e841 2300 	strex	r3, r2, [r1]
 800fece:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d1e6      	bne.n	800fea4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	3308      	adds	r3, #8
 800fedc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee0:	e853 3f00 	ldrex	r3, [r3]
 800fee4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee8:	f023 0301 	bic.w	r3, r3, #1
 800feec:	667b      	str	r3, [r7, #100]	; 0x64
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	3308      	adds	r3, #8
 800fef4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fef6:	647a      	str	r2, [r7, #68]	; 0x44
 800fef8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fefa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fefc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fefe:	e841 2300 	strex	r3, r2, [r1]
 800ff02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1e5      	bne.n	800fed6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2220      	movs	r2, #32
 800ff0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2200      	movs	r2, #0
 800ff16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4a33      	ldr	r2, [pc, #204]	; (800fff0 <UART_RxISR_8BIT+0x1b4>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d01f      	beq.n	800ff68 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d018      	beq.n	800ff68 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3e:	e853 3f00 	ldrex	r3, [r3]
 800ff42:	623b      	str	r3, [r7, #32]
   return(result);
 800ff44:	6a3b      	ldr	r3, [r7, #32]
 800ff46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ff4a:	663b      	str	r3, [r7, #96]	; 0x60
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	461a      	mov	r2, r3
 800ff52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff54:	633b      	str	r3, [r7, #48]	; 0x30
 800ff56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff5c:	e841 2300 	strex	r3, r2, [r1]
 800ff60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d1e6      	bne.n	800ff36 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d12e      	bne.n	800ffce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	e853 3f00 	ldrex	r3, [r3]
 800ff82:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f023 0310 	bic.w	r3, r3, #16
 800ff8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	461a      	mov	r2, r3
 800ff92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff94:	61fb      	str	r3, [r7, #28]
 800ff96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff98:	69b9      	ldr	r1, [r7, #24]
 800ff9a:	69fa      	ldr	r2, [r7, #28]
 800ff9c:	e841 2300 	strex	r3, r2, [r1]
 800ffa0:	617b      	str	r3, [r7, #20]
   return(result);
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d1e6      	bne.n	800ff76 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	69db      	ldr	r3, [r3, #28]
 800ffae:	f003 0310 	and.w	r3, r3, #16
 800ffb2:	2b10      	cmp	r3, #16
 800ffb4:	d103      	bne.n	800ffbe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	2210      	movs	r2, #16
 800ffbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f7ff f8a4 	bl	800f114 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ffcc:	e00b      	b.n	800ffe6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7f4 f848 	bl	8004064 <HAL_UART_RxCpltCallback>
}
 800ffd4:	e007      	b.n	800ffe6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	699a      	ldr	r2, [r3, #24]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f042 0208 	orr.w	r2, r2, #8
 800ffe4:	619a      	str	r2, [r3, #24]
}
 800ffe6:	bf00      	nop
 800ffe8:	3770      	adds	r7, #112	; 0x70
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	40008000 	.word	0x40008000

0800fff4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b09c      	sub	sp, #112	; 0x70
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010002:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801000c:	2b22      	cmp	r3, #34	; 0x22
 801000e:	f040 80be 	bne.w	801018e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010018:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010020:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010022:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8010026:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801002a:	4013      	ands	r3, r2
 801002c:	b29a      	uxth	r2, r3
 801002e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010030:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010036:	1c9a      	adds	r2, r3, #2
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010042:	b29b      	uxth	r3, r3
 8010044:	3b01      	subs	r3, #1
 8010046:	b29a      	uxth	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010054:	b29b      	uxth	r3, r3
 8010056:	2b00      	cmp	r3, #0
 8010058:	f040 80a1 	bne.w	801019e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010064:	e853 3f00 	ldrex	r3, [r3]
 8010068:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801006a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801006c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010070:	667b      	str	r3, [r7, #100]	; 0x64
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	461a      	mov	r2, r3
 8010078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801007a:	657b      	str	r3, [r7, #84]	; 0x54
 801007c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010082:	e841 2300 	strex	r3, r2, [r1]
 8010086:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801008a:	2b00      	cmp	r3, #0
 801008c:	d1e6      	bne.n	801005c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	3308      	adds	r3, #8
 8010094:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010098:	e853 3f00 	ldrex	r3, [r3]
 801009c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801009e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a0:	f023 0301 	bic.w	r3, r3, #1
 80100a4:	663b      	str	r3, [r7, #96]	; 0x60
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3308      	adds	r3, #8
 80100ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80100ae:	643a      	str	r2, [r7, #64]	; 0x40
 80100b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80100b6:	e841 2300 	strex	r3, r2, [r1]
 80100ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80100bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1e5      	bne.n	801008e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2220      	movs	r2, #32
 80100c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2200      	movs	r2, #0
 80100d4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a33      	ldr	r2, [pc, #204]	; (80101a8 <UART_RxISR_16BIT+0x1b4>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d01f      	beq.n	8010120 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d018      	beq.n	8010120 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f4:	6a3b      	ldr	r3, [r7, #32]
 80100f6:	e853 3f00 	ldrex	r3, [r3]
 80100fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	461a      	mov	r2, r3
 801010a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801010c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801010e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010114:	e841 2300 	strex	r3, r2, [r1]
 8010118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801011a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1e6      	bne.n	80100ee <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010124:	2b01      	cmp	r3, #1
 8010126:	d12e      	bne.n	8010186 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	e853 3f00 	ldrex	r3, [r3]
 801013a:	60bb      	str	r3, [r7, #8]
   return(result);
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	f023 0310 	bic.w	r3, r3, #16
 8010142:	65bb      	str	r3, [r7, #88]	; 0x58
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	461a      	mov	r2, r3
 801014a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801014c:	61bb      	str	r3, [r7, #24]
 801014e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010150:	6979      	ldr	r1, [r7, #20]
 8010152:	69ba      	ldr	r2, [r7, #24]
 8010154:	e841 2300 	strex	r3, r2, [r1]
 8010158:	613b      	str	r3, [r7, #16]
   return(result);
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d1e6      	bne.n	801012e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	69db      	ldr	r3, [r3, #28]
 8010166:	f003 0310 	and.w	r3, r3, #16
 801016a:	2b10      	cmp	r3, #16
 801016c:	d103      	bne.n	8010176 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2210      	movs	r2, #16
 8010174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7fe ffc8 	bl	800f114 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010184:	e00b      	b.n	801019e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7f3 ff6c 	bl	8004064 <HAL_UART_RxCpltCallback>
}
 801018c:	e007      	b.n	801019e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	699a      	ldr	r2, [r3, #24]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f042 0208 	orr.w	r2, r2, #8
 801019c:	619a      	str	r2, [r3, #24]
}
 801019e:	bf00      	nop
 80101a0:	3770      	adds	r7, #112	; 0x70
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	40008000 	.word	0x40008000

080101ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b0ac      	sub	sp, #176	; 0xb0
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	69db      	ldr	r3, [r3, #28]
 80101c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80101e2:	2b22      	cmp	r3, #34	; 0x22
 80101e4:	f040 8182 	bne.w	80104ec <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80101ee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80101f2:	e125      	b.n	8010440 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80101fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010202:	b2d9      	uxtb	r1, r3
 8010204:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010208:	b2da      	uxtb	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801020e:	400a      	ands	r2, r1
 8010210:	b2d2      	uxtb	r2, r2
 8010212:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010218:	1c5a      	adds	r2, r3, #1
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010224:	b29b      	uxth	r3, r3
 8010226:	3b01      	subs	r3, #1
 8010228:	b29a      	uxth	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	69db      	ldr	r3, [r3, #28]
 8010236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801023a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801023e:	f003 0307 	and.w	r3, r3, #7
 8010242:	2b00      	cmp	r3, #0
 8010244:	d053      	beq.n	80102ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	2b00      	cmp	r3, #0
 8010250:	d011      	beq.n	8010276 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00b      	beq.n	8010276 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	2201      	movs	r2, #1
 8010264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801026c:	f043 0201 	orr.w	r2, r3, #1
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801027a:	f003 0302 	and.w	r3, r3, #2
 801027e:	2b00      	cmp	r3, #0
 8010280:	d011      	beq.n	80102a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010286:	f003 0301 	and.w	r3, r3, #1
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00b      	beq.n	80102a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2202      	movs	r2, #2
 8010294:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801029c:	f043 0204 	orr.w	r2, r3, #4
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102aa:	f003 0304 	and.w	r3, r3, #4
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d011      	beq.n	80102d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80102b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102b6:	f003 0301 	and.w	r3, r3, #1
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00b      	beq.n	80102d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2204      	movs	r2, #4
 80102c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102cc:	f043 0202 	orr.w	r2, r3, #2
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d006      	beq.n	80102ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f7fe ff0d 	bl	800f100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2200      	movs	r2, #0
 80102ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	f040 80a2 	bne.w	8010440 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010304:	e853 3f00 	ldrex	r3, [r3]
 8010308:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801030a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801030c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	461a      	mov	r2, r3
 801031a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801031e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010320:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010322:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010324:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010326:	e841 2300 	strex	r3, r2, [r1]
 801032a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801032c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801032e:	2b00      	cmp	r3, #0
 8010330:	d1e4      	bne.n	80102fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	3308      	adds	r3, #8
 8010338:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801033a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801033c:	e853 3f00 	ldrex	r3, [r3]
 8010340:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010348:	f023 0301 	bic.w	r3, r3, #1
 801034c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3308      	adds	r3, #8
 8010356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801035a:	66ba      	str	r2, [r7, #104]	; 0x68
 801035c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010362:	e841 2300 	strex	r3, r2, [r1]
 8010366:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801036a:	2b00      	cmp	r3, #0
 801036c:	d1e1      	bne.n	8010332 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2220      	movs	r2, #32
 8010372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2200      	movs	r2, #0
 801037a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a5f      	ldr	r2, [pc, #380]	; (8010504 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d021      	beq.n	80103d0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010396:	2b00      	cmp	r3, #0
 8010398:	d01a      	beq.n	80103d0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103a2:	e853 3f00 	ldrex	r3, [r3]
 80103a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80103a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80103ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	461a      	mov	r2, r3
 80103b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103bc:	657b      	str	r3, [r7, #84]	; 0x54
 80103be:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103c4:	e841 2300 	strex	r3, r2, [r1]
 80103c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80103ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d1e4      	bne.n	801039a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d130      	bne.n	801043a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2200      	movs	r2, #0
 80103dc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e6:	e853 3f00 	ldrex	r3, [r3]
 80103ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80103ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ee:	f023 0310 	bic.w	r3, r3, #16
 80103f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	461a      	mov	r2, r3
 80103fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010400:	643b      	str	r3, [r7, #64]	; 0x40
 8010402:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010404:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010408:	e841 2300 	strex	r3, r2, [r1]
 801040c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801040e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1e4      	bne.n	80103de <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	69db      	ldr	r3, [r3, #28]
 801041a:	f003 0310 	and.w	r3, r3, #16
 801041e:	2b10      	cmp	r3, #16
 8010420:	d103      	bne.n	801042a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2210      	movs	r2, #16
 8010428:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010430:	4619      	mov	r1, r3
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7fe fe6e 	bl	800f114 <HAL_UARTEx_RxEventCallback>
 8010438:	e002      	b.n	8010440 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f7f3 fe12 	bl	8004064 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010440:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010444:	2b00      	cmp	r3, #0
 8010446:	d006      	beq.n	8010456 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8010448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801044c:	f003 0320 	and.w	r3, r3, #32
 8010450:	2b00      	cmp	r3, #0
 8010452:	f47f aecf 	bne.w	80101f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801045c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010460:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010464:	2b00      	cmp	r3, #0
 8010466:	d049      	beq.n	80104fc <UART_RxISR_8BIT_FIFOEN+0x350>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801046e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010472:	429a      	cmp	r2, r3
 8010474:	d242      	bcs.n	80104fc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	3308      	adds	r3, #8
 801047c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801047e:	6a3b      	ldr	r3, [r7, #32]
 8010480:	e853 3f00 	ldrex	r3, [r3]
 8010484:	61fb      	str	r3, [r7, #28]
   return(result);
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801048c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	3308      	adds	r3, #8
 8010496:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801049a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801049c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801049e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104a2:	e841 2300 	strex	r3, r2, [r1]
 80104a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d1e3      	bne.n	8010476 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4a15      	ldr	r2, [pc, #84]	; (8010508 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80104b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	e853 3f00 	ldrex	r3, [r3]
 80104c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	f043 0320 	orr.w	r3, r3, #32
 80104c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	461a      	mov	r2, r3
 80104d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104d6:	61bb      	str	r3, [r7, #24]
 80104d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104da:	6979      	ldr	r1, [r7, #20]
 80104dc:	69ba      	ldr	r2, [r7, #24]
 80104de:	e841 2300 	strex	r3, r2, [r1]
 80104e2:	613b      	str	r3, [r7, #16]
   return(result);
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d1e4      	bne.n	80104b4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80104ea:	e007      	b.n	80104fc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	699a      	ldr	r2, [r3, #24]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f042 0208 	orr.w	r2, r2, #8
 80104fa:	619a      	str	r2, [r3, #24]
}
 80104fc:	bf00      	nop
 80104fe:	37b0      	adds	r7, #176	; 0xb0
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	40008000 	.word	0x40008000
 8010508:	0800fe3d 	.word	0x0800fe3d

0801050c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b0ae      	sub	sp, #184	; 0xb8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801051a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	69db      	ldr	r3, [r3, #28]
 8010524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	689b      	ldr	r3, [r3, #8]
 8010538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010542:	2b22      	cmp	r3, #34	; 0x22
 8010544:	f040 8186 	bne.w	8010854 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801054e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010552:	e129      	b.n	80107a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801055a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010566:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801056a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801056e:	4013      	ands	r3, r2
 8010570:	b29a      	uxth	r2, r3
 8010572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010576:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801057c:	1c9a      	adds	r2, r3, #2
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010588:	b29b      	uxth	r3, r3
 801058a:	3b01      	subs	r3, #1
 801058c:	b29a      	uxth	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	69db      	ldr	r3, [r3, #28]
 801059a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801059e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80105a2:	f003 0307 	and.w	r3, r3, #7
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d053      	beq.n	8010652 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80105aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80105ae:	f003 0301 	and.w	r3, r3, #1
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d011      	beq.n	80105da <UART_RxISR_16BIT_FIFOEN+0xce>
 80105b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80105ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00b      	beq.n	80105da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	2201      	movs	r2, #1
 80105c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105d0:	f043 0201 	orr.w	r2, r3, #1
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80105da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80105de:	f003 0302 	and.w	r3, r3, #2
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d011      	beq.n	801060a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80105e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80105ea:	f003 0301 	and.w	r3, r3, #1
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00b      	beq.n	801060a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	2202      	movs	r2, #2
 80105f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010600:	f043 0204 	orr.w	r2, r3, #4
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801060a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801060e:	f003 0304 	and.w	r3, r3, #4
 8010612:	2b00      	cmp	r3, #0
 8010614:	d011      	beq.n	801063a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801061a:	f003 0301 	and.w	r3, r3, #1
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00b      	beq.n	801063a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2204      	movs	r2, #4
 8010628:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010630:	f043 0202 	orr.w	r2, r3, #2
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010640:	2b00      	cmp	r3, #0
 8010642:	d006      	beq.n	8010652 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7fe fd5b 	bl	800f100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010658:	b29b      	uxth	r3, r3
 801065a:	2b00      	cmp	r3, #0
 801065c:	f040 80a4 	bne.w	80107a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010668:	e853 3f00 	ldrex	r3, [r3]
 801066c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801066e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	461a      	mov	r2, r3
 801067e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010686:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801068a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801068e:	e841 2300 	strex	r3, r2, [r1]
 8010692:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010696:	2b00      	cmp	r3, #0
 8010698:	d1e2      	bne.n	8010660 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	3308      	adds	r3, #8
 80106a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106a4:	e853 3f00 	ldrex	r3, [r3]
 80106a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80106aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80106b0:	f023 0301 	bic.w	r3, r3, #1
 80106b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	3308      	adds	r3, #8
 80106be:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80106c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80106c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80106c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80106ca:	e841 2300 	strex	r3, r2, [r1]
 80106ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80106d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d1e1      	bne.n	801069a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2220      	movs	r2, #32
 80106da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2200      	movs	r2, #0
 80106e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	4a5f      	ldr	r2, [pc, #380]	; (801086c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d021      	beq.n	8010738 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d01a      	beq.n	8010738 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801070a:	e853 3f00 	ldrex	r3, [r3]
 801070e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010712:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	461a      	mov	r2, r3
 8010720:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010724:	65bb      	str	r3, [r7, #88]	; 0x58
 8010726:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010728:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801072a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801072c:	e841 2300 	strex	r3, r2, [r1]
 8010730:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010734:	2b00      	cmp	r3, #0
 8010736:	d1e4      	bne.n	8010702 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801073c:	2b01      	cmp	r3, #1
 801073e:	d130      	bne.n	80107a2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2200      	movs	r2, #0
 8010744:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074e:	e853 3f00 	ldrex	r3, [r3]
 8010752:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010756:	f023 0310 	bic.w	r3, r3, #16
 801075a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	461a      	mov	r2, r3
 8010764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010768:	647b      	str	r3, [r7, #68]	; 0x44
 801076a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801076c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801076e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010770:	e841 2300 	strex	r3, r2, [r1]
 8010774:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010778:	2b00      	cmp	r3, #0
 801077a:	d1e4      	bne.n	8010746 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	69db      	ldr	r3, [r3, #28]
 8010782:	f003 0310 	and.w	r3, r3, #16
 8010786:	2b10      	cmp	r3, #16
 8010788:	d103      	bne.n	8010792 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2210      	movs	r2, #16
 8010790:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010798:	4619      	mov	r1, r3
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7fe fcba 	bl	800f114 <HAL_UARTEx_RxEventCallback>
 80107a0:	e002      	b.n	80107a8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f7f3 fc5e 	bl	8004064 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80107a8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d006      	beq.n	80107be <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80107b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80107b4:	f003 0320 	and.w	r3, r3, #32
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f47f aecb 	bne.w	8010554 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107c4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80107c8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d049      	beq.n	8010864 <UART_RxISR_16BIT_FIFOEN+0x358>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80107d6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80107da:	429a      	cmp	r2, r3
 80107dc:	d242      	bcs.n	8010864 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	3308      	adds	r3, #8
 80107e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e8:	e853 3f00 	ldrex	r3, [r3]
 80107ec:	623b      	str	r3, [r7, #32]
   return(result);
 80107ee:	6a3b      	ldr	r3, [r7, #32]
 80107f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80107f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	3308      	adds	r3, #8
 80107fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010802:	633a      	str	r2, [r7, #48]	; 0x30
 8010804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801080a:	e841 2300 	strex	r3, r2, [r1]
 801080e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010812:	2b00      	cmp	r3, #0
 8010814:	d1e3      	bne.n	80107de <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	4a15      	ldr	r2, [pc, #84]	; (8010870 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801081a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	e853 3f00 	ldrex	r3, [r3]
 8010828:	60fb      	str	r3, [r7, #12]
   return(result);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f043 0320 	orr.w	r3, r3, #32
 8010830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	461a      	mov	r2, r3
 801083a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801083e:	61fb      	str	r3, [r7, #28]
 8010840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010842:	69b9      	ldr	r1, [r7, #24]
 8010844:	69fa      	ldr	r2, [r7, #28]
 8010846:	e841 2300 	strex	r3, r2, [r1]
 801084a:	617b      	str	r3, [r7, #20]
   return(result);
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d1e4      	bne.n	801081c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010852:	e007      	b.n	8010864 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	699a      	ldr	r2, [r3, #24]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	f042 0208 	orr.w	r2, r2, #8
 8010862:	619a      	str	r2, [r3, #24]
}
 8010864:	bf00      	nop
 8010866:	37b8      	adds	r7, #184	; 0xb8
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	40008000 	.word	0x40008000
 8010870:	0800fff5 	.word	0x0800fff5

08010874 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801087c:	bf00      	nop
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr

08010888 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010890:	bf00      	nop
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801089c:	b480      	push	{r7}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80108a4:	bf00      	nop
 80108a6:	370c      	adds	r7, #12
 80108a8:	46bd      	mov	sp, r7
 80108aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ae:	4770      	bx	lr

080108b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b085      	sub	sp, #20
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d101      	bne.n	80108c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80108c2:	2302      	movs	r3, #2
 80108c4:	e027      	b.n	8010916 <HAL_UARTEx_DisableFifoMode+0x66>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2201      	movs	r2, #1
 80108ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2224      	movs	r2, #36	; 0x24
 80108d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f022 0201 	bic.w	r2, r2, #1
 80108ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80108f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68fa      	ldr	r2, [r7, #12]
 8010902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2220      	movs	r2, #32
 8010908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010914:	2300      	movs	r3, #0
}
 8010916:	4618      	mov	r0, r3
 8010918:	3714      	adds	r7, #20
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr

08010922 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010922:	b580      	push	{r7, lr}
 8010924:	b084      	sub	sp, #16
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
 801092a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010932:	2b01      	cmp	r3, #1
 8010934:	d101      	bne.n	801093a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010936:	2302      	movs	r3, #2
 8010938:	e02d      	b.n	8010996 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2201      	movs	r2, #1
 801093e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2224      	movs	r2, #36	; 0x24
 8010946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f022 0201 	bic.w	r2, r2, #1
 8010960:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	689b      	ldr	r3, [r3, #8]
 8010968:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	683a      	ldr	r2, [r7, #0]
 8010972:	430a      	orrs	r2, r1
 8010974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 f850 	bl	8010a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	68fa      	ldr	r2, [r7, #12]
 8010982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2220      	movs	r2, #32
 8010988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010994:	2300      	movs	r3, #0
}
 8010996:	4618      	mov	r0, r3
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b084      	sub	sp, #16
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
 80109a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d101      	bne.n	80109b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80109b2:	2302      	movs	r3, #2
 80109b4:	e02d      	b.n	8010a12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2201      	movs	r2, #1
 80109ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2224      	movs	r2, #36	; 0x24
 80109c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f022 0201 	bic.w	r2, r2, #1
 80109dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	689b      	ldr	r3, [r3, #8]
 80109e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	683a      	ldr	r2, [r7, #0]
 80109ee:	430a      	orrs	r2, r1
 80109f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f812 	bl	8010a1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	68fa      	ldr	r2, [r7, #12]
 80109fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2220      	movs	r2, #32
 8010a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
	...

08010a1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b085      	sub	sp, #20
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d108      	bne.n	8010a3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2201      	movs	r2, #1
 8010a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2201      	movs	r2, #1
 8010a38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010a3c:	e031      	b.n	8010aa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010a3e:	2308      	movs	r3, #8
 8010a40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010a42:	2308      	movs	r3, #8
 8010a44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	689b      	ldr	r3, [r3, #8]
 8010a4c:	0e5b      	lsrs	r3, r3, #25
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	f003 0307 	and.w	r3, r3, #7
 8010a54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	0f5b      	lsrs	r3, r3, #29
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	f003 0307 	and.w	r3, r3, #7
 8010a64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a66:	7bbb      	ldrb	r3, [r7, #14]
 8010a68:	7b3a      	ldrb	r2, [r7, #12]
 8010a6a:	4911      	ldr	r1, [pc, #68]	; (8010ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8010a6c:	5c8a      	ldrb	r2, [r1, r2]
 8010a6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a72:	7b3a      	ldrb	r2, [r7, #12]
 8010a74:	490f      	ldr	r1, [pc, #60]	; (8010ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8010a76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a78:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a84:	7bfb      	ldrb	r3, [r7, #15]
 8010a86:	7b7a      	ldrb	r2, [r7, #13]
 8010a88:	4909      	ldr	r1, [pc, #36]	; (8010ab0 <UARTEx_SetNbDataToProcess+0x94>)
 8010a8a:	5c8a      	ldrb	r2, [r1, r2]
 8010a8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a90:	7b7a      	ldrb	r2, [r7, #13]
 8010a92:	4908      	ldr	r1, [pc, #32]	; (8010ab4 <UARTEx_SetNbDataToProcess+0x98>)
 8010a94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a96:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010aa2:	bf00      	nop
 8010aa4:	3714      	adds	r7, #20
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr
 8010aae:	bf00      	nop
 8010ab0:	0802e0a4 	.word	0x0802e0a4
 8010ab4:	0802e0ac 	.word	0x0802e0ac

08010ab8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b088      	sub	sp, #32
 8010abc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010ac2:	f107 0308 	add.w	r3, r7, #8
 8010ac6:	2218      	movs	r2, #24
 8010ac8:	2100      	movs	r1, #0
 8010aca:	4618      	mov	r0, r3
 8010acc:	f001 fc9c 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010ad0:	233f      	movs	r3, #63	; 0x3f
 8010ad2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8010ad4:	2381      	movs	r3, #129	; 0x81
 8010ad6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010ad8:	1dfb      	adds	r3, r7, #7
 8010ada:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010adc:	2301      	movs	r3, #1
 8010ade:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010ae0:	f107 0308 	add.w	r3, r7, #8
 8010ae4:	2100      	movs	r1, #0
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f001 fb4c 	bl	8012184 <hci_send_req>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	da01      	bge.n	8010af6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010af2:	23ff      	movs	r3, #255	; 0xff
 8010af4:	e000      	b.n	8010af8 <aci_gap_set_non_discoverable+0x40>
  return status;
 8010af6:	79fb      	ldrb	r3, [r7, #7]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3720      	adds	r7, #32
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8010b00:	b5b0      	push	{r4, r5, r7, lr}
 8010b02:	b0ce      	sub	sp, #312	; 0x138
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	4605      	mov	r5, r0
 8010b08:	460c      	mov	r4, r1
 8010b0a:	4610      	mov	r0, r2
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010b12:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8010b16:	462a      	mov	r2, r5
 8010b18:	701a      	strb	r2, [r3, #0]
 8010b1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010b1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8010b22:	4622      	mov	r2, r4
 8010b24:	801a      	strh	r2, [r3, #0]
 8010b26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010b2a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8010b2e:	4602      	mov	r2, r0
 8010b30:	801a      	strh	r2, [r3, #0]
 8010b32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010b36:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8010b3a:	460a      	mov	r2, r1
 8010b3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8010b3e:	f107 0310 	add.w	r3, r7, #16
 8010b42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8010b46:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8010b4a:	3308      	adds	r3, #8
 8010b4c:	f107 0210 	add.w	r2, r7, #16
 8010b50:	4413      	add	r3, r2
 8010b52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8010b56:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8010b5a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8010b5e:	4413      	add	r3, r2
 8010b60:	3309      	adds	r3, #9
 8010b62:	f107 0210 	add.w	r2, r7, #16
 8010b66:	4413      	add	r3, r2
 8010b68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010b6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010b70:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010b74:	2200      	movs	r2, #0
 8010b76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8010b7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010b82:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010b86:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8010b8a:	7812      	ldrb	r2, [r2, #0]
 8010b8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010b8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010b92:	3301      	adds	r3, #1
 8010b94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8010b98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010b9c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010ba0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8010ba4:	8812      	ldrh	r2, [r2, #0]
 8010ba6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8010baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010bae:	3302      	adds	r3, #2
 8010bb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8010bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010bb8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010bbc:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8010bc0:	8812      	ldrh	r2, [r2, #0]
 8010bc2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8010bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010bca:	3302      	adds	r3, #2
 8010bcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8010bd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010bd4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8010bd8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8010bdc:	7812      	ldrb	r2, [r2, #0]
 8010bde:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010be0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010be4:	3301      	adds	r3, #1
 8010be6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8010bea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010bee:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8010bf2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8010bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8010bfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010c02:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8010c06:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8010c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8010c12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010c16:	3308      	adds	r3, #8
 8010c18:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8010c1c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8010c20:	4618      	mov	r0, r3
 8010c22:	f001 fbe1 	bl	80123e8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8010c26:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8010c2a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010c2e:	4413      	add	r3, r2
 8010c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8010c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010c38:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8010c3c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8010c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010c42:	3301      	adds	r3, #1
 8010c44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8010c48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8010c52:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8010c56:	4618      	mov	r0, r3
 8010c58:	f001 fbc6 	bl	80123e8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8010c5c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8010c60:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010c64:	4413      	add	r3, r2
 8010c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8010c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010c6e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8010c72:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8010c74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010c78:	3302      	adds	r3, #2
 8010c7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8010c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010c82:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8010c86:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8010c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010c8c:	3302      	adds	r3, #2
 8010c8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010c96:	2218      	movs	r2, #24
 8010c98:	2100      	movs	r1, #0
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f001 fbb4 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010ca0:	233f      	movs	r3, #63	; 0x3f
 8010ca2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8010ca6:	2383      	movs	r3, #131	; 0x83
 8010ca8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010cac:	f107 0310 	add.w	r3, r7, #16
 8010cb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010cb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010cbc:	f107 030f 	add.w	r3, r7, #15
 8010cc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010cca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010cce:	2100      	movs	r1, #0
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f001 fa57 	bl	8012184 <hci_send_req>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	da01      	bge.n	8010ce0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8010cdc:	23ff      	movs	r3, #255	; 0xff
 8010cde:	e004      	b.n	8010cea <aci_gap_set_discoverable+0x1ea>
  return status;
 8010ce0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8010ce4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010ce8:	781b      	ldrb	r3, [r3, #0]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bdb0      	pop	{r4, r5, r7, pc}

08010cf4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b0cc      	sub	sp, #304	; 0x130
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d00:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010d04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8010d06:	f107 0310 	add.w	r3, r7, #16
 8010d0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010d16:	2200      	movs	r2, #0
 8010d18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8010d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010d24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010d28:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010d2c:	7812      	ldrb	r2, [r2, #0]
 8010d2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010d34:	3301      	adds	r3, #1
 8010d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010d3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d3e:	2218      	movs	r2, #24
 8010d40:	2100      	movs	r1, #0
 8010d42:	4618      	mov	r0, r3
 8010d44:	f001 fb60 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010d48:	233f      	movs	r3, #63	; 0x3f
 8010d4a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8010d4e:	2385      	movs	r3, #133	; 0x85
 8010d50:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010d54:	f107 0310 	add.w	r3, r7, #16
 8010d58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010d60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010d64:	f107 030f 	add.w	r3, r7, #15
 8010d68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010d76:	2100      	movs	r1, #0
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f001 fa03 	bl	8012184 <hci_send_req>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	da01      	bge.n	8010d88 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8010d84:	23ff      	movs	r3, #255	; 0xff
 8010d86:	e004      	b.n	8010d92 <aci_gap_set_io_capability+0x9e>
  return status;
 8010d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010d8c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010d90:	781b      	ldrb	r3, [r3, #0]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8010d9c:	b5b0      	push	{r4, r5, r7, lr}
 8010d9e:	b0cc      	sub	sp, #304	; 0x130
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	4605      	mov	r5, r0
 8010da4:	460c      	mov	r4, r1
 8010da6:	4610      	mov	r0, r2
 8010da8:	4619      	mov	r1, r3
 8010daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010dae:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8010db2:	462a      	mov	r2, r5
 8010db4:	701a      	strb	r2, [r3, #0]
 8010db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010dba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010dbe:	4622      	mov	r2, r4
 8010dc0:	701a      	strb	r2, [r3, #0]
 8010dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010dc6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8010dca:	4602      	mov	r2, r0
 8010dcc:	701a      	strb	r2, [r3, #0]
 8010dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010dd6:	460a      	mov	r2, r1
 8010dd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8010dda:	f107 0310 	add.w	r3, r7, #16
 8010dde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010de6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010dea:	2200      	movs	r2, #0
 8010dec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010dee:	2300      	movs	r3, #0
 8010df0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8010df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010df8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010dfc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010e00:	7812      	ldrb	r2, [r2, #0]
 8010e02:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010e04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e08:	3301      	adds	r3, #1
 8010e0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8010e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010e16:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010e1a:	7812      	ldrb	r2, [r2, #0]
 8010e1c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e22:	3301      	adds	r3, #1
 8010e24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8010e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010e30:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8010e34:	7812      	ldrb	r2, [r2, #0]
 8010e36:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010e38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8010e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010e4a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8010e4e:	7812      	ldrb	r2, [r2, #0]
 8010e50:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8010e52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e56:	3301      	adds	r3, #1
 8010e58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8010e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e60:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8010e64:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8010e66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8010e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e74:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8010e78:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e7e:	3301      	adds	r3, #1
 8010e80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8010e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e88:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8010e8c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8010e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010e92:	3301      	adds	r3, #1
 8010e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8010e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010e9c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8010ea0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8010ea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010ea8:	3304      	adds	r3, #4
 8010eaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8010eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010eb2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8010eb6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8010eb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010ec2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010ec6:	2218      	movs	r2, #24
 8010ec8:	2100      	movs	r1, #0
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f001 fa9c 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010ed0:	233f      	movs	r3, #63	; 0x3f
 8010ed2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8010ed6:	2386      	movs	r3, #134	; 0x86
 8010ed8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010edc:	f107 0310 	add.w	r3, r7, #16
 8010ee0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010ee8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010eec:	f107 030f 	add.w	r3, r7, #15
 8010ef0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010efa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010efe:	2100      	movs	r1, #0
 8010f00:	4618      	mov	r0, r3
 8010f02:	f001 f93f 	bl	8012184 <hci_send_req>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	da01      	bge.n	8010f10 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8010f0c:	23ff      	movs	r3, #255	; 0xff
 8010f0e:	e004      	b.n	8010f1a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8010f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010f18:	781b      	ldrb	r3, [r3, #0]
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bdb0      	pop	{r4, r5, r7, pc}

08010f24 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b0cc      	sub	sp, #304	; 0x130
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010f34:	6019      	str	r1, [r3, #0]
 8010f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8010f3e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8010f40:	f107 0310 	add.w	r3, r7, #16
 8010f44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8010f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010f4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010f50:	2200      	movs	r2, #0
 8010f52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010f54:	2300      	movs	r3, #0
 8010f56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010f5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010f62:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8010f66:	8812      	ldrh	r2, [r2, #0]
 8010f68:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010f6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010f6e:	3302      	adds	r3, #2
 8010f70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8010f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010f78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010f7c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8010f80:	6812      	ldr	r2, [r2, #0]
 8010f82:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8010f86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010f8a:	3304      	adds	r3, #4
 8010f8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010f90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010f94:	2218      	movs	r2, #24
 8010f96:	2100      	movs	r1, #0
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f001 fa35 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010f9e:	233f      	movs	r3, #63	; 0x3f
 8010fa0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8010fa4:	2388      	movs	r3, #136	; 0x88
 8010fa6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8010faa:	f107 0310 	add.w	r3, r7, #16
 8010fae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010fb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010fb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8010fba:	f107 030f 	add.w	r3, r7, #15
 8010fbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010fc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010fcc:	2100      	movs	r1, #0
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f001 f8d8 	bl	8012184 <hci_send_req>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	da01      	bge.n	8010fde <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8010fda:	23ff      	movs	r3, #255	; 0xff
 8010fdc:	e004      	b.n	8010fe8 <aci_gap_pass_key_resp+0xc4>
  return status;
 8010fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010fe2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8010fe6:	781b      	ldrb	r3, [r3, #0]
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8010ff2:	b590      	push	{r4, r7, lr}
 8010ff4:	b0cd      	sub	sp, #308	; 0x134
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	4608      	mov	r0, r1
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011002:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8011006:	6013      	str	r3, [r2, #0]
 8011008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801100c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011010:	4622      	mov	r2, r4
 8011012:	701a      	strb	r2, [r3, #0]
 8011014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011018:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801101c:	4602      	mov	r2, r0
 801101e:	701a      	strb	r2, [r3, #0]
 8011020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011024:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8011028:	460a      	mov	r2, r1
 801102a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 801102c:	f107 0310 	add.w	r3, r7, #16
 8011030:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011034:	f107 0308 	add.w	r3, r7, #8
 8011038:	2207      	movs	r2, #7
 801103a:	2100      	movs	r1, #0
 801103c:	4618      	mov	r0, r3
 801103e:	f001 f9e3 	bl	8012408 <Osal_MemSet>
  int index_input = 0;
 8011042:	2300      	movs	r3, #0
 8011044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8011048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801104c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011050:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8011054:	7812      	ldrb	r2, [r2, #0]
 8011056:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801105c:	3301      	adds	r3, #1
 801105e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8011062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011066:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801106a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801106e:	7812      	ldrb	r2, [r2, #0]
 8011070:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8011072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011076:	3301      	adds	r3, #1
 8011078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 801107c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011080:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011084:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8011088:	7812      	ldrb	r2, [r2, #0]
 801108a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801108c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011090:	3301      	adds	r3, #1
 8011092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011096:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801109a:	2218      	movs	r2, #24
 801109c:	2100      	movs	r1, #0
 801109e:	4618      	mov	r0, r3
 80110a0:	f001 f9b2 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 80110a4:	233f      	movs	r3, #63	; 0x3f
 80110a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80110aa:	238a      	movs	r3, #138	; 0x8a
 80110ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80110b0:	f107 0310 	add.w	r3, r7, #16
 80110b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80110b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80110bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80110c0:	f107 0308 	add.w	r3, r7, #8
 80110c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80110c8:	2307      	movs	r3, #7
 80110ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80110ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80110d2:	2100      	movs	r1, #0
 80110d4:	4618      	mov	r0, r3
 80110d6:	f001 f855 	bl	8012184 <hci_send_req>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	da01      	bge.n	80110e4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80110e0:	23ff      	movs	r3, #255	; 0xff
 80110e2:	e02e      	b.n	8011142 <aci_gap_init+0x150>
  if ( resp.Status )
 80110e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80110e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d005      	beq.n	80110fe <aci_gap_init+0x10c>
    return resp.Status;
 80110f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80110f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	e021      	b.n	8011142 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80110fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011102:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011106:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801110a:	b29a      	uxth	r2, r3
 801110c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8011118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801111c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011120:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011124:	b29a      	uxth	r2, r3
 8011126:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801112a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 801112c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011130:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011134:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8011138:	b29a      	uxth	r2, r3
 801113a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801113e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8011140:	2300      	movs	r3, #0
}
 8011142:	4618      	mov	r0, r3
 8011144:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8011148:	46bd      	mov	sp, r7
 801114a:	bd90      	pop	{r4, r7, pc}

0801114c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b0cc      	sub	sp, #304	; 0x130
 8011150:	af00      	add	r7, sp, #0
 8011152:	4602      	mov	r2, r0
 8011154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801115c:	6019      	str	r1, [r3, #0]
 801115e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011162:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011166:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8011168:	f107 0310 	add.w	r3, r7, #16
 801116c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011174:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011178:	2200      	movs	r2, #0
 801117a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801117c:	2300      	movs	r3, #0
 801117e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8011182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011186:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801118a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 801118e:	7812      	ldrb	r2, [r2, #0]
 8011190:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011196:	3301      	adds	r3, #1
 8011198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 801119c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80111a0:	1c58      	adds	r0, r3, #1
 80111a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80111a6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80111aa:	781a      	ldrb	r2, [r3, #0]
 80111ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80111b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80111b4:	6819      	ldr	r1, [r3, #0]
 80111b6:	f001 f917 	bl	80123e8 <Osal_MemCpy>
  index_input += AdvDataLen;
 80111ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80111be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80111c8:	4413      	add	r3, r2
 80111ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80111ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80111d2:	2218      	movs	r2, #24
 80111d4:	2100      	movs	r1, #0
 80111d6:	4618      	mov	r0, r3
 80111d8:	f001 f916 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 80111dc:	233f      	movs	r3, #63	; 0x3f
 80111de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80111e2:	238e      	movs	r3, #142	; 0x8e
 80111e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80111e8:	f107 0310 	add.w	r3, r7, #16
 80111ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80111f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80111f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80111f8:	f107 030f 	add.w	r3, r7, #15
 80111fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011200:	2301      	movs	r3, #1
 8011202:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011206:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801120a:	2100      	movs	r1, #0
 801120c:	4618      	mov	r0, r3
 801120e:	f000 ffb9 	bl	8012184 <hci_send_req>
 8011212:	4603      	mov	r3, r0
 8011214:	2b00      	cmp	r3, #0
 8011216:	da01      	bge.n	801121c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8011218:	23ff      	movs	r3, #255	; 0xff
 801121a:	e004      	b.n	8011226 <aci_gap_update_adv_data+0xda>
  return status;
 801121c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011220:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011224:	781b      	ldrb	r3, [r3, #0]
}
 8011226:	4618      	mov	r0, r3
 8011228:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b088      	sub	sp, #32
 8011234:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8011236:	2300      	movs	r3, #0
 8011238:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801123a:	f107 0308 	add.w	r3, r7, #8
 801123e:	2218      	movs	r2, #24
 8011240:	2100      	movs	r1, #0
 8011242:	4618      	mov	r0, r3
 8011244:	f001 f8e0 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011248:	233f      	movs	r3, #63	; 0x3f
 801124a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 801124c:	2392      	movs	r3, #146	; 0x92
 801124e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8011250:	1dfb      	adds	r3, r7, #7
 8011252:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8011254:	2301      	movs	r3, #1
 8011256:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011258:	f107 0308 	add.w	r3, r7, #8
 801125c:	2100      	movs	r1, #0
 801125e:	4618      	mov	r0, r3
 8011260:	f000 ff90 	bl	8012184 <hci_send_req>
 8011264:	4603      	mov	r3, r0
 8011266:	2b00      	cmp	r3, #0
 8011268:	da01      	bge.n	801126e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 801126a:	23ff      	movs	r3, #255	; 0xff
 801126c:	e000      	b.n	8011270 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 801126e:	79fb      	ldrb	r3, [r7, #7]
}
 8011270:	4618      	mov	r0, r3
 8011272:	3720      	adds	r7, #32
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}

08011278 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b0cc      	sub	sp, #304	; 0x130
 801127c:	af00      	add	r7, sp, #0
 801127e:	4602      	mov	r2, r0
 8011280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011284:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011288:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 801128a:	f107 0310 	add.w	r3, r7, #16
 801128e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011296:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801129a:	2200      	movs	r2, #0
 801129c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801129e:	2300      	movs	r3, #0
 80112a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80112a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80112a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80112ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80112b0:	8812      	ldrh	r2, [r2, #0]
 80112b2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80112b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80112b8:	3302      	adds	r3, #2
 80112ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80112be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80112c2:	2218      	movs	r2, #24
 80112c4:	2100      	movs	r1, #0
 80112c6:	4618      	mov	r0, r3
 80112c8:	f001 f89e 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 80112cc:	233f      	movs	r3, #63	; 0x3f
 80112ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 80112d2:	2395      	movs	r3, #149	; 0x95
 80112d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80112d8:	f107 0310 	add.w	r3, r7, #16
 80112dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80112e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80112e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80112e8:	f107 030f 	add.w	r3, r7, #15
 80112ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80112f0:	2301      	movs	r3, #1
 80112f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80112f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80112fa:	2100      	movs	r1, #0
 80112fc:	4618      	mov	r0, r3
 80112fe:	f000 ff41 	bl	8012184 <hci_send_req>
 8011302:	4603      	mov	r3, r0
 8011304:	2b00      	cmp	r3, #0
 8011306:	da01      	bge.n	801130c <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8011308:	23ff      	movs	r3, #255	; 0xff
 801130a:	e004      	b.n	8011316 <aci_gap_allow_rebond+0x9e>
  return status;
 801130c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011310:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011314:	781b      	ldrb	r3, [r3, #0]
}
 8011316:	4618      	mov	r0, r3
 8011318:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b0cc      	sub	sp, #304	; 0x130
 8011324:	af00      	add	r7, sp, #0
 8011326:	4602      	mov	r2, r0
 8011328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801132c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011330:	801a      	strh	r2, [r3, #0]
 8011332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011336:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 801133a:	460a      	mov	r2, r1
 801133c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801133e:	f107 0310 	add.w	r3, r7, #16
 8011342:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801134a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801134e:	2200      	movs	r2, #0
 8011350:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011352:	2300      	movs	r3, #0
 8011354:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8011358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801135c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011360:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8011364:	8812      	ldrh	r2, [r2, #0]
 8011366:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011368:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801136c:	3302      	adds	r3, #2
 801136e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8011372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011376:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801137a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801137e:	7812      	ldrb	r2, [r2, #0]
 8011380:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8011382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011386:	3301      	adds	r3, #1
 8011388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801138c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011390:	2218      	movs	r2, #24
 8011392:	2100      	movs	r1, #0
 8011394:	4618      	mov	r0, r3
 8011396:	f001 f837 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 801139a:	233f      	movs	r3, #63	; 0x3f
 801139c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80113a0:	23a5      	movs	r3, #165	; 0xa5
 80113a2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80113a6:	f107 0310 	add.w	r3, r7, #16
 80113aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80113ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80113b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80113b6:	f107 030f 	add.w	r3, r7, #15
 80113ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80113be:	2301      	movs	r3, #1
 80113c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80113c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80113c8:	2100      	movs	r1, #0
 80113ca:	4618      	mov	r0, r3
 80113cc:	f000 feda 	bl	8012184 <hci_send_req>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	da01      	bge.n	80113da <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80113d6:	23ff      	movs	r3, #255	; 0xff
 80113d8:	e004      	b.n	80113e4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80113da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80113de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80113e2:	781b      	ldrb	r3, [r3, #0]
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}

080113ee <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b088      	sub	sp, #32
 80113f2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80113f4:	2300      	movs	r3, #0
 80113f6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80113f8:	f107 0308 	add.w	r3, r7, #8
 80113fc:	2218      	movs	r2, #24
 80113fe:	2100      	movs	r1, #0
 8011400:	4618      	mov	r0, r3
 8011402:	f001 f801 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011406:	233f      	movs	r3, #63	; 0x3f
 8011408:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 801140a:	f240 1301 	movw	r3, #257	; 0x101
 801140e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8011410:	1dfb      	adds	r3, r7, #7
 8011412:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8011414:	2301      	movs	r3, #1
 8011416:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011418:	f107 0308 	add.w	r3, r7, #8
 801141c:	2100      	movs	r1, #0
 801141e:	4618      	mov	r0, r3
 8011420:	f000 feb0 	bl	8012184 <hci_send_req>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	da01      	bge.n	801142e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 801142a:	23ff      	movs	r3, #255	; 0xff
 801142c:	e000      	b.n	8011430 <aci_gatt_init+0x42>
  return status;
 801142e:	79fb      	ldrb	r3, [r7, #7]
}
 8011430:	4618      	mov	r0, r3
 8011432:	3720      	adds	r7, #32
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8011438:	b590      	push	{r4, r7, lr}
 801143a:	b0cf      	sub	sp, #316	; 0x13c
 801143c:	af00      	add	r7, sp, #0
 801143e:	4604      	mov	r4, r0
 8011440:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8011444:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8011448:	6001      	str	r1, [r0, #0]
 801144a:	4610      	mov	r0, r2
 801144c:	4619      	mov	r1, r3
 801144e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011452:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8011456:	4622      	mov	r2, r4
 8011458:	701a      	strb	r2, [r3, #0]
 801145a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801145e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8011462:	4602      	mov	r2, r0
 8011464:	701a      	strb	r2, [r3, #0]
 8011466:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801146a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 801146e:	460a      	mov	r2, r1
 8011470:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8011472:	f107 0310 	add.w	r3, r7, #16
 8011476:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 801147a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801147e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	2b01      	cmp	r3, #1
 8011486:	d00a      	beq.n	801149e <aci_gatt_add_service+0x66>
 8011488:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801148c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	2b02      	cmp	r3, #2
 8011494:	d101      	bne.n	801149a <aci_gatt_add_service+0x62>
 8011496:	2311      	movs	r3, #17
 8011498:	e002      	b.n	80114a0 <aci_gatt_add_service+0x68>
 801149a:	2301      	movs	r3, #1
 801149c:	e000      	b.n	80114a0 <aci_gatt_add_service+0x68>
 801149e:	2303      	movs	r3, #3
 80114a0:	f107 0210 	add.w	r2, r7, #16
 80114a4:	4413      	add	r3, r2
 80114a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80114aa:	f107 030c 	add.w	r3, r7, #12
 80114ae:	2203      	movs	r2, #3
 80114b0:	2100      	movs	r1, #0
 80114b2:	4618      	mov	r0, r3
 80114b4:	f000 ffa8 	bl	8012408 <Osal_MemSet>
  int index_input = 0;
 80114b8:	2300      	movs	r3, #0
 80114ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80114be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80114c2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80114c6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80114ca:	7812      	ldrb	r2, [r2, #0]
 80114cc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80114ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80114d2:	3301      	adds	r3, #1
 80114d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80114d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80114dc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	d002      	beq.n	80114ec <aci_gatt_add_service+0xb4>
 80114e6:	2b02      	cmp	r3, #2
 80114e8:	d004      	beq.n	80114f4 <aci_gatt_add_service+0xbc>
 80114ea:	e007      	b.n	80114fc <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80114ec:	2302      	movs	r3, #2
 80114ee:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80114f2:	e005      	b.n	8011500 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80114f4:	2310      	movs	r3, #16
 80114f6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80114fa:	e001      	b.n	8011500 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80114fc:	2397      	movs	r3, #151	; 0x97
 80114fe:	e06c      	b.n	80115da <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8011500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011504:	1c58      	adds	r0, r3, #1
 8011506:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 801150a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801150e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8011512:	6819      	ldr	r1, [r3, #0]
 8011514:	f000 ff68 	bl	80123e8 <Osal_MemCpy>
    index_input += size;
 8011518:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 801151c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011520:	4413      	add	r3, r2
 8011522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8011526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801152a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801152e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8011532:	7812      	ldrb	r2, [r2, #0]
 8011534:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8011536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801153a:	3301      	adds	r3, #1
 801153c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8011540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011544:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8011548:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 801154c:	7812      	ldrb	r2, [r2, #0]
 801154e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8011550:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011554:	3301      	adds	r3, #1
 8011556:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801155a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801155e:	2218      	movs	r2, #24
 8011560:	2100      	movs	r1, #0
 8011562:	4618      	mov	r0, r3
 8011564:	f000 ff50 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011568:	233f      	movs	r3, #63	; 0x3f
 801156a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 801156e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8011572:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011576:	f107 0310 	add.w	r3, r7, #16
 801157a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801157e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011582:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8011586:	f107 030c 	add.w	r3, r7, #12
 801158a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 801158e:	2303      	movs	r3, #3
 8011590:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011594:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011598:	2100      	movs	r1, #0
 801159a:	4618      	mov	r0, r3
 801159c:	f000 fdf2 	bl	8012184 <hci_send_req>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	da01      	bge.n	80115aa <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80115a6:	23ff      	movs	r3, #255	; 0xff
 80115a8:	e017      	b.n	80115da <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80115aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80115ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d005      	beq.n	80115c4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80115b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80115bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	e00a      	b.n	80115da <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80115c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80115c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80115d0:	b29a      	uxth	r2, r3
 80115d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80115d6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80115d8:	2300      	movs	r3, #0
}
 80115da:	4618      	mov	r0, r3
 80115dc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd90      	pop	{r4, r7, pc}

080115e4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80115e4:	b590      	push	{r4, r7, lr}
 80115e6:	b0d1      	sub	sp, #324	; 0x144
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	4604      	mov	r4, r0
 80115ec:	4608      	mov	r0, r1
 80115ee:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80115f2:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80115f6:	600a      	str	r2, [r1, #0]
 80115f8:	4619      	mov	r1, r3
 80115fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80115fe:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8011602:	4622      	mov	r2, r4
 8011604:	801a      	strh	r2, [r3, #0]
 8011606:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801160a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 801160e:	4602      	mov	r2, r0
 8011610:	701a      	strb	r2, [r3, #0]
 8011612:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011616:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 801161a:	460a      	mov	r2, r1
 801161c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 801161e:	f107 0318 	add.w	r3, r7, #24
 8011622:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8011626:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801162a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	2b01      	cmp	r3, #1
 8011632:	d00a      	beq.n	801164a <aci_gatt_add_char+0x66>
 8011634:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011638:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 801163c:	781b      	ldrb	r3, [r3, #0]
 801163e:	2b02      	cmp	r3, #2
 8011640:	d101      	bne.n	8011646 <aci_gatt_add_char+0x62>
 8011642:	2313      	movs	r3, #19
 8011644:	e002      	b.n	801164c <aci_gatt_add_char+0x68>
 8011646:	2303      	movs	r3, #3
 8011648:	e000      	b.n	801164c <aci_gatt_add_char+0x68>
 801164a:	2305      	movs	r3, #5
 801164c:	f107 0218 	add.w	r2, r7, #24
 8011650:	4413      	add	r3, r2
 8011652:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011656:	f107 0314 	add.w	r3, r7, #20
 801165a:	2203      	movs	r2, #3
 801165c:	2100      	movs	r1, #0
 801165e:	4618      	mov	r0, r3
 8011660:	f000 fed2 	bl	8012408 <Osal_MemSet>
  int index_input = 0;
 8011664:	2300      	movs	r3, #0
 8011666:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 801166a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801166e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011672:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8011676:	8812      	ldrh	r2, [r2, #0]
 8011678:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801167a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801167e:	3302      	adds	r3, #2
 8011680:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8011684:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011688:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801168c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8011690:	7812      	ldrb	r2, [r2, #0]
 8011692:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8011694:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011698:	3301      	adds	r3, #1
 801169a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 801169e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116a2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	d002      	beq.n	80116b2 <aci_gatt_add_char+0xce>
 80116ac:	2b02      	cmp	r3, #2
 80116ae:	d004      	beq.n	80116ba <aci_gatt_add_char+0xd6>
 80116b0:	e007      	b.n	80116c2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80116b2:	2302      	movs	r3, #2
 80116b4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80116b8:	e005      	b.n	80116c6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80116ba:	2310      	movs	r3, #16
 80116bc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80116c0:	e001      	b.n	80116c6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80116c2:	2397      	movs	r3, #151	; 0x97
 80116c4:	e091      	b.n	80117ea <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80116c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80116ca:	1cd8      	adds	r0, r3, #3
 80116cc:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80116d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116d4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80116d8:	6819      	ldr	r1, [r3, #0]
 80116da:	f000 fe85 	bl	80123e8 <Osal_MemCpy>
    index_input += size;
 80116de:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80116e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80116e6:	4413      	add	r3, r2
 80116e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80116ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116f0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80116f4:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80116f8:	8812      	ldrh	r2, [r2, #0]
 80116fa:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80116fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011700:	3302      	adds	r3, #2
 8011702:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8011706:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801170a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 801170e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8011710:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011714:	3301      	adds	r3, #1
 8011716:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 801171a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801171e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8011722:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8011724:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011728:	3301      	adds	r3, #1
 801172a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 801172e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011732:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8011736:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8011738:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801173c:	3301      	adds	r3, #1
 801173e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8011742:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011746:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 801174a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 801174c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011750:	3301      	adds	r3, #1
 8011752:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8011756:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801175a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 801175e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8011760:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011764:	3301      	adds	r3, #1
 8011766:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801176a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801176e:	2218      	movs	r2, #24
 8011770:	2100      	movs	r1, #0
 8011772:	4618      	mov	r0, r3
 8011774:	f000 fe48 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011778:	233f      	movs	r3, #63	; 0x3f
 801177a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 801177e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011782:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8011786:	f107 0318 	add.w	r3, r7, #24
 801178a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 801178e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011792:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8011796:	f107 0314 	add.w	r3, r7, #20
 801179a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 801179e:	2303      	movs	r3, #3
 80117a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80117a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80117a8:	2100      	movs	r1, #0
 80117aa:	4618      	mov	r0, r3
 80117ac:	f000 fcea 	bl	8012184 <hci_send_req>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	da01      	bge.n	80117ba <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80117b6:	23ff      	movs	r3, #255	; 0xff
 80117b8:	e017      	b.n	80117ea <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80117ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80117be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d005      	beq.n	80117d4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80117c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80117cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	e00a      	b.n	80117ea <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80117d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80117d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80117e6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd90      	pop	{r4, r7, pc}

080117f4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80117f4:	b5b0      	push	{r4, r5, r7, lr}
 80117f6:	b0cc      	sub	sp, #304	; 0x130
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	4605      	mov	r5, r0
 80117fc:	460c      	mov	r4, r1
 80117fe:	4610      	mov	r0, r2
 8011800:	4619      	mov	r1, r3
 8011802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011806:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801180a:	462a      	mov	r2, r5
 801180c:	801a      	strh	r2, [r3, #0]
 801180e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011816:	4622      	mov	r2, r4
 8011818:	801a      	strh	r2, [r3, #0]
 801181a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801181e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8011822:	4602      	mov	r2, r0
 8011824:	701a      	strb	r2, [r3, #0]
 8011826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801182a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 801182e:	460a      	mov	r2, r1
 8011830:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8011832:	f107 0310 	add.w	r3, r7, #16
 8011836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801183a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801183e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011842:	2200      	movs	r2, #0
 8011844:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011846:	2300      	movs	r3, #0
 8011848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 801184c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011850:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011854:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8011858:	8812      	ldrh	r2, [r2, #0]
 801185a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801185c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011860:	3302      	adds	r3, #2
 8011862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8011866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801186a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801186e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8011872:	8812      	ldrh	r2, [r2, #0]
 8011874:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8011876:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801187a:	3302      	adds	r3, #2
 801187c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8011880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011884:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011888:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 801188c:	7812      	ldrb	r2, [r2, #0]
 801188e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8011890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011894:	3301      	adds	r3, #1
 8011896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 801189a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801189e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80118a2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80118a6:	7812      	ldrb	r2, [r2, #0]
 80118a8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80118aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80118ae:	3301      	adds	r3, #1
 80118b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80118b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80118b8:	1d98      	adds	r0, r3, #6
 80118ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80118be:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	461a      	mov	r2, r3
 80118c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80118ca:	f000 fd8d 	bl	80123e8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80118ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80118d2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80118dc:	4413      	add	r3, r2
 80118de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80118e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118e6:	2218      	movs	r2, #24
 80118e8:	2100      	movs	r1, #0
 80118ea:	4618      	mov	r0, r3
 80118ec:	f000 fd8c 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 80118f0:	233f      	movs	r3, #63	; 0x3f
 80118f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80118f6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80118fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80118fe:	f107 0310 	add.w	r3, r7, #16
 8011902:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801190a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801190e:	f107 030f 	add.w	r3, r7, #15
 8011912:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011916:	2301      	movs	r3, #1
 8011918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801191c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011920:	2100      	movs	r1, #0
 8011922:	4618      	mov	r0, r3
 8011924:	f000 fc2e 	bl	8012184 <hci_send_req>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	da01      	bge.n	8011932 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 801192e:	23ff      	movs	r3, #255	; 0xff
 8011930:	e004      	b.n	801193c <aci_gatt_update_char_value+0x148>
  return status;
 8011932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011936:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801193a:	781b      	ldrb	r3, [r3, #0]
}
 801193c:	4618      	mov	r0, r3
 801193e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011942:	46bd      	mov	sp, r7
 8011944:	bdb0      	pop	{r4, r5, r7, pc}

08011946 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b0cc      	sub	sp, #304	; 0x130
 801194a:	af00      	add	r7, sp, #0
 801194c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8011954:	601a      	str	r2, [r3, #0]
 8011956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801195a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801195e:	4602      	mov	r2, r0
 8011960:	701a      	strb	r2, [r3, #0]
 8011962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011966:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801196a:	460a      	mov	r2, r1
 801196c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 801196e:	f107 0310 	add.w	r3, r7, #16
 8011972:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801197a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801197e:	2200      	movs	r2, #0
 8011980:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8011988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801198c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011990:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8011994:	7812      	ldrb	r2, [r2, #0]
 8011996:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011998:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801199c:	3301      	adds	r3, #1
 801199e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80119a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80119a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80119aa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80119ae:	7812      	ldrb	r2, [r2, #0]
 80119b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80119b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119b6:	3301      	adds	r3, #1
 80119b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80119bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80119c0:	1c98      	adds	r0, r3, #2
 80119c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80119c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80119ca:	781a      	ldrb	r2, [r3, #0]
 80119cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80119d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80119d4:	6819      	ldr	r1, [r3, #0]
 80119d6:	f000 fd07 	bl	80123e8 <Osal_MemCpy>
  index_input += Length;
 80119da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80119de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80119e8:	4413      	add	r3, r2
 80119ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80119ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119f2:	2218      	movs	r2, #24
 80119f4:	2100      	movs	r1, #0
 80119f6:	4618      	mov	r0, r3
 80119f8:	f000 fd06 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 80119fc:	233f      	movs	r3, #63	; 0x3f
 80119fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8011a02:	230c      	movs	r3, #12
 8011a04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011a08:	f107 0310 	add.w	r3, r7, #16
 8011a0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8011a18:	f107 030f 	add.w	r3, r7, #15
 8011a1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011a20:	2301      	movs	r3, #1
 8011a22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011a26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a2a:	2100      	movs	r1, #0
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f000 fba9 	bl	8012184 <hci_send_req>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	da01      	bge.n	8011a3c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8011a38:	23ff      	movs	r3, #255	; 0xff
 8011a3a:	e004      	b.n	8011a46 <aci_hal_write_config_data+0x100>
  return status;
 8011a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011a40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011a44:	781b      	ldrb	r3, [r3, #0]
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b0cc      	sub	sp, #304	; 0x130
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	4602      	mov	r2, r0
 8011a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011a5c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011a60:	701a      	strb	r2, [r3, #0]
 8011a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011a66:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011a6a:	460a      	mov	r2, r1
 8011a6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8011a6e:	f107 0310 	add.w	r3, r7, #16
 8011a72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011a7a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011a7e:	2200      	movs	r2, #0
 8011a80:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011a82:	2300      	movs	r3, #0
 8011a84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8011a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011a8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011a90:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8011a94:	7812      	ldrb	r2, [r2, #0]
 8011a96:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8011aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011aa6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011aaa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8011aae:	7812      	ldrb	r2, [r2, #0]
 8011ab0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8011ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011abc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ac0:	2218      	movs	r2, #24
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f000 fc9f 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011aca:	233f      	movs	r3, #63	; 0x3f
 8011acc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8011ad0:	230f      	movs	r3, #15
 8011ad2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011ad6:	f107 0310 	add.w	r3, r7, #16
 8011ada:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ae2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8011ae6:	f107 030f 	add.w	r3, r7, #15
 8011aea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011aee:	2301      	movs	r3, #1
 8011af0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011af4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011af8:	2100      	movs	r1, #0
 8011afa:	4618      	mov	r0, r3
 8011afc:	f000 fb42 	bl	8012184 <hci_send_req>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	da01      	bge.n	8011b0a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8011b06:	23ff      	movs	r3, #255	; 0xff
 8011b08:	e004      	b.n	8011b14 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8011b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011b0e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011b12:	781b      	ldrb	r3, [r3, #0]
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b0cc      	sub	sp, #304	; 0x130
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	4602      	mov	r2, r0
 8011b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011b2a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011b2e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8011b30:	f107 0310 	add.w	r3, r7, #16
 8011b34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011b3c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011b40:	2200      	movs	r2, #0
 8011b42:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011b44:	2300      	movs	r3, #0
 8011b46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8011b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011b4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011b52:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8011b56:	8812      	ldrh	r2, [r2, #0]
 8011b58:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b5e:	3302      	adds	r3, #2
 8011b60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011b64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b68:	2218      	movs	r2, #24
 8011b6a:	2100      	movs	r1, #0
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f000 fc4b 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011b72:	233f      	movs	r3, #63	; 0x3f
 8011b74:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8011b78:	2318      	movs	r3, #24
 8011b7a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011b7e:	f107 0310 	add.w	r3, r7, #16
 8011b82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8011b8e:	f107 030f 	add.w	r3, r7, #15
 8011b92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011b96:	2301      	movs	r3, #1
 8011b98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ba0:	2100      	movs	r1, #0
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f000 faee 	bl	8012184 <hci_send_req>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	da01      	bge.n	8011bb2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8011bae:	23ff      	movs	r3, #255	; 0xff
 8011bb0:	e004      	b.n	8011bbc <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8011bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011bb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011bba:	781b      	ldrb	r3, [r3, #0]
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b088      	sub	sp, #32
 8011bca:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011bd0:	f107 0308 	add.w	r3, r7, #8
 8011bd4:	2218      	movs	r2, #24
 8011bd6:	2100      	movs	r1, #0
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 fc15 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x03;
 8011bde:	2303      	movs	r3, #3
 8011be0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8011be2:	2303      	movs	r3, #3
 8011be4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8011be6:	1dfb      	adds	r3, r7, #7
 8011be8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8011bea:	2301      	movs	r3, #1
 8011bec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011bee:	f107 0308 	add.w	r3, r7, #8
 8011bf2:	2100      	movs	r1, #0
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f000 fac5 	bl	8012184 <hci_send_req>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	da01      	bge.n	8011c04 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8011c00:	23ff      	movs	r3, #255	; 0xff
 8011c02:	e000      	b.n	8011c06 <hci_reset+0x40>
  return status;
 8011c04:	79fb      	ldrb	r3, [r7, #7]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3720      	adds	r7, #32
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}

08011c0e <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8011c0e:	b580      	push	{r7, lr}
 8011c10:	b0ce      	sub	sp, #312	; 0x138
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8011c1c:	6019      	str	r1, [r3, #0]
 8011c1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8011c26:	601a      	str	r2, [r3, #0]
 8011c28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011c2c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011c30:	4602      	mov	r2, r0
 8011c32:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8011c34:	f107 0318 	add.w	r3, r7, #24
 8011c38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011c3c:	f107 0310 	add.w	r3, r7, #16
 8011c40:	2205      	movs	r2, #5
 8011c42:	2100      	movs	r1, #0
 8011c44:	4618      	mov	r0, r3
 8011c46:	f000 fbdf 	bl	8012408 <Osal_MemSet>
  int index_input = 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8011c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c54:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8011c58:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8011c5c:	8812      	ldrh	r2, [r2, #0]
 8011c5e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011c60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011c64:	3302      	adds	r3, #2
 8011c66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011c6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011c6e:	2218      	movs	r2, #24
 8011c70:	2100      	movs	r1, #0
 8011c72:	4618      	mov	r0, r3
 8011c74:	f000 fbc8 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x08;
 8011c78:	2308      	movs	r3, #8
 8011c7a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8011c7e:	2330      	movs	r3, #48	; 0x30
 8011c80:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8011c84:	f107 0318 	add.w	r3, r7, #24
 8011c88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8011c8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011c90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8011c94:	f107 0310 	add.w	r3, r7, #16
 8011c98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8011c9c:	2305      	movs	r3, #5
 8011c9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011ca2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f000 fa6b 	bl	8012184 <hci_send_req>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	da01      	bge.n	8011cb8 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8011cb4:	23ff      	movs	r3, #255	; 0xff
 8011cb6:	e023      	b.n	8011d00 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 8011cb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cbc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d005      	beq.n	8011cd2 <hci_le_read_phy+0xc4>
    return resp.Status;
 8011cc6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	e016      	b.n	8011d00 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8011cd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cd6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011cda:	78da      	ldrb	r2, [r3, #3]
 8011cdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8011ce8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8011cf0:	791a      	ldrb	r2, [r3, #4]
 8011cf2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011cf6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8011cfe:	2300      	movs	r3, #0
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8011d0a:	b590      	push	{r4, r7, lr}
 8011d0c:	b0cd      	sub	sp, #308	; 0x134
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	4604      	mov	r4, r0
 8011d12:	4608      	mov	r0, r1
 8011d14:	4611      	mov	r1, r2
 8011d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011d1a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8011d1e:	4622      	mov	r2, r4
 8011d20:	701a      	strb	r2, [r3, #0]
 8011d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011d26:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	701a      	strb	r2, [r3, #0]
 8011d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011d32:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8011d36:	460a      	mov	r2, r1
 8011d38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8011d3a:	f107 0310 	add.w	r3, r7, #16
 8011d3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011d46:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8011d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011d58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011d5c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8011d60:	7812      	ldrb	r2, [r2, #0]
 8011d62:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011d68:	3301      	adds	r3, #1
 8011d6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8011d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011d72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011d76:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8011d7a:	7812      	ldrb	r2, [r2, #0]
 8011d7c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8011d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011d82:	3301      	adds	r3, #1
 8011d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8011d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011d8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011d90:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8011d94:	7812      	ldrb	r2, [r2, #0]
 8011d96:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8011d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011da6:	2218      	movs	r2, #24
 8011da8:	2100      	movs	r1, #0
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 fb2c 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x08;
 8011db0:	2308      	movs	r3, #8
 8011db2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8011db6:	2331      	movs	r3, #49	; 0x31
 8011db8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011dbc:	f107 0310 	add.w	r3, r7, #16
 8011dc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011dc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8011dcc:	f107 030f 	add.w	r3, r7, #15
 8011dd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011dde:	2100      	movs	r1, #0
 8011de0:	4618      	mov	r0, r3
 8011de2:	f000 f9cf 	bl	8012184 <hci_send_req>
 8011de6:	4603      	mov	r3, r0
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	da01      	bge.n	8011df0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8011dec:	23ff      	movs	r3, #255	; 0xff
 8011dee:	e004      	b.n	8011dfa <hci_le_set_default_phy+0xf0>
  return status;
 8011df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011df4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011df8:	781b      	ldrb	r3, [r3, #0]
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd90      	pop	{r4, r7, pc}

08011e04 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8011e04:	b5b0      	push	{r4, r5, r7, lr}
 8011e06:	b0cc      	sub	sp, #304	; 0x130
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	4605      	mov	r5, r0
 8011e0c:	460c      	mov	r4, r1
 8011e0e:	4610      	mov	r0, r2
 8011e10:	4619      	mov	r1, r3
 8011e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e16:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8011e1a:	462a      	mov	r2, r5
 8011e1c:	801a      	strh	r2, [r3, #0]
 8011e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011e26:	4622      	mov	r2, r4
 8011e28:	801a      	strh	r2, [r3, #0]
 8011e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e2e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8011e32:	4602      	mov	r2, r0
 8011e34:	801a      	strh	r2, [r3, #0]
 8011e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8011e3e:	460a      	mov	r2, r1
 8011e40:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8011e42:	f107 0310 	add.w	r3, r7, #16
 8011e46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011e4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011e52:	2200      	movs	r2, #0
 8011e54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011e56:	2300      	movs	r3, #0
 8011e58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8011e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011e60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011e64:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8011e68:	8812      	ldrh	r2, [r2, #0]
 8011e6a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011e70:	3302      	adds	r3, #2
 8011e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8011e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011e7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011e7e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8011e82:	8812      	ldrh	r2, [r2, #0]
 8011e84:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8011e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011e8a:	3302      	adds	r3, #2
 8011e8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8011e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011e94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011e98:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8011e9c:	8812      	ldrh	r2, [r2, #0]
 8011e9e:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8011ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ea4:	3302      	adds	r3, #2
 8011ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 8011eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011eae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8011eb2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8011eb6:	8812      	ldrh	r2, [r2, #0]
 8011eb8:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8011eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ebe:	3302      	adds	r3, #2
 8011ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8011ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011ec8:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8011ecc:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8011ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ed2:	3302      	adds	r3, #2
 8011ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011ed8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011edc:	2218      	movs	r2, #24
 8011ede:	2100      	movs	r1, #0
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f000 fa91 	bl	8012408 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011ee6:	233f      	movs	r3, #63	; 0x3f
 8011ee8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8011eec:	f240 1381 	movw	r3, #385	; 0x181
 8011ef0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8011ef4:	230f      	movs	r3, #15
 8011ef6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8011efa:	f107 0310 	add.w	r3, r7, #16
 8011efe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011f02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011f06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8011f0a:	f107 030f 	add.w	r3, r7, #15
 8011f0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011f12:	2301      	movs	r3, #1
 8011f14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011f18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f000 f930 	bl	8012184 <hci_send_req>
 8011f24:	4603      	mov	r3, r0
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	da01      	bge.n	8011f2e <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8011f2a:	23ff      	movs	r3, #255	; 0xff
 8011f2c:	e004      	b.n	8011f38 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8011f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011f32:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8011f36:	781b      	ldrb	r3, [r3, #0]
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011f44 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b086      	sub	sp, #24
 8011f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8011f4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f50:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8011f52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f54:	b672      	cpsid	i
}
 8011f56:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8011f58:	1cbb      	adds	r3, r7, #2
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	4812      	ldr	r0, [pc, #72]	; (8011fa8 <DbgTrace_TxCpltCallback+0x64>)
 8011f5e:	f001 f8fc 	bl	801315a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8011f62:	1cbb      	adds	r3, r7, #2
 8011f64:	4619      	mov	r1, r3
 8011f66:	4810      	ldr	r0, [pc, #64]	; (8011fa8 <DbgTrace_TxCpltCallback+0x64>)
 8011f68:	f001 f9e8 	bl	801333c <CircularQueue_Sense>
 8011f6c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d00c      	beq.n	8011f8e <DbgTrace_TxCpltCallback+0x4a>
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	f383 8810 	msr	PRIMASK, r3
}
 8011f7e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8011f80:	887b      	ldrh	r3, [r7, #2]
 8011f82:	4a0a      	ldr	r2, [pc, #40]	; (8011fac <DbgTrace_TxCpltCallback+0x68>)
 8011f84:	4619      	mov	r1, r3
 8011f86:	6938      	ldr	r0, [r7, #16]
 8011f88:	f7f0 f941 	bl	800220e <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8011f8c:	e008      	b.n	8011fa0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8011f8e:	4b08      	ldr	r3, [pc, #32]	; (8011fb0 <DbgTrace_TxCpltCallback+0x6c>)
 8011f90:	2201      	movs	r2, #1
 8011f92:	701a      	strb	r2, [r3, #0]
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f383 8810 	msr	PRIMASK, r3
}
 8011f9e:	bf00      	nop
}
 8011fa0:	bf00      	nop
 8011fa2:	3718      	adds	r7, #24
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	200024d0 	.word	0x200024d0
 8011fac:	08011f45 	.word	0x08011f45
 8011fb0:	2000007d 	.word	0x2000007d

08011fb4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8011fba:	f7f0 f922 	bl	8002202 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8011fbe:	2302      	movs	r3, #2
 8011fc0:	9300      	str	r3, [sp, #0]
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011fc8:	4903      	ldr	r1, [pc, #12]	; (8011fd8 <DbgTraceInit+0x24>)
 8011fca:	4804      	ldr	r0, [pc, #16]	; (8011fdc <DbgTraceInit+0x28>)
 8011fcc:	f000 fe6c 	bl	8012ca8 <CircularQueue_Init>
#endif 
#endif
  return;
 8011fd0:	bf00      	nop
}
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	200024f0 	.word	0x200024f0
 8011fdc:	200024d0 	.word	0x200024d0

08011fe0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	68b9      	ldr	r1, [r7, #8]
 8011ff0:	68f8      	ldr	r0, [r7, #12]
 8011ff2:	f000 f805 	bl	8012000 <DbgTraceWrite>
 8011ff6:	4603      	mov	r3, r0
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3710      	adds	r7, #16
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b08a      	sub	sp, #40	; 0x28
 8012004:	af00      	add	r7, sp, #0
 8012006:	60f8      	str	r0, [r7, #12]
 8012008:	60b9      	str	r1, [r7, #8]
 801200a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 801200c:	2300      	movs	r3, #0
 801200e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012010:	f3ef 8310 	mrs	r3, PRIMASK
 8012014:	61bb      	str	r3, [r7, #24]
  return(result);
 8012016:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8012018:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012020:	d102      	bne.n	8012028 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8012022:	2300      	movs	r3, #0
 8012024:	627b      	str	r3, [r7, #36]	; 0x24
 8012026:	e037      	b.n	8012098 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	2b01      	cmp	r3, #1
 801202c:	d006      	beq.n	801203c <DbgTraceWrite+0x3c>
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	2b02      	cmp	r3, #2
 8012032:	d003      	beq.n	801203c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8012034:	f04f 33ff 	mov.w	r3, #4294967295
 8012038:	627b      	str	r3, [r7, #36]	; 0x24
 801203a:	e02d      	b.n	8012098 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d02a      	beq.n	8012098 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8012046:	b672      	cpsid	i
}
 8012048:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	b29a      	uxth	r2, r3
 801204e:	2301      	movs	r3, #1
 8012050:	68b9      	ldr	r1, [r7, #8]
 8012052:	4814      	ldr	r0, [pc, #80]	; (80120a4 <DbgTraceWrite+0xa4>)
 8012054:	f000 fe5a 	bl	8012d0c <CircularQueue_Add>
 8012058:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 801205a:	69fb      	ldr	r3, [r7, #28]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d015      	beq.n	801208c <DbgTraceWrite+0x8c>
 8012060:	4b11      	ldr	r3, [pc, #68]	; (80120a8 <DbgTraceWrite+0xa8>)
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	b2db      	uxtb	r3, r3
 8012066:	2b00      	cmp	r3, #0
 8012068:	d010      	beq.n	801208c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 801206a:	4b0f      	ldr	r3, [pc, #60]	; (80120a8 <DbgTraceWrite+0xa8>)
 801206c:	2200      	movs	r2, #0
 801206e:	701a      	strb	r2, [r3, #0]
 8012070:	6a3b      	ldr	r3, [r7, #32]
 8012072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	f383 8810 	msr	PRIMASK, r3
}
 801207a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	b29b      	uxth	r3, r3
 8012080:	4a0a      	ldr	r2, [pc, #40]	; (80120ac <DbgTraceWrite+0xac>)
 8012082:	4619      	mov	r1, r3
 8012084:	69f8      	ldr	r0, [r7, #28]
 8012086:	f7f0 f8c2 	bl	800220e <DbgOutputTraces>
 801208a:	e005      	b.n	8012098 <DbgTraceWrite+0x98>
 801208c:	6a3b      	ldr	r3, [r7, #32]
 801208e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	f383 8810 	msr	PRIMASK, r3
}
 8012096:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8012098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801209a:	4618      	mov	r0, r3
 801209c:	3728      	adds	r7, #40	; 0x28
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	200024d0 	.word	0x200024d0
 80120a8:	2000007d 	.word	0x2000007d
 80120ac:	08011f45 	.word	0x08011f45

080120b0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	4a08      	ldr	r2, [pc, #32]	; (80120e0 <hci_init+0x30>)
 80120c0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80120c2:	4a08      	ldr	r2, [pc, #32]	; (80120e4 <hci_init+0x34>)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80120c8:	4806      	ldr	r0, [pc, #24]	; (80120e4 <hci_init+0x34>)
 80120ca:	f000 f979 	bl	80123c0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f000 f8da 	bl	801228c <TlInit>

  return;
 80120d8:	bf00      	nop
}
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	20003518 	.word	0x20003518
 80120e4:	200034f0 	.word	0x200034f0

080120e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80120ee:	4822      	ldr	r0, [pc, #136]	; (8012178 <hci_user_evt_proc+0x90>)
 80120f0:	f000 fd2c 	bl	8012b4c <LST_is_empty>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d12b      	bne.n	8012152 <hci_user_evt_proc+0x6a>
 80120fa:	4b20      	ldr	r3, [pc, #128]	; (801217c <hci_user_evt_proc+0x94>)
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d027      	beq.n	8012152 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8012102:	f107 030c 	add.w	r3, r7, #12
 8012106:	4619      	mov	r1, r3
 8012108:	481b      	ldr	r0, [pc, #108]	; (8012178 <hci_user_evt_proc+0x90>)
 801210a:	f000 fdae 	bl	8012c6a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801210e:	4b1c      	ldr	r3, [pc, #112]	; (8012180 <hci_user_evt_proc+0x98>)
 8012110:	69db      	ldr	r3, [r3, #28]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d00c      	beq.n	8012130 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801211a:	2301      	movs	r3, #1
 801211c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801211e:	4b18      	ldr	r3, [pc, #96]	; (8012180 <hci_user_evt_proc+0x98>)
 8012120:	69db      	ldr	r3, [r3, #28]
 8012122:	1d3a      	adds	r2, r7, #4
 8012124:	4610      	mov	r0, r2
 8012126:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8012128:	793a      	ldrb	r2, [r7, #4]
 801212a:	4b14      	ldr	r3, [pc, #80]	; (801217c <hci_user_evt_proc+0x94>)
 801212c:	701a      	strb	r2, [r3, #0]
 801212e:	e002      	b.n	8012136 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8012130:	4b12      	ldr	r3, [pc, #72]	; (801217c <hci_user_evt_proc+0x94>)
 8012132:	2201      	movs	r2, #1
 8012134:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8012136:	4b11      	ldr	r3, [pc, #68]	; (801217c <hci_user_evt_proc+0x94>)
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d004      	beq.n	8012148 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	4618      	mov	r0, r3
 8012142:	f001 fc53 	bl	80139ec <TL_MM_EvtDone>
 8012146:	e004      	b.n	8012152 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	4619      	mov	r1, r3
 801214c:	480a      	ldr	r0, [pc, #40]	; (8012178 <hci_user_evt_proc+0x90>)
 801214e:	f000 fd1f 	bl	8012b90 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8012152:	4809      	ldr	r0, [pc, #36]	; (8012178 <hci_user_evt_proc+0x90>)
 8012154:	f000 fcfa 	bl	8012b4c <LST_is_empty>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d107      	bne.n	801216e <hci_user_evt_proc+0x86>
 801215e:	4b07      	ldr	r3, [pc, #28]	; (801217c <hci_user_evt_proc+0x94>)
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d003      	beq.n	801216e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8012166:	4804      	ldr	r0, [pc, #16]	; (8012178 <hci_user_evt_proc+0x90>)
 8012168:	f7f3 fdc8 	bl	8005cfc <hci_notify_asynch_evt>
  }


  return;
 801216c:	bf00      	nop
 801216e:	bf00      	nop
}
 8012170:	3710      	adds	r7, #16
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	20000254 	.word	0x20000254
 801217c:	20000260 	.word	0x20000260
 8012180:	200034f0 	.word	0x200034f0

08012184 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b088      	sub	sp, #32
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	460b      	mov	r3, r1
 801218e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8012190:	2000      	movs	r0, #0
 8012192:	f000 f8d1 	bl	8012338 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8012196:	2300      	movs	r3, #0
 8012198:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	885b      	ldrh	r3, [r3, #2]
 801219e:	b21b      	sxth	r3, r3
 80121a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80121a4:	b21a      	sxth	r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	881b      	ldrh	r3, [r3, #0]
 80121aa:	029b      	lsls	r3, r3, #10
 80121ac:	b21b      	sxth	r3, r3
 80121ae:	4313      	orrs	r3, r2
 80121b0:	b21b      	sxth	r3, r3
 80121b2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80121b4:	4b33      	ldr	r3, [pc, #204]	; (8012284 <hci_send_req+0x100>)
 80121b6:	2201      	movs	r2, #1
 80121b8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	68db      	ldr	r3, [r3, #12]
 80121be:	b2d9      	uxtb	r1, r3
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	689a      	ldr	r2, [r3, #8]
 80121c4:	8bbb      	ldrh	r3, [r7, #28]
 80121c6:	4618      	mov	r0, r3
 80121c8:	f000 f890 	bl	80122ec <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80121cc:	e04e      	b.n	801226c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80121ce:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80121d2:	f7f3 fdaa 	bl	8005d2a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80121d6:	e043      	b.n	8012260 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80121d8:	f107 030c 	add.w	r3, r7, #12
 80121dc:	4619      	mov	r1, r3
 80121de:	482a      	ldr	r0, [pc, #168]	; (8012288 <hci_send_req+0x104>)
 80121e0:	f000 fd43 	bl	8012c6a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	7a5b      	ldrb	r3, [r3, #9]
 80121e8:	2b0f      	cmp	r3, #15
 80121ea:	d114      	bne.n	8012216 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	330b      	adds	r3, #11
 80121f0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80121f2:	693b      	ldr	r3, [r7, #16]
 80121f4:	885b      	ldrh	r3, [r3, #2]
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	8bba      	ldrh	r2, [r7, #28]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d104      	bne.n	8012208 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	691b      	ldr	r3, [r3, #16]
 8012202:	693a      	ldr	r2, [r7, #16]
 8012204:	7812      	ldrb	r2, [r2, #0]
 8012206:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	785b      	ldrb	r3, [r3, #1]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d027      	beq.n	8012260 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8012210:	2301      	movs	r3, #1
 8012212:	77fb      	strb	r3, [r7, #31]
 8012214:	e024      	b.n	8012260 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	330b      	adds	r3, #11
 801221a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012222:	b29b      	uxth	r3, r3
 8012224:	8bba      	ldrh	r2, [r7, #28]
 8012226:	429a      	cmp	r2, r3
 8012228:	d114      	bne.n	8012254 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	7a9b      	ldrb	r3, [r3, #10]
 801222e:	3b03      	subs	r3, #3
 8012230:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	695a      	ldr	r2, [r3, #20]
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	429a      	cmp	r2, r3
 801223a:	bfa8      	it	ge
 801223c:	461a      	movge	r2, r3
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6918      	ldr	r0, [r3, #16]
 8012246:	69bb      	ldr	r3, [r7, #24]
 8012248:	1cd9      	adds	r1, r3, #3
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	695b      	ldr	r3, [r3, #20]
 801224e:	461a      	mov	r2, r3
 8012250:	f002 fe05 	bl	8014e5e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8012254:	69bb      	ldr	r3, [r7, #24]
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d001      	beq.n	8012260 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801225c:	2301      	movs	r3, #1
 801225e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8012260:	4809      	ldr	r0, [pc, #36]	; (8012288 <hci_send_req+0x104>)
 8012262:	f000 fc73 	bl	8012b4c <LST_is_empty>
 8012266:	4603      	mov	r3, r0
 8012268:	2b00      	cmp	r3, #0
 801226a:	d0b5      	beq.n	80121d8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801226c:	7ffb      	ldrb	r3, [r7, #31]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d0ad      	beq.n	80121ce <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8012272:	2001      	movs	r0, #1
 8012274:	f000 f860 	bl	8012338 <NotifyCmdStatus>

  return 0;
 8012278:	2300      	movs	r3, #0
}
 801227a:	4618      	mov	r0, r3
 801227c:	3720      	adds	r7, #32
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	2000351c 	.word	0x2000351c
 8012288:	20003510 	.word	0x20003510

0801228c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8012294:	480f      	ldr	r0, [pc, #60]	; (80122d4 <TlInit+0x48>)
 8012296:	f000 fc49 	bl	8012b2c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801229a:	4a0f      	ldr	r2, [pc, #60]	; (80122d8 <TlInit+0x4c>)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80122a0:	480e      	ldr	r0, [pc, #56]	; (80122dc <TlInit+0x50>)
 80122a2:	f000 fc43 	bl	8012b2c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80122a6:	4b0e      	ldr	r3, [pc, #56]	; (80122e0 <TlInit+0x54>)
 80122a8:	2201      	movs	r2, #1
 80122aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80122ac:	4b0d      	ldr	r3, [pc, #52]	; (80122e4 <TlInit+0x58>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00a      	beq.n	80122ca <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80122b8:	4b0b      	ldr	r3, [pc, #44]	; (80122e8 <TlInit+0x5c>)
 80122ba:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80122bc:	4b09      	ldr	r3, [pc, #36]	; (80122e4 <TlInit+0x58>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	f107 0208 	add.w	r2, r7, #8
 80122c4:	4610      	mov	r0, r2
 80122c6:	4798      	blx	r3
  }

  return;
 80122c8:	bf00      	nop
 80122ca:	bf00      	nop
}
 80122cc:	3718      	adds	r7, #24
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
 80122d2:	bf00      	nop
 80122d4:	20003510 	.word	0x20003510
 80122d8:	2000025c 	.word	0x2000025c
 80122dc:	20000254 	.word	0x20000254
 80122e0:	20000260 	.word	0x20000260
 80122e4:	200034f0 	.word	0x200034f0
 80122e8:	08012379 	.word	0x08012379

080122ec <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	4603      	mov	r3, r0
 80122f4:	603a      	str	r2, [r7, #0]
 80122f6:	80fb      	strh	r3, [r7, #6]
 80122f8:	460b      	mov	r3, r1
 80122fa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80122fc:	4b0c      	ldr	r3, [pc, #48]	; (8012330 <SendCmd+0x44>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	88fa      	ldrh	r2, [r7, #6]
 8012302:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8012306:	4b0a      	ldr	r3, [pc, #40]	; (8012330 <SendCmd+0x44>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	797a      	ldrb	r2, [r7, #5]
 801230c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801230e:	4b08      	ldr	r3, [pc, #32]	; (8012330 <SendCmd+0x44>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	330c      	adds	r3, #12
 8012314:	797a      	ldrb	r2, [r7, #5]
 8012316:	6839      	ldr	r1, [r7, #0]
 8012318:	4618      	mov	r0, r3
 801231a:	f002 fda0 	bl	8014e5e <memcpy>

  hciContext.io.Send(0,0);
 801231e:	4b05      	ldr	r3, [pc, #20]	; (8012334 <SendCmd+0x48>)
 8012320:	691b      	ldr	r3, [r3, #16]
 8012322:	2100      	movs	r1, #0
 8012324:	2000      	movs	r0, #0
 8012326:	4798      	blx	r3

  return;
 8012328:	bf00      	nop
}
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	2000025c 	.word	0x2000025c
 8012334:	200034f0 	.word	0x200034f0

08012338 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	4603      	mov	r3, r0
 8012340:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8012342:	79fb      	ldrb	r3, [r7, #7]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d108      	bne.n	801235a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8012348:	4b0a      	ldr	r3, [pc, #40]	; (8012374 <NotifyCmdStatus+0x3c>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00d      	beq.n	801236c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8012350:	4b08      	ldr	r3, [pc, #32]	; (8012374 <NotifyCmdStatus+0x3c>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2000      	movs	r0, #0
 8012356:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8012358:	e008      	b.n	801236c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801235a:	4b06      	ldr	r3, [pc, #24]	; (8012374 <NotifyCmdStatus+0x3c>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d004      	beq.n	801236c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8012362:	4b04      	ldr	r3, [pc, #16]	; (8012374 <NotifyCmdStatus+0x3c>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	2001      	movs	r0, #1
 8012368:	4798      	blx	r3
  return;
 801236a:	bf00      	nop
 801236c:	bf00      	nop
}
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	20003518 	.word	0x20003518

08012378 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	7a5b      	ldrb	r3, [r3, #9]
 8012384:	2b0f      	cmp	r3, #15
 8012386:	d003      	beq.n	8012390 <TlEvtReceived+0x18>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	7a5b      	ldrb	r3, [r3, #9]
 801238c:	2b0e      	cmp	r3, #14
 801238e:	d107      	bne.n	80123a0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8012390:	6879      	ldr	r1, [r7, #4]
 8012392:	4809      	ldr	r0, [pc, #36]	; (80123b8 <TlEvtReceived+0x40>)
 8012394:	f000 fc22 	bl	8012bdc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8012398:	2000      	movs	r0, #0
 801239a:	f7f3 fcbb 	bl	8005d14 <hci_cmd_resp_release>
 801239e:	e006      	b.n	80123ae <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80123a0:	6879      	ldr	r1, [r7, #4]
 80123a2:	4806      	ldr	r0, [pc, #24]	; (80123bc <TlEvtReceived+0x44>)
 80123a4:	f000 fc1a 	bl	8012bdc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80123a8:	4804      	ldr	r0, [pc, #16]	; (80123bc <TlEvtReceived+0x44>)
 80123aa:	f7f3 fca7 	bl	8005cfc <hci_notify_asynch_evt>
  }

  return;
 80123ae:	bf00      	nop
}
 80123b0:	3708      	adds	r7, #8
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	20003510 	.word	0x20003510
 80123bc:	20000254 	.word	0x20000254

080123c0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80123c0:	b480      	push	{r7}
 80123c2:	b083      	sub	sp, #12
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	4a05      	ldr	r2, [pc, #20]	; (80123e0 <hci_register_io_bus+0x20>)
 80123cc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	4a04      	ldr	r2, [pc, #16]	; (80123e4 <hci_register_io_bus+0x24>)
 80123d2:	611a      	str	r2, [r3, #16]

  return;
 80123d4:	bf00      	nop
}
 80123d6:	370c      	adds	r7, #12
 80123d8:	46bd      	mov	sp, r7
 80123da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123de:	4770      	bx	lr
 80123e0:	08013765 	.word	0x08013765
 80123e4:	080137cd 	.word	0x080137cd

080123e8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	60f8      	str	r0, [r7, #12]
 80123f0:	60b9      	str	r1, [r7, #8]
 80123f2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	68b9      	ldr	r1, [r7, #8]
 80123f8:	68f8      	ldr	r0, [r7, #12]
 80123fa:	f002 fd30 	bl	8014e5e <memcpy>
 80123fe:	4603      	mov	r3, r0
}
 8012400:	4618      	mov	r0, r3
 8012402:	3710      	adds	r7, #16
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b084      	sub	sp, #16
 801240c:	af00      	add	r7, sp, #0
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	60b9      	str	r1, [r7, #8]
 8012412:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	68b9      	ldr	r1, [r7, #8]
 8012418:	68f8      	ldr	r0, [r7, #12]
 801241a:	f002 fca1 	bl	8014d60 <memset>
 801241e:	4603      	mov	r3, r0
}
 8012420:	4618      	mov	r0, r3
 8012422:	3710      	adds	r7, #16
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8012428:	b480      	push	{r7}
 801242a:	b085      	sub	sp, #20
 801242c:	af00      	add	r7, sp, #0
 801242e:	4603      	mov	r3, r0
 8012430:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8012432:	4b0f      	ldr	r3, [pc, #60]	; (8012470 <OTP_Read+0x48>)
 8012434:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8012436:	e002      	b.n	801243e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	3b08      	subs	r3, #8
 801243c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	3307      	adds	r3, #7
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	79fa      	ldrb	r2, [r7, #7]
 8012446:	429a      	cmp	r2, r3
 8012448:	d003      	beq.n	8012452 <OTP_Read+0x2a>
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	4a09      	ldr	r2, [pc, #36]	; (8012474 <OTP_Read+0x4c>)
 801244e:	4293      	cmp	r3, r2
 8012450:	d1f2      	bne.n	8012438 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	3307      	adds	r3, #7
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	79fa      	ldrb	r2, [r7, #7]
 801245a:	429a      	cmp	r2, r3
 801245c:	d001      	beq.n	8012462 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801245e:	2300      	movs	r3, #0
 8012460:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8012462:	68fb      	ldr	r3, [r7, #12]
}
 8012464:	4618      	mov	r0, r3
 8012466:	3714      	adds	r7, #20
 8012468:	46bd      	mov	sp, r7
 801246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246e:	4770      	bx	lr
 8012470:	1fff73f8 	.word	0x1fff73f8
 8012474:	1fff7000 	.word	0x1fff7000

08012478 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b08a      	sub	sp, #40	; 0x28
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8012480:	2300      	movs	r3, #0
 8012482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	3301      	adds	r3, #1
 801248a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 801248c:	6a3b      	ldr	r3, [r7, #32]
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	2bff      	cmp	r3, #255	; 0xff
 8012492:	d14f      	bne.n	8012534 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8012494:	6a3b      	ldr	r3, [r7, #32]
 8012496:	3302      	adds	r3, #2
 8012498:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	881b      	ldrh	r3, [r3, #0]
 801249e:	b29b      	uxth	r3, r3
 80124a0:	461a      	mov	r2, r3
 80124a2:	f640 4301 	movw	r3, #3073	; 0xc01
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d140      	bne.n	801252c <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	3302      	adds	r3, #2
 80124ae:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	885b      	ldrh	r3, [r3, #2]
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	461a      	mov	r2, r3
 80124b8:	4b22      	ldr	r3, [pc, #136]	; (8012544 <PeerToPeer_Event_Handler+0xcc>)
 80124ba:	889b      	ldrh	r3, [r3, #4]
 80124bc:	3302      	adds	r3, #2
 80124be:	429a      	cmp	r2, r3
 80124c0:	d118      	bne.n	80124f4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 80124c2:	2301      	movs	r3, #1
 80124c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 80124c8:	69bb      	ldr	r3, [r7, #24]
 80124ca:	7a1b      	ldrb	r3, [r3, #8]
 80124cc:	f003 0301 	and.w	r3, r3, #1
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d007      	beq.n	80124e4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80124d4:	2300      	movs	r3, #0
 80124d6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80124d8:	f107 0308 	add.w	r3, r7, #8
 80124dc:	4618      	mov	r0, r3
 80124de:	f7f3 fc69 	bl	8005db4 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 80124e2:	e025      	b.n	8012530 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80124e4:	2301      	movs	r3, #1
 80124e6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80124e8:	f107 0308 	add.w	r3, r7, #8
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7f3 fc61 	bl	8005db4 <P2PS_STM_App_Notification>
        break;
 80124f2:	e01d      	b.n	8012530 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80124f4:	69bb      	ldr	r3, [r7, #24]
 80124f6:	885b      	ldrh	r3, [r3, #2]
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	461a      	mov	r2, r3
 80124fc:	4b11      	ldr	r3, [pc, #68]	; (8012544 <PeerToPeer_Event_Handler+0xcc>)
 80124fe:	885b      	ldrh	r3, [r3, #2]
 8012500:	3301      	adds	r3, #1
 8012502:	429a      	cmp	r2, r3
 8012504:	d114      	bne.n	8012530 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8012506:	4810      	ldr	r0, [pc, #64]	; (8012548 <PeerToPeer_Event_Handler+0xd0>)
 8012508:	f002 fb4a 	bl	8014ba0 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 801250c:	2303      	movs	r3, #3
 801250e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	88db      	ldrh	r3, [r3, #6]
 8012514:	b29b      	uxth	r3, r3
 8012516:	b2db      	uxtb	r3, r3
 8012518:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 801251a:	69bb      	ldr	r3, [r7, #24]
 801251c:	3308      	adds	r3, #8
 801251e:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8012520:	f107 0308 	add.w	r3, r7, #8
 8012524:	4618      	mov	r0, r3
 8012526:	f7f3 fc45 	bl	8005db4 <P2PS_STM_App_Notification>
        break;
 801252a:	e001      	b.n	8012530 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 801252c:	bf00      	nop
 801252e:	e002      	b.n	8012536 <PeerToPeer_Event_Handler+0xbe>
        break;
 8012530:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8012532:	e000      	b.n	8012536 <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 8012534:	bf00      	nop
  }

  return(return_value);
 8012536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 801253a:	4618      	mov	r0, r3
 801253c:	3728      	adds	r7, #40	; 0x28
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	20000264 	.word	0x20000264
 8012548:	08018758 	.word	0x08018758

0801254c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b08a      	sub	sp, #40	; 0x28
 8012550:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8012552:	484a      	ldr	r0, [pc, #296]	; (801267c <P2PS_STM_Init+0x130>)
 8012554:	f001 f858 	bl	8013608 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8012558:	238f      	movs	r3, #143	; 0x8f
 801255a:	703b      	strb	r3, [r7, #0]
 801255c:	23e5      	movs	r3, #229	; 0xe5
 801255e:	707b      	strb	r3, [r7, #1]
 8012560:	23b3      	movs	r3, #179	; 0xb3
 8012562:	70bb      	strb	r3, [r7, #2]
 8012564:	23d5      	movs	r3, #213	; 0xd5
 8012566:	70fb      	strb	r3, [r7, #3]
 8012568:	232e      	movs	r3, #46	; 0x2e
 801256a:	713b      	strb	r3, [r7, #4]
 801256c:	237f      	movs	r3, #127	; 0x7f
 801256e:	717b      	strb	r3, [r7, #5]
 8012570:	234a      	movs	r3, #74	; 0x4a
 8012572:	71bb      	strb	r3, [r7, #6]
 8012574:	2398      	movs	r3, #152	; 0x98
 8012576:	71fb      	strb	r3, [r7, #7]
 8012578:	232a      	movs	r3, #42	; 0x2a
 801257a:	723b      	strb	r3, [r7, #8]
 801257c:	2348      	movs	r3, #72	; 0x48
 801257e:	727b      	strb	r3, [r7, #9]
 8012580:	237a      	movs	r3, #122	; 0x7a
 8012582:	72bb      	strb	r3, [r7, #10]
 8012584:	23cc      	movs	r3, #204	; 0xcc
 8012586:	72fb      	strb	r3, [r7, #11]
 8012588:	2340      	movs	r3, #64	; 0x40
 801258a:	733b      	strb	r3, [r7, #12]
 801258c:	23fe      	movs	r3, #254	; 0xfe
 801258e:	737b      	strb	r3, [r7, #13]
 8012590:	2300      	movs	r3, #0
 8012592:	73bb      	strb	r3, [r7, #14]
 8012594:	2300      	movs	r3, #0
 8012596:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8012598:	4639      	mov	r1, r7
 801259a:	4b39      	ldr	r3, [pc, #228]	; (8012680 <P2PS_STM_Init+0x134>)
 801259c:	9300      	str	r3, [sp, #0]
 801259e:	2306      	movs	r3, #6
 80125a0:	2201      	movs	r2, #1
 80125a2:	2002      	movs	r0, #2
 80125a4:	f7fe ff48 	bl	8011438 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80125a8:	2319      	movs	r3, #25
 80125aa:	703b      	strb	r3, [r7, #0]
 80125ac:	23ed      	movs	r3, #237	; 0xed
 80125ae:	707b      	strb	r3, [r7, #1]
 80125b0:	2382      	movs	r3, #130	; 0x82
 80125b2:	70bb      	strb	r3, [r7, #2]
 80125b4:	23ae      	movs	r3, #174	; 0xae
 80125b6:	70fb      	strb	r3, [r7, #3]
 80125b8:	23ed      	movs	r3, #237	; 0xed
 80125ba:	713b      	strb	r3, [r7, #4]
 80125bc:	2321      	movs	r3, #33	; 0x21
 80125be:	717b      	strb	r3, [r7, #5]
 80125c0:	234c      	movs	r3, #76	; 0x4c
 80125c2:	71bb      	strb	r3, [r7, #6]
 80125c4:	239d      	movs	r3, #157	; 0x9d
 80125c6:	71fb      	strb	r3, [r7, #7]
 80125c8:	2341      	movs	r3, #65	; 0x41
 80125ca:	723b      	strb	r3, [r7, #8]
 80125cc:	2345      	movs	r3, #69	; 0x45
 80125ce:	727b      	strb	r3, [r7, #9]
 80125d0:	2322      	movs	r3, #34	; 0x22
 80125d2:	72bb      	strb	r3, [r7, #10]
 80125d4:	238e      	movs	r3, #142	; 0x8e
 80125d6:	72fb      	strb	r3, [r7, #11]
 80125d8:	2341      	movs	r3, #65	; 0x41
 80125da:	733b      	strb	r3, [r7, #12]
 80125dc:	23fe      	movs	r3, #254	; 0xfe
 80125de:	737b      	strb	r3, [r7, #13]
 80125e0:	2300      	movs	r3, #0
 80125e2:	73bb      	strb	r3, [r7, #14]
 80125e4:	2300      	movs	r3, #0
 80125e6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80125e8:	4b25      	ldr	r3, [pc, #148]	; (8012680 <P2PS_STM_Init+0x134>)
 80125ea:	8818      	ldrh	r0, [r3, #0]
 80125ec:	463a      	mov	r2, r7
 80125ee:	4b25      	ldr	r3, [pc, #148]	; (8012684 <P2PS_STM_Init+0x138>)
 80125f0:	9305      	str	r3, [sp, #20]
 80125f2:	2301      	movs	r3, #1
 80125f4:	9304      	str	r3, [sp, #16]
 80125f6:	230a      	movs	r3, #10
 80125f8:	9303      	str	r3, [sp, #12]
 80125fa:	2301      	movs	r3, #1
 80125fc:	9302      	str	r3, [sp, #8]
 80125fe:	2300      	movs	r3, #0
 8012600:	9301      	str	r3, [sp, #4]
 8012602:	2306      	movs	r3, #6
 8012604:	9300      	str	r3, [sp, #0]
 8012606:	2302      	movs	r3, #2
 8012608:	2102      	movs	r1, #2
 801260a:	f7fe ffeb 	bl	80115e4 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 801260e:	2319      	movs	r3, #25
 8012610:	703b      	strb	r3, [r7, #0]
 8012612:	23ed      	movs	r3, #237	; 0xed
 8012614:	707b      	strb	r3, [r7, #1]
 8012616:	2382      	movs	r3, #130	; 0x82
 8012618:	70bb      	strb	r3, [r7, #2]
 801261a:	23ae      	movs	r3, #174	; 0xae
 801261c:	70fb      	strb	r3, [r7, #3]
 801261e:	23ed      	movs	r3, #237	; 0xed
 8012620:	713b      	strb	r3, [r7, #4]
 8012622:	2321      	movs	r3, #33	; 0x21
 8012624:	717b      	strb	r3, [r7, #5]
 8012626:	234c      	movs	r3, #76	; 0x4c
 8012628:	71bb      	strb	r3, [r7, #6]
 801262a:	239d      	movs	r3, #157	; 0x9d
 801262c:	71fb      	strb	r3, [r7, #7]
 801262e:	2341      	movs	r3, #65	; 0x41
 8012630:	723b      	strb	r3, [r7, #8]
 8012632:	2345      	movs	r3, #69	; 0x45
 8012634:	727b      	strb	r3, [r7, #9]
 8012636:	2322      	movs	r3, #34	; 0x22
 8012638:	72bb      	strb	r3, [r7, #10]
 801263a:	238e      	movs	r3, #142	; 0x8e
 801263c:	72fb      	strb	r3, [r7, #11]
 801263e:	2342      	movs	r3, #66	; 0x42
 8012640:	733b      	strb	r3, [r7, #12]
 8012642:	23fe      	movs	r3, #254	; 0xfe
 8012644:	737b      	strb	r3, [r7, #13]
 8012646:	2300      	movs	r3, #0
 8012648:	73bb      	strb	r3, [r7, #14]
 801264a:	2300      	movs	r3, #0
 801264c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 801264e:	4b0c      	ldr	r3, [pc, #48]	; (8012680 <P2PS_STM_Init+0x134>)
 8012650:	8818      	ldrh	r0, [r3, #0]
 8012652:	463a      	mov	r2, r7
 8012654:	4b0c      	ldr	r3, [pc, #48]	; (8012688 <P2PS_STM_Init+0x13c>)
 8012656:	9305      	str	r3, [sp, #20]
 8012658:	2301      	movs	r3, #1
 801265a:	9304      	str	r3, [sp, #16]
 801265c:	230a      	movs	r3, #10
 801265e:	9303      	str	r3, [sp, #12]
 8012660:	2301      	movs	r3, #1
 8012662:	9302      	str	r3, [sp, #8]
 8012664:	2300      	movs	r3, #0
 8012666:	9301      	str	r3, [sp, #4]
 8012668:	2310      	movs	r3, #16
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	23c8      	movs	r3, #200	; 0xc8
 801266e:	2102      	movs	r1, #2
 8012670:	f7fe ffb8 	bl	80115e4 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8012674:	bf00      	nop
}
 8012676:	3710      	adds	r7, #16
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	08012479 	.word	0x08012479
 8012680:	20000264 	.word	0x20000264
 8012684:	20000266 	.word	0x20000266
 8012688:	20000268 	.word	0x20000268

0801268c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload, uint16_t datalen)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b086      	sub	sp, #24
 8012690:	af02      	add	r7, sp, #8
 8012692:	4603      	mov	r3, r0
 8012694:	6039      	str	r1, [r7, #0]
 8012696:	80fb      	strh	r3, [r7, #6]
 8012698:	4613      	mov	r3, r2
 801269a:	80bb      	strh	r3, [r7, #4]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 801269c:	2392      	movs	r3, #146	; 0x92
 801269e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 80126a0:	88fb      	ldrh	r3, [r7, #6]
 80126a2:	f64f 6242 	movw	r2, #65090	; 0xfe42
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d10e      	bne.n	80126c8 <P2PS_STM_App_Update_Char+0x3c>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 80126aa:	4b0a      	ldr	r3, [pc, #40]	; (80126d4 <P2PS_STM_App_Update_Char+0x48>)
 80126ac:	8818      	ldrh	r0, [r3, #0]
 80126ae:	4b09      	ldr	r3, [pc, #36]	; (80126d4 <P2PS_STM_App_Update_Char+0x48>)
 80126b0:	8899      	ldrh	r1, [r3, #4]
 80126b2:	88bb      	ldrh	r3, [r7, #4]
 80126b4:	b2da      	uxtb	r2, r3
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	9300      	str	r3, [sp, #0]
 80126ba:	4613      	mov	r3, r2
 80126bc:	2200      	movs	r2, #0
 80126be:	f7ff f899 	bl	80117f4 <aci_gatt_update_char_value>
 80126c2:	4603      	mov	r3, r0
 80126c4:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
							  datalen, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 80126c6:	e000      	b.n	80126ca <P2PS_STM_App_Update_Char+0x3e>

    default:
      break;
 80126c8:	bf00      	nop
  }

  return result;
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 80126cc:	4618      	mov	r0, r3
 80126ce:	3710      	adds	r7, #16
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}
 80126d4:	20000264 	.word	0x20000264

080126d8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b088      	sub	sp, #32
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80126e0:	f107 030c 	add.w	r3, r7, #12
 80126e4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80126ec:	69fb      	ldr	r3, [r7, #28]
 80126ee:	212e      	movs	r1, #46	; 0x2e
 80126f0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80126f4:	f000 f94c 	bl	8012990 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	330b      	adds	r3, #11
 80126fc:	78db      	ldrb	r3, [r3, #3]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3720      	adds	r7, #32
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}

08012706 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8012706:	b580      	push	{r7, lr}
 8012708:	b088      	sub	sp, #32
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801270e:	f107 030c 	add.w	r3, r7, #12
 8012712:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801271a:	69fb      	ldr	r3, [r7, #28]
 801271c:	210f      	movs	r1, #15
 801271e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8012722:	f000 f935 	bl	8012990 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012726:	69fb      	ldr	r3, [r7, #28]
 8012728:	330b      	adds	r3, #11
 801272a:	78db      	ldrb	r3, [r3, #3]
}
 801272c:	4618      	mov	r0, r3
 801272e:	3720      	adds	r7, #32
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b088      	sub	sp, #32
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801273c:	f107 030c 	add.w	r3, r7, #12
 8012740:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	687a      	ldr	r2, [r7, #4]
 8012746:	2110      	movs	r1, #16
 8012748:	f64f 4075 	movw	r0, #64629	; 0xfc75
 801274c:	f000 f920 	bl	8012990 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012750:	69fb      	ldr	r3, [r7, #28]
 8012752:	330b      	adds	r3, #11
 8012754:	78db      	ldrb	r3, [r3, #3]
}
 8012756:	4618      	mov	r0, r3
 8012758:	3720      	adds	r7, #32
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
	...

08012760 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8012760:	b480      	push	{r7}
 8012762:	b08b      	sub	sp, #44	; 0x2c
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8012768:	2300      	movs	r3, #0
 801276a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 801276c:	2300      	movs	r3, #0
 801276e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8012770:	2300      	movs	r3, #0
 8012772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8012774:	2300      	movs	r3, #0
 8012776:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8012778:	2300      	movs	r3, #0
 801277a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 801277c:	2300      	movs	r3, #0
 801277e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8012780:	2300      	movs	r3, #0
 8012782:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8012784:	2300      	movs	r3, #0
 8012786:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8012788:	4b4a      	ldr	r3, [pc, #296]	; (80128b4 <SHCI_GetWirelessFwInfo+0x154>)
 801278a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801278c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012790:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	009b      	lsls	r3, r3, #2
 8012796:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 801279a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	4a44      	ldr	r2, [pc, #272]	; (80128b8 <SHCI_GetWirelessFwInfo+0x158>)
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d10f      	bne.n	80127cc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	695b      	ldr	r3, [r3, #20]
 80127b0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	699b      	ldr	r3, [r3, #24]
 80127b6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	69db      	ldr	r3, [r3, #28]
 80127bc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	68db      	ldr	r3, [r3, #12]
 80127c2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	691b      	ldr	r3, [r3, #16]
 80127c8:	617b      	str	r3, [r7, #20]
 80127ca:	e01a      	b.n	8012802 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	009b      	lsls	r3, r3, #2
 80127d0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80127d4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80127d8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	691b      	ldr	r3, [r3, #16]
 80127e0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	695b      	ldr	r3, [r3, #20]
 80127e8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	699b      	ldr	r3, [r3, #24]
 80127f0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	689b      	ldr	r3, [r3, #8]
 8012800:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012804:	0e1b      	lsrs	r3, r3, #24
 8012806:	b2da      	uxtb	r2, r3
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280e:	0c1b      	lsrs	r3, r3, #16
 8012810:	b2da      	uxtb	r2, r3
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012818:	0a1b      	lsrs	r3, r3, #8
 801281a:	b2da      	uxtb	r2, r3
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8012820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012822:	091b      	lsrs	r3, r3, #4
 8012824:	b2db      	uxtb	r3, r3
 8012826:	f003 030f 	and.w	r3, r3, #15
 801282a:	b2da      	uxtb	r2, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8012830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012832:	b2db      	uxtb	r3, r3
 8012834:	f003 030f 	and.w	r3, r3, #15
 8012838:	b2da      	uxtb	r2, r3
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801283e:	6a3b      	ldr	r3, [r7, #32]
 8012840:	0e1b      	lsrs	r3, r3, #24
 8012842:	b2da      	uxtb	r2, r3
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012848:	6a3b      	ldr	r3, [r7, #32]
 801284a:	0c1b      	lsrs	r3, r3, #16
 801284c:	b2da      	uxtb	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8012852:	6a3b      	ldr	r3, [r7, #32]
 8012854:	0a1b      	lsrs	r3, r3, #8
 8012856:	b2da      	uxtb	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801285c:	6a3b      	ldr	r3, [r7, #32]
 801285e:	b2da      	uxtb	r2, r3
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8012864:	69fb      	ldr	r3, [r7, #28]
 8012866:	b2da      	uxtb	r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	0e1b      	lsrs	r3, r3, #24
 8012870:	b2da      	uxtb	r2, r3
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012876:	69bb      	ldr	r3, [r7, #24]
 8012878:	0c1b      	lsrs	r3, r3, #16
 801287a:	b2da      	uxtb	r2, r3
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012880:	69bb      	ldr	r3, [r7, #24]
 8012882:	0a1b      	lsrs	r3, r3, #8
 8012884:	b2da      	uxtb	r2, r3
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	0e1b      	lsrs	r3, r3, #24
 801288e:	b2da      	uxtb	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	0c1b      	lsrs	r3, r3, #16
 8012898:	b2da      	uxtb	r2, r3
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	b2da      	uxtb	r2, r3
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80128a6:	2300      	movs	r3, #0
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	372c      	adds	r7, #44	; 0x2c
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr
 80128b4:	58004000 	.word	0x58004000
 80128b8:	a94656b9 	.word	0xa94656b9

080128bc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	4a08      	ldr	r2, [pc, #32]	; (80128ec <shci_init+0x30>)
 80128cc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80128ce:	4a08      	ldr	r2, [pc, #32]	; (80128f0 <shci_init+0x34>)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80128d4:	4806      	ldr	r0, [pc, #24]	; (80128f0 <shci_init+0x34>)
 80128d6:	f000 f915 	bl	8012b04 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	4618      	mov	r0, r3
 80128e0:	f000 f898 	bl	8012a14 <TlInit>

  return;
 80128e4:	bf00      	nop
}
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	20003540 	.word	0x20003540
 80128f0:	20003520 	.word	0x20003520

080128f4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b084      	sub	sp, #16
 80128f8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80128fa:	4822      	ldr	r0, [pc, #136]	; (8012984 <shci_user_evt_proc+0x90>)
 80128fc:	f000 f926 	bl	8012b4c <LST_is_empty>
 8012900:	4603      	mov	r3, r0
 8012902:	2b00      	cmp	r3, #0
 8012904:	d12b      	bne.n	801295e <shci_user_evt_proc+0x6a>
 8012906:	4b20      	ldr	r3, [pc, #128]	; (8012988 <shci_user_evt_proc+0x94>)
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d027      	beq.n	801295e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801290e:	f107 030c 	add.w	r3, r7, #12
 8012912:	4619      	mov	r1, r3
 8012914:	481b      	ldr	r0, [pc, #108]	; (8012984 <shci_user_evt_proc+0x90>)
 8012916:	f000 f9a8 	bl	8012c6a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801291a:	4b1c      	ldr	r3, [pc, #112]	; (801298c <shci_user_evt_proc+0x98>)
 801291c:	69db      	ldr	r3, [r3, #28]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d00c      	beq.n	801293c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8012926:	2301      	movs	r3, #1
 8012928:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801292a:	4b18      	ldr	r3, [pc, #96]	; (801298c <shci_user_evt_proc+0x98>)
 801292c:	69db      	ldr	r3, [r3, #28]
 801292e:	1d3a      	adds	r2, r7, #4
 8012930:	4610      	mov	r0, r2
 8012932:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8012934:	793a      	ldrb	r2, [r7, #4]
 8012936:	4b14      	ldr	r3, [pc, #80]	; (8012988 <shci_user_evt_proc+0x94>)
 8012938:	701a      	strb	r2, [r3, #0]
 801293a:	e002      	b.n	8012942 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801293c:	4b12      	ldr	r3, [pc, #72]	; (8012988 <shci_user_evt_proc+0x94>)
 801293e:	2201      	movs	r2, #1
 8012940:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8012942:	4b11      	ldr	r3, [pc, #68]	; (8012988 <shci_user_evt_proc+0x94>)
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d004      	beq.n	8012954 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	4618      	mov	r0, r3
 801294e:	f001 f84d 	bl	80139ec <TL_MM_EvtDone>
 8012952:	e004      	b.n	801295e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	4619      	mov	r1, r3
 8012958:	480a      	ldr	r0, [pc, #40]	; (8012984 <shci_user_evt_proc+0x90>)
 801295a:	f000 f919 	bl	8012b90 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801295e:	4809      	ldr	r0, [pc, #36]	; (8012984 <shci_user_evt_proc+0x90>)
 8012960:	f000 f8f4 	bl	8012b4c <LST_is_empty>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	d107      	bne.n	801297a <shci_user_evt_proc+0x86>
 801296a:	4b07      	ldr	r3, [pc, #28]	; (8012988 <shci_user_evt_proc+0x94>)
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d003      	beq.n	801297a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8012972:	4804      	ldr	r0, [pc, #16]	; (8012984 <shci_user_evt_proc+0x90>)
 8012974:	f7f0 f834 	bl	80029e0 <shci_notify_asynch_evt>
  }


  return;
 8012978:	bf00      	nop
 801297a:	bf00      	nop
}
 801297c:	3710      	adds	r7, #16
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
 8012982:	bf00      	nop
 8012984:	20000278 	.word	0x20000278
 8012988:	20000288 	.word	0x20000288
 801298c:	20003520 	.word	0x20003520

08012990 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	60ba      	str	r2, [r7, #8]
 8012998:	607b      	str	r3, [r7, #4]
 801299a:	4603      	mov	r3, r0
 801299c:	81fb      	strh	r3, [r7, #14]
 801299e:	460b      	mov	r3, r1
 80129a0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80129a2:	2000      	movs	r0, #0
 80129a4:	f000 f868 	bl	8012a78 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80129a8:	4b17      	ldr	r3, [pc, #92]	; (8012a08 <shci_send+0x78>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	89fa      	ldrh	r2, [r7, #14]
 80129ae:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80129b2:	4b15      	ldr	r3, [pc, #84]	; (8012a08 <shci_send+0x78>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	7b7a      	ldrb	r2, [r7, #13]
 80129b8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80129ba:	4b13      	ldr	r3, [pc, #76]	; (8012a08 <shci_send+0x78>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	330c      	adds	r3, #12
 80129c0:	7b7a      	ldrb	r2, [r7, #13]
 80129c2:	68b9      	ldr	r1, [r7, #8]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f002 fa4a 	bl	8014e5e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80129ca:	4b10      	ldr	r3, [pc, #64]	; (8012a0c <shci_send+0x7c>)
 80129cc:	2201      	movs	r2, #1
 80129ce:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80129d0:	4b0f      	ldr	r3, [pc, #60]	; (8012a10 <shci_send+0x80>)
 80129d2:	691b      	ldr	r3, [r3, #16]
 80129d4:	2100      	movs	r1, #0
 80129d6:	2000      	movs	r0, #0
 80129d8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80129da:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80129de:	f7f0 f817 	bl	8002a10 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f103 0008 	add.w	r0, r3, #8
 80129e8:	4b07      	ldr	r3, [pc, #28]	; (8012a08 <shci_send+0x78>)
 80129ea:	6819      	ldr	r1, [r3, #0]
 80129ec:	4b06      	ldr	r3, [pc, #24]	; (8012a08 <shci_send+0x78>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	789b      	ldrb	r3, [r3, #2]
 80129f2:	3303      	adds	r3, #3
 80129f4:	461a      	mov	r2, r3
 80129f6:	f002 fa32 	bl	8014e5e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80129fa:	2001      	movs	r0, #1
 80129fc:	f000 f83c 	bl	8012a78 <Cmd_SetStatus>

  return;
 8012a00:	bf00      	nop
}
 8012a02:	3710      	adds	r7, #16
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	20000284 	.word	0x20000284
 8012a0c:	20003544 	.word	0x20003544
 8012a10:	20003520 	.word	0x20003520

08012a14 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b086      	sub	sp, #24
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8012a1c:	4a10      	ldr	r2, [pc, #64]	; (8012a60 <TlInit+0x4c>)
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8012a22:	4810      	ldr	r0, [pc, #64]	; (8012a64 <TlInit+0x50>)
 8012a24:	f000 f882 	bl	8012b2c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012a28:	2001      	movs	r0, #1
 8012a2a:	f000 f825 	bl	8012a78 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012a2e:	4b0e      	ldr	r3, [pc, #56]	; (8012a68 <TlInit+0x54>)
 8012a30:	2201      	movs	r2, #1
 8012a32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8012a34:	4b0d      	ldr	r3, [pc, #52]	; (8012a6c <TlInit+0x58>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d00c      	beq.n	8012a56 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8012a40:	4b0b      	ldr	r3, [pc, #44]	; (8012a70 <TlInit+0x5c>)
 8012a42:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8012a44:	4b0b      	ldr	r3, [pc, #44]	; (8012a74 <TlInit+0x60>)
 8012a46:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8012a48:	4b08      	ldr	r3, [pc, #32]	; (8012a6c <TlInit+0x58>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f107 020c 	add.w	r2, r7, #12
 8012a50:	4610      	mov	r0, r2
 8012a52:	4798      	blx	r3
  }

  return;
 8012a54:	bf00      	nop
 8012a56:	bf00      	nop
}
 8012a58:	3718      	adds	r7, #24
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	20000284 	.word	0x20000284
 8012a64:	20000278 	.word	0x20000278
 8012a68:	20000288 	.word	0x20000288
 8012a6c:	20003520 	.word	0x20003520
 8012a70:	08012ac9 	.word	0x08012ac9
 8012a74:	08012ae1 	.word	0x08012ae1

08012a78 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b082      	sub	sp, #8
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	4603      	mov	r3, r0
 8012a80:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8012a82:	79fb      	ldrb	r3, [r7, #7]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d10b      	bne.n	8012aa0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8012a88:	4b0d      	ldr	r3, [pc, #52]	; (8012ac0 <Cmd_SetStatus+0x48>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d003      	beq.n	8012a98 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8012a90:	4b0b      	ldr	r3, [pc, #44]	; (8012ac0 <Cmd_SetStatus+0x48>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2000      	movs	r0, #0
 8012a96:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8012a98:	4b0a      	ldr	r3, [pc, #40]	; (8012ac4 <Cmd_SetStatus+0x4c>)
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8012a9e:	e00b      	b.n	8012ab8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8012aa0:	4b08      	ldr	r3, [pc, #32]	; (8012ac4 <Cmd_SetStatus+0x4c>)
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8012aa6:	4b06      	ldr	r3, [pc, #24]	; (8012ac0 <Cmd_SetStatus+0x48>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d004      	beq.n	8012ab8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8012aae:	4b04      	ldr	r3, [pc, #16]	; (8012ac0 <Cmd_SetStatus+0x48>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2001      	movs	r0, #1
 8012ab4:	4798      	blx	r3
  return;
 8012ab6:	bf00      	nop
 8012ab8:	bf00      	nop
}
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	20003540 	.word	0x20003540
 8012ac4:	20000280 	.word	0x20000280

08012ac8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8012ad0:	2000      	movs	r0, #0
 8012ad2:	f7ef ff92 	bl	80029fa <shci_cmd_resp_release>

  return;
 8012ad6:	bf00      	nop
}
 8012ad8:	3708      	adds	r7, #8
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}
	...

08012ae0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8012ae8:	6879      	ldr	r1, [r7, #4]
 8012aea:	4805      	ldr	r0, [pc, #20]	; (8012b00 <TlUserEvtReceived+0x20>)
 8012aec:	f000 f876 	bl	8012bdc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8012af0:	4803      	ldr	r0, [pc, #12]	; (8012b00 <TlUserEvtReceived+0x20>)
 8012af2:	f7ef ff75 	bl	80029e0 <shci_notify_asynch_evt>

  return;
 8012af6:	bf00      	nop
}
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	20000278 	.word	0x20000278

08012b04 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	4a05      	ldr	r2, [pc, #20]	; (8012b24 <shci_register_io_bus+0x20>)
 8012b10:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	4a04      	ldr	r2, [pc, #16]	; (8012b28 <shci_register_io_bus+0x24>)
 8012b16:	611a      	str	r2, [r3, #16]

  return;
 8012b18:	bf00      	nop
}
 8012b1a:	370c      	adds	r7, #12
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr
 8012b24:	08013879 	.word	0x08013879
 8012b28:	080138cd 	.word	0x080138cd

08012b2c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	687a      	ldr	r2, [r7, #4]
 8012b3e:	605a      	str	r2, [r3, #4]
}
 8012b40:	bf00      	nop
 8012b42:	370c      	adds	r7, #12
 8012b44:	46bd      	mov	sp, r7
 8012b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4a:	4770      	bx	lr

08012b4c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b087      	sub	sp, #28
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b54:	f3ef 8310 	mrs	r3, PRIMASK
 8012b58:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012b5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8012b5e:	b672      	cpsid	i
}
 8012b60:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	687a      	ldr	r2, [r7, #4]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d102      	bne.n	8012b72 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	75fb      	strb	r3, [r7, #23]
 8012b70:	e001      	b.n	8012b76 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8012b72:	2300      	movs	r3, #0
 8012b74:	75fb      	strb	r3, [r7, #23]
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	f383 8810 	msr	PRIMASK, r3
}
 8012b80:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8012b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	371c      	adds	r7, #28
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr

08012b90 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b087      	sub	sp, #28
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8012b9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ba0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012ba2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012ba4:	b672      	cpsid	i
}
 8012ba6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	683a      	ldr	r2, [r7, #0]
 8012bba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	683a      	ldr	r2, [r7, #0]
 8012bc2:	605a      	str	r2, [r3, #4]
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	f383 8810 	msr	PRIMASK, r3
}
 8012bce:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012bd0:	bf00      	nop
 8012bd2:	371c      	adds	r7, #28
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr

08012bdc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8012bdc:	b480      	push	{r7}
 8012bde:	b087      	sub	sp, #28
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012be6:	f3ef 8310 	mrs	r3, PRIMASK
 8012bea:	60fb      	str	r3, [r7, #12]
  return(result);
 8012bec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012bee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012bf0:	b672      	cpsid	i
}
 8012bf2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	685a      	ldr	r2, [r3, #4]
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	683a      	ldr	r2, [r7, #0]
 8012c06:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	683a      	ldr	r2, [r7, #0]
 8012c0e:	601a      	str	r2, [r3, #0]
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	f383 8810 	msr	PRIMASK, r3
}
 8012c1a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012c1c:	bf00      	nop
 8012c1e:	371c      	adds	r7, #28
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	b087      	sub	sp, #28
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c30:	f3ef 8310 	mrs	r3, PRIMASK
 8012c34:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c36:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012c38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012c3a:	b672      	cpsid	i
}
 8012c3c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	6812      	ldr	r2, [r2, #0]
 8012c46:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	6852      	ldr	r2, [r2, #4]
 8012c50:	605a      	str	r2, [r3, #4]
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	f383 8810 	msr	PRIMASK, r3
}
 8012c5c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012c5e:	bf00      	nop
 8012c60:	371c      	adds	r7, #28
 8012c62:	46bd      	mov	sp, r7
 8012c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c68:	4770      	bx	lr

08012c6a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8012c6a:	b580      	push	{r7, lr}
 8012c6c:	b086      	sub	sp, #24
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	6078      	str	r0, [r7, #4]
 8012c72:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c74:	f3ef 8310 	mrs	r3, PRIMASK
 8012c78:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012c7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012c7e:	b672      	cpsid	i
}
 8012c80:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681a      	ldr	r2, [r3, #0]
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7ff ffca 	bl	8012c28 <LST_remove_node>
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	f383 8810 	msr	PRIMASK, r3
}
 8012c9e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012ca0:	bf00      	nop
 8012ca2:	3718      	adds	r7, #24
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}

08012ca8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b085      	sub	sp, #20
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	607a      	str	r2, [r7, #4]
 8012cb4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	68ba      	ldr	r2, [r7, #8]
 8012cba:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	687a      	ldr	r2, [r7, #4]
 8012cd8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	887a      	ldrh	r2, [r7, #2]
 8012cde:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	7e3a      	ldrb	r2, [r7, #24]
 8012ce4:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8012ce6:	7e3b      	ldrb	r3, [r7, #24]
 8012ce8:	f003 0302 	and.w	r3, r3, #2
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d006      	beq.n	8012cfe <CircularQueue_Init+0x56>
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	891b      	ldrh	r3, [r3, #8]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d002      	beq.n	8012cfe <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8012cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8012cfc:	e000      	b.n	8012d00 <CircularQueue_Init+0x58>
  }
  return 0;
 8012cfe:	2300      	movs	r3, #0
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3714      	adds	r7, #20
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b08e      	sub	sp, #56	; 0x38
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	603b      	str	r3, [r7, #0]
 8012d18:	4613      	mov	r3, r2
 8012d1a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8012d20:	2300      	movs	r3, #0
 8012d22:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8012d24:	2300      	movs	r3, #0
 8012d26:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8012d28:	2300      	movs	r3, #0
 8012d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8012d30:	2300      	movs	r3, #0
 8012d32:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8012d34:	2300      	movs	r3, #0
 8012d36:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	891b      	ldrh	r3, [r3, #8]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d101      	bne.n	8012d44 <CircularQueue_Add+0x38>
 8012d40:	2302      	movs	r3, #2
 8012d42:	e000      	b.n	8012d46 <CircularQueue_Add+0x3a>
 8012d44:	2300      	movs	r3, #0
 8012d46:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	695b      	ldr	r3, [r3, #20]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d02a      	beq.n	8012da6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	891b      	ldrh	r3, [r3, #8]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d123      	bne.n	8012da0 <CircularQueue_Add+0x94>
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	691b      	ldr	r3, [r3, #16]
 8012d60:	4413      	add	r3, r2
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	b29a      	uxth	r2, r3
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	6819      	ldr	r1, [r3, #0]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	691b      	ldr	r3, [r3, #16]
 8012d6e:	1c58      	adds	r0, r3, #1
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	685b      	ldr	r3, [r3, #4]
 8012d74:	4298      	cmp	r0, r3
 8012d76:	d306      	bcc.n	8012d86 <CircularQueue_Add+0x7a>
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	6918      	ldr	r0, [r3, #16]
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	1ac3      	subs	r3, r0, r3
 8012d82:	3301      	adds	r3, #1
 8012d84:	e002      	b.n	8012d8c <CircularQueue_Add+0x80>
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	691b      	ldr	r3, [r3, #16]
 8012d8a:	3301      	adds	r3, #1
 8012d8c:	440b      	add	r3, r1
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	b29b      	uxth	r3, r3
 8012d92:	021b      	lsls	r3, r3, #8
 8012d94:	b29b      	uxth	r3, r3
 8012d96:	4413      	add	r3, r2
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	3302      	adds	r3, #2
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	e001      	b.n	8012da4 <CircularQueue_Add+0x98>
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	891b      	ldrh	r3, [r3, #8]
 8012da4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	891b      	ldrh	r3, [r3, #8]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d002      	beq.n	8012db4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	891b      	ldrh	r3, [r3, #8]
 8012db2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	691a      	ldr	r2, [r3, #16]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	68db      	ldr	r3, [r3, #12]
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d307      	bcc.n	8012dd0 <CircularQueue_Add+0xc4>
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	685a      	ldr	r2, [r3, #4]
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	6919      	ldr	r1, [r3, #16]
 8012dc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012dca:	440b      	add	r3, r1
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	e000      	b.n	8012dd2 <CircularQueue_Add+0xc6>
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8012dd4:	88fa      	ldrh	r2, [r7, #6]
 8012dd6:	7ffb      	ldrb	r3, [r7, #31]
 8012dd8:	4413      	add	r3, r2
 8012dda:	461a      	mov	r2, r3
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	fb02 f303 	mul.w	r3, r2, r3
 8012de2:	69ba      	ldr	r2, [r7, #24]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d80b      	bhi.n	8012e00 <CircularQueue_Add+0xf4>
 8012de8:	88fa      	ldrh	r2, [r7, #6]
 8012dea:	7ffb      	ldrb	r3, [r7, #31]
 8012dec:	4413      	add	r3, r2
 8012dee:	461a      	mov	r2, r3
 8012df0:	69bb      	ldr	r3, [r7, #24]
 8012df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012df6:	fb01 f202 	mul.w	r2, r1, r2
 8012dfa:	1a9b      	subs	r3, r3, r2
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	e000      	b.n	8012e02 <CircularQueue_Add+0xf6>
 8012e00:	2300      	movs	r3, #0
 8012e02:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8012e04:	7dfa      	ldrb	r2, [r7, #23]
 8012e06:	7ffb      	ldrb	r3, [r7, #31]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	bf8c      	ite	hi
 8012e0c:	2301      	movhi	r3, #1
 8012e0e:	2300      	movls	r3, #0
 8012e10:	b2db      	uxtb	r3, r3
 8012e12:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8012e14:	7fbb      	ldrb	r3, [r7, #30]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d008      	beq.n	8012e2c <CircularQueue_Add+0x120>
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	7f1b      	ldrb	r3, [r3, #28]
 8012e1e:	f003 0301 	and.w	r3, r3, #1
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d002      	beq.n	8012e2c <CircularQueue_Add+0x120>
 8012e26:	7dfb      	ldrb	r3, [r7, #23]
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	e000      	b.n	8012e2e <CircularQueue_Add+0x122>
 8012e2c:	8bbb      	ldrh	r3, [r7, #28]
 8012e2e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8012e30:	7fbb      	ldrb	r3, [r7, #30]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d008      	beq.n	8012e48 <CircularQueue_Add+0x13c>
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	7f1b      	ldrb	r3, [r3, #28]
 8012e3a:	f003 0302 	and.w	r3, r3, #2
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d002      	beq.n	8012e48 <CircularQueue_Add+0x13c>
 8012e42:	7ffb      	ldrb	r3, [r7, #31]
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	e000      	b.n	8012e4a <CircularQueue_Add+0x13e>
 8012e48:	8bbb      	ldrh	r3, [r7, #28]
 8012e4a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8012e4c:	88fb      	ldrh	r3, [r7, #6]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f000 817e 	beq.w	8013150 <CircularQueue_Add+0x444>
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	695a      	ldr	r2, [r3, #20]
 8012e58:	88f9      	ldrh	r1, [r7, #6]
 8012e5a:	7ffb      	ldrb	r3, [r7, #31]
 8012e5c:	440b      	add	r3, r1
 8012e5e:	4619      	mov	r1, r3
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	fb01 f303 	mul.w	r3, r1, r3
 8012e66:	441a      	add	r2, r3
 8012e68:	8bbb      	ldrh	r3, [r7, #28]
 8012e6a:	441a      	add	r2, r3
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	f200 816d 	bhi.w	8013150 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8012e76:	2300      	movs	r3, #0
 8012e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e7a:	e14a      	b.n	8013112 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	691a      	ldr	r2, [r3, #16]
 8012e80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012e82:	441a      	add	r2, r3
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d307      	bcc.n	8012e9c <CircularQueue_Add+0x190>
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	691a      	ldr	r2, [r3, #16]
 8012e90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012e92:	441a      	add	r2, r3
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	1ad3      	subs	r3, r2, r3
 8012e9a:	e003      	b.n	8012ea4 <CircularQueue_Add+0x198>
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	691a      	ldr	r2, [r3, #16]
 8012ea0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012ea2:	4413      	add	r3, r2
 8012ea4:	68fa      	ldr	r2, [r7, #12]
 8012ea6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	691b      	ldr	r3, [r3, #16]
 8012eac:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	891b      	ldrh	r3, [r3, #8]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d130      	bne.n	8012f18 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ebc:	1c59      	adds	r1, r3, #1
 8012ebe:	6339      	str	r1, [r7, #48]	; 0x30
 8012ec0:	4413      	add	r3, r2
 8012ec2:	88fa      	ldrh	r2, [r7, #6]
 8012ec4:	b2d2      	uxtb	r2, r2
 8012ec6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d304      	bcc.n	8012edc <CircularQueue_Add+0x1d0>
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	685b      	ldr	r3, [r3, #4]
 8012ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	e000      	b.n	8012ede <CircularQueue_Add+0x1d2>
 8012edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ede:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012ee0:	88fb      	ldrh	r3, [r7, #6]
 8012ee2:	0a1b      	lsrs	r3, r3, #8
 8012ee4:	b298      	uxth	r0, r3
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eec:	1c59      	adds	r1, r3, #1
 8012eee:	6339      	str	r1, [r7, #48]	; 0x30
 8012ef0:	4413      	add	r3, r2
 8012ef2:	b2c2      	uxtb	r2, r0
 8012ef4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012efc:	429a      	cmp	r2, r3
 8012efe:	d304      	bcc.n	8012f0a <CircularQueue_Add+0x1fe>
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f06:	1ad3      	subs	r3, r2, r3
 8012f08:	e000      	b.n	8012f0c <CircularQueue_Add+0x200>
 8012f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f0c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	695b      	ldr	r3, [r3, #20]
 8012f12:	1c9a      	adds	r2, r3, #2
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8012f18:	88fa      	ldrh	r2, [r7, #6]
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	6859      	ldr	r1, [r3, #4]
 8012f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f20:	1acb      	subs	r3, r1, r3
 8012f22:	4293      	cmp	r3, r2
 8012f24:	bf28      	it	cs
 8012f26:	4613      	movcs	r3, r2
 8012f28:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8012f2a:	88fb      	ldrh	r3, [r7, #6]
 8012f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d007      	beq.n	8012f42 <CircularQueue_Add+0x236>
 8012f32:	88fb      	ldrh	r3, [r7, #6]
 8012f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d225      	bcs.n	8012f86 <CircularQueue_Add+0x27a>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	7f1b      	ldrb	r3, [r3, #28]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d121      	bne.n	8012f86 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f48:	18d0      	adds	r0, r2, r3
 8012f4a:	88fb      	ldrh	r3, [r7, #6]
 8012f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f4e:	fb02 f303 	mul.w	r3, r2, r3
 8012f52:	68ba      	ldr	r2, [r7, #8]
 8012f54:	4413      	add	r3, r2
 8012f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f58:	4619      	mov	r1, r3
 8012f5a:	f001 ff80 	bl	8014e5e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	695a      	ldr	r2, [r3, #20]
 8012f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f64:	441a      	add	r2, r3
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8012f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f70:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8012f72:	88fa      	ldrh	r2, [r7, #6]
 8012f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8012f7a:	7ffb      	ldrb	r3, [r7, #31]
 8012f7c:	b29a      	uxth	r2, r3
 8012f7e:	88fb      	ldrh	r3, [r7, #6]
 8012f80:	4413      	add	r3, r2
 8012f82:	86fb      	strh	r3, [r7, #54]	; 0x36
 8012f84:	e0a4      	b.n	80130d0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8012f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f000 80a1 	beq.w	80130d0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	7f1b      	ldrb	r3, [r3, #28]
 8012f92:	f003 0301 	and.w	r3, r3, #1
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d03a      	beq.n	8013010 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	891b      	ldrh	r3, [r3, #8]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d10d      	bne.n	8012fbe <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa8:	3b02      	subs	r3, #2
 8012faa:	4413      	add	r3, r2
 8012fac:	22ff      	movs	r2, #255	; 0xff
 8012fae:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb6:	3b01      	subs	r3, #1
 8012fb8:	4413      	add	r3, r2
 8012fba:	22ff      	movs	r2, #255	; 0xff
 8012fbc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	695a      	ldr	r2, [r3, #20]
 8012fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc4:	441a      	add	r2, r3
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8012fce:	88fb      	ldrh	r3, [r7, #6]
 8012fd0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	891b      	ldrh	r3, [r3, #8]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d16f      	bne.n	80130be <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe4:	1c59      	adds	r1, r3, #1
 8012fe6:	6339      	str	r1, [r7, #48]	; 0x30
 8012fe8:	4413      	add	r3, r2
 8012fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fec:	b2d2      	uxtb	r2, r2
 8012fee:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff2:	0a18      	lsrs	r0, r3, #8
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	681a      	ldr	r2, [r3, #0]
 8012ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ffa:	1c59      	adds	r1, r3, #1
 8012ffc:	6339      	str	r1, [r7, #48]	; 0x30
 8012ffe:	4413      	add	r3, r2
 8013000:	b2c2      	uxtb	r2, r0
 8013002:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	695b      	ldr	r3, [r3, #20]
 8013008:	1c9a      	adds	r2, r3, #2
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	615a      	str	r2, [r3, #20]
 801300e:	e056      	b.n	80130be <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	7f1b      	ldrb	r3, [r3, #28]
 8013014:	f003 0302 	and.w	r3, r3, #2
 8013018:	2b00      	cmp	r3, #0
 801301a:	d050      	beq.n	80130be <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	891b      	ldrh	r3, [r3, #8]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d14a      	bne.n	80130ba <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	681a      	ldr	r2, [r3, #0]
 8013028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801302a:	3b02      	subs	r3, #2
 801302c:	4413      	add	r3, r2
 801302e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013030:	b2d2      	uxtb	r2, r2
 8013032:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8013034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013036:	0a19      	lsrs	r1, r3, #8
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801303e:	3b01      	subs	r3, #1
 8013040:	4413      	add	r3, r2
 8013042:	b2ca      	uxtb	r2, r1
 8013044:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304c:	18d0      	adds	r0, r2, r3
 801304e:	88fb      	ldrh	r3, [r7, #6]
 8013050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013052:	fb02 f303 	mul.w	r3, r2, r3
 8013056:	68ba      	ldr	r2, [r7, #8]
 8013058:	4413      	add	r3, r2
 801305a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801305c:	4619      	mov	r1, r3
 801305e:	f001 fefe 	bl	8014e5e <memcpy>
             q->byteCount += NbBytesToCopy; 
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	695a      	ldr	r2, [r3, #20]
 8013066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013068:	441a      	add	r2, r3
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 801306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013070:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8013072:	88fa      	ldrh	r2, [r7, #6]
 8013074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013076:	1ad3      	subs	r3, r2, r3
 8013078:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	699b      	ldr	r3, [r3, #24]
 801307e:	1c5a      	adds	r2, r3, #1
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8013084:	2300      	movs	r3, #0
 8013086:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801308e:	1c59      	adds	r1, r3, #1
 8013090:	6339      	str	r1, [r7, #48]	; 0x30
 8013092:	4413      	add	r3, r2
 8013094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013096:	b2d2      	uxtb	r2, r2
 8013098:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801309c:	0a18      	lsrs	r0, r3, #8
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a4:	1c59      	adds	r1, r3, #1
 80130a6:	6339      	str	r1, [r7, #48]	; 0x30
 80130a8:	4413      	add	r3, r2
 80130aa:	b2c2      	uxtb	r2, r0
 80130ac:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	695b      	ldr	r3, [r3, #20]
 80130b2:	1c9a      	adds	r2, r3, #2
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	615a      	str	r2, [r3, #20]
 80130b8:	e001      	b.n	80130be <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 80130ba:	2300      	movs	r3, #0
 80130bc:	e049      	b.n	8013152 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80130be:	7ffb      	ldrb	r3, [r7, #31]
 80130c0:	b29a      	uxth	r2, r3
 80130c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c4:	b29b      	uxth	r3, r3
 80130c6:	4413      	add	r3, r2
 80130c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	2200      	movs	r2, #0
 80130ce:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 80130d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d015      	beq.n	8013102 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130dc:	18d0      	adds	r0, r2, r3
 80130de:	88fb      	ldrh	r3, [r7, #6]
 80130e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130e2:	fb03 f202 	mul.w	r2, r3, r2
 80130e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e8:	4413      	add	r3, r2
 80130ea:	68ba      	ldr	r2, [r7, #8]
 80130ec:	4413      	add	r3, r2
 80130ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130f0:	4619      	mov	r1, r3
 80130f2:	f001 feb4 	bl	8014e5e <memcpy>
        q->byteCount += NbBytesToCopy;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	695a      	ldr	r2, [r3, #20]
 80130fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fc:	441a      	add	r2, r3
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	699b      	ldr	r3, [r3, #24]
 8013106:	1c5a      	adds	r2, r3, #1
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 801310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310e:	3301      	adds	r3, #1
 8013110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	429a      	cmp	r2, r3
 8013118:	f4ff aeb0 	bcc.w	8012e7c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	6919      	ldr	r1, [r3, #16]
 8013124:	7ffb      	ldrb	r3, [r7, #31]
 8013126:	4419      	add	r1, r3
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	4299      	cmp	r1, r3
 801312e:	d307      	bcc.n	8013140 <CircularQueue_Add+0x434>
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	6919      	ldr	r1, [r3, #16]
 8013134:	7ffb      	ldrb	r3, [r7, #31]
 8013136:	4419      	add	r1, r3
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	685b      	ldr	r3, [r3, #4]
 801313c:	1acb      	subs	r3, r1, r3
 801313e:	e003      	b.n	8013148 <CircularQueue_Add+0x43c>
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	6919      	ldr	r1, [r3, #16]
 8013144:	7ffb      	ldrb	r3, [r7, #31]
 8013146:	440b      	add	r3, r1
 8013148:	4413      	add	r3, r2
 801314a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 801314c:	6a3b      	ldr	r3, [r7, #32]
 801314e:	e000      	b.n	8013152 <CircularQueue_Add+0x446>
    return NULL;
 8013150:	2300      	movs	r3, #0
}
 8013152:	4618      	mov	r0, r3
 8013154:	3738      	adds	r7, #56	; 0x38
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}

0801315a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 801315a:	b480      	push	{r7}
 801315c:	b085      	sub	sp, #20
 801315e:	af00      	add	r7, sp, #0
 8013160:	6078      	str	r0, [r7, #4]
 8013162:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8013164:	2300      	movs	r3, #0
 8013166:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8013168:	2300      	movs	r3, #0
 801316a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	891b      	ldrh	r3, [r3, #8]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <CircularQueue_Remove+0x1e>
 8013174:	2302      	movs	r3, #2
 8013176:	e000      	b.n	801317a <CircularQueue_Remove+0x20>
 8013178:	2300      	movs	r3, #0
 801317a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 801317c:	2300      	movs	r3, #0
 801317e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	695b      	ldr	r3, [r3, #20]
 8013184:	2b00      	cmp	r3, #0
 8013186:	f000 80cc 	beq.w	8013322 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	891b      	ldrh	r3, [r3, #8]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d121      	bne.n	80131d6 <CircularQueue_Remove+0x7c>
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681a      	ldr	r2, [r3, #0]
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	4413      	add	r3, r2
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	b29a      	uxth	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	6819      	ldr	r1, [r3, #0]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	68db      	ldr	r3, [r3, #12]
 80131a8:	1c58      	adds	r0, r3, #1
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	4298      	cmp	r0, r3
 80131b0:	d306      	bcc.n	80131c0 <CircularQueue_Remove+0x66>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	68d8      	ldr	r0, [r3, #12]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	1ac3      	subs	r3, r0, r3
 80131bc:	3301      	adds	r3, #1
 80131be:	e002      	b.n	80131c6 <CircularQueue_Remove+0x6c>
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	68db      	ldr	r3, [r3, #12]
 80131c4:	3301      	adds	r3, #1
 80131c6:	440b      	add	r3, r1
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	021b      	lsls	r3, r3, #8
 80131ce:	b29b      	uxth	r3, r3
 80131d0:	4413      	add	r3, r2
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	e001      	b.n	80131da <CircularQueue_Remove+0x80>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	891b      	ldrh	r3, [r3, #8]
 80131da:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	7f1b      	ldrb	r3, [r3, #28]
 80131e0:	f003 0301 	and.w	r3, r3, #1
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d057      	beq.n	8013298 <CircularQueue_Remove+0x13e>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	7f1b      	ldrb	r3, [r3, #28]
 80131ec:	f003 0302 	and.w	r3, r3, #2
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d151      	bne.n	8013298 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80131f4:	897b      	ldrh	r3, [r7, #10]
 80131f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d103      	bne.n	8013206 <CircularQueue_Remove+0xac>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	891b      	ldrh	r3, [r3, #8]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d012      	beq.n	801322c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	68da      	ldr	r2, [r3, #12]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801320e:	429a      	cmp	r2, r3
 8013210:	d942      	bls.n	8013298 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	891b      	ldrh	r3, [r3, #8]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d03e      	beq.n	8013298 <CircularQueue_Remove+0x13e>
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	685a      	ldr	r2, [r3, #4]
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	68db      	ldr	r3, [r3, #12]
 8013222:	1ad3      	subs	r3, r2, r3
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	8912      	ldrh	r2, [r2, #8]
 8013228:	4293      	cmp	r3, r2
 801322a:	d235      	bcs.n	8013298 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	695a      	ldr	r2, [r3, #20]
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	68d9      	ldr	r1, [r3, #12]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	685b      	ldr	r3, [r3, #4]
 8013238:	1acb      	subs	r3, r1, r3
 801323a:	441a      	add	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2200      	movs	r2, #0
 8013244:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	891b      	ldrh	r3, [r3, #8]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d121      	bne.n	8013292 <CircularQueue_Remove+0x138>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681a      	ldr	r2, [r3, #0]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	4413      	add	r3, r2
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	b29a      	uxth	r2, r3
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6819      	ldr	r1, [r3, #0]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	68db      	ldr	r3, [r3, #12]
 8013264:	1c58      	adds	r0, r3, #1
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	685b      	ldr	r3, [r3, #4]
 801326a:	4298      	cmp	r0, r3
 801326c:	d306      	bcc.n	801327c <CircularQueue_Remove+0x122>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	68d8      	ldr	r0, [r3, #12]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	1ac3      	subs	r3, r0, r3
 8013278:	3301      	adds	r3, #1
 801327a:	e002      	b.n	8013282 <CircularQueue_Remove+0x128>
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	3301      	adds	r3, #1
 8013282:	440b      	add	r3, r1
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	b29b      	uxth	r3, r3
 8013288:	021b      	lsls	r3, r3, #8
 801328a:	b29b      	uxth	r3, r3
 801328c:	4413      	add	r3, r2
 801328e:	b29b      	uxth	r3, r3
 8013290:	e001      	b.n	8013296 <CircularQueue_Remove+0x13c>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	891b      	ldrh	r3, [r3, #8]
 8013296:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681a      	ldr	r2, [r3, #0]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	68d9      	ldr	r1, [r3, #12]
 80132a0:	7a7b      	ldrb	r3, [r7, #9]
 80132a2:	4419      	add	r1, r3
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	4299      	cmp	r1, r3
 80132aa:	d307      	bcc.n	80132bc <CircularQueue_Remove+0x162>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	68d9      	ldr	r1, [r3, #12]
 80132b0:	7a7b      	ldrb	r3, [r7, #9]
 80132b2:	4419      	add	r1, r3
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	685b      	ldr	r3, [r3, #4]
 80132b8:	1acb      	subs	r3, r1, r3
 80132ba:	e003      	b.n	80132c4 <CircularQueue_Remove+0x16a>
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	68d9      	ldr	r1, [r3, #12]
 80132c0:	7a7b      	ldrb	r3, [r7, #9]
 80132c2:	440b      	add	r3, r1
 80132c4:	4413      	add	r3, r2
 80132c6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	695b      	ldr	r3, [r3, #20]
 80132cc:	8979      	ldrh	r1, [r7, #10]
 80132ce:	7a7a      	ldrb	r2, [r7, #9]
 80132d0:	440a      	add	r2, r1
 80132d2:	1a9a      	subs	r2, r3, r2
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	695b      	ldr	r3, [r3, #20]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d01b      	beq.n	8013318 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	68da      	ldr	r2, [r3, #12]
 80132e4:	897b      	ldrh	r3, [r7, #10]
 80132e6:	441a      	add	r2, r3
 80132e8:	7a7b      	ldrb	r3, [r7, #9]
 80132ea:	441a      	add	r2, r3
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	685b      	ldr	r3, [r3, #4]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d309      	bcc.n	8013308 <CircularQueue_Remove+0x1ae>
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	68da      	ldr	r2, [r3, #12]
 80132f8:	897b      	ldrh	r3, [r7, #10]
 80132fa:	441a      	add	r2, r3
 80132fc:	7a7b      	ldrb	r3, [r7, #9]
 80132fe:	441a      	add	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	685b      	ldr	r3, [r3, #4]
 8013304:	1ad3      	subs	r3, r2, r3
 8013306:	e005      	b.n	8013314 <CircularQueue_Remove+0x1ba>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	68da      	ldr	r2, [r3, #12]
 801330c:	897b      	ldrh	r3, [r7, #10]
 801330e:	441a      	add	r2, r3
 8013310:	7a7b      	ldrb	r3, [r7, #9]
 8013312:	4413      	add	r3, r2
 8013314:	687a      	ldr	r2, [r7, #4]
 8013316:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	699b      	ldr	r3, [r3, #24]
 801331c:	1e5a      	subs	r2, r3, #1
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d002      	beq.n	801332e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	897a      	ldrh	r2, [r7, #10]
 801332c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 801332e:	68fb      	ldr	r3, [r7, #12]
}
 8013330:	4618      	mov	r0, r3
 8013332:	3714      	adds	r7, #20
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 801333c:	b480      	push	{r7}
 801333e:	b087      	sub	sp, #28
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8013346:	2300      	movs	r3, #0
 8013348:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	891b      	ldrh	r3, [r3, #8]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d101      	bne.n	801335a <CircularQueue_Sense+0x1e>
 8013356:	2302      	movs	r3, #2
 8013358:	e000      	b.n	801335c <CircularQueue_Sense+0x20>
 801335a:	2300      	movs	r3, #0
 801335c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 801335e:	2300      	movs	r3, #0
 8013360:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8013362:	2300      	movs	r3, #0
 8013364:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	695b      	ldr	r3, [r3, #20]
 801336a:	2b00      	cmp	r3, #0
 801336c:	f000 8090 	beq.w	8013490 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	68db      	ldr	r3, [r3, #12]
 8013374:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	891b      	ldrh	r3, [r3, #8]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d121      	bne.n	80133c2 <CircularQueue_Sense+0x86>
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	68db      	ldr	r3, [r3, #12]
 8013386:	4413      	add	r3, r2
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	b29a      	uxth	r2, r3
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6819      	ldr	r1, [r3, #0]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	1c58      	adds	r0, r3, #1
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	4298      	cmp	r0, r3
 801339c:	d306      	bcc.n	80133ac <CircularQueue_Sense+0x70>
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	68d8      	ldr	r0, [r3, #12]
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	685b      	ldr	r3, [r3, #4]
 80133a6:	1ac3      	subs	r3, r0, r3
 80133a8:	3301      	adds	r3, #1
 80133aa:	e002      	b.n	80133b2 <CircularQueue_Sense+0x76>
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	68db      	ldr	r3, [r3, #12]
 80133b0:	3301      	adds	r3, #1
 80133b2:	440b      	add	r3, r1
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	021b      	lsls	r3, r3, #8
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	4413      	add	r3, r2
 80133be:	b29b      	uxth	r3, r3
 80133c0:	e001      	b.n	80133c6 <CircularQueue_Sense+0x8a>
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	891b      	ldrh	r3, [r3, #8]
 80133c6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	7f1b      	ldrb	r3, [r3, #28]
 80133cc:	f003 0301 	and.w	r3, r3, #1
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d048      	beq.n	8013466 <CircularQueue_Sense+0x12a>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	7f1b      	ldrb	r3, [r3, #28]
 80133d8:	f003 0302 	and.w	r3, r3, #2
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d142      	bne.n	8013466 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80133e0:	8a7b      	ldrh	r3, [r7, #18]
 80133e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133e6:	4293      	cmp	r3, r2
 80133e8:	d103      	bne.n	80133f2 <CircularQueue_Sense+0xb6>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	891b      	ldrh	r3, [r3, #8]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d012      	beq.n	8013418 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	68da      	ldr	r2, [r3, #12]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d933      	bls.n	8013466 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	891b      	ldrh	r3, [r3, #8]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d02f      	beq.n	8013466 <CircularQueue_Sense+0x12a>
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	685a      	ldr	r2, [r3, #4]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	1ad3      	subs	r3, r2, r3
 8013410:	687a      	ldr	r2, [r7, #4]
 8013412:	8912      	ldrh	r2, [r2, #8]
 8013414:	4293      	cmp	r3, r2
 8013416:	d226      	bcs.n	8013466 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8013418:	2300      	movs	r3, #0
 801341a:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	891b      	ldrh	r3, [r3, #8]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d11d      	bne.n	8013460 <CircularQueue_Sense+0x124>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681a      	ldr	r2, [r3, #0]
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	4413      	add	r3, r2
 801342c:	781b      	ldrb	r3, [r3, #0]
 801342e:	b29a      	uxth	r2, r3
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6819      	ldr	r1, [r3, #0]
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	1c58      	adds	r0, r3, #1
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	4298      	cmp	r0, r3
 801343e:	d305      	bcc.n	801344c <CircularQueue_Sense+0x110>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	68f8      	ldr	r0, [r7, #12]
 8013446:	1ac3      	subs	r3, r0, r3
 8013448:	3301      	adds	r3, #1
 801344a:	e001      	b.n	8013450 <CircularQueue_Sense+0x114>
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	3301      	adds	r3, #1
 8013450:	440b      	add	r3, r1
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	b29b      	uxth	r3, r3
 8013456:	021b      	lsls	r3, r3, #8
 8013458:	b29b      	uxth	r3, r3
 801345a:	4413      	add	r3, r2
 801345c:	b29b      	uxth	r3, r3
 801345e:	e001      	b.n	8013464 <CircularQueue_Sense+0x128>
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	891b      	ldrh	r3, [r3, #8]
 8013464:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	7af9      	ldrb	r1, [r7, #11]
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	4419      	add	r1, r3
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	685b      	ldr	r3, [r3, #4]
 8013474:	4299      	cmp	r1, r3
 8013476:	d306      	bcc.n	8013486 <CircularQueue_Sense+0x14a>
 8013478:	7af9      	ldrb	r1, [r7, #11]
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	4419      	add	r1, r3
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	685b      	ldr	r3, [r3, #4]
 8013482:	1acb      	subs	r3, r1, r3
 8013484:	e002      	b.n	801348c <CircularQueue_Sense+0x150>
 8013486:	7af9      	ldrb	r1, [r7, #11]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	440b      	add	r3, r1
 801348c:	4413      	add	r3, r2
 801348e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d002      	beq.n	801349c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	8a7a      	ldrh	r2, [r7, #18]
 801349a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 801349c:	697b      	ldr	r3, [r7, #20]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	371c      	adds	r7, #28
 80134a2:	46bd      	mov	sp, r7
 80134a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a8:	4770      	bx	lr

080134aa <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80134aa:	b480      	push	{r7}
 80134ac:	af00      	add	r7, sp, #0
  return;
 80134ae:	bf00      	nop
}
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr

080134b8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80134b8:	b480      	push	{r7}
 80134ba:	af00      	add	r7, sp, #0
  return;
 80134bc:	bf00      	nop
}
 80134be:	46bd      	mov	sp, r7
 80134c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c4:	4770      	bx	lr

080134c6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80134c6:	b480      	push	{r7}
 80134c8:	af00      	add	r7, sp, #0
  return;
 80134ca:	bf00      	nop
}
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr

080134d4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80134d4:	b480      	push	{r7}
 80134d6:	af00      	add	r7, sp, #0
  return;
 80134d8:	bf00      	nop
}
 80134da:	46bd      	mov	sp, r7
 80134dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e0:	4770      	bx	lr

080134e2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80134e2:	b480      	push	{r7}
 80134e4:	af00      	add	r7, sp, #0
  return;
 80134e6:	bf00      	nop
}
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr

080134f0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80134f0:	b480      	push	{r7}
 80134f2:	af00      	add	r7, sp, #0
  return;
 80134f4:	bf00      	nop
}
 80134f6:	46bd      	mov	sp, r7
 80134f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fc:	4770      	bx	lr

080134fe <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80134fe:	b480      	push	{r7}
 8013500:	af00      	add	r7, sp, #0
  return;
 8013502:	bf00      	nop
}
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr

0801350c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 801350c:	b480      	push	{r7}
 801350e:	af00      	add	r7, sp, #0
  return;
 8013510:	bf00      	nop
}
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr

0801351a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801351a:	b480      	push	{r7}
 801351c:	af00      	add	r7, sp, #0
  return;
 801351e:	bf00      	nop
}
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr

08013528 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8013528:	b480      	push	{r7}
 801352a:	af00      	add	r7, sp, #0
  return;
 801352c:	bf00      	nop
}
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr

08013536 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8013536:	b480      	push	{r7}
 8013538:	af00      	add	r7, sp, #0
  return;
 801353a:	bf00      	nop
}
 801353c:	46bd      	mov	sp, r7
 801353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013542:	4770      	bx	lr

08013544 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8013544:	b480      	push	{r7}
 8013546:	af00      	add	r7, sp, #0
  return;
 8013548:	bf00      	nop
}
 801354a:	46bd      	mov	sp, r7
 801354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013550:	4770      	bx	lr

08013552 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 8013552:	b480      	push	{r7}
 8013554:	af00      	add	r7, sp, #0
  return;
 8013556:	bf00      	nop
}
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr

08013560 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8013560:	b480      	push	{r7}
 8013562:	af00      	add	r7, sp, #0
  return;
 8013564:	bf00      	nop
}
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr

0801356e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 801356e:	b480      	push	{r7}
 8013570:	af00      	add	r7, sp, #0
  return;
 8013572:	bf00      	nop
}
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr

0801357c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 801357c:	b480      	push	{r7}
 801357e:	af00      	add	r7, sp, #0
  return;
 8013580:	bf00      	nop
}
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr

0801358a <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 801358a:	b480      	push	{r7}
 801358c:	af00      	add	r7, sp, #0
  return;
 801358e:	bf00      	nop
}
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr

08013598 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 801359c:	4b04      	ldr	r3, [pc, #16]	; (80135b0 <SVCCTL_Init+0x18>)
 801359e:	2200      	movs	r2, #0
 80135a0:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80135a2:	4b04      	ldr	r3, [pc, #16]	; (80135b4 <SVCCTL_Init+0x1c>)
 80135a4:	2200      	movs	r2, #0
 80135a6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80135a8:	f000 f806 	bl	80135b8 <SVCCTL_SvcInit>

  return;
 80135ac:	bf00      	nop
}
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	2000026c 	.word	0x2000026c
 80135b4:	20000274 	.word	0x20000274

080135b8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	af00      	add	r7, sp, #0
  BAS_Init();
 80135bc:	f7ff ff75 	bl	80134aa <BAS_Init>

  BLS_Init();
 80135c0:	f7ff ff7a 	bl	80134b8 <BLS_Init>

  CRS_STM_Init();
 80135c4:	f7ff ff7f 	bl	80134c6 <CRS_STM_Init>

  DIS_Init();
 80135c8:	f7ff ff84 	bl	80134d4 <DIS_Init>

  EDS_STM_Init();
 80135cc:	f7ff ff89 	bl	80134e2 <EDS_STM_Init>

  HIDS_Init();
 80135d0:	f7ff ff8e 	bl	80134f0 <HIDS_Init>

  HRS_Init();
 80135d4:	f7ff ff93 	bl	80134fe <HRS_Init>

  HTS_Init();
 80135d8:	f7ff ff98 	bl	801350c <HTS_Init>

  IAS_Init();
 80135dc:	f7ff ff9d 	bl	801351a <IAS_Init>

  LLS_Init();
 80135e0:	f7ff ffa2 	bl	8013528 <LLS_Init>

  TPS_Init();
 80135e4:	f7ff ffa7 	bl	8013536 <TPS_Init>

  MOTENV_STM_Init();
 80135e8:	f7ff ffac 	bl	8013544 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80135ec:	f7fe ffae 	bl	801254c <P2PS_STM_Init>

  ZDD_STM_Init();
 80135f0:	f7ff ffaf 	bl	8013552 <ZDD_STM_Init>

  OTAS_STM_Init();
 80135f4:	f7ff ffb4 	bl	8013560 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80135f8:	f7ff ffc0 	bl	801357c <BVOPUS_STM_Init>

  MESH_Init();
 80135fc:	f7ff ffb7 	bl	801356e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8013600:	f7ff ffc3 	bl	801358a <SVCCTL_InitCustomSvc>
  
  return;
 8013604:	bf00      	nop
}
 8013606:	bd80      	pop	{r7, pc}

08013608 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8013610:	4b09      	ldr	r3, [pc, #36]	; (8013638 <SVCCTL_RegisterSvcHandler+0x30>)
 8013612:	791b      	ldrb	r3, [r3, #4]
 8013614:	4619      	mov	r1, r3
 8013616:	4a08      	ldr	r2, [pc, #32]	; (8013638 <SVCCTL_RegisterSvcHandler+0x30>)
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 801361e:	4b06      	ldr	r3, [pc, #24]	; (8013638 <SVCCTL_RegisterSvcHandler+0x30>)
 8013620:	791b      	ldrb	r3, [r3, #4]
 8013622:	3301      	adds	r3, #1
 8013624:	b2da      	uxtb	r2, r3
 8013626:	4b04      	ldr	r3, [pc, #16]	; (8013638 <SVCCTL_RegisterSvcHandler+0x30>)
 8013628:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801362a:	bf00      	nop
}
 801362c:	370c      	adds	r7, #12
 801362e:	46bd      	mov	sp, r7
 8013630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013634:	4770      	bx	lr
 8013636:	bf00      	nop
 8013638:	2000026c 	.word	0x2000026c

0801363c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	3301      	adds	r3, #1
 8013648:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801364a:	2300      	movs	r3, #0
 801364c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	2bff      	cmp	r3, #255	; 0xff
 8013654:	d125      	bne.n	80136a2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8013656:	693b      	ldr	r3, [r7, #16]
 8013658:	3302      	adds	r3, #2
 801365a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	881b      	ldrh	r3, [r3, #0]
 8013660:	b29b      	uxth	r3, r3
 8013662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801366a:	d118      	bne.n	801369e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801366c:	2300      	movs	r3, #0
 801366e:	757b      	strb	r3, [r7, #21]
 8013670:	e00d      	b.n	801368e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8013672:	7d7b      	ldrb	r3, [r7, #21]
 8013674:	4a1a      	ldr	r2, [pc, #104]	; (80136e0 <SVCCTL_UserEvtRx+0xa4>)
 8013676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	4798      	blx	r3
 801367e:	4603      	mov	r3, r0
 8013680:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8013682:	7dfb      	ldrb	r3, [r7, #23]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d108      	bne.n	801369a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8013688:	7d7b      	ldrb	r3, [r7, #21]
 801368a:	3301      	adds	r3, #1
 801368c:	757b      	strb	r3, [r7, #21]
 801368e:	4b14      	ldr	r3, [pc, #80]	; (80136e0 <SVCCTL_UserEvtRx+0xa4>)
 8013690:	791b      	ldrb	r3, [r3, #4]
 8013692:	7d7a      	ldrb	r2, [r7, #21]
 8013694:	429a      	cmp	r2, r3
 8013696:	d3ec      	bcc.n	8013672 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8013698:	e002      	b.n	80136a0 <SVCCTL_UserEvtRx+0x64>
              break;
 801369a:	bf00      	nop
          break;
 801369c:	e000      	b.n	80136a0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801369e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80136a0:	e000      	b.n	80136a4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80136a2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80136a4:	7dfb      	ldrb	r3, [r7, #23]
 80136a6:	2b02      	cmp	r3, #2
 80136a8:	d00f      	beq.n	80136ca <SVCCTL_UserEvtRx+0x8e>
 80136aa:	2b02      	cmp	r3, #2
 80136ac:	dc10      	bgt.n	80136d0 <SVCCTL_UserEvtRx+0x94>
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d002      	beq.n	80136b8 <SVCCTL_UserEvtRx+0x7c>
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d006      	beq.n	80136c4 <SVCCTL_UserEvtRx+0x88>
 80136b6:	e00b      	b.n	80136d0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f7f1 fd3b 	bl	8005134 <SVCCTL_App_Notification>
 80136be:	4603      	mov	r3, r0
 80136c0:	75bb      	strb	r3, [r7, #22]
      break;
 80136c2:	e008      	b.n	80136d6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80136c4:	2301      	movs	r3, #1
 80136c6:	75bb      	strb	r3, [r7, #22]
      break;
 80136c8:	e005      	b.n	80136d6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80136ca:	2300      	movs	r3, #0
 80136cc:	75bb      	strb	r3, [r7, #22]
      break;
 80136ce:	e002      	b.n	80136d6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80136d0:	2301      	movs	r3, #1
 80136d2:	75bb      	strb	r3, [r7, #22]
      break;
 80136d4:	bf00      	nop
  }

  return (return_status);
 80136d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3718      	adds	r7, #24
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	2000026c 	.word	0x2000026c

080136e4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80136e8:	f7f3 f9ca 	bl	8006a80 <HW_IPCC_Enable>

  return;
 80136ec:	bf00      	nop
}
 80136ee:	bd80      	pop	{r7, pc}

080136f0 <TL_Init>:


void TL_Init( void )
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80136f4:	4b10      	ldr	r3, [pc, #64]	; (8013738 <TL_Init+0x48>)
 80136f6:	4a11      	ldr	r2, [pc, #68]	; (801373c <TL_Init+0x4c>)
 80136f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80136fa:	4b0f      	ldr	r3, [pc, #60]	; (8013738 <TL_Init+0x48>)
 80136fc:	4a10      	ldr	r2, [pc, #64]	; (8013740 <TL_Init+0x50>)
 80136fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8013700:	4b0d      	ldr	r3, [pc, #52]	; (8013738 <TL_Init+0x48>)
 8013702:	4a10      	ldr	r2, [pc, #64]	; (8013744 <TL_Init+0x54>)
 8013704:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8013706:	4b0c      	ldr	r3, [pc, #48]	; (8013738 <TL_Init+0x48>)
 8013708:	4a0f      	ldr	r2, [pc, #60]	; (8013748 <TL_Init+0x58>)
 801370a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801370c:	4b0a      	ldr	r3, [pc, #40]	; (8013738 <TL_Init+0x48>)
 801370e:	4a0f      	ldr	r2, [pc, #60]	; (801374c <TL_Init+0x5c>)
 8013710:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8013712:	4b09      	ldr	r3, [pc, #36]	; (8013738 <TL_Init+0x48>)
 8013714:	4a0e      	ldr	r2, [pc, #56]	; (8013750 <TL_Init+0x60>)
 8013716:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8013718:	4b07      	ldr	r3, [pc, #28]	; (8013738 <TL_Init+0x48>)
 801371a:	4a0e      	ldr	r2, [pc, #56]	; (8013754 <TL_Init+0x64>)
 801371c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801371e:	4b06      	ldr	r3, [pc, #24]	; (8013738 <TL_Init+0x48>)
 8013720:	4a0d      	ldr	r2, [pc, #52]	; (8013758 <TL_Init+0x68>)
 8013722:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8013724:	4b04      	ldr	r3, [pc, #16]	; (8013738 <TL_Init+0x48>)
 8013726:	4a0d      	ldr	r2, [pc, #52]	; (801375c <TL_Init+0x6c>)
 8013728:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801372a:	4b03      	ldr	r3, [pc, #12]	; (8013738 <TL_Init+0x48>)
 801372c:	4a0c      	ldr	r2, [pc, #48]	; (8013760 <TL_Init+0x70>)
 801372e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8013730:	f7f3 f9ba 	bl	8006aa8 <HW_IPCC_Init>

  return;
 8013734:	bf00      	nop
}
 8013736:	bd80      	pop	{r7, pc}
 8013738:	20030000 	.word	0x20030000
 801373c:	20030134 	.word	0x20030134
 8013740:	20030154 	.word	0x20030154
 8013744:	20030164 	.word	0x20030164
 8013748:	20030174 	.word	0x20030174
 801374c:	2003017c 	.word	0x2003017c
 8013750:	20030184 	.word	0x20030184
 8013754:	2003018c 	.word	0x2003018c
 8013758:	200301a8 	.word	0x200301a8
 801375c:	200301ac 	.word	0x200301ac
 8013760:	200301b8 	.word	0x200301b8

08013764 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b084      	sub	sp, #16
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8013770:	4811      	ldr	r0, [pc, #68]	; (80137b8 <TL_BLE_Init+0x54>)
 8013772:	f7ff f9db 	bl	8012b2c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8013776:	4b11      	ldr	r3, [pc, #68]	; (80137bc <TL_BLE_Init+0x58>)
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	689a      	ldr	r2, [r3, #8]
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	68da      	ldr	r2, [r3, #12]
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	4a0c      	ldr	r2, [pc, #48]	; (80137c0 <TL_BLE_Init+0x5c>)
 8013790:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	4a08      	ldr	r2, [pc, #32]	; (80137b8 <TL_BLE_Init+0x54>)
 8013796:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8013798:	f7f3 f99c 	bl	8006ad4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	4a08      	ldr	r2, [pc, #32]	; (80137c4 <TL_BLE_Init+0x60>)
 80137a2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	685b      	ldr	r3, [r3, #4]
 80137a8:	4a07      	ldr	r2, [pc, #28]	; (80137c8 <TL_BLE_Init+0x64>)
 80137aa:	6013      	str	r3, [r2, #0]

  return 0;
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3710      	adds	r7, #16
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	200301d4 	.word	0x200301d4
 80137bc:	20030000 	.word	0x20030000
 80137c0:	20030a58 	.word	0x20030a58
 80137c4:	20003550 	.word	0x20003550
 80137c8:	20003554 	.word	0x20003554

080137cc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	460b      	mov	r3, r1
 80137d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80137d8:	4b09      	ldr	r3, [pc, #36]	; (8013800 <TL_BLE_SendCmd+0x34>)
 80137da:	685b      	ldr	r3, [r3, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	2201      	movs	r2, #1
 80137e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80137e2:	4b07      	ldr	r3, [pc, #28]	; (8013800 <TL_BLE_SendCmd+0x34>)
 80137e4:	685b      	ldr	r3, [r3, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	4619      	mov	r1, r3
 80137ea:	2001      	movs	r0, #1
 80137ec:	f000 f96c 	bl	8013ac8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80137f0:	f7f3 f97a 	bl	8006ae8 <HW_IPCC_BLE_SendCmd>

  return 0;
 80137f4:	2300      	movs	r3, #0
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3708      	adds	r7, #8
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	20030000 	.word	0x20030000

08013804 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b082      	sub	sp, #8
 8013808:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801380a:	e01c      	b.n	8013846 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 801380c:	1d3b      	adds	r3, r7, #4
 801380e:	4619      	mov	r1, r3
 8013810:	4812      	ldr	r0, [pc, #72]	; (801385c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8013812:	f7ff fa2a 	bl	8012c6a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	7a5b      	ldrb	r3, [r3, #9]
 801381a:	2b0f      	cmp	r3, #15
 801381c:	d003      	beq.n	8013826 <HW_IPCC_BLE_RxEvtNot+0x22>
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	7a5b      	ldrb	r3, [r3, #9]
 8013822:	2b0e      	cmp	r3, #14
 8013824:	d105      	bne.n	8013832 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	4619      	mov	r1, r3
 801382a:	2002      	movs	r0, #2
 801382c:	f000 f94c 	bl	8013ac8 <OutputDbgTrace>
 8013830:	e004      	b.n	801383c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4619      	mov	r1, r3
 8013836:	2003      	movs	r0, #3
 8013838:	f000 f946 	bl	8013ac8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 801383c:	4b08      	ldr	r3, [pc, #32]	; (8013860 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	687a      	ldr	r2, [r7, #4]
 8013842:	4610      	mov	r0, r2
 8013844:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8013846:	4805      	ldr	r0, [pc, #20]	; (801385c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8013848:	f7ff f980 	bl	8012b4c <LST_is_empty>
 801384c:	4603      	mov	r3, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	d0dc      	beq.n	801380c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8013852:	bf00      	nop
}
 8013854:	3708      	adds	r7, #8
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
 801385a:	bf00      	nop
 801385c:	200301d4 	.word	0x200301d4
 8013860:	20003550 	.word	0x20003550

08013864 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8013868:	4b02      	ldr	r3, [pc, #8]	; (8013874 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	4798      	blx	r3

  return;
 801386e:	bf00      	nop
}
 8013870:	bd80      	pop	{r7, pc}
 8013872:	bf00      	nop
 8013874:	20003554 	.word	0x20003554

08013878 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8013884:	480d      	ldr	r0, [pc, #52]	; (80138bc <TL_SYS_Init+0x44>)
 8013886:	f7ff f951 	bl	8012b2c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801388a:	4b0d      	ldr	r3, [pc, #52]	; (80138c0 <TL_SYS_Init+0x48>)
 801388c:	68db      	ldr	r3, [r3, #12]
 801388e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	689a      	ldr	r2, [r3, #8]
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	4a08      	ldr	r2, [pc, #32]	; (80138bc <TL_SYS_Init+0x44>)
 801389c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801389e:	f7f3 f945 	bl	8006b2c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	4a07      	ldr	r2, [pc, #28]	; (80138c4 <TL_SYS_Init+0x4c>)
 80138a8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	4a06      	ldr	r2, [pc, #24]	; (80138c8 <TL_SYS_Init+0x50>)
 80138b0:	6013      	str	r3, [r2, #0]

  return 0;
 80138b2:	2300      	movs	r3, #0
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3710      	adds	r7, #16
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	200301dc 	.word	0x200301dc
 80138c0:	20030000 	.word	0x20030000
 80138c4:	20003558 	.word	0x20003558
 80138c8:	2000355c 	.word	0x2000355c

080138cc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
 80138d4:	460b      	mov	r3, r1
 80138d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80138d8:	4b09      	ldr	r3, [pc, #36]	; (8013900 <TL_SYS_SendCmd+0x34>)
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	2210      	movs	r2, #16
 80138e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80138e2:	4b07      	ldr	r3, [pc, #28]	; (8013900 <TL_SYS_SendCmd+0x34>)
 80138e4:	68db      	ldr	r3, [r3, #12]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4619      	mov	r1, r3
 80138ea:	2004      	movs	r0, #4
 80138ec:	f000 f8ec 	bl	8013ac8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80138f0:	f7f3 f926 	bl	8006b40 <HW_IPCC_SYS_SendCmd>

  return 0;
 80138f4:	2300      	movs	r3, #0
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3708      	adds	r7, #8
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop
 8013900:	20030000 	.word	0x20030000

08013904 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013908:	4b07      	ldr	r3, [pc, #28]	; (8013928 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	4619      	mov	r1, r3
 8013910:	2005      	movs	r0, #5
 8013912:	f000 f8d9 	bl	8013ac8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013916:	4b05      	ldr	r3, [pc, #20]	; (801392c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4a03      	ldr	r2, [pc, #12]	; (8013928 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801391c:	68d2      	ldr	r2, [r2, #12]
 801391e:	6812      	ldr	r2, [r2, #0]
 8013920:	4610      	mov	r0, r2
 8013922:	4798      	blx	r3

  return;
 8013924:	bf00      	nop
}
 8013926:	bd80      	pop	{r7, pc}
 8013928:	20030000 	.word	0x20030000
 801392c:	20003558 	.word	0x20003558

08013930 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013936:	e00e      	b.n	8013956 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8013938:	1d3b      	adds	r3, r7, #4
 801393a:	4619      	mov	r1, r3
 801393c:	480b      	ldr	r0, [pc, #44]	; (801396c <HW_IPCC_SYS_EvtNot+0x3c>)
 801393e:	f7ff f994 	bl	8012c6a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	4619      	mov	r1, r3
 8013946:	2006      	movs	r0, #6
 8013948:	f000 f8be 	bl	8013ac8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 801394c:	4b08      	ldr	r3, [pc, #32]	; (8013970 <HW_IPCC_SYS_EvtNot+0x40>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	687a      	ldr	r2, [r7, #4]
 8013952:	4610      	mov	r0, r2
 8013954:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013956:	4805      	ldr	r0, [pc, #20]	; (801396c <HW_IPCC_SYS_EvtNot+0x3c>)
 8013958:	f7ff f8f8 	bl	8012b4c <LST_is_empty>
 801395c:	4603      	mov	r3, r0
 801395e:	2b00      	cmp	r3, #0
 8013960:	d0ea      	beq.n	8013938 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8013962:	bf00      	nop
}
 8013964:	3708      	adds	r7, #8
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}
 801396a:	bf00      	nop
 801396c:	200301dc 	.word	0x200301dc
 8013970:	2000355c 	.word	0x2000355c

08013974 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 801397c:	4817      	ldr	r0, [pc, #92]	; (80139dc <TL_MM_Init+0x68>)
 801397e:	f7ff f8d5 	bl	8012b2c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8013982:	4817      	ldr	r0, [pc, #92]	; (80139e0 <TL_MM_Init+0x6c>)
 8013984:	f7ff f8d2 	bl	8012b2c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8013988:	4b16      	ldr	r3, [pc, #88]	; (80139e4 <TL_MM_Init+0x70>)
 801398a:	691b      	ldr	r3, [r3, #16]
 801398c:	4a16      	ldr	r2, [pc, #88]	; (80139e8 <TL_MM_Init+0x74>)
 801398e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8013990:	4b15      	ldr	r3, [pc, #84]	; (80139e8 <TL_MM_Init+0x74>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	687a      	ldr	r2, [r7, #4]
 8013996:	6892      	ldr	r2, [r2, #8]
 8013998:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801399a:	4b13      	ldr	r3, [pc, #76]	; (80139e8 <TL_MM_Init+0x74>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	68d2      	ldr	r2, [r2, #12]
 80139a2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80139a4:	4b10      	ldr	r3, [pc, #64]	; (80139e8 <TL_MM_Init+0x74>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	4a0c      	ldr	r2, [pc, #48]	; (80139dc <TL_MM_Init+0x68>)
 80139aa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80139ac:	4b0e      	ldr	r3, [pc, #56]	; (80139e8 <TL_MM_Init+0x74>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	6812      	ldr	r2, [r2, #0]
 80139b4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80139b6:	4b0c      	ldr	r3, [pc, #48]	; (80139e8 <TL_MM_Init+0x74>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	687a      	ldr	r2, [r7, #4]
 80139bc:	6852      	ldr	r2, [r2, #4]
 80139be:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80139c0:	4b09      	ldr	r3, [pc, #36]	; (80139e8 <TL_MM_Init+0x74>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	687a      	ldr	r2, [r7, #4]
 80139c6:	6912      	ldr	r2, [r2, #16]
 80139c8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80139ca:	4b07      	ldr	r3, [pc, #28]	; (80139e8 <TL_MM_Init+0x74>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	687a      	ldr	r2, [r7, #4]
 80139d0:	6952      	ldr	r2, [r2, #20]
 80139d2:	619a      	str	r2, [r3, #24]

  return;
 80139d4:	bf00      	nop
}
 80139d6:	3708      	adds	r7, #8
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	200301c4 	.word	0x200301c4
 80139e0:	20003548 	.word	0x20003548
 80139e4:	20030000 	.word	0x20030000
 80139e8:	20003560 	.word	0x20003560

080139ec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b082      	sub	sp, #8
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80139f4:	6879      	ldr	r1, [r7, #4]
 80139f6:	4807      	ldr	r0, [pc, #28]	; (8013a14 <TL_MM_EvtDone+0x28>)
 80139f8:	f7ff f8f0 	bl	8012bdc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80139fc:	6879      	ldr	r1, [r7, #4]
 80139fe:	2000      	movs	r0, #0
 8013a00:	f000 f862 	bl	8013ac8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8013a04:	4804      	ldr	r0, [pc, #16]	; (8013a18 <TL_MM_EvtDone+0x2c>)
 8013a06:	f7f3 f8c1 	bl	8006b8c <HW_IPCC_MM_SendFreeBuf>

  return;
 8013a0a:	bf00      	nop
}
 8013a0c:	3708      	adds	r7, #8
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	bf00      	nop
 8013a14:	20003548 	.word	0x20003548
 8013a18:	08013a1d 	.word	0x08013a1d

08013a1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8013a22:	e00c      	b.n	8013a3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8013a24:	1d3b      	adds	r3, r7, #4
 8013a26:	4619      	mov	r1, r3
 8013a28:	480a      	ldr	r0, [pc, #40]	; (8013a54 <SendFreeBuf+0x38>)
 8013a2a:	f7ff f91e 	bl	8012c6a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8013a2e:	4b0a      	ldr	r3, [pc, #40]	; (8013a58 <SendFreeBuf+0x3c>)
 8013a30:	691b      	ldr	r3, [r3, #16]
 8013a32:	691b      	ldr	r3, [r3, #16]
 8013a34:	687a      	ldr	r2, [r7, #4]
 8013a36:	4611      	mov	r1, r2
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7ff f8cf 	bl	8012bdc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8013a3e:	4805      	ldr	r0, [pc, #20]	; (8013a54 <SendFreeBuf+0x38>)
 8013a40:	f7ff f884 	bl	8012b4c <LST_is_empty>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d0ec      	beq.n	8013a24 <SendFreeBuf+0x8>
  }

  return;
 8013a4a:	bf00      	nop
}
 8013a4c:	3708      	adds	r7, #8
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	bf00      	nop
 8013a54:	20003548 	.word	0x20003548
 8013a58:	20030000 	.word	0x20030000

08013a5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8013a60:	4805      	ldr	r0, [pc, #20]	; (8013a78 <TL_TRACES_Init+0x1c>)
 8013a62:	f7ff f863 	bl	8012b2c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8013a66:	4b05      	ldr	r3, [pc, #20]	; (8013a7c <TL_TRACES_Init+0x20>)
 8013a68:	695b      	ldr	r3, [r3, #20]
 8013a6a:	4a03      	ldr	r2, [pc, #12]	; (8013a78 <TL_TRACES_Init+0x1c>)
 8013a6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8013a6e:	f7f3 f8c3 	bl	8006bf8 <HW_IPCC_TRACES_Init>

  return;
 8013a72:	bf00      	nop
}
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	200301cc 	.word	0x200301cc
 8013a7c:	20030000 	.word	0x20030000

08013a80 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8013a86:	e008      	b.n	8013a9a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8013a88:	1d3b      	adds	r3, r7, #4
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	4808      	ldr	r0, [pc, #32]	; (8013ab0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8013a8e:	f7ff f8ec 	bl	8012c6a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	4618      	mov	r0, r3
 8013a96:	f000 f80d 	bl	8013ab4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8013a9a:	4805      	ldr	r0, [pc, #20]	; (8013ab0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8013a9c:	f7ff f856 	bl	8012b4c <LST_is_empty>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d0f0      	beq.n	8013a88 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8013aa6:	bf00      	nop
}
 8013aa8:	3708      	adds	r7, #8
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
 8013aae:	bf00      	nop
 8013ab0:	200301cc 	.word	0x200301cc

08013ab4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8013abc:	bf00      	nop
 8013abe:	370c      	adds	r7, #12
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b085      	sub	sp, #20
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	4603      	mov	r3, r0
 8013ad0:	6039      	str	r1, [r7, #0]
 8013ad2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8013ad4:	79fb      	ldrb	r3, [r7, #7]
 8013ad6:	2b06      	cmp	r3, #6
 8013ad8:	d845      	bhi.n	8013b66 <OutputDbgTrace+0x9e>
 8013ada:	a201      	add	r2, pc, #4	; (adr r2, 8013ae0 <OutputDbgTrace+0x18>)
 8013adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ae0:	08013afd 	.word	0x08013afd
 8013ae4:	08013b21 	.word	0x08013b21
 8013ae8:	08013b27 	.word	0x08013b27
 8013aec:	08013b3b 	.word	0x08013b3b
 8013af0:	08013b47 	.word	0x08013b47
 8013af4:	08013b4d 	.word	0x08013b4d
 8013af8:	08013b5b 	.word	0x08013b5b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	7a5b      	ldrb	r3, [r3, #9]
 8013b04:	2bff      	cmp	r3, #255	; 0xff
 8013b06:	d005      	beq.n	8013b14 <OutputDbgTrace+0x4c>
 8013b08:	2bff      	cmp	r3, #255	; 0xff
 8013b0a:	dc05      	bgt.n	8013b18 <OutputDbgTrace+0x50>
 8013b0c:	2b0e      	cmp	r3, #14
 8013b0e:	d005      	beq.n	8013b1c <OutputDbgTrace+0x54>
 8013b10:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8013b12:	e001      	b.n	8013b18 <OutputDbgTrace+0x50>
          break;
 8013b14:	bf00      	nop
 8013b16:	e027      	b.n	8013b68 <OutputDbgTrace+0xa0>
          break;
 8013b18:	bf00      	nop
 8013b1a:	e025      	b.n	8013b68 <OutputDbgTrace+0xa0>
          break;
 8013b1c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8013b1e:	e023      	b.n	8013b68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8013b24:	e020      	b.n	8013b68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	7a5b      	ldrb	r3, [r3, #9]
 8013b2e:	2b0e      	cmp	r3, #14
 8013b30:	d001      	beq.n	8013b36 <OutputDbgTrace+0x6e>
 8013b32:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8013b34:	e000      	b.n	8013b38 <OutputDbgTrace+0x70>
          break;
 8013b36:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8013b38:	e016      	b.n	8013b68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	7a5b      	ldrb	r3, [r3, #9]
 8013b42:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8013b44:	e010      	b.n	8013b68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8013b4a:	e00d      	b.n	8013b68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	7a5b      	ldrb	r3, [r3, #9]
 8013b54:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8013b56:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8013b58:	e006      	b.n	8013b68 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	7a5b      	ldrb	r3, [r3, #9]
 8013b62:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8013b64:	e000      	b.n	8013b68 <OutputDbgTrace+0xa0>

    default:
      break;
 8013b66:	bf00      	nop
  }

  return;
 8013b68:	bf00      	nop
}
 8013b6a:	3714      	adds	r7, #20
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr

08013b74 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013b74:	b480      	push	{r7}
 8013b76:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013b78:	4b05      	ldr	r3, [pc, #20]	; (8013b90 <UTIL_LPM_Init+0x1c>)
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013b7e:	4b05      	ldr	r3, [pc, #20]	; (8013b94 <UTIL_LPM_Init+0x20>)
 8013b80:	2200      	movs	r2, #0
 8013b82:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013b84:	bf00      	nop
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr
 8013b8e:	bf00      	nop
 8013b90:	20003564 	.word	0x20003564
 8013b94:	20003568 	.word	0x20003568

08013b98 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b087      	sub	sp, #28
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8013ba8:	613b      	str	r3, [r7, #16]
  return(result);
 8013baa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013bac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013bae:	b672      	cpsid	i
}
 8013bb0:	bf00      	nop
  
  switch(state)
 8013bb2:	78fb      	ldrb	r3, [r7, #3]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d008      	beq.n	8013bca <UTIL_LPM_SetOffMode+0x32>
 8013bb8:	2b01      	cmp	r3, #1
 8013bba:	d10e      	bne.n	8013bda <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013bbc:	4b0d      	ldr	r3, [pc, #52]	; (8013bf4 <UTIL_LPM_SetOffMode+0x5c>)
 8013bbe:	681a      	ldr	r2, [r3, #0]
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	4313      	orrs	r3, r2
 8013bc4:	4a0b      	ldr	r2, [pc, #44]	; (8013bf4 <UTIL_LPM_SetOffMode+0x5c>)
 8013bc6:	6013      	str	r3, [r2, #0]
      break;
 8013bc8:	e008      	b.n	8013bdc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	43da      	mvns	r2, r3
 8013bce:	4b09      	ldr	r3, [pc, #36]	; (8013bf4 <UTIL_LPM_SetOffMode+0x5c>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	4013      	ands	r3, r2
 8013bd4:	4a07      	ldr	r2, [pc, #28]	; (8013bf4 <UTIL_LPM_SetOffMode+0x5c>)
 8013bd6:	6013      	str	r3, [r2, #0]
      break;
 8013bd8:	e000      	b.n	8013bdc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8013bda:	bf00      	nop
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	f383 8810 	msr	PRIMASK, r3
}
 8013be6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013be8:	bf00      	nop
 8013bea:	371c      	adds	r7, #28
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr
 8013bf4:	20003568 	.word	0x20003568

08013bf8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b090      	sub	sp, #64	; 0x40
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8013c00:	4b73      	ldr	r3, [pc, #460]	; (8013dd0 <UTIL_SEQ_Run+0x1d8>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8013c06:	4b72      	ldr	r3, [pc, #456]	; (8013dd0 <UTIL_SEQ_Run+0x1d8>)
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	4013      	ands	r3, r2
 8013c0e:	4a70      	ldr	r2, [pc, #448]	; (8013dd0 <UTIL_SEQ_Run+0x1d8>)
 8013c10:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8013c12:	4b70      	ldr	r3, [pc, #448]	; (8013dd4 <UTIL_SEQ_Run+0x1dc>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013c18:	4b6f      	ldr	r3, [pc, #444]	; (8013dd8 <UTIL_SEQ_Run+0x1e0>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8013c1e:	4b6f      	ldr	r3, [pc, #444]	; (8013ddc <UTIL_SEQ_Run+0x1e4>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8013c24:	4b6e      	ldr	r3, [pc, #440]	; (8013de0 <UTIL_SEQ_Run+0x1e8>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013c2a:	e08d      	b.n	8013d48 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013c30:	e002      	b.n	8013c38 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8013c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c34:	3301      	adds	r3, #1
 8013c36:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013c38:	4a6a      	ldr	r2, [pc, #424]	; (8013de4 <UTIL_SEQ_Run+0x1ec>)
 8013c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c42:	401a      	ands	r2, r3
 8013c44:	4b62      	ldr	r3, [pc, #392]	; (8013dd0 <UTIL_SEQ_Run+0x1d8>)
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	4013      	ands	r3, r2
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d0f1      	beq.n	8013c32 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8013c4e:	4a65      	ldr	r2, [pc, #404]	; (8013de4 <UTIL_SEQ_Run+0x1ec>)
 8013c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c58:	401a      	ands	r2, r3
 8013c5a:	4b5d      	ldr	r3, [pc, #372]	; (8013dd0 <UTIL_SEQ_Run+0x1d8>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	4013      	ands	r3, r2
 8013c60:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013c62:	4a60      	ldr	r2, [pc, #384]	; (8013de4 <UTIL_SEQ_Run+0x1ec>)
 8013c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c66:	00db      	lsls	r3, r3, #3
 8013c68:	4413      	add	r3, r2
 8013c6a:	685a      	ldr	r2, [r3, #4]
 8013c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6e:	4013      	ands	r3, r2
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d106      	bne.n	8013c82 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8013c74:	4a5b      	ldr	r2, [pc, #364]	; (8013de4 <UTIL_SEQ_Run+0x1ec>)
 8013c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c78:	00db      	lsls	r3, r3, #3
 8013c7a:	4413      	add	r3, r2
 8013c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c80:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013c82:	4a58      	ldr	r2, [pc, #352]	; (8013de4 <UTIL_SEQ_Run+0x1ec>)
 8013c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c86:	00db      	lsls	r3, r3, #3
 8013c88:	4413      	add	r3, r2
 8013c8a:	685a      	ldr	r2, [r3, #4]
 8013c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c8e:	4013      	ands	r3, r2
 8013c90:	4618      	mov	r0, r3
 8013c92:	f000 f9b3 	bl	8013ffc <SEQ_BitPosition>
 8013c96:	4603      	mov	r3, r0
 8013c98:	461a      	mov	r2, r3
 8013c9a:	4b53      	ldr	r3, [pc, #332]	; (8013de8 <UTIL_SEQ_Run+0x1f0>)
 8013c9c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013c9e:	4a51      	ldr	r2, [pc, #324]	; (8013de4 <UTIL_SEQ_Run+0x1ec>)
 8013ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ca2:	00db      	lsls	r3, r3, #3
 8013ca4:	4413      	add	r3, r2
 8013ca6:	685a      	ldr	r2, [r3, #4]
 8013ca8:	4b4f      	ldr	r3, [pc, #316]	; (8013de8 <UTIL_SEQ_Run+0x1f0>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	2101      	movs	r1, #1
 8013cae:	fa01 f303 	lsl.w	r3, r1, r3
 8013cb2:	43db      	mvns	r3, r3
 8013cb4:	401a      	ands	r2, r3
 8013cb6:	494b      	ldr	r1, [pc, #300]	; (8013de4 <UTIL_SEQ_Run+0x1ec>)
 8013cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cba:	00db      	lsls	r3, r3, #3
 8013cbc:	440b      	add	r3, r1
 8013cbe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8013cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8013cc6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013cc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013cca:	b672      	cpsid	i
}
 8013ccc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013cce:	4b46      	ldr	r3, [pc, #280]	; (8013de8 <UTIL_SEQ_Run+0x1f0>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8013cd8:	43da      	mvns	r2, r3
 8013cda:	4b3e      	ldr	r3, [pc, #248]	; (8013dd4 <UTIL_SEQ_Run+0x1dc>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4013      	ands	r3, r2
 8013ce0:	4a3c      	ldr	r2, [pc, #240]	; (8013dd4 <UTIL_SEQ_Run+0x1dc>)
 8013ce2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013ce4:	2302      	movs	r3, #2
 8013ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ce8:	e013      	b.n	8013d12 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cec:	3b01      	subs	r3, #1
 8013cee:	4a3d      	ldr	r2, [pc, #244]	; (8013de4 <UTIL_SEQ_Run+0x1ec>)
 8013cf0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013cf4:	4b3c      	ldr	r3, [pc, #240]	; (8013de8 <UTIL_SEQ_Run+0x1f0>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	2201      	movs	r2, #1
 8013cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8013cfe:	43da      	mvns	r2, r3
 8013d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d02:	3b01      	subs	r3, #1
 8013d04:	400a      	ands	r2, r1
 8013d06:	4937      	ldr	r1, [pc, #220]	; (8013de4 <UTIL_SEQ_Run+0x1ec>)
 8013d08:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d0e:	3b01      	subs	r3, #1
 8013d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d1e8      	bne.n	8013cea <UTIL_SEQ_Run+0xf2>
 8013d18:	6a3b      	ldr	r3, [r7, #32]
 8013d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d1c:	697b      	ldr	r3, [r7, #20]
 8013d1e:	f383 8810 	msr	PRIMASK, r3
}
 8013d22:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8013d24:	4b30      	ldr	r3, [pc, #192]	; (8013de8 <UTIL_SEQ_Run+0x1f0>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	4a30      	ldr	r2, [pc, #192]	; (8013dec <UTIL_SEQ_Run+0x1f4>)
 8013d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d2e:	4798      	blx	r3

    local_taskset = TaskSet;
 8013d30:	4b28      	ldr	r3, [pc, #160]	; (8013dd4 <UTIL_SEQ_Run+0x1dc>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8013d36:	4b28      	ldr	r3, [pc, #160]	; (8013dd8 <UTIL_SEQ_Run+0x1e0>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8013d3c:	4b27      	ldr	r3, [pc, #156]	; (8013ddc <UTIL_SEQ_Run+0x1e4>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8013d42:	4b27      	ldr	r3, [pc, #156]	; (8013de0 <UTIL_SEQ_Run+0x1e8>)
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4c:	401a      	ands	r2, r3
 8013d4e:	4b20      	ldr	r3, [pc, #128]	; (8013dd0 <UTIL_SEQ_Run+0x1d8>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	4013      	ands	r3, r2
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d005      	beq.n	8013d64 <UTIL_SEQ_Run+0x16c>
 8013d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5c:	4013      	ands	r3, r2
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	f43f af64 	beq.w	8013c2c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013d64:	4b20      	ldr	r3, [pc, #128]	; (8013de8 <UTIL_SEQ_Run+0x1f0>)
 8013d66:	f04f 32ff 	mov.w	r2, #4294967295
 8013d6a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013d6c:	f000 f938 	bl	8013fe0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d70:	f3ef 8310 	mrs	r3, PRIMASK
 8013d74:	613b      	str	r3, [r7, #16]
  return(result);
 8013d76:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8013d78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013d7a:	b672      	cpsid	i
}
 8013d7c:	bf00      	nop
  local_taskset = TaskSet;
 8013d7e:	4b15      	ldr	r3, [pc, #84]	; (8013dd4 <UTIL_SEQ_Run+0x1dc>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8013d84:	4b14      	ldr	r3, [pc, #80]	; (8013dd8 <UTIL_SEQ_Run+0x1e0>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8013d8a:	4b14      	ldr	r3, [pc, #80]	; (8013ddc <UTIL_SEQ_Run+0x1e4>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d94:	401a      	ands	r2, r3
 8013d96:	4b0e      	ldr	r3, [pc, #56]	; (8013dd0 <UTIL_SEQ_Run+0x1d8>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	4013      	ands	r3, r2
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d107      	bne.n	8013db0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8013da0:	4b0f      	ldr	r3, [pc, #60]	; (8013de0 <UTIL_SEQ_Run+0x1e8>)
 8013da2:	681a      	ldr	r2, [r3, #0]
 8013da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013da6:	4013      	ands	r3, r2
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d101      	bne.n	8013db0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8013dac:	f7ee fe04 	bl	80029b8 <UTIL_SEQ_Idle>
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	f383 8810 	msr	PRIMASK, r3
}
 8013dba:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8013dbc:	f000 f917 	bl	8013fee <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8013dc0:	4a03      	ldr	r2, [pc, #12]	; (8013dd0 <UTIL_SEQ_Run+0x1d8>)
 8013dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc4:	6013      	str	r3, [r2, #0]

  return;
 8013dc6:	bf00      	nop
}
 8013dc8:	3740      	adds	r7, #64	; 0x40
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	20000084 	.word	0x20000084
 8013dd4:	2000356c 	.word	0x2000356c
 8013dd8:	20003570 	.word	0x20003570
 8013ddc:	20000080 	.word	0x20000080
 8013de0:	20003574 	.word	0x20003574
 8013de4:	200035fc 	.word	0x200035fc
 8013de8:	20003578 	.word	0x20003578
 8013dec:	2000357c 	.word	0x2000357c

08013df0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b088      	sub	sp, #32
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	60f8      	str	r0, [r7, #12]
 8013df8:	60b9      	str	r1, [r7, #8]
 8013dfa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8013e00:	617b      	str	r3, [r7, #20]
  return(result);
 8013e02:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8013e04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e06:	b672      	cpsid	i
}
 8013e08:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013e0a:	68f8      	ldr	r0, [r7, #12]
 8013e0c:	f000 f8f6 	bl	8013ffc <SEQ_BitPosition>
 8013e10:	4603      	mov	r3, r0
 8013e12:	4619      	mov	r1, r3
 8013e14:	4a06      	ldr	r2, [pc, #24]	; (8013e30 <UTIL_SEQ_RegTask+0x40>)
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013e1c:	69fb      	ldr	r3, [r7, #28]
 8013e1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e20:	69bb      	ldr	r3, [r7, #24]
 8013e22:	f383 8810 	msr	PRIMASK, r3
}
 8013e26:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013e28:	bf00      	nop
}
 8013e2a:	3720      	adds	r7, #32
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}
 8013e30:	2000357c 	.word	0x2000357c

08013e34 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8013e34:	b480      	push	{r7}
 8013e36:	b087      	sub	sp, #28
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
 8013e3c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8013e42:	60fb      	str	r3, [r7, #12]
  return(result);
 8013e44:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013e46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e48:	b672      	cpsid	i
}
 8013e4a:	bf00      	nop

  TaskSet |= TaskId_bm;
 8013e4c:	4b0d      	ldr	r3, [pc, #52]	; (8013e84 <UTIL_SEQ_SetTask+0x50>)
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	4313      	orrs	r3, r2
 8013e54:	4a0b      	ldr	r2, [pc, #44]	; (8013e84 <UTIL_SEQ_SetTask+0x50>)
 8013e56:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8013e58:	4a0b      	ldr	r2, [pc, #44]	; (8013e88 <UTIL_SEQ_SetTask+0x54>)
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	431a      	orrs	r2, r3
 8013e64:	4908      	ldr	r1, [pc, #32]	; (8013e88 <UTIL_SEQ_SetTask+0x54>)
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	f383 8810 	msr	PRIMASK, r3
}
 8013e76:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013e78:	bf00      	nop
}
 8013e7a:	371c      	adds	r7, #28
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr
 8013e84:	2000356c 	.word	0x2000356c
 8013e88:	200035fc 	.word	0x200035fc

08013e8c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	b087      	sub	sp, #28
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e94:	f3ef 8310 	mrs	r3, PRIMASK
 8013e98:	60fb      	str	r3, [r7, #12]
  return(result);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013e9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e9e:	b672      	cpsid	i
}
 8013ea0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	43da      	mvns	r2, r3
 8013ea6:	4b08      	ldr	r3, [pc, #32]	; (8013ec8 <UTIL_SEQ_PauseTask+0x3c>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4013      	ands	r3, r2
 8013eac:	4a06      	ldr	r2, [pc, #24]	; (8013ec8 <UTIL_SEQ_PauseTask+0x3c>)
 8013eae:	6013      	str	r3, [r2, #0]
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	f383 8810 	msr	PRIMASK, r3
}
 8013eba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013ebc:	bf00      	nop
}
 8013ebe:	371c      	adds	r7, #28
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec6:	4770      	bx	lr
 8013ec8:	20000080 	.word	0x20000080

08013ecc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b087      	sub	sp, #28
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8013ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8013eda:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013edc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013ede:	b672      	cpsid	i
}
 8013ee0:	bf00      	nop

  TaskMask |= TaskId_bm;
 8013ee2:	4b09      	ldr	r3, [pc, #36]	; (8013f08 <UTIL_SEQ_ResumeTask+0x3c>)
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	4313      	orrs	r3, r2
 8013eea:	4a07      	ldr	r2, [pc, #28]	; (8013f08 <UTIL_SEQ_ResumeTask+0x3c>)
 8013eec:	6013      	str	r3, [r2, #0]
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	f383 8810 	msr	PRIMASK, r3
}
 8013ef8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013efa:	bf00      	nop
}
 8013efc:	371c      	adds	r7, #28
 8013efe:	46bd      	mov	sp, r7
 8013f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f04:	4770      	bx	lr
 8013f06:	bf00      	nop
 8013f08:	20000080 	.word	0x20000080

08013f0c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b087      	sub	sp, #28
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f14:	f3ef 8310 	mrs	r3, PRIMASK
 8013f18:	60fb      	str	r3, [r7, #12]
  return(result);
 8013f1a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013f1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013f1e:	b672      	cpsid	i
}
 8013f20:	bf00      	nop

  EvtSet |= EvtId_bm;
 8013f22:	4b09      	ldr	r3, [pc, #36]	; (8013f48 <UTIL_SEQ_SetEvt+0x3c>)
 8013f24:	681a      	ldr	r2, [r3, #0]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	4313      	orrs	r3, r2
 8013f2a:	4a07      	ldr	r2, [pc, #28]	; (8013f48 <UTIL_SEQ_SetEvt+0x3c>)
 8013f2c:	6013      	str	r3, [r2, #0]
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	f383 8810 	msr	PRIMASK, r3
}
 8013f38:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013f3a:	bf00      	nop
}
 8013f3c:	371c      	adds	r7, #28
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f44:	4770      	bx	lr
 8013f46:	bf00      	nop
 8013f48:	20003570 	.word	0x20003570

08013f4c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b088      	sub	sp, #32
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8013f54:	4b1f      	ldr	r3, [pc, #124]	; (8013fd4 <UTIL_SEQ_WaitEvt+0x88>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8013f5a:	4b1e      	ldr	r3, [pc, #120]	; (8013fd4 <UTIL_SEQ_WaitEvt+0x88>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f62:	d102      	bne.n	8013f6a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8013f64:	2300      	movs	r3, #0
 8013f66:	61fb      	str	r3, [r7, #28]
 8013f68:	e005      	b.n	8013f76 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8013f6a:	4b1a      	ldr	r3, [pc, #104]	; (8013fd4 <UTIL_SEQ_WaitEvt+0x88>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	2201      	movs	r2, #1
 8013f70:	fa02 f303 	lsl.w	r3, r2, r3
 8013f74:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8013f76:	4b18      	ldr	r3, [pc, #96]	; (8013fd8 <UTIL_SEQ_WaitEvt+0x8c>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8013f7c:	4a16      	ldr	r2, [pc, #88]	; (8013fd8 <UTIL_SEQ_WaitEvt+0x8c>)
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8013f82:	e003      	b.n	8013f8c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8013f84:	6879      	ldr	r1, [r7, #4]
 8013f86:	69f8      	ldr	r0, [r7, #28]
 8013f88:	f7ee fd1d 	bl	80029c6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8013f8c:	4b13      	ldr	r3, [pc, #76]	; (8013fdc <UTIL_SEQ_WaitEvt+0x90>)
 8013f8e:	681a      	ldr	r2, [r3, #0]
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	4013      	ands	r3, r2
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d0f5      	beq.n	8013f84 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8013f98:	4a0e      	ldr	r2, [pc, #56]	; (8013fd4 <UTIL_SEQ_WaitEvt+0x88>)
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8013fa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8013fa4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013fa8:	b672      	cpsid	i
}
 8013faa:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	43da      	mvns	r2, r3
 8013fb0:	4b0a      	ldr	r3, [pc, #40]	; (8013fdc <UTIL_SEQ_WaitEvt+0x90>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4013      	ands	r3, r2
 8013fb6:	4a09      	ldr	r2, [pc, #36]	; (8013fdc <UTIL_SEQ_WaitEvt+0x90>)
 8013fb8:	6013      	str	r3, [r2, #0]
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	f383 8810 	msr	PRIMASK, r3
}
 8013fc4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8013fc6:	4a04      	ldr	r2, [pc, #16]	; (8013fd8 <UTIL_SEQ_WaitEvt+0x8c>)
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	6013      	str	r3, [r2, #0]
  return;
 8013fcc:	bf00      	nop
}
 8013fce:	3720      	adds	r7, #32
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}
 8013fd4:	20003578 	.word	0x20003578
 8013fd8:	20003574 	.word	0x20003574
 8013fdc:	20003570 	.word	0x20003570

08013fe0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013fe4:	bf00      	nop
}
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fec:	4770      	bx	lr

08013fee <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8013fee:	b480      	push	{r7}
 8013ff0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8013ff2:	bf00      	nop
}
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffa:	4770      	bx	lr

08013ffc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b085      	sub	sp, #20
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8014004:	2300      	movs	r3, #0
 8014006:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	0c1b      	lsrs	r3, r3, #16
 8014010:	041b      	lsls	r3, r3, #16
 8014012:	2b00      	cmp	r3, #0
 8014014:	d104      	bne.n	8014020 <SEQ_BitPosition+0x24>
 8014016:	2310      	movs	r3, #16
 8014018:	73fb      	strb	r3, [r7, #15]
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	041b      	lsls	r3, r3, #16
 801401e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014026:	2b00      	cmp	r3, #0
 8014028:	d105      	bne.n	8014036 <SEQ_BitPosition+0x3a>
 801402a:	7bfb      	ldrb	r3, [r7, #15]
 801402c:	3308      	adds	r3, #8
 801402e:	73fb      	strb	r3, [r7, #15]
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	021b      	lsls	r3, r3, #8
 8014034:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8014036:	68bb      	ldr	r3, [r7, #8]
 8014038:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801403c:	2b00      	cmp	r3, #0
 801403e:	d105      	bne.n	801404c <SEQ_BitPosition+0x50>
 8014040:	7bfb      	ldrb	r3, [r7, #15]
 8014042:	3304      	adds	r3, #4
 8014044:	73fb      	strb	r3, [r7, #15]
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	011b      	lsls	r3, r3, #4
 801404a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	0f1b      	lsrs	r3, r3, #28
 8014050:	4a07      	ldr	r2, [pc, #28]	; (8014070 <SEQ_BitPosition+0x74>)
 8014052:	5cd2      	ldrb	r2, [r2, r3]
 8014054:	7bfb      	ldrb	r3, [r7, #15]
 8014056:	4413      	add	r3, r2
 8014058:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801405a:	7bfb      	ldrb	r3, [r7, #15]
 801405c:	f1c3 031f 	rsb	r3, r3, #31
 8014060:	b2db      	uxtb	r3, r3
}
 8014062:	4618      	mov	r0, r3
 8014064:	3714      	adds	r7, #20
 8014066:	46bd      	mov	sp, r7
 8014068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406c:	4770      	bx	lr
 801406e:	bf00      	nop
 8014070:	0802e0b4 	.word	0x0802e0b4

08014074 <__cvt>:
 8014074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014078:	ec55 4b10 	vmov	r4, r5, d0
 801407c:	2d00      	cmp	r5, #0
 801407e:	460e      	mov	r6, r1
 8014080:	4619      	mov	r1, r3
 8014082:	462b      	mov	r3, r5
 8014084:	bfbb      	ittet	lt
 8014086:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801408a:	461d      	movlt	r5, r3
 801408c:	2300      	movge	r3, #0
 801408e:	232d      	movlt	r3, #45	; 0x2d
 8014090:	700b      	strb	r3, [r1, #0]
 8014092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014094:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014098:	4691      	mov	r9, r2
 801409a:	f023 0820 	bic.w	r8, r3, #32
 801409e:	bfbc      	itt	lt
 80140a0:	4622      	movlt	r2, r4
 80140a2:	4614      	movlt	r4, r2
 80140a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80140a8:	d005      	beq.n	80140b6 <__cvt+0x42>
 80140aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80140ae:	d100      	bne.n	80140b2 <__cvt+0x3e>
 80140b0:	3601      	adds	r6, #1
 80140b2:	2102      	movs	r1, #2
 80140b4:	e000      	b.n	80140b8 <__cvt+0x44>
 80140b6:	2103      	movs	r1, #3
 80140b8:	ab03      	add	r3, sp, #12
 80140ba:	9301      	str	r3, [sp, #4]
 80140bc:	ab02      	add	r3, sp, #8
 80140be:	9300      	str	r3, [sp, #0]
 80140c0:	ec45 4b10 	vmov	d0, r4, r5
 80140c4:	4653      	mov	r3, sl
 80140c6:	4632      	mov	r2, r6
 80140c8:	f000 ff62 	bl	8014f90 <_dtoa_r>
 80140cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80140d0:	4607      	mov	r7, r0
 80140d2:	d102      	bne.n	80140da <__cvt+0x66>
 80140d4:	f019 0f01 	tst.w	r9, #1
 80140d8:	d022      	beq.n	8014120 <__cvt+0xac>
 80140da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80140de:	eb07 0906 	add.w	r9, r7, r6
 80140e2:	d110      	bne.n	8014106 <__cvt+0x92>
 80140e4:	783b      	ldrb	r3, [r7, #0]
 80140e6:	2b30      	cmp	r3, #48	; 0x30
 80140e8:	d10a      	bne.n	8014100 <__cvt+0x8c>
 80140ea:	2200      	movs	r2, #0
 80140ec:	2300      	movs	r3, #0
 80140ee:	4620      	mov	r0, r4
 80140f0:	4629      	mov	r1, r5
 80140f2:	f7ec fcd1 	bl	8000a98 <__aeabi_dcmpeq>
 80140f6:	b918      	cbnz	r0, 8014100 <__cvt+0x8c>
 80140f8:	f1c6 0601 	rsb	r6, r6, #1
 80140fc:	f8ca 6000 	str.w	r6, [sl]
 8014100:	f8da 3000 	ldr.w	r3, [sl]
 8014104:	4499      	add	r9, r3
 8014106:	2200      	movs	r2, #0
 8014108:	2300      	movs	r3, #0
 801410a:	4620      	mov	r0, r4
 801410c:	4629      	mov	r1, r5
 801410e:	f7ec fcc3 	bl	8000a98 <__aeabi_dcmpeq>
 8014112:	b108      	cbz	r0, 8014118 <__cvt+0xa4>
 8014114:	f8cd 900c 	str.w	r9, [sp, #12]
 8014118:	2230      	movs	r2, #48	; 0x30
 801411a:	9b03      	ldr	r3, [sp, #12]
 801411c:	454b      	cmp	r3, r9
 801411e:	d307      	bcc.n	8014130 <__cvt+0xbc>
 8014120:	9b03      	ldr	r3, [sp, #12]
 8014122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014124:	1bdb      	subs	r3, r3, r7
 8014126:	4638      	mov	r0, r7
 8014128:	6013      	str	r3, [r2, #0]
 801412a:	b004      	add	sp, #16
 801412c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014130:	1c59      	adds	r1, r3, #1
 8014132:	9103      	str	r1, [sp, #12]
 8014134:	701a      	strb	r2, [r3, #0]
 8014136:	e7f0      	b.n	801411a <__cvt+0xa6>

08014138 <__exponent>:
 8014138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801413a:	4603      	mov	r3, r0
 801413c:	2900      	cmp	r1, #0
 801413e:	bfb8      	it	lt
 8014140:	4249      	neglt	r1, r1
 8014142:	f803 2b02 	strb.w	r2, [r3], #2
 8014146:	bfb4      	ite	lt
 8014148:	222d      	movlt	r2, #45	; 0x2d
 801414a:	222b      	movge	r2, #43	; 0x2b
 801414c:	2909      	cmp	r1, #9
 801414e:	7042      	strb	r2, [r0, #1]
 8014150:	dd2a      	ble.n	80141a8 <__exponent+0x70>
 8014152:	f10d 0207 	add.w	r2, sp, #7
 8014156:	4617      	mov	r7, r2
 8014158:	260a      	movs	r6, #10
 801415a:	4694      	mov	ip, r2
 801415c:	fb91 f5f6 	sdiv	r5, r1, r6
 8014160:	fb06 1415 	mls	r4, r6, r5, r1
 8014164:	3430      	adds	r4, #48	; 0x30
 8014166:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801416a:	460c      	mov	r4, r1
 801416c:	2c63      	cmp	r4, #99	; 0x63
 801416e:	f102 32ff 	add.w	r2, r2, #4294967295
 8014172:	4629      	mov	r1, r5
 8014174:	dcf1      	bgt.n	801415a <__exponent+0x22>
 8014176:	3130      	adds	r1, #48	; 0x30
 8014178:	f1ac 0402 	sub.w	r4, ip, #2
 801417c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014180:	1c41      	adds	r1, r0, #1
 8014182:	4622      	mov	r2, r4
 8014184:	42ba      	cmp	r2, r7
 8014186:	d30a      	bcc.n	801419e <__exponent+0x66>
 8014188:	f10d 0209 	add.w	r2, sp, #9
 801418c:	eba2 020c 	sub.w	r2, r2, ip
 8014190:	42bc      	cmp	r4, r7
 8014192:	bf88      	it	hi
 8014194:	2200      	movhi	r2, #0
 8014196:	4413      	add	r3, r2
 8014198:	1a18      	subs	r0, r3, r0
 801419a:	b003      	add	sp, #12
 801419c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801419e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80141a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80141a6:	e7ed      	b.n	8014184 <__exponent+0x4c>
 80141a8:	2330      	movs	r3, #48	; 0x30
 80141aa:	3130      	adds	r1, #48	; 0x30
 80141ac:	7083      	strb	r3, [r0, #2]
 80141ae:	70c1      	strb	r1, [r0, #3]
 80141b0:	1d03      	adds	r3, r0, #4
 80141b2:	e7f1      	b.n	8014198 <__exponent+0x60>

080141b4 <_printf_float>:
 80141b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b8:	ed2d 8b02 	vpush	{d8}
 80141bc:	b08d      	sub	sp, #52	; 0x34
 80141be:	460c      	mov	r4, r1
 80141c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80141c4:	4616      	mov	r6, r2
 80141c6:	461f      	mov	r7, r3
 80141c8:	4605      	mov	r5, r0
 80141ca:	f000 fdd1 	bl	8014d70 <_localeconv_r>
 80141ce:	f8d0 a000 	ldr.w	sl, [r0]
 80141d2:	4650      	mov	r0, sl
 80141d4:	f7ec f834 	bl	8000240 <strlen>
 80141d8:	2300      	movs	r3, #0
 80141da:	930a      	str	r3, [sp, #40]	; 0x28
 80141dc:	6823      	ldr	r3, [r4, #0]
 80141de:	9305      	str	r3, [sp, #20]
 80141e0:	f8d8 3000 	ldr.w	r3, [r8]
 80141e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80141e8:	3307      	adds	r3, #7
 80141ea:	f023 0307 	bic.w	r3, r3, #7
 80141ee:	f103 0208 	add.w	r2, r3, #8
 80141f2:	f8c8 2000 	str.w	r2, [r8]
 80141f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80141fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80141fe:	9307      	str	r3, [sp, #28]
 8014200:	f8cd 8018 	str.w	r8, [sp, #24]
 8014204:	ee08 0a10 	vmov	s16, r0
 8014208:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801420c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014210:	4b9e      	ldr	r3, [pc, #632]	; (801448c <_printf_float+0x2d8>)
 8014212:	f04f 32ff 	mov.w	r2, #4294967295
 8014216:	f7ec fc71 	bl	8000afc <__aeabi_dcmpun>
 801421a:	bb88      	cbnz	r0, 8014280 <_printf_float+0xcc>
 801421c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014220:	4b9a      	ldr	r3, [pc, #616]	; (801448c <_printf_float+0x2d8>)
 8014222:	f04f 32ff 	mov.w	r2, #4294967295
 8014226:	f7ec fc4b 	bl	8000ac0 <__aeabi_dcmple>
 801422a:	bb48      	cbnz	r0, 8014280 <_printf_float+0xcc>
 801422c:	2200      	movs	r2, #0
 801422e:	2300      	movs	r3, #0
 8014230:	4640      	mov	r0, r8
 8014232:	4649      	mov	r1, r9
 8014234:	f7ec fc3a 	bl	8000aac <__aeabi_dcmplt>
 8014238:	b110      	cbz	r0, 8014240 <_printf_float+0x8c>
 801423a:	232d      	movs	r3, #45	; 0x2d
 801423c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014240:	4a93      	ldr	r2, [pc, #588]	; (8014490 <_printf_float+0x2dc>)
 8014242:	4b94      	ldr	r3, [pc, #592]	; (8014494 <_printf_float+0x2e0>)
 8014244:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014248:	bf94      	ite	ls
 801424a:	4690      	movls	r8, r2
 801424c:	4698      	movhi	r8, r3
 801424e:	2303      	movs	r3, #3
 8014250:	6123      	str	r3, [r4, #16]
 8014252:	9b05      	ldr	r3, [sp, #20]
 8014254:	f023 0304 	bic.w	r3, r3, #4
 8014258:	6023      	str	r3, [r4, #0]
 801425a:	f04f 0900 	mov.w	r9, #0
 801425e:	9700      	str	r7, [sp, #0]
 8014260:	4633      	mov	r3, r6
 8014262:	aa0b      	add	r2, sp, #44	; 0x2c
 8014264:	4621      	mov	r1, r4
 8014266:	4628      	mov	r0, r5
 8014268:	f000 f9da 	bl	8014620 <_printf_common>
 801426c:	3001      	adds	r0, #1
 801426e:	f040 8090 	bne.w	8014392 <_printf_float+0x1de>
 8014272:	f04f 30ff 	mov.w	r0, #4294967295
 8014276:	b00d      	add	sp, #52	; 0x34
 8014278:	ecbd 8b02 	vpop	{d8}
 801427c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014280:	4642      	mov	r2, r8
 8014282:	464b      	mov	r3, r9
 8014284:	4640      	mov	r0, r8
 8014286:	4649      	mov	r1, r9
 8014288:	f7ec fc38 	bl	8000afc <__aeabi_dcmpun>
 801428c:	b140      	cbz	r0, 80142a0 <_printf_float+0xec>
 801428e:	464b      	mov	r3, r9
 8014290:	2b00      	cmp	r3, #0
 8014292:	bfbc      	itt	lt
 8014294:	232d      	movlt	r3, #45	; 0x2d
 8014296:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801429a:	4a7f      	ldr	r2, [pc, #508]	; (8014498 <_printf_float+0x2e4>)
 801429c:	4b7f      	ldr	r3, [pc, #508]	; (801449c <_printf_float+0x2e8>)
 801429e:	e7d1      	b.n	8014244 <_printf_float+0x90>
 80142a0:	6863      	ldr	r3, [r4, #4]
 80142a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80142a6:	9206      	str	r2, [sp, #24]
 80142a8:	1c5a      	adds	r2, r3, #1
 80142aa:	d13f      	bne.n	801432c <_printf_float+0x178>
 80142ac:	2306      	movs	r3, #6
 80142ae:	6063      	str	r3, [r4, #4]
 80142b0:	9b05      	ldr	r3, [sp, #20]
 80142b2:	6861      	ldr	r1, [r4, #4]
 80142b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80142b8:	2300      	movs	r3, #0
 80142ba:	9303      	str	r3, [sp, #12]
 80142bc:	ab0a      	add	r3, sp, #40	; 0x28
 80142be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80142c2:	ab09      	add	r3, sp, #36	; 0x24
 80142c4:	ec49 8b10 	vmov	d0, r8, r9
 80142c8:	9300      	str	r3, [sp, #0]
 80142ca:	6022      	str	r2, [r4, #0]
 80142cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80142d0:	4628      	mov	r0, r5
 80142d2:	f7ff fecf 	bl	8014074 <__cvt>
 80142d6:	9b06      	ldr	r3, [sp, #24]
 80142d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80142da:	2b47      	cmp	r3, #71	; 0x47
 80142dc:	4680      	mov	r8, r0
 80142de:	d108      	bne.n	80142f2 <_printf_float+0x13e>
 80142e0:	1cc8      	adds	r0, r1, #3
 80142e2:	db02      	blt.n	80142ea <_printf_float+0x136>
 80142e4:	6863      	ldr	r3, [r4, #4]
 80142e6:	4299      	cmp	r1, r3
 80142e8:	dd41      	ble.n	801436e <_printf_float+0x1ba>
 80142ea:	f1ab 0302 	sub.w	r3, fp, #2
 80142ee:	fa5f fb83 	uxtb.w	fp, r3
 80142f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80142f6:	d820      	bhi.n	801433a <_printf_float+0x186>
 80142f8:	3901      	subs	r1, #1
 80142fa:	465a      	mov	r2, fp
 80142fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014300:	9109      	str	r1, [sp, #36]	; 0x24
 8014302:	f7ff ff19 	bl	8014138 <__exponent>
 8014306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014308:	1813      	adds	r3, r2, r0
 801430a:	2a01      	cmp	r2, #1
 801430c:	4681      	mov	r9, r0
 801430e:	6123      	str	r3, [r4, #16]
 8014310:	dc02      	bgt.n	8014318 <_printf_float+0x164>
 8014312:	6822      	ldr	r2, [r4, #0]
 8014314:	07d2      	lsls	r2, r2, #31
 8014316:	d501      	bpl.n	801431c <_printf_float+0x168>
 8014318:	3301      	adds	r3, #1
 801431a:	6123      	str	r3, [r4, #16]
 801431c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014320:	2b00      	cmp	r3, #0
 8014322:	d09c      	beq.n	801425e <_printf_float+0xaa>
 8014324:	232d      	movs	r3, #45	; 0x2d
 8014326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801432a:	e798      	b.n	801425e <_printf_float+0xaa>
 801432c:	9a06      	ldr	r2, [sp, #24]
 801432e:	2a47      	cmp	r2, #71	; 0x47
 8014330:	d1be      	bne.n	80142b0 <_printf_float+0xfc>
 8014332:	2b00      	cmp	r3, #0
 8014334:	d1bc      	bne.n	80142b0 <_printf_float+0xfc>
 8014336:	2301      	movs	r3, #1
 8014338:	e7b9      	b.n	80142ae <_printf_float+0xfa>
 801433a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801433e:	d118      	bne.n	8014372 <_printf_float+0x1be>
 8014340:	2900      	cmp	r1, #0
 8014342:	6863      	ldr	r3, [r4, #4]
 8014344:	dd0b      	ble.n	801435e <_printf_float+0x1aa>
 8014346:	6121      	str	r1, [r4, #16]
 8014348:	b913      	cbnz	r3, 8014350 <_printf_float+0x19c>
 801434a:	6822      	ldr	r2, [r4, #0]
 801434c:	07d0      	lsls	r0, r2, #31
 801434e:	d502      	bpl.n	8014356 <_printf_float+0x1a2>
 8014350:	3301      	adds	r3, #1
 8014352:	440b      	add	r3, r1
 8014354:	6123      	str	r3, [r4, #16]
 8014356:	65a1      	str	r1, [r4, #88]	; 0x58
 8014358:	f04f 0900 	mov.w	r9, #0
 801435c:	e7de      	b.n	801431c <_printf_float+0x168>
 801435e:	b913      	cbnz	r3, 8014366 <_printf_float+0x1b2>
 8014360:	6822      	ldr	r2, [r4, #0]
 8014362:	07d2      	lsls	r2, r2, #31
 8014364:	d501      	bpl.n	801436a <_printf_float+0x1b6>
 8014366:	3302      	adds	r3, #2
 8014368:	e7f4      	b.n	8014354 <_printf_float+0x1a0>
 801436a:	2301      	movs	r3, #1
 801436c:	e7f2      	b.n	8014354 <_printf_float+0x1a0>
 801436e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014374:	4299      	cmp	r1, r3
 8014376:	db05      	blt.n	8014384 <_printf_float+0x1d0>
 8014378:	6823      	ldr	r3, [r4, #0]
 801437a:	6121      	str	r1, [r4, #16]
 801437c:	07d8      	lsls	r0, r3, #31
 801437e:	d5ea      	bpl.n	8014356 <_printf_float+0x1a2>
 8014380:	1c4b      	adds	r3, r1, #1
 8014382:	e7e7      	b.n	8014354 <_printf_float+0x1a0>
 8014384:	2900      	cmp	r1, #0
 8014386:	bfd4      	ite	le
 8014388:	f1c1 0202 	rsble	r2, r1, #2
 801438c:	2201      	movgt	r2, #1
 801438e:	4413      	add	r3, r2
 8014390:	e7e0      	b.n	8014354 <_printf_float+0x1a0>
 8014392:	6823      	ldr	r3, [r4, #0]
 8014394:	055a      	lsls	r2, r3, #21
 8014396:	d407      	bmi.n	80143a8 <_printf_float+0x1f4>
 8014398:	6923      	ldr	r3, [r4, #16]
 801439a:	4642      	mov	r2, r8
 801439c:	4631      	mov	r1, r6
 801439e:	4628      	mov	r0, r5
 80143a0:	47b8      	blx	r7
 80143a2:	3001      	adds	r0, #1
 80143a4:	d12c      	bne.n	8014400 <_printf_float+0x24c>
 80143a6:	e764      	b.n	8014272 <_printf_float+0xbe>
 80143a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80143ac:	f240 80e0 	bls.w	8014570 <_printf_float+0x3bc>
 80143b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80143b4:	2200      	movs	r2, #0
 80143b6:	2300      	movs	r3, #0
 80143b8:	f7ec fb6e 	bl	8000a98 <__aeabi_dcmpeq>
 80143bc:	2800      	cmp	r0, #0
 80143be:	d034      	beq.n	801442a <_printf_float+0x276>
 80143c0:	4a37      	ldr	r2, [pc, #220]	; (80144a0 <_printf_float+0x2ec>)
 80143c2:	2301      	movs	r3, #1
 80143c4:	4631      	mov	r1, r6
 80143c6:	4628      	mov	r0, r5
 80143c8:	47b8      	blx	r7
 80143ca:	3001      	adds	r0, #1
 80143cc:	f43f af51 	beq.w	8014272 <_printf_float+0xbe>
 80143d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80143d4:	429a      	cmp	r2, r3
 80143d6:	db02      	blt.n	80143de <_printf_float+0x22a>
 80143d8:	6823      	ldr	r3, [r4, #0]
 80143da:	07d8      	lsls	r0, r3, #31
 80143dc:	d510      	bpl.n	8014400 <_printf_float+0x24c>
 80143de:	ee18 3a10 	vmov	r3, s16
 80143e2:	4652      	mov	r2, sl
 80143e4:	4631      	mov	r1, r6
 80143e6:	4628      	mov	r0, r5
 80143e8:	47b8      	blx	r7
 80143ea:	3001      	adds	r0, #1
 80143ec:	f43f af41 	beq.w	8014272 <_printf_float+0xbe>
 80143f0:	f04f 0800 	mov.w	r8, #0
 80143f4:	f104 091a 	add.w	r9, r4, #26
 80143f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143fa:	3b01      	subs	r3, #1
 80143fc:	4543      	cmp	r3, r8
 80143fe:	dc09      	bgt.n	8014414 <_printf_float+0x260>
 8014400:	6823      	ldr	r3, [r4, #0]
 8014402:	079b      	lsls	r3, r3, #30
 8014404:	f100 8107 	bmi.w	8014616 <_printf_float+0x462>
 8014408:	68e0      	ldr	r0, [r4, #12]
 801440a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801440c:	4298      	cmp	r0, r3
 801440e:	bfb8      	it	lt
 8014410:	4618      	movlt	r0, r3
 8014412:	e730      	b.n	8014276 <_printf_float+0xc2>
 8014414:	2301      	movs	r3, #1
 8014416:	464a      	mov	r2, r9
 8014418:	4631      	mov	r1, r6
 801441a:	4628      	mov	r0, r5
 801441c:	47b8      	blx	r7
 801441e:	3001      	adds	r0, #1
 8014420:	f43f af27 	beq.w	8014272 <_printf_float+0xbe>
 8014424:	f108 0801 	add.w	r8, r8, #1
 8014428:	e7e6      	b.n	80143f8 <_printf_float+0x244>
 801442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801442c:	2b00      	cmp	r3, #0
 801442e:	dc39      	bgt.n	80144a4 <_printf_float+0x2f0>
 8014430:	4a1b      	ldr	r2, [pc, #108]	; (80144a0 <_printf_float+0x2ec>)
 8014432:	2301      	movs	r3, #1
 8014434:	4631      	mov	r1, r6
 8014436:	4628      	mov	r0, r5
 8014438:	47b8      	blx	r7
 801443a:	3001      	adds	r0, #1
 801443c:	f43f af19 	beq.w	8014272 <_printf_float+0xbe>
 8014440:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014444:	4313      	orrs	r3, r2
 8014446:	d102      	bne.n	801444e <_printf_float+0x29a>
 8014448:	6823      	ldr	r3, [r4, #0]
 801444a:	07d9      	lsls	r1, r3, #31
 801444c:	d5d8      	bpl.n	8014400 <_printf_float+0x24c>
 801444e:	ee18 3a10 	vmov	r3, s16
 8014452:	4652      	mov	r2, sl
 8014454:	4631      	mov	r1, r6
 8014456:	4628      	mov	r0, r5
 8014458:	47b8      	blx	r7
 801445a:	3001      	adds	r0, #1
 801445c:	f43f af09 	beq.w	8014272 <_printf_float+0xbe>
 8014460:	f04f 0900 	mov.w	r9, #0
 8014464:	f104 0a1a 	add.w	sl, r4, #26
 8014468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801446a:	425b      	negs	r3, r3
 801446c:	454b      	cmp	r3, r9
 801446e:	dc01      	bgt.n	8014474 <_printf_float+0x2c0>
 8014470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014472:	e792      	b.n	801439a <_printf_float+0x1e6>
 8014474:	2301      	movs	r3, #1
 8014476:	4652      	mov	r2, sl
 8014478:	4631      	mov	r1, r6
 801447a:	4628      	mov	r0, r5
 801447c:	47b8      	blx	r7
 801447e:	3001      	adds	r0, #1
 8014480:	f43f aef7 	beq.w	8014272 <_printf_float+0xbe>
 8014484:	f109 0901 	add.w	r9, r9, #1
 8014488:	e7ee      	b.n	8014468 <_printf_float+0x2b4>
 801448a:	bf00      	nop
 801448c:	7fefffff 	.word	0x7fefffff
 8014490:	0802e0c4 	.word	0x0802e0c4
 8014494:	0802e0c8 	.word	0x0802e0c8
 8014498:	0802e0cc 	.word	0x0802e0cc
 801449c:	0802e0d0 	.word	0x0802e0d0
 80144a0:	0802e0d4 	.word	0x0802e0d4
 80144a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80144a8:	429a      	cmp	r2, r3
 80144aa:	bfa8      	it	ge
 80144ac:	461a      	movge	r2, r3
 80144ae:	2a00      	cmp	r2, #0
 80144b0:	4691      	mov	r9, r2
 80144b2:	dc37      	bgt.n	8014524 <_printf_float+0x370>
 80144b4:	f04f 0b00 	mov.w	fp, #0
 80144b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144bc:	f104 021a 	add.w	r2, r4, #26
 80144c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80144c2:	9305      	str	r3, [sp, #20]
 80144c4:	eba3 0309 	sub.w	r3, r3, r9
 80144c8:	455b      	cmp	r3, fp
 80144ca:	dc33      	bgt.n	8014534 <_printf_float+0x380>
 80144cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80144d0:	429a      	cmp	r2, r3
 80144d2:	db3b      	blt.n	801454c <_printf_float+0x398>
 80144d4:	6823      	ldr	r3, [r4, #0]
 80144d6:	07da      	lsls	r2, r3, #31
 80144d8:	d438      	bmi.n	801454c <_printf_float+0x398>
 80144da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80144de:	eba2 0903 	sub.w	r9, r2, r3
 80144e2:	9b05      	ldr	r3, [sp, #20]
 80144e4:	1ad2      	subs	r2, r2, r3
 80144e6:	4591      	cmp	r9, r2
 80144e8:	bfa8      	it	ge
 80144ea:	4691      	movge	r9, r2
 80144ec:	f1b9 0f00 	cmp.w	r9, #0
 80144f0:	dc35      	bgt.n	801455e <_printf_float+0x3aa>
 80144f2:	f04f 0800 	mov.w	r8, #0
 80144f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80144fa:	f104 0a1a 	add.w	sl, r4, #26
 80144fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014502:	1a9b      	subs	r3, r3, r2
 8014504:	eba3 0309 	sub.w	r3, r3, r9
 8014508:	4543      	cmp	r3, r8
 801450a:	f77f af79 	ble.w	8014400 <_printf_float+0x24c>
 801450e:	2301      	movs	r3, #1
 8014510:	4652      	mov	r2, sl
 8014512:	4631      	mov	r1, r6
 8014514:	4628      	mov	r0, r5
 8014516:	47b8      	blx	r7
 8014518:	3001      	adds	r0, #1
 801451a:	f43f aeaa 	beq.w	8014272 <_printf_float+0xbe>
 801451e:	f108 0801 	add.w	r8, r8, #1
 8014522:	e7ec      	b.n	80144fe <_printf_float+0x34a>
 8014524:	4613      	mov	r3, r2
 8014526:	4631      	mov	r1, r6
 8014528:	4642      	mov	r2, r8
 801452a:	4628      	mov	r0, r5
 801452c:	47b8      	blx	r7
 801452e:	3001      	adds	r0, #1
 8014530:	d1c0      	bne.n	80144b4 <_printf_float+0x300>
 8014532:	e69e      	b.n	8014272 <_printf_float+0xbe>
 8014534:	2301      	movs	r3, #1
 8014536:	4631      	mov	r1, r6
 8014538:	4628      	mov	r0, r5
 801453a:	9205      	str	r2, [sp, #20]
 801453c:	47b8      	blx	r7
 801453e:	3001      	adds	r0, #1
 8014540:	f43f ae97 	beq.w	8014272 <_printf_float+0xbe>
 8014544:	9a05      	ldr	r2, [sp, #20]
 8014546:	f10b 0b01 	add.w	fp, fp, #1
 801454a:	e7b9      	b.n	80144c0 <_printf_float+0x30c>
 801454c:	ee18 3a10 	vmov	r3, s16
 8014550:	4652      	mov	r2, sl
 8014552:	4631      	mov	r1, r6
 8014554:	4628      	mov	r0, r5
 8014556:	47b8      	blx	r7
 8014558:	3001      	adds	r0, #1
 801455a:	d1be      	bne.n	80144da <_printf_float+0x326>
 801455c:	e689      	b.n	8014272 <_printf_float+0xbe>
 801455e:	9a05      	ldr	r2, [sp, #20]
 8014560:	464b      	mov	r3, r9
 8014562:	4442      	add	r2, r8
 8014564:	4631      	mov	r1, r6
 8014566:	4628      	mov	r0, r5
 8014568:	47b8      	blx	r7
 801456a:	3001      	adds	r0, #1
 801456c:	d1c1      	bne.n	80144f2 <_printf_float+0x33e>
 801456e:	e680      	b.n	8014272 <_printf_float+0xbe>
 8014570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014572:	2a01      	cmp	r2, #1
 8014574:	dc01      	bgt.n	801457a <_printf_float+0x3c6>
 8014576:	07db      	lsls	r3, r3, #31
 8014578:	d53a      	bpl.n	80145f0 <_printf_float+0x43c>
 801457a:	2301      	movs	r3, #1
 801457c:	4642      	mov	r2, r8
 801457e:	4631      	mov	r1, r6
 8014580:	4628      	mov	r0, r5
 8014582:	47b8      	blx	r7
 8014584:	3001      	adds	r0, #1
 8014586:	f43f ae74 	beq.w	8014272 <_printf_float+0xbe>
 801458a:	ee18 3a10 	vmov	r3, s16
 801458e:	4652      	mov	r2, sl
 8014590:	4631      	mov	r1, r6
 8014592:	4628      	mov	r0, r5
 8014594:	47b8      	blx	r7
 8014596:	3001      	adds	r0, #1
 8014598:	f43f ae6b 	beq.w	8014272 <_printf_float+0xbe>
 801459c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80145a0:	2200      	movs	r2, #0
 80145a2:	2300      	movs	r3, #0
 80145a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80145a8:	f7ec fa76 	bl	8000a98 <__aeabi_dcmpeq>
 80145ac:	b9d8      	cbnz	r0, 80145e6 <_printf_float+0x432>
 80145ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80145b2:	f108 0201 	add.w	r2, r8, #1
 80145b6:	4631      	mov	r1, r6
 80145b8:	4628      	mov	r0, r5
 80145ba:	47b8      	blx	r7
 80145bc:	3001      	adds	r0, #1
 80145be:	d10e      	bne.n	80145de <_printf_float+0x42a>
 80145c0:	e657      	b.n	8014272 <_printf_float+0xbe>
 80145c2:	2301      	movs	r3, #1
 80145c4:	4652      	mov	r2, sl
 80145c6:	4631      	mov	r1, r6
 80145c8:	4628      	mov	r0, r5
 80145ca:	47b8      	blx	r7
 80145cc:	3001      	adds	r0, #1
 80145ce:	f43f ae50 	beq.w	8014272 <_printf_float+0xbe>
 80145d2:	f108 0801 	add.w	r8, r8, #1
 80145d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145d8:	3b01      	subs	r3, #1
 80145da:	4543      	cmp	r3, r8
 80145dc:	dcf1      	bgt.n	80145c2 <_printf_float+0x40e>
 80145de:	464b      	mov	r3, r9
 80145e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80145e4:	e6da      	b.n	801439c <_printf_float+0x1e8>
 80145e6:	f04f 0800 	mov.w	r8, #0
 80145ea:	f104 0a1a 	add.w	sl, r4, #26
 80145ee:	e7f2      	b.n	80145d6 <_printf_float+0x422>
 80145f0:	2301      	movs	r3, #1
 80145f2:	4642      	mov	r2, r8
 80145f4:	e7df      	b.n	80145b6 <_printf_float+0x402>
 80145f6:	2301      	movs	r3, #1
 80145f8:	464a      	mov	r2, r9
 80145fa:	4631      	mov	r1, r6
 80145fc:	4628      	mov	r0, r5
 80145fe:	47b8      	blx	r7
 8014600:	3001      	adds	r0, #1
 8014602:	f43f ae36 	beq.w	8014272 <_printf_float+0xbe>
 8014606:	f108 0801 	add.w	r8, r8, #1
 801460a:	68e3      	ldr	r3, [r4, #12]
 801460c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801460e:	1a5b      	subs	r3, r3, r1
 8014610:	4543      	cmp	r3, r8
 8014612:	dcf0      	bgt.n	80145f6 <_printf_float+0x442>
 8014614:	e6f8      	b.n	8014408 <_printf_float+0x254>
 8014616:	f04f 0800 	mov.w	r8, #0
 801461a:	f104 0919 	add.w	r9, r4, #25
 801461e:	e7f4      	b.n	801460a <_printf_float+0x456>

08014620 <_printf_common>:
 8014620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014624:	4616      	mov	r6, r2
 8014626:	4699      	mov	r9, r3
 8014628:	688a      	ldr	r2, [r1, #8]
 801462a:	690b      	ldr	r3, [r1, #16]
 801462c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014630:	4293      	cmp	r3, r2
 8014632:	bfb8      	it	lt
 8014634:	4613      	movlt	r3, r2
 8014636:	6033      	str	r3, [r6, #0]
 8014638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801463c:	4607      	mov	r7, r0
 801463e:	460c      	mov	r4, r1
 8014640:	b10a      	cbz	r2, 8014646 <_printf_common+0x26>
 8014642:	3301      	adds	r3, #1
 8014644:	6033      	str	r3, [r6, #0]
 8014646:	6823      	ldr	r3, [r4, #0]
 8014648:	0699      	lsls	r1, r3, #26
 801464a:	bf42      	ittt	mi
 801464c:	6833      	ldrmi	r3, [r6, #0]
 801464e:	3302      	addmi	r3, #2
 8014650:	6033      	strmi	r3, [r6, #0]
 8014652:	6825      	ldr	r5, [r4, #0]
 8014654:	f015 0506 	ands.w	r5, r5, #6
 8014658:	d106      	bne.n	8014668 <_printf_common+0x48>
 801465a:	f104 0a19 	add.w	sl, r4, #25
 801465e:	68e3      	ldr	r3, [r4, #12]
 8014660:	6832      	ldr	r2, [r6, #0]
 8014662:	1a9b      	subs	r3, r3, r2
 8014664:	42ab      	cmp	r3, r5
 8014666:	dc26      	bgt.n	80146b6 <_printf_common+0x96>
 8014668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801466c:	1e13      	subs	r3, r2, #0
 801466e:	6822      	ldr	r2, [r4, #0]
 8014670:	bf18      	it	ne
 8014672:	2301      	movne	r3, #1
 8014674:	0692      	lsls	r2, r2, #26
 8014676:	d42b      	bmi.n	80146d0 <_printf_common+0xb0>
 8014678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801467c:	4649      	mov	r1, r9
 801467e:	4638      	mov	r0, r7
 8014680:	47c0      	blx	r8
 8014682:	3001      	adds	r0, #1
 8014684:	d01e      	beq.n	80146c4 <_printf_common+0xa4>
 8014686:	6823      	ldr	r3, [r4, #0]
 8014688:	6922      	ldr	r2, [r4, #16]
 801468a:	f003 0306 	and.w	r3, r3, #6
 801468e:	2b04      	cmp	r3, #4
 8014690:	bf02      	ittt	eq
 8014692:	68e5      	ldreq	r5, [r4, #12]
 8014694:	6833      	ldreq	r3, [r6, #0]
 8014696:	1aed      	subeq	r5, r5, r3
 8014698:	68a3      	ldr	r3, [r4, #8]
 801469a:	bf0c      	ite	eq
 801469c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80146a0:	2500      	movne	r5, #0
 80146a2:	4293      	cmp	r3, r2
 80146a4:	bfc4      	itt	gt
 80146a6:	1a9b      	subgt	r3, r3, r2
 80146a8:	18ed      	addgt	r5, r5, r3
 80146aa:	2600      	movs	r6, #0
 80146ac:	341a      	adds	r4, #26
 80146ae:	42b5      	cmp	r5, r6
 80146b0:	d11a      	bne.n	80146e8 <_printf_common+0xc8>
 80146b2:	2000      	movs	r0, #0
 80146b4:	e008      	b.n	80146c8 <_printf_common+0xa8>
 80146b6:	2301      	movs	r3, #1
 80146b8:	4652      	mov	r2, sl
 80146ba:	4649      	mov	r1, r9
 80146bc:	4638      	mov	r0, r7
 80146be:	47c0      	blx	r8
 80146c0:	3001      	adds	r0, #1
 80146c2:	d103      	bne.n	80146cc <_printf_common+0xac>
 80146c4:	f04f 30ff 	mov.w	r0, #4294967295
 80146c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146cc:	3501      	adds	r5, #1
 80146ce:	e7c6      	b.n	801465e <_printf_common+0x3e>
 80146d0:	18e1      	adds	r1, r4, r3
 80146d2:	1c5a      	adds	r2, r3, #1
 80146d4:	2030      	movs	r0, #48	; 0x30
 80146d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80146da:	4422      	add	r2, r4
 80146dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80146e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80146e4:	3302      	adds	r3, #2
 80146e6:	e7c7      	b.n	8014678 <_printf_common+0x58>
 80146e8:	2301      	movs	r3, #1
 80146ea:	4622      	mov	r2, r4
 80146ec:	4649      	mov	r1, r9
 80146ee:	4638      	mov	r0, r7
 80146f0:	47c0      	blx	r8
 80146f2:	3001      	adds	r0, #1
 80146f4:	d0e6      	beq.n	80146c4 <_printf_common+0xa4>
 80146f6:	3601      	adds	r6, #1
 80146f8:	e7d9      	b.n	80146ae <_printf_common+0x8e>
	...

080146fc <_printf_i>:
 80146fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014700:	7e0f      	ldrb	r7, [r1, #24]
 8014702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014704:	2f78      	cmp	r7, #120	; 0x78
 8014706:	4691      	mov	r9, r2
 8014708:	4680      	mov	r8, r0
 801470a:	460c      	mov	r4, r1
 801470c:	469a      	mov	sl, r3
 801470e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014712:	d807      	bhi.n	8014724 <_printf_i+0x28>
 8014714:	2f62      	cmp	r7, #98	; 0x62
 8014716:	d80a      	bhi.n	801472e <_printf_i+0x32>
 8014718:	2f00      	cmp	r7, #0
 801471a:	f000 80d4 	beq.w	80148c6 <_printf_i+0x1ca>
 801471e:	2f58      	cmp	r7, #88	; 0x58
 8014720:	f000 80c0 	beq.w	80148a4 <_printf_i+0x1a8>
 8014724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801472c:	e03a      	b.n	80147a4 <_printf_i+0xa8>
 801472e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014732:	2b15      	cmp	r3, #21
 8014734:	d8f6      	bhi.n	8014724 <_printf_i+0x28>
 8014736:	a101      	add	r1, pc, #4	; (adr r1, 801473c <_printf_i+0x40>)
 8014738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801473c:	08014795 	.word	0x08014795
 8014740:	080147a9 	.word	0x080147a9
 8014744:	08014725 	.word	0x08014725
 8014748:	08014725 	.word	0x08014725
 801474c:	08014725 	.word	0x08014725
 8014750:	08014725 	.word	0x08014725
 8014754:	080147a9 	.word	0x080147a9
 8014758:	08014725 	.word	0x08014725
 801475c:	08014725 	.word	0x08014725
 8014760:	08014725 	.word	0x08014725
 8014764:	08014725 	.word	0x08014725
 8014768:	080148ad 	.word	0x080148ad
 801476c:	080147d5 	.word	0x080147d5
 8014770:	08014867 	.word	0x08014867
 8014774:	08014725 	.word	0x08014725
 8014778:	08014725 	.word	0x08014725
 801477c:	080148cf 	.word	0x080148cf
 8014780:	08014725 	.word	0x08014725
 8014784:	080147d5 	.word	0x080147d5
 8014788:	08014725 	.word	0x08014725
 801478c:	08014725 	.word	0x08014725
 8014790:	0801486f 	.word	0x0801486f
 8014794:	682b      	ldr	r3, [r5, #0]
 8014796:	1d1a      	adds	r2, r3, #4
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	602a      	str	r2, [r5, #0]
 801479c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80147a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80147a4:	2301      	movs	r3, #1
 80147a6:	e09f      	b.n	80148e8 <_printf_i+0x1ec>
 80147a8:	6820      	ldr	r0, [r4, #0]
 80147aa:	682b      	ldr	r3, [r5, #0]
 80147ac:	0607      	lsls	r7, r0, #24
 80147ae:	f103 0104 	add.w	r1, r3, #4
 80147b2:	6029      	str	r1, [r5, #0]
 80147b4:	d501      	bpl.n	80147ba <_printf_i+0xbe>
 80147b6:	681e      	ldr	r6, [r3, #0]
 80147b8:	e003      	b.n	80147c2 <_printf_i+0xc6>
 80147ba:	0646      	lsls	r6, r0, #25
 80147bc:	d5fb      	bpl.n	80147b6 <_printf_i+0xba>
 80147be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80147c2:	2e00      	cmp	r6, #0
 80147c4:	da03      	bge.n	80147ce <_printf_i+0xd2>
 80147c6:	232d      	movs	r3, #45	; 0x2d
 80147c8:	4276      	negs	r6, r6
 80147ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147ce:	485a      	ldr	r0, [pc, #360]	; (8014938 <_printf_i+0x23c>)
 80147d0:	230a      	movs	r3, #10
 80147d2:	e012      	b.n	80147fa <_printf_i+0xfe>
 80147d4:	682b      	ldr	r3, [r5, #0]
 80147d6:	6820      	ldr	r0, [r4, #0]
 80147d8:	1d19      	adds	r1, r3, #4
 80147da:	6029      	str	r1, [r5, #0]
 80147dc:	0605      	lsls	r5, r0, #24
 80147de:	d501      	bpl.n	80147e4 <_printf_i+0xe8>
 80147e0:	681e      	ldr	r6, [r3, #0]
 80147e2:	e002      	b.n	80147ea <_printf_i+0xee>
 80147e4:	0641      	lsls	r1, r0, #25
 80147e6:	d5fb      	bpl.n	80147e0 <_printf_i+0xe4>
 80147e8:	881e      	ldrh	r6, [r3, #0]
 80147ea:	4853      	ldr	r0, [pc, #332]	; (8014938 <_printf_i+0x23c>)
 80147ec:	2f6f      	cmp	r7, #111	; 0x6f
 80147ee:	bf0c      	ite	eq
 80147f0:	2308      	moveq	r3, #8
 80147f2:	230a      	movne	r3, #10
 80147f4:	2100      	movs	r1, #0
 80147f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80147fa:	6865      	ldr	r5, [r4, #4]
 80147fc:	60a5      	str	r5, [r4, #8]
 80147fe:	2d00      	cmp	r5, #0
 8014800:	bfa2      	ittt	ge
 8014802:	6821      	ldrge	r1, [r4, #0]
 8014804:	f021 0104 	bicge.w	r1, r1, #4
 8014808:	6021      	strge	r1, [r4, #0]
 801480a:	b90e      	cbnz	r6, 8014810 <_printf_i+0x114>
 801480c:	2d00      	cmp	r5, #0
 801480e:	d04b      	beq.n	80148a8 <_printf_i+0x1ac>
 8014810:	4615      	mov	r5, r2
 8014812:	fbb6 f1f3 	udiv	r1, r6, r3
 8014816:	fb03 6711 	mls	r7, r3, r1, r6
 801481a:	5dc7      	ldrb	r7, [r0, r7]
 801481c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014820:	4637      	mov	r7, r6
 8014822:	42bb      	cmp	r3, r7
 8014824:	460e      	mov	r6, r1
 8014826:	d9f4      	bls.n	8014812 <_printf_i+0x116>
 8014828:	2b08      	cmp	r3, #8
 801482a:	d10b      	bne.n	8014844 <_printf_i+0x148>
 801482c:	6823      	ldr	r3, [r4, #0]
 801482e:	07de      	lsls	r6, r3, #31
 8014830:	d508      	bpl.n	8014844 <_printf_i+0x148>
 8014832:	6923      	ldr	r3, [r4, #16]
 8014834:	6861      	ldr	r1, [r4, #4]
 8014836:	4299      	cmp	r1, r3
 8014838:	bfde      	ittt	le
 801483a:	2330      	movle	r3, #48	; 0x30
 801483c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014840:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014844:	1b52      	subs	r2, r2, r5
 8014846:	6122      	str	r2, [r4, #16]
 8014848:	f8cd a000 	str.w	sl, [sp]
 801484c:	464b      	mov	r3, r9
 801484e:	aa03      	add	r2, sp, #12
 8014850:	4621      	mov	r1, r4
 8014852:	4640      	mov	r0, r8
 8014854:	f7ff fee4 	bl	8014620 <_printf_common>
 8014858:	3001      	adds	r0, #1
 801485a:	d14a      	bne.n	80148f2 <_printf_i+0x1f6>
 801485c:	f04f 30ff 	mov.w	r0, #4294967295
 8014860:	b004      	add	sp, #16
 8014862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014866:	6823      	ldr	r3, [r4, #0]
 8014868:	f043 0320 	orr.w	r3, r3, #32
 801486c:	6023      	str	r3, [r4, #0]
 801486e:	4833      	ldr	r0, [pc, #204]	; (801493c <_printf_i+0x240>)
 8014870:	2778      	movs	r7, #120	; 0x78
 8014872:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014876:	6823      	ldr	r3, [r4, #0]
 8014878:	6829      	ldr	r1, [r5, #0]
 801487a:	061f      	lsls	r7, r3, #24
 801487c:	f851 6b04 	ldr.w	r6, [r1], #4
 8014880:	d402      	bmi.n	8014888 <_printf_i+0x18c>
 8014882:	065f      	lsls	r7, r3, #25
 8014884:	bf48      	it	mi
 8014886:	b2b6      	uxthmi	r6, r6
 8014888:	07df      	lsls	r7, r3, #31
 801488a:	bf48      	it	mi
 801488c:	f043 0320 	orrmi.w	r3, r3, #32
 8014890:	6029      	str	r1, [r5, #0]
 8014892:	bf48      	it	mi
 8014894:	6023      	strmi	r3, [r4, #0]
 8014896:	b91e      	cbnz	r6, 80148a0 <_printf_i+0x1a4>
 8014898:	6823      	ldr	r3, [r4, #0]
 801489a:	f023 0320 	bic.w	r3, r3, #32
 801489e:	6023      	str	r3, [r4, #0]
 80148a0:	2310      	movs	r3, #16
 80148a2:	e7a7      	b.n	80147f4 <_printf_i+0xf8>
 80148a4:	4824      	ldr	r0, [pc, #144]	; (8014938 <_printf_i+0x23c>)
 80148a6:	e7e4      	b.n	8014872 <_printf_i+0x176>
 80148a8:	4615      	mov	r5, r2
 80148aa:	e7bd      	b.n	8014828 <_printf_i+0x12c>
 80148ac:	682b      	ldr	r3, [r5, #0]
 80148ae:	6826      	ldr	r6, [r4, #0]
 80148b0:	6961      	ldr	r1, [r4, #20]
 80148b2:	1d18      	adds	r0, r3, #4
 80148b4:	6028      	str	r0, [r5, #0]
 80148b6:	0635      	lsls	r5, r6, #24
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	d501      	bpl.n	80148c0 <_printf_i+0x1c4>
 80148bc:	6019      	str	r1, [r3, #0]
 80148be:	e002      	b.n	80148c6 <_printf_i+0x1ca>
 80148c0:	0670      	lsls	r0, r6, #25
 80148c2:	d5fb      	bpl.n	80148bc <_printf_i+0x1c0>
 80148c4:	8019      	strh	r1, [r3, #0]
 80148c6:	2300      	movs	r3, #0
 80148c8:	6123      	str	r3, [r4, #16]
 80148ca:	4615      	mov	r5, r2
 80148cc:	e7bc      	b.n	8014848 <_printf_i+0x14c>
 80148ce:	682b      	ldr	r3, [r5, #0]
 80148d0:	1d1a      	adds	r2, r3, #4
 80148d2:	602a      	str	r2, [r5, #0]
 80148d4:	681d      	ldr	r5, [r3, #0]
 80148d6:	6862      	ldr	r2, [r4, #4]
 80148d8:	2100      	movs	r1, #0
 80148da:	4628      	mov	r0, r5
 80148dc:	f7eb fc60 	bl	80001a0 <memchr>
 80148e0:	b108      	cbz	r0, 80148e6 <_printf_i+0x1ea>
 80148e2:	1b40      	subs	r0, r0, r5
 80148e4:	6060      	str	r0, [r4, #4]
 80148e6:	6863      	ldr	r3, [r4, #4]
 80148e8:	6123      	str	r3, [r4, #16]
 80148ea:	2300      	movs	r3, #0
 80148ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148f0:	e7aa      	b.n	8014848 <_printf_i+0x14c>
 80148f2:	6923      	ldr	r3, [r4, #16]
 80148f4:	462a      	mov	r2, r5
 80148f6:	4649      	mov	r1, r9
 80148f8:	4640      	mov	r0, r8
 80148fa:	47d0      	blx	sl
 80148fc:	3001      	adds	r0, #1
 80148fe:	d0ad      	beq.n	801485c <_printf_i+0x160>
 8014900:	6823      	ldr	r3, [r4, #0]
 8014902:	079b      	lsls	r3, r3, #30
 8014904:	d413      	bmi.n	801492e <_printf_i+0x232>
 8014906:	68e0      	ldr	r0, [r4, #12]
 8014908:	9b03      	ldr	r3, [sp, #12]
 801490a:	4298      	cmp	r0, r3
 801490c:	bfb8      	it	lt
 801490e:	4618      	movlt	r0, r3
 8014910:	e7a6      	b.n	8014860 <_printf_i+0x164>
 8014912:	2301      	movs	r3, #1
 8014914:	4632      	mov	r2, r6
 8014916:	4649      	mov	r1, r9
 8014918:	4640      	mov	r0, r8
 801491a:	47d0      	blx	sl
 801491c:	3001      	adds	r0, #1
 801491e:	d09d      	beq.n	801485c <_printf_i+0x160>
 8014920:	3501      	adds	r5, #1
 8014922:	68e3      	ldr	r3, [r4, #12]
 8014924:	9903      	ldr	r1, [sp, #12]
 8014926:	1a5b      	subs	r3, r3, r1
 8014928:	42ab      	cmp	r3, r5
 801492a:	dcf2      	bgt.n	8014912 <_printf_i+0x216>
 801492c:	e7eb      	b.n	8014906 <_printf_i+0x20a>
 801492e:	2500      	movs	r5, #0
 8014930:	f104 0619 	add.w	r6, r4, #25
 8014934:	e7f5      	b.n	8014922 <_printf_i+0x226>
 8014936:	bf00      	nop
 8014938:	0802e0d6 	.word	0x0802e0d6
 801493c:	0802e0e7 	.word	0x0802e0e7

08014940 <std>:
 8014940:	2300      	movs	r3, #0
 8014942:	b510      	push	{r4, lr}
 8014944:	4604      	mov	r4, r0
 8014946:	e9c0 3300 	strd	r3, r3, [r0]
 801494a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801494e:	6083      	str	r3, [r0, #8]
 8014950:	8181      	strh	r1, [r0, #12]
 8014952:	6643      	str	r3, [r0, #100]	; 0x64
 8014954:	81c2      	strh	r2, [r0, #14]
 8014956:	6183      	str	r3, [r0, #24]
 8014958:	4619      	mov	r1, r3
 801495a:	2208      	movs	r2, #8
 801495c:	305c      	adds	r0, #92	; 0x5c
 801495e:	f000 f9ff 	bl	8014d60 <memset>
 8014962:	4b0d      	ldr	r3, [pc, #52]	; (8014998 <std+0x58>)
 8014964:	6263      	str	r3, [r4, #36]	; 0x24
 8014966:	4b0d      	ldr	r3, [pc, #52]	; (801499c <std+0x5c>)
 8014968:	62a3      	str	r3, [r4, #40]	; 0x28
 801496a:	4b0d      	ldr	r3, [pc, #52]	; (80149a0 <std+0x60>)
 801496c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801496e:	4b0d      	ldr	r3, [pc, #52]	; (80149a4 <std+0x64>)
 8014970:	6323      	str	r3, [r4, #48]	; 0x30
 8014972:	4b0d      	ldr	r3, [pc, #52]	; (80149a8 <std+0x68>)
 8014974:	6224      	str	r4, [r4, #32]
 8014976:	429c      	cmp	r4, r3
 8014978:	d006      	beq.n	8014988 <std+0x48>
 801497a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801497e:	4294      	cmp	r4, r2
 8014980:	d002      	beq.n	8014988 <std+0x48>
 8014982:	33d0      	adds	r3, #208	; 0xd0
 8014984:	429c      	cmp	r4, r3
 8014986:	d105      	bne.n	8014994 <std+0x54>
 8014988:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801498c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014990:	f000 ba62 	b.w	8014e58 <__retarget_lock_init_recursive>
 8014994:	bd10      	pop	{r4, pc}
 8014996:	bf00      	nop
 8014998:	08014bb1 	.word	0x08014bb1
 801499c:	08014bd3 	.word	0x08014bd3
 80149a0:	08014c0b 	.word	0x08014c0b
 80149a4:	08014c2f 	.word	0x08014c2f
 80149a8:	2000360c 	.word	0x2000360c

080149ac <stdio_exit_handler>:
 80149ac:	4a02      	ldr	r2, [pc, #8]	; (80149b8 <stdio_exit_handler+0xc>)
 80149ae:	4903      	ldr	r1, [pc, #12]	; (80149bc <stdio_exit_handler+0x10>)
 80149b0:	4803      	ldr	r0, [pc, #12]	; (80149c0 <stdio_exit_handler+0x14>)
 80149b2:	f000 b869 	b.w	8014a88 <_fwalk_sglue>
 80149b6:	bf00      	nop
 80149b8:	20000088 	.word	0x20000088
 80149bc:	08016801 	.word	0x08016801
 80149c0:	20000094 	.word	0x20000094

080149c4 <cleanup_stdio>:
 80149c4:	6841      	ldr	r1, [r0, #4]
 80149c6:	4b0c      	ldr	r3, [pc, #48]	; (80149f8 <cleanup_stdio+0x34>)
 80149c8:	4299      	cmp	r1, r3
 80149ca:	b510      	push	{r4, lr}
 80149cc:	4604      	mov	r4, r0
 80149ce:	d001      	beq.n	80149d4 <cleanup_stdio+0x10>
 80149d0:	f001 ff16 	bl	8016800 <_fflush_r>
 80149d4:	68a1      	ldr	r1, [r4, #8]
 80149d6:	4b09      	ldr	r3, [pc, #36]	; (80149fc <cleanup_stdio+0x38>)
 80149d8:	4299      	cmp	r1, r3
 80149da:	d002      	beq.n	80149e2 <cleanup_stdio+0x1e>
 80149dc:	4620      	mov	r0, r4
 80149de:	f001 ff0f 	bl	8016800 <_fflush_r>
 80149e2:	68e1      	ldr	r1, [r4, #12]
 80149e4:	4b06      	ldr	r3, [pc, #24]	; (8014a00 <cleanup_stdio+0x3c>)
 80149e6:	4299      	cmp	r1, r3
 80149e8:	d004      	beq.n	80149f4 <cleanup_stdio+0x30>
 80149ea:	4620      	mov	r0, r4
 80149ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149f0:	f001 bf06 	b.w	8016800 <_fflush_r>
 80149f4:	bd10      	pop	{r4, pc}
 80149f6:	bf00      	nop
 80149f8:	2000360c 	.word	0x2000360c
 80149fc:	20003674 	.word	0x20003674
 8014a00:	200036dc 	.word	0x200036dc

08014a04 <global_stdio_init.part.0>:
 8014a04:	b510      	push	{r4, lr}
 8014a06:	4b0b      	ldr	r3, [pc, #44]	; (8014a34 <global_stdio_init.part.0+0x30>)
 8014a08:	4c0b      	ldr	r4, [pc, #44]	; (8014a38 <global_stdio_init.part.0+0x34>)
 8014a0a:	4a0c      	ldr	r2, [pc, #48]	; (8014a3c <global_stdio_init.part.0+0x38>)
 8014a0c:	601a      	str	r2, [r3, #0]
 8014a0e:	4620      	mov	r0, r4
 8014a10:	2200      	movs	r2, #0
 8014a12:	2104      	movs	r1, #4
 8014a14:	f7ff ff94 	bl	8014940 <std>
 8014a18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	2109      	movs	r1, #9
 8014a20:	f7ff ff8e 	bl	8014940 <std>
 8014a24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014a28:	2202      	movs	r2, #2
 8014a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a2e:	2112      	movs	r1, #18
 8014a30:	f7ff bf86 	b.w	8014940 <std>
 8014a34:	20003744 	.word	0x20003744
 8014a38:	2000360c 	.word	0x2000360c
 8014a3c:	080149ad 	.word	0x080149ad

08014a40 <__sfp_lock_acquire>:
 8014a40:	4801      	ldr	r0, [pc, #4]	; (8014a48 <__sfp_lock_acquire+0x8>)
 8014a42:	f000 ba0a 	b.w	8014e5a <__retarget_lock_acquire_recursive>
 8014a46:	bf00      	nop
 8014a48:	2000374d 	.word	0x2000374d

08014a4c <__sfp_lock_release>:
 8014a4c:	4801      	ldr	r0, [pc, #4]	; (8014a54 <__sfp_lock_release+0x8>)
 8014a4e:	f000 ba05 	b.w	8014e5c <__retarget_lock_release_recursive>
 8014a52:	bf00      	nop
 8014a54:	2000374d 	.word	0x2000374d

08014a58 <__sinit>:
 8014a58:	b510      	push	{r4, lr}
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	f7ff fff0 	bl	8014a40 <__sfp_lock_acquire>
 8014a60:	6a23      	ldr	r3, [r4, #32]
 8014a62:	b11b      	cbz	r3, 8014a6c <__sinit+0x14>
 8014a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a68:	f7ff bff0 	b.w	8014a4c <__sfp_lock_release>
 8014a6c:	4b04      	ldr	r3, [pc, #16]	; (8014a80 <__sinit+0x28>)
 8014a6e:	6223      	str	r3, [r4, #32]
 8014a70:	4b04      	ldr	r3, [pc, #16]	; (8014a84 <__sinit+0x2c>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d1f5      	bne.n	8014a64 <__sinit+0xc>
 8014a78:	f7ff ffc4 	bl	8014a04 <global_stdio_init.part.0>
 8014a7c:	e7f2      	b.n	8014a64 <__sinit+0xc>
 8014a7e:	bf00      	nop
 8014a80:	080149c5 	.word	0x080149c5
 8014a84:	20003744 	.word	0x20003744

08014a88 <_fwalk_sglue>:
 8014a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a8c:	4607      	mov	r7, r0
 8014a8e:	4688      	mov	r8, r1
 8014a90:	4614      	mov	r4, r2
 8014a92:	2600      	movs	r6, #0
 8014a94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a98:	f1b9 0901 	subs.w	r9, r9, #1
 8014a9c:	d505      	bpl.n	8014aaa <_fwalk_sglue+0x22>
 8014a9e:	6824      	ldr	r4, [r4, #0]
 8014aa0:	2c00      	cmp	r4, #0
 8014aa2:	d1f7      	bne.n	8014a94 <_fwalk_sglue+0xc>
 8014aa4:	4630      	mov	r0, r6
 8014aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aaa:	89ab      	ldrh	r3, [r5, #12]
 8014aac:	2b01      	cmp	r3, #1
 8014aae:	d907      	bls.n	8014ac0 <_fwalk_sglue+0x38>
 8014ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ab4:	3301      	adds	r3, #1
 8014ab6:	d003      	beq.n	8014ac0 <_fwalk_sglue+0x38>
 8014ab8:	4629      	mov	r1, r5
 8014aba:	4638      	mov	r0, r7
 8014abc:	47c0      	blx	r8
 8014abe:	4306      	orrs	r6, r0
 8014ac0:	3568      	adds	r5, #104	; 0x68
 8014ac2:	e7e9      	b.n	8014a98 <_fwalk_sglue+0x10>

08014ac4 <iprintf>:
 8014ac4:	b40f      	push	{r0, r1, r2, r3}
 8014ac6:	b507      	push	{r0, r1, r2, lr}
 8014ac8:	4906      	ldr	r1, [pc, #24]	; (8014ae4 <iprintf+0x20>)
 8014aca:	ab04      	add	r3, sp, #16
 8014acc:	6808      	ldr	r0, [r1, #0]
 8014ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ad2:	6881      	ldr	r1, [r0, #8]
 8014ad4:	9301      	str	r3, [sp, #4]
 8014ad6:	f001 fcf3 	bl	80164c0 <_vfiprintf_r>
 8014ada:	b003      	add	sp, #12
 8014adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ae0:	b004      	add	sp, #16
 8014ae2:	4770      	bx	lr
 8014ae4:	200000e0 	.word	0x200000e0

08014ae8 <putchar>:
 8014ae8:	4b02      	ldr	r3, [pc, #8]	; (8014af4 <putchar+0xc>)
 8014aea:	4601      	mov	r1, r0
 8014aec:	6818      	ldr	r0, [r3, #0]
 8014aee:	6882      	ldr	r2, [r0, #8]
 8014af0:	f001 bf10 	b.w	8016914 <_putc_r>
 8014af4:	200000e0 	.word	0x200000e0

08014af8 <_puts_r>:
 8014af8:	6a03      	ldr	r3, [r0, #32]
 8014afa:	b570      	push	{r4, r5, r6, lr}
 8014afc:	6884      	ldr	r4, [r0, #8]
 8014afe:	4605      	mov	r5, r0
 8014b00:	460e      	mov	r6, r1
 8014b02:	b90b      	cbnz	r3, 8014b08 <_puts_r+0x10>
 8014b04:	f7ff ffa8 	bl	8014a58 <__sinit>
 8014b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b0a:	07db      	lsls	r3, r3, #31
 8014b0c:	d405      	bmi.n	8014b1a <_puts_r+0x22>
 8014b0e:	89a3      	ldrh	r3, [r4, #12]
 8014b10:	0598      	lsls	r0, r3, #22
 8014b12:	d402      	bmi.n	8014b1a <_puts_r+0x22>
 8014b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b16:	f000 f9a0 	bl	8014e5a <__retarget_lock_acquire_recursive>
 8014b1a:	89a3      	ldrh	r3, [r4, #12]
 8014b1c:	0719      	lsls	r1, r3, #28
 8014b1e:	d513      	bpl.n	8014b48 <_puts_r+0x50>
 8014b20:	6923      	ldr	r3, [r4, #16]
 8014b22:	b18b      	cbz	r3, 8014b48 <_puts_r+0x50>
 8014b24:	3e01      	subs	r6, #1
 8014b26:	68a3      	ldr	r3, [r4, #8]
 8014b28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014b2c:	3b01      	subs	r3, #1
 8014b2e:	60a3      	str	r3, [r4, #8]
 8014b30:	b9e9      	cbnz	r1, 8014b6e <_puts_r+0x76>
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	da2e      	bge.n	8014b94 <_puts_r+0x9c>
 8014b36:	4622      	mov	r2, r4
 8014b38:	210a      	movs	r1, #10
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	f000 f87b 	bl	8014c36 <__swbuf_r>
 8014b40:	3001      	adds	r0, #1
 8014b42:	d007      	beq.n	8014b54 <_puts_r+0x5c>
 8014b44:	250a      	movs	r5, #10
 8014b46:	e007      	b.n	8014b58 <_puts_r+0x60>
 8014b48:	4621      	mov	r1, r4
 8014b4a:	4628      	mov	r0, r5
 8014b4c:	f000 f8b0 	bl	8014cb0 <__swsetup_r>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	d0e7      	beq.n	8014b24 <_puts_r+0x2c>
 8014b54:	f04f 35ff 	mov.w	r5, #4294967295
 8014b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b5a:	07da      	lsls	r2, r3, #31
 8014b5c:	d405      	bmi.n	8014b6a <_puts_r+0x72>
 8014b5e:	89a3      	ldrh	r3, [r4, #12]
 8014b60:	059b      	lsls	r3, r3, #22
 8014b62:	d402      	bmi.n	8014b6a <_puts_r+0x72>
 8014b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b66:	f000 f979 	bl	8014e5c <__retarget_lock_release_recursive>
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	bd70      	pop	{r4, r5, r6, pc}
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	da04      	bge.n	8014b7c <_puts_r+0x84>
 8014b72:	69a2      	ldr	r2, [r4, #24]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	dc06      	bgt.n	8014b86 <_puts_r+0x8e>
 8014b78:	290a      	cmp	r1, #10
 8014b7a:	d004      	beq.n	8014b86 <_puts_r+0x8e>
 8014b7c:	6823      	ldr	r3, [r4, #0]
 8014b7e:	1c5a      	adds	r2, r3, #1
 8014b80:	6022      	str	r2, [r4, #0]
 8014b82:	7019      	strb	r1, [r3, #0]
 8014b84:	e7cf      	b.n	8014b26 <_puts_r+0x2e>
 8014b86:	4622      	mov	r2, r4
 8014b88:	4628      	mov	r0, r5
 8014b8a:	f000 f854 	bl	8014c36 <__swbuf_r>
 8014b8e:	3001      	adds	r0, #1
 8014b90:	d1c9      	bne.n	8014b26 <_puts_r+0x2e>
 8014b92:	e7df      	b.n	8014b54 <_puts_r+0x5c>
 8014b94:	6823      	ldr	r3, [r4, #0]
 8014b96:	250a      	movs	r5, #10
 8014b98:	1c5a      	adds	r2, r3, #1
 8014b9a:	6022      	str	r2, [r4, #0]
 8014b9c:	701d      	strb	r5, [r3, #0]
 8014b9e:	e7db      	b.n	8014b58 <_puts_r+0x60>

08014ba0 <puts>:
 8014ba0:	4b02      	ldr	r3, [pc, #8]	; (8014bac <puts+0xc>)
 8014ba2:	4601      	mov	r1, r0
 8014ba4:	6818      	ldr	r0, [r3, #0]
 8014ba6:	f7ff bfa7 	b.w	8014af8 <_puts_r>
 8014baa:	bf00      	nop
 8014bac:	200000e0 	.word	0x200000e0

08014bb0 <__sread>:
 8014bb0:	b510      	push	{r4, lr}
 8014bb2:	460c      	mov	r4, r1
 8014bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bb8:	f000 f900 	bl	8014dbc <_read_r>
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	bfab      	itete	ge
 8014bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8014bc4:	181b      	addge	r3, r3, r0
 8014bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014bca:	bfac      	ite	ge
 8014bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8014bce:	81a3      	strhlt	r3, [r4, #12]
 8014bd0:	bd10      	pop	{r4, pc}

08014bd2 <__swrite>:
 8014bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd6:	461f      	mov	r7, r3
 8014bd8:	898b      	ldrh	r3, [r1, #12]
 8014bda:	05db      	lsls	r3, r3, #23
 8014bdc:	4605      	mov	r5, r0
 8014bde:	460c      	mov	r4, r1
 8014be0:	4616      	mov	r6, r2
 8014be2:	d505      	bpl.n	8014bf0 <__swrite+0x1e>
 8014be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014be8:	2302      	movs	r3, #2
 8014bea:	2200      	movs	r2, #0
 8014bec:	f000 f8d4 	bl	8014d98 <_lseek_r>
 8014bf0:	89a3      	ldrh	r3, [r4, #12]
 8014bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bfa:	81a3      	strh	r3, [r4, #12]
 8014bfc:	4632      	mov	r2, r6
 8014bfe:	463b      	mov	r3, r7
 8014c00:	4628      	mov	r0, r5
 8014c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c06:	f000 b8eb 	b.w	8014de0 <_write_r>

08014c0a <__sseek>:
 8014c0a:	b510      	push	{r4, lr}
 8014c0c:	460c      	mov	r4, r1
 8014c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c12:	f000 f8c1 	bl	8014d98 <_lseek_r>
 8014c16:	1c43      	adds	r3, r0, #1
 8014c18:	89a3      	ldrh	r3, [r4, #12]
 8014c1a:	bf15      	itete	ne
 8014c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c26:	81a3      	strheq	r3, [r4, #12]
 8014c28:	bf18      	it	ne
 8014c2a:	81a3      	strhne	r3, [r4, #12]
 8014c2c:	bd10      	pop	{r4, pc}

08014c2e <__sclose>:
 8014c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c32:	f000 b8a1 	b.w	8014d78 <_close_r>

08014c36 <__swbuf_r>:
 8014c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c38:	460e      	mov	r6, r1
 8014c3a:	4614      	mov	r4, r2
 8014c3c:	4605      	mov	r5, r0
 8014c3e:	b118      	cbz	r0, 8014c48 <__swbuf_r+0x12>
 8014c40:	6a03      	ldr	r3, [r0, #32]
 8014c42:	b90b      	cbnz	r3, 8014c48 <__swbuf_r+0x12>
 8014c44:	f7ff ff08 	bl	8014a58 <__sinit>
 8014c48:	69a3      	ldr	r3, [r4, #24]
 8014c4a:	60a3      	str	r3, [r4, #8]
 8014c4c:	89a3      	ldrh	r3, [r4, #12]
 8014c4e:	071a      	lsls	r2, r3, #28
 8014c50:	d525      	bpl.n	8014c9e <__swbuf_r+0x68>
 8014c52:	6923      	ldr	r3, [r4, #16]
 8014c54:	b31b      	cbz	r3, 8014c9e <__swbuf_r+0x68>
 8014c56:	6823      	ldr	r3, [r4, #0]
 8014c58:	6922      	ldr	r2, [r4, #16]
 8014c5a:	1a98      	subs	r0, r3, r2
 8014c5c:	6963      	ldr	r3, [r4, #20]
 8014c5e:	b2f6      	uxtb	r6, r6
 8014c60:	4283      	cmp	r3, r0
 8014c62:	4637      	mov	r7, r6
 8014c64:	dc04      	bgt.n	8014c70 <__swbuf_r+0x3a>
 8014c66:	4621      	mov	r1, r4
 8014c68:	4628      	mov	r0, r5
 8014c6a:	f001 fdc9 	bl	8016800 <_fflush_r>
 8014c6e:	b9e0      	cbnz	r0, 8014caa <__swbuf_r+0x74>
 8014c70:	68a3      	ldr	r3, [r4, #8]
 8014c72:	3b01      	subs	r3, #1
 8014c74:	60a3      	str	r3, [r4, #8]
 8014c76:	6823      	ldr	r3, [r4, #0]
 8014c78:	1c5a      	adds	r2, r3, #1
 8014c7a:	6022      	str	r2, [r4, #0]
 8014c7c:	701e      	strb	r6, [r3, #0]
 8014c7e:	6962      	ldr	r2, [r4, #20]
 8014c80:	1c43      	adds	r3, r0, #1
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d004      	beq.n	8014c90 <__swbuf_r+0x5a>
 8014c86:	89a3      	ldrh	r3, [r4, #12]
 8014c88:	07db      	lsls	r3, r3, #31
 8014c8a:	d506      	bpl.n	8014c9a <__swbuf_r+0x64>
 8014c8c:	2e0a      	cmp	r6, #10
 8014c8e:	d104      	bne.n	8014c9a <__swbuf_r+0x64>
 8014c90:	4621      	mov	r1, r4
 8014c92:	4628      	mov	r0, r5
 8014c94:	f001 fdb4 	bl	8016800 <_fflush_r>
 8014c98:	b938      	cbnz	r0, 8014caa <__swbuf_r+0x74>
 8014c9a:	4638      	mov	r0, r7
 8014c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c9e:	4621      	mov	r1, r4
 8014ca0:	4628      	mov	r0, r5
 8014ca2:	f000 f805 	bl	8014cb0 <__swsetup_r>
 8014ca6:	2800      	cmp	r0, #0
 8014ca8:	d0d5      	beq.n	8014c56 <__swbuf_r+0x20>
 8014caa:	f04f 37ff 	mov.w	r7, #4294967295
 8014cae:	e7f4      	b.n	8014c9a <__swbuf_r+0x64>

08014cb0 <__swsetup_r>:
 8014cb0:	b538      	push	{r3, r4, r5, lr}
 8014cb2:	4b2a      	ldr	r3, [pc, #168]	; (8014d5c <__swsetup_r+0xac>)
 8014cb4:	4605      	mov	r5, r0
 8014cb6:	6818      	ldr	r0, [r3, #0]
 8014cb8:	460c      	mov	r4, r1
 8014cba:	b118      	cbz	r0, 8014cc4 <__swsetup_r+0x14>
 8014cbc:	6a03      	ldr	r3, [r0, #32]
 8014cbe:	b90b      	cbnz	r3, 8014cc4 <__swsetup_r+0x14>
 8014cc0:	f7ff feca 	bl	8014a58 <__sinit>
 8014cc4:	89a3      	ldrh	r3, [r4, #12]
 8014cc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014cca:	0718      	lsls	r0, r3, #28
 8014ccc:	d422      	bmi.n	8014d14 <__swsetup_r+0x64>
 8014cce:	06d9      	lsls	r1, r3, #27
 8014cd0:	d407      	bmi.n	8014ce2 <__swsetup_r+0x32>
 8014cd2:	2309      	movs	r3, #9
 8014cd4:	602b      	str	r3, [r5, #0]
 8014cd6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014cda:	81a3      	strh	r3, [r4, #12]
 8014cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ce0:	e034      	b.n	8014d4c <__swsetup_r+0x9c>
 8014ce2:	0758      	lsls	r0, r3, #29
 8014ce4:	d512      	bpl.n	8014d0c <__swsetup_r+0x5c>
 8014ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ce8:	b141      	cbz	r1, 8014cfc <__swsetup_r+0x4c>
 8014cea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014cee:	4299      	cmp	r1, r3
 8014cf0:	d002      	beq.n	8014cf8 <__swsetup_r+0x48>
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	f000 ff3e 	bl	8015b74 <_free_r>
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	6363      	str	r3, [r4, #52]	; 0x34
 8014cfc:	89a3      	ldrh	r3, [r4, #12]
 8014cfe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014d02:	81a3      	strh	r3, [r4, #12]
 8014d04:	2300      	movs	r3, #0
 8014d06:	6063      	str	r3, [r4, #4]
 8014d08:	6923      	ldr	r3, [r4, #16]
 8014d0a:	6023      	str	r3, [r4, #0]
 8014d0c:	89a3      	ldrh	r3, [r4, #12]
 8014d0e:	f043 0308 	orr.w	r3, r3, #8
 8014d12:	81a3      	strh	r3, [r4, #12]
 8014d14:	6923      	ldr	r3, [r4, #16]
 8014d16:	b94b      	cbnz	r3, 8014d2c <__swsetup_r+0x7c>
 8014d18:	89a3      	ldrh	r3, [r4, #12]
 8014d1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d22:	d003      	beq.n	8014d2c <__swsetup_r+0x7c>
 8014d24:	4621      	mov	r1, r4
 8014d26:	4628      	mov	r0, r5
 8014d28:	f001 fdb8 	bl	801689c <__smakebuf_r>
 8014d2c:	89a0      	ldrh	r0, [r4, #12]
 8014d2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d32:	f010 0301 	ands.w	r3, r0, #1
 8014d36:	d00a      	beq.n	8014d4e <__swsetup_r+0x9e>
 8014d38:	2300      	movs	r3, #0
 8014d3a:	60a3      	str	r3, [r4, #8]
 8014d3c:	6963      	ldr	r3, [r4, #20]
 8014d3e:	425b      	negs	r3, r3
 8014d40:	61a3      	str	r3, [r4, #24]
 8014d42:	6923      	ldr	r3, [r4, #16]
 8014d44:	b943      	cbnz	r3, 8014d58 <__swsetup_r+0xa8>
 8014d46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014d4a:	d1c4      	bne.n	8014cd6 <__swsetup_r+0x26>
 8014d4c:	bd38      	pop	{r3, r4, r5, pc}
 8014d4e:	0781      	lsls	r1, r0, #30
 8014d50:	bf58      	it	pl
 8014d52:	6963      	ldrpl	r3, [r4, #20]
 8014d54:	60a3      	str	r3, [r4, #8]
 8014d56:	e7f4      	b.n	8014d42 <__swsetup_r+0x92>
 8014d58:	2000      	movs	r0, #0
 8014d5a:	e7f7      	b.n	8014d4c <__swsetup_r+0x9c>
 8014d5c:	200000e0 	.word	0x200000e0

08014d60 <memset>:
 8014d60:	4402      	add	r2, r0
 8014d62:	4603      	mov	r3, r0
 8014d64:	4293      	cmp	r3, r2
 8014d66:	d100      	bne.n	8014d6a <memset+0xa>
 8014d68:	4770      	bx	lr
 8014d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8014d6e:	e7f9      	b.n	8014d64 <memset+0x4>

08014d70 <_localeconv_r>:
 8014d70:	4800      	ldr	r0, [pc, #0]	; (8014d74 <_localeconv_r+0x4>)
 8014d72:	4770      	bx	lr
 8014d74:	200001d4 	.word	0x200001d4

08014d78 <_close_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	4d06      	ldr	r5, [pc, #24]	; (8014d94 <_close_r+0x1c>)
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	4604      	mov	r4, r0
 8014d80:	4608      	mov	r0, r1
 8014d82:	602b      	str	r3, [r5, #0]
 8014d84:	f7f0 f89f 	bl	8004ec6 <_close>
 8014d88:	1c43      	adds	r3, r0, #1
 8014d8a:	d102      	bne.n	8014d92 <_close_r+0x1a>
 8014d8c:	682b      	ldr	r3, [r5, #0]
 8014d8e:	b103      	cbz	r3, 8014d92 <_close_r+0x1a>
 8014d90:	6023      	str	r3, [r4, #0]
 8014d92:	bd38      	pop	{r3, r4, r5, pc}
 8014d94:	20003748 	.word	0x20003748

08014d98 <_lseek_r>:
 8014d98:	b538      	push	{r3, r4, r5, lr}
 8014d9a:	4d07      	ldr	r5, [pc, #28]	; (8014db8 <_lseek_r+0x20>)
 8014d9c:	4604      	mov	r4, r0
 8014d9e:	4608      	mov	r0, r1
 8014da0:	4611      	mov	r1, r2
 8014da2:	2200      	movs	r2, #0
 8014da4:	602a      	str	r2, [r5, #0]
 8014da6:	461a      	mov	r2, r3
 8014da8:	f7f0 f8b4 	bl	8004f14 <_lseek>
 8014dac:	1c43      	adds	r3, r0, #1
 8014dae:	d102      	bne.n	8014db6 <_lseek_r+0x1e>
 8014db0:	682b      	ldr	r3, [r5, #0]
 8014db2:	b103      	cbz	r3, 8014db6 <_lseek_r+0x1e>
 8014db4:	6023      	str	r3, [r4, #0]
 8014db6:	bd38      	pop	{r3, r4, r5, pc}
 8014db8:	20003748 	.word	0x20003748

08014dbc <_read_r>:
 8014dbc:	b538      	push	{r3, r4, r5, lr}
 8014dbe:	4d07      	ldr	r5, [pc, #28]	; (8014ddc <_read_r+0x20>)
 8014dc0:	4604      	mov	r4, r0
 8014dc2:	4608      	mov	r0, r1
 8014dc4:	4611      	mov	r1, r2
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	602a      	str	r2, [r5, #0]
 8014dca:	461a      	mov	r2, r3
 8014dcc:	f7f0 f85e 	bl	8004e8c <_read>
 8014dd0:	1c43      	adds	r3, r0, #1
 8014dd2:	d102      	bne.n	8014dda <_read_r+0x1e>
 8014dd4:	682b      	ldr	r3, [r5, #0]
 8014dd6:	b103      	cbz	r3, 8014dda <_read_r+0x1e>
 8014dd8:	6023      	str	r3, [r4, #0]
 8014dda:	bd38      	pop	{r3, r4, r5, pc}
 8014ddc:	20003748 	.word	0x20003748

08014de0 <_write_r>:
 8014de0:	b538      	push	{r3, r4, r5, lr}
 8014de2:	4d07      	ldr	r5, [pc, #28]	; (8014e00 <_write_r+0x20>)
 8014de4:	4604      	mov	r4, r0
 8014de6:	4608      	mov	r0, r1
 8014de8:	4611      	mov	r1, r2
 8014dea:	2200      	movs	r2, #0
 8014dec:	602a      	str	r2, [r5, #0]
 8014dee:	461a      	mov	r2, r3
 8014df0:	f7fd f8f6 	bl	8011fe0 <_write>
 8014df4:	1c43      	adds	r3, r0, #1
 8014df6:	d102      	bne.n	8014dfe <_write_r+0x1e>
 8014df8:	682b      	ldr	r3, [r5, #0]
 8014dfa:	b103      	cbz	r3, 8014dfe <_write_r+0x1e>
 8014dfc:	6023      	str	r3, [r4, #0]
 8014dfe:	bd38      	pop	{r3, r4, r5, pc}
 8014e00:	20003748 	.word	0x20003748

08014e04 <__errno>:
 8014e04:	4b01      	ldr	r3, [pc, #4]	; (8014e0c <__errno+0x8>)
 8014e06:	6818      	ldr	r0, [r3, #0]
 8014e08:	4770      	bx	lr
 8014e0a:	bf00      	nop
 8014e0c:	200000e0 	.word	0x200000e0

08014e10 <__libc_init_array>:
 8014e10:	b570      	push	{r4, r5, r6, lr}
 8014e12:	4d0d      	ldr	r5, [pc, #52]	; (8014e48 <__libc_init_array+0x38>)
 8014e14:	4c0d      	ldr	r4, [pc, #52]	; (8014e4c <__libc_init_array+0x3c>)
 8014e16:	1b64      	subs	r4, r4, r5
 8014e18:	10a4      	asrs	r4, r4, #2
 8014e1a:	2600      	movs	r6, #0
 8014e1c:	42a6      	cmp	r6, r4
 8014e1e:	d109      	bne.n	8014e34 <__libc_init_array+0x24>
 8014e20:	4d0b      	ldr	r5, [pc, #44]	; (8014e50 <__libc_init_array+0x40>)
 8014e22:	4c0c      	ldr	r4, [pc, #48]	; (8014e54 <__libc_init_array+0x44>)
 8014e24:	f002 f82e 	bl	8016e84 <_init>
 8014e28:	1b64      	subs	r4, r4, r5
 8014e2a:	10a4      	asrs	r4, r4, #2
 8014e2c:	2600      	movs	r6, #0
 8014e2e:	42a6      	cmp	r6, r4
 8014e30:	d105      	bne.n	8014e3e <__libc_init_array+0x2e>
 8014e32:	bd70      	pop	{r4, r5, r6, pc}
 8014e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e38:	4798      	blx	r3
 8014e3a:	3601      	adds	r6, #1
 8014e3c:	e7ee      	b.n	8014e1c <__libc_init_array+0xc>
 8014e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e42:	4798      	blx	r3
 8014e44:	3601      	adds	r6, #1
 8014e46:	e7f2      	b.n	8014e2e <__libc_init_array+0x1e>
 8014e48:	0802e474 	.word	0x0802e474
 8014e4c:	0802e474 	.word	0x0802e474
 8014e50:	0802e474 	.word	0x0802e474
 8014e54:	0802e478 	.word	0x0802e478

08014e58 <__retarget_lock_init_recursive>:
 8014e58:	4770      	bx	lr

08014e5a <__retarget_lock_acquire_recursive>:
 8014e5a:	4770      	bx	lr

08014e5c <__retarget_lock_release_recursive>:
 8014e5c:	4770      	bx	lr

08014e5e <memcpy>:
 8014e5e:	440a      	add	r2, r1
 8014e60:	4291      	cmp	r1, r2
 8014e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8014e66:	d100      	bne.n	8014e6a <memcpy+0xc>
 8014e68:	4770      	bx	lr
 8014e6a:	b510      	push	{r4, lr}
 8014e6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e74:	4291      	cmp	r1, r2
 8014e76:	d1f9      	bne.n	8014e6c <memcpy+0xe>
 8014e78:	bd10      	pop	{r4, pc}

08014e7a <quorem>:
 8014e7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e7e:	6903      	ldr	r3, [r0, #16]
 8014e80:	690c      	ldr	r4, [r1, #16]
 8014e82:	42a3      	cmp	r3, r4
 8014e84:	4607      	mov	r7, r0
 8014e86:	db7e      	blt.n	8014f86 <quorem+0x10c>
 8014e88:	3c01      	subs	r4, #1
 8014e8a:	f101 0814 	add.w	r8, r1, #20
 8014e8e:	f100 0514 	add.w	r5, r0, #20
 8014e92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e96:	9301      	str	r3, [sp, #4]
 8014e98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014ea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014eac:	fbb2 f6f3 	udiv	r6, r2, r3
 8014eb0:	d331      	bcc.n	8014f16 <quorem+0x9c>
 8014eb2:	f04f 0e00 	mov.w	lr, #0
 8014eb6:	4640      	mov	r0, r8
 8014eb8:	46ac      	mov	ip, r5
 8014eba:	46f2      	mov	sl, lr
 8014ebc:	f850 2b04 	ldr.w	r2, [r0], #4
 8014ec0:	b293      	uxth	r3, r2
 8014ec2:	fb06 e303 	mla	r3, r6, r3, lr
 8014ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014eca:	0c1a      	lsrs	r2, r3, #16
 8014ecc:	b29b      	uxth	r3, r3
 8014ece:	ebaa 0303 	sub.w	r3, sl, r3
 8014ed2:	f8dc a000 	ldr.w	sl, [ip]
 8014ed6:	fa13 f38a 	uxtah	r3, r3, sl
 8014eda:	fb06 220e 	mla	r2, r6, lr, r2
 8014ede:	9300      	str	r3, [sp, #0]
 8014ee0:	9b00      	ldr	r3, [sp, #0]
 8014ee2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014ee6:	b292      	uxth	r2, r2
 8014ee8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014eec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ef0:	f8bd 3000 	ldrh.w	r3, [sp]
 8014ef4:	4581      	cmp	r9, r0
 8014ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014efa:	f84c 3b04 	str.w	r3, [ip], #4
 8014efe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014f02:	d2db      	bcs.n	8014ebc <quorem+0x42>
 8014f04:	f855 300b 	ldr.w	r3, [r5, fp]
 8014f08:	b92b      	cbnz	r3, 8014f16 <quorem+0x9c>
 8014f0a:	9b01      	ldr	r3, [sp, #4]
 8014f0c:	3b04      	subs	r3, #4
 8014f0e:	429d      	cmp	r5, r3
 8014f10:	461a      	mov	r2, r3
 8014f12:	d32c      	bcc.n	8014f6e <quorem+0xf4>
 8014f14:	613c      	str	r4, [r7, #16]
 8014f16:	4638      	mov	r0, r7
 8014f18:	f001 f9a8 	bl	801626c <__mcmp>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	db22      	blt.n	8014f66 <quorem+0xec>
 8014f20:	3601      	adds	r6, #1
 8014f22:	4629      	mov	r1, r5
 8014f24:	2000      	movs	r0, #0
 8014f26:	f858 2b04 	ldr.w	r2, [r8], #4
 8014f2a:	f8d1 c000 	ldr.w	ip, [r1]
 8014f2e:	b293      	uxth	r3, r2
 8014f30:	1ac3      	subs	r3, r0, r3
 8014f32:	0c12      	lsrs	r2, r2, #16
 8014f34:	fa13 f38c 	uxtah	r3, r3, ip
 8014f38:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014f3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014f40:	b29b      	uxth	r3, r3
 8014f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014f46:	45c1      	cmp	r9, r8
 8014f48:	f841 3b04 	str.w	r3, [r1], #4
 8014f4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014f50:	d2e9      	bcs.n	8014f26 <quorem+0xac>
 8014f52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014f56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014f5a:	b922      	cbnz	r2, 8014f66 <quorem+0xec>
 8014f5c:	3b04      	subs	r3, #4
 8014f5e:	429d      	cmp	r5, r3
 8014f60:	461a      	mov	r2, r3
 8014f62:	d30a      	bcc.n	8014f7a <quorem+0x100>
 8014f64:	613c      	str	r4, [r7, #16]
 8014f66:	4630      	mov	r0, r6
 8014f68:	b003      	add	sp, #12
 8014f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f6e:	6812      	ldr	r2, [r2, #0]
 8014f70:	3b04      	subs	r3, #4
 8014f72:	2a00      	cmp	r2, #0
 8014f74:	d1ce      	bne.n	8014f14 <quorem+0x9a>
 8014f76:	3c01      	subs	r4, #1
 8014f78:	e7c9      	b.n	8014f0e <quorem+0x94>
 8014f7a:	6812      	ldr	r2, [r2, #0]
 8014f7c:	3b04      	subs	r3, #4
 8014f7e:	2a00      	cmp	r2, #0
 8014f80:	d1f0      	bne.n	8014f64 <quorem+0xea>
 8014f82:	3c01      	subs	r4, #1
 8014f84:	e7eb      	b.n	8014f5e <quorem+0xe4>
 8014f86:	2000      	movs	r0, #0
 8014f88:	e7ee      	b.n	8014f68 <quorem+0xee>
 8014f8a:	0000      	movs	r0, r0
 8014f8c:	0000      	movs	r0, r0
	...

08014f90 <_dtoa_r>:
 8014f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f94:	ed2d 8b04 	vpush	{d8-d9}
 8014f98:	69c5      	ldr	r5, [r0, #28]
 8014f9a:	b093      	sub	sp, #76	; 0x4c
 8014f9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014fa0:	ec57 6b10 	vmov	r6, r7, d0
 8014fa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014fa8:	9107      	str	r1, [sp, #28]
 8014faa:	4604      	mov	r4, r0
 8014fac:	920a      	str	r2, [sp, #40]	; 0x28
 8014fae:	930d      	str	r3, [sp, #52]	; 0x34
 8014fb0:	b975      	cbnz	r5, 8014fd0 <_dtoa_r+0x40>
 8014fb2:	2010      	movs	r0, #16
 8014fb4:	f000 fe2a 	bl	8015c0c <malloc>
 8014fb8:	4602      	mov	r2, r0
 8014fba:	61e0      	str	r0, [r4, #28]
 8014fbc:	b920      	cbnz	r0, 8014fc8 <_dtoa_r+0x38>
 8014fbe:	4bae      	ldr	r3, [pc, #696]	; (8015278 <_dtoa_r+0x2e8>)
 8014fc0:	21ef      	movs	r1, #239	; 0xef
 8014fc2:	48ae      	ldr	r0, [pc, #696]	; (801527c <_dtoa_r+0x2ec>)
 8014fc4:	f001 fd0c 	bl	80169e0 <__assert_func>
 8014fc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014fcc:	6005      	str	r5, [r0, #0]
 8014fce:	60c5      	str	r5, [r0, #12]
 8014fd0:	69e3      	ldr	r3, [r4, #28]
 8014fd2:	6819      	ldr	r1, [r3, #0]
 8014fd4:	b151      	cbz	r1, 8014fec <_dtoa_r+0x5c>
 8014fd6:	685a      	ldr	r2, [r3, #4]
 8014fd8:	604a      	str	r2, [r1, #4]
 8014fda:	2301      	movs	r3, #1
 8014fdc:	4093      	lsls	r3, r2
 8014fde:	608b      	str	r3, [r1, #8]
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f000 ff07 	bl	8015df4 <_Bfree>
 8014fe6:	69e3      	ldr	r3, [r4, #28]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	601a      	str	r2, [r3, #0]
 8014fec:	1e3b      	subs	r3, r7, #0
 8014fee:	bfbb      	ittet	lt
 8014ff0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014ff4:	9303      	strlt	r3, [sp, #12]
 8014ff6:	2300      	movge	r3, #0
 8014ff8:	2201      	movlt	r2, #1
 8014ffa:	bfac      	ite	ge
 8014ffc:	f8c8 3000 	strge.w	r3, [r8]
 8015000:	f8c8 2000 	strlt.w	r2, [r8]
 8015004:	4b9e      	ldr	r3, [pc, #632]	; (8015280 <_dtoa_r+0x2f0>)
 8015006:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801500a:	ea33 0308 	bics.w	r3, r3, r8
 801500e:	d11b      	bne.n	8015048 <_dtoa_r+0xb8>
 8015010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015012:	f242 730f 	movw	r3, #9999	; 0x270f
 8015016:	6013      	str	r3, [r2, #0]
 8015018:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801501c:	4333      	orrs	r3, r6
 801501e:	f000 8593 	beq.w	8015b48 <_dtoa_r+0xbb8>
 8015022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015024:	b963      	cbnz	r3, 8015040 <_dtoa_r+0xb0>
 8015026:	4b97      	ldr	r3, [pc, #604]	; (8015284 <_dtoa_r+0x2f4>)
 8015028:	e027      	b.n	801507a <_dtoa_r+0xea>
 801502a:	4b97      	ldr	r3, [pc, #604]	; (8015288 <_dtoa_r+0x2f8>)
 801502c:	9300      	str	r3, [sp, #0]
 801502e:	3308      	adds	r3, #8
 8015030:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015032:	6013      	str	r3, [r2, #0]
 8015034:	9800      	ldr	r0, [sp, #0]
 8015036:	b013      	add	sp, #76	; 0x4c
 8015038:	ecbd 8b04 	vpop	{d8-d9}
 801503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015040:	4b90      	ldr	r3, [pc, #576]	; (8015284 <_dtoa_r+0x2f4>)
 8015042:	9300      	str	r3, [sp, #0]
 8015044:	3303      	adds	r3, #3
 8015046:	e7f3      	b.n	8015030 <_dtoa_r+0xa0>
 8015048:	ed9d 7b02 	vldr	d7, [sp, #8]
 801504c:	2200      	movs	r2, #0
 801504e:	ec51 0b17 	vmov	r0, r1, d7
 8015052:	eeb0 8a47 	vmov.f32	s16, s14
 8015056:	eef0 8a67 	vmov.f32	s17, s15
 801505a:	2300      	movs	r3, #0
 801505c:	f7eb fd1c 	bl	8000a98 <__aeabi_dcmpeq>
 8015060:	4681      	mov	r9, r0
 8015062:	b160      	cbz	r0, 801507e <_dtoa_r+0xee>
 8015064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015066:	2301      	movs	r3, #1
 8015068:	6013      	str	r3, [r2, #0]
 801506a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801506c:	2b00      	cmp	r3, #0
 801506e:	f000 8568 	beq.w	8015b42 <_dtoa_r+0xbb2>
 8015072:	4b86      	ldr	r3, [pc, #536]	; (801528c <_dtoa_r+0x2fc>)
 8015074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015076:	6013      	str	r3, [r2, #0]
 8015078:	3b01      	subs	r3, #1
 801507a:	9300      	str	r3, [sp, #0]
 801507c:	e7da      	b.n	8015034 <_dtoa_r+0xa4>
 801507e:	aa10      	add	r2, sp, #64	; 0x40
 8015080:	a911      	add	r1, sp, #68	; 0x44
 8015082:	4620      	mov	r0, r4
 8015084:	eeb0 0a48 	vmov.f32	s0, s16
 8015088:	eef0 0a68 	vmov.f32	s1, s17
 801508c:	f001 f994 	bl	80163b8 <__d2b>
 8015090:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015094:	4682      	mov	sl, r0
 8015096:	2d00      	cmp	r5, #0
 8015098:	d07f      	beq.n	801519a <_dtoa_r+0x20a>
 801509a:	ee18 3a90 	vmov	r3, s17
 801509e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80150a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80150a6:	ec51 0b18 	vmov	r0, r1, d8
 80150aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80150ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80150b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80150b6:	4619      	mov	r1, r3
 80150b8:	2200      	movs	r2, #0
 80150ba:	4b75      	ldr	r3, [pc, #468]	; (8015290 <_dtoa_r+0x300>)
 80150bc:	f7eb f8cc 	bl	8000258 <__aeabi_dsub>
 80150c0:	a367      	add	r3, pc, #412	; (adr r3, 8015260 <_dtoa_r+0x2d0>)
 80150c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c6:	f7eb fa7f 	bl	80005c8 <__aeabi_dmul>
 80150ca:	a367      	add	r3, pc, #412	; (adr r3, 8015268 <_dtoa_r+0x2d8>)
 80150cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d0:	f7eb f8c4 	bl	800025c <__adddf3>
 80150d4:	4606      	mov	r6, r0
 80150d6:	4628      	mov	r0, r5
 80150d8:	460f      	mov	r7, r1
 80150da:	f7eb fa0b 	bl	80004f4 <__aeabi_i2d>
 80150de:	a364      	add	r3, pc, #400	; (adr r3, 8015270 <_dtoa_r+0x2e0>)
 80150e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150e4:	f7eb fa70 	bl	80005c8 <__aeabi_dmul>
 80150e8:	4602      	mov	r2, r0
 80150ea:	460b      	mov	r3, r1
 80150ec:	4630      	mov	r0, r6
 80150ee:	4639      	mov	r1, r7
 80150f0:	f7eb f8b4 	bl	800025c <__adddf3>
 80150f4:	4606      	mov	r6, r0
 80150f6:	460f      	mov	r7, r1
 80150f8:	f7eb fd16 	bl	8000b28 <__aeabi_d2iz>
 80150fc:	2200      	movs	r2, #0
 80150fe:	4683      	mov	fp, r0
 8015100:	2300      	movs	r3, #0
 8015102:	4630      	mov	r0, r6
 8015104:	4639      	mov	r1, r7
 8015106:	f7eb fcd1 	bl	8000aac <__aeabi_dcmplt>
 801510a:	b148      	cbz	r0, 8015120 <_dtoa_r+0x190>
 801510c:	4658      	mov	r0, fp
 801510e:	f7eb f9f1 	bl	80004f4 <__aeabi_i2d>
 8015112:	4632      	mov	r2, r6
 8015114:	463b      	mov	r3, r7
 8015116:	f7eb fcbf 	bl	8000a98 <__aeabi_dcmpeq>
 801511a:	b908      	cbnz	r0, 8015120 <_dtoa_r+0x190>
 801511c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015120:	f1bb 0f16 	cmp.w	fp, #22
 8015124:	d857      	bhi.n	80151d6 <_dtoa_r+0x246>
 8015126:	4b5b      	ldr	r3, [pc, #364]	; (8015294 <_dtoa_r+0x304>)
 8015128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015130:	ec51 0b18 	vmov	r0, r1, d8
 8015134:	f7eb fcba 	bl	8000aac <__aeabi_dcmplt>
 8015138:	2800      	cmp	r0, #0
 801513a:	d04e      	beq.n	80151da <_dtoa_r+0x24a>
 801513c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015140:	2300      	movs	r3, #0
 8015142:	930c      	str	r3, [sp, #48]	; 0x30
 8015144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015146:	1b5b      	subs	r3, r3, r5
 8015148:	1e5a      	subs	r2, r3, #1
 801514a:	bf45      	ittet	mi
 801514c:	f1c3 0301 	rsbmi	r3, r3, #1
 8015150:	9305      	strmi	r3, [sp, #20]
 8015152:	2300      	movpl	r3, #0
 8015154:	2300      	movmi	r3, #0
 8015156:	9206      	str	r2, [sp, #24]
 8015158:	bf54      	ite	pl
 801515a:	9305      	strpl	r3, [sp, #20]
 801515c:	9306      	strmi	r3, [sp, #24]
 801515e:	f1bb 0f00 	cmp.w	fp, #0
 8015162:	db3c      	blt.n	80151de <_dtoa_r+0x24e>
 8015164:	9b06      	ldr	r3, [sp, #24]
 8015166:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801516a:	445b      	add	r3, fp
 801516c:	9306      	str	r3, [sp, #24]
 801516e:	2300      	movs	r3, #0
 8015170:	9308      	str	r3, [sp, #32]
 8015172:	9b07      	ldr	r3, [sp, #28]
 8015174:	2b09      	cmp	r3, #9
 8015176:	d868      	bhi.n	801524a <_dtoa_r+0x2ba>
 8015178:	2b05      	cmp	r3, #5
 801517a:	bfc4      	itt	gt
 801517c:	3b04      	subgt	r3, #4
 801517e:	9307      	strgt	r3, [sp, #28]
 8015180:	9b07      	ldr	r3, [sp, #28]
 8015182:	f1a3 0302 	sub.w	r3, r3, #2
 8015186:	bfcc      	ite	gt
 8015188:	2500      	movgt	r5, #0
 801518a:	2501      	movle	r5, #1
 801518c:	2b03      	cmp	r3, #3
 801518e:	f200 8085 	bhi.w	801529c <_dtoa_r+0x30c>
 8015192:	e8df f003 	tbb	[pc, r3]
 8015196:	3b2e      	.short	0x3b2e
 8015198:	5839      	.short	0x5839
 801519a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801519e:	441d      	add	r5, r3
 80151a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80151a4:	2b20      	cmp	r3, #32
 80151a6:	bfc1      	itttt	gt
 80151a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80151ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80151b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80151b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80151b8:	bfd6      	itet	le
 80151ba:	f1c3 0320 	rsble	r3, r3, #32
 80151be:	ea48 0003 	orrgt.w	r0, r8, r3
 80151c2:	fa06 f003 	lslle.w	r0, r6, r3
 80151c6:	f7eb f985 	bl	80004d4 <__aeabi_ui2d>
 80151ca:	2201      	movs	r2, #1
 80151cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80151d0:	3d01      	subs	r5, #1
 80151d2:	920e      	str	r2, [sp, #56]	; 0x38
 80151d4:	e76f      	b.n	80150b6 <_dtoa_r+0x126>
 80151d6:	2301      	movs	r3, #1
 80151d8:	e7b3      	b.n	8015142 <_dtoa_r+0x1b2>
 80151da:	900c      	str	r0, [sp, #48]	; 0x30
 80151dc:	e7b2      	b.n	8015144 <_dtoa_r+0x1b4>
 80151de:	9b05      	ldr	r3, [sp, #20]
 80151e0:	eba3 030b 	sub.w	r3, r3, fp
 80151e4:	9305      	str	r3, [sp, #20]
 80151e6:	f1cb 0300 	rsb	r3, fp, #0
 80151ea:	9308      	str	r3, [sp, #32]
 80151ec:	2300      	movs	r3, #0
 80151ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80151f0:	e7bf      	b.n	8015172 <_dtoa_r+0x1e2>
 80151f2:	2300      	movs	r3, #0
 80151f4:	9309      	str	r3, [sp, #36]	; 0x24
 80151f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	dc52      	bgt.n	80152a2 <_dtoa_r+0x312>
 80151fc:	2301      	movs	r3, #1
 80151fe:	9301      	str	r3, [sp, #4]
 8015200:	9304      	str	r3, [sp, #16]
 8015202:	461a      	mov	r2, r3
 8015204:	920a      	str	r2, [sp, #40]	; 0x28
 8015206:	e00b      	b.n	8015220 <_dtoa_r+0x290>
 8015208:	2301      	movs	r3, #1
 801520a:	e7f3      	b.n	80151f4 <_dtoa_r+0x264>
 801520c:	2300      	movs	r3, #0
 801520e:	9309      	str	r3, [sp, #36]	; 0x24
 8015210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015212:	445b      	add	r3, fp
 8015214:	9301      	str	r3, [sp, #4]
 8015216:	3301      	adds	r3, #1
 8015218:	2b01      	cmp	r3, #1
 801521a:	9304      	str	r3, [sp, #16]
 801521c:	bfb8      	it	lt
 801521e:	2301      	movlt	r3, #1
 8015220:	69e0      	ldr	r0, [r4, #28]
 8015222:	2100      	movs	r1, #0
 8015224:	2204      	movs	r2, #4
 8015226:	f102 0614 	add.w	r6, r2, #20
 801522a:	429e      	cmp	r6, r3
 801522c:	d93d      	bls.n	80152aa <_dtoa_r+0x31a>
 801522e:	6041      	str	r1, [r0, #4]
 8015230:	4620      	mov	r0, r4
 8015232:	f000 fd9f 	bl	8015d74 <_Balloc>
 8015236:	9000      	str	r0, [sp, #0]
 8015238:	2800      	cmp	r0, #0
 801523a:	d139      	bne.n	80152b0 <_dtoa_r+0x320>
 801523c:	4b16      	ldr	r3, [pc, #88]	; (8015298 <_dtoa_r+0x308>)
 801523e:	4602      	mov	r2, r0
 8015240:	f240 11af 	movw	r1, #431	; 0x1af
 8015244:	e6bd      	b.n	8014fc2 <_dtoa_r+0x32>
 8015246:	2301      	movs	r3, #1
 8015248:	e7e1      	b.n	801520e <_dtoa_r+0x27e>
 801524a:	2501      	movs	r5, #1
 801524c:	2300      	movs	r3, #0
 801524e:	9307      	str	r3, [sp, #28]
 8015250:	9509      	str	r5, [sp, #36]	; 0x24
 8015252:	f04f 33ff 	mov.w	r3, #4294967295
 8015256:	9301      	str	r3, [sp, #4]
 8015258:	9304      	str	r3, [sp, #16]
 801525a:	2200      	movs	r2, #0
 801525c:	2312      	movs	r3, #18
 801525e:	e7d1      	b.n	8015204 <_dtoa_r+0x274>
 8015260:	636f4361 	.word	0x636f4361
 8015264:	3fd287a7 	.word	0x3fd287a7
 8015268:	8b60c8b3 	.word	0x8b60c8b3
 801526c:	3fc68a28 	.word	0x3fc68a28
 8015270:	509f79fb 	.word	0x509f79fb
 8015274:	3fd34413 	.word	0x3fd34413
 8015278:	0802e105 	.word	0x0802e105
 801527c:	0802e11c 	.word	0x0802e11c
 8015280:	7ff00000 	.word	0x7ff00000
 8015284:	0802e101 	.word	0x0802e101
 8015288:	0802e0f8 	.word	0x0802e0f8
 801528c:	0802e0d5 	.word	0x0802e0d5
 8015290:	3ff80000 	.word	0x3ff80000
 8015294:	0802e208 	.word	0x0802e208
 8015298:	0802e174 	.word	0x0802e174
 801529c:	2301      	movs	r3, #1
 801529e:	9309      	str	r3, [sp, #36]	; 0x24
 80152a0:	e7d7      	b.n	8015252 <_dtoa_r+0x2c2>
 80152a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152a4:	9301      	str	r3, [sp, #4]
 80152a6:	9304      	str	r3, [sp, #16]
 80152a8:	e7ba      	b.n	8015220 <_dtoa_r+0x290>
 80152aa:	3101      	adds	r1, #1
 80152ac:	0052      	lsls	r2, r2, #1
 80152ae:	e7ba      	b.n	8015226 <_dtoa_r+0x296>
 80152b0:	69e3      	ldr	r3, [r4, #28]
 80152b2:	9a00      	ldr	r2, [sp, #0]
 80152b4:	601a      	str	r2, [r3, #0]
 80152b6:	9b04      	ldr	r3, [sp, #16]
 80152b8:	2b0e      	cmp	r3, #14
 80152ba:	f200 80a8 	bhi.w	801540e <_dtoa_r+0x47e>
 80152be:	2d00      	cmp	r5, #0
 80152c0:	f000 80a5 	beq.w	801540e <_dtoa_r+0x47e>
 80152c4:	f1bb 0f00 	cmp.w	fp, #0
 80152c8:	dd38      	ble.n	801533c <_dtoa_r+0x3ac>
 80152ca:	4bc0      	ldr	r3, [pc, #768]	; (80155cc <_dtoa_r+0x63c>)
 80152cc:	f00b 020f 	and.w	r2, fp, #15
 80152d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80152d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80152d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80152dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80152e0:	d019      	beq.n	8015316 <_dtoa_r+0x386>
 80152e2:	4bbb      	ldr	r3, [pc, #748]	; (80155d0 <_dtoa_r+0x640>)
 80152e4:	ec51 0b18 	vmov	r0, r1, d8
 80152e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80152ec:	f7eb fa96 	bl	800081c <__aeabi_ddiv>
 80152f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152f4:	f008 080f 	and.w	r8, r8, #15
 80152f8:	2503      	movs	r5, #3
 80152fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80155d0 <_dtoa_r+0x640>
 80152fe:	f1b8 0f00 	cmp.w	r8, #0
 8015302:	d10a      	bne.n	801531a <_dtoa_r+0x38a>
 8015304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015308:	4632      	mov	r2, r6
 801530a:	463b      	mov	r3, r7
 801530c:	f7eb fa86 	bl	800081c <__aeabi_ddiv>
 8015310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015314:	e02b      	b.n	801536e <_dtoa_r+0x3de>
 8015316:	2502      	movs	r5, #2
 8015318:	e7ef      	b.n	80152fa <_dtoa_r+0x36a>
 801531a:	f018 0f01 	tst.w	r8, #1
 801531e:	d008      	beq.n	8015332 <_dtoa_r+0x3a2>
 8015320:	4630      	mov	r0, r6
 8015322:	4639      	mov	r1, r7
 8015324:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015328:	f7eb f94e 	bl	80005c8 <__aeabi_dmul>
 801532c:	3501      	adds	r5, #1
 801532e:	4606      	mov	r6, r0
 8015330:	460f      	mov	r7, r1
 8015332:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015336:	f109 0908 	add.w	r9, r9, #8
 801533a:	e7e0      	b.n	80152fe <_dtoa_r+0x36e>
 801533c:	f000 809f 	beq.w	801547e <_dtoa_r+0x4ee>
 8015340:	f1cb 0600 	rsb	r6, fp, #0
 8015344:	4ba1      	ldr	r3, [pc, #644]	; (80155cc <_dtoa_r+0x63c>)
 8015346:	4fa2      	ldr	r7, [pc, #648]	; (80155d0 <_dtoa_r+0x640>)
 8015348:	f006 020f 	and.w	r2, r6, #15
 801534c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015354:	ec51 0b18 	vmov	r0, r1, d8
 8015358:	f7eb f936 	bl	80005c8 <__aeabi_dmul>
 801535c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015360:	1136      	asrs	r6, r6, #4
 8015362:	2300      	movs	r3, #0
 8015364:	2502      	movs	r5, #2
 8015366:	2e00      	cmp	r6, #0
 8015368:	d17e      	bne.n	8015468 <_dtoa_r+0x4d8>
 801536a:	2b00      	cmp	r3, #0
 801536c:	d1d0      	bne.n	8015310 <_dtoa_r+0x380>
 801536e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015370:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015374:	2b00      	cmp	r3, #0
 8015376:	f000 8084 	beq.w	8015482 <_dtoa_r+0x4f2>
 801537a:	4b96      	ldr	r3, [pc, #600]	; (80155d4 <_dtoa_r+0x644>)
 801537c:	2200      	movs	r2, #0
 801537e:	4640      	mov	r0, r8
 8015380:	4649      	mov	r1, r9
 8015382:	f7eb fb93 	bl	8000aac <__aeabi_dcmplt>
 8015386:	2800      	cmp	r0, #0
 8015388:	d07b      	beq.n	8015482 <_dtoa_r+0x4f2>
 801538a:	9b04      	ldr	r3, [sp, #16]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d078      	beq.n	8015482 <_dtoa_r+0x4f2>
 8015390:	9b01      	ldr	r3, [sp, #4]
 8015392:	2b00      	cmp	r3, #0
 8015394:	dd39      	ble.n	801540a <_dtoa_r+0x47a>
 8015396:	4b90      	ldr	r3, [pc, #576]	; (80155d8 <_dtoa_r+0x648>)
 8015398:	2200      	movs	r2, #0
 801539a:	4640      	mov	r0, r8
 801539c:	4649      	mov	r1, r9
 801539e:	f7eb f913 	bl	80005c8 <__aeabi_dmul>
 80153a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80153a6:	9e01      	ldr	r6, [sp, #4]
 80153a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80153ac:	3501      	adds	r5, #1
 80153ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80153b2:	4628      	mov	r0, r5
 80153b4:	f7eb f89e 	bl	80004f4 <__aeabi_i2d>
 80153b8:	4642      	mov	r2, r8
 80153ba:	464b      	mov	r3, r9
 80153bc:	f7eb f904 	bl	80005c8 <__aeabi_dmul>
 80153c0:	4b86      	ldr	r3, [pc, #536]	; (80155dc <_dtoa_r+0x64c>)
 80153c2:	2200      	movs	r2, #0
 80153c4:	f7ea ff4a 	bl	800025c <__adddf3>
 80153c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80153cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80153d0:	9303      	str	r3, [sp, #12]
 80153d2:	2e00      	cmp	r6, #0
 80153d4:	d158      	bne.n	8015488 <_dtoa_r+0x4f8>
 80153d6:	4b82      	ldr	r3, [pc, #520]	; (80155e0 <_dtoa_r+0x650>)
 80153d8:	2200      	movs	r2, #0
 80153da:	4640      	mov	r0, r8
 80153dc:	4649      	mov	r1, r9
 80153de:	f7ea ff3b 	bl	8000258 <__aeabi_dsub>
 80153e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153e6:	4680      	mov	r8, r0
 80153e8:	4689      	mov	r9, r1
 80153ea:	f7eb fb7d 	bl	8000ae8 <__aeabi_dcmpgt>
 80153ee:	2800      	cmp	r0, #0
 80153f0:	f040 8296 	bne.w	8015920 <_dtoa_r+0x990>
 80153f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80153f8:	4640      	mov	r0, r8
 80153fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153fe:	4649      	mov	r1, r9
 8015400:	f7eb fb54 	bl	8000aac <__aeabi_dcmplt>
 8015404:	2800      	cmp	r0, #0
 8015406:	f040 8289 	bne.w	801591c <_dtoa_r+0x98c>
 801540a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801540e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015410:	2b00      	cmp	r3, #0
 8015412:	f2c0 814e 	blt.w	80156b2 <_dtoa_r+0x722>
 8015416:	f1bb 0f0e 	cmp.w	fp, #14
 801541a:	f300 814a 	bgt.w	80156b2 <_dtoa_r+0x722>
 801541e:	4b6b      	ldr	r3, [pc, #428]	; (80155cc <_dtoa_r+0x63c>)
 8015420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015424:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801542a:	2b00      	cmp	r3, #0
 801542c:	f280 80dc 	bge.w	80155e8 <_dtoa_r+0x658>
 8015430:	9b04      	ldr	r3, [sp, #16]
 8015432:	2b00      	cmp	r3, #0
 8015434:	f300 80d8 	bgt.w	80155e8 <_dtoa_r+0x658>
 8015438:	f040 826f 	bne.w	801591a <_dtoa_r+0x98a>
 801543c:	4b68      	ldr	r3, [pc, #416]	; (80155e0 <_dtoa_r+0x650>)
 801543e:	2200      	movs	r2, #0
 8015440:	4640      	mov	r0, r8
 8015442:	4649      	mov	r1, r9
 8015444:	f7eb f8c0 	bl	80005c8 <__aeabi_dmul>
 8015448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801544c:	f7eb fb42 	bl	8000ad4 <__aeabi_dcmpge>
 8015450:	9e04      	ldr	r6, [sp, #16]
 8015452:	4637      	mov	r7, r6
 8015454:	2800      	cmp	r0, #0
 8015456:	f040 8245 	bne.w	80158e4 <_dtoa_r+0x954>
 801545a:	9d00      	ldr	r5, [sp, #0]
 801545c:	2331      	movs	r3, #49	; 0x31
 801545e:	f805 3b01 	strb.w	r3, [r5], #1
 8015462:	f10b 0b01 	add.w	fp, fp, #1
 8015466:	e241      	b.n	80158ec <_dtoa_r+0x95c>
 8015468:	07f2      	lsls	r2, r6, #31
 801546a:	d505      	bpl.n	8015478 <_dtoa_r+0x4e8>
 801546c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015470:	f7eb f8aa 	bl	80005c8 <__aeabi_dmul>
 8015474:	3501      	adds	r5, #1
 8015476:	2301      	movs	r3, #1
 8015478:	1076      	asrs	r6, r6, #1
 801547a:	3708      	adds	r7, #8
 801547c:	e773      	b.n	8015366 <_dtoa_r+0x3d6>
 801547e:	2502      	movs	r5, #2
 8015480:	e775      	b.n	801536e <_dtoa_r+0x3de>
 8015482:	9e04      	ldr	r6, [sp, #16]
 8015484:	465f      	mov	r7, fp
 8015486:	e792      	b.n	80153ae <_dtoa_r+0x41e>
 8015488:	9900      	ldr	r1, [sp, #0]
 801548a:	4b50      	ldr	r3, [pc, #320]	; (80155cc <_dtoa_r+0x63c>)
 801548c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015490:	4431      	add	r1, r6
 8015492:	9102      	str	r1, [sp, #8]
 8015494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015496:	eeb0 9a47 	vmov.f32	s18, s14
 801549a:	eef0 9a67 	vmov.f32	s19, s15
 801549e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80154a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80154a6:	2900      	cmp	r1, #0
 80154a8:	d044      	beq.n	8015534 <_dtoa_r+0x5a4>
 80154aa:	494e      	ldr	r1, [pc, #312]	; (80155e4 <_dtoa_r+0x654>)
 80154ac:	2000      	movs	r0, #0
 80154ae:	f7eb f9b5 	bl	800081c <__aeabi_ddiv>
 80154b2:	ec53 2b19 	vmov	r2, r3, d9
 80154b6:	f7ea fecf 	bl	8000258 <__aeabi_dsub>
 80154ba:	9d00      	ldr	r5, [sp, #0]
 80154bc:	ec41 0b19 	vmov	d9, r0, r1
 80154c0:	4649      	mov	r1, r9
 80154c2:	4640      	mov	r0, r8
 80154c4:	f7eb fb30 	bl	8000b28 <__aeabi_d2iz>
 80154c8:	4606      	mov	r6, r0
 80154ca:	f7eb f813 	bl	80004f4 <__aeabi_i2d>
 80154ce:	4602      	mov	r2, r0
 80154d0:	460b      	mov	r3, r1
 80154d2:	4640      	mov	r0, r8
 80154d4:	4649      	mov	r1, r9
 80154d6:	f7ea febf 	bl	8000258 <__aeabi_dsub>
 80154da:	3630      	adds	r6, #48	; 0x30
 80154dc:	f805 6b01 	strb.w	r6, [r5], #1
 80154e0:	ec53 2b19 	vmov	r2, r3, d9
 80154e4:	4680      	mov	r8, r0
 80154e6:	4689      	mov	r9, r1
 80154e8:	f7eb fae0 	bl	8000aac <__aeabi_dcmplt>
 80154ec:	2800      	cmp	r0, #0
 80154ee:	d164      	bne.n	80155ba <_dtoa_r+0x62a>
 80154f0:	4642      	mov	r2, r8
 80154f2:	464b      	mov	r3, r9
 80154f4:	4937      	ldr	r1, [pc, #220]	; (80155d4 <_dtoa_r+0x644>)
 80154f6:	2000      	movs	r0, #0
 80154f8:	f7ea feae 	bl	8000258 <__aeabi_dsub>
 80154fc:	ec53 2b19 	vmov	r2, r3, d9
 8015500:	f7eb fad4 	bl	8000aac <__aeabi_dcmplt>
 8015504:	2800      	cmp	r0, #0
 8015506:	f040 80b6 	bne.w	8015676 <_dtoa_r+0x6e6>
 801550a:	9b02      	ldr	r3, [sp, #8]
 801550c:	429d      	cmp	r5, r3
 801550e:	f43f af7c 	beq.w	801540a <_dtoa_r+0x47a>
 8015512:	4b31      	ldr	r3, [pc, #196]	; (80155d8 <_dtoa_r+0x648>)
 8015514:	ec51 0b19 	vmov	r0, r1, d9
 8015518:	2200      	movs	r2, #0
 801551a:	f7eb f855 	bl	80005c8 <__aeabi_dmul>
 801551e:	4b2e      	ldr	r3, [pc, #184]	; (80155d8 <_dtoa_r+0x648>)
 8015520:	ec41 0b19 	vmov	d9, r0, r1
 8015524:	2200      	movs	r2, #0
 8015526:	4640      	mov	r0, r8
 8015528:	4649      	mov	r1, r9
 801552a:	f7eb f84d 	bl	80005c8 <__aeabi_dmul>
 801552e:	4680      	mov	r8, r0
 8015530:	4689      	mov	r9, r1
 8015532:	e7c5      	b.n	80154c0 <_dtoa_r+0x530>
 8015534:	ec51 0b17 	vmov	r0, r1, d7
 8015538:	f7eb f846 	bl	80005c8 <__aeabi_dmul>
 801553c:	9b02      	ldr	r3, [sp, #8]
 801553e:	9d00      	ldr	r5, [sp, #0]
 8015540:	930f      	str	r3, [sp, #60]	; 0x3c
 8015542:	ec41 0b19 	vmov	d9, r0, r1
 8015546:	4649      	mov	r1, r9
 8015548:	4640      	mov	r0, r8
 801554a:	f7eb faed 	bl	8000b28 <__aeabi_d2iz>
 801554e:	4606      	mov	r6, r0
 8015550:	f7ea ffd0 	bl	80004f4 <__aeabi_i2d>
 8015554:	3630      	adds	r6, #48	; 0x30
 8015556:	4602      	mov	r2, r0
 8015558:	460b      	mov	r3, r1
 801555a:	4640      	mov	r0, r8
 801555c:	4649      	mov	r1, r9
 801555e:	f7ea fe7b 	bl	8000258 <__aeabi_dsub>
 8015562:	f805 6b01 	strb.w	r6, [r5], #1
 8015566:	9b02      	ldr	r3, [sp, #8]
 8015568:	429d      	cmp	r5, r3
 801556a:	4680      	mov	r8, r0
 801556c:	4689      	mov	r9, r1
 801556e:	f04f 0200 	mov.w	r2, #0
 8015572:	d124      	bne.n	80155be <_dtoa_r+0x62e>
 8015574:	4b1b      	ldr	r3, [pc, #108]	; (80155e4 <_dtoa_r+0x654>)
 8015576:	ec51 0b19 	vmov	r0, r1, d9
 801557a:	f7ea fe6f 	bl	800025c <__adddf3>
 801557e:	4602      	mov	r2, r0
 8015580:	460b      	mov	r3, r1
 8015582:	4640      	mov	r0, r8
 8015584:	4649      	mov	r1, r9
 8015586:	f7eb faaf 	bl	8000ae8 <__aeabi_dcmpgt>
 801558a:	2800      	cmp	r0, #0
 801558c:	d173      	bne.n	8015676 <_dtoa_r+0x6e6>
 801558e:	ec53 2b19 	vmov	r2, r3, d9
 8015592:	4914      	ldr	r1, [pc, #80]	; (80155e4 <_dtoa_r+0x654>)
 8015594:	2000      	movs	r0, #0
 8015596:	f7ea fe5f 	bl	8000258 <__aeabi_dsub>
 801559a:	4602      	mov	r2, r0
 801559c:	460b      	mov	r3, r1
 801559e:	4640      	mov	r0, r8
 80155a0:	4649      	mov	r1, r9
 80155a2:	f7eb fa83 	bl	8000aac <__aeabi_dcmplt>
 80155a6:	2800      	cmp	r0, #0
 80155a8:	f43f af2f 	beq.w	801540a <_dtoa_r+0x47a>
 80155ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80155ae:	1e6b      	subs	r3, r5, #1
 80155b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80155b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80155b6:	2b30      	cmp	r3, #48	; 0x30
 80155b8:	d0f8      	beq.n	80155ac <_dtoa_r+0x61c>
 80155ba:	46bb      	mov	fp, r7
 80155bc:	e04a      	b.n	8015654 <_dtoa_r+0x6c4>
 80155be:	4b06      	ldr	r3, [pc, #24]	; (80155d8 <_dtoa_r+0x648>)
 80155c0:	f7eb f802 	bl	80005c8 <__aeabi_dmul>
 80155c4:	4680      	mov	r8, r0
 80155c6:	4689      	mov	r9, r1
 80155c8:	e7bd      	b.n	8015546 <_dtoa_r+0x5b6>
 80155ca:	bf00      	nop
 80155cc:	0802e208 	.word	0x0802e208
 80155d0:	0802e1e0 	.word	0x0802e1e0
 80155d4:	3ff00000 	.word	0x3ff00000
 80155d8:	40240000 	.word	0x40240000
 80155dc:	401c0000 	.word	0x401c0000
 80155e0:	40140000 	.word	0x40140000
 80155e4:	3fe00000 	.word	0x3fe00000
 80155e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80155ec:	9d00      	ldr	r5, [sp, #0]
 80155ee:	4642      	mov	r2, r8
 80155f0:	464b      	mov	r3, r9
 80155f2:	4630      	mov	r0, r6
 80155f4:	4639      	mov	r1, r7
 80155f6:	f7eb f911 	bl	800081c <__aeabi_ddiv>
 80155fa:	f7eb fa95 	bl	8000b28 <__aeabi_d2iz>
 80155fe:	9001      	str	r0, [sp, #4]
 8015600:	f7ea ff78 	bl	80004f4 <__aeabi_i2d>
 8015604:	4642      	mov	r2, r8
 8015606:	464b      	mov	r3, r9
 8015608:	f7ea ffde 	bl	80005c8 <__aeabi_dmul>
 801560c:	4602      	mov	r2, r0
 801560e:	460b      	mov	r3, r1
 8015610:	4630      	mov	r0, r6
 8015612:	4639      	mov	r1, r7
 8015614:	f7ea fe20 	bl	8000258 <__aeabi_dsub>
 8015618:	9e01      	ldr	r6, [sp, #4]
 801561a:	9f04      	ldr	r7, [sp, #16]
 801561c:	3630      	adds	r6, #48	; 0x30
 801561e:	f805 6b01 	strb.w	r6, [r5], #1
 8015622:	9e00      	ldr	r6, [sp, #0]
 8015624:	1bae      	subs	r6, r5, r6
 8015626:	42b7      	cmp	r7, r6
 8015628:	4602      	mov	r2, r0
 801562a:	460b      	mov	r3, r1
 801562c:	d134      	bne.n	8015698 <_dtoa_r+0x708>
 801562e:	f7ea fe15 	bl	800025c <__adddf3>
 8015632:	4642      	mov	r2, r8
 8015634:	464b      	mov	r3, r9
 8015636:	4606      	mov	r6, r0
 8015638:	460f      	mov	r7, r1
 801563a:	f7eb fa55 	bl	8000ae8 <__aeabi_dcmpgt>
 801563e:	b9c8      	cbnz	r0, 8015674 <_dtoa_r+0x6e4>
 8015640:	4642      	mov	r2, r8
 8015642:	464b      	mov	r3, r9
 8015644:	4630      	mov	r0, r6
 8015646:	4639      	mov	r1, r7
 8015648:	f7eb fa26 	bl	8000a98 <__aeabi_dcmpeq>
 801564c:	b110      	cbz	r0, 8015654 <_dtoa_r+0x6c4>
 801564e:	9b01      	ldr	r3, [sp, #4]
 8015650:	07db      	lsls	r3, r3, #31
 8015652:	d40f      	bmi.n	8015674 <_dtoa_r+0x6e4>
 8015654:	4651      	mov	r1, sl
 8015656:	4620      	mov	r0, r4
 8015658:	f000 fbcc 	bl	8015df4 <_Bfree>
 801565c:	2300      	movs	r3, #0
 801565e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015660:	702b      	strb	r3, [r5, #0]
 8015662:	f10b 0301 	add.w	r3, fp, #1
 8015666:	6013      	str	r3, [r2, #0]
 8015668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801566a:	2b00      	cmp	r3, #0
 801566c:	f43f ace2 	beq.w	8015034 <_dtoa_r+0xa4>
 8015670:	601d      	str	r5, [r3, #0]
 8015672:	e4df      	b.n	8015034 <_dtoa_r+0xa4>
 8015674:	465f      	mov	r7, fp
 8015676:	462b      	mov	r3, r5
 8015678:	461d      	mov	r5, r3
 801567a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801567e:	2a39      	cmp	r2, #57	; 0x39
 8015680:	d106      	bne.n	8015690 <_dtoa_r+0x700>
 8015682:	9a00      	ldr	r2, [sp, #0]
 8015684:	429a      	cmp	r2, r3
 8015686:	d1f7      	bne.n	8015678 <_dtoa_r+0x6e8>
 8015688:	9900      	ldr	r1, [sp, #0]
 801568a:	2230      	movs	r2, #48	; 0x30
 801568c:	3701      	adds	r7, #1
 801568e:	700a      	strb	r2, [r1, #0]
 8015690:	781a      	ldrb	r2, [r3, #0]
 8015692:	3201      	adds	r2, #1
 8015694:	701a      	strb	r2, [r3, #0]
 8015696:	e790      	b.n	80155ba <_dtoa_r+0x62a>
 8015698:	4ba3      	ldr	r3, [pc, #652]	; (8015928 <_dtoa_r+0x998>)
 801569a:	2200      	movs	r2, #0
 801569c:	f7ea ff94 	bl	80005c8 <__aeabi_dmul>
 80156a0:	2200      	movs	r2, #0
 80156a2:	2300      	movs	r3, #0
 80156a4:	4606      	mov	r6, r0
 80156a6:	460f      	mov	r7, r1
 80156a8:	f7eb f9f6 	bl	8000a98 <__aeabi_dcmpeq>
 80156ac:	2800      	cmp	r0, #0
 80156ae:	d09e      	beq.n	80155ee <_dtoa_r+0x65e>
 80156b0:	e7d0      	b.n	8015654 <_dtoa_r+0x6c4>
 80156b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156b4:	2a00      	cmp	r2, #0
 80156b6:	f000 80ca 	beq.w	801584e <_dtoa_r+0x8be>
 80156ba:	9a07      	ldr	r2, [sp, #28]
 80156bc:	2a01      	cmp	r2, #1
 80156be:	f300 80ad 	bgt.w	801581c <_dtoa_r+0x88c>
 80156c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80156c4:	2a00      	cmp	r2, #0
 80156c6:	f000 80a5 	beq.w	8015814 <_dtoa_r+0x884>
 80156ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80156ce:	9e08      	ldr	r6, [sp, #32]
 80156d0:	9d05      	ldr	r5, [sp, #20]
 80156d2:	9a05      	ldr	r2, [sp, #20]
 80156d4:	441a      	add	r2, r3
 80156d6:	9205      	str	r2, [sp, #20]
 80156d8:	9a06      	ldr	r2, [sp, #24]
 80156da:	2101      	movs	r1, #1
 80156dc:	441a      	add	r2, r3
 80156de:	4620      	mov	r0, r4
 80156e0:	9206      	str	r2, [sp, #24]
 80156e2:	f000 fc3d 	bl	8015f60 <__i2b>
 80156e6:	4607      	mov	r7, r0
 80156e8:	b165      	cbz	r5, 8015704 <_dtoa_r+0x774>
 80156ea:	9b06      	ldr	r3, [sp, #24]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	dd09      	ble.n	8015704 <_dtoa_r+0x774>
 80156f0:	42ab      	cmp	r3, r5
 80156f2:	9a05      	ldr	r2, [sp, #20]
 80156f4:	bfa8      	it	ge
 80156f6:	462b      	movge	r3, r5
 80156f8:	1ad2      	subs	r2, r2, r3
 80156fa:	9205      	str	r2, [sp, #20]
 80156fc:	9a06      	ldr	r2, [sp, #24]
 80156fe:	1aed      	subs	r5, r5, r3
 8015700:	1ad3      	subs	r3, r2, r3
 8015702:	9306      	str	r3, [sp, #24]
 8015704:	9b08      	ldr	r3, [sp, #32]
 8015706:	b1f3      	cbz	r3, 8015746 <_dtoa_r+0x7b6>
 8015708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801570a:	2b00      	cmp	r3, #0
 801570c:	f000 80a3 	beq.w	8015856 <_dtoa_r+0x8c6>
 8015710:	2e00      	cmp	r6, #0
 8015712:	dd10      	ble.n	8015736 <_dtoa_r+0x7a6>
 8015714:	4639      	mov	r1, r7
 8015716:	4632      	mov	r2, r6
 8015718:	4620      	mov	r0, r4
 801571a:	f000 fce1 	bl	80160e0 <__pow5mult>
 801571e:	4652      	mov	r2, sl
 8015720:	4601      	mov	r1, r0
 8015722:	4607      	mov	r7, r0
 8015724:	4620      	mov	r0, r4
 8015726:	f000 fc31 	bl	8015f8c <__multiply>
 801572a:	4651      	mov	r1, sl
 801572c:	4680      	mov	r8, r0
 801572e:	4620      	mov	r0, r4
 8015730:	f000 fb60 	bl	8015df4 <_Bfree>
 8015734:	46c2      	mov	sl, r8
 8015736:	9b08      	ldr	r3, [sp, #32]
 8015738:	1b9a      	subs	r2, r3, r6
 801573a:	d004      	beq.n	8015746 <_dtoa_r+0x7b6>
 801573c:	4651      	mov	r1, sl
 801573e:	4620      	mov	r0, r4
 8015740:	f000 fcce 	bl	80160e0 <__pow5mult>
 8015744:	4682      	mov	sl, r0
 8015746:	2101      	movs	r1, #1
 8015748:	4620      	mov	r0, r4
 801574a:	f000 fc09 	bl	8015f60 <__i2b>
 801574e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015750:	2b00      	cmp	r3, #0
 8015752:	4606      	mov	r6, r0
 8015754:	f340 8081 	ble.w	801585a <_dtoa_r+0x8ca>
 8015758:	461a      	mov	r2, r3
 801575a:	4601      	mov	r1, r0
 801575c:	4620      	mov	r0, r4
 801575e:	f000 fcbf 	bl	80160e0 <__pow5mult>
 8015762:	9b07      	ldr	r3, [sp, #28]
 8015764:	2b01      	cmp	r3, #1
 8015766:	4606      	mov	r6, r0
 8015768:	dd7a      	ble.n	8015860 <_dtoa_r+0x8d0>
 801576a:	f04f 0800 	mov.w	r8, #0
 801576e:	6933      	ldr	r3, [r6, #16]
 8015770:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015774:	6918      	ldr	r0, [r3, #16]
 8015776:	f000 fba5 	bl	8015ec4 <__hi0bits>
 801577a:	f1c0 0020 	rsb	r0, r0, #32
 801577e:	9b06      	ldr	r3, [sp, #24]
 8015780:	4418      	add	r0, r3
 8015782:	f010 001f 	ands.w	r0, r0, #31
 8015786:	f000 8094 	beq.w	80158b2 <_dtoa_r+0x922>
 801578a:	f1c0 0320 	rsb	r3, r0, #32
 801578e:	2b04      	cmp	r3, #4
 8015790:	f340 8085 	ble.w	801589e <_dtoa_r+0x90e>
 8015794:	9b05      	ldr	r3, [sp, #20]
 8015796:	f1c0 001c 	rsb	r0, r0, #28
 801579a:	4403      	add	r3, r0
 801579c:	9305      	str	r3, [sp, #20]
 801579e:	9b06      	ldr	r3, [sp, #24]
 80157a0:	4403      	add	r3, r0
 80157a2:	4405      	add	r5, r0
 80157a4:	9306      	str	r3, [sp, #24]
 80157a6:	9b05      	ldr	r3, [sp, #20]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	dd05      	ble.n	80157b8 <_dtoa_r+0x828>
 80157ac:	4651      	mov	r1, sl
 80157ae:	461a      	mov	r2, r3
 80157b0:	4620      	mov	r0, r4
 80157b2:	f000 fcef 	bl	8016194 <__lshift>
 80157b6:	4682      	mov	sl, r0
 80157b8:	9b06      	ldr	r3, [sp, #24]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	dd05      	ble.n	80157ca <_dtoa_r+0x83a>
 80157be:	4631      	mov	r1, r6
 80157c0:	461a      	mov	r2, r3
 80157c2:	4620      	mov	r0, r4
 80157c4:	f000 fce6 	bl	8016194 <__lshift>
 80157c8:	4606      	mov	r6, r0
 80157ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d072      	beq.n	80158b6 <_dtoa_r+0x926>
 80157d0:	4631      	mov	r1, r6
 80157d2:	4650      	mov	r0, sl
 80157d4:	f000 fd4a 	bl	801626c <__mcmp>
 80157d8:	2800      	cmp	r0, #0
 80157da:	da6c      	bge.n	80158b6 <_dtoa_r+0x926>
 80157dc:	2300      	movs	r3, #0
 80157de:	4651      	mov	r1, sl
 80157e0:	220a      	movs	r2, #10
 80157e2:	4620      	mov	r0, r4
 80157e4:	f000 fb28 	bl	8015e38 <__multadd>
 80157e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80157ee:	4682      	mov	sl, r0
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	f000 81b0 	beq.w	8015b56 <_dtoa_r+0xbc6>
 80157f6:	2300      	movs	r3, #0
 80157f8:	4639      	mov	r1, r7
 80157fa:	220a      	movs	r2, #10
 80157fc:	4620      	mov	r0, r4
 80157fe:	f000 fb1b 	bl	8015e38 <__multadd>
 8015802:	9b01      	ldr	r3, [sp, #4]
 8015804:	2b00      	cmp	r3, #0
 8015806:	4607      	mov	r7, r0
 8015808:	f300 8096 	bgt.w	8015938 <_dtoa_r+0x9a8>
 801580c:	9b07      	ldr	r3, [sp, #28]
 801580e:	2b02      	cmp	r3, #2
 8015810:	dc59      	bgt.n	80158c6 <_dtoa_r+0x936>
 8015812:	e091      	b.n	8015938 <_dtoa_r+0x9a8>
 8015814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801581a:	e758      	b.n	80156ce <_dtoa_r+0x73e>
 801581c:	9b04      	ldr	r3, [sp, #16]
 801581e:	1e5e      	subs	r6, r3, #1
 8015820:	9b08      	ldr	r3, [sp, #32]
 8015822:	42b3      	cmp	r3, r6
 8015824:	bfbf      	itttt	lt
 8015826:	9b08      	ldrlt	r3, [sp, #32]
 8015828:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801582a:	9608      	strlt	r6, [sp, #32]
 801582c:	1af3      	sublt	r3, r6, r3
 801582e:	bfb4      	ite	lt
 8015830:	18d2      	addlt	r2, r2, r3
 8015832:	1b9e      	subge	r6, r3, r6
 8015834:	9b04      	ldr	r3, [sp, #16]
 8015836:	bfbc      	itt	lt
 8015838:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801583a:	2600      	movlt	r6, #0
 801583c:	2b00      	cmp	r3, #0
 801583e:	bfb7      	itett	lt
 8015840:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015844:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015848:	1a9d      	sublt	r5, r3, r2
 801584a:	2300      	movlt	r3, #0
 801584c:	e741      	b.n	80156d2 <_dtoa_r+0x742>
 801584e:	9e08      	ldr	r6, [sp, #32]
 8015850:	9d05      	ldr	r5, [sp, #20]
 8015852:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015854:	e748      	b.n	80156e8 <_dtoa_r+0x758>
 8015856:	9a08      	ldr	r2, [sp, #32]
 8015858:	e770      	b.n	801573c <_dtoa_r+0x7ac>
 801585a:	9b07      	ldr	r3, [sp, #28]
 801585c:	2b01      	cmp	r3, #1
 801585e:	dc19      	bgt.n	8015894 <_dtoa_r+0x904>
 8015860:	9b02      	ldr	r3, [sp, #8]
 8015862:	b9bb      	cbnz	r3, 8015894 <_dtoa_r+0x904>
 8015864:	9b03      	ldr	r3, [sp, #12]
 8015866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801586a:	b99b      	cbnz	r3, 8015894 <_dtoa_r+0x904>
 801586c:	9b03      	ldr	r3, [sp, #12]
 801586e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015872:	0d1b      	lsrs	r3, r3, #20
 8015874:	051b      	lsls	r3, r3, #20
 8015876:	b183      	cbz	r3, 801589a <_dtoa_r+0x90a>
 8015878:	9b05      	ldr	r3, [sp, #20]
 801587a:	3301      	adds	r3, #1
 801587c:	9305      	str	r3, [sp, #20]
 801587e:	9b06      	ldr	r3, [sp, #24]
 8015880:	3301      	adds	r3, #1
 8015882:	9306      	str	r3, [sp, #24]
 8015884:	f04f 0801 	mov.w	r8, #1
 8015888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801588a:	2b00      	cmp	r3, #0
 801588c:	f47f af6f 	bne.w	801576e <_dtoa_r+0x7de>
 8015890:	2001      	movs	r0, #1
 8015892:	e774      	b.n	801577e <_dtoa_r+0x7ee>
 8015894:	f04f 0800 	mov.w	r8, #0
 8015898:	e7f6      	b.n	8015888 <_dtoa_r+0x8f8>
 801589a:	4698      	mov	r8, r3
 801589c:	e7f4      	b.n	8015888 <_dtoa_r+0x8f8>
 801589e:	d082      	beq.n	80157a6 <_dtoa_r+0x816>
 80158a0:	9a05      	ldr	r2, [sp, #20]
 80158a2:	331c      	adds	r3, #28
 80158a4:	441a      	add	r2, r3
 80158a6:	9205      	str	r2, [sp, #20]
 80158a8:	9a06      	ldr	r2, [sp, #24]
 80158aa:	441a      	add	r2, r3
 80158ac:	441d      	add	r5, r3
 80158ae:	9206      	str	r2, [sp, #24]
 80158b0:	e779      	b.n	80157a6 <_dtoa_r+0x816>
 80158b2:	4603      	mov	r3, r0
 80158b4:	e7f4      	b.n	80158a0 <_dtoa_r+0x910>
 80158b6:	9b04      	ldr	r3, [sp, #16]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	dc37      	bgt.n	801592c <_dtoa_r+0x99c>
 80158bc:	9b07      	ldr	r3, [sp, #28]
 80158be:	2b02      	cmp	r3, #2
 80158c0:	dd34      	ble.n	801592c <_dtoa_r+0x99c>
 80158c2:	9b04      	ldr	r3, [sp, #16]
 80158c4:	9301      	str	r3, [sp, #4]
 80158c6:	9b01      	ldr	r3, [sp, #4]
 80158c8:	b963      	cbnz	r3, 80158e4 <_dtoa_r+0x954>
 80158ca:	4631      	mov	r1, r6
 80158cc:	2205      	movs	r2, #5
 80158ce:	4620      	mov	r0, r4
 80158d0:	f000 fab2 	bl	8015e38 <__multadd>
 80158d4:	4601      	mov	r1, r0
 80158d6:	4606      	mov	r6, r0
 80158d8:	4650      	mov	r0, sl
 80158da:	f000 fcc7 	bl	801626c <__mcmp>
 80158de:	2800      	cmp	r0, #0
 80158e0:	f73f adbb 	bgt.w	801545a <_dtoa_r+0x4ca>
 80158e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158e6:	9d00      	ldr	r5, [sp, #0]
 80158e8:	ea6f 0b03 	mvn.w	fp, r3
 80158ec:	f04f 0800 	mov.w	r8, #0
 80158f0:	4631      	mov	r1, r6
 80158f2:	4620      	mov	r0, r4
 80158f4:	f000 fa7e 	bl	8015df4 <_Bfree>
 80158f8:	2f00      	cmp	r7, #0
 80158fa:	f43f aeab 	beq.w	8015654 <_dtoa_r+0x6c4>
 80158fe:	f1b8 0f00 	cmp.w	r8, #0
 8015902:	d005      	beq.n	8015910 <_dtoa_r+0x980>
 8015904:	45b8      	cmp	r8, r7
 8015906:	d003      	beq.n	8015910 <_dtoa_r+0x980>
 8015908:	4641      	mov	r1, r8
 801590a:	4620      	mov	r0, r4
 801590c:	f000 fa72 	bl	8015df4 <_Bfree>
 8015910:	4639      	mov	r1, r7
 8015912:	4620      	mov	r0, r4
 8015914:	f000 fa6e 	bl	8015df4 <_Bfree>
 8015918:	e69c      	b.n	8015654 <_dtoa_r+0x6c4>
 801591a:	2600      	movs	r6, #0
 801591c:	4637      	mov	r7, r6
 801591e:	e7e1      	b.n	80158e4 <_dtoa_r+0x954>
 8015920:	46bb      	mov	fp, r7
 8015922:	4637      	mov	r7, r6
 8015924:	e599      	b.n	801545a <_dtoa_r+0x4ca>
 8015926:	bf00      	nop
 8015928:	40240000 	.word	0x40240000
 801592c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801592e:	2b00      	cmp	r3, #0
 8015930:	f000 80c8 	beq.w	8015ac4 <_dtoa_r+0xb34>
 8015934:	9b04      	ldr	r3, [sp, #16]
 8015936:	9301      	str	r3, [sp, #4]
 8015938:	2d00      	cmp	r5, #0
 801593a:	dd05      	ble.n	8015948 <_dtoa_r+0x9b8>
 801593c:	4639      	mov	r1, r7
 801593e:	462a      	mov	r2, r5
 8015940:	4620      	mov	r0, r4
 8015942:	f000 fc27 	bl	8016194 <__lshift>
 8015946:	4607      	mov	r7, r0
 8015948:	f1b8 0f00 	cmp.w	r8, #0
 801594c:	d05b      	beq.n	8015a06 <_dtoa_r+0xa76>
 801594e:	6879      	ldr	r1, [r7, #4]
 8015950:	4620      	mov	r0, r4
 8015952:	f000 fa0f 	bl	8015d74 <_Balloc>
 8015956:	4605      	mov	r5, r0
 8015958:	b928      	cbnz	r0, 8015966 <_dtoa_r+0x9d6>
 801595a:	4b83      	ldr	r3, [pc, #524]	; (8015b68 <_dtoa_r+0xbd8>)
 801595c:	4602      	mov	r2, r0
 801595e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015962:	f7ff bb2e 	b.w	8014fc2 <_dtoa_r+0x32>
 8015966:	693a      	ldr	r2, [r7, #16]
 8015968:	3202      	adds	r2, #2
 801596a:	0092      	lsls	r2, r2, #2
 801596c:	f107 010c 	add.w	r1, r7, #12
 8015970:	300c      	adds	r0, #12
 8015972:	f7ff fa74 	bl	8014e5e <memcpy>
 8015976:	2201      	movs	r2, #1
 8015978:	4629      	mov	r1, r5
 801597a:	4620      	mov	r0, r4
 801597c:	f000 fc0a 	bl	8016194 <__lshift>
 8015980:	9b00      	ldr	r3, [sp, #0]
 8015982:	3301      	adds	r3, #1
 8015984:	9304      	str	r3, [sp, #16]
 8015986:	e9dd 2300 	ldrd	r2, r3, [sp]
 801598a:	4413      	add	r3, r2
 801598c:	9308      	str	r3, [sp, #32]
 801598e:	9b02      	ldr	r3, [sp, #8]
 8015990:	f003 0301 	and.w	r3, r3, #1
 8015994:	46b8      	mov	r8, r7
 8015996:	9306      	str	r3, [sp, #24]
 8015998:	4607      	mov	r7, r0
 801599a:	9b04      	ldr	r3, [sp, #16]
 801599c:	4631      	mov	r1, r6
 801599e:	3b01      	subs	r3, #1
 80159a0:	4650      	mov	r0, sl
 80159a2:	9301      	str	r3, [sp, #4]
 80159a4:	f7ff fa69 	bl	8014e7a <quorem>
 80159a8:	4641      	mov	r1, r8
 80159aa:	9002      	str	r0, [sp, #8]
 80159ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80159b0:	4650      	mov	r0, sl
 80159b2:	f000 fc5b 	bl	801626c <__mcmp>
 80159b6:	463a      	mov	r2, r7
 80159b8:	9005      	str	r0, [sp, #20]
 80159ba:	4631      	mov	r1, r6
 80159bc:	4620      	mov	r0, r4
 80159be:	f000 fc71 	bl	80162a4 <__mdiff>
 80159c2:	68c2      	ldr	r2, [r0, #12]
 80159c4:	4605      	mov	r5, r0
 80159c6:	bb02      	cbnz	r2, 8015a0a <_dtoa_r+0xa7a>
 80159c8:	4601      	mov	r1, r0
 80159ca:	4650      	mov	r0, sl
 80159cc:	f000 fc4e 	bl	801626c <__mcmp>
 80159d0:	4602      	mov	r2, r0
 80159d2:	4629      	mov	r1, r5
 80159d4:	4620      	mov	r0, r4
 80159d6:	9209      	str	r2, [sp, #36]	; 0x24
 80159d8:	f000 fa0c 	bl	8015df4 <_Bfree>
 80159dc:	9b07      	ldr	r3, [sp, #28]
 80159de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159e0:	9d04      	ldr	r5, [sp, #16]
 80159e2:	ea43 0102 	orr.w	r1, r3, r2
 80159e6:	9b06      	ldr	r3, [sp, #24]
 80159e8:	4319      	orrs	r1, r3
 80159ea:	d110      	bne.n	8015a0e <_dtoa_r+0xa7e>
 80159ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80159f0:	d029      	beq.n	8015a46 <_dtoa_r+0xab6>
 80159f2:	9b05      	ldr	r3, [sp, #20]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	dd02      	ble.n	80159fe <_dtoa_r+0xa6e>
 80159f8:	9b02      	ldr	r3, [sp, #8]
 80159fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80159fe:	9b01      	ldr	r3, [sp, #4]
 8015a00:	f883 9000 	strb.w	r9, [r3]
 8015a04:	e774      	b.n	80158f0 <_dtoa_r+0x960>
 8015a06:	4638      	mov	r0, r7
 8015a08:	e7ba      	b.n	8015980 <_dtoa_r+0x9f0>
 8015a0a:	2201      	movs	r2, #1
 8015a0c:	e7e1      	b.n	80159d2 <_dtoa_r+0xa42>
 8015a0e:	9b05      	ldr	r3, [sp, #20]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	db04      	blt.n	8015a1e <_dtoa_r+0xa8e>
 8015a14:	9907      	ldr	r1, [sp, #28]
 8015a16:	430b      	orrs	r3, r1
 8015a18:	9906      	ldr	r1, [sp, #24]
 8015a1a:	430b      	orrs	r3, r1
 8015a1c:	d120      	bne.n	8015a60 <_dtoa_r+0xad0>
 8015a1e:	2a00      	cmp	r2, #0
 8015a20:	dded      	ble.n	80159fe <_dtoa_r+0xa6e>
 8015a22:	4651      	mov	r1, sl
 8015a24:	2201      	movs	r2, #1
 8015a26:	4620      	mov	r0, r4
 8015a28:	f000 fbb4 	bl	8016194 <__lshift>
 8015a2c:	4631      	mov	r1, r6
 8015a2e:	4682      	mov	sl, r0
 8015a30:	f000 fc1c 	bl	801626c <__mcmp>
 8015a34:	2800      	cmp	r0, #0
 8015a36:	dc03      	bgt.n	8015a40 <_dtoa_r+0xab0>
 8015a38:	d1e1      	bne.n	80159fe <_dtoa_r+0xa6e>
 8015a3a:	f019 0f01 	tst.w	r9, #1
 8015a3e:	d0de      	beq.n	80159fe <_dtoa_r+0xa6e>
 8015a40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015a44:	d1d8      	bne.n	80159f8 <_dtoa_r+0xa68>
 8015a46:	9a01      	ldr	r2, [sp, #4]
 8015a48:	2339      	movs	r3, #57	; 0x39
 8015a4a:	7013      	strb	r3, [r2, #0]
 8015a4c:	462b      	mov	r3, r5
 8015a4e:	461d      	mov	r5, r3
 8015a50:	3b01      	subs	r3, #1
 8015a52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015a56:	2a39      	cmp	r2, #57	; 0x39
 8015a58:	d06c      	beq.n	8015b34 <_dtoa_r+0xba4>
 8015a5a:	3201      	adds	r2, #1
 8015a5c:	701a      	strb	r2, [r3, #0]
 8015a5e:	e747      	b.n	80158f0 <_dtoa_r+0x960>
 8015a60:	2a00      	cmp	r2, #0
 8015a62:	dd07      	ble.n	8015a74 <_dtoa_r+0xae4>
 8015a64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015a68:	d0ed      	beq.n	8015a46 <_dtoa_r+0xab6>
 8015a6a:	9a01      	ldr	r2, [sp, #4]
 8015a6c:	f109 0301 	add.w	r3, r9, #1
 8015a70:	7013      	strb	r3, [r2, #0]
 8015a72:	e73d      	b.n	80158f0 <_dtoa_r+0x960>
 8015a74:	9b04      	ldr	r3, [sp, #16]
 8015a76:	9a08      	ldr	r2, [sp, #32]
 8015a78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015a7c:	4293      	cmp	r3, r2
 8015a7e:	d043      	beq.n	8015b08 <_dtoa_r+0xb78>
 8015a80:	4651      	mov	r1, sl
 8015a82:	2300      	movs	r3, #0
 8015a84:	220a      	movs	r2, #10
 8015a86:	4620      	mov	r0, r4
 8015a88:	f000 f9d6 	bl	8015e38 <__multadd>
 8015a8c:	45b8      	cmp	r8, r7
 8015a8e:	4682      	mov	sl, r0
 8015a90:	f04f 0300 	mov.w	r3, #0
 8015a94:	f04f 020a 	mov.w	r2, #10
 8015a98:	4641      	mov	r1, r8
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	d107      	bne.n	8015aae <_dtoa_r+0xb1e>
 8015a9e:	f000 f9cb 	bl	8015e38 <__multadd>
 8015aa2:	4680      	mov	r8, r0
 8015aa4:	4607      	mov	r7, r0
 8015aa6:	9b04      	ldr	r3, [sp, #16]
 8015aa8:	3301      	adds	r3, #1
 8015aaa:	9304      	str	r3, [sp, #16]
 8015aac:	e775      	b.n	801599a <_dtoa_r+0xa0a>
 8015aae:	f000 f9c3 	bl	8015e38 <__multadd>
 8015ab2:	4639      	mov	r1, r7
 8015ab4:	4680      	mov	r8, r0
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	220a      	movs	r2, #10
 8015aba:	4620      	mov	r0, r4
 8015abc:	f000 f9bc 	bl	8015e38 <__multadd>
 8015ac0:	4607      	mov	r7, r0
 8015ac2:	e7f0      	b.n	8015aa6 <_dtoa_r+0xb16>
 8015ac4:	9b04      	ldr	r3, [sp, #16]
 8015ac6:	9301      	str	r3, [sp, #4]
 8015ac8:	9d00      	ldr	r5, [sp, #0]
 8015aca:	4631      	mov	r1, r6
 8015acc:	4650      	mov	r0, sl
 8015ace:	f7ff f9d4 	bl	8014e7a <quorem>
 8015ad2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015ad6:	9b00      	ldr	r3, [sp, #0]
 8015ad8:	f805 9b01 	strb.w	r9, [r5], #1
 8015adc:	1aea      	subs	r2, r5, r3
 8015ade:	9b01      	ldr	r3, [sp, #4]
 8015ae0:	4293      	cmp	r3, r2
 8015ae2:	dd07      	ble.n	8015af4 <_dtoa_r+0xb64>
 8015ae4:	4651      	mov	r1, sl
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	220a      	movs	r2, #10
 8015aea:	4620      	mov	r0, r4
 8015aec:	f000 f9a4 	bl	8015e38 <__multadd>
 8015af0:	4682      	mov	sl, r0
 8015af2:	e7ea      	b.n	8015aca <_dtoa_r+0xb3a>
 8015af4:	9b01      	ldr	r3, [sp, #4]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	bfc8      	it	gt
 8015afa:	461d      	movgt	r5, r3
 8015afc:	9b00      	ldr	r3, [sp, #0]
 8015afe:	bfd8      	it	le
 8015b00:	2501      	movle	r5, #1
 8015b02:	441d      	add	r5, r3
 8015b04:	f04f 0800 	mov.w	r8, #0
 8015b08:	4651      	mov	r1, sl
 8015b0a:	2201      	movs	r2, #1
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	f000 fb41 	bl	8016194 <__lshift>
 8015b12:	4631      	mov	r1, r6
 8015b14:	4682      	mov	sl, r0
 8015b16:	f000 fba9 	bl	801626c <__mcmp>
 8015b1a:	2800      	cmp	r0, #0
 8015b1c:	dc96      	bgt.n	8015a4c <_dtoa_r+0xabc>
 8015b1e:	d102      	bne.n	8015b26 <_dtoa_r+0xb96>
 8015b20:	f019 0f01 	tst.w	r9, #1
 8015b24:	d192      	bne.n	8015a4c <_dtoa_r+0xabc>
 8015b26:	462b      	mov	r3, r5
 8015b28:	461d      	mov	r5, r3
 8015b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015b2e:	2a30      	cmp	r2, #48	; 0x30
 8015b30:	d0fa      	beq.n	8015b28 <_dtoa_r+0xb98>
 8015b32:	e6dd      	b.n	80158f0 <_dtoa_r+0x960>
 8015b34:	9a00      	ldr	r2, [sp, #0]
 8015b36:	429a      	cmp	r2, r3
 8015b38:	d189      	bne.n	8015a4e <_dtoa_r+0xabe>
 8015b3a:	f10b 0b01 	add.w	fp, fp, #1
 8015b3e:	2331      	movs	r3, #49	; 0x31
 8015b40:	e796      	b.n	8015a70 <_dtoa_r+0xae0>
 8015b42:	4b0a      	ldr	r3, [pc, #40]	; (8015b6c <_dtoa_r+0xbdc>)
 8015b44:	f7ff ba99 	b.w	801507a <_dtoa_r+0xea>
 8015b48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	f47f aa6d 	bne.w	801502a <_dtoa_r+0x9a>
 8015b50:	4b07      	ldr	r3, [pc, #28]	; (8015b70 <_dtoa_r+0xbe0>)
 8015b52:	f7ff ba92 	b.w	801507a <_dtoa_r+0xea>
 8015b56:	9b01      	ldr	r3, [sp, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	dcb5      	bgt.n	8015ac8 <_dtoa_r+0xb38>
 8015b5c:	9b07      	ldr	r3, [sp, #28]
 8015b5e:	2b02      	cmp	r3, #2
 8015b60:	f73f aeb1 	bgt.w	80158c6 <_dtoa_r+0x936>
 8015b64:	e7b0      	b.n	8015ac8 <_dtoa_r+0xb38>
 8015b66:	bf00      	nop
 8015b68:	0802e174 	.word	0x0802e174
 8015b6c:	0802e0d4 	.word	0x0802e0d4
 8015b70:	0802e0f8 	.word	0x0802e0f8

08015b74 <_free_r>:
 8015b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b76:	2900      	cmp	r1, #0
 8015b78:	d044      	beq.n	8015c04 <_free_r+0x90>
 8015b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b7e:	9001      	str	r0, [sp, #4]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	f1a1 0404 	sub.w	r4, r1, #4
 8015b86:	bfb8      	it	lt
 8015b88:	18e4      	addlt	r4, r4, r3
 8015b8a:	f000 f8e7 	bl	8015d5c <__malloc_lock>
 8015b8e:	4a1e      	ldr	r2, [pc, #120]	; (8015c08 <_free_r+0x94>)
 8015b90:	9801      	ldr	r0, [sp, #4]
 8015b92:	6813      	ldr	r3, [r2, #0]
 8015b94:	b933      	cbnz	r3, 8015ba4 <_free_r+0x30>
 8015b96:	6063      	str	r3, [r4, #4]
 8015b98:	6014      	str	r4, [r2, #0]
 8015b9a:	b003      	add	sp, #12
 8015b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ba0:	f000 b8e2 	b.w	8015d68 <__malloc_unlock>
 8015ba4:	42a3      	cmp	r3, r4
 8015ba6:	d908      	bls.n	8015bba <_free_r+0x46>
 8015ba8:	6825      	ldr	r5, [r4, #0]
 8015baa:	1961      	adds	r1, r4, r5
 8015bac:	428b      	cmp	r3, r1
 8015bae:	bf01      	itttt	eq
 8015bb0:	6819      	ldreq	r1, [r3, #0]
 8015bb2:	685b      	ldreq	r3, [r3, #4]
 8015bb4:	1949      	addeq	r1, r1, r5
 8015bb6:	6021      	streq	r1, [r4, #0]
 8015bb8:	e7ed      	b.n	8015b96 <_free_r+0x22>
 8015bba:	461a      	mov	r2, r3
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	b10b      	cbz	r3, 8015bc4 <_free_r+0x50>
 8015bc0:	42a3      	cmp	r3, r4
 8015bc2:	d9fa      	bls.n	8015bba <_free_r+0x46>
 8015bc4:	6811      	ldr	r1, [r2, #0]
 8015bc6:	1855      	adds	r5, r2, r1
 8015bc8:	42a5      	cmp	r5, r4
 8015bca:	d10b      	bne.n	8015be4 <_free_r+0x70>
 8015bcc:	6824      	ldr	r4, [r4, #0]
 8015bce:	4421      	add	r1, r4
 8015bd0:	1854      	adds	r4, r2, r1
 8015bd2:	42a3      	cmp	r3, r4
 8015bd4:	6011      	str	r1, [r2, #0]
 8015bd6:	d1e0      	bne.n	8015b9a <_free_r+0x26>
 8015bd8:	681c      	ldr	r4, [r3, #0]
 8015bda:	685b      	ldr	r3, [r3, #4]
 8015bdc:	6053      	str	r3, [r2, #4]
 8015bde:	440c      	add	r4, r1
 8015be0:	6014      	str	r4, [r2, #0]
 8015be2:	e7da      	b.n	8015b9a <_free_r+0x26>
 8015be4:	d902      	bls.n	8015bec <_free_r+0x78>
 8015be6:	230c      	movs	r3, #12
 8015be8:	6003      	str	r3, [r0, #0]
 8015bea:	e7d6      	b.n	8015b9a <_free_r+0x26>
 8015bec:	6825      	ldr	r5, [r4, #0]
 8015bee:	1961      	adds	r1, r4, r5
 8015bf0:	428b      	cmp	r3, r1
 8015bf2:	bf04      	itt	eq
 8015bf4:	6819      	ldreq	r1, [r3, #0]
 8015bf6:	685b      	ldreq	r3, [r3, #4]
 8015bf8:	6063      	str	r3, [r4, #4]
 8015bfa:	bf04      	itt	eq
 8015bfc:	1949      	addeq	r1, r1, r5
 8015bfe:	6021      	streq	r1, [r4, #0]
 8015c00:	6054      	str	r4, [r2, #4]
 8015c02:	e7ca      	b.n	8015b9a <_free_r+0x26>
 8015c04:	b003      	add	sp, #12
 8015c06:	bd30      	pop	{r4, r5, pc}
 8015c08:	20003750 	.word	0x20003750

08015c0c <malloc>:
 8015c0c:	4b02      	ldr	r3, [pc, #8]	; (8015c18 <malloc+0xc>)
 8015c0e:	4601      	mov	r1, r0
 8015c10:	6818      	ldr	r0, [r3, #0]
 8015c12:	f000 b823 	b.w	8015c5c <_malloc_r>
 8015c16:	bf00      	nop
 8015c18:	200000e0 	.word	0x200000e0

08015c1c <sbrk_aligned>:
 8015c1c:	b570      	push	{r4, r5, r6, lr}
 8015c1e:	4e0e      	ldr	r6, [pc, #56]	; (8015c58 <sbrk_aligned+0x3c>)
 8015c20:	460c      	mov	r4, r1
 8015c22:	6831      	ldr	r1, [r6, #0]
 8015c24:	4605      	mov	r5, r0
 8015c26:	b911      	cbnz	r1, 8015c2e <sbrk_aligned+0x12>
 8015c28:	f000 feca 	bl	80169c0 <_sbrk_r>
 8015c2c:	6030      	str	r0, [r6, #0]
 8015c2e:	4621      	mov	r1, r4
 8015c30:	4628      	mov	r0, r5
 8015c32:	f000 fec5 	bl	80169c0 <_sbrk_r>
 8015c36:	1c43      	adds	r3, r0, #1
 8015c38:	d00a      	beq.n	8015c50 <sbrk_aligned+0x34>
 8015c3a:	1cc4      	adds	r4, r0, #3
 8015c3c:	f024 0403 	bic.w	r4, r4, #3
 8015c40:	42a0      	cmp	r0, r4
 8015c42:	d007      	beq.n	8015c54 <sbrk_aligned+0x38>
 8015c44:	1a21      	subs	r1, r4, r0
 8015c46:	4628      	mov	r0, r5
 8015c48:	f000 feba 	bl	80169c0 <_sbrk_r>
 8015c4c:	3001      	adds	r0, #1
 8015c4e:	d101      	bne.n	8015c54 <sbrk_aligned+0x38>
 8015c50:	f04f 34ff 	mov.w	r4, #4294967295
 8015c54:	4620      	mov	r0, r4
 8015c56:	bd70      	pop	{r4, r5, r6, pc}
 8015c58:	20003754 	.word	0x20003754

08015c5c <_malloc_r>:
 8015c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c60:	1ccd      	adds	r5, r1, #3
 8015c62:	f025 0503 	bic.w	r5, r5, #3
 8015c66:	3508      	adds	r5, #8
 8015c68:	2d0c      	cmp	r5, #12
 8015c6a:	bf38      	it	cc
 8015c6c:	250c      	movcc	r5, #12
 8015c6e:	2d00      	cmp	r5, #0
 8015c70:	4607      	mov	r7, r0
 8015c72:	db01      	blt.n	8015c78 <_malloc_r+0x1c>
 8015c74:	42a9      	cmp	r1, r5
 8015c76:	d905      	bls.n	8015c84 <_malloc_r+0x28>
 8015c78:	230c      	movs	r3, #12
 8015c7a:	603b      	str	r3, [r7, #0]
 8015c7c:	2600      	movs	r6, #0
 8015c7e:	4630      	mov	r0, r6
 8015c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015d58 <_malloc_r+0xfc>
 8015c88:	f000 f868 	bl	8015d5c <__malloc_lock>
 8015c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8015c90:	461c      	mov	r4, r3
 8015c92:	bb5c      	cbnz	r4, 8015cec <_malloc_r+0x90>
 8015c94:	4629      	mov	r1, r5
 8015c96:	4638      	mov	r0, r7
 8015c98:	f7ff ffc0 	bl	8015c1c <sbrk_aligned>
 8015c9c:	1c43      	adds	r3, r0, #1
 8015c9e:	4604      	mov	r4, r0
 8015ca0:	d155      	bne.n	8015d4e <_malloc_r+0xf2>
 8015ca2:	f8d8 4000 	ldr.w	r4, [r8]
 8015ca6:	4626      	mov	r6, r4
 8015ca8:	2e00      	cmp	r6, #0
 8015caa:	d145      	bne.n	8015d38 <_malloc_r+0xdc>
 8015cac:	2c00      	cmp	r4, #0
 8015cae:	d048      	beq.n	8015d42 <_malloc_r+0xe6>
 8015cb0:	6823      	ldr	r3, [r4, #0]
 8015cb2:	4631      	mov	r1, r6
 8015cb4:	4638      	mov	r0, r7
 8015cb6:	eb04 0903 	add.w	r9, r4, r3
 8015cba:	f000 fe81 	bl	80169c0 <_sbrk_r>
 8015cbe:	4581      	cmp	r9, r0
 8015cc0:	d13f      	bne.n	8015d42 <_malloc_r+0xe6>
 8015cc2:	6821      	ldr	r1, [r4, #0]
 8015cc4:	1a6d      	subs	r5, r5, r1
 8015cc6:	4629      	mov	r1, r5
 8015cc8:	4638      	mov	r0, r7
 8015cca:	f7ff ffa7 	bl	8015c1c <sbrk_aligned>
 8015cce:	3001      	adds	r0, #1
 8015cd0:	d037      	beq.n	8015d42 <_malloc_r+0xe6>
 8015cd2:	6823      	ldr	r3, [r4, #0]
 8015cd4:	442b      	add	r3, r5
 8015cd6:	6023      	str	r3, [r4, #0]
 8015cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d038      	beq.n	8015d52 <_malloc_r+0xf6>
 8015ce0:	685a      	ldr	r2, [r3, #4]
 8015ce2:	42a2      	cmp	r2, r4
 8015ce4:	d12b      	bne.n	8015d3e <_malloc_r+0xe2>
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	605a      	str	r2, [r3, #4]
 8015cea:	e00f      	b.n	8015d0c <_malloc_r+0xb0>
 8015cec:	6822      	ldr	r2, [r4, #0]
 8015cee:	1b52      	subs	r2, r2, r5
 8015cf0:	d41f      	bmi.n	8015d32 <_malloc_r+0xd6>
 8015cf2:	2a0b      	cmp	r2, #11
 8015cf4:	d917      	bls.n	8015d26 <_malloc_r+0xca>
 8015cf6:	1961      	adds	r1, r4, r5
 8015cf8:	42a3      	cmp	r3, r4
 8015cfa:	6025      	str	r5, [r4, #0]
 8015cfc:	bf18      	it	ne
 8015cfe:	6059      	strne	r1, [r3, #4]
 8015d00:	6863      	ldr	r3, [r4, #4]
 8015d02:	bf08      	it	eq
 8015d04:	f8c8 1000 	streq.w	r1, [r8]
 8015d08:	5162      	str	r2, [r4, r5]
 8015d0a:	604b      	str	r3, [r1, #4]
 8015d0c:	4638      	mov	r0, r7
 8015d0e:	f104 060b 	add.w	r6, r4, #11
 8015d12:	f000 f829 	bl	8015d68 <__malloc_unlock>
 8015d16:	f026 0607 	bic.w	r6, r6, #7
 8015d1a:	1d23      	adds	r3, r4, #4
 8015d1c:	1af2      	subs	r2, r6, r3
 8015d1e:	d0ae      	beq.n	8015c7e <_malloc_r+0x22>
 8015d20:	1b9b      	subs	r3, r3, r6
 8015d22:	50a3      	str	r3, [r4, r2]
 8015d24:	e7ab      	b.n	8015c7e <_malloc_r+0x22>
 8015d26:	42a3      	cmp	r3, r4
 8015d28:	6862      	ldr	r2, [r4, #4]
 8015d2a:	d1dd      	bne.n	8015ce8 <_malloc_r+0x8c>
 8015d2c:	f8c8 2000 	str.w	r2, [r8]
 8015d30:	e7ec      	b.n	8015d0c <_malloc_r+0xb0>
 8015d32:	4623      	mov	r3, r4
 8015d34:	6864      	ldr	r4, [r4, #4]
 8015d36:	e7ac      	b.n	8015c92 <_malloc_r+0x36>
 8015d38:	4634      	mov	r4, r6
 8015d3a:	6876      	ldr	r6, [r6, #4]
 8015d3c:	e7b4      	b.n	8015ca8 <_malloc_r+0x4c>
 8015d3e:	4613      	mov	r3, r2
 8015d40:	e7cc      	b.n	8015cdc <_malloc_r+0x80>
 8015d42:	230c      	movs	r3, #12
 8015d44:	603b      	str	r3, [r7, #0]
 8015d46:	4638      	mov	r0, r7
 8015d48:	f000 f80e 	bl	8015d68 <__malloc_unlock>
 8015d4c:	e797      	b.n	8015c7e <_malloc_r+0x22>
 8015d4e:	6025      	str	r5, [r4, #0]
 8015d50:	e7dc      	b.n	8015d0c <_malloc_r+0xb0>
 8015d52:	605b      	str	r3, [r3, #4]
 8015d54:	deff      	udf	#255	; 0xff
 8015d56:	bf00      	nop
 8015d58:	20003750 	.word	0x20003750

08015d5c <__malloc_lock>:
 8015d5c:	4801      	ldr	r0, [pc, #4]	; (8015d64 <__malloc_lock+0x8>)
 8015d5e:	f7ff b87c 	b.w	8014e5a <__retarget_lock_acquire_recursive>
 8015d62:	bf00      	nop
 8015d64:	2000374c 	.word	0x2000374c

08015d68 <__malloc_unlock>:
 8015d68:	4801      	ldr	r0, [pc, #4]	; (8015d70 <__malloc_unlock+0x8>)
 8015d6a:	f7ff b877 	b.w	8014e5c <__retarget_lock_release_recursive>
 8015d6e:	bf00      	nop
 8015d70:	2000374c 	.word	0x2000374c

08015d74 <_Balloc>:
 8015d74:	b570      	push	{r4, r5, r6, lr}
 8015d76:	69c6      	ldr	r6, [r0, #28]
 8015d78:	4604      	mov	r4, r0
 8015d7a:	460d      	mov	r5, r1
 8015d7c:	b976      	cbnz	r6, 8015d9c <_Balloc+0x28>
 8015d7e:	2010      	movs	r0, #16
 8015d80:	f7ff ff44 	bl	8015c0c <malloc>
 8015d84:	4602      	mov	r2, r0
 8015d86:	61e0      	str	r0, [r4, #28]
 8015d88:	b920      	cbnz	r0, 8015d94 <_Balloc+0x20>
 8015d8a:	4b18      	ldr	r3, [pc, #96]	; (8015dec <_Balloc+0x78>)
 8015d8c:	4818      	ldr	r0, [pc, #96]	; (8015df0 <_Balloc+0x7c>)
 8015d8e:	216b      	movs	r1, #107	; 0x6b
 8015d90:	f000 fe26 	bl	80169e0 <__assert_func>
 8015d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d98:	6006      	str	r6, [r0, #0]
 8015d9a:	60c6      	str	r6, [r0, #12]
 8015d9c:	69e6      	ldr	r6, [r4, #28]
 8015d9e:	68f3      	ldr	r3, [r6, #12]
 8015da0:	b183      	cbz	r3, 8015dc4 <_Balloc+0x50>
 8015da2:	69e3      	ldr	r3, [r4, #28]
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015daa:	b9b8      	cbnz	r0, 8015ddc <_Balloc+0x68>
 8015dac:	2101      	movs	r1, #1
 8015dae:	fa01 f605 	lsl.w	r6, r1, r5
 8015db2:	1d72      	adds	r2, r6, #5
 8015db4:	0092      	lsls	r2, r2, #2
 8015db6:	4620      	mov	r0, r4
 8015db8:	f000 fe30 	bl	8016a1c <_calloc_r>
 8015dbc:	b160      	cbz	r0, 8015dd8 <_Balloc+0x64>
 8015dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015dc2:	e00e      	b.n	8015de2 <_Balloc+0x6e>
 8015dc4:	2221      	movs	r2, #33	; 0x21
 8015dc6:	2104      	movs	r1, #4
 8015dc8:	4620      	mov	r0, r4
 8015dca:	f000 fe27 	bl	8016a1c <_calloc_r>
 8015dce:	69e3      	ldr	r3, [r4, #28]
 8015dd0:	60f0      	str	r0, [r6, #12]
 8015dd2:	68db      	ldr	r3, [r3, #12]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d1e4      	bne.n	8015da2 <_Balloc+0x2e>
 8015dd8:	2000      	movs	r0, #0
 8015dda:	bd70      	pop	{r4, r5, r6, pc}
 8015ddc:	6802      	ldr	r2, [r0, #0]
 8015dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015de2:	2300      	movs	r3, #0
 8015de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015de8:	e7f7      	b.n	8015dda <_Balloc+0x66>
 8015dea:	bf00      	nop
 8015dec:	0802e105 	.word	0x0802e105
 8015df0:	0802e185 	.word	0x0802e185

08015df4 <_Bfree>:
 8015df4:	b570      	push	{r4, r5, r6, lr}
 8015df6:	69c6      	ldr	r6, [r0, #28]
 8015df8:	4605      	mov	r5, r0
 8015dfa:	460c      	mov	r4, r1
 8015dfc:	b976      	cbnz	r6, 8015e1c <_Bfree+0x28>
 8015dfe:	2010      	movs	r0, #16
 8015e00:	f7ff ff04 	bl	8015c0c <malloc>
 8015e04:	4602      	mov	r2, r0
 8015e06:	61e8      	str	r0, [r5, #28]
 8015e08:	b920      	cbnz	r0, 8015e14 <_Bfree+0x20>
 8015e0a:	4b09      	ldr	r3, [pc, #36]	; (8015e30 <_Bfree+0x3c>)
 8015e0c:	4809      	ldr	r0, [pc, #36]	; (8015e34 <_Bfree+0x40>)
 8015e0e:	218f      	movs	r1, #143	; 0x8f
 8015e10:	f000 fde6 	bl	80169e0 <__assert_func>
 8015e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015e18:	6006      	str	r6, [r0, #0]
 8015e1a:	60c6      	str	r6, [r0, #12]
 8015e1c:	b13c      	cbz	r4, 8015e2e <_Bfree+0x3a>
 8015e1e:	69eb      	ldr	r3, [r5, #28]
 8015e20:	6862      	ldr	r2, [r4, #4]
 8015e22:	68db      	ldr	r3, [r3, #12]
 8015e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015e28:	6021      	str	r1, [r4, #0]
 8015e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015e2e:	bd70      	pop	{r4, r5, r6, pc}
 8015e30:	0802e105 	.word	0x0802e105
 8015e34:	0802e185 	.word	0x0802e185

08015e38 <__multadd>:
 8015e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e3c:	690d      	ldr	r5, [r1, #16]
 8015e3e:	4607      	mov	r7, r0
 8015e40:	460c      	mov	r4, r1
 8015e42:	461e      	mov	r6, r3
 8015e44:	f101 0c14 	add.w	ip, r1, #20
 8015e48:	2000      	movs	r0, #0
 8015e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8015e4e:	b299      	uxth	r1, r3
 8015e50:	fb02 6101 	mla	r1, r2, r1, r6
 8015e54:	0c1e      	lsrs	r6, r3, #16
 8015e56:	0c0b      	lsrs	r3, r1, #16
 8015e58:	fb02 3306 	mla	r3, r2, r6, r3
 8015e5c:	b289      	uxth	r1, r1
 8015e5e:	3001      	adds	r0, #1
 8015e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015e64:	4285      	cmp	r5, r0
 8015e66:	f84c 1b04 	str.w	r1, [ip], #4
 8015e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015e6e:	dcec      	bgt.n	8015e4a <__multadd+0x12>
 8015e70:	b30e      	cbz	r6, 8015eb6 <__multadd+0x7e>
 8015e72:	68a3      	ldr	r3, [r4, #8]
 8015e74:	42ab      	cmp	r3, r5
 8015e76:	dc19      	bgt.n	8015eac <__multadd+0x74>
 8015e78:	6861      	ldr	r1, [r4, #4]
 8015e7a:	4638      	mov	r0, r7
 8015e7c:	3101      	adds	r1, #1
 8015e7e:	f7ff ff79 	bl	8015d74 <_Balloc>
 8015e82:	4680      	mov	r8, r0
 8015e84:	b928      	cbnz	r0, 8015e92 <__multadd+0x5a>
 8015e86:	4602      	mov	r2, r0
 8015e88:	4b0c      	ldr	r3, [pc, #48]	; (8015ebc <__multadd+0x84>)
 8015e8a:	480d      	ldr	r0, [pc, #52]	; (8015ec0 <__multadd+0x88>)
 8015e8c:	21ba      	movs	r1, #186	; 0xba
 8015e8e:	f000 fda7 	bl	80169e0 <__assert_func>
 8015e92:	6922      	ldr	r2, [r4, #16]
 8015e94:	3202      	adds	r2, #2
 8015e96:	f104 010c 	add.w	r1, r4, #12
 8015e9a:	0092      	lsls	r2, r2, #2
 8015e9c:	300c      	adds	r0, #12
 8015e9e:	f7fe ffde 	bl	8014e5e <memcpy>
 8015ea2:	4621      	mov	r1, r4
 8015ea4:	4638      	mov	r0, r7
 8015ea6:	f7ff ffa5 	bl	8015df4 <_Bfree>
 8015eaa:	4644      	mov	r4, r8
 8015eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015eb0:	3501      	adds	r5, #1
 8015eb2:	615e      	str	r6, [r3, #20]
 8015eb4:	6125      	str	r5, [r4, #16]
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ebc:	0802e174 	.word	0x0802e174
 8015ec0:	0802e185 	.word	0x0802e185

08015ec4 <__hi0bits>:
 8015ec4:	0c03      	lsrs	r3, r0, #16
 8015ec6:	041b      	lsls	r3, r3, #16
 8015ec8:	b9d3      	cbnz	r3, 8015f00 <__hi0bits+0x3c>
 8015eca:	0400      	lsls	r0, r0, #16
 8015ecc:	2310      	movs	r3, #16
 8015ece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015ed2:	bf04      	itt	eq
 8015ed4:	0200      	lsleq	r0, r0, #8
 8015ed6:	3308      	addeq	r3, #8
 8015ed8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015edc:	bf04      	itt	eq
 8015ede:	0100      	lsleq	r0, r0, #4
 8015ee0:	3304      	addeq	r3, #4
 8015ee2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015ee6:	bf04      	itt	eq
 8015ee8:	0080      	lsleq	r0, r0, #2
 8015eea:	3302      	addeq	r3, #2
 8015eec:	2800      	cmp	r0, #0
 8015eee:	db05      	blt.n	8015efc <__hi0bits+0x38>
 8015ef0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015ef4:	f103 0301 	add.w	r3, r3, #1
 8015ef8:	bf08      	it	eq
 8015efa:	2320      	moveq	r3, #32
 8015efc:	4618      	mov	r0, r3
 8015efe:	4770      	bx	lr
 8015f00:	2300      	movs	r3, #0
 8015f02:	e7e4      	b.n	8015ece <__hi0bits+0xa>

08015f04 <__lo0bits>:
 8015f04:	6803      	ldr	r3, [r0, #0]
 8015f06:	f013 0207 	ands.w	r2, r3, #7
 8015f0a:	d00c      	beq.n	8015f26 <__lo0bits+0x22>
 8015f0c:	07d9      	lsls	r1, r3, #31
 8015f0e:	d422      	bmi.n	8015f56 <__lo0bits+0x52>
 8015f10:	079a      	lsls	r2, r3, #30
 8015f12:	bf49      	itett	mi
 8015f14:	085b      	lsrmi	r3, r3, #1
 8015f16:	089b      	lsrpl	r3, r3, #2
 8015f18:	6003      	strmi	r3, [r0, #0]
 8015f1a:	2201      	movmi	r2, #1
 8015f1c:	bf5c      	itt	pl
 8015f1e:	6003      	strpl	r3, [r0, #0]
 8015f20:	2202      	movpl	r2, #2
 8015f22:	4610      	mov	r0, r2
 8015f24:	4770      	bx	lr
 8015f26:	b299      	uxth	r1, r3
 8015f28:	b909      	cbnz	r1, 8015f2e <__lo0bits+0x2a>
 8015f2a:	0c1b      	lsrs	r3, r3, #16
 8015f2c:	2210      	movs	r2, #16
 8015f2e:	b2d9      	uxtb	r1, r3
 8015f30:	b909      	cbnz	r1, 8015f36 <__lo0bits+0x32>
 8015f32:	3208      	adds	r2, #8
 8015f34:	0a1b      	lsrs	r3, r3, #8
 8015f36:	0719      	lsls	r1, r3, #28
 8015f38:	bf04      	itt	eq
 8015f3a:	091b      	lsreq	r3, r3, #4
 8015f3c:	3204      	addeq	r2, #4
 8015f3e:	0799      	lsls	r1, r3, #30
 8015f40:	bf04      	itt	eq
 8015f42:	089b      	lsreq	r3, r3, #2
 8015f44:	3202      	addeq	r2, #2
 8015f46:	07d9      	lsls	r1, r3, #31
 8015f48:	d403      	bmi.n	8015f52 <__lo0bits+0x4e>
 8015f4a:	085b      	lsrs	r3, r3, #1
 8015f4c:	f102 0201 	add.w	r2, r2, #1
 8015f50:	d003      	beq.n	8015f5a <__lo0bits+0x56>
 8015f52:	6003      	str	r3, [r0, #0]
 8015f54:	e7e5      	b.n	8015f22 <__lo0bits+0x1e>
 8015f56:	2200      	movs	r2, #0
 8015f58:	e7e3      	b.n	8015f22 <__lo0bits+0x1e>
 8015f5a:	2220      	movs	r2, #32
 8015f5c:	e7e1      	b.n	8015f22 <__lo0bits+0x1e>
	...

08015f60 <__i2b>:
 8015f60:	b510      	push	{r4, lr}
 8015f62:	460c      	mov	r4, r1
 8015f64:	2101      	movs	r1, #1
 8015f66:	f7ff ff05 	bl	8015d74 <_Balloc>
 8015f6a:	4602      	mov	r2, r0
 8015f6c:	b928      	cbnz	r0, 8015f7a <__i2b+0x1a>
 8015f6e:	4b05      	ldr	r3, [pc, #20]	; (8015f84 <__i2b+0x24>)
 8015f70:	4805      	ldr	r0, [pc, #20]	; (8015f88 <__i2b+0x28>)
 8015f72:	f240 1145 	movw	r1, #325	; 0x145
 8015f76:	f000 fd33 	bl	80169e0 <__assert_func>
 8015f7a:	2301      	movs	r3, #1
 8015f7c:	6144      	str	r4, [r0, #20]
 8015f7e:	6103      	str	r3, [r0, #16]
 8015f80:	bd10      	pop	{r4, pc}
 8015f82:	bf00      	nop
 8015f84:	0802e174 	.word	0x0802e174
 8015f88:	0802e185 	.word	0x0802e185

08015f8c <__multiply>:
 8015f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f90:	4691      	mov	r9, r2
 8015f92:	690a      	ldr	r2, [r1, #16]
 8015f94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	bfb8      	it	lt
 8015f9c:	460b      	movlt	r3, r1
 8015f9e:	460c      	mov	r4, r1
 8015fa0:	bfbc      	itt	lt
 8015fa2:	464c      	movlt	r4, r9
 8015fa4:	4699      	movlt	r9, r3
 8015fa6:	6927      	ldr	r7, [r4, #16]
 8015fa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015fac:	68a3      	ldr	r3, [r4, #8]
 8015fae:	6861      	ldr	r1, [r4, #4]
 8015fb0:	eb07 060a 	add.w	r6, r7, sl
 8015fb4:	42b3      	cmp	r3, r6
 8015fb6:	b085      	sub	sp, #20
 8015fb8:	bfb8      	it	lt
 8015fba:	3101      	addlt	r1, #1
 8015fbc:	f7ff feda 	bl	8015d74 <_Balloc>
 8015fc0:	b930      	cbnz	r0, 8015fd0 <__multiply+0x44>
 8015fc2:	4602      	mov	r2, r0
 8015fc4:	4b44      	ldr	r3, [pc, #272]	; (80160d8 <__multiply+0x14c>)
 8015fc6:	4845      	ldr	r0, [pc, #276]	; (80160dc <__multiply+0x150>)
 8015fc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015fcc:	f000 fd08 	bl	80169e0 <__assert_func>
 8015fd0:	f100 0514 	add.w	r5, r0, #20
 8015fd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015fd8:	462b      	mov	r3, r5
 8015fda:	2200      	movs	r2, #0
 8015fdc:	4543      	cmp	r3, r8
 8015fde:	d321      	bcc.n	8016024 <__multiply+0x98>
 8015fe0:	f104 0314 	add.w	r3, r4, #20
 8015fe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015fe8:	f109 0314 	add.w	r3, r9, #20
 8015fec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015ff0:	9202      	str	r2, [sp, #8]
 8015ff2:	1b3a      	subs	r2, r7, r4
 8015ff4:	3a15      	subs	r2, #21
 8015ff6:	f022 0203 	bic.w	r2, r2, #3
 8015ffa:	3204      	adds	r2, #4
 8015ffc:	f104 0115 	add.w	r1, r4, #21
 8016000:	428f      	cmp	r7, r1
 8016002:	bf38      	it	cc
 8016004:	2204      	movcc	r2, #4
 8016006:	9201      	str	r2, [sp, #4]
 8016008:	9a02      	ldr	r2, [sp, #8]
 801600a:	9303      	str	r3, [sp, #12]
 801600c:	429a      	cmp	r2, r3
 801600e:	d80c      	bhi.n	801602a <__multiply+0x9e>
 8016010:	2e00      	cmp	r6, #0
 8016012:	dd03      	ble.n	801601c <__multiply+0x90>
 8016014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016018:	2b00      	cmp	r3, #0
 801601a:	d05b      	beq.n	80160d4 <__multiply+0x148>
 801601c:	6106      	str	r6, [r0, #16]
 801601e:	b005      	add	sp, #20
 8016020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016024:	f843 2b04 	str.w	r2, [r3], #4
 8016028:	e7d8      	b.n	8015fdc <__multiply+0x50>
 801602a:	f8b3 a000 	ldrh.w	sl, [r3]
 801602e:	f1ba 0f00 	cmp.w	sl, #0
 8016032:	d024      	beq.n	801607e <__multiply+0xf2>
 8016034:	f104 0e14 	add.w	lr, r4, #20
 8016038:	46a9      	mov	r9, r5
 801603a:	f04f 0c00 	mov.w	ip, #0
 801603e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016042:	f8d9 1000 	ldr.w	r1, [r9]
 8016046:	fa1f fb82 	uxth.w	fp, r2
 801604a:	b289      	uxth	r1, r1
 801604c:	fb0a 110b 	mla	r1, sl, fp, r1
 8016050:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016054:	f8d9 2000 	ldr.w	r2, [r9]
 8016058:	4461      	add	r1, ip
 801605a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801605e:	fb0a c20b 	mla	r2, sl, fp, ip
 8016062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016066:	b289      	uxth	r1, r1
 8016068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801606c:	4577      	cmp	r7, lr
 801606e:	f849 1b04 	str.w	r1, [r9], #4
 8016072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016076:	d8e2      	bhi.n	801603e <__multiply+0xb2>
 8016078:	9a01      	ldr	r2, [sp, #4]
 801607a:	f845 c002 	str.w	ip, [r5, r2]
 801607e:	9a03      	ldr	r2, [sp, #12]
 8016080:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016084:	3304      	adds	r3, #4
 8016086:	f1b9 0f00 	cmp.w	r9, #0
 801608a:	d021      	beq.n	80160d0 <__multiply+0x144>
 801608c:	6829      	ldr	r1, [r5, #0]
 801608e:	f104 0c14 	add.w	ip, r4, #20
 8016092:	46ae      	mov	lr, r5
 8016094:	f04f 0a00 	mov.w	sl, #0
 8016098:	f8bc b000 	ldrh.w	fp, [ip]
 801609c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80160a0:	fb09 220b 	mla	r2, r9, fp, r2
 80160a4:	4452      	add	r2, sl
 80160a6:	b289      	uxth	r1, r1
 80160a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80160ac:	f84e 1b04 	str.w	r1, [lr], #4
 80160b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80160b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80160b8:	f8be 1000 	ldrh.w	r1, [lr]
 80160bc:	fb09 110a 	mla	r1, r9, sl, r1
 80160c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80160c4:	4567      	cmp	r7, ip
 80160c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80160ca:	d8e5      	bhi.n	8016098 <__multiply+0x10c>
 80160cc:	9a01      	ldr	r2, [sp, #4]
 80160ce:	50a9      	str	r1, [r5, r2]
 80160d0:	3504      	adds	r5, #4
 80160d2:	e799      	b.n	8016008 <__multiply+0x7c>
 80160d4:	3e01      	subs	r6, #1
 80160d6:	e79b      	b.n	8016010 <__multiply+0x84>
 80160d8:	0802e174 	.word	0x0802e174
 80160dc:	0802e185 	.word	0x0802e185

080160e0 <__pow5mult>:
 80160e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160e4:	4615      	mov	r5, r2
 80160e6:	f012 0203 	ands.w	r2, r2, #3
 80160ea:	4606      	mov	r6, r0
 80160ec:	460f      	mov	r7, r1
 80160ee:	d007      	beq.n	8016100 <__pow5mult+0x20>
 80160f0:	4c25      	ldr	r4, [pc, #148]	; (8016188 <__pow5mult+0xa8>)
 80160f2:	3a01      	subs	r2, #1
 80160f4:	2300      	movs	r3, #0
 80160f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80160fa:	f7ff fe9d 	bl	8015e38 <__multadd>
 80160fe:	4607      	mov	r7, r0
 8016100:	10ad      	asrs	r5, r5, #2
 8016102:	d03d      	beq.n	8016180 <__pow5mult+0xa0>
 8016104:	69f4      	ldr	r4, [r6, #28]
 8016106:	b97c      	cbnz	r4, 8016128 <__pow5mult+0x48>
 8016108:	2010      	movs	r0, #16
 801610a:	f7ff fd7f 	bl	8015c0c <malloc>
 801610e:	4602      	mov	r2, r0
 8016110:	61f0      	str	r0, [r6, #28]
 8016112:	b928      	cbnz	r0, 8016120 <__pow5mult+0x40>
 8016114:	4b1d      	ldr	r3, [pc, #116]	; (801618c <__pow5mult+0xac>)
 8016116:	481e      	ldr	r0, [pc, #120]	; (8016190 <__pow5mult+0xb0>)
 8016118:	f240 11b3 	movw	r1, #435	; 0x1b3
 801611c:	f000 fc60 	bl	80169e0 <__assert_func>
 8016120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016124:	6004      	str	r4, [r0, #0]
 8016126:	60c4      	str	r4, [r0, #12]
 8016128:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801612c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016130:	b94c      	cbnz	r4, 8016146 <__pow5mult+0x66>
 8016132:	f240 2171 	movw	r1, #625	; 0x271
 8016136:	4630      	mov	r0, r6
 8016138:	f7ff ff12 	bl	8015f60 <__i2b>
 801613c:	2300      	movs	r3, #0
 801613e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016142:	4604      	mov	r4, r0
 8016144:	6003      	str	r3, [r0, #0]
 8016146:	f04f 0900 	mov.w	r9, #0
 801614a:	07eb      	lsls	r3, r5, #31
 801614c:	d50a      	bpl.n	8016164 <__pow5mult+0x84>
 801614e:	4639      	mov	r1, r7
 8016150:	4622      	mov	r2, r4
 8016152:	4630      	mov	r0, r6
 8016154:	f7ff ff1a 	bl	8015f8c <__multiply>
 8016158:	4639      	mov	r1, r7
 801615a:	4680      	mov	r8, r0
 801615c:	4630      	mov	r0, r6
 801615e:	f7ff fe49 	bl	8015df4 <_Bfree>
 8016162:	4647      	mov	r7, r8
 8016164:	106d      	asrs	r5, r5, #1
 8016166:	d00b      	beq.n	8016180 <__pow5mult+0xa0>
 8016168:	6820      	ldr	r0, [r4, #0]
 801616a:	b938      	cbnz	r0, 801617c <__pow5mult+0x9c>
 801616c:	4622      	mov	r2, r4
 801616e:	4621      	mov	r1, r4
 8016170:	4630      	mov	r0, r6
 8016172:	f7ff ff0b 	bl	8015f8c <__multiply>
 8016176:	6020      	str	r0, [r4, #0]
 8016178:	f8c0 9000 	str.w	r9, [r0]
 801617c:	4604      	mov	r4, r0
 801617e:	e7e4      	b.n	801614a <__pow5mult+0x6a>
 8016180:	4638      	mov	r0, r7
 8016182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016186:	bf00      	nop
 8016188:	0802e2d0 	.word	0x0802e2d0
 801618c:	0802e105 	.word	0x0802e105
 8016190:	0802e185 	.word	0x0802e185

08016194 <__lshift>:
 8016194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016198:	460c      	mov	r4, r1
 801619a:	6849      	ldr	r1, [r1, #4]
 801619c:	6923      	ldr	r3, [r4, #16]
 801619e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80161a2:	68a3      	ldr	r3, [r4, #8]
 80161a4:	4607      	mov	r7, r0
 80161a6:	4691      	mov	r9, r2
 80161a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80161ac:	f108 0601 	add.w	r6, r8, #1
 80161b0:	42b3      	cmp	r3, r6
 80161b2:	db0b      	blt.n	80161cc <__lshift+0x38>
 80161b4:	4638      	mov	r0, r7
 80161b6:	f7ff fddd 	bl	8015d74 <_Balloc>
 80161ba:	4605      	mov	r5, r0
 80161bc:	b948      	cbnz	r0, 80161d2 <__lshift+0x3e>
 80161be:	4602      	mov	r2, r0
 80161c0:	4b28      	ldr	r3, [pc, #160]	; (8016264 <__lshift+0xd0>)
 80161c2:	4829      	ldr	r0, [pc, #164]	; (8016268 <__lshift+0xd4>)
 80161c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80161c8:	f000 fc0a 	bl	80169e0 <__assert_func>
 80161cc:	3101      	adds	r1, #1
 80161ce:	005b      	lsls	r3, r3, #1
 80161d0:	e7ee      	b.n	80161b0 <__lshift+0x1c>
 80161d2:	2300      	movs	r3, #0
 80161d4:	f100 0114 	add.w	r1, r0, #20
 80161d8:	f100 0210 	add.w	r2, r0, #16
 80161dc:	4618      	mov	r0, r3
 80161de:	4553      	cmp	r3, sl
 80161e0:	db33      	blt.n	801624a <__lshift+0xb6>
 80161e2:	6920      	ldr	r0, [r4, #16]
 80161e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80161e8:	f104 0314 	add.w	r3, r4, #20
 80161ec:	f019 091f 	ands.w	r9, r9, #31
 80161f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80161f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80161f8:	d02b      	beq.n	8016252 <__lshift+0xbe>
 80161fa:	f1c9 0e20 	rsb	lr, r9, #32
 80161fe:	468a      	mov	sl, r1
 8016200:	2200      	movs	r2, #0
 8016202:	6818      	ldr	r0, [r3, #0]
 8016204:	fa00 f009 	lsl.w	r0, r0, r9
 8016208:	4310      	orrs	r0, r2
 801620a:	f84a 0b04 	str.w	r0, [sl], #4
 801620e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016212:	459c      	cmp	ip, r3
 8016214:	fa22 f20e 	lsr.w	r2, r2, lr
 8016218:	d8f3      	bhi.n	8016202 <__lshift+0x6e>
 801621a:	ebac 0304 	sub.w	r3, ip, r4
 801621e:	3b15      	subs	r3, #21
 8016220:	f023 0303 	bic.w	r3, r3, #3
 8016224:	3304      	adds	r3, #4
 8016226:	f104 0015 	add.w	r0, r4, #21
 801622a:	4584      	cmp	ip, r0
 801622c:	bf38      	it	cc
 801622e:	2304      	movcc	r3, #4
 8016230:	50ca      	str	r2, [r1, r3]
 8016232:	b10a      	cbz	r2, 8016238 <__lshift+0xa4>
 8016234:	f108 0602 	add.w	r6, r8, #2
 8016238:	3e01      	subs	r6, #1
 801623a:	4638      	mov	r0, r7
 801623c:	612e      	str	r6, [r5, #16]
 801623e:	4621      	mov	r1, r4
 8016240:	f7ff fdd8 	bl	8015df4 <_Bfree>
 8016244:	4628      	mov	r0, r5
 8016246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801624a:	f842 0f04 	str.w	r0, [r2, #4]!
 801624e:	3301      	adds	r3, #1
 8016250:	e7c5      	b.n	80161de <__lshift+0x4a>
 8016252:	3904      	subs	r1, #4
 8016254:	f853 2b04 	ldr.w	r2, [r3], #4
 8016258:	f841 2f04 	str.w	r2, [r1, #4]!
 801625c:	459c      	cmp	ip, r3
 801625e:	d8f9      	bhi.n	8016254 <__lshift+0xc0>
 8016260:	e7ea      	b.n	8016238 <__lshift+0xa4>
 8016262:	bf00      	nop
 8016264:	0802e174 	.word	0x0802e174
 8016268:	0802e185 	.word	0x0802e185

0801626c <__mcmp>:
 801626c:	b530      	push	{r4, r5, lr}
 801626e:	6902      	ldr	r2, [r0, #16]
 8016270:	690c      	ldr	r4, [r1, #16]
 8016272:	1b12      	subs	r2, r2, r4
 8016274:	d10e      	bne.n	8016294 <__mcmp+0x28>
 8016276:	f100 0314 	add.w	r3, r0, #20
 801627a:	3114      	adds	r1, #20
 801627c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016280:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016284:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016288:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801628c:	42a5      	cmp	r5, r4
 801628e:	d003      	beq.n	8016298 <__mcmp+0x2c>
 8016290:	d305      	bcc.n	801629e <__mcmp+0x32>
 8016292:	2201      	movs	r2, #1
 8016294:	4610      	mov	r0, r2
 8016296:	bd30      	pop	{r4, r5, pc}
 8016298:	4283      	cmp	r3, r0
 801629a:	d3f3      	bcc.n	8016284 <__mcmp+0x18>
 801629c:	e7fa      	b.n	8016294 <__mcmp+0x28>
 801629e:	f04f 32ff 	mov.w	r2, #4294967295
 80162a2:	e7f7      	b.n	8016294 <__mcmp+0x28>

080162a4 <__mdiff>:
 80162a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162a8:	460c      	mov	r4, r1
 80162aa:	4606      	mov	r6, r0
 80162ac:	4611      	mov	r1, r2
 80162ae:	4620      	mov	r0, r4
 80162b0:	4690      	mov	r8, r2
 80162b2:	f7ff ffdb 	bl	801626c <__mcmp>
 80162b6:	1e05      	subs	r5, r0, #0
 80162b8:	d110      	bne.n	80162dc <__mdiff+0x38>
 80162ba:	4629      	mov	r1, r5
 80162bc:	4630      	mov	r0, r6
 80162be:	f7ff fd59 	bl	8015d74 <_Balloc>
 80162c2:	b930      	cbnz	r0, 80162d2 <__mdiff+0x2e>
 80162c4:	4b3a      	ldr	r3, [pc, #232]	; (80163b0 <__mdiff+0x10c>)
 80162c6:	4602      	mov	r2, r0
 80162c8:	f240 2137 	movw	r1, #567	; 0x237
 80162cc:	4839      	ldr	r0, [pc, #228]	; (80163b4 <__mdiff+0x110>)
 80162ce:	f000 fb87 	bl	80169e0 <__assert_func>
 80162d2:	2301      	movs	r3, #1
 80162d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80162d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162dc:	bfa4      	itt	ge
 80162de:	4643      	movge	r3, r8
 80162e0:	46a0      	movge	r8, r4
 80162e2:	4630      	mov	r0, r6
 80162e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80162e8:	bfa6      	itte	ge
 80162ea:	461c      	movge	r4, r3
 80162ec:	2500      	movge	r5, #0
 80162ee:	2501      	movlt	r5, #1
 80162f0:	f7ff fd40 	bl	8015d74 <_Balloc>
 80162f4:	b920      	cbnz	r0, 8016300 <__mdiff+0x5c>
 80162f6:	4b2e      	ldr	r3, [pc, #184]	; (80163b0 <__mdiff+0x10c>)
 80162f8:	4602      	mov	r2, r0
 80162fa:	f240 2145 	movw	r1, #581	; 0x245
 80162fe:	e7e5      	b.n	80162cc <__mdiff+0x28>
 8016300:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016304:	6926      	ldr	r6, [r4, #16]
 8016306:	60c5      	str	r5, [r0, #12]
 8016308:	f104 0914 	add.w	r9, r4, #20
 801630c:	f108 0514 	add.w	r5, r8, #20
 8016310:	f100 0e14 	add.w	lr, r0, #20
 8016314:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016318:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801631c:	f108 0210 	add.w	r2, r8, #16
 8016320:	46f2      	mov	sl, lr
 8016322:	2100      	movs	r1, #0
 8016324:	f859 3b04 	ldr.w	r3, [r9], #4
 8016328:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801632c:	fa11 f88b 	uxtah	r8, r1, fp
 8016330:	b299      	uxth	r1, r3
 8016332:	0c1b      	lsrs	r3, r3, #16
 8016334:	eba8 0801 	sub.w	r8, r8, r1
 8016338:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801633c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016340:	fa1f f888 	uxth.w	r8, r8
 8016344:	1419      	asrs	r1, r3, #16
 8016346:	454e      	cmp	r6, r9
 8016348:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801634c:	f84a 3b04 	str.w	r3, [sl], #4
 8016350:	d8e8      	bhi.n	8016324 <__mdiff+0x80>
 8016352:	1b33      	subs	r3, r6, r4
 8016354:	3b15      	subs	r3, #21
 8016356:	f023 0303 	bic.w	r3, r3, #3
 801635a:	3304      	adds	r3, #4
 801635c:	3415      	adds	r4, #21
 801635e:	42a6      	cmp	r6, r4
 8016360:	bf38      	it	cc
 8016362:	2304      	movcc	r3, #4
 8016364:	441d      	add	r5, r3
 8016366:	4473      	add	r3, lr
 8016368:	469e      	mov	lr, r3
 801636a:	462e      	mov	r6, r5
 801636c:	4566      	cmp	r6, ip
 801636e:	d30e      	bcc.n	801638e <__mdiff+0xea>
 8016370:	f10c 0203 	add.w	r2, ip, #3
 8016374:	1b52      	subs	r2, r2, r5
 8016376:	f022 0203 	bic.w	r2, r2, #3
 801637a:	3d03      	subs	r5, #3
 801637c:	45ac      	cmp	ip, r5
 801637e:	bf38      	it	cc
 8016380:	2200      	movcc	r2, #0
 8016382:	4413      	add	r3, r2
 8016384:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016388:	b17a      	cbz	r2, 80163aa <__mdiff+0x106>
 801638a:	6107      	str	r7, [r0, #16]
 801638c:	e7a4      	b.n	80162d8 <__mdiff+0x34>
 801638e:	f856 8b04 	ldr.w	r8, [r6], #4
 8016392:	fa11 f288 	uxtah	r2, r1, r8
 8016396:	1414      	asrs	r4, r2, #16
 8016398:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801639c:	b292      	uxth	r2, r2
 801639e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80163a2:	f84e 2b04 	str.w	r2, [lr], #4
 80163a6:	1421      	asrs	r1, r4, #16
 80163a8:	e7e0      	b.n	801636c <__mdiff+0xc8>
 80163aa:	3f01      	subs	r7, #1
 80163ac:	e7ea      	b.n	8016384 <__mdiff+0xe0>
 80163ae:	bf00      	nop
 80163b0:	0802e174 	.word	0x0802e174
 80163b4:	0802e185 	.word	0x0802e185

080163b8 <__d2b>:
 80163b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80163bc:	460f      	mov	r7, r1
 80163be:	2101      	movs	r1, #1
 80163c0:	ec59 8b10 	vmov	r8, r9, d0
 80163c4:	4616      	mov	r6, r2
 80163c6:	f7ff fcd5 	bl	8015d74 <_Balloc>
 80163ca:	4604      	mov	r4, r0
 80163cc:	b930      	cbnz	r0, 80163dc <__d2b+0x24>
 80163ce:	4602      	mov	r2, r0
 80163d0:	4b24      	ldr	r3, [pc, #144]	; (8016464 <__d2b+0xac>)
 80163d2:	4825      	ldr	r0, [pc, #148]	; (8016468 <__d2b+0xb0>)
 80163d4:	f240 310f 	movw	r1, #783	; 0x30f
 80163d8:	f000 fb02 	bl	80169e0 <__assert_func>
 80163dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80163e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80163e4:	bb2d      	cbnz	r5, 8016432 <__d2b+0x7a>
 80163e6:	9301      	str	r3, [sp, #4]
 80163e8:	f1b8 0300 	subs.w	r3, r8, #0
 80163ec:	d026      	beq.n	801643c <__d2b+0x84>
 80163ee:	4668      	mov	r0, sp
 80163f0:	9300      	str	r3, [sp, #0]
 80163f2:	f7ff fd87 	bl	8015f04 <__lo0bits>
 80163f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80163fa:	b1e8      	cbz	r0, 8016438 <__d2b+0x80>
 80163fc:	f1c0 0320 	rsb	r3, r0, #32
 8016400:	fa02 f303 	lsl.w	r3, r2, r3
 8016404:	430b      	orrs	r3, r1
 8016406:	40c2      	lsrs	r2, r0
 8016408:	6163      	str	r3, [r4, #20]
 801640a:	9201      	str	r2, [sp, #4]
 801640c:	9b01      	ldr	r3, [sp, #4]
 801640e:	61a3      	str	r3, [r4, #24]
 8016410:	2b00      	cmp	r3, #0
 8016412:	bf14      	ite	ne
 8016414:	2202      	movne	r2, #2
 8016416:	2201      	moveq	r2, #1
 8016418:	6122      	str	r2, [r4, #16]
 801641a:	b1bd      	cbz	r5, 801644c <__d2b+0x94>
 801641c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016420:	4405      	add	r5, r0
 8016422:	603d      	str	r5, [r7, #0]
 8016424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016428:	6030      	str	r0, [r6, #0]
 801642a:	4620      	mov	r0, r4
 801642c:	b003      	add	sp, #12
 801642e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016436:	e7d6      	b.n	80163e6 <__d2b+0x2e>
 8016438:	6161      	str	r1, [r4, #20]
 801643a:	e7e7      	b.n	801640c <__d2b+0x54>
 801643c:	a801      	add	r0, sp, #4
 801643e:	f7ff fd61 	bl	8015f04 <__lo0bits>
 8016442:	9b01      	ldr	r3, [sp, #4]
 8016444:	6163      	str	r3, [r4, #20]
 8016446:	3020      	adds	r0, #32
 8016448:	2201      	movs	r2, #1
 801644a:	e7e5      	b.n	8016418 <__d2b+0x60>
 801644c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016450:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016454:	6038      	str	r0, [r7, #0]
 8016456:	6918      	ldr	r0, [r3, #16]
 8016458:	f7ff fd34 	bl	8015ec4 <__hi0bits>
 801645c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016460:	e7e2      	b.n	8016428 <__d2b+0x70>
 8016462:	bf00      	nop
 8016464:	0802e174 	.word	0x0802e174
 8016468:	0802e185 	.word	0x0802e185

0801646c <__sfputc_r>:
 801646c:	6893      	ldr	r3, [r2, #8]
 801646e:	3b01      	subs	r3, #1
 8016470:	2b00      	cmp	r3, #0
 8016472:	b410      	push	{r4}
 8016474:	6093      	str	r3, [r2, #8]
 8016476:	da08      	bge.n	801648a <__sfputc_r+0x1e>
 8016478:	6994      	ldr	r4, [r2, #24]
 801647a:	42a3      	cmp	r3, r4
 801647c:	db01      	blt.n	8016482 <__sfputc_r+0x16>
 801647e:	290a      	cmp	r1, #10
 8016480:	d103      	bne.n	801648a <__sfputc_r+0x1e>
 8016482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016486:	f7fe bbd6 	b.w	8014c36 <__swbuf_r>
 801648a:	6813      	ldr	r3, [r2, #0]
 801648c:	1c58      	adds	r0, r3, #1
 801648e:	6010      	str	r0, [r2, #0]
 8016490:	7019      	strb	r1, [r3, #0]
 8016492:	4608      	mov	r0, r1
 8016494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016498:	4770      	bx	lr

0801649a <__sfputs_r>:
 801649a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801649c:	4606      	mov	r6, r0
 801649e:	460f      	mov	r7, r1
 80164a0:	4614      	mov	r4, r2
 80164a2:	18d5      	adds	r5, r2, r3
 80164a4:	42ac      	cmp	r4, r5
 80164a6:	d101      	bne.n	80164ac <__sfputs_r+0x12>
 80164a8:	2000      	movs	r0, #0
 80164aa:	e007      	b.n	80164bc <__sfputs_r+0x22>
 80164ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164b0:	463a      	mov	r2, r7
 80164b2:	4630      	mov	r0, r6
 80164b4:	f7ff ffda 	bl	801646c <__sfputc_r>
 80164b8:	1c43      	adds	r3, r0, #1
 80164ba:	d1f3      	bne.n	80164a4 <__sfputs_r+0xa>
 80164bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080164c0 <_vfiprintf_r>:
 80164c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164c4:	460d      	mov	r5, r1
 80164c6:	b09d      	sub	sp, #116	; 0x74
 80164c8:	4614      	mov	r4, r2
 80164ca:	4698      	mov	r8, r3
 80164cc:	4606      	mov	r6, r0
 80164ce:	b118      	cbz	r0, 80164d8 <_vfiprintf_r+0x18>
 80164d0:	6a03      	ldr	r3, [r0, #32]
 80164d2:	b90b      	cbnz	r3, 80164d8 <_vfiprintf_r+0x18>
 80164d4:	f7fe fac0 	bl	8014a58 <__sinit>
 80164d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80164da:	07d9      	lsls	r1, r3, #31
 80164dc:	d405      	bmi.n	80164ea <_vfiprintf_r+0x2a>
 80164de:	89ab      	ldrh	r3, [r5, #12]
 80164e0:	059a      	lsls	r2, r3, #22
 80164e2:	d402      	bmi.n	80164ea <_vfiprintf_r+0x2a>
 80164e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80164e6:	f7fe fcb8 	bl	8014e5a <__retarget_lock_acquire_recursive>
 80164ea:	89ab      	ldrh	r3, [r5, #12]
 80164ec:	071b      	lsls	r3, r3, #28
 80164ee:	d501      	bpl.n	80164f4 <_vfiprintf_r+0x34>
 80164f0:	692b      	ldr	r3, [r5, #16]
 80164f2:	b99b      	cbnz	r3, 801651c <_vfiprintf_r+0x5c>
 80164f4:	4629      	mov	r1, r5
 80164f6:	4630      	mov	r0, r6
 80164f8:	f7fe fbda 	bl	8014cb0 <__swsetup_r>
 80164fc:	b170      	cbz	r0, 801651c <_vfiprintf_r+0x5c>
 80164fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016500:	07dc      	lsls	r4, r3, #31
 8016502:	d504      	bpl.n	801650e <_vfiprintf_r+0x4e>
 8016504:	f04f 30ff 	mov.w	r0, #4294967295
 8016508:	b01d      	add	sp, #116	; 0x74
 801650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801650e:	89ab      	ldrh	r3, [r5, #12]
 8016510:	0598      	lsls	r0, r3, #22
 8016512:	d4f7      	bmi.n	8016504 <_vfiprintf_r+0x44>
 8016514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016516:	f7fe fca1 	bl	8014e5c <__retarget_lock_release_recursive>
 801651a:	e7f3      	b.n	8016504 <_vfiprintf_r+0x44>
 801651c:	2300      	movs	r3, #0
 801651e:	9309      	str	r3, [sp, #36]	; 0x24
 8016520:	2320      	movs	r3, #32
 8016522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016526:	f8cd 800c 	str.w	r8, [sp, #12]
 801652a:	2330      	movs	r3, #48	; 0x30
 801652c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80166e0 <_vfiprintf_r+0x220>
 8016530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016534:	f04f 0901 	mov.w	r9, #1
 8016538:	4623      	mov	r3, r4
 801653a:	469a      	mov	sl, r3
 801653c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016540:	b10a      	cbz	r2, 8016546 <_vfiprintf_r+0x86>
 8016542:	2a25      	cmp	r2, #37	; 0x25
 8016544:	d1f9      	bne.n	801653a <_vfiprintf_r+0x7a>
 8016546:	ebba 0b04 	subs.w	fp, sl, r4
 801654a:	d00b      	beq.n	8016564 <_vfiprintf_r+0xa4>
 801654c:	465b      	mov	r3, fp
 801654e:	4622      	mov	r2, r4
 8016550:	4629      	mov	r1, r5
 8016552:	4630      	mov	r0, r6
 8016554:	f7ff ffa1 	bl	801649a <__sfputs_r>
 8016558:	3001      	adds	r0, #1
 801655a:	f000 80a9 	beq.w	80166b0 <_vfiprintf_r+0x1f0>
 801655e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016560:	445a      	add	r2, fp
 8016562:	9209      	str	r2, [sp, #36]	; 0x24
 8016564:	f89a 3000 	ldrb.w	r3, [sl]
 8016568:	2b00      	cmp	r3, #0
 801656a:	f000 80a1 	beq.w	80166b0 <_vfiprintf_r+0x1f0>
 801656e:	2300      	movs	r3, #0
 8016570:	f04f 32ff 	mov.w	r2, #4294967295
 8016574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016578:	f10a 0a01 	add.w	sl, sl, #1
 801657c:	9304      	str	r3, [sp, #16]
 801657e:	9307      	str	r3, [sp, #28]
 8016580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016584:	931a      	str	r3, [sp, #104]	; 0x68
 8016586:	4654      	mov	r4, sl
 8016588:	2205      	movs	r2, #5
 801658a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801658e:	4854      	ldr	r0, [pc, #336]	; (80166e0 <_vfiprintf_r+0x220>)
 8016590:	f7e9 fe06 	bl	80001a0 <memchr>
 8016594:	9a04      	ldr	r2, [sp, #16]
 8016596:	b9d8      	cbnz	r0, 80165d0 <_vfiprintf_r+0x110>
 8016598:	06d1      	lsls	r1, r2, #27
 801659a:	bf44      	itt	mi
 801659c:	2320      	movmi	r3, #32
 801659e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80165a2:	0713      	lsls	r3, r2, #28
 80165a4:	bf44      	itt	mi
 80165a6:	232b      	movmi	r3, #43	; 0x2b
 80165a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80165ac:	f89a 3000 	ldrb.w	r3, [sl]
 80165b0:	2b2a      	cmp	r3, #42	; 0x2a
 80165b2:	d015      	beq.n	80165e0 <_vfiprintf_r+0x120>
 80165b4:	9a07      	ldr	r2, [sp, #28]
 80165b6:	4654      	mov	r4, sl
 80165b8:	2000      	movs	r0, #0
 80165ba:	f04f 0c0a 	mov.w	ip, #10
 80165be:	4621      	mov	r1, r4
 80165c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80165c4:	3b30      	subs	r3, #48	; 0x30
 80165c6:	2b09      	cmp	r3, #9
 80165c8:	d94d      	bls.n	8016666 <_vfiprintf_r+0x1a6>
 80165ca:	b1b0      	cbz	r0, 80165fa <_vfiprintf_r+0x13a>
 80165cc:	9207      	str	r2, [sp, #28]
 80165ce:	e014      	b.n	80165fa <_vfiprintf_r+0x13a>
 80165d0:	eba0 0308 	sub.w	r3, r0, r8
 80165d4:	fa09 f303 	lsl.w	r3, r9, r3
 80165d8:	4313      	orrs	r3, r2
 80165da:	9304      	str	r3, [sp, #16]
 80165dc:	46a2      	mov	sl, r4
 80165de:	e7d2      	b.n	8016586 <_vfiprintf_r+0xc6>
 80165e0:	9b03      	ldr	r3, [sp, #12]
 80165e2:	1d19      	adds	r1, r3, #4
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	9103      	str	r1, [sp, #12]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	bfbb      	ittet	lt
 80165ec:	425b      	neglt	r3, r3
 80165ee:	f042 0202 	orrlt.w	r2, r2, #2
 80165f2:	9307      	strge	r3, [sp, #28]
 80165f4:	9307      	strlt	r3, [sp, #28]
 80165f6:	bfb8      	it	lt
 80165f8:	9204      	strlt	r2, [sp, #16]
 80165fa:	7823      	ldrb	r3, [r4, #0]
 80165fc:	2b2e      	cmp	r3, #46	; 0x2e
 80165fe:	d10c      	bne.n	801661a <_vfiprintf_r+0x15a>
 8016600:	7863      	ldrb	r3, [r4, #1]
 8016602:	2b2a      	cmp	r3, #42	; 0x2a
 8016604:	d134      	bne.n	8016670 <_vfiprintf_r+0x1b0>
 8016606:	9b03      	ldr	r3, [sp, #12]
 8016608:	1d1a      	adds	r2, r3, #4
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	9203      	str	r2, [sp, #12]
 801660e:	2b00      	cmp	r3, #0
 8016610:	bfb8      	it	lt
 8016612:	f04f 33ff 	movlt.w	r3, #4294967295
 8016616:	3402      	adds	r4, #2
 8016618:	9305      	str	r3, [sp, #20]
 801661a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80166f0 <_vfiprintf_r+0x230>
 801661e:	7821      	ldrb	r1, [r4, #0]
 8016620:	2203      	movs	r2, #3
 8016622:	4650      	mov	r0, sl
 8016624:	f7e9 fdbc 	bl	80001a0 <memchr>
 8016628:	b138      	cbz	r0, 801663a <_vfiprintf_r+0x17a>
 801662a:	9b04      	ldr	r3, [sp, #16]
 801662c:	eba0 000a 	sub.w	r0, r0, sl
 8016630:	2240      	movs	r2, #64	; 0x40
 8016632:	4082      	lsls	r2, r0
 8016634:	4313      	orrs	r3, r2
 8016636:	3401      	adds	r4, #1
 8016638:	9304      	str	r3, [sp, #16]
 801663a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801663e:	4829      	ldr	r0, [pc, #164]	; (80166e4 <_vfiprintf_r+0x224>)
 8016640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016644:	2206      	movs	r2, #6
 8016646:	f7e9 fdab 	bl	80001a0 <memchr>
 801664a:	2800      	cmp	r0, #0
 801664c:	d03f      	beq.n	80166ce <_vfiprintf_r+0x20e>
 801664e:	4b26      	ldr	r3, [pc, #152]	; (80166e8 <_vfiprintf_r+0x228>)
 8016650:	bb1b      	cbnz	r3, 801669a <_vfiprintf_r+0x1da>
 8016652:	9b03      	ldr	r3, [sp, #12]
 8016654:	3307      	adds	r3, #7
 8016656:	f023 0307 	bic.w	r3, r3, #7
 801665a:	3308      	adds	r3, #8
 801665c:	9303      	str	r3, [sp, #12]
 801665e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016660:	443b      	add	r3, r7
 8016662:	9309      	str	r3, [sp, #36]	; 0x24
 8016664:	e768      	b.n	8016538 <_vfiprintf_r+0x78>
 8016666:	fb0c 3202 	mla	r2, ip, r2, r3
 801666a:	460c      	mov	r4, r1
 801666c:	2001      	movs	r0, #1
 801666e:	e7a6      	b.n	80165be <_vfiprintf_r+0xfe>
 8016670:	2300      	movs	r3, #0
 8016672:	3401      	adds	r4, #1
 8016674:	9305      	str	r3, [sp, #20]
 8016676:	4619      	mov	r1, r3
 8016678:	f04f 0c0a 	mov.w	ip, #10
 801667c:	4620      	mov	r0, r4
 801667e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016682:	3a30      	subs	r2, #48	; 0x30
 8016684:	2a09      	cmp	r2, #9
 8016686:	d903      	bls.n	8016690 <_vfiprintf_r+0x1d0>
 8016688:	2b00      	cmp	r3, #0
 801668a:	d0c6      	beq.n	801661a <_vfiprintf_r+0x15a>
 801668c:	9105      	str	r1, [sp, #20]
 801668e:	e7c4      	b.n	801661a <_vfiprintf_r+0x15a>
 8016690:	fb0c 2101 	mla	r1, ip, r1, r2
 8016694:	4604      	mov	r4, r0
 8016696:	2301      	movs	r3, #1
 8016698:	e7f0      	b.n	801667c <_vfiprintf_r+0x1bc>
 801669a:	ab03      	add	r3, sp, #12
 801669c:	9300      	str	r3, [sp, #0]
 801669e:	462a      	mov	r2, r5
 80166a0:	4b12      	ldr	r3, [pc, #72]	; (80166ec <_vfiprintf_r+0x22c>)
 80166a2:	a904      	add	r1, sp, #16
 80166a4:	4630      	mov	r0, r6
 80166a6:	f7fd fd85 	bl	80141b4 <_printf_float>
 80166aa:	4607      	mov	r7, r0
 80166ac:	1c78      	adds	r0, r7, #1
 80166ae:	d1d6      	bne.n	801665e <_vfiprintf_r+0x19e>
 80166b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166b2:	07d9      	lsls	r1, r3, #31
 80166b4:	d405      	bmi.n	80166c2 <_vfiprintf_r+0x202>
 80166b6:	89ab      	ldrh	r3, [r5, #12]
 80166b8:	059a      	lsls	r2, r3, #22
 80166ba:	d402      	bmi.n	80166c2 <_vfiprintf_r+0x202>
 80166bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166be:	f7fe fbcd 	bl	8014e5c <__retarget_lock_release_recursive>
 80166c2:	89ab      	ldrh	r3, [r5, #12]
 80166c4:	065b      	lsls	r3, r3, #25
 80166c6:	f53f af1d 	bmi.w	8016504 <_vfiprintf_r+0x44>
 80166ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80166cc:	e71c      	b.n	8016508 <_vfiprintf_r+0x48>
 80166ce:	ab03      	add	r3, sp, #12
 80166d0:	9300      	str	r3, [sp, #0]
 80166d2:	462a      	mov	r2, r5
 80166d4:	4b05      	ldr	r3, [pc, #20]	; (80166ec <_vfiprintf_r+0x22c>)
 80166d6:	a904      	add	r1, sp, #16
 80166d8:	4630      	mov	r0, r6
 80166da:	f7fe f80f 	bl	80146fc <_printf_i>
 80166de:	e7e4      	b.n	80166aa <_vfiprintf_r+0x1ea>
 80166e0:	0802e2dc 	.word	0x0802e2dc
 80166e4:	0802e2e6 	.word	0x0802e2e6
 80166e8:	080141b5 	.word	0x080141b5
 80166ec:	0801649b 	.word	0x0801649b
 80166f0:	0802e2e2 	.word	0x0802e2e2

080166f4 <__sflush_r>:
 80166f4:	898a      	ldrh	r2, [r1, #12]
 80166f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166fa:	4605      	mov	r5, r0
 80166fc:	0710      	lsls	r0, r2, #28
 80166fe:	460c      	mov	r4, r1
 8016700:	d458      	bmi.n	80167b4 <__sflush_r+0xc0>
 8016702:	684b      	ldr	r3, [r1, #4]
 8016704:	2b00      	cmp	r3, #0
 8016706:	dc05      	bgt.n	8016714 <__sflush_r+0x20>
 8016708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801670a:	2b00      	cmp	r3, #0
 801670c:	dc02      	bgt.n	8016714 <__sflush_r+0x20>
 801670e:	2000      	movs	r0, #0
 8016710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016716:	2e00      	cmp	r6, #0
 8016718:	d0f9      	beq.n	801670e <__sflush_r+0x1a>
 801671a:	2300      	movs	r3, #0
 801671c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016720:	682f      	ldr	r7, [r5, #0]
 8016722:	6a21      	ldr	r1, [r4, #32]
 8016724:	602b      	str	r3, [r5, #0]
 8016726:	d032      	beq.n	801678e <__sflush_r+0x9a>
 8016728:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801672a:	89a3      	ldrh	r3, [r4, #12]
 801672c:	075a      	lsls	r2, r3, #29
 801672e:	d505      	bpl.n	801673c <__sflush_r+0x48>
 8016730:	6863      	ldr	r3, [r4, #4]
 8016732:	1ac0      	subs	r0, r0, r3
 8016734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016736:	b10b      	cbz	r3, 801673c <__sflush_r+0x48>
 8016738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801673a:	1ac0      	subs	r0, r0, r3
 801673c:	2300      	movs	r3, #0
 801673e:	4602      	mov	r2, r0
 8016740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016742:	6a21      	ldr	r1, [r4, #32]
 8016744:	4628      	mov	r0, r5
 8016746:	47b0      	blx	r6
 8016748:	1c43      	adds	r3, r0, #1
 801674a:	89a3      	ldrh	r3, [r4, #12]
 801674c:	d106      	bne.n	801675c <__sflush_r+0x68>
 801674e:	6829      	ldr	r1, [r5, #0]
 8016750:	291d      	cmp	r1, #29
 8016752:	d82b      	bhi.n	80167ac <__sflush_r+0xb8>
 8016754:	4a29      	ldr	r2, [pc, #164]	; (80167fc <__sflush_r+0x108>)
 8016756:	410a      	asrs	r2, r1
 8016758:	07d6      	lsls	r6, r2, #31
 801675a:	d427      	bmi.n	80167ac <__sflush_r+0xb8>
 801675c:	2200      	movs	r2, #0
 801675e:	6062      	str	r2, [r4, #4]
 8016760:	04d9      	lsls	r1, r3, #19
 8016762:	6922      	ldr	r2, [r4, #16]
 8016764:	6022      	str	r2, [r4, #0]
 8016766:	d504      	bpl.n	8016772 <__sflush_r+0x7e>
 8016768:	1c42      	adds	r2, r0, #1
 801676a:	d101      	bne.n	8016770 <__sflush_r+0x7c>
 801676c:	682b      	ldr	r3, [r5, #0]
 801676e:	b903      	cbnz	r3, 8016772 <__sflush_r+0x7e>
 8016770:	6560      	str	r0, [r4, #84]	; 0x54
 8016772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016774:	602f      	str	r7, [r5, #0]
 8016776:	2900      	cmp	r1, #0
 8016778:	d0c9      	beq.n	801670e <__sflush_r+0x1a>
 801677a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801677e:	4299      	cmp	r1, r3
 8016780:	d002      	beq.n	8016788 <__sflush_r+0x94>
 8016782:	4628      	mov	r0, r5
 8016784:	f7ff f9f6 	bl	8015b74 <_free_r>
 8016788:	2000      	movs	r0, #0
 801678a:	6360      	str	r0, [r4, #52]	; 0x34
 801678c:	e7c0      	b.n	8016710 <__sflush_r+0x1c>
 801678e:	2301      	movs	r3, #1
 8016790:	4628      	mov	r0, r5
 8016792:	47b0      	blx	r6
 8016794:	1c41      	adds	r1, r0, #1
 8016796:	d1c8      	bne.n	801672a <__sflush_r+0x36>
 8016798:	682b      	ldr	r3, [r5, #0]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d0c5      	beq.n	801672a <__sflush_r+0x36>
 801679e:	2b1d      	cmp	r3, #29
 80167a0:	d001      	beq.n	80167a6 <__sflush_r+0xb2>
 80167a2:	2b16      	cmp	r3, #22
 80167a4:	d101      	bne.n	80167aa <__sflush_r+0xb6>
 80167a6:	602f      	str	r7, [r5, #0]
 80167a8:	e7b1      	b.n	801670e <__sflush_r+0x1a>
 80167aa:	89a3      	ldrh	r3, [r4, #12]
 80167ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167b0:	81a3      	strh	r3, [r4, #12]
 80167b2:	e7ad      	b.n	8016710 <__sflush_r+0x1c>
 80167b4:	690f      	ldr	r7, [r1, #16]
 80167b6:	2f00      	cmp	r7, #0
 80167b8:	d0a9      	beq.n	801670e <__sflush_r+0x1a>
 80167ba:	0793      	lsls	r3, r2, #30
 80167bc:	680e      	ldr	r6, [r1, #0]
 80167be:	bf08      	it	eq
 80167c0:	694b      	ldreq	r3, [r1, #20]
 80167c2:	600f      	str	r7, [r1, #0]
 80167c4:	bf18      	it	ne
 80167c6:	2300      	movne	r3, #0
 80167c8:	eba6 0807 	sub.w	r8, r6, r7
 80167cc:	608b      	str	r3, [r1, #8]
 80167ce:	f1b8 0f00 	cmp.w	r8, #0
 80167d2:	dd9c      	ble.n	801670e <__sflush_r+0x1a>
 80167d4:	6a21      	ldr	r1, [r4, #32]
 80167d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80167d8:	4643      	mov	r3, r8
 80167da:	463a      	mov	r2, r7
 80167dc:	4628      	mov	r0, r5
 80167de:	47b0      	blx	r6
 80167e0:	2800      	cmp	r0, #0
 80167e2:	dc06      	bgt.n	80167f2 <__sflush_r+0xfe>
 80167e4:	89a3      	ldrh	r3, [r4, #12]
 80167e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167ea:	81a3      	strh	r3, [r4, #12]
 80167ec:	f04f 30ff 	mov.w	r0, #4294967295
 80167f0:	e78e      	b.n	8016710 <__sflush_r+0x1c>
 80167f2:	4407      	add	r7, r0
 80167f4:	eba8 0800 	sub.w	r8, r8, r0
 80167f8:	e7e9      	b.n	80167ce <__sflush_r+0xda>
 80167fa:	bf00      	nop
 80167fc:	dfbffffe 	.word	0xdfbffffe

08016800 <_fflush_r>:
 8016800:	b538      	push	{r3, r4, r5, lr}
 8016802:	690b      	ldr	r3, [r1, #16]
 8016804:	4605      	mov	r5, r0
 8016806:	460c      	mov	r4, r1
 8016808:	b913      	cbnz	r3, 8016810 <_fflush_r+0x10>
 801680a:	2500      	movs	r5, #0
 801680c:	4628      	mov	r0, r5
 801680e:	bd38      	pop	{r3, r4, r5, pc}
 8016810:	b118      	cbz	r0, 801681a <_fflush_r+0x1a>
 8016812:	6a03      	ldr	r3, [r0, #32]
 8016814:	b90b      	cbnz	r3, 801681a <_fflush_r+0x1a>
 8016816:	f7fe f91f 	bl	8014a58 <__sinit>
 801681a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d0f3      	beq.n	801680a <_fflush_r+0xa>
 8016822:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016824:	07d0      	lsls	r0, r2, #31
 8016826:	d404      	bmi.n	8016832 <_fflush_r+0x32>
 8016828:	0599      	lsls	r1, r3, #22
 801682a:	d402      	bmi.n	8016832 <_fflush_r+0x32>
 801682c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801682e:	f7fe fb14 	bl	8014e5a <__retarget_lock_acquire_recursive>
 8016832:	4628      	mov	r0, r5
 8016834:	4621      	mov	r1, r4
 8016836:	f7ff ff5d 	bl	80166f4 <__sflush_r>
 801683a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801683c:	07da      	lsls	r2, r3, #31
 801683e:	4605      	mov	r5, r0
 8016840:	d4e4      	bmi.n	801680c <_fflush_r+0xc>
 8016842:	89a3      	ldrh	r3, [r4, #12]
 8016844:	059b      	lsls	r3, r3, #22
 8016846:	d4e1      	bmi.n	801680c <_fflush_r+0xc>
 8016848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801684a:	f7fe fb07 	bl	8014e5c <__retarget_lock_release_recursive>
 801684e:	e7dd      	b.n	801680c <_fflush_r+0xc>

08016850 <__swhatbuf_r>:
 8016850:	b570      	push	{r4, r5, r6, lr}
 8016852:	460c      	mov	r4, r1
 8016854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016858:	2900      	cmp	r1, #0
 801685a:	b096      	sub	sp, #88	; 0x58
 801685c:	4615      	mov	r5, r2
 801685e:	461e      	mov	r6, r3
 8016860:	da0d      	bge.n	801687e <__swhatbuf_r+0x2e>
 8016862:	89a3      	ldrh	r3, [r4, #12]
 8016864:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016868:	f04f 0100 	mov.w	r1, #0
 801686c:	bf0c      	ite	eq
 801686e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016872:	2340      	movne	r3, #64	; 0x40
 8016874:	2000      	movs	r0, #0
 8016876:	6031      	str	r1, [r6, #0]
 8016878:	602b      	str	r3, [r5, #0]
 801687a:	b016      	add	sp, #88	; 0x58
 801687c:	bd70      	pop	{r4, r5, r6, pc}
 801687e:	466a      	mov	r2, sp
 8016880:	f000 f87c 	bl	801697c <_fstat_r>
 8016884:	2800      	cmp	r0, #0
 8016886:	dbec      	blt.n	8016862 <__swhatbuf_r+0x12>
 8016888:	9901      	ldr	r1, [sp, #4]
 801688a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801688e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016892:	4259      	negs	r1, r3
 8016894:	4159      	adcs	r1, r3
 8016896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801689a:	e7eb      	b.n	8016874 <__swhatbuf_r+0x24>

0801689c <__smakebuf_r>:
 801689c:	898b      	ldrh	r3, [r1, #12]
 801689e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80168a0:	079d      	lsls	r5, r3, #30
 80168a2:	4606      	mov	r6, r0
 80168a4:	460c      	mov	r4, r1
 80168a6:	d507      	bpl.n	80168b8 <__smakebuf_r+0x1c>
 80168a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80168ac:	6023      	str	r3, [r4, #0]
 80168ae:	6123      	str	r3, [r4, #16]
 80168b0:	2301      	movs	r3, #1
 80168b2:	6163      	str	r3, [r4, #20]
 80168b4:	b002      	add	sp, #8
 80168b6:	bd70      	pop	{r4, r5, r6, pc}
 80168b8:	ab01      	add	r3, sp, #4
 80168ba:	466a      	mov	r2, sp
 80168bc:	f7ff ffc8 	bl	8016850 <__swhatbuf_r>
 80168c0:	9900      	ldr	r1, [sp, #0]
 80168c2:	4605      	mov	r5, r0
 80168c4:	4630      	mov	r0, r6
 80168c6:	f7ff f9c9 	bl	8015c5c <_malloc_r>
 80168ca:	b948      	cbnz	r0, 80168e0 <__smakebuf_r+0x44>
 80168cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168d0:	059a      	lsls	r2, r3, #22
 80168d2:	d4ef      	bmi.n	80168b4 <__smakebuf_r+0x18>
 80168d4:	f023 0303 	bic.w	r3, r3, #3
 80168d8:	f043 0302 	orr.w	r3, r3, #2
 80168dc:	81a3      	strh	r3, [r4, #12]
 80168de:	e7e3      	b.n	80168a8 <__smakebuf_r+0xc>
 80168e0:	89a3      	ldrh	r3, [r4, #12]
 80168e2:	6020      	str	r0, [r4, #0]
 80168e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168e8:	81a3      	strh	r3, [r4, #12]
 80168ea:	9b00      	ldr	r3, [sp, #0]
 80168ec:	6163      	str	r3, [r4, #20]
 80168ee:	9b01      	ldr	r3, [sp, #4]
 80168f0:	6120      	str	r0, [r4, #16]
 80168f2:	b15b      	cbz	r3, 801690c <__smakebuf_r+0x70>
 80168f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168f8:	4630      	mov	r0, r6
 80168fa:	f000 f851 	bl	80169a0 <_isatty_r>
 80168fe:	b128      	cbz	r0, 801690c <__smakebuf_r+0x70>
 8016900:	89a3      	ldrh	r3, [r4, #12]
 8016902:	f023 0303 	bic.w	r3, r3, #3
 8016906:	f043 0301 	orr.w	r3, r3, #1
 801690a:	81a3      	strh	r3, [r4, #12]
 801690c:	89a3      	ldrh	r3, [r4, #12]
 801690e:	431d      	orrs	r5, r3
 8016910:	81a5      	strh	r5, [r4, #12]
 8016912:	e7cf      	b.n	80168b4 <__smakebuf_r+0x18>

08016914 <_putc_r>:
 8016914:	b570      	push	{r4, r5, r6, lr}
 8016916:	460d      	mov	r5, r1
 8016918:	4614      	mov	r4, r2
 801691a:	4606      	mov	r6, r0
 801691c:	b118      	cbz	r0, 8016926 <_putc_r+0x12>
 801691e:	6a03      	ldr	r3, [r0, #32]
 8016920:	b90b      	cbnz	r3, 8016926 <_putc_r+0x12>
 8016922:	f7fe f899 	bl	8014a58 <__sinit>
 8016926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016928:	07d8      	lsls	r0, r3, #31
 801692a:	d405      	bmi.n	8016938 <_putc_r+0x24>
 801692c:	89a3      	ldrh	r3, [r4, #12]
 801692e:	0599      	lsls	r1, r3, #22
 8016930:	d402      	bmi.n	8016938 <_putc_r+0x24>
 8016932:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016934:	f7fe fa91 	bl	8014e5a <__retarget_lock_acquire_recursive>
 8016938:	68a3      	ldr	r3, [r4, #8]
 801693a:	3b01      	subs	r3, #1
 801693c:	2b00      	cmp	r3, #0
 801693e:	60a3      	str	r3, [r4, #8]
 8016940:	da05      	bge.n	801694e <_putc_r+0x3a>
 8016942:	69a2      	ldr	r2, [r4, #24]
 8016944:	4293      	cmp	r3, r2
 8016946:	db12      	blt.n	801696e <_putc_r+0x5a>
 8016948:	b2eb      	uxtb	r3, r5
 801694a:	2b0a      	cmp	r3, #10
 801694c:	d00f      	beq.n	801696e <_putc_r+0x5a>
 801694e:	6823      	ldr	r3, [r4, #0]
 8016950:	1c5a      	adds	r2, r3, #1
 8016952:	6022      	str	r2, [r4, #0]
 8016954:	701d      	strb	r5, [r3, #0]
 8016956:	b2ed      	uxtb	r5, r5
 8016958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801695a:	07da      	lsls	r2, r3, #31
 801695c:	d405      	bmi.n	801696a <_putc_r+0x56>
 801695e:	89a3      	ldrh	r3, [r4, #12]
 8016960:	059b      	lsls	r3, r3, #22
 8016962:	d402      	bmi.n	801696a <_putc_r+0x56>
 8016964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016966:	f7fe fa79 	bl	8014e5c <__retarget_lock_release_recursive>
 801696a:	4628      	mov	r0, r5
 801696c:	bd70      	pop	{r4, r5, r6, pc}
 801696e:	4629      	mov	r1, r5
 8016970:	4622      	mov	r2, r4
 8016972:	4630      	mov	r0, r6
 8016974:	f7fe f95f 	bl	8014c36 <__swbuf_r>
 8016978:	4605      	mov	r5, r0
 801697a:	e7ed      	b.n	8016958 <_putc_r+0x44>

0801697c <_fstat_r>:
 801697c:	b538      	push	{r3, r4, r5, lr}
 801697e:	4d07      	ldr	r5, [pc, #28]	; (801699c <_fstat_r+0x20>)
 8016980:	2300      	movs	r3, #0
 8016982:	4604      	mov	r4, r0
 8016984:	4608      	mov	r0, r1
 8016986:	4611      	mov	r1, r2
 8016988:	602b      	str	r3, [r5, #0]
 801698a:	f7ee faa8 	bl	8004ede <_fstat>
 801698e:	1c43      	adds	r3, r0, #1
 8016990:	d102      	bne.n	8016998 <_fstat_r+0x1c>
 8016992:	682b      	ldr	r3, [r5, #0]
 8016994:	b103      	cbz	r3, 8016998 <_fstat_r+0x1c>
 8016996:	6023      	str	r3, [r4, #0]
 8016998:	bd38      	pop	{r3, r4, r5, pc}
 801699a:	bf00      	nop
 801699c:	20003748 	.word	0x20003748

080169a0 <_isatty_r>:
 80169a0:	b538      	push	{r3, r4, r5, lr}
 80169a2:	4d06      	ldr	r5, [pc, #24]	; (80169bc <_isatty_r+0x1c>)
 80169a4:	2300      	movs	r3, #0
 80169a6:	4604      	mov	r4, r0
 80169a8:	4608      	mov	r0, r1
 80169aa:	602b      	str	r3, [r5, #0]
 80169ac:	f7ee faa7 	bl	8004efe <_isatty>
 80169b0:	1c43      	adds	r3, r0, #1
 80169b2:	d102      	bne.n	80169ba <_isatty_r+0x1a>
 80169b4:	682b      	ldr	r3, [r5, #0]
 80169b6:	b103      	cbz	r3, 80169ba <_isatty_r+0x1a>
 80169b8:	6023      	str	r3, [r4, #0]
 80169ba:	bd38      	pop	{r3, r4, r5, pc}
 80169bc:	20003748 	.word	0x20003748

080169c0 <_sbrk_r>:
 80169c0:	b538      	push	{r3, r4, r5, lr}
 80169c2:	4d06      	ldr	r5, [pc, #24]	; (80169dc <_sbrk_r+0x1c>)
 80169c4:	2300      	movs	r3, #0
 80169c6:	4604      	mov	r4, r0
 80169c8:	4608      	mov	r0, r1
 80169ca:	602b      	str	r3, [r5, #0]
 80169cc:	f7ee fab0 	bl	8004f30 <_sbrk>
 80169d0:	1c43      	adds	r3, r0, #1
 80169d2:	d102      	bne.n	80169da <_sbrk_r+0x1a>
 80169d4:	682b      	ldr	r3, [r5, #0]
 80169d6:	b103      	cbz	r3, 80169da <_sbrk_r+0x1a>
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	bd38      	pop	{r3, r4, r5, pc}
 80169dc:	20003748 	.word	0x20003748

080169e0 <__assert_func>:
 80169e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80169e2:	4614      	mov	r4, r2
 80169e4:	461a      	mov	r2, r3
 80169e6:	4b09      	ldr	r3, [pc, #36]	; (8016a0c <__assert_func+0x2c>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	4605      	mov	r5, r0
 80169ec:	68d8      	ldr	r0, [r3, #12]
 80169ee:	b14c      	cbz	r4, 8016a04 <__assert_func+0x24>
 80169f0:	4b07      	ldr	r3, [pc, #28]	; (8016a10 <__assert_func+0x30>)
 80169f2:	9100      	str	r1, [sp, #0]
 80169f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80169f8:	4906      	ldr	r1, [pc, #24]	; (8016a14 <__assert_func+0x34>)
 80169fa:	462b      	mov	r3, r5
 80169fc:	f000 f844 	bl	8016a88 <fiprintf>
 8016a00:	f000 f854 	bl	8016aac <abort>
 8016a04:	4b04      	ldr	r3, [pc, #16]	; (8016a18 <__assert_func+0x38>)
 8016a06:	461c      	mov	r4, r3
 8016a08:	e7f3      	b.n	80169f2 <__assert_func+0x12>
 8016a0a:	bf00      	nop
 8016a0c:	200000e0 	.word	0x200000e0
 8016a10:	0802e2f7 	.word	0x0802e2f7
 8016a14:	0802e304 	.word	0x0802e304
 8016a18:	0802e332 	.word	0x0802e332

08016a1c <_calloc_r>:
 8016a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a1e:	fba1 2402 	umull	r2, r4, r1, r2
 8016a22:	b94c      	cbnz	r4, 8016a38 <_calloc_r+0x1c>
 8016a24:	4611      	mov	r1, r2
 8016a26:	9201      	str	r2, [sp, #4]
 8016a28:	f7ff f918 	bl	8015c5c <_malloc_r>
 8016a2c:	9a01      	ldr	r2, [sp, #4]
 8016a2e:	4605      	mov	r5, r0
 8016a30:	b930      	cbnz	r0, 8016a40 <_calloc_r+0x24>
 8016a32:	4628      	mov	r0, r5
 8016a34:	b003      	add	sp, #12
 8016a36:	bd30      	pop	{r4, r5, pc}
 8016a38:	220c      	movs	r2, #12
 8016a3a:	6002      	str	r2, [r0, #0]
 8016a3c:	2500      	movs	r5, #0
 8016a3e:	e7f8      	b.n	8016a32 <_calloc_r+0x16>
 8016a40:	4621      	mov	r1, r4
 8016a42:	f7fe f98d 	bl	8014d60 <memset>
 8016a46:	e7f4      	b.n	8016a32 <_calloc_r+0x16>

08016a48 <__ascii_mbtowc>:
 8016a48:	b082      	sub	sp, #8
 8016a4a:	b901      	cbnz	r1, 8016a4e <__ascii_mbtowc+0x6>
 8016a4c:	a901      	add	r1, sp, #4
 8016a4e:	b142      	cbz	r2, 8016a62 <__ascii_mbtowc+0x1a>
 8016a50:	b14b      	cbz	r3, 8016a66 <__ascii_mbtowc+0x1e>
 8016a52:	7813      	ldrb	r3, [r2, #0]
 8016a54:	600b      	str	r3, [r1, #0]
 8016a56:	7812      	ldrb	r2, [r2, #0]
 8016a58:	1e10      	subs	r0, r2, #0
 8016a5a:	bf18      	it	ne
 8016a5c:	2001      	movne	r0, #1
 8016a5e:	b002      	add	sp, #8
 8016a60:	4770      	bx	lr
 8016a62:	4610      	mov	r0, r2
 8016a64:	e7fb      	b.n	8016a5e <__ascii_mbtowc+0x16>
 8016a66:	f06f 0001 	mvn.w	r0, #1
 8016a6a:	e7f8      	b.n	8016a5e <__ascii_mbtowc+0x16>

08016a6c <__ascii_wctomb>:
 8016a6c:	b149      	cbz	r1, 8016a82 <__ascii_wctomb+0x16>
 8016a6e:	2aff      	cmp	r2, #255	; 0xff
 8016a70:	bf85      	ittet	hi
 8016a72:	238a      	movhi	r3, #138	; 0x8a
 8016a74:	6003      	strhi	r3, [r0, #0]
 8016a76:	700a      	strbls	r2, [r1, #0]
 8016a78:	f04f 30ff 	movhi.w	r0, #4294967295
 8016a7c:	bf98      	it	ls
 8016a7e:	2001      	movls	r0, #1
 8016a80:	4770      	bx	lr
 8016a82:	4608      	mov	r0, r1
 8016a84:	4770      	bx	lr
	...

08016a88 <fiprintf>:
 8016a88:	b40e      	push	{r1, r2, r3}
 8016a8a:	b503      	push	{r0, r1, lr}
 8016a8c:	4601      	mov	r1, r0
 8016a8e:	ab03      	add	r3, sp, #12
 8016a90:	4805      	ldr	r0, [pc, #20]	; (8016aa8 <fiprintf+0x20>)
 8016a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a96:	6800      	ldr	r0, [r0, #0]
 8016a98:	9301      	str	r3, [sp, #4]
 8016a9a:	f7ff fd11 	bl	80164c0 <_vfiprintf_r>
 8016a9e:	b002      	add	sp, #8
 8016aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016aa4:	b003      	add	sp, #12
 8016aa6:	4770      	bx	lr
 8016aa8:	200000e0 	.word	0x200000e0

08016aac <abort>:
 8016aac:	b508      	push	{r3, lr}
 8016aae:	2006      	movs	r0, #6
 8016ab0:	f000 f82c 	bl	8016b0c <raise>
 8016ab4:	2001      	movs	r0, #1
 8016ab6:	f7ee f9df 	bl	8004e78 <_exit>

08016aba <_raise_r>:
 8016aba:	291f      	cmp	r1, #31
 8016abc:	b538      	push	{r3, r4, r5, lr}
 8016abe:	4604      	mov	r4, r0
 8016ac0:	460d      	mov	r5, r1
 8016ac2:	d904      	bls.n	8016ace <_raise_r+0x14>
 8016ac4:	2316      	movs	r3, #22
 8016ac6:	6003      	str	r3, [r0, #0]
 8016ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8016acc:	bd38      	pop	{r3, r4, r5, pc}
 8016ace:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016ad0:	b112      	cbz	r2, 8016ad8 <_raise_r+0x1e>
 8016ad2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016ad6:	b94b      	cbnz	r3, 8016aec <_raise_r+0x32>
 8016ad8:	4620      	mov	r0, r4
 8016ada:	f000 f831 	bl	8016b40 <_getpid_r>
 8016ade:	462a      	mov	r2, r5
 8016ae0:	4601      	mov	r1, r0
 8016ae2:	4620      	mov	r0, r4
 8016ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ae8:	f000 b818 	b.w	8016b1c <_kill_r>
 8016aec:	2b01      	cmp	r3, #1
 8016aee:	d00a      	beq.n	8016b06 <_raise_r+0x4c>
 8016af0:	1c59      	adds	r1, r3, #1
 8016af2:	d103      	bne.n	8016afc <_raise_r+0x42>
 8016af4:	2316      	movs	r3, #22
 8016af6:	6003      	str	r3, [r0, #0]
 8016af8:	2001      	movs	r0, #1
 8016afa:	e7e7      	b.n	8016acc <_raise_r+0x12>
 8016afc:	2400      	movs	r4, #0
 8016afe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016b02:	4628      	mov	r0, r5
 8016b04:	4798      	blx	r3
 8016b06:	2000      	movs	r0, #0
 8016b08:	e7e0      	b.n	8016acc <_raise_r+0x12>
	...

08016b0c <raise>:
 8016b0c:	4b02      	ldr	r3, [pc, #8]	; (8016b18 <raise+0xc>)
 8016b0e:	4601      	mov	r1, r0
 8016b10:	6818      	ldr	r0, [r3, #0]
 8016b12:	f7ff bfd2 	b.w	8016aba <_raise_r>
 8016b16:	bf00      	nop
 8016b18:	200000e0 	.word	0x200000e0

08016b1c <_kill_r>:
 8016b1c:	b538      	push	{r3, r4, r5, lr}
 8016b1e:	4d07      	ldr	r5, [pc, #28]	; (8016b3c <_kill_r+0x20>)
 8016b20:	2300      	movs	r3, #0
 8016b22:	4604      	mov	r4, r0
 8016b24:	4608      	mov	r0, r1
 8016b26:	4611      	mov	r1, r2
 8016b28:	602b      	str	r3, [r5, #0]
 8016b2a:	f7ee f995 	bl	8004e58 <_kill>
 8016b2e:	1c43      	adds	r3, r0, #1
 8016b30:	d102      	bne.n	8016b38 <_kill_r+0x1c>
 8016b32:	682b      	ldr	r3, [r5, #0]
 8016b34:	b103      	cbz	r3, 8016b38 <_kill_r+0x1c>
 8016b36:	6023      	str	r3, [r4, #0]
 8016b38:	bd38      	pop	{r3, r4, r5, pc}
 8016b3a:	bf00      	nop
 8016b3c:	20003748 	.word	0x20003748

08016b40 <_getpid_r>:
 8016b40:	f7ee b982 	b.w	8004e48 <_getpid>

08016b44 <atan2f>:
 8016b44:	f000 b822 	b.w	8016b8c <__ieee754_atan2f>

08016b48 <sqrtf>:
 8016b48:	b508      	push	{r3, lr}
 8016b4a:	ed2d 8b02 	vpush	{d8}
 8016b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8016b52:	f000 f817 	bl	8016b84 <__ieee754_sqrtf>
 8016b56:	eeb4 8a48 	vcmp.f32	s16, s16
 8016b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5e:	d60c      	bvs.n	8016b7a <sqrtf+0x32>
 8016b60:	eddf 8a07 	vldr	s17, [pc, #28]	; 8016b80 <sqrtf+0x38>
 8016b64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b6c:	d505      	bpl.n	8016b7a <sqrtf+0x32>
 8016b6e:	f7fe f949 	bl	8014e04 <__errno>
 8016b72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8016b76:	2321      	movs	r3, #33	; 0x21
 8016b78:	6003      	str	r3, [r0, #0]
 8016b7a:	ecbd 8b02 	vpop	{d8}
 8016b7e:	bd08      	pop	{r3, pc}
 8016b80:	00000000 	.word	0x00000000

08016b84 <__ieee754_sqrtf>:
 8016b84:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016b88:	4770      	bx	lr
	...

08016b8c <__ieee754_atan2f>:
 8016b8c:	ee10 2a90 	vmov	r2, s1
 8016b90:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8016b94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016b98:	b510      	push	{r4, lr}
 8016b9a:	eef0 7a40 	vmov.f32	s15, s0
 8016b9e:	dc06      	bgt.n	8016bae <__ieee754_atan2f+0x22>
 8016ba0:	ee10 0a10 	vmov	r0, s0
 8016ba4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8016ba8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016bac:	dd04      	ble.n	8016bb8 <__ieee754_atan2f+0x2c>
 8016bae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8016bb6:	bd10      	pop	{r4, pc}
 8016bb8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016bbc:	d103      	bne.n	8016bc6 <__ieee754_atan2f+0x3a>
 8016bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bc2:	f000 b883 	b.w	8016ccc <atanf>
 8016bc6:	1794      	asrs	r4, r2, #30
 8016bc8:	f004 0402 	and.w	r4, r4, #2
 8016bcc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8016bd0:	b943      	cbnz	r3, 8016be4 <__ieee754_atan2f+0x58>
 8016bd2:	2c02      	cmp	r4, #2
 8016bd4:	d05e      	beq.n	8016c94 <__ieee754_atan2f+0x108>
 8016bd6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8016ca8 <__ieee754_atan2f+0x11c>
 8016bda:	2c03      	cmp	r4, #3
 8016bdc:	bf08      	it	eq
 8016bde:	eef0 7a47 	vmoveq.f32	s15, s14
 8016be2:	e7e6      	b.n	8016bb2 <__ieee754_atan2f+0x26>
 8016be4:	b941      	cbnz	r1, 8016bf8 <__ieee754_atan2f+0x6c>
 8016be6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8016cac <__ieee754_atan2f+0x120>
 8016bea:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8016cb0 <__ieee754_atan2f+0x124>
 8016bee:	2800      	cmp	r0, #0
 8016bf0:	bfb8      	it	lt
 8016bf2:	eef0 7a47 	vmovlt.f32	s15, s14
 8016bf6:	e7dc      	b.n	8016bb2 <__ieee754_atan2f+0x26>
 8016bf8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016bfc:	d110      	bne.n	8016c20 <__ieee754_atan2f+0x94>
 8016bfe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016c02:	f104 34ff 	add.w	r4, r4, #4294967295
 8016c06:	d107      	bne.n	8016c18 <__ieee754_atan2f+0x8c>
 8016c08:	2c02      	cmp	r4, #2
 8016c0a:	d846      	bhi.n	8016c9a <__ieee754_atan2f+0x10e>
 8016c0c:	4b29      	ldr	r3, [pc, #164]	; (8016cb4 <__ieee754_atan2f+0x128>)
 8016c0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016c12:	edd3 7a00 	vldr	s15, [r3]
 8016c16:	e7cc      	b.n	8016bb2 <__ieee754_atan2f+0x26>
 8016c18:	2c02      	cmp	r4, #2
 8016c1a:	d841      	bhi.n	8016ca0 <__ieee754_atan2f+0x114>
 8016c1c:	4b26      	ldr	r3, [pc, #152]	; (8016cb8 <__ieee754_atan2f+0x12c>)
 8016c1e:	e7f6      	b.n	8016c0e <__ieee754_atan2f+0x82>
 8016c20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016c24:	d0df      	beq.n	8016be6 <__ieee754_atan2f+0x5a>
 8016c26:	1a5b      	subs	r3, r3, r1
 8016c28:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8016c2c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8016c30:	da1a      	bge.n	8016c68 <__ieee754_atan2f+0xdc>
 8016c32:	2a00      	cmp	r2, #0
 8016c34:	da01      	bge.n	8016c3a <__ieee754_atan2f+0xae>
 8016c36:	313c      	adds	r1, #60	; 0x3c
 8016c38:	db19      	blt.n	8016c6e <__ieee754_atan2f+0xe2>
 8016c3a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8016c3e:	f000 f919 	bl	8016e74 <fabsf>
 8016c42:	f000 f843 	bl	8016ccc <atanf>
 8016c46:	eef0 7a40 	vmov.f32	s15, s0
 8016c4a:	2c01      	cmp	r4, #1
 8016c4c:	d012      	beq.n	8016c74 <__ieee754_atan2f+0xe8>
 8016c4e:	2c02      	cmp	r4, #2
 8016c50:	d017      	beq.n	8016c82 <__ieee754_atan2f+0xf6>
 8016c52:	2c00      	cmp	r4, #0
 8016c54:	d0ad      	beq.n	8016bb2 <__ieee754_atan2f+0x26>
 8016c56:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8016cbc <__ieee754_atan2f+0x130>
 8016c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016c5e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8016cc0 <__ieee754_atan2f+0x134>
 8016c62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c66:	e7a4      	b.n	8016bb2 <__ieee754_atan2f+0x26>
 8016c68:	eddf 7a10 	vldr	s15, [pc, #64]	; 8016cac <__ieee754_atan2f+0x120>
 8016c6c:	e7ed      	b.n	8016c4a <__ieee754_atan2f+0xbe>
 8016c6e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016cc4 <__ieee754_atan2f+0x138>
 8016c72:	e7ea      	b.n	8016c4a <__ieee754_atan2f+0xbe>
 8016c74:	ee17 3a90 	vmov	r3, s15
 8016c78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016c7c:	ee07 3a90 	vmov	s15, r3
 8016c80:	e797      	b.n	8016bb2 <__ieee754_atan2f+0x26>
 8016c82:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8016cbc <__ieee754_atan2f+0x130>
 8016c86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016c8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8016cc0 <__ieee754_atan2f+0x134>
 8016c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c92:	e78e      	b.n	8016bb2 <__ieee754_atan2f+0x26>
 8016c94:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8016cc0 <__ieee754_atan2f+0x134>
 8016c98:	e78b      	b.n	8016bb2 <__ieee754_atan2f+0x26>
 8016c9a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016cc8 <__ieee754_atan2f+0x13c>
 8016c9e:	e788      	b.n	8016bb2 <__ieee754_atan2f+0x26>
 8016ca0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016cc4 <__ieee754_atan2f+0x138>
 8016ca4:	e785      	b.n	8016bb2 <__ieee754_atan2f+0x26>
 8016ca6:	bf00      	nop
 8016ca8:	c0490fdb 	.word	0xc0490fdb
 8016cac:	3fc90fdb 	.word	0x3fc90fdb
 8016cb0:	bfc90fdb 	.word	0xbfc90fdb
 8016cb4:	0802e434 	.word	0x0802e434
 8016cb8:	0802e440 	.word	0x0802e440
 8016cbc:	33bbbd2e 	.word	0x33bbbd2e
 8016cc0:	40490fdb 	.word	0x40490fdb
 8016cc4:	00000000 	.word	0x00000000
 8016cc8:	3f490fdb 	.word	0x3f490fdb

08016ccc <atanf>:
 8016ccc:	b538      	push	{r3, r4, r5, lr}
 8016cce:	ee10 5a10 	vmov	r5, s0
 8016cd2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016cd6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8016cda:	eef0 7a40 	vmov.f32	s15, s0
 8016cde:	db10      	blt.n	8016d02 <atanf+0x36>
 8016ce0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016ce4:	dd04      	ble.n	8016cf0 <atanf+0x24>
 8016ce6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8016cea:	eeb0 0a67 	vmov.f32	s0, s15
 8016cee:	bd38      	pop	{r3, r4, r5, pc}
 8016cf0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8016e28 <atanf+0x15c>
 8016cf4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8016e2c <atanf+0x160>
 8016cf8:	2d00      	cmp	r5, #0
 8016cfa:	bfd8      	it	le
 8016cfc:	eef0 7a47 	vmovle.f32	s15, s14
 8016d00:	e7f3      	b.n	8016cea <atanf+0x1e>
 8016d02:	4b4b      	ldr	r3, [pc, #300]	; (8016e30 <atanf+0x164>)
 8016d04:	429c      	cmp	r4, r3
 8016d06:	dc10      	bgt.n	8016d2a <atanf+0x5e>
 8016d08:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8016d0c:	da0a      	bge.n	8016d24 <atanf+0x58>
 8016d0e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8016e34 <atanf+0x168>
 8016d12:	ee30 7a07 	vadd.f32	s14, s0, s14
 8016d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016d1a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d22:	dce2      	bgt.n	8016cea <atanf+0x1e>
 8016d24:	f04f 33ff 	mov.w	r3, #4294967295
 8016d28:	e013      	b.n	8016d52 <atanf+0x86>
 8016d2a:	f000 f8a3 	bl	8016e74 <fabsf>
 8016d2e:	4b42      	ldr	r3, [pc, #264]	; (8016e38 <atanf+0x16c>)
 8016d30:	429c      	cmp	r4, r3
 8016d32:	dc4f      	bgt.n	8016dd4 <atanf+0x108>
 8016d34:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8016d38:	429c      	cmp	r4, r3
 8016d3a:	dc41      	bgt.n	8016dc0 <atanf+0xf4>
 8016d3c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016d40:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016d44:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016d48:	2300      	movs	r3, #0
 8016d4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016d4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016d52:	1c5a      	adds	r2, r3, #1
 8016d54:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8016d58:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8016e3c <atanf+0x170>
 8016d5c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8016e40 <atanf+0x174>
 8016d60:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8016e44 <atanf+0x178>
 8016d64:	ee66 6a06 	vmul.f32	s13, s12, s12
 8016d68:	eee6 5a87 	vfma.f32	s11, s13, s14
 8016d6c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8016e48 <atanf+0x17c>
 8016d70:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016d74:	eddf 5a35 	vldr	s11, [pc, #212]	; 8016e4c <atanf+0x180>
 8016d78:	eee7 5a26 	vfma.f32	s11, s14, s13
 8016d7c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8016e50 <atanf+0x184>
 8016d80:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016d84:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016e54 <atanf+0x188>
 8016d88:	eee7 5a26 	vfma.f32	s11, s14, s13
 8016d8c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8016e58 <atanf+0x18c>
 8016d90:	eea6 5a87 	vfma.f32	s10, s13, s14
 8016d94:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8016e5c <atanf+0x190>
 8016d98:	eea5 7a26 	vfma.f32	s14, s10, s13
 8016d9c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8016e60 <atanf+0x194>
 8016da0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8016da4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8016e64 <atanf+0x198>
 8016da8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8016dac:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016db0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8016db4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016db8:	d121      	bne.n	8016dfe <atanf+0x132>
 8016dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016dbe:	e794      	b.n	8016cea <atanf+0x1e>
 8016dc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016dc4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016dc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016dcc:	2301      	movs	r3, #1
 8016dce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016dd2:	e7be      	b.n	8016d52 <atanf+0x86>
 8016dd4:	4b24      	ldr	r3, [pc, #144]	; (8016e68 <atanf+0x19c>)
 8016dd6:	429c      	cmp	r4, r3
 8016dd8:	dc0b      	bgt.n	8016df2 <atanf+0x126>
 8016dda:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016de2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016de6:	2302      	movs	r3, #2
 8016de8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016df0:	e7af      	b.n	8016d52 <atanf+0x86>
 8016df2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016df6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016dfa:	2303      	movs	r3, #3
 8016dfc:	e7a9      	b.n	8016d52 <atanf+0x86>
 8016dfe:	4a1b      	ldr	r2, [pc, #108]	; (8016e6c <atanf+0x1a0>)
 8016e00:	491b      	ldr	r1, [pc, #108]	; (8016e70 <atanf+0x1a4>)
 8016e02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016e06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016e0a:	edd3 6a00 	vldr	s13, [r3]
 8016e0e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016e12:	2d00      	cmp	r5, #0
 8016e14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016e18:	edd2 7a00 	vldr	s15, [r2]
 8016e1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e20:	bfb8      	it	lt
 8016e22:	eef1 7a67 	vneglt.f32	s15, s15
 8016e26:	e760      	b.n	8016cea <atanf+0x1e>
 8016e28:	3fc90fdb 	.word	0x3fc90fdb
 8016e2c:	bfc90fdb 	.word	0xbfc90fdb
 8016e30:	3edfffff 	.word	0x3edfffff
 8016e34:	7149f2ca 	.word	0x7149f2ca
 8016e38:	3f97ffff 	.word	0x3f97ffff
 8016e3c:	3c8569d7 	.word	0x3c8569d7
 8016e40:	3d4bda59 	.word	0x3d4bda59
 8016e44:	bd6ef16b 	.word	0xbd6ef16b
 8016e48:	3d886b35 	.word	0x3d886b35
 8016e4c:	3dba2e6e 	.word	0x3dba2e6e
 8016e50:	3e124925 	.word	0x3e124925
 8016e54:	3eaaaaab 	.word	0x3eaaaaab
 8016e58:	bd15a221 	.word	0xbd15a221
 8016e5c:	bd9d8795 	.word	0xbd9d8795
 8016e60:	bde38e38 	.word	0xbde38e38
 8016e64:	be4ccccd 	.word	0xbe4ccccd
 8016e68:	401bffff 	.word	0x401bffff
 8016e6c:	0802e44c 	.word	0x0802e44c
 8016e70:	0802e45c 	.word	0x0802e45c

08016e74 <fabsf>:
 8016e74:	ee10 3a10 	vmov	r3, s0
 8016e78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016e7c:	ee00 3a10 	vmov	s0, r3
 8016e80:	4770      	bx	lr
	...

08016e84 <_init>:
 8016e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e86:	bf00      	nop
 8016e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e8a:	bc08      	pop	{r3}
 8016e8c:	469e      	mov	lr, r3
 8016e8e:	4770      	bx	lr

08016e90 <_fini>:
 8016e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e92:	bf00      	nop
 8016e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e96:	bc08      	pop	{r3}
 8016e98:	469e      	mov	lr, r3
 8016e9a:	4770      	bx	lr
