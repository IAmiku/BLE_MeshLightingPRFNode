<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [BLE_p2pServer\Exe\BLE_p2pServer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image BLE_p2pServer\Exe\BLE_p2pServer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Mar 30 20:03:52 2024
<BR><P>
<H3>Maximum Stack Usage =        672 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
APPE_SysUserEvtRx &rArr; APPE_SysEvtReadyProcessing &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[181]">UART_EndTxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[181]">UART_EndTxTransfer</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3e]">AES1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3f]">AES2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5d]">APPE_SysStatusNot</a> from app_entry.o(i.APPE_SysStatusNot) referenced from app_entry.o(i.MX_APPE_Init)
 <LI><a href="#[5e]">APPE_SysUserEvtRx</a> from app_entry.o(i.APPE_SysUserEvtRx) referenced from app_entry.o(i.MX_APPE_Init)
 <LI><a href="#[50]">Adv_Cancel</a> from app_ble.o(i.Adv_Cancel) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[52]">Adv_Cancel_Req</a> from app_ble.o(i.Adv_Cancel_Req) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[4d]">BLE_StatusNot</a> from app_ble.o(i.BLE_StatusNot) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[4e]">BLE_UserEvtRx</a> from app_ble.o(i.BLE_UserEvtRx) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32wbxx_it.o(i.BusFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[20]">C2SEV_PWR_C2H_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[21]">COMP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[35]">CRS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[51]">Connection_Interval_Update_Req</a> from app_ble.o(i.Connection_Interval_Update_Req) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from stm32wbxx_it.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from stm32wbxx_it.o(i.DMA2_Channel4_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[47]">DMA2_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[48]">DMA2_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[49]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[54]">DbgTrace_TxCpltCallback</a> from dbg_trace.o(i.DbgTrace_TxCpltCallback) referenced from dbg_trace.o(i.DbgTraceWrite)
 <LI><a href="#[54]">DbgTrace_TxCpltCallback</a> from dbg_trace.o(i.DbgTrace_TxCpltCallback) referenced from dbg_trace.o(i.DbgTrace_TxCpltCallback)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32wbxx_it.o(i.DebugMon_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from stm32wbxx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from stm32wbxx_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from stm32wbxx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[41]">FPU_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[59]">HAL_IPCC_RxCallback</a> from stm32wbxx_hal_ipcc.o(i.HAL_IPCC_RxCallback) referenced from stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks)
 <LI><a href="#[5a]">HAL_IPCC_TxCallback</a> from stm32wbxx_hal_ipcc.o(i.HAL_IPCC_TxCallback) referenced from stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks)
 <LI><a href="#[39]">HSEM_IRQHandler</a> from stm32wbxx_it.o(i.HSEM_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32wbxx_it.o(i.HardFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2c]">I2C3_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2b]">I2C3_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[37]">IPCC_C1_RX_IRQHandler</a> from stm32wbxx_it.o(i.IPCC_C1_RX_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[38]">IPCC_C1_TX_IRQHandler</a> from stm32wbxx_it.o(i.IPCC_C1_TX_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3c]">LCD_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3a]">LPTIM1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3b]">LPTIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[30]">LPUART1_IRQHandler</a> from stm32wbxx_it.o(i.LPUART1_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32wbxx_it.o(i.MemManage_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32wbxx_it.o(i.NMI_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5f]">P2PS_Send_Notification</a> from p2p_server_app.o(i.P2PS_Send_Notification) referenced from p2p_server_app.o(i.P2PS_APP_Init)
 <LI><a href="#[28]">PKA_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[c]">PVD_PVM_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[36]">PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[60]">PeerToPeer_Event_Handler</a> from p2p_stm.o(i.PeerToPeer_Event_Handler) referenced from p2p_stm.o(i.P2PS_STM_Init)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32wbxx_it.o(i.PendSV_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3d]">QUADSPI_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[40]">RNG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from stm32wbxx_it.o(i.RTC_WKUP_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5b]">RxCpltCallback</a> from app_entry.o(i.RxCpltCallback) referenced from app_entry.o(i.MX_APPE_Init)
 <LI><a href="#[5b]">RxCpltCallback</a> from app_entry.o(i.RxCpltCallback) referenced from app_entry.o(i.RxCpltCallback)
 <LI><a href="#[31]">SAI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32wbxx_it.o(i.SVC_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[61]">SendFreeBuf</a> from tl_mbox.o(i.SendFreeBuf) referenced from tl_mbox.o(i.TL_MM_EvtDone)
 <LI><a href="#[53]">Switch_OFF_GPIO</a> from app_ble.o(i.Switch_OFF_GPIO) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32wbxx_it.o(i.SysTick_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_stm32wbxx.o(i.SystemInit) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_LSECSS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[68]">TL_BLE_Init</a> from tl_mbox.o(i.TL_BLE_Init) referenced from hci_tl_if.o(i.hci_register_io_bus)
 <LI><a href="#[69]">TL_BLE_SendCmd</a> from tl_mbox.o(i.TL_BLE_SendCmd) referenced from hci_tl_if.o(i.hci_register_io_bus)
 <LI><a href="#[6c]">TL_SYS_Init</a> from tl_mbox.o(i.TL_SYS_Init) referenced from shci_tl_if.o(i.shci_register_io_bus)
 <LI><a href="#[6d]">TL_SYS_SendCmd</a> from tl_mbox.o(i.TL_SYS_SendCmd) referenced from shci_tl_if.o(i.shci_register_io_bus)
 <LI><a href="#[32]">TSC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[6a]">TlCmdEvtReceived</a> from shci_tl.o(i.TlCmdEvtReceived) referenced from shci_tl.o(i.shci_init)
 <LI><a href="#[67]">TlEvtReceived</a> from hci_tl.o(i.TlEvtReceived) referenced from hci_tl.o(i.hci_init)
 <LI><a href="#[6b]">TlUserEvtReceived</a> from shci_tl.o(i.TlUserEvtReceived) referenced from shci_tl.o(i.shci_init)
 <LI><a href="#[55]">UART_DMAAbortOnError</a> from stm32wbxx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32wbxx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[58]">UART_DMAError</a> from stm32wbxx_hal_uart.o(i.UART_DMAError) referenced from stm32wbxx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[56]">UART_DMATransmitCplt</a> from stm32wbxx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32wbxx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[57]">UART_DMATxHalfCplt</a> from stm32wbxx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32wbxx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[62]">UART_RxISR_16BIT</a> from stm32wbxx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32wbxx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[62]">UART_RxISR_16BIT</a> from stm32wbxx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32wbxx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[65]">UART_RxISR_16BIT_FIFOEN</a> from stm32wbxx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN) referenced from stm32wbxx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[63]">UART_RxISR_8BIT</a> from stm32wbxx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32wbxx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[63]">UART_RxISR_8BIT</a> from stm32wbxx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32wbxx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[64]">UART_RxISR_8BIT_FIFOEN</a> from stm32wbxx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN) referenced from stm32wbxx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32wbxx_it.o(i.USART1_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1e]">USB_HP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1f]">USB_LP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32wbxx_it.o(i.UsageFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[66]">fputc</a> from dbg_trace.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4f]">hci_user_evt_proc</a> from hci_tl.o(i.hci_user_evt_proc) referenced from app_ble.o(i.APP_BLE_Init)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5c]">shci_user_evt_proc</a> from shci_tl.o(i.shci_user_evt_proc) referenced from app_entry.o(i.MX_APPE_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[80]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a3]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[1a4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1a5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>AES1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>AES2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>C2SEV_PWR_C2H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a6]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>

<P><STRONG><a name="[145]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxCpltCallback
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[bd]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[18a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdExecute
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ab]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ac]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[77]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ae]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1af]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>APPD_EnableCPU2</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, app_debug.o(i.APPD_EnableCPU2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = APPD_EnableCPU2 &rArr; SHCI_C2_DEBUG_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_DEBUG_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysEvtReadyProcessing
</UL>

<P><STRONG><a name="[85]"></a>APPD_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_debug.o(i.APPD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = APPD_Init &rArr; DbgTraceInit &rArr; DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStopMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGSleepMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTraceInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[93]"></a>APP_BLE_Init</STRONG> (Thumb, 204 bytes, Stack size 88 bytes, app_ble.o(i.APP_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Create
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysEvtReadyProcessing
</UL>

<P><STRONG><a name="[a0]"></a>APP_BLE_Key_Button1_Action</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_ble.o(i.APP_BLE_Key_Button1_Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_BLE_Key_Button1_Action &rArr; P2PS_APP_SW1_Button_Action &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_SW1_Button_Action
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[a2]"></a>APP_BLE_Key_Button2_Action</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ble.o(i.APP_BLE_Key_Button2_Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_BLE_Key_Button2_Action &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[d7]"></a>APP_BLE_Key_Button3_Action</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ble.o(i.APP_BLE_Key_Button3_Action))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[160]"></a>BAS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.BAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[161]"></a>BLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.BLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[af]"></a>BSP_LED_Init</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, stm32wbxx_nucleo.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[a4]"></a>BSP_LED_Off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_nucleo.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_GPIO
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Notification
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_LED_BUTTON_context_Init
</UL>

<P><STRONG><a name="[b1]"></a>BSP_LED_On</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_nucleo.o(i.BSP_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Notification
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[b2]"></a>BSP_PB_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32wbxx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[16e]"></a>BVOPUS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.BVOPUS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>CRS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.CRS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[c3]"></a>CircularQueue_Add</STRONG> (Thumb, 502 bytes, Stack size 56 bytes, stm_queue.o(i.CircularQueue_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CircularQueue_Add &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTraceWrite
</UL>

<P><STRONG><a name="[ca]"></a>CircularQueue_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm_queue.o(i.CircularQueue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CircularQueue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTraceInit
</UL>

<P><STRONG><a name="[cc]"></a>CircularQueue_Remove</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, stm_queue.o(i.CircularQueue_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CircularQueue_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTrace_TxCpltCallback
</UL>

<P><STRONG><a name="[cd]"></a>CircularQueue_Sense</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm_queue.o(i.CircularQueue_Sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CircularQueue_Sense
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTrace_TxCpltCallback
</UL>

<P><STRONG><a name="[163]"></a>DIS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.DIS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.DMA2_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>DbgOutputInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_debug.o(i.DbgOutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTraceInit
</UL>

<P><STRONG><a name="[c8]"></a>DbgOutputTraces</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_debug.o(i.DbgOutputTraces))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DbgOutputTraces &rArr; HW_UART_Transmit_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTraceWrite
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTrace_TxCpltCallback
</UL>

<P><STRONG><a name="[88]"></a>DbgTraceInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dbg_trace.o(i.DbgTraceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = DbgTraceInit &rArr; DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[cb]"></a>DbgTraceWrite</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dbg_trace.o(i.DbgTraceWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DbgTraceWrite &rArr; CircularQueue_Add &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputTraces
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>EDS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.EDS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; APP_BLE_Key_Button2_Action &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; APP_BLE_Key_Button2_Action &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; APP_BLE_Key_Button2_Action &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>

<P><STRONG><a name="[86]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_DBGMCU_EnableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[87]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_DBGMCU_EnableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_DMAEx_ConfigMuxSync</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32wbxx_hal_dma_ex.o(i.HAL_DMAEx_ConfigMuxSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMAEx_ConfigMuxSync
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[10e]"></a>HAL_DMA_Abort</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32wbxx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32wbxx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32wbxx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_DMA_Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32wbxx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[d2]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32wbxx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[b5]"></a>HAL_Delay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_entry.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickFreq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[18b]"></a>HAL_EXTI_GenerateSWI</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32wbxx_hal_exti.o(i.HAL_EXTI_GenerateSWI))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdExecute
</UL>

<P><STRONG><a name="[d6]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_entry.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; APP_BLE_Key_Button2_Action &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Key_Button3_Action
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Key_Button2_Action
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Key_Button1_Action
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; APP_BLE_Key_Button2_Action &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 376 bytes, Stack size 36 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[8e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wbxx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>

<P><STRONG><a name="[d4]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
</UL>

<P><STRONG><a name="[d5]"></a>HAL_GetTickFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[f3]"></a>HAL_GetTickPrio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_GetTickPrio))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d9]"></a>HAL_HSEM_FreeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_hsem.o(i.HAL_HSEM_FreeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_HSEM_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32wbxx_hal_hsem.o(i.HAL_HSEM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HSEM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_FreeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSEM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_IPCC_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32wbxx_hal_ipcc.o(i.HAL_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_IPCC_Init &rArr; HAL_IPCC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_SetDefaultCallbacks
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_Reset_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>HAL_IPCC_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.HAL_IPCC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IPCC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[59]"></a>HAL_IPCC_RxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(i.HAL_IPCC_RxCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks)
</UL>
<P><STRONG><a name="[5a]"></a>HAL_IPCC_TxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(i.HAL_IPCC_TxCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks)
</UL>
<P><STRONG><a name="[172]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[df]"></a>HAL_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>HAL_InitTick</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32wbxx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>

<P><STRONG><a name="[134]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[b4]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>

<P><STRONG><a name="[b3]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e0]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[154]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[e8]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Device
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e6]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRNGClockSource
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetCLK48ClockSource
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickPrio
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f5]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[f9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1360 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetRange
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_SetCalibTrimming
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsReady
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSI1_IsReady
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibTrimming
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RNG_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32wbxx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 56 bytes, Stack size 88 bytes, stm32wbxx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RNG_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB3_GRP1_EnableClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32wbxx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[101]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, stm32wbxx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>HAL_RTC_Init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, stm32wbxx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, stm32wbxx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32wbxx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[e4]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[143]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32wbxx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[113]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart_ex.o(i.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32wbxx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32wbxx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart_ex.o(i.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[10a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 766 bytes, Stack size 24 bytes, stm32wbxx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_UART_MspInit</STRONG> (Thumb, 344 bytes, Stack size 160 bytes, stm32wbxx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_ConfigMuxSync
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Receive_IT
</UL>

<P><STRONG><a name="[183]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hw_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[11d]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32wbxx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[111]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hw_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[182]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[165]"></a>HIDS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.HIDS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[166]"></a>HRS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.HRS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[39]"></a>HSEM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.HSEM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HSEM_IRQHandler &rArr; HAL_HSEM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>HTS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.HTS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[12c]"></a>HW_IPCC_BLE_AclDataAckNot</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tl_mbox.o(i.HW_IPCC_BLE_AclDataAckNot))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[175]"></a>HW_IPCC_BLE_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_BLE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
</UL>

<P><STRONG><a name="[11e]"></a>HW_IPCC_BLE_RxEvtNot</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tl_mbox.o(i.HW_IPCC_BLE_RxEvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_BLE_RxEvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[176]"></a>HW_IPCC_BLE_SendCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_BLE_SendCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_SendCmd
</UL>

<P><STRONG><a name="[177]"></a>HW_IPCC_Enable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hw_ipcc.o(i.HW_IPCC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
</UL>

<P><STRONG><a name="[122]"></a>HW_IPCC_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hw_ipcc.o(i.HW_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
</UL>

<P><STRONG><a name="[123]"></a>HW_IPCC_MM_SendFreeBuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hw_ipcc.o(i.HW_IPCC_MM_SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_IsActiveFlag_CHx
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>

<P><STRONG><a name="[125]"></a>HW_IPCC_Rx_Handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hw_ipcc.o(i.HW_IPCC_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_IPCC_Rx_Handler &rArr; HW_IPCC_SYS_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_IPCC_IsActiveFlag_CHx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_C1_RX_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>HW_IPCC_SYS_CmdEvtNot</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tl_mbox.o(i.HW_IPCC_SYS_CmdEvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[127]"></a>HW_IPCC_SYS_EvtNot</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tl_mbox.o(i.HW_IPCC_SYS_EvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_SYS_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[179]"></a>HW_IPCC_SYS_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_SYS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
</UL>

<P><STRONG><a name="[17a]"></a>HW_IPCC_SYS_SendCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_SYS_SendCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_SendCmd
</UL>

<P><STRONG><a name="[128]"></a>HW_IPCC_TRACES_EvtNot</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(i.HW_IPCC_TRACES_EvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_IPCC_TRACES_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_EvtReceived
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[17b]"></a>HW_IPCC_TRACES_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_ipcc.o(i.HW_IPCC_TRACES_Init))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
</UL>

<P><STRONG><a name="[12b]"></a>HW_IPCC_Tx_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hw_ipcc.o(i.HW_IPCC_Tx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_Tx_Handler &rArr; HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C1_IPCC_IsActiveFlag_CHx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_CmdEvtNot
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_AclDataAckNot
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_C1_TX_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HW_TS_Create</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, hw_timerserver.o(i.HW_TS_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HW_TS_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[12d]"></a>HW_TS_Init</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, hw_timerserver.o(i.HW_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_TS_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[131]"></a>HW_TS_RTC_Int_AppNot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_timerserver.o(i.HW_TS_RTC_Int_AppNot))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[130]"></a>HW_TS_RTC_Wakeup_Handler</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, hw_timerserver.o(i.HW_TS_RTC_Wakeup_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HW_TS_RTC_Wakeup_Handler &rArr; HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Int_AppNot
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkTimer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>HW_TS_Start</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, hw_timerserver.o(i.HW_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[a6]"></a>HW_TS_Stop</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, hw_timerserver.o(i.HW_TS_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlinkTimer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[136]"></a>HW_UART_Receive_IT</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hw_uart.o(i.HW_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_UART_Receive_IT &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxCpltCallback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[c9]"></a>HW_UART_Transmit_DMA</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hw_uart.o(i.HW_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_UART_Transmit_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputTraces
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>IAS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.IAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[37]"></a>IPCC_C1_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.IPCC_C1_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IPCC_C1_RX_IRQHandler &rArr; HW_IPCC_Rx_Handler &rArr; HW_IPCC_SYS_EvtNot &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IPCC_C1_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.IPCC_C1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IPCC_C1_TX_IRQHandler &rArr; HW_IPCC_Tx_Handler &rArr; HW_IPCC_SYS_CmdEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>IPCC_Reset_Register</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(i.IPCC_Reset_Register))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[dd]"></a>IPCC_SetDefaultCallbacks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32wbxx_hal_ipcc.o(i.IPCC_SetDefaultCallbacks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPCC_SetDefaultCallbacks
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[13b]"></a>Init_Exti</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_entry.o(i.Init_Exti))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[169]"></a>LLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.LLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[30]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPUART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[174]"></a>LST_init_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm_list.o(i.LST_init_head))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
</UL>

<P><STRONG><a name="[198]"></a>LST_insert_head</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
</UL>

<P><STRONG><a name="[171]"></a>LST_insert_tail</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>

<P><STRONG><a name="[121]"></a>LST_is_empty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[11f]"></a>LST_remove_head</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm_list.o(i.LST_remove_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[137]"></a>LST_remove_node</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(i.LST_remove_node))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
</UL>

<P><STRONG><a name="[16f]"></a>MESH_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.MESH_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[16b]"></a>MOTENV_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.MOTENV_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[138]"></a>MX_APPE_Config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_entry.o(i.MX_APPE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_APPE_Config &rArr; Reset_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>MX_APPE_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, app_entry.o(i.MX_APPE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MX_APPE_Init &rArr; APPD_Init &rArr; DbgTraceInit &rArr; DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Receive_IT
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Exti
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>MX_APPE_Process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(i.MX_APPE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_APPE_Process &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputInit
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>OTAS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.OTAS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[b7]"></a>OTP_Read</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, otp.o(i.OTP_Read))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
</UL>

<P><STRONG><a name="[144]"></a>Osal_MemCpy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[146]"></a>Osal_MemSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_phy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_req
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_filter_accept_list
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_allow_rebond
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[9d]"></a>P2PS_APP_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, p2p_server_app.o(i.P2PS_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = P2PS_APP_Init &rArr; P2PS_APP_LED_BUTTON_context_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_LED_BUTTON_context_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[148]"></a>P2PS_APP_Notification</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, p2p_server_app.o(i.P2PS_APP_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P2PS_APP_Notification &rArr; P2PS_APP_LED_BUTTON_context_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_LED_BUTTON_context_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[a1]"></a>P2PS_APP_SW1_Button_Action</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, p2p_server_app.o(i.P2PS_APP_SW1_Button_Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P2PS_APP_SW1_Button_Action &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Key_Button1_Action
</UL>

<P><STRONG><a name="[149]"></a>P2PS_STM_App_Notification</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, p2p_server_app.o(i.P2PS_STM_App_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = P2PS_STM_App_Notification &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeerToPeer_Event_Handler
</UL>

<P><STRONG><a name="[14a]"></a>P2PS_STM_App_Update_Char</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, p2p_stm.o(i.P2PS_STM_App_Update_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = P2PS_STM_App_Update_Char &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_Send_Notification
</UL>

<P><STRONG><a name="[14b]"></a>P2PS_STM_Init</STRONG> (Thumb, 374 bytes, Stack size 80 bytes, p2p_stm.o(i.P2PS_STM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>PeriphCommonClock_Config</STRONG> (Thumb, 42 bytes, Stack size 88 bytes, main.o(i.PeriphCommonClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PeriphCommonClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32wbxx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; HW_TS_RTC_Wakeup_Handler &rArr; HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>SEQ_BitPosition</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32_seq.o(i.SEQ_BitPosition))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>

<P><STRONG><a name="[98]"></a>SHCI_C2_BLE_Init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, shci.o(i.SHCI_C2_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SHCI_C2_BLE_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[92]"></a>SHCI_C2_Config</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, shci.o(i.SHCI_C2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SHCI_C2_Config &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysEvtReadyProcessing
</UL>

<P><STRONG><a name="[84]"></a>SHCI_C2_DEBUG_Init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, shci.o(i.SHCI_C2_DEBUG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SHCI_C2_DEBUG_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>

<P><STRONG><a name="[95]"></a>SHCI_GetWirelessFwInfo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, shci.o(i.SHCI_GetWirelessFwInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHCI_GetWirelessFwInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[15a]"></a>SVCCTL_App_Notification</STRONG> (Thumb, 1670 bytes, Stack size 56 bytes, app_ble.o(i.SVCCTL_App_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_phy
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_allow_rebond
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Notification
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>

<P><STRONG><a name="[9b]"></a>SVCCTL_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, svc_ctl.o(i.SVCCTL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[170]"></a>SVCCTL_InitCustomSvc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.SVCCTL_InitCustomSvc))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[14c]"></a>SVCCTL_RegisterSvcHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, svc_ctl.o(i.SVCCTL_RegisterSvcHandler))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>

<P><STRONG><a name="[15f]"></a>SVCCTL_SvcInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, svc_ctl.o(i.SVCCTL_SvcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDD_STM_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTAS_STM_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTENV_STM_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESH_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLS_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAS_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDS_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDS_STM_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIS_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_STM_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BVOPUS_STM_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLS_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[ae]"></a>SVCCTL_UserEvtRx</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, svc_ctl.o(i.SVCCTL_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UserEvtRx
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 112 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_stm32wbxx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>TL_BLE_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_BLE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(i.hci_register_io_bus)
</UL>
<P><STRONG><a name="[69]"></a>TL_BLE_SendCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_BLE_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_BLE_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_SendCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(i.hci_register_io_bus)
</UL>
<P><STRONG><a name="[140]"></a>TL_Enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tl_mbox.o(i.TL_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_Enable &rArr; HW_IPCC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[13d]"></a>TL_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tl_mbox.o(i.TL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_Init &rArr; HW_IPCC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[178]"></a>TL_MM_EvtDone</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_MM_EvtDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
</UL>

<P><STRONG><a name="[13f]"></a>TL_MM_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_MM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_MM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[6c]"></a>TL_SYS_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_SYS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(i.shci_register_io_bus)
</UL>
<P><STRONG><a name="[6d]"></a>TL_SYS_SendCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_SYS_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_SYS_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_SendCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputDbgTrace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(i.shci_register_io_bus)
</UL>
<P><STRONG><a name="[12a]"></a>TL_TRACES_EvtReceived</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tl_mbox.o(i.TL_TRACES_EvtReceived))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
</UL>

<P><STRONG><a name="[83]"></a>TL_TRACES_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tl_mbox.o(i.TL_TRACES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_TRACES_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>

<P><STRONG><a name="[16a]"></a>TPS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.TPS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[116]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[118]"></a>UART_CheckIdleState</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32wbxx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[117]"></a>UART_SetConfig</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, stm32wbxx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11c]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, stm32wbxx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[180]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32wbxx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>UTIL_LPM_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_lpm.o(i.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[94]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32_lpm.o(i.UTIL_LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysEvtReadyProcessing
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[184]"></a>UTIL_SEQ_EvtIdle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(i.UTIL_SEQ_EvtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>

<P><STRONG><a name="[187]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(i.UTIL_SEQ_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[ad]"></a>UTIL_SEQ_PauseTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_PauseTask))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[188]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[186]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[97]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_seq.o(i.UTIL_SEQ_RegTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_SEQ_RegTask
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Init
</UL>

<P><STRONG><a name="[ac]"></a>UTIL_SEQ_ResumeTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_ResumeTask))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[142]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32_seq.o(i.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
</UL>

<P><STRONG><a name="[194]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_seq.o(i.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
</UL>

<P><STRONG><a name="[a3]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_seq.o(i.UTIL_SEQ_SetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Key_Button2_Action
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel_Req
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_SW1_Button_Action
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
</UL>

<P><STRONG><a name="[189]"></a>UTIL_SEQ_WaitEvt</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32_seq.o(i.UTIL_SEQ_WaitEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>ZDD_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(i.ZDD_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[18c]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b2]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[90]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdExecute
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxCpltCallback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysEvtReadyProcessing
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysEvtError
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SVC_L2CAP_Conn_Update
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Notification
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_Send_Notification
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_LED_BUTTON_context_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeerToPeer_Event_Handler
</UL>

<P><STRONG><a name="[1b3]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b4]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[15d]"></a>aci_gap_allow_rebond</STRONG> (Thumb, 74 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_allow_rebond))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = aci_gap_allow_rebond &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[c2]"></a>aci_gap_configure_filter_accept_list</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_gap_aci.o(i.aci_gap_configure_filter_accept_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = aci_gap_configure_filter_accept_list &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[bc]"></a>aci_gap_init</STRONG> (Thumb, 132 bytes, Stack size 320 bytes, ble_gap_aci.o(i.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aci_gap_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[15e]"></a>aci_gap_numeric_comparison_value_confirm_yesno</STRONG> (Thumb, 80 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_numeric_comparison_value_confirm_yesno))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = aci_gap_numeric_comparison_value_confirm_yesno &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[15c]"></a>aci_gap_pass_key_resp</STRONG> (Thumb, 80 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_pass_key_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = aci_gap_pass_key_resp &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[c1]"></a>aci_gap_set_authentication_requirement</STRONG> (Thumb, 114 bytes, Stack size 320 bytes, ble_gap_aci.o(i.aci_gap_set_authentication_requirement))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aci_gap_set_authentication_requirement &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[a7]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 160 bytes, Stack size 328 bytes, ble_gap_aci.o(i.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[c0]"></a>aci_gap_set_io_capability</STRONG> (Thumb, 74 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_set_io_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = aci_gap_set_io_capability &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[a5]"></a>aci_gap_set_non_discoverable</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ble_gap_aci.o(i.aci_gap_set_non_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
</UL>

<P><STRONG><a name="[a8]"></a>aci_gap_update_adv_data</STRONG> (Thumb, 88 bytes, Stack size 296 bytes, ble_gap_aci.o(i.aci_gap_update_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = aci_gap_update_adv_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[14e]"></a>aci_gatt_add_char</STRONG> (Thumb, 190 bytes, Stack size 336 bytes, ble_gatt_aci.o(i.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>

<P><STRONG><a name="[14d]"></a>aci_gatt_add_service</STRONG> (Thumb, 170 bytes, Stack size 320 bytes, ble_gatt_aci.o(i.aci_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
</UL>

<P><STRONG><a name="[bb]"></a>aci_gatt_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ble_gatt_aci.o(i.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = aci_gatt_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[be]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 106 bytes, Stack size 304 bytes, ble_gatt_aci.o(i.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Update_Char
</UL>

<P><STRONG><a name="[9c]"></a>aci_hal_set_radio_activity_mask</STRONG> (Thumb, 74 bytes, Stack size 296 bytes, ble_hal_aci.o(i.aci_hal_set_radio_activity_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = aci_hal_set_radio_activity_mask &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[ba]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 80 bytes, Stack size 296 bytes, ble_hal_aci.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[b9]"></a>aci_hal_write_config_data</STRONG> (Thumb, 96 bytes, Stack size 296 bytes, ble_hal_aci.o(i.aci_hal_write_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[ab]"></a>aci_l2cap_connection_parameter_update_req</STRONG> (Thumb, 100 bytes, Stack size 304 bytes, ble_l2cap_aci.o(i.aci_l2cap_connection_parameter_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = aci_l2cap_connection_parameter_update_req &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SVC_L2CAP_Conn_Update
</UL>

<P><STRONG><a name="[66]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dbg_trace.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fputc &rArr; DbgTraceWrite &rArr; CircularQueue_Add &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTraceWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[17e]"></a>hci_cmd_resp_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.hci_cmd_resp_release))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[195]"></a>hci_cmd_resp_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.hci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[96]"></a>hci_init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, hci_tl.o(i.hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_register_io_bus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[15b]"></a>hci_le_read_phy</STRONG> (Thumb, 104 bytes, Stack size 304 bytes, ble_hci_le.o(i.hci_le_read_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = hci_le_read_phy &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[bf]"></a>hci_le_set_default_phy</STRONG> (Thumb, 84 bytes, Stack size 296 bytes, ble_hci_le.o(i.hci_le_set_default_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = hci_le_set_default_phy &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[17d]"></a>hci_notify_asynch_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ble.o(i.hci_notify_asynch_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
</UL>

<P><STRONG><a name="[196]"></a>hci_register_io_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hci_tl_if.o(i.hci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[b8]"></a>hci_reset</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ble_hci_le.o(i.hci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_reset &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[193]"></a>hci_send_req</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, hci_tl.o(i.hci_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotifyCmdStatus
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_phy
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_req
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_filter_accept_list
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_allow_rebond
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[4f]"></a>hci_user_evt_proc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, hci_tl.o(i.hci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; MX_APPE_Init &rArr; APPD_Init &rArr; DbgTraceInit &rArr; DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[17c]"></a>shci_cmd_resp_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(i.shci_cmd_resp_release))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlCmdEvtReceived
</UL>

<P><STRONG><a name="[19c]"></a>shci_cmd_resp_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(i.shci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>

<P><STRONG><a name="[13e]"></a>shci_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, shci_tl.o(i.shci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shci_init &rArr; Cmd_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_SetStatus
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_register_io_bus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[17f]"></a>shci_notify_asynch_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(i.shci_notify_asynch_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
</UL>

<P><STRONG><a name="[19d]"></a>shci_register_io_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shci_tl_if.o(i.shci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
</UL>

<P><STRONG><a name="[159]"></a>shci_send</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, shci_tl.o(i.shci_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_SetStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_DEBUG_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
</UL>

<P><STRONG><a name="[5c]"></a>shci_user_evt_proc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, shci_tl.o(i.shci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(i.MX_APPE_Init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19b]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>APPD_SetCPU2GpioConfig</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, app_debug.o(i.APPD_SetCPU2GpioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = APPD_SetCPU2GpioConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_C2_AHB2_GRP1_EnableClock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[8b]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_debug.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
</UL>

<P><STRONG><a name="[8c]"></a>LL_C2_AHB2_GRP1_EnableClock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_debug.o(i.LL_C2_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_C2_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_SetCPU2GpioConfig
</UL>

<P><STRONG><a name="[8f]"></a>APPE_SysEvtError</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_entry.o(i.APPE_SysEvtError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APPE_SysEvtError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[91]"></a>APPE_SysEvtReadyProcessing</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, app_entry.o(i.APPE_SysEvtReadyProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = APPE_SysEvtReadyProcessing &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[5d]"></a>APPE_SysStatusNot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(i.APPE_SysStatusNot))
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(i.MX_APPE_Init)
</UL>
<P><STRONG><a name="[5e]"></a>APPE_SysUserEvtRx</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, app_entry.o(i.APPE_SysUserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = APPE_SysUserEvtRx &rArr; APPE_SysEvtReadyProcessing &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; P2PS_STM_Init &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysEvtReadyProcessing
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysEvtError
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_GetWirelessFwInfo
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(i.MX_APPE_Init)
</UL>
<P><STRONG><a name="[139]"></a>Reset_Device</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, app_entry.o(i.Reset_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reset_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
</UL>

<P><STRONG><a name="[5b]"></a>RxCpltCallback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, app_entry.o(i.RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RxCpltCallback &rArr; HW_UART_Receive_IT &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Receive_IT
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCmdExecute
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_entry.o(i.MX_APPE_Init)
<LI> app_entry.o(i.RxCpltCallback)
</UL>
<P><STRONG><a name="[158]"></a>UartCmdExecute</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, app_entry.o(i.UartCmdExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartCmdExecute &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GenerateSWI
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxCpltCallback
</UL>

<P><STRONG><a name="[199]"></a>LinkTimerBefore</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hw_timerserver.o(i.LinkTimerBefore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinkTimerBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
</UL>

<P><STRONG><a name="[157]"></a>ReadRtcSsrValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_timerserver.o(i.ReadRtcSsrValue))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>

<P><STRONG><a name="[133]"></a>RescheduleTimerList</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, hw_timerserver.o(i.RescheduleTimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RescheduleTimerList &rArr; RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestartWakeupCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[156]"></a>RestartWakeupCounter</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hw_timerserver.o(i.RestartWakeupCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RestartWakeupCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRtcSsrValue
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>

<P><STRONG><a name="[155]"></a>ReturnTimeElapsed</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hw_timerserver.o(i.ReturnTimeElapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReturnTimeElapsed
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRtcSsrValue
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkTimer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>

<P><STRONG><a name="[132]"></a>UnlinkTimer</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hw_timerserver.o(i.UnlinkTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UnlinkTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[135]"></a>linkTimer</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, hw_timerserver.o(i.linkTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = linkTimer &rArr; LinkTimerBefore
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnTimeElapsed
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkTimerBefore
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
</UL>

<P><STRONG><a name="[119]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[de]"></a>LL_AHB3_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_msp.o(i.LL_AHB3_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB3_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
</UL>

<P><STRONG><a name="[50]"></a>Adv_Cancel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_ble.o(i.Adv_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Adv_Cancel &rArr; aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[52]"></a>Adv_Cancel_Req</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ble.o(i.Adv_Cancel_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adv_Cancel_Req &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[9f]"></a>Adv_Request</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, app_ble.o(i.Adv_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[aa]"></a>BLE_SVC_L2CAP_Conn_Update</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, app_ble.o(i.BLE_SVC_L2CAP_Conn_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = BLE_SVC_L2CAP_Conn_Update &rArr; aci_l2cap_connection_parameter_update_req &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_req
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connection_Interval_Update_Req
</UL>

<P><STRONG><a name="[4d]"></a>BLE_StatusNot</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_ble.o(i.BLE_StatusNot))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_ResumeTask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PauseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[4e]"></a>BLE_UserEvtRx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_ble.o(i.BLE_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = BLE_UserEvtRx &rArr; SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[b6]"></a>BleGetBdAddress</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_ble.o(i.BleGetBdAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BleGetBdAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Hci_Gap_Gatt_Init
</UL>

<P><STRONG><a name="[9a]"></a>Ble_Hci_Gap_Gatt_Init</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, app_ble.o(i.Ble_Hci_Gap_Gatt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Ble_Hci_Gap_Gatt_Init &rArr; aci_gap_set_authentication_requirement &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleGetBdAddress
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_filter_accept_list
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[51]"></a>Connection_Interval_Update_Req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_ble.o(i.Connection_Interval_Update_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Connection_Interval_Update_Req &rArr; BLE_SVC_L2CAP_Conn_Update &rArr; aci_l2cap_connection_parameter_update_req &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SVC_L2CAP_Conn_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[53]"></a>Switch_OFF_GPIO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(i.Switch_OFF_GPIO))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BLE_Init)
</UL>
<P><STRONG><a name="[147]"></a>P2PS_APP_LED_BUTTON_context_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, p2p_server_app.o(i.P2PS_APP_LED_BUTTON_context_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P2PS_APP_LED_BUTTON_context_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Notification
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_APP_Init
</UL>

<P><STRONG><a name="[5f]"></a>P2PS_Send_Notification</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, p2p_server_app.o(i.P2PS_Send_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = P2PS_Send_Notification &rArr; P2PS_STM_App_Update_Char &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Update_Char
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_server_app.o(i.P2PS_APP_Init)
</UL>
<P><STRONG><a name="[124]"></a>LL_C1_IPCC_IsActiveFlag_CHx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_ipcc.o(i.LL_C1_IPCC_IsActiveFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
</UL>

<P><STRONG><a name="[126]"></a>LL_C2_IPCC_IsActiveFlag_CHx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_ipcc.o(i.LL_C2_IPCC_IsActiveFlag_CHx))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[b0]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_nucleo.o(i.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[55]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[58]"></a>UART_DMAError</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32wbxx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAError &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[56]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[57]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[10b]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[181]"></a>UART_EndTxTransfer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[62]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32wbxx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
<LI> stm32wbxx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[65]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, stm32wbxx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_RxISR_16BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[63]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32wbxx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
<LI> stm32wbxx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[64]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, stm32wbxx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_RxISR_8BIT_FIFOEN
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[108]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32wbxx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[f2]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[fd]"></a>LL_RCC_HSI_SetCalibTrimming</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_HSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[fe]"></a>LL_RCC_LSI1_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_LSI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f8]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[f1]"></a>LL_RCC_MSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[fc]"></a>LL_RCC_MSI_SetCalibTrimming</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[fb]"></a>LL_RCC_MSI_SetRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_MSI_SetRange))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f7]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(i.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[153]"></a>RCC_SetFlashLatency</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, stm32wbxx_hal_rcc.o(i.RCC_SetFlashLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[fa]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange &rArr; RCC_SetFlashLatency
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[e9]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[150]"></a>LL_RCC_PLLSAI1_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[152]"></a>LL_RCC_PLLSAI1_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[151]"></a>LL_RCC_PLLSAI1_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_PLLSAI1_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNR
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_ConfigNP
</UL>

<P><STRONG><a name="[ec]"></a>LL_RCC_SetCLK48ClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetCLK48ClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[eb]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetI2CClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_SetI2CClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ea]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ee]"></a>LL_RCC_SetRNGClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(i.LL_RCC_SetRNGClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e7]"></a>RCCEx_PLLSAI1_ConfigNP</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNP
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ed]"></a>RCCEx_PLLSAI1_ConfigNQ</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ef]"></a>RCCEx_PLLSAI1_ConfigNR</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_ConfigNR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_ConfigNR
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_IsReady
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLLSAI1_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[d0]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32wbxx_hal_dma.o(i.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[d1]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wbxx_hal_dma.o(i.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[d3]"></a>DMA_SetConfig</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32wbxx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[e5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[120]"></a>OutputDbgTrace</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tl_mbox.o(i.OutputDbgTrace))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_SendCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_SendCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_CmdEvtNot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
</UL>

<P><STRONG><a name="[61]"></a>SendFreeBuf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tl_mbox.o(i.SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendFreeBuf &rArr; LST_remove_head
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tl_mbox.o(i.TL_MM_EvtDone)
</UL>
<P><STRONG><a name="[54]"></a>DbgTrace_TxCpltCallback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dbg_trace.o(i.DbgTrace_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DbgTrace_TxCpltCallback &rArr; DbgOutputTraces &rArr; HW_UART_Transmit_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputTraces
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Sense
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Remove
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dbg_trace.o(i.DbgTraceWrite)
<LI> dbg_trace.o(i.DbgTrace_TxCpltCallback)
</UL>
<P><STRONG><a name="[60]"></a>PeerToPeer_Event_Handler</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, p2p_stm.o(i.PeerToPeer_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PeerToPeer_Event_Handler &rArr; P2PS_STM_App_Notification &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_App_Notification
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_stm.o(i.P2PS_STM_Init)
</UL>
<P><STRONG><a name="[197]"></a>NotifyCmdStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hci_tl.o(i.NotifyCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[67]"></a>TlEvtReceived</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hci_tl.o(i.TlEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TlEvtReceived &rArr; hci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl.o(i.hci_init)
</UL>
<P><STRONG><a name="[19e]"></a>Cmd_SetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, shci_tl.o(i.Cmd_SetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cmd_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>

<P><STRONG><a name="[6a]"></a>TlCmdEvtReceived</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, shci_tl.o(i.TlCmdEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TlCmdEvtReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(i.shci_init)
</UL>
<P><STRONG><a name="[6b]"></a>TlUserEvtReceived</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shci_tl.o(i.TlUserEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TlUserEvtReceived &rArr; shci_notify_asynch_evt &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(i.shci_init)
</UL>
<P><STRONG><a name="[18e]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18d]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[191]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[190]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
